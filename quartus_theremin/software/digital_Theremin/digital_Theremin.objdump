
digital_Theremin.elf:     file format elf32-littlenios2
digital_Theremin.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001743c memsz 0x000175dc flags rwx
    LOAD off    0x00019000 vaddr 0x097f0000 paddr 0x097f0000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  097f0000  097f0000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000134a4  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002160  040136e8  040136e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  04015848  04015848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a0  0401745c  0401745c  0001845c  2**2
                  ALLOC, SMALL_DATA
  6 .dram_cntrl   00000000  040175fc  040175fc  00019000  2**0
                  CONTENTS
  7 .epcs_cntl_avl_mem 00000000  097f0020  097f0020  00019000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe8  00000000  00000000  00019028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002625f  00000000  00000000  0001a010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009b2a  00000000  00000000  0004026f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c34f  00000000  00000000  00049d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b28  00000000  00000000  000560e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004642  00000000  00000000  00058c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  0005d252  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  00074abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018b8  00000000  00000000  00074b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007a192  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007a195  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007a198  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007a199  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007a19a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007a19e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007a1a2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0007a1a6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0007a1aa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0007a1ae  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000010  00000000  00000000  0007a1b2  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000045  00000000  00000000  0007a1c2  2**0
                  CONTENTS, READONLY
 30 .jdi          00003c95  00000000  00000000  0007a207  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b04f5  00000000  00000000  0007de9c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
097f0000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
040136e8 l    d  .rodata	00000000 .rodata
04015848 l    d  .rwdata	00000000 .rwdata
0401745c l    d  .bss	00000000 .bss
040175fc l    d  .dram_cntrl	00000000 .dram_cntrl
097f0020 l    d  .epcs_cntl_avl_mem	00000000 .epcs_cntl_avl_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../digital_Theremin_bsp//obj/HAL/src/crt0.o
04000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 audio.c
00000000 l    df *ABS*	00000000 bahnschriftCondensed_22.c
00000000 l    df *ABS*	00000000 gui.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 touch_isr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401521e l     O .rodata	00000010 zeroes.4404
0400487c l     F .text	000000bc __sbprintf
0401522e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04004a8c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040065bc l     F .text	00000008 __fp_unlock
040065d0 l     F .text	0000019c __sinit.part.1
0400676c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04015854 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04015c98 l     O .rwdata	00000020 lc_ctype_charset
04015c78 l     O .rwdata	00000020 lc_message_charset
04015cb8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04015260 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04009a20 l     F .text	000000fc __sprint_r.part.0
04015394 l     O .rodata	00000010 blanks.4348
04015384 l     O .rodata	00000010 zeroes.4349
0400afac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0400ed94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400eea0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400eecc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400f258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0400f338 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400f50c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04017448 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400f92c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400fa60 l     F .text	00000034 alt_dev_reg
040162a0 l     O .rwdata	00001060 jtag
04017300 l     O .rwdata	000000dc epcs_cntl
040173dc l     O .rwdata	00000030 audio_and_video_config_0
00000000 l    df *ABS*	00000000 LT24_Controller.c
00000000 l    df *ABS*	00000000 Pitch_generation.c
00000000 l    df *ABS*	00000000 Volume_generation.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04010c24 l     F .text	0000020c altera_avalon_jtag_uart_irq
04010e30 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04011664 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_epcq_controller.c
04011758 l     F .text	00000034 alt_flash_device_register
040121bc l     F .text	00000088 alt_epcq_poll_for_write_in_progress
04012120 l     F .text	0000009c alt_epcq_validate_read_write_arguments
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04012a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04012df0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04012f30 l     F .text	0000003c alt_get_errno
04012f6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
040174a0 g     O .bss	00000004 alt_instruction_exception_handler
04012388 g     F .text	00000038 alt_up_av_config_reset
04009064 g     F .text	00000074 _mprec_log10
040127e0 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
04009150 g     F .text	0000008c __any_on
0400b548 g     F .text	00000054 _isatty_r
0400fe0c g     F .text	00000070 LCD_DrawPoint
0401526c g     O .rodata	00000028 __mprec_tinytens
040123f8 g     F .text	00000034 alt_up_av_config_disable_interrupt
0400f448 g     F .text	0000007c alt_main
040024fc g     F .text	000000c0 _puts_r
040174fc g     O .bss	00000100 alt_irq
0400b59c g     F .text	00000060 _lseek_r
0400d794 g     F .text	00000088 .hidden __eqdf2
04010758 g     F .text	00000028 read_delay_gli
04014d02 g     O .rodata	0000017c arial_22ptDescriptors
040175fc g       *ABS*	00000000 __alt_heap_start
040124bc g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
040024c0 g     F .text	0000003c printf
0400b7b4 g     F .text	0000009c _wcrtomb_r
040098e0 g     F .text	0000005c __sseek
0400690c g     F .text	00000010 __sinit
0400b65c g     F .text	00000140 __swbuf_r
040073d4 g     F .text	0000007c _setlocale_r
04006774 g     F .text	00000068 __sfmoreglue
040009c0 g     F .text	000000d8 draw_vol_antenna_on_off
0400f4e8 g     F .text	00000024 __malloc_unlock
04000ba4 g     F .text	000000d8 draw_glissando_on_off
04010730 g     F .text	00000028 read_freq_pitch
04017410 g     O .rwdata	00000001 pen_IRS_enable
04007f5c g     F .text	0000015c memmove
040068f4 g     F .text	00000018 _cleanup
040081e0 g     F .text	000000a8 _Balloc
04017468 g     O .bss	00000004 ton_delay
0400d81c g     F .text	000000dc .hidden __gtdf2
04013184 g     F .text	00000024 altera_nios2_gen2_irq_init
097f0000 g     F .entry	00000000 __reset
0401740f g     O .rwdata	00000001 CommandGetY
0400fd80 g     F .text	0000008c LCD_Clear
0400b4ec g     F .text	0000005c _fstat_r
04017484 g     O .bss	00000004 errno
0400985c g     F .text	00000008 __seofread
04017490 g     O .bss	00000004 alt_argv
0401f40c g       *ABS*	00000000 _gp
0400f8fc g     F .text	00000030 usleep
04010780 g     F .text	000001e4 get_pixel_pitch_accuracy
040022bc g     F .text	00000068 touch_init
09000000 g       *ABS*	00000000 __alt_mem_epcs_cntl_avl_mem
04016120 g     O .rwdata	00000180 alt_fd_list
04012c08 g     F .text	00000090 alt_find_dev
04002348 g     F .text	00000148 memcpy
0401745c g     O .bss	00000001 cnt_zero
040065c4 g     F .text	0000000c _cleanup_r
0400ea80 g     F .text	000000dc .hidden __floatsidf
04012eb4 g     F .text	0000007c alt_io_redirect
0400d8f8 g     F .text	000000f4 .hidden __ltdf2
040136e8 g       *ABS*	00000000 __DTOR_END__
040025bc g     F .text	00000014 puts
04012d54 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04009740 g     F .text	00000074 __fpclassifyd
04001598 g     F .text	000000c8 get_string_width
04008fc0 g     F .text	000000a4 __ratio
0400af90 g     F .text	0000001c __vfiprintf_internal
040003fc g     F .text	0000010c draw_main_screen
04011028 g     F .text	0000021c altera_avalon_jtag_uart_read
04002490 g     F .text	00000030 _printf_r
0400c544 g     F .text	00000064 .hidden __udivsi3
0400f294 g     F .text	000000a4 isatty
040152bc g     O .rodata	000000c8 __mprec_tens
04007450 g     F .text	0000000c __locale_charset
0400028c g     F .text	00000114 codec_wm8731_init
04017480 g     O .bss	00000004 __malloc_top_pad
04012308 g     F .text	00000080 alt_up_av_config_read_data
0401741c g     O .rwdata	00000004 __mb_cur_max
04007480 g     F .text	0000000c _localeconv_r
040085ec g     F .text	0000003c __i2b
04006d90 g     F .text	000004bc __sfvwrite_r
040097b4 g     F .text	00000054 _sbrk_r
0400b5fc g     F .text	00000060 _read_r
0401743c g     O .rwdata	00000004 alt_max_fd
0400b1e0 g     F .text	000000f0 _fclose_r
0400658c g     F .text	00000030 fflush
0401747c g     O .bss	00000004 __malloc_max_sbrked_mem
0400c600 g     F .text	000008ac .hidden __adddf3
04008d68 g     F .text	0000010c __b2d
0400bf14 g     F .text	00000538 .hidden __umoddi3
0400f374 g     F .text	000000d4 lseek
04017414 g     O .rwdata	00000004 _global_impure_ptr
040091dc g     F .text	00000564 _realloc_r
040175fc g       *ABS*	00000000 __bss_end
0400f168 g     F .text	000000f0 alt_iic_isr_register
0400f7f4 g     F .text	00000108 alt_tick
0400b99c g     F .text	00000578 .hidden __udivdi3
0400b448 g     F .text	00000024 _fputwc_r
04015294 g     O .rodata	00000028 __mprec_bigtens
040083d0 g     F .text	00000104 __s2b
0400eb5c g     F .text	000000a8 .hidden __floatunsidf
04008aa8 g     F .text	00000060 __mcmp
0400692c g     F .text	00000018 __fp_lock_all
0400f11c g     F .text	0000004c alt_ic_irq_enabled
04013706 g     O .rodata	000015fc arial_22ptBitmaps
0400f758 g     F .text	0000009c alt_alarm_stop
04017488 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04010694 g     F .text	00000038 set_cntrl_reg
040160f8 g     O .rwdata	00000028 alt_dev_null
0401065c g     F .text	00000038 set_glissando_delay
04000508 g     F .text	000001b0 draw_calibrating_screen
04011928 g     F .text	00000110 alt_epcq_controller_erase_block
04000e7c g     F .text	000000d8 draw_penta_on_off
040084d4 g     F .text	00000068 __hi0bits
04010704 g     F .text	0000002c done_calibration_pitch
0400ea00 g     F .text	00000080 .hidden __fixdfsi
04010964 g     F .text	00000038 set_calibration_vol_gen
04017434 g     O .rwdata	00000008 alt_dev_list
0400f968 g     F .text	000000f8 write
0400ef08 g     F .text	000000b0 fstat
0400d8f8 g     F .text	000000f4 .hidden __ledf2
04008820 g     F .text	00000140 __pow5mult
04009b34 g     F .text	0000145c ___vfiprintf_internal_r
04017474 g     O .bss	00000004 __nlocale_changed
0400c5a8 g     F .text	00000058 .hidden __umodsi3
0400fc60 g     F .text	00000120 LCD_SetRect
04001fac g     F .text	00000310 touch_isr
040003a0 g     F .text	0000005c set_vol
040175fc g       *ABS*	00000000 end
04010b64 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04001660 g     F .text	000001f0 vid_print_char
040136e8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040116dc g     F .text	0000007c alt_avalon_timer_sc_init
0400ec04 g     F .text	00000064 .hidden __clzsi2
04011244 g     F .text	00000224 altera_avalon_jtag_uart_write
0401745d g     O .bss	00000001 zero_cross
0400691c g     F .text	00000004 __sfp_lock_acquire
04007e78 g     F .text	000000e4 memchr
04011c44 g     F .text	000001e0 alt_epcq_controller_write
04002668 g     F .text	000021f8 ___vfprintf_internal_r
04006a80 g     F .text	00000310 _free_r
0400745c g     F .text	00000010 __locale_mb_cur_max
0400fba8 g     F .text	000000b8 LCD_SetCursor
04013534 g     F .text	00000180 __call_exitprocs
04017470 g     O .bss	00000004 __mlocale_changed
04000914 g     F .text	000000ac draw_update_volume_bar
04000a98 g     F .text	0000010c draw_help_screen
04017420 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	00000048 _start
04011e24 g     F .text	000000ac alt_epcq_controller_read
04017498 g     O .bss	00000004 _alt_tick_rate
04015848 g     O .rwdata	0000000a vol_gain_array
04000dd4 g     F .text	000000a8 draw_update_glissando_delay
04008960 g     F .text	00000148 __lshift
040122a4 g     F .text	00000064 alt_up_av_config_write_data
04011468 g     F .text	000001fc alt_avalon_spi_command
0401749c g     O .bss	00000004 _alt_nticks
0400f548 g     F .text	000000fc read
0400facc g     F .text	0000008c alt_sys_init
0401341c g     F .text	00000118 __register_exitproc
040128e8 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
04008628 g     F .text	000001f8 __multiply
04010ed0 g     F .text	00000068 altera_avalon_jtag_uart_close
0401740e g     O .rwdata	00000001 CommandGetX
040174a4 g     O .bss	00000028 __malloc_current_mallinfo
04008e74 g     F .text	0000014c __d2b
04017464 g     O .bss	00000002 pixel_accuracy_old
040174cc g     O .bss	00000018 my_alarm
04010a00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040132b0 g     F .text	000000a4 alt_get_fd
04012940 g     F .text	00000128 alt_busy_sleep
040109c8 g     F .text	00000038 set_vol_gen
0400b0c8 g     F .text	00000054 _close_r
04000c7c g     F .text	00000158 draw_glissando_set
040133a0 g     F .text	0000007c memcmp
04010ac0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040175fc g       *ABS*	00000000 __alt_stack_base
04010b10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04004938 g     F .text	00000154 __swsetup_r
04017460 g     O .bss	00000004 i2c_dev
0400ceac g     F .text	000008e8 .hidden __divdf3
040067dc g     F .text	00000118 __sfp
040090d8 g     F .text	00000078 __copybits
04015cf0 g     O .rwdata	00000408 __malloc_av_
04006928 g     F .text	00000004 __sinit_lock_release
0400d9ec g     F .text	00000718 .hidden __muldf3
04009808 g     F .text	00000054 __sread
040131a8 g     F .text	00000108 alt_find_file
04012aa4 g     F .text	000000a4 alt_dev_llist_insert
0400f4c4 g     F .text	00000024 __malloc_lock
0400f6a8 g     F .text	000000b0 sbrk
04006530 g     F .text	0000005c _fflush_r
0400b11c g     F .text	000000c4 _calloc_r
04017454 g     O .rwdata	00000008 alt_flash_dev_list
0401745c g       *ABS*	00000000 __bss_start
0400ffec g     F .text	00000670 LCD_Init
040080b8 g     F .text	00000128 memset
040018c4 g     F .text	000006e8 main
04017494 g     O .bss	00000004 alt_envp
04017478 g     O .bss	00000004 __malloc_max_total_mem
04010a60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400b79c g     F .text	00000018 __swbuf
0400993c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400b2d0 g     F .text	00000014 fclose
040007bc g     F .text	00000158 draw_volume_screen
04004c8c g     F .text	00001688 _dtoa_r
0400766c g     F .text	0000080c _malloc_r
0400b910 g     F .text	00000030 __ascii_wctomb
04017440 g     O .rwdata	00000004 alt_errno
0400724c g     F .text	000000c4 _fwalk
0400fb58 g     F .text	00000050 Delay_Ms
0400c44c g     F .text	00000084 .hidden __divsi3
0400695c g     F .text	00000124 _malloc_trim_r
040136e8 g       *ABS*	00000000 __CTOR_END__
04009944 g     F .text	000000dc strcmp
04001850 g     F .text	00000074 alarm_callback
040174e4 g     O .bss	00000018 vol_alarm
040136e8 g       *ABS*	00000000 __DTOR_LIST__
0400d794 g     F .text	00000088 .hidden __nedf2
04012244 g     F .text	00000060 alt_up_av_config_open_dev
0400fa94 g     F .text	00000038 alt_irq_init
0400f644 g     F .text	00000064 alt_release_fd
040153a4 g     O .rodata	00000100 .hidden __clz_tab
04000f54 g     F .text	00000178 draw_display_ton
0401746c g     O .bss	00000004 _PathLocale
04013354 g     F .text	00000014 atexit
0400b068 g     F .text	00000060 _write_r
04012484 g     F .text	00000038 alt_up_av_config_read_ready
0400748c g     F .text	00000018 setlocale
0401740c g     O .rwdata	00000001 cntrl_reg_pitch
04017418 g     O .rwdata	00000004 _impure_ptr
0401748c g     O .bss	00000004 alt_argc
04006314 g     F .text	0000021c __sflush_r
04012ba8 g     F .text	00000060 _do_dtors
04007478 g     F .text	00000008 __locale_cjk_lang
0401189c g     F .text	0000008c alt_epcq_controller_get_info
04000020 g       .exceptions	00000000 alt_irq_entry
04008d04 g     F .text	00000064 __ulp
04006944 g     F .text	00000018 __fp_unlock_all
0401742c g     O .rwdata	00000008 alt_fs_list
04001454 g     F .text	00000144 vid_print_string
040074a4 g     F .text	0000000c localeconv
040123c0 g     F .text	00000038 alt_up_av_config_enable_interrupt
0400efb8 g     F .text	00000050 alt_ic_isr_register
040006b8 g     F .text	00000104 draw_calibrating_screen_done
0401242c g     F .text	00000058 alt_up_av_config_read_acknowledge
04012788 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
0401745c g       *ABS*	00000000 _edata
04011ed0 g     F .text	00000250 altera_epcq_controller_init
040175fc g       *ABS*	00000000 _end
04012c98 g     F .text	00000068 alt_flash_open_dev
0400b2e4 g     F .text	00000164 __fputwc
04010f38 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002324 g     F .text	00000024 get_xy
0400f090 g     F .text	0000008c alt_ic_irq_disable
04009864 g     F .text	0000007c __swrite
04017424 g     O .rwdata	00000004 __malloc_trim_threshold
0400746c g     F .text	0000000c __locale_msgcharset
04013368 g     F .text	00000038 exit
0400fe7c g     F .text	000000d0 LCD_DrawRect
04007310 g     F .text	000000c4 _fwalk_reent
04008b08 g     F .text	000001fc __mdiff
04012d00 g     F .text	00000054 alt_flash_close_dev
04012890 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
0400c4d0 g     F .text	00000074 .hidden __modsi3
0401178c g     F .text	00000110 alt_epcq_controller_lock
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006920 g     F .text	00000004 __sfp_lock_release
0400ff4c g     F .text	000000a0 vid_set_pixel
040136b4 g     F .text	00000034 _exit
0401099c g     F .text	0000002c done_calibration_vol_gen
0400ec68 g     F .text	0000012c alt_alarm_start
04011a38 g     F .text	0000020c alt_epcq_controller_write_block
040074b0 g     F .text	000001bc __smakebuf_r
040025d0 g     F .text	00000098 strlen
04013030 g     F .text	00000154 open
0400d81c g     F .text	000000dc .hidden __gedf2
04012560 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
04017428 g     O .rwdata	00000004 __wctomb
040106cc g     F .text	00000038 set_calibration_pitch
04009b1c g     F .text	00000018 __sprint_r
04000000 g       *ABS*	00000000 __alt_mem_dram_cntrl
04017444 g     O .rwdata	00000004 alt_priority_mask
0400f008 g     F .text	00000088 alt_ic_irq_enable
04004860 g     F .text	0000001c __vfprintf_internal
04012838 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
0400b940 g     F .text	0000005c _wctomb_r
0400e104 g     F .text	000008fc .hidden __subdf3
0400853c g     F .text	000000b0 __lo0bits
0401740d g     O .rwdata	00000001 cntrl_reg_vol
0401744c g     O .rwdata	00000008 alt_alarm_list
04012b48 g     F .text	00000060 _do_ctors
040010cc g     F .text	00000388 draw_display_ton_update
0400b850 g     F .text	000000c0 wcrtomb
0400edd0 g     F .text	000000d0 close
04012648 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
0400b46c g     F .text	00000080 fputwc
04006924 g     F .text	00000004 __sinit_lock_acquire
040082b0 g     F .text	00000120 __multadd
04008288 g     F .text	00000028 _Bfree
04012730 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register



Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	109d3f04 	addi	r2,r2,29948
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	109d3f04 	addi	r2,r2,29948
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__reset+0xfa81012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__reset+0xfa810120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a02517 	ldw	r2,-32620(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a02517 	ldw	r2,-32620(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__reset+0xfa810248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000260:	d6bd0314 	ori	gp,gp,62476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	109d1714 	ori	r2,r2,29788

    movhi r3, %hi(__bss_end)
 400026c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000270:	18dd7f14 	ori	r3,r3,30204

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__reset+0xfa810278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000284:	400f4480 	call	400f448 <alt_main>

04000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000288:	003fff06 	br	4000288 <__reset+0xfa810288>

0400028c <codec_wm8731_init>:
 *--------------------------------------------------*/

alt_u8 vol_gain_array[10] = {3, 10, 17, 24, 31, 38, 45, 52, 59, 66};

void codec_wm8731_init(void)
{
 400028c:	defffe04 	addi	sp,sp,-8
 4000290:	dfc00115 	stw	ra,4(sp)
 4000294:	df000015 	stw	fp,0(sp)
 4000298:	d839883a 	mov	fp,sp
	i2c_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");//Opens the Audio/Video Configuration device specified by name
 400029c:	01010074 	movhi	r4,1025
 40002a0:	210dba04 	addi	r4,r4,14056
 40002a4:	40122440 	call	4012244 <alt_up_av_config_open_dev>
 40002a8:	d0a01515 	stw	r2,-32684(gp)
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x0F,0x000); //Reset
 40002ac:	d0a01517 	ldw	r2,-32684(gp)
 40002b0:	000d883a 	mov	r6,zero
 40002b4:	014003c4 	movi	r5,15
 40002b8:	1009883a 	mov	r4,r2
 40002bc:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x00,0x01A); //Left Line In Enable Mute 80
 40002c0:	d0a01517 	ldw	r2,-32684(gp)
 40002c4:	01800684 	movi	r6,26
 40002c8:	000b883a 	mov	r5,zero
 40002cc:	1009883a 	mov	r4,r2
 40002d0:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x01,0x01A); //Right Line In Enable Mute
 40002d4:	d0a01517 	ldw	r2,-32684(gp)
 40002d8:	01800684 	movi	r6,26
 40002dc:	01400044 	movi	r5,1
 40002e0:	1009883a 	mov	r4,r2
 40002e4:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x02,0x15B); //12FLeft Headphone Out mute Enable Simultaneous Load of LHPVOL[6:0] and LZCEN to RHPVOL[6:0] and RZCEN, zero crossing
 40002e8:	d0a01517 	ldw	r2,-32684(gp)
 40002ec:	018056c4 	movi	r6,347
 40002f0:	01400084 	movi	r5,2
 40002f4:	1009883a 	mov	r4,r2
 40002f8:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x03,0x15B); //Left Headphone Out mute Enable Simultaneous Load of LHPVOL[6:0] and LZCEN to RHPVOL[6:0] and RZCEN, zero crossing
 40002fc:	d0a01517 	ldw	r2,-32684(gp)
 4000300:	018056c4 	movi	r6,347
 4000304:	014000c4 	movi	r5,3
 4000308:	1009883a 	mov	r4,r2
 400030c:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x04,0x010); //Analogue Audio Path Control DAC select
 4000310:	d0a01517 	ldw	r2,-32684(gp)
 4000314:	01800404 	movi	r6,16
 4000318:	01400104 	movi	r5,4
 400031c:	1009883a 	mov	r4,r2
 4000320:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x05,0x007);//DAC Path Control enable high pass filter, 48kHz
 4000324:	d0a01517 	ldw	r2,-32684(gp)
 4000328:	018001c4 	movi	r6,7
 400032c:	01400144 	movi	r5,5
 4000330:	1009883a 	mov	r4,r2
 4000334:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x06,0x000); //Power Down Control enable Power Down for line input, mic input & ADC
 4000338:	d0a01517 	ldw	r2,-32684(gp)
 400033c:	000d883a 	mov	r6,zero
 4000340:	01400184 	movi	r5,6
 4000344:	1009883a 	mov	r4,r2
 4000348:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x07,0x079); //Digital Audio Interface Format Left Justified,  Right Channel DAC Data Left, enable Master Mode
 400034c:	d0a01517 	ldw	r2,-32684(gp)
 4000350:	01801e44 	movi	r6,121
 4000354:	014001c4 	movi	r5,7
 4000358:	1009883a 	mov	r4,r2
 400035c:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x08,0x001); //Sampling Control USB Mode 250fs
 4000360:	d0a01517 	ldw	r2,-32684(gp)
 4000364:	01800044 	movi	r6,1
 4000368:	01400204 	movi	r5,8
 400036c:	1009883a 	mov	r4,r2
 4000370:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x09,0x001); //activat DIGITAL AUDIO INTERFACE
 4000374:	d0a01517 	ldw	r2,-32684(gp)
 4000378:	01800044 	movi	r6,1
 400037c:	01400244 	movi	r5,9
 4000380:	1009883a 	mov	r4,r2
 4000384:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>
}
 4000388:	0001883a 	nop
 400038c:	e037883a 	mov	sp,fp
 4000390:	dfc00117 	ldw	ra,4(sp)
 4000394:	df000017 	ldw	fp,0(sp)
 4000398:	dec00204 	addi	sp,sp,8
 400039c:	f800283a 	ret

040003a0 <set_vol>:

void set_vol(alt_u32 vol_gain)
{
 40003a0:	defffd04 	addi	sp,sp,-12
 40003a4:	dfc00215 	stw	ra,8(sp)
 40003a8:	df000115 	stw	fp,4(sp)
 40003ac:	df000104 	addi	fp,sp,4
 40003b0:	e13fff15 	stw	r4,-4(fp)

	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x02,(vol_gain_array[vol_gain] + 48) | 256);
 40003b4:	d1201517 	ldw	r4,-32684(gp)
 40003b8:	00810074 	movhi	r2,1025
 40003bc:	10961204 	addi	r2,r2,22600
 40003c0:	e0ffff17 	ldw	r3,-4(fp)
 40003c4:	10c5883a 	add	r2,r2,r3
 40003c8:	10800003 	ldbu	r2,0(r2)
 40003cc:	10803fcc 	andi	r2,r2,255
 40003d0:	10800c04 	addi	r2,r2,48
 40003d4:	10804014 	ori	r2,r2,256
 40003d8:	100d883a 	mov	r6,r2
 40003dc:	01400084 	movi	r5,2
 40003e0:	40124bc0 	call	40124bc <alt_up_av_config_write_audio_cfg_register>

}
 40003e4:	0001883a 	nop
 40003e8:	e037883a 	mov	sp,fp
 40003ec:	dfc00117 	ldw	ra,4(sp)
 40003f0:	df000017 	ldw	fp,0(sp)
 40003f4:	dec00204 	addi	sp,sp,8
 40003f8:	f800283a 	ret

040003fc <draw_main_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_main_screen(void)
{
 40003fc:	defffc04 	addi	sp,sp,-16
 4000400:	dfc00315 	stw	ra,12(sp)
 4000404:	df000215 	stw	fp,8(sp)
 4000408:	df000204 	addi	fp,sp,8
	LCD_DrawRect(15,10,75,310,GREY);
 400040c:	00908a04 	movi	r2,16936
 4000410:	d8800015 	stw	r2,0(sp)
 4000414:	01c04d84 	movi	r7,310
 4000418:	018012c4 	movi	r6,75
 400041c:	01400284 	movi	r5,10
 4000420:	010003c4 	movi	r4,15
 4000424:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(80,34,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"Calibrate");
 4000428:	00810074 	movhi	r2,1025
 400042c:	1093a004 	addi	r2,r2,20096
 4000430:	d8800115 	stw	r2,4(sp)
 4000434:	00810074 	movhi	r2,1025
 4000438:	10934084 	addi	r2,r2,19714
 400043c:	d8800015 	stw	r2,0(sp)
 4000440:	01c10074 	movhi	r7,1025
 4000444:	39cdc184 	addi	r7,r7,14086
 4000448:	01bfffc4 	movi	r6,-1
 400044c:	01400884 	movi	r5,34
 4000450:	01001404 	movi	r4,80
 4000454:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(90,10,150,310,GREY);
 4000458:	00908a04 	movi	r2,16936
 400045c:	d8800015 	stw	r2,0(sp)
 4000460:	01c04d84 	movi	r7,310
 4000464:	01802584 	movi	r6,150
 4000468:	01400284 	movi	r5,10
 400046c:	01001684 	movi	r4,90
 4000470:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(80,109,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"Volume");
 4000474:	00810074 	movhi	r2,1025
 4000478:	1093a304 	addi	r2,r2,20108
 400047c:	d8800115 	stw	r2,4(sp)
 4000480:	00810074 	movhi	r2,1025
 4000484:	10934084 	addi	r2,r2,19714
 4000488:	d8800015 	stw	r2,0(sp)
 400048c:	01c10074 	movhi	r7,1025
 4000490:	39cdc184 	addi	r7,r7,14086
 4000494:	01bfffc4 	movi	r6,-1
 4000498:	01401b44 	movi	r5,109
 400049c:	01001404 	movi	r4,80
 40004a0:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(165,10,225,310,GREY);
 40004a4:	00908a04 	movi	r2,16936
 40004a8:	d8800015 	stw	r2,0(sp)
 40004ac:	01c04d84 	movi	r7,310
 40004b0:	01803844 	movi	r6,225
 40004b4:	01400284 	movi	r5,10
 40004b8:	01002944 	movi	r4,165
 40004bc:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(80,184,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"Play Help");
 40004c0:	00810074 	movhi	r2,1025
 40004c4:	1093a504 	addi	r2,r2,20116
 40004c8:	d8800115 	stw	r2,4(sp)
 40004cc:	00810074 	movhi	r2,1025
 40004d0:	10934084 	addi	r2,r2,19714
 40004d4:	d8800015 	stw	r2,0(sp)
 40004d8:	01c10074 	movhi	r7,1025
 40004dc:	39cdc184 	addi	r7,r7,14086
 40004e0:	01bfffc4 	movi	r6,-1
 40004e4:	01402e04 	movi	r5,184
 40004e8:	01001404 	movi	r4,80
 40004ec:	40014540 	call	4001454 <vid_print_string>
}
 40004f0:	0001883a 	nop
 40004f4:	e037883a 	mov	sp,fp
 40004f8:	dfc00117 	ldw	ra,4(sp)
 40004fc:	df000017 	ldw	fp,0(sp)
 4000500:	dec00204 	addi	sp,sp,8
 4000504:	f800283a 	ret

04000508 <draw_calibrating_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_calibrating_screen(alt_u8 cntrl_reg_pitch, alt_u8 cntrl_reg_vol)
{
 4000508:	defff804 	addi	sp,sp,-32
 400050c:	dfc00715 	stw	ra,28(sp)
 4000510:	df000615 	stw	fp,24(sp)
 4000514:	df000604 	addi	fp,sp,24
 4000518:	2007883a 	mov	r3,r4
 400051c:	2805883a 	mov	r2,r5
 4000520:	e0fffe05 	stb	r3,-8(fp)
 4000524:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cnt_point = 0;
 4000528:	e03ffc05 	stb	zero,-16(fp)
	vid_print_string(160 - get_string_width("position hands!"),109,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"position hands!");
 400052c:	01010074 	movhi	r4,1025
 4000530:	2113a804 	addi	r4,r4,20128
 4000534:	40015980 	call	4001598 <get_string_width>
 4000538:	1007883a 	mov	r3,r2
 400053c:	00802804 	movi	r2,160
 4000540:	10c7c83a 	sub	r3,r2,r3
 4000544:	00810074 	movhi	r2,1025
 4000548:	1093a804 	addi	r2,r2,20128
 400054c:	d8800115 	stw	r2,4(sp)
 4000550:	00810074 	movhi	r2,1025
 4000554:	10934084 	addi	r2,r2,19714
 4000558:	d8800015 	stw	r2,0(sp)
 400055c:	01c10074 	movhi	r7,1025
 4000560:	39cdc184 	addi	r7,r7,14086
 4000564:	000d883a 	mov	r6,zero
 4000568:	01401b44 	movi	r5,109
 400056c:	1809883a 	mov	r4,r3
 4000570:	40014540 	call	4001454 <vid_print_string>
	usleep(2000000);
 4000574:	010007f4 	movhi	r4,31
 4000578:	21212004 	addi	r4,r4,-31616
 400057c:	400f8fc0 	call	400f8fc <usleep>
	set_calibration_pitch(cntrl_reg_pitch);
 4000580:	e0bffe03 	ldbu	r2,-8(fp)
 4000584:	1009883a 	mov	r4,r2
 4000588:	40106cc0 	call	40106cc <set_calibration_pitch>
	set_calibration_vol_gen(cntrl_reg_vol);
 400058c:	e0bfff03 	ldbu	r2,-4(fp)
 4000590:	1009883a 	mov	r4,r2
 4000594:	40109640 	call	4010964 <set_calibration_vol_gen>
	LCD_Clear(WHITE);
 4000598:	013fffd4 	movui	r4,65535
 400059c:	400fd800 	call	400fd80 <LCD_Clear>

	while(((done_calibration_pitch()&2) == 2 && (done_calibration_vol_gen()&2) == 2) || cnt_point <= 5){
 40005a0:	00003306 	br	4000670 <draw_calibrating_screen+0x168>
		vid_print_string(160 - get_string_width("calibrating"),50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"calibrating");
 40005a4:	01010074 	movhi	r4,1025
 40005a8:	2113ac04 	addi	r4,r4,20144
 40005ac:	40015980 	call	4001598 <get_string_width>
 40005b0:	1007883a 	mov	r3,r2
 40005b4:	00802804 	movi	r2,160
 40005b8:	10c7c83a 	sub	r3,r2,r3
 40005bc:	00810074 	movhi	r2,1025
 40005c0:	1093ac04 	addi	r2,r2,20144
 40005c4:	d8800115 	stw	r2,4(sp)
 40005c8:	00810074 	movhi	r2,1025
 40005cc:	10934084 	addi	r2,r2,19714
 40005d0:	d8800015 	stw	r2,0(sp)
 40005d4:	01c10074 	movhi	r7,1025
 40005d8:	39cdc184 	addi	r7,r7,14086
 40005dc:	000d883a 	mov	r6,zero
 40005e0:	01400c84 	movi	r5,50
 40005e4:	1809883a 	mov	r4,r3
 40005e8:	40014540 	call	4001454 <vid_print_string>
		for(int i = 0; i < cnt_point; i++){
 40005ec:	e03ffd15 	stw	zero,-12(fp)
 40005f0:	00001206 	br	400063c <draw_calibrating_screen+0x134>
			vid_print_string((138+i*10),100,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,".");
 40005f4:	e0bffd17 	ldw	r2,-12(fp)
 40005f8:	108002a4 	muli	r2,r2,10
 40005fc:	10c02284 	addi	r3,r2,138
 4000600:	00810074 	movhi	r2,1025
 4000604:	1093af04 	addi	r2,r2,20156
 4000608:	d8800115 	stw	r2,4(sp)
 400060c:	00810074 	movhi	r2,1025
 4000610:	10934084 	addi	r2,r2,19714
 4000614:	d8800015 	stw	r2,0(sp)
 4000618:	01c10074 	movhi	r7,1025
 400061c:	39cdc184 	addi	r7,r7,14086
 4000620:	000d883a 	mov	r6,zero
 4000624:	01401904 	movi	r5,100
 4000628:	1809883a 	mov	r4,r3
 400062c:	40014540 	call	4001454 <vid_print_string>
	set_calibration_vol_gen(cntrl_reg_vol);
	LCD_Clear(WHITE);

	while(((done_calibration_pitch()&2) == 2 && (done_calibration_vol_gen()&2) == 2) || cnt_point <= 5){
		vid_print_string(160 - get_string_width("calibrating"),50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"calibrating");
		for(int i = 0; i < cnt_point; i++){
 4000630:	e0bffd17 	ldw	r2,-12(fp)
 4000634:	10800044 	addi	r2,r2,1
 4000638:	e0bffd15 	stw	r2,-12(fp)
 400063c:	e0bffc03 	ldbu	r2,-16(fp)
 4000640:	e0fffd17 	ldw	r3,-12(fp)
 4000644:	18bfeb16 	blt	r3,r2,40005f4 <__reset+0xfa8105f4>
			vid_print_string((138+i*10),100,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,".");
		}
		usleep(1000000);
 4000648:	010003f4 	movhi	r4,15
 400064c:	21109004 	addi	r4,r4,16960
 4000650:	400f8fc0 	call	400f8fc <usleep>
		cnt_point += 1;
 4000654:	e0bffc03 	ldbu	r2,-16(fp)
 4000658:	10800044 	addi	r2,r2,1
 400065c:	e0bffc05 	stb	r2,-16(fp)
		if (cnt_point > 10){
 4000660:	e0bffc03 	ldbu	r2,-16(fp)
 4000664:	108002f0 	cmpltui	r2,r2,11
 4000668:	1000011e 	bne	r2,zero,4000670 <draw_calibrating_screen+0x168>
			cnt_point = 0;
 400066c:	e03ffc05 	stb	zero,-16(fp)
	usleep(2000000);
	set_calibration_pitch(cntrl_reg_pitch);
	set_calibration_vol_gen(cntrl_reg_vol);
	LCD_Clear(WHITE);

	while(((done_calibration_pitch()&2) == 2 && (done_calibration_vol_gen()&2) == 2) || cnt_point <= 5){
 4000670:	40107040 	call	4010704 <done_calibration_pitch>
 4000674:	1080008c 	andi	r2,r2,2
 4000678:	10000326 	beq	r2,zero,4000688 <draw_calibrating_screen+0x180>
 400067c:	401099c0 	call	401099c <done_calibration_vol_gen>
 4000680:	1080008c 	andi	r2,r2,2
 4000684:	103fc71e 	bne	r2,zero,40005a4 <__reset+0xfa8105a4>
 4000688:	e0bffc03 	ldbu	r2,-16(fp)
 400068c:	108001b0 	cmpltui	r2,r2,6
 4000690:	103fc41e 	bne	r2,zero,40005a4 <__reset+0xfa8105a4>
		cnt_point += 1;
		if (cnt_point > 10){
			cnt_point = 0;
		}
	}
	LCD_Clear(WHITE);
 4000694:	013fffd4 	movui	r4,65535
 4000698:	400fd800 	call	400fd80 <LCD_Clear>
	draw_calibrating_screen_done();
 400069c:	40006b80 	call	40006b8 <draw_calibrating_screen_done>

}
 40006a0:	0001883a 	nop
 40006a4:	e037883a 	mov	sp,fp
 40006a8:	dfc00117 	ldw	ra,4(sp)
 40006ac:	df000017 	ldw	fp,0(sp)
 40006b0:	dec00204 	addi	sp,sp,8
 40006b4:	f800283a 	ret

040006b8 <draw_calibrating_screen_done>:

void draw_calibrating_screen_done(void)
{
 40006b8:	defffc04 	addi	sp,sp,-16
 40006bc:	dfc00315 	stw	ra,12(sp)
 40006c0:	df000215 	stw	fp,8(sp)
 40006c4:	df000204 	addi	fp,sp,8
	vid_print_string(160 - get_string_width("calibration"),50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"calibration");
 40006c8:	01010074 	movhi	r4,1025
 40006cc:	2113b004 	addi	r4,r4,20160
 40006d0:	40015980 	call	4001598 <get_string_width>
 40006d4:	1007883a 	mov	r3,r2
 40006d8:	00802804 	movi	r2,160
 40006dc:	10c7c83a 	sub	r3,r2,r3
 40006e0:	00810074 	movhi	r2,1025
 40006e4:	1093b004 	addi	r2,r2,20160
 40006e8:	d8800115 	stw	r2,4(sp)
 40006ec:	00810074 	movhi	r2,1025
 40006f0:	10934084 	addi	r2,r2,19714
 40006f4:	d8800015 	stw	r2,0(sp)
 40006f8:	01c10074 	movhi	r7,1025
 40006fc:	39cdc184 	addi	r7,r7,14086
 4000700:	000d883a 	mov	r6,zero
 4000704:	01400c84 	movi	r5,50
 4000708:	1809883a 	mov	r4,r3
 400070c:	40014540 	call	4001454 <vid_print_string>
	vid_print_string(160 - get_string_width("done"),100,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"done");
 4000710:	01010074 	movhi	r4,1025
 4000714:	2113b304 	addi	r4,r4,20172
 4000718:	40015980 	call	4001598 <get_string_width>
 400071c:	1007883a 	mov	r3,r2
 4000720:	00802804 	movi	r2,160
 4000724:	10c7c83a 	sub	r3,r2,r3
 4000728:	00810074 	movhi	r2,1025
 400072c:	1093b304 	addi	r2,r2,20172
 4000730:	d8800115 	stw	r2,4(sp)
 4000734:	00810074 	movhi	r2,1025
 4000738:	10934084 	addi	r2,r2,19714
 400073c:	d8800015 	stw	r2,0(sp)
 4000740:	01c10074 	movhi	r7,1025
 4000744:	39cdc184 	addi	r7,r7,14086
 4000748:	000d883a 	mov	r6,zero
 400074c:	01401904 	movi	r5,100
 4000750:	1809883a 	mov	r4,r3
 4000754:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(170,10,230,110,GREY);
 4000758:	00908a04 	movi	r2,16936
 400075c:	d8800015 	stw	r2,0(sp)
 4000760:	01c01b84 	movi	r7,110
 4000764:	01803984 	movi	r6,230
 4000768:	01400284 	movi	r5,10
 400076c:	01002a84 	movi	r4,170
 4000770:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(244,189,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4000774:	00810074 	movhi	r2,1025
 4000778:	1093b504 	addi	r2,r2,20180
 400077c:	d8800115 	stw	r2,4(sp)
 4000780:	00810074 	movhi	r2,1025
 4000784:	10934084 	addi	r2,r2,19714
 4000788:	d8800015 	stw	r2,0(sp)
 400078c:	01c10074 	movhi	r7,1025
 4000790:	39cdc184 	addi	r7,r7,14086
 4000794:	01bfffc4 	movi	r6,-1
 4000798:	01402f44 	movi	r5,189
 400079c:	01003d04 	movi	r4,244
 40007a0:	40014540 	call	4001454 <vid_print_string>
}
 40007a4:	0001883a 	nop
 40007a8:	e037883a 	mov	sp,fp
 40007ac:	dfc00117 	ldw	ra,4(sp)
 40007b0:	df000017 	ldw	fp,0(sp)
 40007b4:	dec00204 	addi	sp,sp,8
 40007b8:	f800283a 	ret

040007bc <draw_volume_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_volume_screen(void)
{
 40007bc:	defffc04 	addi	sp,sp,-16
 40007c0:	dfc00315 	stw	ra,12(sp)
 40007c4:	df000215 	stw	fp,8(sp)
 40007c8:	df000204 	addi	fp,sp,8
	vid_print_string(10,10,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Volume");
 40007cc:	00810074 	movhi	r2,1025
 40007d0:	1093a304 	addi	r2,r2,20108
 40007d4:	d8800115 	stw	r2,4(sp)
 40007d8:	00810074 	movhi	r2,1025
 40007dc:	10934084 	addi	r2,r2,19714
 40007e0:	d8800015 	stw	r2,0(sp)
 40007e4:	01c10074 	movhi	r7,1025
 40007e8:	39cdc184 	addi	r7,r7,14086
 40007ec:	000d883a 	mov	r6,zero
 40007f0:	01400284 	movi	r5,10
 40007f4:	01000284 	movi	r4,10
 40007f8:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(39,195,99,310,GREY_SOFT);
 40007fc:	00b33314 	movui	r2,52428
 4000800:	d8800015 	stw	r2,0(sp)
 4000804:	01c04d84 	movi	r7,310
 4000808:	018018c4 	movi	r6,99
 400080c:	014030c4 	movi	r5,195
 4000810:	010009c4 	movi	r4,39
 4000814:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	LCD_DrawRect(39,10,99,90,GREY);
 4000818:	00908a04 	movi	r2,16936
 400081c:	d8800015 	stw	r2,0(sp)
 4000820:	01c01684 	movi	r7,90
 4000824:	018018c4 	movi	r6,99
 4000828:	01400284 	movi	r5,10
 400082c:	010009c4 	movi	r4,39
 4000830:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(261,44,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"_");
 4000834:	00810074 	movhi	r2,1025
 4000838:	1093b604 	addi	r2,r2,20184
 400083c:	d8800115 	stw	r2,4(sp)
 4000840:	00810074 	movhi	r2,1025
 4000844:	10934084 	addi	r2,r2,19714
 4000848:	d8800015 	stw	r2,0(sp)
 400084c:	01c10074 	movhi	r7,1025
 4000850:	39cdc184 	addi	r7,r7,14086
 4000854:	01bfffc4 	movi	r6,-1
 4000858:	01400b04 	movi	r5,44
 400085c:	01004144 	movi	r4,261
 4000860:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(39,100,99,180,GREY);
 4000864:	00908a04 	movi	r2,16936
 4000868:	d8800015 	stw	r2,0(sp)
 400086c:	01c02d04 	movi	r7,180
 4000870:	018018c4 	movi	r6,99
 4000874:	01401904 	movi	r5,100
 4000878:	010009c4 	movi	r4,39
 400087c:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(169,55,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"~");
 4000880:	00810074 	movhi	r2,1025
 4000884:	1093b704 	addi	r2,r2,20188
 4000888:	d8800115 	stw	r2,4(sp)
 400088c:	00810074 	movhi	r2,1025
 4000890:	10934084 	addi	r2,r2,19714
 4000894:	d8800015 	stw	r2,0(sp)
 4000898:	01c10074 	movhi	r7,1025
 400089c:	39cdc184 	addi	r7,r7,14086
 40008a0:	01bfffc4 	movi	r6,-1
 40008a4:	01400dc4 	movi	r5,55
 40008a8:	01002a44 	movi	r4,169
 40008ac:	40014540 	call	4001454 <vid_print_string>

	LCD_DrawRect(175,10,235,110,GREY);
 40008b0:	00908a04 	movi	r2,16936
 40008b4:	d8800015 	stw	r2,0(sp)
 40008b8:	01c01b84 	movi	r7,110
 40008bc:	01803ac4 	movi	r6,235
 40008c0:	01400284 	movi	r5,10
 40008c4:	01002bc4 	movi	r4,175
 40008c8:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(249,189,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 40008cc:	00810074 	movhi	r2,1025
 40008d0:	1093b504 	addi	r2,r2,20180
 40008d4:	d8800115 	stw	r2,4(sp)
 40008d8:	00810074 	movhi	r2,1025
 40008dc:	10934084 	addi	r2,r2,19714
 40008e0:	d8800015 	stw	r2,0(sp)
 40008e4:	01c10074 	movhi	r7,1025
 40008e8:	39cdc184 	addi	r7,r7,14086
 40008ec:	01bfffc4 	movi	r6,-1
 40008f0:	01402f44 	movi	r5,189
 40008f4:	01003e44 	movi	r4,249
 40008f8:	40014540 	call	4001454 <vid_print_string>
}
 40008fc:	0001883a 	nop
 4000900:	e037883a 	mov	sp,fp
 4000904:	dfc00117 	ldw	ra,4(sp)
 4000908:	df000017 	ldw	fp,0(sp)
 400090c:	dec00204 	addi	sp,sp,8
 4000910:	f800283a 	ret

04000914 <draw_update_volume_bar>:


void draw_update_volume_bar(alt_u8 vol_bar)
{
 4000914:	defffb04 	addi	sp,sp,-20
 4000918:	dfc00415 	stw	ra,16(sp)
 400091c:	df000315 	stw	fp,12(sp)
 4000920:	df000304 	addi	fp,sp,12
 4000924:	2005883a 	mov	r2,r4
 4000928:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 i;
	LCD_DrawRect(39,195,99,310,GREY_SOFT);
 400092c:	00b33314 	movui	r2,52428
 4000930:	d8800015 	stw	r2,0(sp)
 4000934:	01c04d84 	movi	r7,310
 4000938:	018018c4 	movi	r6,99
 400093c:	014030c4 	movi	r5,195
 4000940:	010009c4 	movi	r4,39
 4000944:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	for(i = 0; i < vol_bar+1; i++){
 4000948:	e03ffe05 	stb	zero,-8(fp)
 400094c:	00001206 	br	4000998 <draw_update_volume_bar+0x84>
		LCD_DrawRect(44,(299-i*6-i*5),94,(299-i*6-i*5+6),GREEN);
 4000950:	e0bffe03 	ldbu	r2,-8(fp)
 4000954:	10bffd64 	muli	r2,r2,-11
 4000958:	10804ac4 	addi	r2,r2,299
 400095c:	10ffffcc 	andi	r3,r2,65535
 4000960:	e0bffe03 	ldbu	r2,-8(fp)
 4000964:	10bffd64 	muli	r2,r2,-11
 4000968:	10804c44 	addi	r2,r2,305
 400096c:	113fffcc 	andi	r4,r2,65535
 4000970:	0081f804 	movi	r2,2016
 4000974:	d8800015 	stw	r2,0(sp)
 4000978:	200f883a 	mov	r7,r4
 400097c:	01801784 	movi	r6,94
 4000980:	180b883a 	mov	r5,r3
 4000984:	01000b04 	movi	r4,44
 4000988:	400fe7c0 	call	400fe7c <LCD_DrawRect>

void draw_update_volume_bar(alt_u8 vol_bar)
{
	alt_u8 i;
	LCD_DrawRect(39,195,99,310,GREY_SOFT);
	for(i = 0; i < vol_bar+1; i++){
 400098c:	e0bffe03 	ldbu	r2,-8(fp)
 4000990:	10800044 	addi	r2,r2,1
 4000994:	e0bffe05 	stb	r2,-8(fp)
 4000998:	e0fffe03 	ldbu	r3,-8(fp)
 400099c:	e0bfff03 	ldbu	r2,-4(fp)
 40009a0:	10800044 	addi	r2,r2,1
 40009a4:	18bfea16 	blt	r3,r2,4000950 <__reset+0xfa810950>
		LCD_DrawRect(44,(299-i*6-i*5),94,(299-i*6-i*5+6),GREEN);
	}
}
 40009a8:	0001883a 	nop
 40009ac:	e037883a 	mov	sp,fp
 40009b0:	dfc00117 	ldw	ra,4(sp)
 40009b4:	df000017 	ldw	fp,0(sp)
 40009b8:	dec00204 	addi	sp,sp,8
 40009bc:	f800283a 	ret

040009c0 <draw_vol_antenna_on_off>:

void draw_vol_antenna_on_off(alt_u8 on_off){
 40009c0:	defffb04 	addi	sp,sp,-20
 40009c4:	dfc00415 	stw	ra,16(sp)
 40009c8:	df000315 	stw	fp,12(sp)
 40009cc:	df000304 	addi	fp,sp,12
 40009d0:	2005883a 	mov	r2,r4
 40009d4:	e0bfff05 	stb	r2,-4(fp)
	if((on_off & 1) == 1){
 40009d8:	e0bfff03 	ldbu	r2,-4(fp)
 40009dc:	1080004c 	andi	r2,r2,1
 40009e0:	10001426 	beq	r2,zero,4000a34 <draw_vol_antenna_on_off+0x74>
		LCD_DrawRect(107,10,167,310,GREEN);
 40009e4:	0081f804 	movi	r2,2016
 40009e8:	d8800015 	stw	r2,0(sp)
 40009ec:	01c04d84 	movi	r7,310
 40009f0:	018029c4 	movi	r6,167
 40009f4:	01400284 	movi	r5,10
 40009f8:	01001ac4 	movi	r4,107
 40009fc:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(15,126,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"vol antenna on");
 4000a00:	00810074 	movhi	r2,1025
 4000a04:	1093b804 	addi	r2,r2,20192
 4000a08:	d8800115 	stw	r2,4(sp)
 4000a0c:	00810074 	movhi	r2,1025
 4000a10:	10934084 	addi	r2,r2,19714
 4000a14:	d8800015 	stw	r2,0(sp)
 4000a18:	01c10074 	movhi	r7,1025
 4000a1c:	39cdc184 	addi	r7,r7,14086
 4000a20:	000d883a 	mov	r6,zero
 4000a24:	01401f84 	movi	r5,126
 4000a28:	010003c4 	movi	r4,15
 4000a2c:	40014540 	call	4001454 <vid_print_string>
	}else{
		LCD_DrawRect(107,10,167,310,GREY);
		vid_print_string(15,126,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"vol antenna off");
	}
}
 4000a30:	00001306 	br	4000a80 <draw_vol_antenna_on_off+0xc0>
void draw_vol_antenna_on_off(alt_u8 on_off){
	if((on_off & 1) == 1){
		LCD_DrawRect(107,10,167,310,GREEN);
		vid_print_string(15,126,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"vol antenna on");
	}else{
		LCD_DrawRect(107,10,167,310,GREY);
 4000a34:	00908a04 	movi	r2,16936
 4000a38:	d8800015 	stw	r2,0(sp)
 4000a3c:	01c04d84 	movi	r7,310
 4000a40:	018029c4 	movi	r6,167
 4000a44:	01400284 	movi	r5,10
 4000a48:	01001ac4 	movi	r4,107
 4000a4c:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(15,126,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"vol antenna off");
 4000a50:	00810074 	movhi	r2,1025
 4000a54:	1093bc04 	addi	r2,r2,20208
 4000a58:	d8800115 	stw	r2,4(sp)
 4000a5c:	00810074 	movhi	r2,1025
 4000a60:	10934084 	addi	r2,r2,19714
 4000a64:	d8800015 	stw	r2,0(sp)
 4000a68:	01c10074 	movhi	r7,1025
 4000a6c:	39cdc184 	addi	r7,r7,14086
 4000a70:	01bfffc4 	movi	r6,-1
 4000a74:	01401f84 	movi	r5,126
 4000a78:	010003c4 	movi	r4,15
 4000a7c:	40014540 	call	4001454 <vid_print_string>
	}
}
 4000a80:	0001883a 	nop
 4000a84:	e037883a 	mov	sp,fp
 4000a88:	dfc00117 	ldw	ra,4(sp)
 4000a8c:	df000017 	ldw	fp,0(sp)
 4000a90:	dec00204 	addi	sp,sp,8
 4000a94:	f800283a 	ret

04000a98 <draw_help_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_help_screen(void)
{
 4000a98:	defffc04 	addi	sp,sp,-16
 4000a9c:	dfc00315 	stw	ra,12(sp)
 4000aa0:	df000215 	stw	fp,8(sp)
 4000aa4:	df000204 	addi	fp,sp,8

	LCD_DrawRect(15,10,75,90,GREY);
 4000aa8:	00908a04 	movi	r2,16936
 4000aac:	d8800015 	stw	r2,0(sp)
 4000ab0:	01c01684 	movi	r7,90
 4000ab4:	018012c4 	movi	r6,75
 4000ab8:	01400284 	movi	r5,10
 4000abc:	010003c4 	movi	r4,15
 4000ac0:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(235,34,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"Set");
 4000ac4:	00810074 	movhi	r2,1025
 4000ac8:	1093c004 	addi	r2,r2,20224
 4000acc:	d8800115 	stw	r2,4(sp)
 4000ad0:	00810074 	movhi	r2,1025
 4000ad4:	10934084 	addi	r2,r2,19714
 4000ad8:	d8800015 	stw	r2,0(sp)
 4000adc:	01c10074 	movhi	r7,1025
 4000ae0:	39cdc184 	addi	r7,r7,14086
 4000ae4:	01bfffc4 	movi	r6,-1
 4000ae8:	01400884 	movi	r5,34
 4000aec:	01003ac4 	movi	r4,235
 4000af0:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(90,110,150,310,GREY);
 4000af4:	00908a04 	movi	r2,16936
 4000af8:	d8800015 	stw	r2,0(sp)
 4000afc:	01c04d84 	movi	r7,310
 4000b00:	01802584 	movi	r6,150
 4000b04:	01401b84 	movi	r5,110
 4000b08:	01001684 	movi	r4,90
 4000b0c:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(15,109,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"display pitch");
 4000b10:	00810074 	movhi	r2,1025
 4000b14:	1093c104 	addi	r2,r2,20228
 4000b18:	d8800115 	stw	r2,4(sp)
 4000b1c:	00810074 	movhi	r2,1025
 4000b20:	10934084 	addi	r2,r2,19714
 4000b24:	d8800015 	stw	r2,0(sp)
 4000b28:	01c10074 	movhi	r7,1025
 4000b2c:	39cdc184 	addi	r7,r7,14086
 4000b30:	01bfffc4 	movi	r6,-1
 4000b34:	01401b44 	movi	r5,109
 4000b38:	010003c4 	movi	r4,15
 4000b3c:	40014540 	call	4001454 <vid_print_string>

	LCD_DrawRect(170,10,230,110,GREY);
 4000b40:	00908a04 	movi	r2,16936
 4000b44:	d8800015 	stw	r2,0(sp)
 4000b48:	01c01b84 	movi	r7,110
 4000b4c:	01803984 	movi	r6,230
 4000b50:	01400284 	movi	r5,10
 4000b54:	01002a84 	movi	r4,170
 4000b58:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(244,189,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4000b5c:	00810074 	movhi	r2,1025
 4000b60:	1093b504 	addi	r2,r2,20180
 4000b64:	d8800115 	stw	r2,4(sp)
 4000b68:	00810074 	movhi	r2,1025
 4000b6c:	10934084 	addi	r2,r2,19714
 4000b70:	d8800015 	stw	r2,0(sp)
 4000b74:	01c10074 	movhi	r7,1025
 4000b78:	39cdc184 	addi	r7,r7,14086
 4000b7c:	01bfffc4 	movi	r6,-1
 4000b80:	01402f44 	movi	r5,189
 4000b84:	01003d04 	movi	r4,244
 4000b88:	40014540 	call	4001454 <vid_print_string>

}
 4000b8c:	0001883a 	nop
 4000b90:	e037883a 	mov	sp,fp
 4000b94:	dfc00117 	ldw	ra,4(sp)
 4000b98:	df000017 	ldw	fp,0(sp)
 4000b9c:	dec00204 	addi	sp,sp,8
 4000ba0:	f800283a 	ret

04000ba4 <draw_glissando_on_off>:

void draw_glissando_on_off(alt_u8 on_off){
 4000ba4:	defffb04 	addi	sp,sp,-20
 4000ba8:	dfc00415 	stw	ra,16(sp)
 4000bac:	df000315 	stw	fp,12(sp)
 4000bb0:	df000304 	addi	fp,sp,12
 4000bb4:	2005883a 	mov	r2,r4
 4000bb8:	e0bfff05 	stb	r2,-4(fp)
	if(on_off == 1){
 4000bbc:	e0bfff03 	ldbu	r2,-4(fp)
 4000bc0:	10800058 	cmpnei	r2,r2,1
 4000bc4:	1000141e 	bne	r2,zero,4000c18 <draw_glissando_on_off+0x74>
		LCD_DrawRect(15,110,75,310,GREEN);
 4000bc8:	0081f804 	movi	r2,2016
 4000bcc:	d8800015 	stw	r2,0(sp)
 4000bd0:	01c04d84 	movi	r7,310
 4000bd4:	018012c4 	movi	r6,75
 4000bd8:	01401b84 	movi	r5,110
 4000bdc:	010003c4 	movi	r4,15
 4000be0:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(15,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando on");
 4000be4:	00810074 	movhi	r2,1025
 4000be8:	1093c504 	addi	r2,r2,20244
 4000bec:	d8800115 	stw	r2,4(sp)
 4000bf0:	00810074 	movhi	r2,1025
 4000bf4:	10934084 	addi	r2,r2,19714
 4000bf8:	d8800015 	stw	r2,0(sp)
 4000bfc:	01c10074 	movhi	r7,1025
 4000c00:	39cdc184 	addi	r7,r7,14086
 4000c04:	000d883a 	mov	r6,zero
 4000c08:	01400884 	movi	r5,34
 4000c0c:	010003c4 	movi	r4,15
 4000c10:	40014540 	call	4001454 <vid_print_string>
	}else{
		LCD_DrawRect(15,110,75,310,GREY);
		vid_print_string(15,34,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando off");
	}
}
 4000c14:	00001306 	br	4000c64 <draw_glissando_on_off+0xc0>
void draw_glissando_on_off(alt_u8 on_off){
	if(on_off == 1){
		LCD_DrawRect(15,110,75,310,GREEN);
		vid_print_string(15,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando on");
	}else{
		LCD_DrawRect(15,110,75,310,GREY);
 4000c18:	00908a04 	movi	r2,16936
 4000c1c:	d8800015 	stw	r2,0(sp)
 4000c20:	01c04d84 	movi	r7,310
 4000c24:	018012c4 	movi	r6,75
 4000c28:	01401b84 	movi	r5,110
 4000c2c:	010003c4 	movi	r4,15
 4000c30:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(15,34,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando off");
 4000c34:	00810074 	movhi	r2,1025
 4000c38:	1093c904 	addi	r2,r2,20260
 4000c3c:	d8800115 	stw	r2,4(sp)
 4000c40:	00810074 	movhi	r2,1025
 4000c44:	10934084 	addi	r2,r2,19714
 4000c48:	d8800015 	stw	r2,0(sp)
 4000c4c:	01c10074 	movhi	r7,1025
 4000c50:	39cdc184 	addi	r7,r7,14086
 4000c54:	01bfffc4 	movi	r6,-1
 4000c58:	01400884 	movi	r5,34
 4000c5c:	010003c4 	movi	r4,15
 4000c60:	40014540 	call	4001454 <vid_print_string>
	}
}
 4000c64:	0001883a 	nop
 4000c68:	e037883a 	mov	sp,fp
 4000c6c:	dfc00117 	ldw	ra,4(sp)
 4000c70:	df000017 	ldw	fp,0(sp)
 4000c74:	dec00204 	addi	sp,sp,8
 4000c78:	f800283a 	ret

04000c7c <draw_glissando_set>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_glissando_set(void)
{
 4000c7c:	defffc04 	addi	sp,sp,-16
 4000c80:	dfc00315 	stw	ra,12(sp)
 4000c84:	df000215 	stw	fp,8(sp)
 4000c88:	df000204 	addi	fp,sp,8
	vid_print_string(10,10,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Delay");
 4000c8c:	00810074 	movhi	r2,1025
 4000c90:	1093cd04 	addi	r2,r2,20276
 4000c94:	d8800115 	stw	r2,4(sp)
 4000c98:	00810074 	movhi	r2,1025
 4000c9c:	10934084 	addi	r2,r2,19714
 4000ca0:	d8800015 	stw	r2,0(sp)
 4000ca4:	01c10074 	movhi	r7,1025
 4000ca8:	39cdc184 	addi	r7,r7,14086
 4000cac:	000d883a 	mov	r6,zero
 4000cb0:	01400284 	movi	r5,10
 4000cb4:	01000284 	movi	r4,10
 4000cb8:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(39,195,99,310,GREY_SOFT);
 4000cbc:	00b33314 	movui	r2,52428
 4000cc0:	d8800015 	stw	r2,0(sp)
 4000cc4:	01c04d84 	movi	r7,310
 4000cc8:	018018c4 	movi	r6,99
 4000ccc:	014030c4 	movi	r5,195
 4000cd0:	010009c4 	movi	r4,39
 4000cd4:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	LCD_DrawRect(39,10,99,90,GREY);
 4000cd8:	00908a04 	movi	r2,16936
 4000cdc:	d8800015 	stw	r2,0(sp)
 4000ce0:	01c01684 	movi	r7,90
 4000ce4:	018018c4 	movi	r6,99
 4000ce8:	01400284 	movi	r5,10
 4000cec:	010009c4 	movi	r4,39
 4000cf0:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(261,44,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"_");
 4000cf4:	00810074 	movhi	r2,1025
 4000cf8:	1093b604 	addi	r2,r2,20184
 4000cfc:	d8800115 	stw	r2,4(sp)
 4000d00:	00810074 	movhi	r2,1025
 4000d04:	10934084 	addi	r2,r2,19714
 4000d08:	d8800015 	stw	r2,0(sp)
 4000d0c:	01c10074 	movhi	r7,1025
 4000d10:	39cdc184 	addi	r7,r7,14086
 4000d14:	01bfffc4 	movi	r6,-1
 4000d18:	01400b04 	movi	r5,44
 4000d1c:	01004144 	movi	r4,261
 4000d20:	40014540 	call	4001454 <vid_print_string>
	LCD_DrawRect(39,100,99,180,GREY);
 4000d24:	00908a04 	movi	r2,16936
 4000d28:	d8800015 	stw	r2,0(sp)
 4000d2c:	01c02d04 	movi	r7,180
 4000d30:	018018c4 	movi	r6,99
 4000d34:	01401904 	movi	r5,100
 4000d38:	010009c4 	movi	r4,39
 4000d3c:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(169,55,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"~");
 4000d40:	00810074 	movhi	r2,1025
 4000d44:	1093b704 	addi	r2,r2,20188
 4000d48:	d8800115 	stw	r2,4(sp)
 4000d4c:	00810074 	movhi	r2,1025
 4000d50:	10934084 	addi	r2,r2,19714
 4000d54:	d8800015 	stw	r2,0(sp)
 4000d58:	01c10074 	movhi	r7,1025
 4000d5c:	39cdc184 	addi	r7,r7,14086
 4000d60:	01bfffc4 	movi	r6,-1
 4000d64:	01400dc4 	movi	r5,55
 4000d68:	01002a44 	movi	r4,169
 4000d6c:	40014540 	call	4001454 <vid_print_string>

	LCD_DrawRect(175,10,235,110,GREY);
 4000d70:	00908a04 	movi	r2,16936
 4000d74:	d8800015 	stw	r2,0(sp)
 4000d78:	01c01b84 	movi	r7,110
 4000d7c:	01803ac4 	movi	r6,235
 4000d80:	01400284 	movi	r5,10
 4000d84:	01002bc4 	movi	r4,175
 4000d88:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(244,194,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4000d8c:	00810074 	movhi	r2,1025
 4000d90:	1093b504 	addi	r2,r2,20180
 4000d94:	d8800115 	stw	r2,4(sp)
 4000d98:	00810074 	movhi	r2,1025
 4000d9c:	10934084 	addi	r2,r2,19714
 4000da0:	d8800015 	stw	r2,0(sp)
 4000da4:	01c10074 	movhi	r7,1025
 4000da8:	39cdc184 	addi	r7,r7,14086
 4000dac:	01bfffc4 	movi	r6,-1
 4000db0:	01403084 	movi	r5,194
 4000db4:	01003d04 	movi	r4,244
 4000db8:	40014540 	call	4001454 <vid_print_string>
}
 4000dbc:	0001883a 	nop
 4000dc0:	e037883a 	mov	sp,fp
 4000dc4:	dfc00117 	ldw	ra,4(sp)
 4000dc8:	df000017 	ldw	fp,0(sp)
 4000dcc:	dec00204 	addi	sp,sp,8
 4000dd0:	f800283a 	ret

04000dd4 <draw_update_glissando_delay>:

void draw_update_glissando_delay(alt_u8 gli_delay)
{
 4000dd4:	defffb04 	addi	sp,sp,-20
 4000dd8:	dfc00415 	stw	ra,16(sp)
 4000ddc:	df000315 	stw	fp,12(sp)
 4000de0:	df000304 	addi	fp,sp,12
 4000de4:	2005883a 	mov	r2,r4
 4000de8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 i;
	LCD_DrawRect(39,195,99,310,GREY_SOFT);
 4000dec:	00b33314 	movui	r2,52428
 4000df0:	d8800015 	stw	r2,0(sp)
 4000df4:	01c04d84 	movi	r7,310
 4000df8:	018018c4 	movi	r6,99
 4000dfc:	014030c4 	movi	r5,195
 4000e00:	010009c4 	movi	r4,39
 4000e04:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	for(i = 0; i < gli_delay; i++){
 4000e08:	e03ffe05 	stb	zero,-8(fp)
 4000e0c:	00001206 	br	4000e58 <draw_update_glissando_delay+0x84>
		LCD_DrawRect(44,(299-i*6-i*5),94,(299-i*6-i*5+6),GREEN);
 4000e10:	e0bffe03 	ldbu	r2,-8(fp)
 4000e14:	10bffd64 	muli	r2,r2,-11
 4000e18:	10804ac4 	addi	r2,r2,299
 4000e1c:	10ffffcc 	andi	r3,r2,65535
 4000e20:	e0bffe03 	ldbu	r2,-8(fp)
 4000e24:	10bffd64 	muli	r2,r2,-11
 4000e28:	10804c44 	addi	r2,r2,305
 4000e2c:	113fffcc 	andi	r4,r2,65535
 4000e30:	0081f804 	movi	r2,2016
 4000e34:	d8800015 	stw	r2,0(sp)
 4000e38:	200f883a 	mov	r7,r4
 4000e3c:	01801784 	movi	r6,94
 4000e40:	180b883a 	mov	r5,r3
 4000e44:	01000b04 	movi	r4,44
 4000e48:	400fe7c0 	call	400fe7c <LCD_DrawRect>

void draw_update_glissando_delay(alt_u8 gli_delay)
{
	alt_u8 i;
	LCD_DrawRect(39,195,99,310,GREY_SOFT);
	for(i = 0; i < gli_delay; i++){
 4000e4c:	e0bffe03 	ldbu	r2,-8(fp)
 4000e50:	10800044 	addi	r2,r2,1
 4000e54:	e0bffe05 	stb	r2,-8(fp)
 4000e58:	e0fffe03 	ldbu	r3,-8(fp)
 4000e5c:	e0bfff03 	ldbu	r2,-4(fp)
 4000e60:	18bfeb36 	bltu	r3,r2,4000e10 <__reset+0xfa810e10>
		LCD_DrawRect(44,(299-i*6-i*5),94,(299-i*6-i*5+6),GREEN);
	}
}
 4000e64:	0001883a 	nop
 4000e68:	e037883a 	mov	sp,fp
 4000e6c:	dfc00117 	ldw	ra,4(sp)
 4000e70:	df000017 	ldw	fp,0(sp)
 4000e74:	dec00204 	addi	sp,sp,8
 4000e78:	f800283a 	ret

04000e7c <draw_penta_on_off>:

void draw_penta_on_off(alt_u8 on_off){
 4000e7c:	defffb04 	addi	sp,sp,-20
 4000e80:	dfc00415 	stw	ra,16(sp)
 4000e84:	df000315 	stw	fp,12(sp)
 4000e88:	df000304 	addi	fp,sp,12
 4000e8c:	2005883a 	mov	r2,r4
 4000e90:	e0bfff05 	stb	r2,-4(fp)
	if((on_off & 4) == 4){
 4000e94:	e0bfff03 	ldbu	r2,-4(fp)
 4000e98:	1080010c 	andi	r2,r2,4
 4000e9c:	10001426 	beq	r2,zero,4000ef0 <draw_penta_on_off+0x74>
		LCD_DrawRect(107,10,167,310,GREEN);
 4000ea0:	0081f804 	movi	r2,2016
 4000ea4:	d8800015 	stw	r2,0(sp)
 4000ea8:	01c04d84 	movi	r7,310
 4000eac:	018029c4 	movi	r6,167
 4000eb0:	01400284 	movi	r5,10
 4000eb4:	01001ac4 	movi	r4,107
 4000eb8:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(15,126,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"pentatonic on");
 4000ebc:	00810074 	movhi	r2,1025
 4000ec0:	1093cf04 	addi	r2,r2,20284
 4000ec4:	d8800115 	stw	r2,4(sp)
 4000ec8:	00810074 	movhi	r2,1025
 4000ecc:	10934084 	addi	r2,r2,19714
 4000ed0:	d8800015 	stw	r2,0(sp)
 4000ed4:	01c10074 	movhi	r7,1025
 4000ed8:	39cdc184 	addi	r7,r7,14086
 4000edc:	000d883a 	mov	r6,zero
 4000ee0:	01401f84 	movi	r5,126
 4000ee4:	010003c4 	movi	r4,15
 4000ee8:	40014540 	call	4001454 <vid_print_string>
	}else{
		LCD_DrawRect(107,10,167,310,GREY);
		vid_print_string(15,126,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"pentatonic off");
	}
}
 4000eec:	00001306 	br	4000f3c <draw_penta_on_off+0xc0>
void draw_penta_on_off(alt_u8 on_off){
	if((on_off & 4) == 4){
		LCD_DrawRect(107,10,167,310,GREEN);
		vid_print_string(15,126,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"pentatonic on");
	}else{
		LCD_DrawRect(107,10,167,310,GREY);
 4000ef0:	00908a04 	movi	r2,16936
 4000ef4:	d8800015 	stw	r2,0(sp)
 4000ef8:	01c04d84 	movi	r7,310
 4000efc:	018029c4 	movi	r6,167
 4000f00:	01400284 	movi	r5,10
 4000f04:	01001ac4 	movi	r4,107
 4000f08:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(15,126,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"pentatonic off");
 4000f0c:	00810074 	movhi	r2,1025
 4000f10:	1093d304 	addi	r2,r2,20300
 4000f14:	d8800115 	stw	r2,4(sp)
 4000f18:	00810074 	movhi	r2,1025
 4000f1c:	10934084 	addi	r2,r2,19714
 4000f20:	d8800015 	stw	r2,0(sp)
 4000f24:	01c10074 	movhi	r7,1025
 4000f28:	39cdc184 	addi	r7,r7,14086
 4000f2c:	01bfffc4 	movi	r6,-1
 4000f30:	01401f84 	movi	r5,126
 4000f34:	010003c4 	movi	r4,15
 4000f38:	40014540 	call	4001454 <vid_print_string>
	}
}
 4000f3c:	0001883a 	nop
 4000f40:	e037883a 	mov	sp,fp
 4000f44:	dfc00117 	ldw	ra,4(sp)
 4000f48:	df000017 	ldw	fp,0(sp)
 4000f4c:	dec00204 	addi	sp,sp,8
 4000f50:	f800283a 	ret

04000f54 <draw_display_ton>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_display_ton(alt_u8 cntrl_reg_pitch)
{
 4000f54:	defffb04 	addi	sp,sp,-20
 4000f58:	dfc00415 	stw	ra,16(sp)
 4000f5c:	df000315 	stw	fp,12(sp)
 4000f60:	df000304 	addi	fp,sp,12
 4000f64:	2005883a 	mov	r2,r4
 4000f68:	e0bfff05 	stb	r2,-4(fp)
	LCD_Clear(WHITE);
 4000f6c:	013fffd4 	movui	r4,65535
 4000f70:	400fd800 	call	400fd80 <LCD_Clear>
	if((cntrl_reg_pitch & 4) == 4)
 4000f74:	e0bfff03 	ldbu	r2,-4(fp)
 4000f78:	1080010c 	andi	r2,r2,4
 4000f7c:	10002726 	beq	r2,zero,400101c <draw_display_ton+0xc8>
	{
		LCD_DrawRect(153,10,155,310,BLACK);
 4000f80:	d8000015 	stw	zero,0(sp)
 4000f84:	01c04d84 	movi	r7,310
 4000f88:	018026c4 	movi	r6,155
 4000f8c:	01400284 	movi	r5,10
 4000f90:	01002644 	movi	r4,153
 4000f94:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		LCD_DrawRect(60,159,155,161,BLACK);
 4000f98:	d8000015 	stw	zero,0(sp)
 4000f9c:	01c02844 	movi	r7,161
 4000fa0:	018026c4 	movi	r6,155
 4000fa4:	014027c4 	movi	r5,159
 4000fa8:	01000f04 	movi	r4,60
 4000fac:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		LCD_DrawRect(10,130,60,180,WHITE);
 4000fb0:	00bfffd4 	movui	r2,65535
 4000fb4:	d8800015 	stw	r2,0(sp)
 4000fb8:	01c02d04 	movi	r7,180
 4000fbc:	01800f04 	movi	r6,60
 4000fc0:	01402084 	movi	r5,130
 4000fc4:	01000284 	movi	r4,10
 4000fc8:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		LCD_DrawRect(170,120,230,310,GREEN);
 4000fcc:	0081f804 	movi	r2,2016
 4000fd0:	d8800015 	stw	r2,0(sp)
 4000fd4:	01c04d84 	movi	r7,310
 4000fd8:	01803984 	movi	r6,230
 4000fdc:	01401e04 	movi	r5,120
 4000fe0:	01002a84 	movi	r4,170
 4000fe4:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(20,189,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"penta. on");
 4000fe8:	00810074 	movhi	r2,1025
 4000fec:	1093d704 	addi	r2,r2,20316
 4000ff0:	d8800115 	stw	r2,4(sp)
 4000ff4:	00810074 	movhi	r2,1025
 4000ff8:	10934084 	addi	r2,r2,19714
 4000ffc:	d8800015 	stw	r2,0(sp)
 4001000:	01c10074 	movhi	r7,1025
 4001004:	39cdc184 	addi	r7,r7,14086
 4001008:	000d883a 	mov	r6,zero
 400100c:	01402f44 	movi	r5,189
 4001010:	01000504 	movi	r4,20
 4001014:	40014540 	call	4001454 <vid_print_string>
 4001018:	00001306 	br	4001068 <draw_display_ton+0x114>
	}
	else
	{
		LCD_DrawRect(170,120,230,310,GREY);
 400101c:	00908a04 	movi	r2,16936
 4001020:	d8800015 	stw	r2,0(sp)
 4001024:	01c04d84 	movi	r7,310
 4001028:	01803984 	movi	r6,230
 400102c:	01401e04 	movi	r5,120
 4001030:	01002a84 	movi	r4,170
 4001034:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		vid_print_string(20,189,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"penta. off");
 4001038:	00810074 	movhi	r2,1025
 400103c:	1093da04 	addi	r2,r2,20328
 4001040:	d8800115 	stw	r2,4(sp)
 4001044:	00810074 	movhi	r2,1025
 4001048:	10934084 	addi	r2,r2,19714
 400104c:	d8800015 	stw	r2,0(sp)
 4001050:	01c10074 	movhi	r7,1025
 4001054:	39cdc184 	addi	r7,r7,14086
 4001058:	01bfffc4 	movi	r6,-1
 400105c:	01402f44 	movi	r5,189
 4001060:	01000504 	movi	r4,20
 4001064:	40014540 	call	4001454 <vid_print_string>
	}
	LCD_DrawRect(170,10,230,110,GREY);
 4001068:	00908a04 	movi	r2,16936
 400106c:	d8800015 	stw	r2,0(sp)
 4001070:	01c01b84 	movi	r7,110
 4001074:	01803984 	movi	r6,230
 4001078:	01400284 	movi	r5,10
 400107c:	01002a84 	movi	r4,170
 4001080:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	vid_print_string(244,189,WHITE_32,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4001084:	00810074 	movhi	r2,1025
 4001088:	1093b504 	addi	r2,r2,20180
 400108c:	d8800115 	stw	r2,4(sp)
 4001090:	00810074 	movhi	r2,1025
 4001094:	10934084 	addi	r2,r2,19714
 4001098:	d8800015 	stw	r2,0(sp)
 400109c:	01c10074 	movhi	r7,1025
 40010a0:	39cdc184 	addi	r7,r7,14086
 40010a4:	01bfffc4 	movi	r6,-1
 40010a8:	01402f44 	movi	r5,189
 40010ac:	01003d04 	movi	r4,244
 40010b0:	40014540 	call	4001454 <vid_print_string>
}
 40010b4:	0001883a 	nop
 40010b8:	e037883a 	mov	sp,fp
 40010bc:	dfc00117 	ldw	ra,4(sp)
 40010c0:	df000017 	ldw	fp,0(sp)
 40010c4:	dec00204 	addi	sp,sp,8
 40010c8:	f800283a 	ret

040010cc <draw_display_ton_update>:
void draw_display_ton_update(alt_u8 cntrl_reg_pitch)
{
 40010cc:	deffad04 	addi	sp,sp,-332
 40010d0:	dfc05215 	stw	ra,328(sp)
 40010d4:	df005115 	stw	fp,324(sp)
 40010d8:	df005104 	addi	fp,sp,324
 40010dc:	2005883a 	mov	r2,r4
 40010e0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 tmp = read_freq_pitch();
 40010e4:	40107300 	call	4010730 <read_freq_pitch>
 40010e8:	e0bfb515 	stw	r2,-300(fp)
	alt_u8 index = (alt_u8)((tmp & 0xFC000000)>>26);
 40010ec:	e0bfb517 	ldw	r2,-300(fp)
 40010f0:	1004d6ba 	srli	r2,r2,26
 40010f4:	e0bfb105 	stb	r2,-316(fp)
	alt_u32 freq = tmp & 0xFFFFF;
 40010f8:	e0ffb517 	ldw	r3,-300(fp)
 40010fc:	00800434 	movhi	r2,16
 4001100:	10bfffc4 	addi	r2,r2,-1
 4001104:	1884703a 	and	r2,r3,r2
 4001108:	e0bfb615 	stw	r2,-296(fp)
	alt_u8 index_old;
	alt_16 pixel_accuracy=0;
 400110c:	e03fb18d 	sth	zero,-314(fp)
	alt_16 pixel_accuracy_mean=0;
 4001110:	e03fb20d 	sth	zero,-312(fp)
	char penta_string[21][4] = {{"C#3\0"},{"D#3\0"},{"F#3\0"},{"G#3\0"},{"A#3\0"},{"C#4\0"},{"D#4\0"},{"F#4\0"},{"G#4\0"},{"A#4\0"},{"C#5\0"},{"D#5\0"},{"F#5\0"},{"G#5\0"},{"A#5\0"},{"C#6\0"},{"D#6\0"},{"F#6\0"},{"G#6\0"},{"A#6\0"},{"C#7\0"}};
 4001114:	00810074 	movhi	r2,1025
 4001118:	1093e244 	addi	r2,r2,20361
 400111c:	e0ffb744 	addi	r3,fp,-291
 4001120:	1009883a 	mov	r4,r2
 4001124:	00801504 	movi	r2,84
 4001128:	100d883a 	mov	r6,r2
 400112c:	200b883a 	mov	r5,r4
 4001130:	1809883a 	mov	r4,r3
 4001134:	40023480 	call	4002348 <memcpy>
	char ton_string[49][4] = {{"C3 \0"},{"C#3\0"},{"D3 \0"},{"D#3\0"},{"E3 \0"},{"F3 \0"},{"F#3\0"},{"G3 \0"},{"G#3\0"},{"A3 \0"},{"A#3\0"},{"B3 \0"},{"C4 \0"},{"C#4\0"},{"D4 \0"},{"D#4\0"},{"E4 \0"},{"F4 \0"},{"F#4\0"},{"G4 \0"},{"G#4\0"},{"A4 \0"},{"A#4\0"},{"B4 \0"},{"C5 \0"},{"C#5\0"},{"D5 \0"},{"D#5\0"},{"E5 \0"},{"F5 \0"},{"F#5\0"},{"G5 \0"},{"G#5\0"},{"A5 \0"},{"A#5\0"},{"B5 \0"},{"C6 \0"},{"C#6\0"},{"D6 \0"},{"D#6\0"},{"E6 \0"},{"F6 \0"},{"F#6\0"},{"G6 \0"},{"G#6\0"},{"A6 \0"},{"A#6\0"},{"B6 \0"},{"C7 \0"}};
 4001138:	00810074 	movhi	r2,1025
 400113c:	1093f744 	addi	r2,r2,20445
 4001140:	e0ffcc44 	addi	r3,fp,-207
 4001144:	1009883a 	mov	r4,r2
 4001148:	00803104 	movi	r2,196
 400114c:	100d883a 	mov	r6,r2
 4001150:	200b883a 	mov	r5,r4
 4001154:	1809883a 	mov	r4,r3
 4001158:	40023480 	call	4002348 <memcpy>
	char display_string[4];

	printf("freq ton_update %ld\n", freq);
 400115c:	e17fb617 	ldw	r5,-296(fp)
 4001160:	01010074 	movhi	r4,1025
 4001164:	2113dd04 	addi	r4,r4,20340
 4001168:	40024c00 	call	40024c0 <printf>

	pixel_accuracy = get_pixel_pitch_accuracy((cntrl_reg_pitch & 4) >> 2,tmp);
 400116c:	e0bfff03 	ldbu	r2,-4(fp)
 4001170:	1080010c 	andi	r2,r2,4
 4001174:	1005d0ba 	srai	r2,r2,2
 4001178:	10803fcc 	andi	r2,r2,255
 400117c:	e17fb517 	ldw	r5,-300(fp)
 4001180:	1009883a 	mov	r4,r2
 4001184:	40107800 	call	4010780 <get_pixel_pitch_accuracy>
 4001188:	e0bfb18d 	sth	r2,-314(fp)
	if((freq > 75178) && ((cntrl_reg_pitch & 4) == 4))
 400118c:	e0ffb617 	ldw	r3,-296(fp)
 4001190:	00800074 	movhi	r2,1
 4001194:	10896a84 	addi	r2,r2,9642
 4001198:	10c0072e 	bgeu	r2,r3,40011b8 <draw_display_ton_update+0xec>
 400119c:	e0bfff03 	ldbu	r2,-4(fp)
 40011a0:	1080010c 	andi	r2,r2,4
 40011a4:	10000426 	beq	r2,zero,40011b8 <draw_display_ton_update+0xec>
	{
		index = 20;
 40011a8:	00800504 	movi	r2,20
 40011ac:	e0bfb105 	stb	r2,-316(fp)
		pixel_accuracy = 150;
 40011b0:	00802584 	movi	r2,150
 40011b4:	e0bfb18d 	sth	r2,-314(fp)
	}
	if((freq > 68939) && ((cntrl_reg_pitch & 4) == 0))
 40011b8:	e0ffb617 	ldw	r3,-296(fp)
 40011bc:	00800074 	movhi	r2,1
 40011c0:	108352c4 	addi	r2,r2,3403
 40011c4:	10c0072e 	bgeu	r2,r3,40011e4 <draw_display_ton_update+0x118>
 40011c8:	e0bfff03 	ldbu	r2,-4(fp)
 40011cc:	1080010c 	andi	r2,r2,4
 40011d0:	1000041e 	bne	r2,zero,40011e4 <draw_display_ton_update+0x118>
	{
		index = 48;
 40011d4:	00800c04 	movi	r2,48
 40011d8:	e0bfb105 	stb	r2,-316(fp)
		pixel_accuracy = 150;
 40011dc:	00802584 	movi	r2,150
 40011e0:	e0bfb18d 	sth	r2,-314(fp)
	}
	if(index_old != index){
 40011e4:	e0ffb703 	ldbu	r3,-292(fp)
 40011e8:	e0bfb103 	ldbu	r2,-316(fp)
 40011ec:	18806226 	beq	r3,r2,4001378 <draw_display_ton_update+0x2ac>
		LCD_DrawRect(10,90,60,200,WHITE);
 40011f0:	00bfffd4 	movui	r2,65535
 40011f4:	d8800015 	stw	r2,0(sp)
 40011f8:	01c03204 	movi	r7,200
 40011fc:	01800f04 	movi	r6,60
 4001200:	01401684 	movi	r5,90
 4001204:	01000284 	movi	r4,10
 4001208:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		if ((cntrl_reg_pitch & 4) == 4 ){
 400120c:	e0bfff03 	ldbu	r2,-4(fp)
 4001210:	1080010c 	andi	r2,r2,4
 4001214:	10002b26 	beq	r2,zero,40012c4 <draw_display_ton_update+0x1f8>

			for(int i = 0; i < 4;i++){
 4001218:	e03fb315 	stw	zero,-308(fp)
 400121c:	00001006 	br	4001260 <draw_display_ton_update+0x194>
				display_string[i] = penta_string[index][i];
 4001220:	e0bfb103 	ldbu	r2,-316(fp)
 4001224:	1085883a 	add	r2,r2,r2
 4001228:	1085883a 	add	r2,r2,r2
 400122c:	e13fb104 	addi	r4,fp,-316
 4001230:	2087883a 	add	r3,r4,r2
 4001234:	e0bfb317 	ldw	r2,-308(fp)
 4001238:	1885883a 	add	r2,r3,r2
 400123c:	10800644 	addi	r2,r2,25
 4001240:	10c00003 	ldbu	r3,0(r2)
 4001244:	e13ffd44 	addi	r4,fp,-11
 4001248:	e0bfb317 	ldw	r2,-308(fp)
 400124c:	2085883a 	add	r2,r4,r2
 4001250:	10c00005 	stb	r3,0(r2)
	}
	if(index_old != index){
		LCD_DrawRect(10,90,60,200,WHITE);
		if ((cntrl_reg_pitch & 4) == 4 ){

			for(int i = 0; i < 4;i++){
 4001254:	e0bfb317 	ldw	r2,-308(fp)
 4001258:	10800044 	addi	r2,r2,1
 400125c:	e0bfb315 	stw	r2,-308(fp)
 4001260:	e0bfb317 	ldw	r2,-308(fp)
 4001264:	10800110 	cmplti	r2,r2,4
 4001268:	103fed1e 	bne	r2,zero,4001220 <__reset+0xfa811220>
				display_string[i] = penta_string[index][i];
			}
			vid_print_string(160 - get_string_width(penta_string[index]),35,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,&display_string);
 400126c:	e0bfb103 	ldbu	r2,-316(fp)
 4001270:	e0ffb744 	addi	r3,fp,-291
 4001274:	1085883a 	add	r2,r2,r2
 4001278:	1085883a 	add	r2,r2,r2
 400127c:	1885883a 	add	r2,r3,r2
 4001280:	1009883a 	mov	r4,r2
 4001284:	40015980 	call	4001598 <get_string_width>
 4001288:	1007883a 	mov	r3,r2
 400128c:	00802804 	movi	r2,160
 4001290:	10c7c83a 	sub	r3,r2,r3
 4001294:	e0bffd44 	addi	r2,fp,-11
 4001298:	d8800115 	stw	r2,4(sp)
 400129c:	00810074 	movhi	r2,1025
 40012a0:	10934084 	addi	r2,r2,19714
 40012a4:	d8800015 	stw	r2,0(sp)
 40012a8:	01c10074 	movhi	r7,1025
 40012ac:	39cdc184 	addi	r7,r7,14086
 40012b0:	000d883a 	mov	r6,zero
 40012b4:	014008c4 	movi	r5,35
 40012b8:	1809883a 	mov	r4,r3
 40012bc:	40014540 	call	4001454 <vid_print_string>
 40012c0:	00002a06 	br	400136c <draw_display_ton_update+0x2a0>
		}else{
			for(int i = 0; i < 4;i++){
 40012c4:	e03fb415 	stw	zero,-304(fp)
 40012c8:	00001006 	br	400130c <draw_display_ton_update+0x240>
					display_string[i] = ton_string[index][i];
 40012cc:	e0bfb103 	ldbu	r2,-316(fp)
 40012d0:	1085883a 	add	r2,r2,r2
 40012d4:	1085883a 	add	r2,r2,r2
 40012d8:	e13fb104 	addi	r4,fp,-316
 40012dc:	2087883a 	add	r3,r4,r2
 40012e0:	e0bfb417 	ldw	r2,-304(fp)
 40012e4:	1885883a 	add	r2,r3,r2
 40012e8:	10801b44 	addi	r2,r2,109
 40012ec:	10c00003 	ldbu	r3,0(r2)
 40012f0:	e13ffd44 	addi	r4,fp,-11
 40012f4:	e0bfb417 	ldw	r2,-304(fp)
 40012f8:	2085883a 	add	r2,r4,r2
 40012fc:	10c00005 	stb	r3,0(r2)
			for(int i = 0; i < 4;i++){
				display_string[i] = penta_string[index][i];
			}
			vid_print_string(160 - get_string_width(penta_string[index]),35,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,&display_string);
		}else{
			for(int i = 0; i < 4;i++){
 4001300:	e0bfb417 	ldw	r2,-304(fp)
 4001304:	10800044 	addi	r2,r2,1
 4001308:	e0bfb415 	stw	r2,-304(fp)
 400130c:	e0bfb417 	ldw	r2,-304(fp)
 4001310:	10800110 	cmplti	r2,r2,4
 4001314:	103fed1e 	bne	r2,zero,40012cc <__reset+0xfa8112cc>
					display_string[i] = ton_string[index][i];
				}
			vid_print_string(160 - get_string_width(ton_string[index]),35,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,&display_string);
 4001318:	e0bfb103 	ldbu	r2,-316(fp)
 400131c:	e0ffcc44 	addi	r3,fp,-207
 4001320:	1085883a 	add	r2,r2,r2
 4001324:	1085883a 	add	r2,r2,r2
 4001328:	1885883a 	add	r2,r3,r2
 400132c:	1009883a 	mov	r4,r2
 4001330:	40015980 	call	4001598 <get_string_width>
 4001334:	1007883a 	mov	r3,r2
 4001338:	00802804 	movi	r2,160
 400133c:	10c7c83a 	sub	r3,r2,r3
 4001340:	e0bffd44 	addi	r2,fp,-11
 4001344:	d8800115 	stw	r2,4(sp)
 4001348:	00810074 	movhi	r2,1025
 400134c:	10934084 	addi	r2,r2,19714
 4001350:	d8800015 	stw	r2,0(sp)
 4001354:	01c10074 	movhi	r7,1025
 4001358:	39cdc184 	addi	r7,r7,14086
 400135c:	000d883a 	mov	r6,zero
 4001360:	014008c4 	movi	r5,35
 4001364:	1809883a 	mov	r4,r3
 4001368:	40014540 	call	4001454 <vid_print_string>
		}
		pixel_accuracy_mean = pixel_accuracy;
 400136c:	e0bfb18b 	ldhu	r2,-314(fp)
 4001370:	e0bfb20d 	sth	r2,-312(fp)
 4001374:	00000506 	br	400138c <draw_display_ton_update+0x2c0>
	}
	else
	{
		pixel_accuracy_mean = ((pixel_accuracy_mean + pixel_accuracy) >> 1);
 4001378:	e0ffb20f 	ldh	r3,-312(fp)
 400137c:	e0bfb18f 	ldh	r2,-314(fp)
 4001380:	1885883a 	add	r2,r3,r2
 4001384:	1005d07a 	srai	r2,r2,1
 4001388:	e0bfb20d 	sth	r2,-312(fp)
	}
	if((cntrl_reg_pitch & 4) == 4)
 400138c:	e0bfff03 	ldbu	r2,-4(fp)
 4001390:	1080010c 	andi	r2,r2,4
 4001394:	10002526 	beq	r2,zero,400142c <draw_display_ton_update+0x360>
	{
		//clear cursor
		LCD_DrawRect(133,(160 -pixel_accuracy_old),152,(160 - pixel_accuracy_old+2),WHITE);
 4001398:	d0a0160b 	ldhu	r2,-32680(gp)
 400139c:	1007883a 	mov	r3,r2
 40013a0:	00802804 	movi	r2,160
 40013a4:	10c5c83a 	sub	r2,r2,r3
 40013a8:	10ffffcc 	andi	r3,r2,65535
 40013ac:	d0a0160b 	ldhu	r2,-32680(gp)
 40013b0:	1009883a 	mov	r4,r2
 40013b4:	00802884 	movi	r2,162
 40013b8:	1105c83a 	sub	r2,r2,r4
 40013bc:	113fffcc 	andi	r4,r2,65535
 40013c0:	00bfffd4 	movui	r2,65535
 40013c4:	d8800015 	stw	r2,0(sp)
 40013c8:	200f883a 	mov	r7,r4
 40013cc:	01802604 	movi	r6,152
 40013d0:	180b883a 	mov	r5,r3
 40013d4:	01002144 	movi	r4,133
 40013d8:	400fe7c0 	call	400fe7c <LCD_DrawRect>

		LCD_DrawRect(60,159,155,161,BLACK);
 40013dc:	d8000015 	stw	zero,0(sp)
 40013e0:	01c02844 	movi	r7,161
 40013e4:	018026c4 	movi	r6,155
 40013e8:	014027c4 	movi	r5,159
 40013ec:	01000f04 	movi	r4,60
 40013f0:	400fe7c0 	call	400fe7c <LCD_DrawRect>
		//draw cursor
		LCD_DrawRect(133,(160 - pixel_accuracy_mean),152,(160 - pixel_accuracy_mean+2),BLACK);
 40013f4:	e0bfb20b 	ldhu	r2,-312(fp)
 40013f8:	00c02804 	movi	r3,160
 40013fc:	1885c83a 	sub	r2,r3,r2
 4001400:	113fffcc 	andi	r4,r2,65535
 4001404:	e0bfb20b 	ldhu	r2,-312(fp)
 4001408:	00c02884 	movi	r3,162
 400140c:	1885c83a 	sub	r2,r3,r2
 4001410:	10bfffcc 	andi	r2,r2,65535
 4001414:	d8000015 	stw	zero,0(sp)
 4001418:	100f883a 	mov	r7,r2
 400141c:	01802604 	movi	r6,152
 4001420:	200b883a 	mov	r5,r4
 4001424:	01002144 	movi	r4,133
 4001428:	400fe7c0 	call	400fe7c <LCD_DrawRect>
	}
	pixel_accuracy_old = pixel_accuracy_mean;
 400142c:	e0bfb20b 	ldhu	r2,-312(fp)
 4001430:	d0a0160d 	sth	r2,-32680(gp)
	index_old = index;
 4001434:	e0bfb103 	ldbu	r2,-316(fp)
 4001438:	e0bfb705 	stb	r2,-292(fp)
}
 400143c:	0001883a 	nop
 4001440:	e037883a 	mov	sp,fp
 4001444:	dfc00117 	ldw	ra,4(sp)
 4001448:	df000017 	ldw	fp,0(sp)
 400144c:	dec00204 	addi	sp,sp,8
 4001450:	f800283a 	ret

04001454 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, const alt_u8 *font, const alt_u16 (*font_descriptor)[2], char string[])
{
 4001454:	defff604 	addi	sp,sp,-40
 4001458:	dfc00915 	stw	ra,36(sp)
 400145c:	df000815 	stw	fp,32(sp)
 4001460:	df000804 	addi	fp,sp,32
 4001464:	e13ffc15 	stw	r4,-16(fp)
 4001468:	e17ffd15 	stw	r5,-12(fp)
 400146c:	e1bffe15 	stw	r6,-8(fp)
 4001470:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4001474:	e03ffa15 	stw	zero,-24(fp)
  //int original_horiz_offset;

  //original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001478:	00003906 	br	4001560 <vid_print_string+0x10c>
    //Handle newline char here.
    if (string[i] == ' ') {
 400147c:	e0bffa17 	ldw	r2,-24(fp)
 4001480:	e0c00317 	ldw	r3,12(fp)
 4001484:	1885883a 	add	r2,r3,r2
 4001488:	10800003 	ldbu	r2,0(r2)
 400148c:	10803fcc 	andi	r2,r2,255
 4001490:	1080201c 	xori	r2,r2,128
 4001494:	10bfe004 	addi	r2,r2,-128
 4001498:	10800818 	cmpnei	r2,r2,32
 400149c:	1000071e 	bne	r2,zero,40014bc <vid_print_string+0x68>
      horiz_offset += 10 ;
 40014a0:	e0bffc17 	ldw	r2,-16(fp)
 40014a4:	10800284 	addi	r2,r2,10
 40014a8:	e0bffc15 	stw	r2,-16(fp)
      i++;
 40014ac:	e0bffa17 	ldw	r2,-24(fp)
 40014b0:	10800044 	addi	r2,r2,1
 40014b4:	e0bffa15 	stw	r2,-24(fp)
      continue;
 40014b8:	00002906 	br	4001560 <vid_print_string+0x10c>
    }
    // Lay down that character and increment our offsets.
    temp_char = (string[i] - 0x21);
 40014bc:	e0bffa17 	ldw	r2,-24(fp)
 40014c0:	e0c00317 	ldw	r3,12(fp)
 40014c4:	1885883a 	add	r2,r3,r2
 40014c8:	10800003 	ldbu	r2,0(r2)
 40014cc:	10803fcc 	andi	r2,r2,255
 40014d0:	1080201c 	xori	r2,r2,128
 40014d4:	10bfe004 	addi	r2,r2,-128
 40014d8:	10bff7c4 	addi	r2,r2,-33
 40014dc:	e0bffb0d 	sth	r2,-20(fp)
    bit_num_char = *(*(font_descriptor + temp_char));
 40014e0:	e0bffb0b 	ldhu	r2,-20(fp)
 40014e4:	1085883a 	add	r2,r2,r2
 40014e8:	1085883a 	add	r2,r2,r2
 40014ec:	1007883a 	mov	r3,r2
 40014f0:	e0800217 	ldw	r2,8(fp)
 40014f4:	10c5883a 	add	r2,r2,r3
 40014f8:	1080000b 	ldhu	r2,0(r2)
 40014fc:	e0bffb8d 	sth	r2,-18(fp)
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, font_descriptor);
 4001500:	e0bffa17 	ldw	r2,-24(fp)
 4001504:	e0c00317 	ldw	r3,12(fp)
 4001508:	1885883a 	add	r2,r3,r2
 400150c:	10800003 	ldbu	r2,0(r2)
 4001510:	10c03fcc 	andi	r3,r2,255
 4001514:	18c0201c 	xori	r3,r3,128
 4001518:	18ffe004 	addi	r3,r3,-128
 400151c:	e0800217 	ldw	r2,8(fp)
 4001520:	d8800115 	stw	r2,4(sp)
 4001524:	e0bfff17 	ldw	r2,-4(fp)
 4001528:	d8800015 	stw	r2,0(sp)
 400152c:	180f883a 	mov	r7,r3
 4001530:	e1bffe17 	ldw	r6,-8(fp)
 4001534:	e17ffd17 	ldw	r5,-12(fp)
 4001538:	e13ffc17 	ldw	r4,-16(fp)
 400153c:	40016600 	call	4001660 <vid_print_char>
    horiz_offset += 4 + (int)bit_num_char;
 4001540:	e0bffb8b 	ldhu	r2,-18(fp)
 4001544:	10800104 	addi	r2,r2,4
 4001548:	e0fffc17 	ldw	r3,-16(fp)
 400154c:	1885883a 	add	r2,r3,r2
 4001550:	e0bffc15 	stw	r2,-16(fp)
    i++;
 4001554:	e0bffa17 	ldw	r2,-24(fp)
 4001558:	10800044 	addi	r2,r2,1
 400155c:	e0bffa15 	stw	r2,-24(fp)
  //int original_horiz_offset;

  //original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001560:	e0bffa17 	ldw	r2,-24(fp)
 4001564:	e0c00317 	ldw	r3,12(fp)
 4001568:	1885883a 	add	r2,r3,r2
 400156c:	10800003 	ldbu	r2,0(r2)
 4001570:	10803fcc 	andi	r2,r2,255
 4001574:	1080201c 	xori	r2,r2,128
 4001578:	10bfe004 	addi	r2,r2,-128
 400157c:	103fbf1e 	bne	r2,zero,400147c <__reset+0xfa81147c>
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, font_descriptor);
    horiz_offset += 4 + (int)bit_num_char;
    i++;

  }
  return (0);
 4001580:	0005883a 	mov	r2,zero
}
 4001584:	e037883a 	mov	sp,fp
 4001588:	dfc00117 	ldw	ra,4(sp)
 400158c:	df000017 	ldw	fp,0(sp)
 4001590:	dec00204 	addi	sp,sp,8
 4001594:	f800283a 	ret

04001598 <get_string_width>:
*  Purpose: returns the pixel width of the given string
*
******************************************************************/

int get_string_width(char string[])
{
 4001598:	defffb04 	addi	sp,sp,-20
 400159c:	dfc00415 	stw	ra,16(sp)
 40015a0:	df000315 	stw	fp,12(sp)
 40015a4:	df000304 	addi	fp,sp,12
 40015a8:	e13fff15 	stw	r4,-4(fp)
	int width = 0;
 40015ac:	e03ffd15 	stw	zero,-12(fp)

	width = 4*(strlen(string)-1);
 40015b0:	e13fff17 	ldw	r4,-4(fp)
 40015b4:	40025d00 	call	40025d0 <strlen>
 40015b8:	1007883a 	mov	r3,r2
 40015bc:	00900034 	movhi	r2,16384
 40015c0:	10bfffc4 	addi	r2,r2,-1
 40015c4:	1885883a 	add	r2,r3,r2
 40015c8:	1085883a 	add	r2,r2,r2
 40015cc:	1085883a 	add	r2,r2,r2
 40015d0:	e0bffd15 	stw	r2,-12(fp)
	for(int i = 0; i < strlen(string);i++){
 40015d4:	e03ffe15 	stw	zero,-8(fp)
 40015d8:	00001506 	br	4001630 <get_string_width+0x98>
		width += arial_22ptDescriptors[string[i]-0x21][0];
 40015dc:	e0bffe17 	ldw	r2,-8(fp)
 40015e0:	e0ffff17 	ldw	r3,-4(fp)
 40015e4:	1885883a 	add	r2,r3,r2
 40015e8:	10800003 	ldbu	r2,0(r2)
 40015ec:	10803fcc 	andi	r2,r2,255
 40015f0:	1080201c 	xori	r2,r2,128
 40015f4:	10bfe004 	addi	r2,r2,-128
 40015f8:	10fff7c4 	addi	r3,r2,-33
 40015fc:	00810074 	movhi	r2,1025
 4001600:	10934084 	addi	r2,r2,19714
 4001604:	18c7883a 	add	r3,r3,r3
 4001608:	18c7883a 	add	r3,r3,r3
 400160c:	10c5883a 	add	r2,r2,r3
 4001610:	1080000b 	ldhu	r2,0(r2)
 4001614:	10bfffcc 	andi	r2,r2,65535
 4001618:	e0fffd17 	ldw	r3,-12(fp)
 400161c:	1885883a 	add	r2,r3,r2
 4001620:	e0bffd15 	stw	r2,-12(fp)
int get_string_width(char string[])
{
	int width = 0;

	width = 4*(strlen(string)-1);
	for(int i = 0; i < strlen(string);i++){
 4001624:	e0bffe17 	ldw	r2,-8(fp)
 4001628:	10800044 	addi	r2,r2,1
 400162c:	e0bffe15 	stw	r2,-8(fp)
 4001630:	e13fff17 	ldw	r4,-4(fp)
 4001634:	40025d00 	call	40025d0 <strlen>
 4001638:	1007883a 	mov	r3,r2
 400163c:	e0bffe17 	ldw	r2,-8(fp)
 4001640:	10ffe636 	bltu	r2,r3,40015dc <__reset+0xfa8115dc>
		width += arial_22ptDescriptors[string[i]-0x21][0];
	}
	return (width >> 1);
 4001644:	e0bffd17 	ldw	r2,-12(fp)
 4001648:	1005d07a 	srai	r2,r2,1
}
 400164c:	e037883a 	mov	sp,fp
 4001650:	dfc00117 	ldw	ra,4(sp)
 4001654:	df000017 	ldw	fp,0(sp)
 4001658:	dec00204 	addi	sp,sp,8
 400165c:	f800283a 	ret

04001660 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, const alt_u8 *font, const alt_u16 (*font_descriptor)[2])
{
 4001660:	defff204 	addi	sp,sp,-56
 4001664:	dfc00d15 	stw	ra,52(sp)
 4001668:	df000c15 	stw	fp,48(sp)
 400166c:	df000c04 	addi	fp,sp,48
 4001670:	e13ffc15 	stw	r4,-16(fp)
 4001674:	e17ffd15 	stw	r5,-12(fp)
 4001678:	e1bffe15 	stw	r6,-8(fp)
 400167c:	3805883a 	mov	r2,r7
 4001680:	e0bfff05 	stb	r2,-4(fp)
  alt_u16 row_offset;
  alt_u16 bit_num_char;
  alt_u16 bit_num_char_temp;
  alt_u8 byte_offset;
  // Convert the ASCII value to an array offset
  temp_char = (character - 0x21);
 4001684:	e0bfff07 	ldb	r2,-4(fp)
 4001688:	10bff7c4 	addi	r2,r2,-33
 400168c:	e0bff915 	stw	r2,-28(fp)
  row_offset = *(*(font_descriptor + temp_char)+ 1);
 4001690:	e0bff917 	ldw	r2,-28(fp)
 4001694:	1085883a 	add	r2,r2,r2
 4001698:	1085883a 	add	r2,r2,r2
 400169c:	10800084 	addi	r2,r2,2
 40016a0:	e0c00317 	ldw	r3,12(fp)
 40016a4:	1885883a 	add	r2,r3,r2
 40016a8:	1080000b 	ldhu	r2,0(r2)
 40016ac:	e0bffa0d 	sth	r2,-24(fp)
  bit_num_char = *(*(font_descriptor + temp_char));
 40016b0:	e0bff917 	ldw	r2,-28(fp)
 40016b4:	1085883a 	add	r2,r2,r2
 40016b8:	1085883a 	add	r2,r2,r2
 40016bc:	1007883a 	mov	r3,r2
 40016c0:	e0800317 	ldw	r2,12(fp)
 40016c4:	10c5883a 	add	r2,r2,r3
 40016c8:	1080000b 	ldhu	r2,0(r2)
 40016cc:	e0bffa8d 	sth	r2,-22(fp)
  if(bit_num_char <=8){
 40016d0:	e0bffa8b 	ldhu	r2,-22(fp)
 40016d4:	10800268 	cmpgeui	r2,r2,9
 40016d8:	1000031e 	bne	r2,zero,40016e8 <vid_print_char+0x88>
	  byte_offset = 1;
 40016dc:	00800044 	movi	r2,1
 40016e0:	e0bff885 	stb	r2,-30(fp)
 40016e4:	00000e06 	br	4001720 <vid_print_char+0xc0>
  }else if(bit_num_char <= 16){
 40016e8:	e0bffa8b 	ldhu	r2,-22(fp)
 40016ec:	10800468 	cmpgeui	r2,r2,17
 40016f0:	1000031e 	bne	r2,zero,4001700 <vid_print_char+0xa0>
	  byte_offset = 2;
 40016f4:	00800084 	movi	r2,2
 40016f8:	e0bff885 	stb	r2,-30(fp)
 40016fc:	00000806 	br	4001720 <vid_print_char+0xc0>
  }else if(bit_num_char <=24){
 4001700:	e0bffa8b 	ldhu	r2,-22(fp)
 4001704:	10800668 	cmpgeui	r2,r2,25
 4001708:	1000031e 	bne	r2,zero,4001718 <vid_print_char+0xb8>
	  byte_offset = 3;
 400170c:	008000c4 	movi	r2,3
 4001710:	e0bff885 	stb	r2,-30(fp)
 4001714:	00000206 	br	4001720 <vid_print_char+0xc0>
  }else{
	  byte_offset = 4;
 4001718:	00800104 	movi	r2,4
 400171c:	e0bff885 	stb	r2,-30(fp)
  }

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
 4001720:	e03ff415 	stw	zero,-48(fp)
 4001724:	00004106 	br	400182c <vid_print_char+0x1cc>
      char_row = font + (row_offset) + i*byte_offset;//i*4 arial
 4001728:	e0bffa0b 	ldhu	r2,-24(fp)
 400172c:	e13ff883 	ldbu	r4,-30(fp)
 4001730:	e0fff417 	ldw	r3,-48(fp)
 4001734:	20c7383a 	mul	r3,r4,r3
 4001738:	10c5883a 	add	r2,r2,r3
 400173c:	e0c00217 	ldw	r3,8(fp)
 4001740:	1885883a 	add	r2,r3,r2
 4001744:	e0bffb15 	stw	r2,-20(fp)
      bit_num_char_temp = bit_num_char;
 4001748:	e0bffa8b 	ldhu	r2,-22(fp)
 400174c:	e0bff80d 	sth	r2,-32(fp)
    for(k = 0; k < byte_offset; k++){//4 arila
 4001750:	e03ff615 	stw	zero,-40(fp)
 4001754:	00002f06 	br	4001814 <vid_print_char+0x1b4>
    	if(bit_num_char_temp > 8){
 4001758:	e0bff80b 	ldhu	r2,-32(fp)
 400175c:	10800270 	cmpltui	r2,r2,9
 4001760:	1000061e 	bne	r2,zero,400177c <vid_print_char+0x11c>
    		j_end = 8;
 4001764:	00800204 	movi	r2,8
 4001768:	e0bff715 	stw	r2,-36(fp)
    		bit_num_char_temp= bit_num_char_temp - 8;
 400176c:	e0bff80b 	ldhu	r2,-32(fp)
 4001770:	10bffe04 	addi	r2,r2,-8
 4001774:	e0bff80d 	sth	r2,-32(fp)
 4001778:	00000206 	br	4001784 <vid_print_char+0x124>
    	}else{
    		j_end = bit_num_char_temp;
 400177c:	e0bff80b 	ldhu	r2,-32(fp)
 4001780:	e0bff715 	stw	r2,-36(fp)
    	}
    	for (j = 0; j < j_end; j++) {
 4001784:	e03ff515 	stw	zero,-44(fp)
 4001788:	00001c06 	br	40017fc <vid_print_char+0x19c>
    		//If the font table says the pixel in this location is on for this character, then set it.
    		if (*(char_row+k) & (((alt_u8)0x80) >> j)) {
 400178c:	e0bff617 	ldw	r2,-40(fp)
 4001790:	e0fffb17 	ldw	r3,-20(fp)
 4001794:	1885883a 	add	r2,r3,r2
 4001798:	10800003 	ldbu	r2,0(r2)
 400179c:	10c03fcc 	andi	r3,r2,255
 40017a0:	01002004 	movi	r4,128
 40017a4:	e0bff517 	ldw	r2,-44(fp)
 40017a8:	2085d83a 	sra	r2,r4,r2
 40017ac:	1884703a 	and	r2,r3,r2
 40017b0:	10000f26 	beq	r2,zero,40017f0 <vid_print_char+0x190>
    			//vid_set_pixel((horiz_offset + j + k*8), (vert_offset + i), color); // plot the pixel
    			vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j -k*8), color);
 40017b4:	e0fffd17 	ldw	r3,-12(fp)
 40017b8:	e0bff417 	ldw	r2,-48(fp)
 40017bc:	1889883a 	add	r4,r3,r2
 40017c0:	00c05004 	movi	r3,320
 40017c4:	e0bffc17 	ldw	r2,-16(fp)
 40017c8:	1887c83a 	sub	r3,r3,r2
 40017cc:	e0bff517 	ldw	r2,-44(fp)
 40017d0:	1887c83a 	sub	r3,r3,r2
 40017d4:	e0bff617 	ldw	r2,-40(fp)
 40017d8:	100490fa 	slli	r2,r2,3
 40017dc:	1885c83a 	sub	r2,r3,r2
 40017e0:	e0fffe17 	ldw	r3,-8(fp)
 40017e4:	180d883a 	mov	r6,r3
 40017e8:	100b883a 	mov	r5,r2
 40017ec:	400ff4c0 	call	400ff4c <vid_set_pixel>
    		j_end = 8;
    		bit_num_char_temp= bit_num_char_temp - 8;
    	}else{
    		j_end = bit_num_char_temp;
    	}
    	for (j = 0; j < j_end; j++) {
 40017f0:	e0bff517 	ldw	r2,-44(fp)
 40017f4:	10800044 	addi	r2,r2,1
 40017f8:	e0bff515 	stw	r2,-44(fp)
 40017fc:	e0fff517 	ldw	r3,-44(fp)
 4001800:	e0bff717 	ldw	r2,-36(fp)
 4001804:	18bfe116 	blt	r3,r2,400178c <__reset+0xfa81178c>

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
      char_row = font + (row_offset) + i*byte_offset;//i*4 arial
      bit_num_char_temp = bit_num_char;
    for(k = 0; k < byte_offset; k++){//4 arila
 4001808:	e0bff617 	ldw	r2,-40(fp)
 400180c:	10800044 	addi	r2,r2,1
 4001810:	e0bff615 	stw	r2,-40(fp)
 4001814:	e0bff883 	ldbu	r2,-30(fp)
 4001818:	e0fff617 	ldw	r3,-40(fp)
 400181c:	18bfce16 	blt	r3,r2,4001758 <__reset+0xfa811758>
  }else{
	  byte_offset = 4;
  }

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
 4001820:	e0bff417 	ldw	r2,-48(fp)
 4001824:	10800044 	addi	r2,r2,1
 4001828:	e0bff415 	stw	r2,-48(fp)
 400182c:	e0bff417 	ldw	r2,-48(fp)
 4001830:	10800710 	cmplti	r2,r2,28
 4001834:	103fbc1e 	bne	r2,zero,4001728 <__reset+0xfa811728>
    			vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j -k*8), color);
    		}
    	}
    }
  }
  return(0);
 4001838:	0005883a 	mov	r2,zero
}
 400183c:	e037883a 	mov	sp,fp
 4001840:	dfc00117 	ldw	ra,4(sp)
 4001844:	df000017 	ldw	fp,0(sp)
 4001848:	dec00204 	addi	sp,sp,8
 400184c:	f800283a 	ret

04001850 <alarm_callback>:
	alt_u8 enable_xy;
	alt_u32 next_active_time;
} XY;

//  callback function for alarm
alt_u32 alarm_callback(void* context) {
 4001850:	defffc04 	addi	sp,sp,-16
 4001854:	dfc00315 	stw	ra,12(sp)
 4001858:	df000215 	stw	fp,8(sp)
 400185c:	df000204 	addi	fp,sp,8
 4001860:	e13fff15 	stw	r4,-4(fp)
	//Set alarm flag
	printf("ALARM ton !!!\n");
 4001864:	01010074 	movhi	r4,1025
 4001868:	21142904 	addi	r4,r4,20644
 400186c:	40025bc0 	call	40025bc <puts>
	printf("freq data\n");
 4001870:	01010074 	movhi	r4,1025
 4001874:	21142d04 	addi	r4,r4,20660
 4001878:	40025bc0 	call	40025bc <puts>
	alt_u32 tmp = read_freq_pitch();
 400187c:	40107300 	call	4010730 <read_freq_pitch>
 4001880:	e0bffe15 	stw	r2,-8(fp)
	printf("freq data %ld\n", tmp);
 4001884:	e17ffe17 	ldw	r5,-8(fp)
 4001888:	01010074 	movhi	r4,1025
 400188c:	21143004 	addi	r4,r4,20672
 4001890:	40024c00 	call	40024c0 <printf>
	draw_display_ton_update(cntrl_reg_pitch);
 4001894:	d0a00003 	ldbu	r2,-32768(gp)
 4001898:	10803fcc 	andi	r2,r2,255
 400189c:	1009883a 	mov	r4,r2
 40018a0:	40010cc0 	call	40010cc <draw_display_ton_update>
	return context = 50;
 40018a4:	00800c84 	movi	r2,50
 40018a8:	e0bfff15 	stw	r2,-4(fp)
 40018ac:	00800c84 	movi	r2,50
}
 40018b0:	e037883a 	mov	sp,fp
 40018b4:	dfc00117 	ldw	ra,4(sp)
 40018b8:	df000017 	ldw	fp,0(sp)
 40018bc:	dec00204 	addi	sp,sp,8
 40018c0:	f800283a 	ret

040018c4 <main>:
//  callback function for alarm

int main() {
 40018c4:	defff904 	addi	sp,sp,-28
 40018c8:	dfc00615 	stw	ra,24(sp)
 40018cc:	df000515 	stw	fp,20(sp)
 40018d0:	df000504 	addi	fp,sp,20
	//initialization
	XY xy;
	xy.x_coord = 0;
 40018d4:	e03ffd0d 	sth	zero,-12(fp)
	xy.y_coord = 0;
 40018d8:	e03ffd8d 	sth	zero,-10(fp)
	xy.enable_xy = 0;
 40018dc:	e03ffe05 	stb	zero,-8(fp)
	xy.next_active_time = 0;
 40018e0:	e03fff15 	stw	zero,-4(fp)
	alt_u8 cali_enable = 1;
 40018e4:	00800044 	movi	r2,1
 40018e8:	e0bffb05 	stb	r2,-20(fp)
	alt_u8 vol_bar = 1;
 40018ec:	00800044 	movi	r2,1
 40018f0:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 glissando_delay = 1;
 40018f4:	00800044 	movi	r2,1
 40018f8:	e0bffb85 	stb	r2,-18(fp)
	//init
	touch_init(&xy);
 40018fc:	e0bffd04 	addi	r2,fp,-12
 4001900:	1009883a 	mov	r4,r2
 4001904:	40022bc0 	call	40022bc <touch_init>
	LCD_Init();
 4001908:	400ffec0 	call	400ffec <LCD_Init>
	LCD_Clear(WHITE);
 400190c:	013fffd4 	movui	r4,65535
 4001910:	400fd800 	call	400fd80 <LCD_Clear>
	codec_wm8731_init();
 4001914:	400028c0 	call	400028c <codec_wm8731_init>

	state state = ST_main;
 4001918:	e03ffc15 	stw	zero,-16(fp)
	draw_main_screen();
 400191c:	40003fc0 	call	40003fc <draw_main_screen>
	printf("Hello from Nios II!\n");
 4001920:	01010074 	movhi	r4,1025
 4001924:	21143404 	addi	r4,r4,20688
 4001928:	40025bc0 	call	40025bc <puts>
	//set alarm vol


	while (1) {

		if (xy.enable_xy == 1) {
 400192c:	e0bffe03 	ldbu	r2,-8(fp)
 4001930:	10803fcc 	andi	r2,r2,255
 4001934:	10800058 	cmpnei	r2,r2,1
 4001938:	103ffc1e 	bne	r2,zero,400192c <__reset+0xfa81192c>
			xy.enable_xy = 0;
 400193c:	e03ffe05 	stb	zero,-8(fp)

			switch (state) {
 4001940:	e0bffc17 	ldw	r2,-16(fp)
 4001944:	108001a8 	cmpgeui	r2,r2,6
 4001948:	103ff81e 	bne	r2,zero,400192c <__reset+0xfa81192c>
 400194c:	e0bffc17 	ldw	r2,-16(fp)
 4001950:	100690ba 	slli	r3,r2,2
 4001954:	00810034 	movhi	r2,1024
 4001958:	10865a04 	addi	r2,r2,6504
 400195c:	1885883a 	add	r2,r3,r2
 4001960:	10800017 	ldw	r2,0(r2)
 4001964:	1000683a 	jmp	r2
 4001968:	04001980 	call	400198 <__alt_mem_dram_cntrl-0x3bffe68>
 400196c:	04001b80 	call	4001b8 <__alt_mem_dram_cntrl-0x3bffe48>
 4001970:	04001a68 	cmpgeui	r16,zero,105
 4001974:	04001bc4 	movi	r16,111
 4001978:	04001d0c 	andi	r16,zero,116
 400197c:	04001eb0 	cmpltui	r16,zero,122
			//******main state**********************************************************************
			case ST_main:
				if (xy.y_coord <= 1400) { //Coordinates for calibration
 4001980:	e0bffd8b 	ldhu	r2,-10(fp)
 4001984:	10bfffcc 	andi	r2,r2,65535
 4001988:	10815e68 	cmpgeui	r2,r2,1401
 400198c:	1000161e 	bne	r2,zero,40019e8 <main+0x124>
					state = ST_cali;
 4001990:	00800044 	movi	r2,1
 4001994:	e0bffc15 	stw	r2,-16(fp)

					LCD_Clear(WHITE);
 4001998:	013fffd4 	movui	r4,65535
 400199c:	400fd800 	call	400fd80 <LCD_Clear>
					draw_calibrating_screen(cntrl_reg_pitch ^ 0x02,cntrl_reg_vol ^0x02);
 40019a0:	d0a00003 	ldbu	r2,-32768(gp)
 40019a4:	1080009c 	xori	r2,r2,2
 40019a8:	10c03fcc 	andi	r3,r2,255
 40019ac:	d0a00043 	ldbu	r2,-32767(gp)
 40019b0:	1080009c 	xori	r2,r2,2
 40019b4:	10803fcc 	andi	r2,r2,255
 40019b8:	100b883a 	mov	r5,r2
 40019bc:	1809883a 	mov	r4,r3
 40019c0:	40005080 	call	4000508 <draw_calibrating_screen>
					cali_enable = 1;
 40019c4:	00800044 	movi	r2,1
 40019c8:	e0bffb05 	stb	r2,-20(fp)

					usleep(1000000);
 40019cc:	010003f4 	movhi	r4,15
 40019d0:	21109004 	addi	r4,r4,16960
 40019d4:	400f8fc0 	call	400f8fc <usleep>

					LCD_Clear(WHITE);
 40019d8:	013fffd4 	movui	r4,65535
 40019dc:	400fd800 	call	400fd80 <LCD_Clear>
					draw_calibrating_screen_done();
 40019e0:	40006b80 	call	40006b8 <draw_calibrating_screen_done>
					state = ST_play_help;
					LCD_Clear(WHITE);
					draw_help_screen();
					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
				}
				break;
 40019e4:	00016506 	br	4001f7c <main+0x6b8>

					usleep(1000000);

					LCD_Clear(WHITE);
					draw_calibrating_screen_done();
				} else if (xy.y_coord <= 2800) { //Coordinates for volume state
 40019e8:	e0bffd8b 	ldhu	r2,-10(fp)
 40019ec:	10bfffcc 	andi	r2,r2,65535
 40019f0:	1082bc68 	cmpgeui	r2,r2,2801
 40019f4:	10000d1e 	bne	r2,zero,4001a2c <main+0x168>
					state = ST_volume;
 40019f8:	00800084 	movi	r2,2
 40019fc:	e0bffc15 	stw	r2,-16(fp)
					LCD_Clear(WHITE);
 4001a00:	013fffd4 	movui	r4,65535
 4001a04:	400fd800 	call	400fd80 <LCD_Clear>
					draw_volume_screen();
 4001a08:	40007bc0 	call	40007bc <draw_volume_screen>
					draw_update_volume_bar(vol_bar);
 4001a0c:	e0bffb43 	ldbu	r2,-19(fp)
 4001a10:	1009883a 	mov	r4,r2
 4001a14:	40009140 	call	4000914 <draw_update_volume_bar>
					draw_vol_antenna_on_off(cntrl_reg_vol);
 4001a18:	d0a00043 	ldbu	r2,-32767(gp)
 4001a1c:	10803fcc 	andi	r2,r2,255
 4001a20:	1009883a 	mov	r4,r2
 4001a24:	40009c00 	call	40009c0 <draw_vol_antenna_on_off>
					state = ST_play_help;
					LCD_Clear(WHITE);
					draw_help_screen();
					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
				}
				break;
 4001a28:	00015406 	br	4001f7c <main+0x6b8>
					state = ST_volume;
					LCD_Clear(WHITE);
					draw_volume_screen();
					draw_update_volume_bar(vol_bar);
					draw_vol_antenna_on_off(cntrl_reg_vol);
				} else if (xy.y_coord > 2800) { //Coordinates for play help
 4001a2c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001a30:	10bfffcc 	andi	r2,r2,65535
 4001a34:	1082bc70 	cmpltui	r2,r2,2801
 4001a38:	1001501e 	bne	r2,zero,4001f7c <main+0x6b8>
					state = ST_play_help;
 4001a3c:	008000c4 	movi	r2,3
 4001a40:	e0bffc15 	stw	r2,-16(fp)
					LCD_Clear(WHITE);
 4001a44:	013fffd4 	movui	r4,65535
 4001a48:	400fd800 	call	400fd80 <LCD_Clear>
					draw_help_screen();
 4001a4c:	4000a980 	call	4000a98 <draw_help_screen>
					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
 4001a50:	d0a00003 	ldbu	r2,-32768(gp)
 4001a54:	10803fcc 	andi	r2,r2,255
 4001a58:	1080004c 	andi	r2,r2,1
 4001a5c:	1009883a 	mov	r4,r2
 4001a60:	4000ba40 	call	4000ba4 <draw_glissando_on_off>
				}
				break;
 4001a64:	00014506 	br	4001f7c <main+0x6b8>
			//******volume state*********************************************************
			case ST_volume:
				if ((xy.y_coord >= 2800) && (xy.x_coord <= 1100)) { //Coordinates for return
 4001a68:	e0bffd8b 	ldhu	r2,-10(fp)
 4001a6c:	10bfffcc 	andi	r2,r2,65535
 4001a70:	1082bc30 	cmpltui	r2,r2,2800
 4001a74:	1000091e 	bne	r2,zero,4001a9c <main+0x1d8>
 4001a78:	e0bffd0b 	ldhu	r2,-12(fp)
 4001a7c:	10bfffcc 	andi	r2,r2,65535
 4001a80:	10811368 	cmpgeui	r2,r2,1101
 4001a84:	1000051e 	bne	r2,zero,4001a9c <main+0x1d8>
					state = ST_main;
 4001a88:	e03ffc15 	stw	zero,-16(fp)
					LCD_Clear(WHITE);
 4001a8c:	013fffd4 	movui	r4,65535
 4001a90:	400fd800 	call	400fd80 <LCD_Clear>
					draw_main_screen();
 4001a94:	40003fc0 	call	40003fc <draw_main_screen>
						cntrl_reg_vol = cntrl_reg_vol^ 0x01;
						draw_vol_antenna_on_off(cntrl_reg_vol);
						set_vol_gen(cntrl_reg_vol);
					}
				}
				break;
 4001a98:	00013a06 	br	4001f84 <main+0x6c0>
				if ((xy.y_coord >= 2800) && (xy.x_coord <= 1100)) { //Coordinates for return
					state = ST_main;
					LCD_Clear(WHITE);
					draw_main_screen();
				} else{
					if ((xy.y_coord <= 2050) && (xy.x_coord < 1300)) { //Coordinates for -vol
 4001a9c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001aa0:	10bfffcc 	andi	r2,r2,65535
 4001aa4:	108200e8 	cmpgeui	r2,r2,2051
 4001aa8:	1000091e 	bne	r2,zero,4001ad0 <main+0x20c>
 4001aac:	e0bffd0b 	ldhu	r2,-12(fp)
 4001ab0:	10bfffcc 	andi	r2,r2,65535
 4001ab4:	10814528 	cmpgeui	r2,r2,1300
 4001ab8:	1000051e 	bne	r2,zero,4001ad0 <main+0x20c>
						if(vol_bar != 0){
 4001abc:	e0bffb43 	ldbu	r2,-19(fp)
 4001ac0:	10000326 	beq	r2,zero,4001ad0 <main+0x20c>
							vol_bar--;
 4001ac4:	e0bffb43 	ldbu	r2,-19(fp)
 4001ac8:	10bfffc4 	addi	r2,r2,-1
 4001acc:	e0bffb45 	stb	r2,-19(fp)
						}
					}
					if ((xy.y_coord <= 2050) && (xy.x_coord >= 1300) && (xy.x_coord <= 2300)) { //Coordinates for +vol
 4001ad0:	e0bffd8b 	ldhu	r2,-10(fp)
 4001ad4:	10bfffcc 	andi	r2,r2,65535
 4001ad8:	108200e8 	cmpgeui	r2,r2,2051
 4001adc:	10000e1e 	bne	r2,zero,4001b18 <main+0x254>
 4001ae0:	e0bffd0b 	ldhu	r2,-12(fp)
 4001ae4:	10bfffcc 	andi	r2,r2,65535
 4001ae8:	10814530 	cmpltui	r2,r2,1300
 4001aec:	10000a1e 	bne	r2,zero,4001b18 <main+0x254>
 4001af0:	e0bffd0b 	ldhu	r2,-12(fp)
 4001af4:	10bfffcc 	andi	r2,r2,65535
 4001af8:	10823f68 	cmpgeui	r2,r2,2301
 4001afc:	1000061e 	bne	r2,zero,4001b18 <main+0x254>
						if (vol_bar != 9) {
 4001b00:	e0bffb43 	ldbu	r2,-19(fp)
 4001b04:	10800260 	cmpeqi	r2,r2,9
 4001b08:	1000031e 	bne	r2,zero,4001b18 <main+0x254>
							vol_bar++;
 4001b0c:	e0bffb43 	ldbu	r2,-19(fp)
 4001b10:	10800044 	addi	r2,r2,1
 4001b14:	e0bffb45 	stb	r2,-19(fp)
						}
					}
					set_vol(vol_bar);
 4001b18:	e0bffb43 	ldbu	r2,-19(fp)
 4001b1c:	1009883a 	mov	r4,r2
 4001b20:	40003a00 	call	40003a0 <set_vol>
					draw_update_volume_bar(vol_bar);
 4001b24:	e0bffb43 	ldbu	r2,-19(fp)
 4001b28:	1009883a 	mov	r4,r2
 4001b2c:	40009140 	call	4000914 <draw_update_volume_bar>
					if ((xy.y_coord > 1900) && (xy.y_coord < 2800)){ //Coordinates for disable Volume antenna
 4001b30:	e0bffd8b 	ldhu	r2,-10(fp)
 4001b34:	10bfffcc 	andi	r2,r2,65535
 4001b38:	1081db70 	cmpltui	r2,r2,1901
 4001b3c:	1001111e 	bne	r2,zero,4001f84 <main+0x6c0>
 4001b40:	e0bffd8b 	ldhu	r2,-10(fp)
 4001b44:	10bfffcc 	andi	r2,r2,65535
 4001b48:	1082bc28 	cmpgeui	r2,r2,2800
 4001b4c:	10010d1e 	bne	r2,zero,4001f84 <main+0x6c0>
						cntrl_reg_vol = cntrl_reg_vol^ 0x01;
 4001b50:	d0a00043 	ldbu	r2,-32767(gp)
 4001b54:	1080005c 	xori	r2,r2,1
 4001b58:	d0a00045 	stb	r2,-32767(gp)
						draw_vol_antenna_on_off(cntrl_reg_vol);
 4001b5c:	d0a00043 	ldbu	r2,-32767(gp)
 4001b60:	10803fcc 	andi	r2,r2,255
 4001b64:	1009883a 	mov	r4,r2
 4001b68:	40009c00 	call	40009c0 <draw_vol_antenna_on_off>
						set_vol_gen(cntrl_reg_vol);
 4001b6c:	d0a00043 	ldbu	r2,-32767(gp)
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	1009883a 	mov	r4,r2
 4001b78:	40109c80 	call	40109c8 <set_vol_gen>
					}
				}
				break;
 4001b7c:	00010106 	br	4001f84 <main+0x6c0>
		    //******calibration state****************************************************
			case ST_cali:
				if (cali_enable == 1) {
 4001b80:	e0bffb03 	ldbu	r2,-20(fp)
 4001b84:	10800058 	cmpnei	r2,r2,1
 4001b88:	1001001e 	bne	r2,zero,4001f8c <main+0x6c8>
					if ((xy.y_coord >= 2800) && (xy.x_coord <= 1100)) { //Coordinates for return to main
 4001b8c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001b90:	10bfffcc 	andi	r2,r2,65535
 4001b94:	1082bc30 	cmpltui	r2,r2,2800
 4001b98:	1000fc1e 	bne	r2,zero,4001f8c <main+0x6c8>
 4001b9c:	e0bffd0b 	ldhu	r2,-12(fp)
 4001ba0:	10bfffcc 	andi	r2,r2,65535
 4001ba4:	10811368 	cmpgeui	r2,r2,1101
 4001ba8:	1000f81e 	bne	r2,zero,4001f8c <main+0x6c8>
						cali_enable = 0;
 4001bac:	e03ffb05 	stb	zero,-20(fp)
						state = ST_main;
 4001bb0:	e03ffc15 	stw	zero,-16(fp)
						LCD_Clear(WHITE);
 4001bb4:	013fffd4 	movui	r4,65535
 4001bb8:	400fd800 	call	400fd80 <LCD_Clear>
						draw_main_screen();
 4001bbc:	40003fc0 	call	40003fc <draw_main_screen>
					}
				}
				break;
 4001bc0:	0000f206 	br	4001f8c <main+0x6c8>
			//******play help state******************************************************
			case ST_play_help:
				if ((xy.y_coord >= 2800) && (xy.x_coord <= 1100)) { //Coordinates for return to main
 4001bc4:	e0bffd8b 	ldhu	r2,-10(fp)
 4001bc8:	10bfffcc 	andi	r2,r2,65535
 4001bcc:	1082bc30 	cmpltui	r2,r2,2800
 4001bd0:	1000091e 	bne	r2,zero,4001bf8 <main+0x334>
 4001bd4:	e0bffd0b 	ldhu	r2,-12(fp)
 4001bd8:	10bfffcc 	andi	r2,r2,65535
 4001bdc:	10811368 	cmpgeui	r2,r2,1101
 4001be0:	1000051e 	bne	r2,zero,4001bf8 <main+0x334>
					state = ST_main;
 4001be4:	e03ffc15 	stw	zero,-16(fp)
					LCD_Clear(WHITE);
 4001be8:	013fffd4 	movui	r4,65535
 4001bec:	400fd800 	call	400fd80 <LCD_Clear>
					draw_main_screen();
 4001bf0:	40003fc0 	call	40003fc <draw_main_screen>
 4001bf4:	00004406 	br	4001d08 <main+0x444>
				} else if ((xy.y_coord <= 1200) && (xy.x_coord >= 1300)) { //Coordinates for glissando on off
 4001bf8:	e0bffd8b 	ldhu	r2,-10(fp)
 4001bfc:	10bfffcc 	andi	r2,r2,65535
 4001c00:	10812c68 	cmpgeui	r2,r2,1201
 4001c04:	1000111e 	bne	r2,zero,4001c4c <main+0x388>
 4001c08:	e0bffd0b 	ldhu	r2,-12(fp)
 4001c0c:	10bfffcc 	andi	r2,r2,65535
 4001c10:	10814530 	cmpltui	r2,r2,1300
 4001c14:	10000d1e 	bne	r2,zero,4001c4c <main+0x388>
					cntrl_reg_pitch = cntrl_reg_pitch ^ 0x01;
 4001c18:	d0a00003 	ldbu	r2,-32768(gp)
 4001c1c:	1080005c 	xori	r2,r2,1
 4001c20:	d0a00005 	stb	r2,-32768(gp)

					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
 4001c24:	d0a00003 	ldbu	r2,-32768(gp)
 4001c28:	10803fcc 	andi	r2,r2,255
 4001c2c:	1080004c 	andi	r2,r2,1
 4001c30:	1009883a 	mov	r4,r2
 4001c34:	4000ba40 	call	4000ba4 <draw_glissando_on_off>
					set_cntrl_reg(cntrl_reg_pitch);
 4001c38:	d0a00003 	ldbu	r2,-32768(gp)
 4001c3c:	10803fcc 	andi	r2,r2,255
 4001c40:	1009883a 	mov	r4,r2
 4001c44:	40106940 	call	4010694 <set_cntrl_reg>
 4001c48:	00002f06 	br	4001d08 <main+0x444>
				} else if ((xy.y_coord <= 1200) && (xy.x_coord <= 1300)) { //Coordinates for glissando set
 4001c4c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001c50:	10bfffcc 	andi	r2,r2,65535
 4001c54:	10812c68 	cmpgeui	r2,r2,1201
 4001c58:	1000111e 	bne	r2,zero,4001ca0 <main+0x3dc>
 4001c5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4001c60:	10bfffcc 	andi	r2,r2,65535
 4001c64:	10814568 	cmpgeui	r2,r2,1301
 4001c68:	10000d1e 	bne	r2,zero,4001ca0 <main+0x3dc>
					state = ST_glissando_set;
 4001c6c:	00800104 	movi	r2,4
 4001c70:	e0bffc15 	stw	r2,-16(fp)
					LCD_Clear(WHITE);
 4001c74:	013fffd4 	movui	r4,65535
 4001c78:	400fd800 	call	400fd80 <LCD_Clear>
					draw_glissando_set();
 4001c7c:	4000c7c0 	call	4000c7c <draw_glissando_set>
					draw_update_glissando_delay(glissando_delay);
 4001c80:	e0bffb83 	ldbu	r2,-18(fp)
 4001c84:	1009883a 	mov	r4,r2
 4001c88:	4000dd40 	call	4000dd4 <draw_update_glissando_delay>
					draw_penta_on_off(cntrl_reg_pitch);
 4001c8c:	d0a00003 	ldbu	r2,-32768(gp)
 4001c90:	10803fcc 	andi	r2,r2,255
 4001c94:	1009883a 	mov	r4,r2
 4001c98:	4000e7c0 	call	4000e7c <draw_penta_on_off>
 4001c9c:	00001a06 	br	4001d08 <main+0x444>
				} else if ((xy.y_coord >= 1200) && (xy.x_coord >= 1300)) { //Coordinates for display ton
 4001ca0:	e0bffd8b 	ldhu	r2,-10(fp)
 4001ca4:	10bfffcc 	andi	r2,r2,65535
 4001ca8:	10812c30 	cmpltui	r2,r2,1200
 4001cac:	1000b91e 	bne	r2,zero,4001f94 <main+0x6d0>
 4001cb0:	e0bffd0b 	ldhu	r2,-12(fp)
 4001cb4:	10bfffcc 	andi	r2,r2,65535
 4001cb8:	10814530 	cmpltui	r2,r2,1300
 4001cbc:	1000b51e 	bne	r2,zero,4001f94 <main+0x6d0>
					state = ST_display_ton;
 4001cc0:	00800144 	movi	r2,5
 4001cc4:	e0bffc15 	stw	r2,-16(fp)
					//Configure alarm for 1 seconds
					if (alt_alarm_start(&my_alarm, 100, alarm_callback, NULL) < 0) {
 4001cc8:	000f883a 	mov	r7,zero
 4001ccc:	01810034 	movhi	r6,1024
 4001cd0:	31861404 	addi	r6,r6,6224
 4001cd4:	01401904 	movi	r5,100
 4001cd8:	01010074 	movhi	r4,1025
 4001cdc:	211d3304 	addi	r4,r4,29900
 4001ce0:	400ec680 	call	400ec68 <alt_alarm_start>
 4001ce4:	1000030e 	bge	r2,zero,4001cf4 <main+0x430>
						printf("No System Clock Available\n");
 4001ce8:	01010074 	movhi	r4,1025
 4001cec:	21143904 	addi	r4,r4,20708
 4001cf0:	40025bc0 	call	40025bc <puts>
					}
					draw_display_ton(cntrl_reg_pitch);
 4001cf4:	d0a00003 	ldbu	r2,-32768(gp)
 4001cf8:	10803fcc 	andi	r2,r2,255
 4001cfc:	1009883a 	mov	r4,r2
 4001d00:	4000f540 	call	4000f54 <draw_display_ton>
				}
				break;
 4001d04:	0000a306 	br	4001f94 <main+0x6d0>
 4001d08:	0000a206 	br	4001f94 <main+0x6d0>
			//******glissando seting state**********************************************
			case ST_glissando_set:
				if ((xy.y_coord >= 2800) && (xy.x_coord <= 1100)) { //Coordinates for return play help
 4001d0c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001d10:	10bfffcc 	andi	r2,r2,65535
 4001d14:	1082bc30 	cmpltui	r2,r2,2800
 4001d18:	10000f1e 	bne	r2,zero,4001d58 <main+0x494>
 4001d1c:	e0bffd0b 	ldhu	r2,-12(fp)
 4001d20:	10bfffcc 	andi	r2,r2,65535
 4001d24:	10811368 	cmpgeui	r2,r2,1101
 4001d28:	10000b1e 	bne	r2,zero,4001d58 <main+0x494>
					state = ST_play_help;
 4001d2c:	008000c4 	movi	r2,3
 4001d30:	e0bffc15 	stw	r2,-16(fp)
					LCD_Clear(WHITE);
 4001d34:	013fffd4 	movui	r4,65535
 4001d38:	400fd800 	call	400fd80 <LCD_Clear>
					draw_help_screen();
 4001d3c:	4000a980 	call	4000a98 <draw_help_screen>
					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
 4001d40:	d0a00003 	ldbu	r2,-32768(gp)
 4001d44:	10803fcc 	andi	r2,r2,255
 4001d48:	1080004c 	andi	r2,r2,1
 4001d4c:	1009883a 	mov	r4,r2
 4001d50:	4000ba40 	call	4000ba4 <draw_glissando_on_off>
 4001d54:	00005506 	br	4001eac <main+0x5e8>
				} else if ((xy.y_coord <= 2050) && (xy.x_coord < 1300)) { //Coordinates for delay -
 4001d58:	e0bffd8b 	ldhu	r2,-10(fp)
 4001d5c:	10bfffcc 	andi	r2,r2,65535
 4001d60:	108200e8 	cmpgeui	r2,r2,2051
 4001d64:	10001d1e 	bne	r2,zero,4001ddc <main+0x518>
 4001d68:	e0bffd0b 	ldhu	r2,-12(fp)
 4001d6c:	10bfffcc 	andi	r2,r2,65535
 4001d70:	10814528 	cmpgeui	r2,r2,1300
 4001d74:	1000191e 	bne	r2,zero,4001ddc <main+0x518>
					if (glissando_delay <= 1) {
 4001d78:	e0bffb83 	ldbu	r2,-18(fp)
 4001d7c:	108000a8 	cmpgeui	r2,r2,2
 4001d80:	1000021e 	bne	r2,zero,4001d8c <main+0x4c8>
						glissando_delay = 2;
 4001d84:	00800084 	movi	r2,2
 4001d88:	e0bffb85 	stb	r2,-18(fp)
					}
					glissando_delay--;
 4001d8c:	e0bffb83 	ldbu	r2,-18(fp)
 4001d90:	10bfffc4 	addi	r2,r2,-1
 4001d94:	e0bffb85 	stb	r2,-18(fp)
					set_glissando_delay(glissando_delay);
 4001d98:	e0bffb83 	ldbu	r2,-18(fp)
 4001d9c:	1009883a 	mov	r4,r2
 4001da0:	401065c0 	call	401065c <set_glissando_delay>
					draw_update_glissando_delay(glissando_delay);
 4001da4:	e0bffb83 	ldbu	r2,-18(fp)
 4001da8:	1009883a 	mov	r4,r2
 4001dac:	4000dd40 	call	4000dd4 <draw_update_glissando_delay>
					printf("freq pitch %d\n", read_freq_pitch());
 4001db0:	40107300 	call	4010730 <read_freq_pitch>
 4001db4:	100b883a 	mov	r5,r2
 4001db8:	01010074 	movhi	r4,1025
 4001dbc:	21144004 	addi	r4,r4,20736
 4001dc0:	40024c00 	call	40024c0 <printf>
					printf("gli_delay register %d\n", read_delay_gli());
 4001dc4:	40107580 	call	4010758 <read_delay_gli>
 4001dc8:	100b883a 	mov	r5,r2
 4001dcc:	01010074 	movhi	r4,1025
 4001dd0:	21144404 	addi	r4,r4,20752
 4001dd4:	40024c00 	call	40024c0 <printf>
 4001dd8:	00003406 	br	4001eac <main+0x5e8>
				} else if ((xy.y_coord <= 2050) && (xy.x_coord >= 1300) && (xy.x_coord <= 2300)) { //Coordinates for delay +
 4001ddc:	e0bffd8b 	ldhu	r2,-10(fp)
 4001de0:	10bfffcc 	andi	r2,r2,65535
 4001de4:	108200e8 	cmpgeui	r2,r2,2051
 4001de8:	10001c1e 	bne	r2,zero,4001e5c <main+0x598>
 4001dec:	e0bffd0b 	ldhu	r2,-12(fp)
 4001df0:	10bfffcc 	andi	r2,r2,65535
 4001df4:	10814530 	cmpltui	r2,r2,1300
 4001df8:	1000181e 	bne	r2,zero,4001e5c <main+0x598>
 4001dfc:	e0bffd0b 	ldhu	r2,-12(fp)
 4001e00:	10bfffcc 	andi	r2,r2,65535
 4001e04:	10823f68 	cmpgeui	r2,r2,2301
 4001e08:	1000141e 	bne	r2,zero,4001e5c <main+0x598>
					glissando_delay++;
 4001e0c:	e0bffb83 	ldbu	r2,-18(fp)
 4001e10:	10800044 	addi	r2,r2,1
 4001e14:	e0bffb85 	stb	r2,-18(fp)
					if (glissando_delay >= 10) {
 4001e18:	e0bffb83 	ldbu	r2,-18(fp)
 4001e1c:	108002b0 	cmpltui	r2,r2,10
 4001e20:	1000021e 	bne	r2,zero,4001e2c <main+0x568>
						glissando_delay = 10;
 4001e24:	00800284 	movi	r2,10
 4001e28:	e0bffb85 	stb	r2,-18(fp)
					}
					set_glissando_delay(glissando_delay);
 4001e2c:	e0bffb83 	ldbu	r2,-18(fp)
 4001e30:	1009883a 	mov	r4,r2
 4001e34:	401065c0 	call	401065c <set_glissando_delay>
					draw_update_glissando_delay(glissando_delay);
 4001e38:	e0bffb83 	ldbu	r2,-18(fp)
 4001e3c:	1009883a 	mov	r4,r2
 4001e40:	4000dd40 	call	4000dd4 <draw_update_glissando_delay>
					printf("gli_delay register %d\n", read_delay_gli());
 4001e44:	40107580 	call	4010758 <read_delay_gli>
 4001e48:	100b883a 	mov	r5,r2
 4001e4c:	01010074 	movhi	r4,1025
 4001e50:	21144404 	addi	r4,r4,20752
 4001e54:	40024c00 	call	40024c0 <printf>
 4001e58:	00001406 	br	4001eac <main+0x5e8>
				} else if ((xy.y_coord > 1900) && (xy.y_coord < 2800)){ //Coordinates for musical scale setting(Tonleiter)
 4001e5c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001e60:	10bfffcc 	andi	r2,r2,65535
 4001e64:	1081db70 	cmpltui	r2,r2,1901
 4001e68:	10004c1e 	bne	r2,zero,4001f9c <main+0x6d8>
 4001e6c:	e0bffd8b 	ldhu	r2,-10(fp)
 4001e70:	10bfffcc 	andi	r2,r2,65535
 4001e74:	1082bc28 	cmpgeui	r2,r2,2800
 4001e78:	1000481e 	bne	r2,zero,4001f9c <main+0x6d8>
					cntrl_reg_pitch = cntrl_reg_pitch^ 0x04;
 4001e7c:	d0a00003 	ldbu	r2,-32768(gp)
 4001e80:	1080011c 	xori	r2,r2,4
 4001e84:	d0a00005 	stb	r2,-32768(gp)
					draw_penta_on_off(cntrl_reg_pitch);
 4001e88:	d0a00003 	ldbu	r2,-32768(gp)
 4001e8c:	10803fcc 	andi	r2,r2,255
 4001e90:	1009883a 	mov	r4,r2
 4001e94:	4000e7c0 	call	4000e7c <draw_penta_on_off>
					set_cntrl_reg(cntrl_reg_pitch);
 4001e98:	d0a00003 	ldbu	r2,-32768(gp)
 4001e9c:	10803fcc 	andi	r2,r2,255
 4001ea0:	1009883a 	mov	r4,r2
 4001ea4:	40106940 	call	4010694 <set_cntrl_reg>

				}
				break;
 4001ea8:	00003c06 	br	4001f9c <main+0x6d8>
 4001eac:	00003b06 	br	4001f9c <main+0x6d8>
			//******display ton state****************************************************
			case ST_display_ton:
				if ((xy.y_coord >= 2800) && (xy.x_coord <= 1100)) { //Coordinates for return play help
 4001eb0:	e0bffd8b 	ldhu	r2,-10(fp)
 4001eb4:	10bfffcc 	andi	r2,r2,65535
 4001eb8:	1082bc30 	cmpltui	r2,r2,2800
 4001ebc:	1000111e 	bne	r2,zero,4001f04 <main+0x640>
 4001ec0:	e0bffd0b 	ldhu	r2,-12(fp)
 4001ec4:	10bfffcc 	andi	r2,r2,65535
 4001ec8:	10811368 	cmpgeui	r2,r2,1101
 4001ecc:	10000d1e 	bne	r2,zero,4001f04 <main+0x640>
					state = ST_play_help;
 4001ed0:	008000c4 	movi	r2,3
 4001ed4:	e0bffc15 	stw	r2,-16(fp)
					alt_alarm_stop(&my_alarm);
 4001ed8:	01010074 	movhi	r4,1025
 4001edc:	211d3304 	addi	r4,r4,29900
 4001ee0:	400f7580 	call	400f758 <alt_alarm_stop>
					LCD_Clear(WHITE);
 4001ee4:	013fffd4 	movui	r4,65535
 4001ee8:	400fd800 	call	400fd80 <LCD_Clear>
					draw_help_screen();
 4001eec:	4000a980 	call	4000a98 <draw_help_screen>
					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
 4001ef0:	d0a00003 	ldbu	r2,-32768(gp)
 4001ef4:	10803fcc 	andi	r2,r2,255
 4001ef8:	1080004c 	andi	r2,r2,1
 4001efc:	1009883a 	mov	r4,r2
 4001f00:	4000ba40 	call	4000ba4 <draw_glissando_on_off>

				}
				if ((xy.y_coord >= 2800) && (xy.x_coord > 1100))
 4001f04:	e0bffd8b 	ldhu	r2,-10(fp)
 4001f08:	10bfffcc 	andi	r2,r2,65535
 4001f0c:	1082bc30 	cmpltui	r2,r2,2800
 4001f10:	1000241e 	bne	r2,zero,4001fa4 <main+0x6e0>
 4001f14:	e0bffd0b 	ldhu	r2,-12(fp)
 4001f18:	10bfffcc 	andi	r2,r2,65535
 4001f1c:	10811370 	cmpltui	r2,r2,1101
 4001f20:	1000201e 	bne	r2,zero,4001fa4 <main+0x6e0>
				{
					alt_alarm_stop(&my_alarm);
 4001f24:	01010074 	movhi	r4,1025
 4001f28:	211d3304 	addi	r4,r4,29900
 4001f2c:	400f7580 	call	400f758 <alt_alarm_stop>
					cntrl_reg_pitch = cntrl_reg_pitch ^ 4;
 4001f30:	d0a00003 	ldbu	r2,-32768(gp)
 4001f34:	1080011c 	xori	r2,r2,4
 4001f38:	d0a00005 	stb	r2,-32768(gp)
					set_cntrl_reg(cntrl_reg_pitch);
 4001f3c:	d0a00003 	ldbu	r2,-32768(gp)
 4001f40:	10803fcc 	andi	r2,r2,255
 4001f44:	1009883a 	mov	r4,r2
 4001f48:	40106940 	call	4010694 <set_cntrl_reg>
					draw_display_ton(cntrl_reg_pitch);
 4001f4c:	d0a00003 	ldbu	r2,-32768(gp)
 4001f50:	10803fcc 	andi	r2,r2,255
 4001f54:	1009883a 	mov	r4,r2
 4001f58:	4000f540 	call	4000f54 <draw_display_ton>
					alt_alarm_start(&my_alarm, 100, alarm_callback, NULL);
 4001f5c:	000f883a 	mov	r7,zero
 4001f60:	01810034 	movhi	r6,1024
 4001f64:	31861404 	addi	r6,r6,6224
 4001f68:	01401904 	movi	r5,100
 4001f6c:	01010074 	movhi	r4,1025
 4001f70:	211d3304 	addi	r4,r4,29900
 4001f74:	400ec680 	call	400ec68 <alt_alarm_start>

				}
				break;
 4001f78:	00000a06 	br	4001fa4 <main+0x6e0>
					state = ST_play_help;
					LCD_Clear(WHITE);
					draw_help_screen();
					draw_glissando_on_off(cntrl_reg_pitch & 0x01);
				}
				break;
 4001f7c:	0001883a 	nop
 4001f80:	003e6a06 	br	400192c <__reset+0xfa81192c>
						cntrl_reg_vol = cntrl_reg_vol^ 0x01;
						draw_vol_antenna_on_off(cntrl_reg_vol);
						set_vol_gen(cntrl_reg_vol);
					}
				}
				break;
 4001f84:	0001883a 	nop
 4001f88:	003e6806 	br	400192c <__reset+0xfa81192c>
						state = ST_main;
						LCD_Clear(WHITE);
						draw_main_screen();
					}
				}
				break;
 4001f8c:	0001883a 	nop
 4001f90:	003e6606 	br	400192c <__reset+0xfa81192c>
					if (alt_alarm_start(&my_alarm, 100, alarm_callback, NULL) < 0) {
						printf("No System Clock Available\n");
					}
					draw_display_ton(cntrl_reg_pitch);
				}
				break;
 4001f94:	0001883a 	nop
 4001f98:	003e6406 	br	400192c <__reset+0xfa81192c>
					cntrl_reg_pitch = cntrl_reg_pitch^ 0x04;
					draw_penta_on_off(cntrl_reg_pitch);
					set_cntrl_reg(cntrl_reg_pitch);

				}
				break;
 4001f9c:	0001883a 	nop
 4001fa0:	003e6206 	br	400192c <__reset+0xfa81192c>
					set_cntrl_reg(cntrl_reg_pitch);
					draw_display_ton(cntrl_reg_pitch);
					alt_alarm_start(&my_alarm, 100, alarm_callback, NULL);

				}
				break;
 4001fa4:	0001883a 	nop
			}
		}
	}
 4001fa8:	003e6006 	br	400192c <__reset+0xfa81192c>

04001fac <touch_isr>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void touch_isr(void * context)
{
 4001fac:	defff604 	addi	sp,sp,-40
 4001fb0:	dfc00915 	stw	ra,36(sp)
 4001fb4:	df000815 	stw	fp,32(sp)
 4001fb8:	df000804 	addi	fp,sp,32
 4001fbc:	e13fff15 	stw	r4,-4(fp)

	alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4001fc0:	014000c4 	movi	r5,3
 4001fc4:	0009883a 	mov	r4,zero
 4001fc8:	400f0900 	call	400f090 <alt_ic_irq_disable>
	//Flag touched
	//alt_u8* touched = (alt_u8*)context;
	//*touched = 1;
	printf("touched!\n");
 4001fcc:	01010074 	movhi	r4,1025
 4001fd0:	21144a04 	addi	r4,r4,20776
 4001fd4:	40025bc0 	call	40025bc <puts>

	volatile XY* xy = (XY*)context;
 4001fd8:	e0bfff17 	ldw	r2,-4(fp)
 4001fdc:	e0bffb15 	stw	r2,-20(fp)

	volatile alt_u8 high_byte, low_byte;
	alt_u8 data8;
    // x
	//alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, sizeof(CommandGetX), &CommandGetX, 0, 0,ALT_AVALON_SPI_COMMAND_MERGE);
 4001fe0:	00800044 	movi	r2,1
 4001fe4:	d8800215 	stw	r2,8(sp)
 4001fe8:	d8000115 	stw	zero,4(sp)
 4001fec:	d8000015 	stw	zero,0(sp)
 4001ff0:	d1e00084 	addi	r7,gp,-32766
 4001ff4:	01800044 	movi	r6,1
 4001ff8:	000b883a 	mov	r5,zero
 4001ffc:	01028034 	movhi	r4,2560
 4002000:	21040804 	addi	r4,r4,4128
 4002004:	40114680 	call	4011468 <alt_avalon_spi_command>
 4002008:	e0bffc15 	stw	r2,-16(fp)
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte,ALT_AVALON_SPI_COMMAND_MERGE);
 400200c:	00800044 	movi	r2,1
 4002010:	d8800215 	stw	r2,8(sp)
 4002014:	e0bffe04 	addi	r2,fp,-8
 4002018:	d8800115 	stw	r2,4(sp)
 400201c:	00800044 	movi	r2,1
 4002020:	d8800015 	stw	r2,0(sp)
 4002024:	000f883a 	mov	r7,zero
 4002028:	000d883a 	mov	r6,zero
 400202c:	000b883a 	mov	r5,zero
 4002030:	01028034 	movhi	r4,2560
 4002034:	21040804 	addi	r4,r4,4128
 4002038:	40114680 	call	4011468 <alt_avalon_spi_command>
 400203c:	e0bffc15 	stw	r2,-16(fp)
    if (result != sizeof(high_byte)){
 4002040:	e0bffc17 	ldw	r2,-16(fp)
 4002044:	10800060 	cmpeqi	r2,r2,1
 4002048:	1000041e 	bne	r2,zero,400205c <touch_isr+0xb0>
        printf(("[TOUCH] failed to get x\n row32"));
 400204c:	01010074 	movhi	r4,1025
 4002050:	21144d04 	addi	r4,r4,20788
 4002054:	40024c00 	call	40024c0 <printf>
        return;
 4002058:	00009306 	br	40022a8 <touch_isr+0x2fc>
    }

    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte,ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 400205c:	00800084 	movi	r2,2
 4002060:	d8800215 	stw	r2,8(sp)
 4002064:	e0bffe44 	addi	r2,fp,-7
 4002068:	d8800115 	stw	r2,4(sp)
 400206c:	00800044 	movi	r2,1
 4002070:	d8800015 	stw	r2,0(sp)
 4002074:	000f883a 	mov	r7,zero
 4002078:	000d883a 	mov	r6,zero
 400207c:	000b883a 	mov	r5,zero
 4002080:	01028034 	movhi	r4,2560
 4002084:	21040804 	addi	r4,r4,4128
 4002088:	40114680 	call	4011468 <alt_avalon_spi_command>
 400208c:	e0bffc15 	stw	r2,-16(fp)

    if (result != sizeof(low_byte)){
 4002090:	e0bffc17 	ldw	r2,-16(fp)
 4002094:	10800060 	cmpeqi	r2,r2,1
 4002098:	1000041e 	bne	r2,zero,40020ac <touch_isr+0x100>
        printf(("[TOUCH] failed to get x\n row39"));
 400209c:	01010074 	movhi	r4,1025
 40020a0:	21145504 	addi	r4,r4,20820
 40020a4:	40024c00 	call	40024c0 <printf>
        return;
 40020a8:	00007f06 	br	40022a8 <touch_isr+0x2fc>
    }

    ResponseX = (high_byte << 8) | low_byte;
 40020ac:	e0bffe03 	ldbu	r2,-8(fp)
 40020b0:	10803fcc 	andi	r2,r2,255
 40020b4:	1004923a 	slli	r2,r2,8
 40020b8:	1007883a 	mov	r3,r2
 40020bc:	e0bffe43 	ldbu	r2,-7(fp)
 40020c0:	10803fcc 	andi	r2,r2,255
 40020c4:	1884b03a 	or	r2,r3,r2
 40020c8:	e0bffd0d 	sth	r2,-12(fp)

    // y
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 40020cc:	00800044 	movi	r2,1
 40020d0:	d8800215 	stw	r2,8(sp)
 40020d4:	d8000115 	stw	zero,4(sp)
 40020d8:	d8000015 	stw	zero,0(sp)
 40020dc:	d1e000c4 	addi	r7,gp,-32765
 40020e0:	01800044 	movi	r6,1
 40020e4:	000b883a 	mov	r5,zero
 40020e8:	01028034 	movhi	r4,2560
 40020ec:	21040804 	addi	r4,r4,4128
 40020f0:	40114680 	call	4011468 <alt_avalon_spi_command>
 40020f4:	e0bffc15 	stw	r2,-16(fp)
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 40020f8:	00800044 	movi	r2,1
 40020fc:	d8800215 	stw	r2,8(sp)
 4002100:	e0bffe04 	addi	r2,fp,-8
 4002104:	d8800115 	stw	r2,4(sp)
 4002108:	00800044 	movi	r2,1
 400210c:	d8800015 	stw	r2,0(sp)
 4002110:	000f883a 	mov	r7,zero
 4002114:	000d883a 	mov	r6,zero
 4002118:	000b883a 	mov	r5,zero
 400211c:	01028034 	movhi	r4,2560
 4002120:	21040804 	addi	r4,r4,4128
 4002124:	40114680 	call	4011468 <alt_avalon_spi_command>
 4002128:	e0bffc15 	stw	r2,-16(fp)

    if (result != sizeof(high_byte)){
 400212c:	e0bffc17 	ldw	r2,-16(fp)
 4002130:	10800060 	cmpeqi	r2,r2,1
 4002134:	1000041e 	bne	r2,zero,4002148 <touch_isr+0x19c>
        printf(("[TOUCH] failed to get x\n row50"));
 4002138:	01010074 	movhi	r4,1025
 400213c:	21145d04 	addi	r4,r4,20852
 4002140:	40024c00 	call	40024c0 <printf>
        return;
 4002144:	00005806 	br	40022a8 <touch_isr+0x2fc>
    }

    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte,ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4002148:	00800084 	movi	r2,2
 400214c:	d8800215 	stw	r2,8(sp)
 4002150:	e0bffe44 	addi	r2,fp,-7
 4002154:	d8800115 	stw	r2,4(sp)
 4002158:	00800044 	movi	r2,1
 400215c:	d8800015 	stw	r2,0(sp)
 4002160:	000f883a 	mov	r7,zero
 4002164:	000d883a 	mov	r6,zero
 4002168:	000b883a 	mov	r5,zero
 400216c:	01028034 	movhi	r4,2560
 4002170:	21040804 	addi	r4,r4,4128
 4002174:	40114680 	call	4011468 <alt_avalon_spi_command>
 4002178:	e0bffc15 	stw	r2,-16(fp)

    if (result != sizeof(low_byte)){
 400217c:	e0bffc17 	ldw	r2,-16(fp)
 4002180:	10800060 	cmpeqi	r2,r2,1
 4002184:	1000041e 	bne	r2,zero,4002198 <touch_isr+0x1ec>
        printf(("[TOUCH] failed to get x\n row57"));
 4002188:	01010074 	movhi	r4,1025
 400218c:	21146504 	addi	r4,r4,20884
 4002190:	40024c00 	call	40024c0 <printf>
        return;
 4002194:	00004406 	br	40022a8 <touch_isr+0x2fc>
    }


    ResponseY = (high_byte << 8) | low_byte;
 4002198:	e0bffe03 	ldbu	r2,-8(fp)
 400219c:	10803fcc 	andi	r2,r2,255
 40021a0:	1004923a 	slli	r2,r2,8
 40021a4:	1007883a 	mov	r3,r2
 40021a8:	e0bffe43 	ldbu	r2,-7(fp)
 40021ac:	10803fcc 	andi	r2,r2,255
 40021b0:	1884b03a 	or	r2,r3,r2
 40021b4:	e0bffd8d 	sth	r2,-10(fp)


    xy->x_coord = (ResponseX >> 3 ) & 0xFFF;  // 12 bits
 40021b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40021bc:	10bfffcc 	andi	r2,r2,65535
 40021c0:	1004d0fa 	srli	r2,r2,3
 40021c4:	1083ffcc 	andi	r2,r2,4095
 40021c8:	1007883a 	mov	r3,r2
 40021cc:	e0bffb17 	ldw	r2,-20(fp)
 40021d0:	10c0000d 	sth	r3,0(r2)
    xy->y_coord = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 40021d4:	e0bffd8b 	ldhu	r2,-10(fp)
 40021d8:	10bfffcc 	andi	r2,r2,65535
 40021dc:	1004d0fa 	srli	r2,r2,3
 40021e0:	1083ffcc 	andi	r2,r2,4095
 40021e4:	1007883a 	mov	r3,r2
 40021e8:	e0bffb17 	ldw	r2,-20(fp)
 40021ec:	10c0008d 	sth	r3,2(r2)

    if((xy->x_coord == 0 || xy->y_coord == 0) || (alt_nticks() < xy->next_active_time) ){
 40021f0:	e0bffb17 	ldw	r2,-20(fp)
 40021f4:	1080000b 	ldhu	r2,0(r2)
 40021f8:	10bfffcc 	andi	r2,r2,65535
 40021fc:	10000826 	beq	r2,zero,4002220 <touch_isr+0x274>
 4002200:	e0bffb17 	ldw	r2,-20(fp)
 4002204:	1080008b 	ldhu	r2,2(r2)
 4002208:	10bfffcc 	andi	r2,r2,65535
 400220c:	10000426 	beq	r2,zero,4002220 <touch_isr+0x274>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002210:	d0e02417 	ldw	r3,-32624(gp)
 4002214:	e0bffb17 	ldw	r2,-20(fp)
 4002218:	10800217 	ldw	r2,8(r2)
 400221c:	1880032e 	bgeu	r3,r2,400222c <touch_isr+0x280>
    	xy->enable_xy = 0;
 4002220:	e0bffb17 	ldw	r2,-20(fp)
 4002224:	10000105 	stb	zero,4(r2)
 4002228:	00000906 	br	4002250 <touch_isr+0x2a4>
    }else{
    	xy->enable_xy = 1;
 400222c:	e0bffb17 	ldw	r2,-20(fp)
 4002230:	00c00044 	movi	r3,1
 4002234:	10c00105 	stb	r3,4(r2)
 4002238:	d0e02417 	ldw	r3,-32624(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400223c:	d0a02317 	ldw	r2,-32628(gp)
    	xy->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 4002240:	1004d0ba 	srli	r2,r2,2
 4002244:	1887883a 	add	r3,r3,r2
 4002248:	e0bffb17 	ldw	r2,-20(fp)
 400224c:	10c00215 	stw	r3,8(r2)
    }
    printf("X Koordinate: %d Y Koordinate: %d\n", xy->x_coord,xy->y_coord);
 4002250:	e0bffb17 	ldw	r2,-20(fp)
 4002254:	1080000b 	ldhu	r2,0(r2)
 4002258:	10ffffcc 	andi	r3,r2,65535
 400225c:	e0bffb17 	ldw	r2,-20(fp)
 4002260:	1080008b 	ldhu	r2,2(r2)
 4002264:	10bfffcc 	andi	r2,r2,65535
 4002268:	100d883a 	mov	r6,r2
 400226c:	180b883a 	mov	r5,r3
 4002270:	01010074 	movhi	r4,1025
 4002274:	21146d04 	addi	r4,r4,20916
 4002278:	40024c00 	call	40024c0 <printf>


	 //  INSERT CODE 6. Then reset that register to 0
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TOUCH_PANEL_PEN_IRQ_N_BASE,0x0);
 400227c:	0007883a 	mov	r3,zero
 4002280:	00828034 	movhi	r2,2560
 4002284:	10842704 	addi	r2,r2,4252
 4002288:	10c00035 	stwio	r3,0(r2)

    //  Reset IRQ Mask
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x01);
 400228c:	00c00044 	movi	r3,1
 4002290:	00828034 	movhi	r2,2560
 4002294:	10842604 	addi	r2,r2,4248
 4002298:	10c00035 	stwio	r3,0(r2)

    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 400229c:	014000c4 	movi	r5,3
 40022a0:	0009883a 	mov	r4,zero
 40022a4:	400f0080 	call	400f008 <alt_ic_irq_enable>

    //xy->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
}
 40022a8:	e037883a 	mov	sp,fp
 40022ac:	dfc00117 	ldw	ra,4(sp)
 40022b0:	df000017 	ldw	fp,0(sp)
 40022b4:	dec00204 	addi	sp,sp,8
 40022b8:	f800283a 	ret

040022bc <touch_init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void touch_init(void* context)
{
 40022bc:	defffc04 	addi	sp,sp,-16
 40022c0:	dfc00315 	stw	ra,12(sp)
 40022c4:	df000215 	stw	fp,8(sp)
 40022c8:	df000204 	addi	fp,sp,8
 40022cc:	e13fff15 	stw	r4,-4(fp)
	//
	//  - Enable touch pen irg.
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x01);
 40022d0:	00c00044 	movi	r3,1
 40022d4:	00828034 	movhi	r2,2560
 40022d8:	10842604 	addi	r2,r2,4248
 40022dc:	10c00035 	stwio	r3,0(r2)

	// Reset the edge capture register.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x0);
 40022e0:	0007883a 	mov	r3,zero
 40022e4:	00828034 	movhi	r2,2560
 40022e8:	10842704 	addi	r2,r2,4252
 40022ec:	10c00035 	stwio	r3,0(r2)

	//  Register the ISR:
	alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID, TOUCH_PANEL_PEN_IRQ_N_IRQ, touch_isr, context, 0x0);
 40022f0:	d8000015 	stw	zero,0(sp)
 40022f4:	e1ffff17 	ldw	r7,-4(fp)
 40022f8:	01810034 	movhi	r6,1024
 40022fc:	3187eb04 	addi	r6,r6,8108
 4002300:	014000c4 	movi	r5,3
 4002304:	0009883a 	mov	r4,zero
 4002308:	400efb80 	call	400efb8 <alt_ic_isr_register>

}
 400230c:	0001883a 	nop
 4002310:	e037883a 	mov	sp,fp
 4002314:	dfc00117 	ldw	ra,4(sp)
 4002318:	df000017 	ldw	fp,0(sp)
 400231c:	dec00204 	addi	sp,sp,8
 4002320:	f800283a 	ret

04002324 <get_xy>:

void get_xy (void * context)
{
 4002324:	defffe04 	addi	sp,sp,-8
 4002328:	df000115 	stw	fp,4(sp)
 400232c:	df000104 	addi	fp,sp,4
 4002330:	e13fff15 	stw	r4,-4(fp)





}
 4002334:	0001883a 	nop
 4002338:	e037883a 	mov	sp,fp
 400233c:	df000017 	ldw	fp,0(sp)
 4002340:	dec00104 	addi	sp,sp,4
 4002344:	f800283a 	ret

04002348 <memcpy>:
 4002348:	defffd04 	addi	sp,sp,-12
 400234c:	dfc00215 	stw	ra,8(sp)
 4002350:	dc400115 	stw	r17,4(sp)
 4002354:	dc000015 	stw	r16,0(sp)
 4002358:	00c003c4 	movi	r3,15
 400235c:	2005883a 	mov	r2,r4
 4002360:	1980452e 	bgeu	r3,r6,4002478 <memcpy+0x130>
 4002364:	2906b03a 	or	r3,r5,r4
 4002368:	18c000cc 	andi	r3,r3,3
 400236c:	1800441e 	bne	r3,zero,4002480 <memcpy+0x138>
 4002370:	347ffc04 	addi	r17,r6,-16
 4002374:	8822d13a 	srli	r17,r17,4
 4002378:	28c00104 	addi	r3,r5,4
 400237c:	23400104 	addi	r13,r4,4
 4002380:	8820913a 	slli	r16,r17,4
 4002384:	2b000204 	addi	r12,r5,8
 4002388:	22c00204 	addi	r11,r4,8
 400238c:	84000504 	addi	r16,r16,20
 4002390:	2a800304 	addi	r10,r5,12
 4002394:	22400304 	addi	r9,r4,12
 4002398:	2c21883a 	add	r16,r5,r16
 400239c:	2811883a 	mov	r8,r5
 40023a0:	200f883a 	mov	r7,r4
 40023a4:	41000017 	ldw	r4,0(r8)
 40023a8:	1fc00017 	ldw	ra,0(r3)
 40023ac:	63c00017 	ldw	r15,0(r12)
 40023b0:	39000015 	stw	r4,0(r7)
 40023b4:	53800017 	ldw	r14,0(r10)
 40023b8:	6fc00015 	stw	ra,0(r13)
 40023bc:	5bc00015 	stw	r15,0(r11)
 40023c0:	4b800015 	stw	r14,0(r9)
 40023c4:	18c00404 	addi	r3,r3,16
 40023c8:	39c00404 	addi	r7,r7,16
 40023cc:	42000404 	addi	r8,r8,16
 40023d0:	6b400404 	addi	r13,r13,16
 40023d4:	63000404 	addi	r12,r12,16
 40023d8:	5ac00404 	addi	r11,r11,16
 40023dc:	52800404 	addi	r10,r10,16
 40023e0:	4a400404 	addi	r9,r9,16
 40023e4:	1c3fef1e 	bne	r3,r16,40023a4 <__reset+0xfa8123a4>
 40023e8:	89c00044 	addi	r7,r17,1
 40023ec:	380e913a 	slli	r7,r7,4
 40023f0:	310003cc 	andi	r4,r6,15
 40023f4:	02c000c4 	movi	r11,3
 40023f8:	11c7883a 	add	r3,r2,r7
 40023fc:	29cb883a 	add	r5,r5,r7
 4002400:	5900212e 	bgeu	r11,r4,4002488 <memcpy+0x140>
 4002404:	1813883a 	mov	r9,r3
 4002408:	2811883a 	mov	r8,r5
 400240c:	200f883a 	mov	r7,r4
 4002410:	42800017 	ldw	r10,0(r8)
 4002414:	4a400104 	addi	r9,r9,4
 4002418:	39ffff04 	addi	r7,r7,-4
 400241c:	4abfff15 	stw	r10,-4(r9)
 4002420:	42000104 	addi	r8,r8,4
 4002424:	59fffa36 	bltu	r11,r7,4002410 <__reset+0xfa812410>
 4002428:	213fff04 	addi	r4,r4,-4
 400242c:	2008d0ba 	srli	r4,r4,2
 4002430:	318000cc 	andi	r6,r6,3
 4002434:	21000044 	addi	r4,r4,1
 4002438:	2109883a 	add	r4,r4,r4
 400243c:	2109883a 	add	r4,r4,r4
 4002440:	1907883a 	add	r3,r3,r4
 4002444:	290b883a 	add	r5,r5,r4
 4002448:	30000626 	beq	r6,zero,4002464 <memcpy+0x11c>
 400244c:	198d883a 	add	r6,r3,r6
 4002450:	29c00003 	ldbu	r7,0(r5)
 4002454:	18c00044 	addi	r3,r3,1
 4002458:	29400044 	addi	r5,r5,1
 400245c:	19ffffc5 	stb	r7,-1(r3)
 4002460:	19bffb1e 	bne	r3,r6,4002450 <__reset+0xfa812450>
 4002464:	dfc00217 	ldw	ra,8(sp)
 4002468:	dc400117 	ldw	r17,4(sp)
 400246c:	dc000017 	ldw	r16,0(sp)
 4002470:	dec00304 	addi	sp,sp,12
 4002474:	f800283a 	ret
 4002478:	2007883a 	mov	r3,r4
 400247c:	003ff206 	br	4002448 <__reset+0xfa812448>
 4002480:	2007883a 	mov	r3,r4
 4002484:	003ff106 	br	400244c <__reset+0xfa81244c>
 4002488:	200d883a 	mov	r6,r4
 400248c:	003fee06 	br	4002448 <__reset+0xfa812448>

04002490 <_printf_r>:
 4002490:	defffd04 	addi	sp,sp,-12
 4002494:	2805883a 	mov	r2,r5
 4002498:	dfc00015 	stw	ra,0(sp)
 400249c:	d9800115 	stw	r6,4(sp)
 40024a0:	d9c00215 	stw	r7,8(sp)
 40024a4:	21400217 	ldw	r5,8(r4)
 40024a8:	d9c00104 	addi	r7,sp,4
 40024ac:	100d883a 	mov	r6,r2
 40024b0:	40026680 	call	4002668 <___vfprintf_internal_r>
 40024b4:	dfc00017 	ldw	ra,0(sp)
 40024b8:	dec00304 	addi	sp,sp,12
 40024bc:	f800283a 	ret

040024c0 <printf>:
 40024c0:	defffc04 	addi	sp,sp,-16
 40024c4:	dfc00015 	stw	ra,0(sp)
 40024c8:	d9400115 	stw	r5,4(sp)
 40024cc:	d9800215 	stw	r6,8(sp)
 40024d0:	d9c00315 	stw	r7,12(sp)
 40024d4:	00810074 	movhi	r2,1025
 40024d8:	109d0604 	addi	r2,r2,29720
 40024dc:	10800017 	ldw	r2,0(r2)
 40024e0:	200b883a 	mov	r5,r4
 40024e4:	d9800104 	addi	r6,sp,4
 40024e8:	11000217 	ldw	r4,8(r2)
 40024ec:	40048600 	call	4004860 <__vfprintf_internal>
 40024f0:	dfc00017 	ldw	ra,0(sp)
 40024f4:	dec00404 	addi	sp,sp,16
 40024f8:	f800283a 	ret

040024fc <_puts_r>:
 40024fc:	defff604 	addi	sp,sp,-40
 4002500:	dc000715 	stw	r16,28(sp)
 4002504:	2021883a 	mov	r16,r4
 4002508:	2809883a 	mov	r4,r5
 400250c:	dc400815 	stw	r17,32(sp)
 4002510:	dfc00915 	stw	ra,36(sp)
 4002514:	2823883a 	mov	r17,r5
 4002518:	40025d00 	call	40025d0 <strlen>
 400251c:	10c00044 	addi	r3,r2,1
 4002520:	d8800115 	stw	r2,4(sp)
 4002524:	00810074 	movhi	r2,1025
 4002528:	10947604 	addi	r2,r2,20952
 400252c:	d8800215 	stw	r2,8(sp)
 4002530:	00800044 	movi	r2,1
 4002534:	d8800315 	stw	r2,12(sp)
 4002538:	00800084 	movi	r2,2
 400253c:	dc400015 	stw	r17,0(sp)
 4002540:	d8c00615 	stw	r3,24(sp)
 4002544:	dec00415 	stw	sp,16(sp)
 4002548:	d8800515 	stw	r2,20(sp)
 400254c:	80000226 	beq	r16,zero,4002558 <_puts_r+0x5c>
 4002550:	80800e17 	ldw	r2,56(r16)
 4002554:	10001426 	beq	r2,zero,40025a8 <_puts_r+0xac>
 4002558:	81400217 	ldw	r5,8(r16)
 400255c:	2880030b 	ldhu	r2,12(r5)
 4002560:	10c8000c 	andi	r3,r2,8192
 4002564:	1800061e 	bne	r3,zero,4002580 <_puts_r+0x84>
 4002568:	29001917 	ldw	r4,100(r5)
 400256c:	00f7ffc4 	movi	r3,-8193
 4002570:	10880014 	ori	r2,r2,8192
 4002574:	20c6703a 	and	r3,r4,r3
 4002578:	2880030d 	sth	r2,12(r5)
 400257c:	28c01915 	stw	r3,100(r5)
 4002580:	d9800404 	addi	r6,sp,16
 4002584:	8009883a 	mov	r4,r16
 4002588:	4006d900 	call	4006d90 <__sfvwrite_r>
 400258c:	1000091e 	bne	r2,zero,40025b4 <_puts_r+0xb8>
 4002590:	00800284 	movi	r2,10
 4002594:	dfc00917 	ldw	ra,36(sp)
 4002598:	dc400817 	ldw	r17,32(sp)
 400259c:	dc000717 	ldw	r16,28(sp)
 40025a0:	dec00a04 	addi	sp,sp,40
 40025a4:	f800283a 	ret
 40025a8:	8009883a 	mov	r4,r16
 40025ac:	400690c0 	call	400690c <__sinit>
 40025b0:	003fe906 	br	4002558 <__reset+0xfa812558>
 40025b4:	00bfffc4 	movi	r2,-1
 40025b8:	003ff606 	br	4002594 <__reset+0xfa812594>

040025bc <puts>:
 40025bc:	00810074 	movhi	r2,1025
 40025c0:	109d0604 	addi	r2,r2,29720
 40025c4:	200b883a 	mov	r5,r4
 40025c8:	11000017 	ldw	r4,0(r2)
 40025cc:	40024fc1 	jmpi	40024fc <_puts_r>

040025d0 <strlen>:
 40025d0:	208000cc 	andi	r2,r4,3
 40025d4:	10002026 	beq	r2,zero,4002658 <strlen+0x88>
 40025d8:	20800007 	ldb	r2,0(r4)
 40025dc:	10002026 	beq	r2,zero,4002660 <strlen+0x90>
 40025e0:	2005883a 	mov	r2,r4
 40025e4:	00000206 	br	40025f0 <strlen+0x20>
 40025e8:	10c00007 	ldb	r3,0(r2)
 40025ec:	18001826 	beq	r3,zero,4002650 <strlen+0x80>
 40025f0:	10800044 	addi	r2,r2,1
 40025f4:	10c000cc 	andi	r3,r2,3
 40025f8:	183ffb1e 	bne	r3,zero,40025e8 <__reset+0xfa8125e8>
 40025fc:	10c00017 	ldw	r3,0(r2)
 4002600:	01ffbff4 	movhi	r7,65279
 4002604:	39ffbfc4 	addi	r7,r7,-257
 4002608:	00ca303a 	nor	r5,zero,r3
 400260c:	01a02074 	movhi	r6,32897
 4002610:	19c7883a 	add	r3,r3,r7
 4002614:	31a02004 	addi	r6,r6,-32640
 4002618:	1946703a 	and	r3,r3,r5
 400261c:	1986703a 	and	r3,r3,r6
 4002620:	1800091e 	bne	r3,zero,4002648 <strlen+0x78>
 4002624:	10800104 	addi	r2,r2,4
 4002628:	10c00017 	ldw	r3,0(r2)
 400262c:	19cb883a 	add	r5,r3,r7
 4002630:	00c6303a 	nor	r3,zero,r3
 4002634:	28c6703a 	and	r3,r5,r3
 4002638:	1986703a 	and	r3,r3,r6
 400263c:	183ff926 	beq	r3,zero,4002624 <__reset+0xfa812624>
 4002640:	00000106 	br	4002648 <strlen+0x78>
 4002644:	10800044 	addi	r2,r2,1
 4002648:	10c00007 	ldb	r3,0(r2)
 400264c:	183ffd1e 	bne	r3,zero,4002644 <__reset+0xfa812644>
 4002650:	1105c83a 	sub	r2,r2,r4
 4002654:	f800283a 	ret
 4002658:	2005883a 	mov	r2,r4
 400265c:	003fe706 	br	40025fc <__reset+0xfa8125fc>
 4002660:	0005883a 	mov	r2,zero
 4002664:	f800283a 	ret

04002668 <___vfprintf_internal_r>:
 4002668:	deffb804 	addi	sp,sp,-288
 400266c:	dfc04715 	stw	ra,284(sp)
 4002670:	ddc04515 	stw	r23,276(sp)
 4002674:	dd404315 	stw	r21,268(sp)
 4002678:	d9002c15 	stw	r4,176(sp)
 400267c:	282f883a 	mov	r23,r5
 4002680:	302b883a 	mov	r21,r6
 4002684:	d9c02d15 	stw	r7,180(sp)
 4002688:	df004615 	stw	fp,280(sp)
 400268c:	dd804415 	stw	r22,272(sp)
 4002690:	dd004215 	stw	r20,264(sp)
 4002694:	dcc04115 	stw	r19,260(sp)
 4002698:	dc804015 	stw	r18,256(sp)
 400269c:	dc403f15 	stw	r17,252(sp)
 40026a0:	dc003e15 	stw	r16,248(sp)
 40026a4:	40074800 	call	4007480 <_localeconv_r>
 40026a8:	10800017 	ldw	r2,0(r2)
 40026ac:	1009883a 	mov	r4,r2
 40026b0:	d8803415 	stw	r2,208(sp)
 40026b4:	40025d00 	call	40025d0 <strlen>
 40026b8:	d8803715 	stw	r2,220(sp)
 40026bc:	d8802c17 	ldw	r2,176(sp)
 40026c0:	10000226 	beq	r2,zero,40026cc <___vfprintf_internal_r+0x64>
 40026c4:	10800e17 	ldw	r2,56(r2)
 40026c8:	1000f926 	beq	r2,zero,4002ab0 <___vfprintf_internal_r+0x448>
 40026cc:	b880030b 	ldhu	r2,12(r23)
 40026d0:	10c8000c 	andi	r3,r2,8192
 40026d4:	1800061e 	bne	r3,zero,40026f0 <___vfprintf_internal_r+0x88>
 40026d8:	b9001917 	ldw	r4,100(r23)
 40026dc:	00f7ffc4 	movi	r3,-8193
 40026e0:	10880014 	ori	r2,r2,8192
 40026e4:	20c6703a 	and	r3,r4,r3
 40026e8:	b880030d 	sth	r2,12(r23)
 40026ec:	b8c01915 	stw	r3,100(r23)
 40026f0:	10c0020c 	andi	r3,r2,8
 40026f4:	1800c126 	beq	r3,zero,40029fc <___vfprintf_internal_r+0x394>
 40026f8:	b8c00417 	ldw	r3,16(r23)
 40026fc:	1800bf26 	beq	r3,zero,40029fc <___vfprintf_internal_r+0x394>
 4002700:	1080068c 	andi	r2,r2,26
 4002704:	00c00284 	movi	r3,10
 4002708:	10c0c426 	beq	r2,r3,4002a1c <___vfprintf_internal_r+0x3b4>
 400270c:	d8c00404 	addi	r3,sp,16
 4002710:	05010074 	movhi	r20,1025
 4002714:	d9001e04 	addi	r4,sp,120
 4002718:	a5148784 	addi	r20,r20,21022
 400271c:	d8c01e15 	stw	r3,120(sp)
 4002720:	d8002015 	stw	zero,128(sp)
 4002724:	d8001f15 	stw	zero,124(sp)
 4002728:	d8003315 	stw	zero,204(sp)
 400272c:	d8003615 	stw	zero,216(sp)
 4002730:	d8003815 	stw	zero,224(sp)
 4002734:	1811883a 	mov	r8,r3
 4002738:	d8003915 	stw	zero,228(sp)
 400273c:	d8003a15 	stw	zero,232(sp)
 4002740:	d8002f15 	stw	zero,188(sp)
 4002744:	d9002815 	stw	r4,160(sp)
 4002748:	a8800007 	ldb	r2,0(r21)
 400274c:	10027b26 	beq	r2,zero,400313c <___vfprintf_internal_r+0xad4>
 4002750:	00c00944 	movi	r3,37
 4002754:	a821883a 	mov	r16,r21
 4002758:	10c0021e 	bne	r2,r3,4002764 <___vfprintf_internal_r+0xfc>
 400275c:	00001406 	br	40027b0 <___vfprintf_internal_r+0x148>
 4002760:	10c00326 	beq	r2,r3,4002770 <___vfprintf_internal_r+0x108>
 4002764:	84000044 	addi	r16,r16,1
 4002768:	80800007 	ldb	r2,0(r16)
 400276c:	103ffc1e 	bne	r2,zero,4002760 <__reset+0xfa812760>
 4002770:	8563c83a 	sub	r17,r16,r21
 4002774:	88000e26 	beq	r17,zero,40027b0 <___vfprintf_internal_r+0x148>
 4002778:	d8c02017 	ldw	r3,128(sp)
 400277c:	d8801f17 	ldw	r2,124(sp)
 4002780:	45400015 	stw	r21,0(r8)
 4002784:	1c47883a 	add	r3,r3,r17
 4002788:	10800044 	addi	r2,r2,1
 400278c:	d8c02015 	stw	r3,128(sp)
 4002790:	44400115 	stw	r17,4(r8)
 4002794:	d8801f15 	stw	r2,124(sp)
 4002798:	00c001c4 	movi	r3,7
 400279c:	1880a716 	blt	r3,r2,4002a3c <___vfprintf_internal_r+0x3d4>
 40027a0:	42000204 	addi	r8,r8,8
 40027a4:	d9402f17 	ldw	r5,188(sp)
 40027a8:	2c4b883a 	add	r5,r5,r17
 40027ac:	d9402f15 	stw	r5,188(sp)
 40027b0:	80800007 	ldb	r2,0(r16)
 40027b4:	1000a826 	beq	r2,zero,4002a58 <___vfprintf_internal_r+0x3f0>
 40027b8:	84400047 	ldb	r17,1(r16)
 40027bc:	00bfffc4 	movi	r2,-1
 40027c0:	85400044 	addi	r21,r16,1
 40027c4:	d8002785 	stb	zero,158(sp)
 40027c8:	0007883a 	mov	r3,zero
 40027cc:	000f883a 	mov	r7,zero
 40027d0:	d8802915 	stw	r2,164(sp)
 40027d4:	d8003115 	stw	zero,196(sp)
 40027d8:	0025883a 	mov	r18,zero
 40027dc:	01401604 	movi	r5,88
 40027e0:	01800244 	movi	r6,9
 40027e4:	02800a84 	movi	r10,42
 40027e8:	02401b04 	movi	r9,108
 40027ec:	ad400044 	addi	r21,r21,1
 40027f0:	88bff804 	addi	r2,r17,-32
 40027f4:	28830436 	bltu	r5,r2,4003408 <___vfprintf_internal_r+0xda0>
 40027f8:	100490ba 	slli	r2,r2,2
 40027fc:	01010034 	movhi	r4,1024
 4002800:	210a0404 	addi	r4,r4,10256
 4002804:	1105883a 	add	r2,r2,r4
 4002808:	10800017 	ldw	r2,0(r2)
 400280c:	1000683a 	jmp	r2
 4002810:	04003328 	cmpgeui	r16,zero,204
 4002814:	04003408 	cmpgei	r16,zero,208
 4002818:	04003408 	cmpgei	r16,zero,208
 400281c:	04003348 	cmpgei	r16,zero,205
 4002820:	04003408 	cmpgei	r16,zero,208
 4002824:	04003408 	cmpgei	r16,zero,208
 4002828:	04003408 	cmpgei	r16,zero,208
 400282c:	04003408 	cmpgei	r16,zero,208
 4002830:	04003408 	cmpgei	r16,zero,208
 4002834:	04003408 	cmpgei	r16,zero,208
 4002838:	04002abc 	xorhi	r16,zero,170
 400283c:	04003264 	muli	r16,zero,201
 4002840:	04003408 	cmpgei	r16,zero,208
 4002844:	04002984 	movi	r16,166
 4002848:	04002ae4 	muli	r16,zero,171
 400284c:	04003408 	cmpgei	r16,zero,208
 4002850:	04002b24 	muli	r16,zero,172
 4002854:	04002b30 	cmpltui	r16,zero,172
 4002858:	04002b30 	cmpltui	r16,zero,172
 400285c:	04002b30 	cmpltui	r16,zero,172
 4002860:	04002b30 	cmpltui	r16,zero,172
 4002864:	04002b30 	cmpltui	r16,zero,172
 4002868:	04002b30 	cmpltui	r16,zero,172
 400286c:	04002b30 	cmpltui	r16,zero,172
 4002870:	04002b30 	cmpltui	r16,zero,172
 4002874:	04002b30 	cmpltui	r16,zero,172
 4002878:	04003408 	cmpgei	r16,zero,208
 400287c:	04003408 	cmpgei	r16,zero,208
 4002880:	04003408 	cmpgei	r16,zero,208
 4002884:	04003408 	cmpgei	r16,zero,208
 4002888:	04003408 	cmpgei	r16,zero,208
 400288c:	04003408 	cmpgei	r16,zero,208
 4002890:	04003408 	cmpgei	r16,zero,208
 4002894:	04003408 	cmpgei	r16,zero,208
 4002898:	04003408 	cmpgei	r16,zero,208
 400289c:	04003408 	cmpgei	r16,zero,208
 40028a0:	04002b64 	muli	r16,zero,173
 40028a4:	04002c20 	cmpeqi	r16,zero,176
 40028a8:	04003408 	cmpgei	r16,zero,208
 40028ac:	04002c20 	cmpeqi	r16,zero,176
 40028b0:	04003408 	cmpgei	r16,zero,208
 40028b4:	04003408 	cmpgei	r16,zero,208
 40028b8:	04003408 	cmpgei	r16,zero,208
 40028bc:	04003408 	cmpgei	r16,zero,208
 40028c0:	04002cc0 	call	4002cc <__alt_mem_dram_cntrl-0x3bffd34>
 40028c4:	04003408 	cmpgei	r16,zero,208
 40028c8:	04003408 	cmpgei	r16,zero,208
 40028cc:	04002ccc 	andi	r16,zero,179
 40028d0:	04003408 	cmpgei	r16,zero,208
 40028d4:	04003408 	cmpgei	r16,zero,208
 40028d8:	04003408 	cmpgei	r16,zero,208
 40028dc:	04003408 	cmpgei	r16,zero,208
 40028e0:	04003408 	cmpgei	r16,zero,208
 40028e4:	04003144 	movi	r16,197
 40028e8:	04003408 	cmpgei	r16,zero,208
 40028ec:	04003408 	cmpgei	r16,zero,208
 40028f0:	040031a4 	muli	r16,zero,198
 40028f4:	04003408 	cmpgei	r16,zero,208
 40028f8:	04003408 	cmpgei	r16,zero,208
 40028fc:	04003408 	cmpgei	r16,zero,208
 4002900:	04003408 	cmpgei	r16,zero,208
 4002904:	04003408 	cmpgei	r16,zero,208
 4002908:	04003408 	cmpgei	r16,zero,208
 400290c:	04003408 	cmpgei	r16,zero,208
 4002910:	04003408 	cmpgei	r16,zero,208
 4002914:	04003408 	cmpgei	r16,zero,208
 4002918:	04003408 	cmpgei	r16,zero,208
 400291c:	040033b4 	movhi	r16,206
 4002920:	04003354 	movui	r16,205
 4002924:	04002c20 	cmpeqi	r16,zero,176
 4002928:	04002c20 	cmpeqi	r16,zero,176
 400292c:	04002c20 	cmpeqi	r16,zero,176
 4002930:	04003364 	muli	r16,zero,205
 4002934:	04003354 	movui	r16,205
 4002938:	04003408 	cmpgei	r16,zero,208
 400293c:	04003408 	cmpgei	r16,zero,208
 4002940:	04003370 	cmpltui	r16,zero,205
 4002944:	04003408 	cmpgei	r16,zero,208
 4002948:	04003380 	call	400338 <__alt_mem_dram_cntrl-0x3bffcc8>
 400294c:	04003254 	movui	r16,201
 4002950:	04002990 	cmplti	r16,zero,166
 4002954:	04003274 	movhi	r16,201
 4002958:	04003408 	cmpgei	r16,zero,208
 400295c:	04003280 	call	400328 <__alt_mem_dram_cntrl-0x3bffcd8>
 4002960:	04003408 	cmpgei	r16,zero,208
 4002964:	040032dc 	xori	r16,zero,203
 4002968:	04003408 	cmpgei	r16,zero,208
 400296c:	04003408 	cmpgei	r16,zero,208
 4002970:	040032ec 	andhi	r16,zero,203
 4002974:	d9003117 	ldw	r4,196(sp)
 4002978:	d8802d15 	stw	r2,180(sp)
 400297c:	0109c83a 	sub	r4,zero,r4
 4002980:	d9003115 	stw	r4,196(sp)
 4002984:	94800114 	ori	r18,r18,4
 4002988:	ac400007 	ldb	r17,0(r21)
 400298c:	003f9706 	br	40027ec <__reset+0xfa8127ec>
 4002990:	00800c04 	movi	r2,48
 4002994:	d9002d17 	ldw	r4,180(sp)
 4002998:	d9402917 	ldw	r5,164(sp)
 400299c:	d8802705 	stb	r2,156(sp)
 40029a0:	00801e04 	movi	r2,120
 40029a4:	d8802745 	stb	r2,157(sp)
 40029a8:	d8002785 	stb	zero,158(sp)
 40029ac:	20c00104 	addi	r3,r4,4
 40029b0:	24c00017 	ldw	r19,0(r4)
 40029b4:	002d883a 	mov	r22,zero
 40029b8:	90800094 	ori	r2,r18,2
 40029bc:	28029a16 	blt	r5,zero,4003428 <___vfprintf_internal_r+0xdc0>
 40029c0:	00bfdfc4 	movi	r2,-129
 40029c4:	90a4703a 	and	r18,r18,r2
 40029c8:	d8c02d15 	stw	r3,180(sp)
 40029cc:	94800094 	ori	r18,r18,2
 40029d0:	9802871e 	bne	r19,zero,40033f0 <___vfprintf_internal_r+0xd88>
 40029d4:	00810074 	movhi	r2,1025
 40029d8:	10948004 	addi	r2,r2,20992
 40029dc:	d8803915 	stw	r2,228(sp)
 40029e0:	04401e04 	movi	r17,120
 40029e4:	d8802917 	ldw	r2,164(sp)
 40029e8:	0039883a 	mov	fp,zero
 40029ec:	1001e926 	beq	r2,zero,4003194 <___vfprintf_internal_r+0xb2c>
 40029f0:	0027883a 	mov	r19,zero
 40029f4:	002d883a 	mov	r22,zero
 40029f8:	00020506 	br	4003210 <___vfprintf_internal_r+0xba8>
 40029fc:	d9002c17 	ldw	r4,176(sp)
 4002a00:	b80b883a 	mov	r5,r23
 4002a04:	40049380 	call	4004938 <__swsetup_r>
 4002a08:	1005ac1e 	bne	r2,zero,40040bc <___vfprintf_internal_r+0x1a54>
 4002a0c:	b880030b 	ldhu	r2,12(r23)
 4002a10:	00c00284 	movi	r3,10
 4002a14:	1080068c 	andi	r2,r2,26
 4002a18:	10ff3c1e 	bne	r2,r3,400270c <__reset+0xfa81270c>
 4002a1c:	b880038f 	ldh	r2,14(r23)
 4002a20:	103f3a16 	blt	r2,zero,400270c <__reset+0xfa81270c>
 4002a24:	d9c02d17 	ldw	r7,180(sp)
 4002a28:	d9002c17 	ldw	r4,176(sp)
 4002a2c:	a80d883a 	mov	r6,r21
 4002a30:	b80b883a 	mov	r5,r23
 4002a34:	400487c0 	call	400487c <__sbprintf>
 4002a38:	00001106 	br	4002a80 <___vfprintf_internal_r+0x418>
 4002a3c:	d9002c17 	ldw	r4,176(sp)
 4002a40:	d9801e04 	addi	r6,sp,120
 4002a44:	b80b883a 	mov	r5,r23
 4002a48:	4009b1c0 	call	4009b1c <__sprint_r>
 4002a4c:	1000081e 	bne	r2,zero,4002a70 <___vfprintf_internal_r+0x408>
 4002a50:	da000404 	addi	r8,sp,16
 4002a54:	003f5306 	br	40027a4 <__reset+0xfa8127a4>
 4002a58:	d8802017 	ldw	r2,128(sp)
 4002a5c:	10000426 	beq	r2,zero,4002a70 <___vfprintf_internal_r+0x408>
 4002a60:	d9002c17 	ldw	r4,176(sp)
 4002a64:	d9801e04 	addi	r6,sp,120
 4002a68:	b80b883a 	mov	r5,r23
 4002a6c:	4009b1c0 	call	4009b1c <__sprint_r>
 4002a70:	b880030b 	ldhu	r2,12(r23)
 4002a74:	1080100c 	andi	r2,r2,64
 4002a78:	1005901e 	bne	r2,zero,40040bc <___vfprintf_internal_r+0x1a54>
 4002a7c:	d8802f17 	ldw	r2,188(sp)
 4002a80:	dfc04717 	ldw	ra,284(sp)
 4002a84:	df004617 	ldw	fp,280(sp)
 4002a88:	ddc04517 	ldw	r23,276(sp)
 4002a8c:	dd804417 	ldw	r22,272(sp)
 4002a90:	dd404317 	ldw	r21,268(sp)
 4002a94:	dd004217 	ldw	r20,264(sp)
 4002a98:	dcc04117 	ldw	r19,260(sp)
 4002a9c:	dc804017 	ldw	r18,256(sp)
 4002aa0:	dc403f17 	ldw	r17,252(sp)
 4002aa4:	dc003e17 	ldw	r16,248(sp)
 4002aa8:	dec04804 	addi	sp,sp,288
 4002aac:	f800283a 	ret
 4002ab0:	d9002c17 	ldw	r4,176(sp)
 4002ab4:	400690c0 	call	400690c <__sinit>
 4002ab8:	003f0406 	br	40026cc <__reset+0xfa8126cc>
 4002abc:	d8802d17 	ldw	r2,180(sp)
 4002ac0:	d9002d17 	ldw	r4,180(sp)
 4002ac4:	10800017 	ldw	r2,0(r2)
 4002ac8:	d8803115 	stw	r2,196(sp)
 4002acc:	20800104 	addi	r2,r4,4
 4002ad0:	d9003117 	ldw	r4,196(sp)
 4002ad4:	203fa716 	blt	r4,zero,4002974 <__reset+0xfa812974>
 4002ad8:	d8802d15 	stw	r2,180(sp)
 4002adc:	ac400007 	ldb	r17,0(r21)
 4002ae0:	003f4206 	br	40027ec <__reset+0xfa8127ec>
 4002ae4:	ac400007 	ldb	r17,0(r21)
 4002ae8:	aac00044 	addi	r11,r21,1
 4002aec:	8a872826 	beq	r17,r10,4004790 <___vfprintf_internal_r+0x2128>
 4002af0:	88bff404 	addi	r2,r17,-48
 4002af4:	0009883a 	mov	r4,zero
 4002af8:	30867d36 	bltu	r6,r2,40044f0 <___vfprintf_internal_r+0x1e88>
 4002afc:	5c400007 	ldb	r17,0(r11)
 4002b00:	210002a4 	muli	r4,r4,10
 4002b04:	5d400044 	addi	r21,r11,1
 4002b08:	a817883a 	mov	r11,r21
 4002b0c:	2089883a 	add	r4,r4,r2
 4002b10:	88bff404 	addi	r2,r17,-48
 4002b14:	30bff92e 	bgeu	r6,r2,4002afc <__reset+0xfa812afc>
 4002b18:	2005c916 	blt	r4,zero,4004240 <___vfprintf_internal_r+0x1bd8>
 4002b1c:	d9002915 	stw	r4,164(sp)
 4002b20:	003f3306 	br	40027f0 <__reset+0xfa8127f0>
 4002b24:	94802014 	ori	r18,r18,128
 4002b28:	ac400007 	ldb	r17,0(r21)
 4002b2c:	003f2f06 	br	40027ec <__reset+0xfa8127ec>
 4002b30:	a809883a 	mov	r4,r21
 4002b34:	d8003115 	stw	zero,196(sp)
 4002b38:	88bff404 	addi	r2,r17,-48
 4002b3c:	0017883a 	mov	r11,zero
 4002b40:	24400007 	ldb	r17,0(r4)
 4002b44:	5ac002a4 	muli	r11,r11,10
 4002b48:	ad400044 	addi	r21,r21,1
 4002b4c:	a809883a 	mov	r4,r21
 4002b50:	12d7883a 	add	r11,r2,r11
 4002b54:	88bff404 	addi	r2,r17,-48
 4002b58:	30bff92e 	bgeu	r6,r2,4002b40 <__reset+0xfa812b40>
 4002b5c:	dac03115 	stw	r11,196(sp)
 4002b60:	003f2306 	br	40027f0 <__reset+0xfa8127f0>
 4002b64:	18c03fcc 	andi	r3,r3,255
 4002b68:	18072b1e 	bne	r3,zero,4004818 <___vfprintf_internal_r+0x21b0>
 4002b6c:	94800414 	ori	r18,r18,16
 4002b70:	9080080c 	andi	r2,r18,32
 4002b74:	10037b26 	beq	r2,zero,4003964 <___vfprintf_internal_r+0x12fc>
 4002b78:	d9402d17 	ldw	r5,180(sp)
 4002b7c:	28800117 	ldw	r2,4(r5)
 4002b80:	2cc00017 	ldw	r19,0(r5)
 4002b84:	29400204 	addi	r5,r5,8
 4002b88:	d9402d15 	stw	r5,180(sp)
 4002b8c:	102d883a 	mov	r22,r2
 4002b90:	10044b16 	blt	r2,zero,4003cc0 <___vfprintf_internal_r+0x1658>
 4002b94:	d9402917 	ldw	r5,164(sp)
 4002b98:	df002783 	ldbu	fp,158(sp)
 4002b9c:	2803bc16 	blt	r5,zero,4003a90 <___vfprintf_internal_r+0x1428>
 4002ba0:	00ffdfc4 	movi	r3,-129
 4002ba4:	9d84b03a 	or	r2,r19,r22
 4002ba8:	90e4703a 	and	r18,r18,r3
 4002bac:	10017726 	beq	r2,zero,400318c <___vfprintf_internal_r+0xb24>
 4002bb0:	b0038326 	beq	r22,zero,40039c0 <___vfprintf_internal_r+0x1358>
 4002bb4:	dc402a15 	stw	r17,168(sp)
 4002bb8:	dc001e04 	addi	r16,sp,120
 4002bbc:	b023883a 	mov	r17,r22
 4002bc0:	402d883a 	mov	r22,r8
 4002bc4:	9809883a 	mov	r4,r19
 4002bc8:	880b883a 	mov	r5,r17
 4002bcc:	01800284 	movi	r6,10
 4002bd0:	000f883a 	mov	r7,zero
 4002bd4:	400bf140 	call	400bf14 <__umoddi3>
 4002bd8:	10800c04 	addi	r2,r2,48
 4002bdc:	843fffc4 	addi	r16,r16,-1
 4002be0:	9809883a 	mov	r4,r19
 4002be4:	880b883a 	mov	r5,r17
 4002be8:	80800005 	stb	r2,0(r16)
 4002bec:	01800284 	movi	r6,10
 4002bf0:	000f883a 	mov	r7,zero
 4002bf4:	400b99c0 	call	400b99c <__udivdi3>
 4002bf8:	1027883a 	mov	r19,r2
 4002bfc:	10c4b03a 	or	r2,r2,r3
 4002c00:	1823883a 	mov	r17,r3
 4002c04:	103fef1e 	bne	r2,zero,4002bc4 <__reset+0xfa812bc4>
 4002c08:	d8c02817 	ldw	r3,160(sp)
 4002c0c:	dc402a17 	ldw	r17,168(sp)
 4002c10:	b011883a 	mov	r8,r22
 4002c14:	1c07c83a 	sub	r3,r3,r16
 4002c18:	d8c02e15 	stw	r3,184(sp)
 4002c1c:	00005906 	br	4002d84 <___vfprintf_internal_r+0x71c>
 4002c20:	18c03fcc 	andi	r3,r3,255
 4002c24:	1806fa1e 	bne	r3,zero,4004810 <___vfprintf_internal_r+0x21a8>
 4002c28:	9080020c 	andi	r2,r18,8
 4002c2c:	10048a26 	beq	r2,zero,4003e58 <___vfprintf_internal_r+0x17f0>
 4002c30:	d8c02d17 	ldw	r3,180(sp)
 4002c34:	d9002d17 	ldw	r4,180(sp)
 4002c38:	d9402d17 	ldw	r5,180(sp)
 4002c3c:	18c00017 	ldw	r3,0(r3)
 4002c40:	21000117 	ldw	r4,4(r4)
 4002c44:	29400204 	addi	r5,r5,8
 4002c48:	d8c03615 	stw	r3,216(sp)
 4002c4c:	d9003815 	stw	r4,224(sp)
 4002c50:	d9402d15 	stw	r5,180(sp)
 4002c54:	d9003617 	ldw	r4,216(sp)
 4002c58:	d9403817 	ldw	r5,224(sp)
 4002c5c:	da003d15 	stw	r8,244(sp)
 4002c60:	04000044 	movi	r16,1
 4002c64:	40097400 	call	4009740 <__fpclassifyd>
 4002c68:	da003d17 	ldw	r8,244(sp)
 4002c6c:	14041f1e 	bne	r2,r16,4003cec <___vfprintf_internal_r+0x1684>
 4002c70:	d9003617 	ldw	r4,216(sp)
 4002c74:	d9403817 	ldw	r5,224(sp)
 4002c78:	000d883a 	mov	r6,zero
 4002c7c:	000f883a 	mov	r7,zero
 4002c80:	400d8f80 	call	400d8f8 <__ledf2>
 4002c84:	da003d17 	ldw	r8,244(sp)
 4002c88:	1005be16 	blt	r2,zero,4004384 <___vfprintf_internal_r+0x1d1c>
 4002c8c:	df002783 	ldbu	fp,158(sp)
 4002c90:	008011c4 	movi	r2,71
 4002c94:	1445330e 	bge	r2,r17,4004164 <___vfprintf_internal_r+0x1afc>
 4002c98:	04010074 	movhi	r16,1025
 4002c9c:	84147804 	addi	r16,r16,20960
 4002ca0:	00c000c4 	movi	r3,3
 4002ca4:	00bfdfc4 	movi	r2,-129
 4002ca8:	d8c02a15 	stw	r3,168(sp)
 4002cac:	90a4703a 	and	r18,r18,r2
 4002cb0:	d8c02e15 	stw	r3,184(sp)
 4002cb4:	d8002915 	stw	zero,164(sp)
 4002cb8:	d8003215 	stw	zero,200(sp)
 4002cbc:	00003706 	br	4002d9c <___vfprintf_internal_r+0x734>
 4002cc0:	94800214 	ori	r18,r18,8
 4002cc4:	ac400007 	ldb	r17,0(r21)
 4002cc8:	003ec806 	br	40027ec <__reset+0xfa8127ec>
 4002ccc:	18c03fcc 	andi	r3,r3,255
 4002cd0:	1806db1e 	bne	r3,zero,4004840 <___vfprintf_internal_r+0x21d8>
 4002cd4:	94800414 	ori	r18,r18,16
 4002cd8:	9080080c 	andi	r2,r18,32
 4002cdc:	1002d826 	beq	r2,zero,4003840 <___vfprintf_internal_r+0x11d8>
 4002ce0:	d9402d17 	ldw	r5,180(sp)
 4002ce4:	d8c02917 	ldw	r3,164(sp)
 4002ce8:	d8002785 	stb	zero,158(sp)
 4002cec:	28800204 	addi	r2,r5,8
 4002cf0:	2cc00017 	ldw	r19,0(r5)
 4002cf4:	2d800117 	ldw	r22,4(r5)
 4002cf8:	18048f16 	blt	r3,zero,4003f38 <___vfprintf_internal_r+0x18d0>
 4002cfc:	013fdfc4 	movi	r4,-129
 4002d00:	9d86b03a 	or	r3,r19,r22
 4002d04:	d8802d15 	stw	r2,180(sp)
 4002d08:	9124703a 	and	r18,r18,r4
 4002d0c:	1802d91e 	bne	r3,zero,4003874 <___vfprintf_internal_r+0x120c>
 4002d10:	d8c02917 	ldw	r3,164(sp)
 4002d14:	0039883a 	mov	fp,zero
 4002d18:	1805c326 	beq	r3,zero,4004428 <___vfprintf_internal_r+0x1dc0>
 4002d1c:	0027883a 	mov	r19,zero
 4002d20:	002d883a 	mov	r22,zero
 4002d24:	dc001e04 	addi	r16,sp,120
 4002d28:	9806d0fa 	srli	r3,r19,3
 4002d2c:	b008977a 	slli	r4,r22,29
 4002d30:	b02cd0fa 	srli	r22,r22,3
 4002d34:	9cc001cc 	andi	r19,r19,7
 4002d38:	98800c04 	addi	r2,r19,48
 4002d3c:	843fffc4 	addi	r16,r16,-1
 4002d40:	20e6b03a 	or	r19,r4,r3
 4002d44:	80800005 	stb	r2,0(r16)
 4002d48:	9d86b03a 	or	r3,r19,r22
 4002d4c:	183ff61e 	bne	r3,zero,4002d28 <__reset+0xfa812d28>
 4002d50:	90c0004c 	andi	r3,r18,1
 4002d54:	18013b26 	beq	r3,zero,4003244 <___vfprintf_internal_r+0xbdc>
 4002d58:	10803fcc 	andi	r2,r2,255
 4002d5c:	1080201c 	xori	r2,r2,128
 4002d60:	10bfe004 	addi	r2,r2,-128
 4002d64:	00c00c04 	movi	r3,48
 4002d68:	10c13626 	beq	r2,r3,4003244 <___vfprintf_internal_r+0xbdc>
 4002d6c:	80ffffc5 	stb	r3,-1(r16)
 4002d70:	d8c02817 	ldw	r3,160(sp)
 4002d74:	80bfffc4 	addi	r2,r16,-1
 4002d78:	1021883a 	mov	r16,r2
 4002d7c:	1887c83a 	sub	r3,r3,r2
 4002d80:	d8c02e15 	stw	r3,184(sp)
 4002d84:	d8802e17 	ldw	r2,184(sp)
 4002d88:	d9002917 	ldw	r4,164(sp)
 4002d8c:	1100010e 	bge	r2,r4,4002d94 <___vfprintf_internal_r+0x72c>
 4002d90:	2005883a 	mov	r2,r4
 4002d94:	d8802a15 	stw	r2,168(sp)
 4002d98:	d8003215 	stw	zero,200(sp)
 4002d9c:	e7003fcc 	andi	fp,fp,255
 4002da0:	e700201c 	xori	fp,fp,128
 4002da4:	e73fe004 	addi	fp,fp,-128
 4002da8:	e0000326 	beq	fp,zero,4002db8 <___vfprintf_internal_r+0x750>
 4002dac:	d8c02a17 	ldw	r3,168(sp)
 4002db0:	18c00044 	addi	r3,r3,1
 4002db4:	d8c02a15 	stw	r3,168(sp)
 4002db8:	90c0008c 	andi	r3,r18,2
 4002dbc:	d8c02b15 	stw	r3,172(sp)
 4002dc0:	18000326 	beq	r3,zero,4002dd0 <___vfprintf_internal_r+0x768>
 4002dc4:	d8c02a17 	ldw	r3,168(sp)
 4002dc8:	18c00084 	addi	r3,r3,2
 4002dcc:	d8c02a15 	stw	r3,168(sp)
 4002dd0:	90c0210c 	andi	r3,r18,132
 4002dd4:	d8c03015 	stw	r3,192(sp)
 4002dd8:	1801a31e 	bne	r3,zero,4003468 <___vfprintf_internal_r+0xe00>
 4002ddc:	d9003117 	ldw	r4,196(sp)
 4002de0:	d8c02a17 	ldw	r3,168(sp)
 4002de4:	20e7c83a 	sub	r19,r4,r3
 4002de8:	04c19f0e 	bge	zero,r19,4003468 <___vfprintf_internal_r+0xe00>
 4002dec:	02400404 	movi	r9,16
 4002df0:	d8c02017 	ldw	r3,128(sp)
 4002df4:	d8801f17 	ldw	r2,124(sp)
 4002df8:	4cc50d0e 	bge	r9,r19,4004230 <___vfprintf_internal_r+0x1bc8>
 4002dfc:	01410074 	movhi	r5,1025
 4002e00:	29548b84 	addi	r5,r5,21038
 4002e04:	dc403b15 	stw	r17,236(sp)
 4002e08:	d9403515 	stw	r5,212(sp)
 4002e0c:	9823883a 	mov	r17,r19
 4002e10:	482d883a 	mov	r22,r9
 4002e14:	9027883a 	mov	r19,r18
 4002e18:	070001c4 	movi	fp,7
 4002e1c:	8025883a 	mov	r18,r16
 4002e20:	dc002c17 	ldw	r16,176(sp)
 4002e24:	00000306 	br	4002e34 <___vfprintf_internal_r+0x7cc>
 4002e28:	8c7ffc04 	addi	r17,r17,-16
 4002e2c:	42000204 	addi	r8,r8,8
 4002e30:	b440130e 	bge	r22,r17,4002e80 <___vfprintf_internal_r+0x818>
 4002e34:	01010074 	movhi	r4,1025
 4002e38:	18c00404 	addi	r3,r3,16
 4002e3c:	10800044 	addi	r2,r2,1
 4002e40:	21148b84 	addi	r4,r4,21038
 4002e44:	41000015 	stw	r4,0(r8)
 4002e48:	45800115 	stw	r22,4(r8)
 4002e4c:	d8c02015 	stw	r3,128(sp)
 4002e50:	d8801f15 	stw	r2,124(sp)
 4002e54:	e0bff40e 	bge	fp,r2,4002e28 <__reset+0xfa812e28>
 4002e58:	d9801e04 	addi	r6,sp,120
 4002e5c:	b80b883a 	mov	r5,r23
 4002e60:	8009883a 	mov	r4,r16
 4002e64:	4009b1c0 	call	4009b1c <__sprint_r>
 4002e68:	103f011e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4002e6c:	8c7ffc04 	addi	r17,r17,-16
 4002e70:	d8c02017 	ldw	r3,128(sp)
 4002e74:	d8801f17 	ldw	r2,124(sp)
 4002e78:	da000404 	addi	r8,sp,16
 4002e7c:	b47fed16 	blt	r22,r17,4002e34 <__reset+0xfa812e34>
 4002e80:	9021883a 	mov	r16,r18
 4002e84:	9825883a 	mov	r18,r19
 4002e88:	8827883a 	mov	r19,r17
 4002e8c:	dc403b17 	ldw	r17,236(sp)
 4002e90:	d9403517 	ldw	r5,212(sp)
 4002e94:	98c7883a 	add	r3,r19,r3
 4002e98:	10800044 	addi	r2,r2,1
 4002e9c:	41400015 	stw	r5,0(r8)
 4002ea0:	44c00115 	stw	r19,4(r8)
 4002ea4:	d8c02015 	stw	r3,128(sp)
 4002ea8:	d8801f15 	stw	r2,124(sp)
 4002eac:	010001c4 	movi	r4,7
 4002eb0:	2082a316 	blt	r4,r2,4003940 <___vfprintf_internal_r+0x12d8>
 4002eb4:	df002787 	ldb	fp,158(sp)
 4002eb8:	42000204 	addi	r8,r8,8
 4002ebc:	e0000c26 	beq	fp,zero,4002ef0 <___vfprintf_internal_r+0x888>
 4002ec0:	d8801f17 	ldw	r2,124(sp)
 4002ec4:	d9002784 	addi	r4,sp,158
 4002ec8:	18c00044 	addi	r3,r3,1
 4002ecc:	10800044 	addi	r2,r2,1
 4002ed0:	41000015 	stw	r4,0(r8)
 4002ed4:	01000044 	movi	r4,1
 4002ed8:	41000115 	stw	r4,4(r8)
 4002edc:	d8c02015 	stw	r3,128(sp)
 4002ee0:	d8801f15 	stw	r2,124(sp)
 4002ee4:	010001c4 	movi	r4,7
 4002ee8:	20823c16 	blt	r4,r2,40037dc <___vfprintf_internal_r+0x1174>
 4002eec:	42000204 	addi	r8,r8,8
 4002ef0:	d8802b17 	ldw	r2,172(sp)
 4002ef4:	10000c26 	beq	r2,zero,4002f28 <___vfprintf_internal_r+0x8c0>
 4002ef8:	d8801f17 	ldw	r2,124(sp)
 4002efc:	d9002704 	addi	r4,sp,156
 4002f00:	18c00084 	addi	r3,r3,2
 4002f04:	10800044 	addi	r2,r2,1
 4002f08:	41000015 	stw	r4,0(r8)
 4002f0c:	01000084 	movi	r4,2
 4002f10:	41000115 	stw	r4,4(r8)
 4002f14:	d8c02015 	stw	r3,128(sp)
 4002f18:	d8801f15 	stw	r2,124(sp)
 4002f1c:	010001c4 	movi	r4,7
 4002f20:	20823616 	blt	r4,r2,40037fc <___vfprintf_internal_r+0x1194>
 4002f24:	42000204 	addi	r8,r8,8
 4002f28:	d9003017 	ldw	r4,192(sp)
 4002f2c:	00802004 	movi	r2,128
 4002f30:	20819926 	beq	r4,r2,4003598 <___vfprintf_internal_r+0xf30>
 4002f34:	d9402917 	ldw	r5,164(sp)
 4002f38:	d8802e17 	ldw	r2,184(sp)
 4002f3c:	28adc83a 	sub	r22,r5,r2
 4002f40:	0580310e 	bge	zero,r22,4003008 <___vfprintf_internal_r+0x9a0>
 4002f44:	07000404 	movi	fp,16
 4002f48:	d8801f17 	ldw	r2,124(sp)
 4002f4c:	e584140e 	bge	fp,r22,4003fa0 <___vfprintf_internal_r+0x1938>
 4002f50:	01410074 	movhi	r5,1025
 4002f54:	29548784 	addi	r5,r5,21022
 4002f58:	dc402915 	stw	r17,164(sp)
 4002f5c:	d9402b15 	stw	r5,172(sp)
 4002f60:	b023883a 	mov	r17,r22
 4002f64:	04c001c4 	movi	r19,7
 4002f68:	a82d883a 	mov	r22,r21
 4002f6c:	902b883a 	mov	r21,r18
 4002f70:	8025883a 	mov	r18,r16
 4002f74:	dc002c17 	ldw	r16,176(sp)
 4002f78:	00000306 	br	4002f88 <___vfprintf_internal_r+0x920>
 4002f7c:	8c7ffc04 	addi	r17,r17,-16
 4002f80:	42000204 	addi	r8,r8,8
 4002f84:	e440110e 	bge	fp,r17,4002fcc <___vfprintf_internal_r+0x964>
 4002f88:	18c00404 	addi	r3,r3,16
 4002f8c:	10800044 	addi	r2,r2,1
 4002f90:	45000015 	stw	r20,0(r8)
 4002f94:	47000115 	stw	fp,4(r8)
 4002f98:	d8c02015 	stw	r3,128(sp)
 4002f9c:	d8801f15 	stw	r2,124(sp)
 4002fa0:	98bff60e 	bge	r19,r2,4002f7c <__reset+0xfa812f7c>
 4002fa4:	d9801e04 	addi	r6,sp,120
 4002fa8:	b80b883a 	mov	r5,r23
 4002fac:	8009883a 	mov	r4,r16
 4002fb0:	4009b1c0 	call	4009b1c <__sprint_r>
 4002fb4:	103eae1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4002fb8:	8c7ffc04 	addi	r17,r17,-16
 4002fbc:	d8c02017 	ldw	r3,128(sp)
 4002fc0:	d8801f17 	ldw	r2,124(sp)
 4002fc4:	da000404 	addi	r8,sp,16
 4002fc8:	e47fef16 	blt	fp,r17,4002f88 <__reset+0xfa812f88>
 4002fcc:	9021883a 	mov	r16,r18
 4002fd0:	a825883a 	mov	r18,r21
 4002fd4:	b02b883a 	mov	r21,r22
 4002fd8:	882d883a 	mov	r22,r17
 4002fdc:	dc402917 	ldw	r17,164(sp)
 4002fe0:	d9002b17 	ldw	r4,172(sp)
 4002fe4:	1d87883a 	add	r3,r3,r22
 4002fe8:	10800044 	addi	r2,r2,1
 4002fec:	41000015 	stw	r4,0(r8)
 4002ff0:	45800115 	stw	r22,4(r8)
 4002ff4:	d8c02015 	stw	r3,128(sp)
 4002ff8:	d8801f15 	stw	r2,124(sp)
 4002ffc:	010001c4 	movi	r4,7
 4003000:	2081ee16 	blt	r4,r2,40037bc <___vfprintf_internal_r+0x1154>
 4003004:	42000204 	addi	r8,r8,8
 4003008:	9080400c 	andi	r2,r18,256
 400300c:	1001181e 	bne	r2,zero,4003470 <___vfprintf_internal_r+0xe08>
 4003010:	d9402e17 	ldw	r5,184(sp)
 4003014:	d8801f17 	ldw	r2,124(sp)
 4003018:	44000015 	stw	r16,0(r8)
 400301c:	1947883a 	add	r3,r3,r5
 4003020:	10800044 	addi	r2,r2,1
 4003024:	41400115 	stw	r5,4(r8)
 4003028:	d8c02015 	stw	r3,128(sp)
 400302c:	d8801f15 	stw	r2,124(sp)
 4003030:	010001c4 	movi	r4,7
 4003034:	2081d316 	blt	r4,r2,4003784 <___vfprintf_internal_r+0x111c>
 4003038:	42000204 	addi	r8,r8,8
 400303c:	9480010c 	andi	r18,r18,4
 4003040:	90003226 	beq	r18,zero,400310c <___vfprintf_internal_r+0xaa4>
 4003044:	d9403117 	ldw	r5,196(sp)
 4003048:	d8802a17 	ldw	r2,168(sp)
 400304c:	28a1c83a 	sub	r16,r5,r2
 4003050:	04002e0e 	bge	zero,r16,400310c <___vfprintf_internal_r+0xaa4>
 4003054:	04400404 	movi	r17,16
 4003058:	d8801f17 	ldw	r2,124(sp)
 400305c:	8c04a20e 	bge	r17,r16,40042e8 <___vfprintf_internal_r+0x1c80>
 4003060:	01410074 	movhi	r5,1025
 4003064:	29548b84 	addi	r5,r5,21038
 4003068:	d9403515 	stw	r5,212(sp)
 400306c:	048001c4 	movi	r18,7
 4003070:	dcc02c17 	ldw	r19,176(sp)
 4003074:	00000306 	br	4003084 <___vfprintf_internal_r+0xa1c>
 4003078:	843ffc04 	addi	r16,r16,-16
 400307c:	42000204 	addi	r8,r8,8
 4003080:	8c00130e 	bge	r17,r16,40030d0 <___vfprintf_internal_r+0xa68>
 4003084:	01010074 	movhi	r4,1025
 4003088:	18c00404 	addi	r3,r3,16
 400308c:	10800044 	addi	r2,r2,1
 4003090:	21148b84 	addi	r4,r4,21038
 4003094:	41000015 	stw	r4,0(r8)
 4003098:	44400115 	stw	r17,4(r8)
 400309c:	d8c02015 	stw	r3,128(sp)
 40030a0:	d8801f15 	stw	r2,124(sp)
 40030a4:	90bff40e 	bge	r18,r2,4003078 <__reset+0xfa813078>
 40030a8:	d9801e04 	addi	r6,sp,120
 40030ac:	b80b883a 	mov	r5,r23
 40030b0:	9809883a 	mov	r4,r19
 40030b4:	4009b1c0 	call	4009b1c <__sprint_r>
 40030b8:	103e6d1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40030bc:	843ffc04 	addi	r16,r16,-16
 40030c0:	d8c02017 	ldw	r3,128(sp)
 40030c4:	d8801f17 	ldw	r2,124(sp)
 40030c8:	da000404 	addi	r8,sp,16
 40030cc:	8c3fed16 	blt	r17,r16,4003084 <__reset+0xfa813084>
 40030d0:	d9403517 	ldw	r5,212(sp)
 40030d4:	1c07883a 	add	r3,r3,r16
 40030d8:	10800044 	addi	r2,r2,1
 40030dc:	41400015 	stw	r5,0(r8)
 40030e0:	44000115 	stw	r16,4(r8)
 40030e4:	d8c02015 	stw	r3,128(sp)
 40030e8:	d8801f15 	stw	r2,124(sp)
 40030ec:	010001c4 	movi	r4,7
 40030f0:	2080060e 	bge	r4,r2,400310c <___vfprintf_internal_r+0xaa4>
 40030f4:	d9002c17 	ldw	r4,176(sp)
 40030f8:	d9801e04 	addi	r6,sp,120
 40030fc:	b80b883a 	mov	r5,r23
 4003100:	4009b1c0 	call	4009b1c <__sprint_r>
 4003104:	103e5a1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003108:	d8c02017 	ldw	r3,128(sp)
 400310c:	d8803117 	ldw	r2,196(sp)
 4003110:	d9002a17 	ldw	r4,168(sp)
 4003114:	1100010e 	bge	r2,r4,400311c <___vfprintf_internal_r+0xab4>
 4003118:	2005883a 	mov	r2,r4
 400311c:	d9402f17 	ldw	r5,188(sp)
 4003120:	288b883a 	add	r5,r5,r2
 4003124:	d9402f15 	stw	r5,188(sp)
 4003128:	18019e1e 	bne	r3,zero,40037a4 <___vfprintf_internal_r+0x113c>
 400312c:	a8800007 	ldb	r2,0(r21)
 4003130:	d8001f15 	stw	zero,124(sp)
 4003134:	da000404 	addi	r8,sp,16
 4003138:	103d851e 	bne	r2,zero,4002750 <__reset+0xfa812750>
 400313c:	a821883a 	mov	r16,r21
 4003140:	003d9b06 	br	40027b0 <__reset+0xfa8127b0>
 4003144:	18c03fcc 	andi	r3,r3,255
 4003148:	1805c11e 	bne	r3,zero,4004850 <___vfprintf_internal_r+0x21e8>
 400314c:	94800414 	ori	r18,r18,16
 4003150:	9080080c 	andi	r2,r18,32
 4003154:	10020c26 	beq	r2,zero,4003988 <___vfprintf_internal_r+0x1320>
 4003158:	d8802d17 	ldw	r2,180(sp)
 400315c:	d9002917 	ldw	r4,164(sp)
 4003160:	d8002785 	stb	zero,158(sp)
 4003164:	10c00204 	addi	r3,r2,8
 4003168:	14c00017 	ldw	r19,0(r2)
 400316c:	15800117 	ldw	r22,4(r2)
 4003170:	20040f16 	blt	r4,zero,40041b0 <___vfprintf_internal_r+0x1b48>
 4003174:	013fdfc4 	movi	r4,-129
 4003178:	9d84b03a 	or	r2,r19,r22
 400317c:	d8c02d15 	stw	r3,180(sp)
 4003180:	9124703a 	and	r18,r18,r4
 4003184:	0039883a 	mov	fp,zero
 4003188:	103e891e 	bne	r2,zero,4002bb0 <__reset+0xfa812bb0>
 400318c:	d9002917 	ldw	r4,164(sp)
 4003190:	2002c11e 	bne	r4,zero,4003c98 <___vfprintf_internal_r+0x1630>
 4003194:	d8002915 	stw	zero,164(sp)
 4003198:	d8002e15 	stw	zero,184(sp)
 400319c:	dc001e04 	addi	r16,sp,120
 40031a0:	003ef806 	br	4002d84 <__reset+0xfa812d84>
 40031a4:	18c03fcc 	andi	r3,r3,255
 40031a8:	18059d1e 	bne	r3,zero,4004820 <___vfprintf_internal_r+0x21b8>
 40031ac:	01410074 	movhi	r5,1025
 40031b0:	29547b04 	addi	r5,r5,20972
 40031b4:	d9403915 	stw	r5,228(sp)
 40031b8:	9080080c 	andi	r2,r18,32
 40031bc:	10005226 	beq	r2,zero,4003308 <___vfprintf_internal_r+0xca0>
 40031c0:	d8802d17 	ldw	r2,180(sp)
 40031c4:	14c00017 	ldw	r19,0(r2)
 40031c8:	15800117 	ldw	r22,4(r2)
 40031cc:	10800204 	addi	r2,r2,8
 40031d0:	d8802d15 	stw	r2,180(sp)
 40031d4:	9080004c 	andi	r2,r18,1
 40031d8:	10019026 	beq	r2,zero,400381c <___vfprintf_internal_r+0x11b4>
 40031dc:	9d84b03a 	or	r2,r19,r22
 40031e0:	10036926 	beq	r2,zero,4003f88 <___vfprintf_internal_r+0x1920>
 40031e4:	d8c02917 	ldw	r3,164(sp)
 40031e8:	00800c04 	movi	r2,48
 40031ec:	d8802705 	stb	r2,156(sp)
 40031f0:	dc402745 	stb	r17,157(sp)
 40031f4:	d8002785 	stb	zero,158(sp)
 40031f8:	90800094 	ori	r2,r18,2
 40031fc:	18045d16 	blt	r3,zero,4004374 <___vfprintf_internal_r+0x1d0c>
 4003200:	00bfdfc4 	movi	r2,-129
 4003204:	90a4703a 	and	r18,r18,r2
 4003208:	94800094 	ori	r18,r18,2
 400320c:	0039883a 	mov	fp,zero
 4003210:	d9003917 	ldw	r4,228(sp)
 4003214:	dc001e04 	addi	r16,sp,120
 4003218:	988003cc 	andi	r2,r19,15
 400321c:	b006973a 	slli	r3,r22,28
 4003220:	2085883a 	add	r2,r4,r2
 4003224:	9826d13a 	srli	r19,r19,4
 4003228:	10800003 	ldbu	r2,0(r2)
 400322c:	b02cd13a 	srli	r22,r22,4
 4003230:	843fffc4 	addi	r16,r16,-1
 4003234:	1ce6b03a 	or	r19,r3,r19
 4003238:	80800005 	stb	r2,0(r16)
 400323c:	9d84b03a 	or	r2,r19,r22
 4003240:	103ff51e 	bne	r2,zero,4003218 <__reset+0xfa813218>
 4003244:	d8c02817 	ldw	r3,160(sp)
 4003248:	1c07c83a 	sub	r3,r3,r16
 400324c:	d8c02e15 	stw	r3,184(sp)
 4003250:	003ecc06 	br	4002d84 <__reset+0xfa812d84>
 4003254:	18c03fcc 	andi	r3,r3,255
 4003258:	183e9f26 	beq	r3,zero,4002cd8 <__reset+0xfa812cd8>
 400325c:	d9c02785 	stb	r7,158(sp)
 4003260:	003e9d06 	br	4002cd8 <__reset+0xfa812cd8>
 4003264:	00c00044 	movi	r3,1
 4003268:	01c00ac4 	movi	r7,43
 400326c:	ac400007 	ldb	r17,0(r21)
 4003270:	003d5e06 	br	40027ec <__reset+0xfa8127ec>
 4003274:	94800814 	ori	r18,r18,32
 4003278:	ac400007 	ldb	r17,0(r21)
 400327c:	003d5b06 	br	40027ec <__reset+0xfa8127ec>
 4003280:	d8c02d17 	ldw	r3,180(sp)
 4003284:	d8002785 	stb	zero,158(sp)
 4003288:	1c000017 	ldw	r16,0(r3)
 400328c:	1cc00104 	addi	r19,r3,4
 4003290:	80041926 	beq	r16,zero,40042f8 <___vfprintf_internal_r+0x1c90>
 4003294:	d9002917 	ldw	r4,164(sp)
 4003298:	2003d016 	blt	r4,zero,40041dc <___vfprintf_internal_r+0x1b74>
 400329c:	200d883a 	mov	r6,r4
 40032a0:	000b883a 	mov	r5,zero
 40032a4:	8009883a 	mov	r4,r16
 40032a8:	da003d15 	stw	r8,244(sp)
 40032ac:	4007e780 	call	4007e78 <memchr>
 40032b0:	da003d17 	ldw	r8,244(sp)
 40032b4:	10045426 	beq	r2,zero,4004408 <___vfprintf_internal_r+0x1da0>
 40032b8:	1405c83a 	sub	r2,r2,r16
 40032bc:	d8802e15 	stw	r2,184(sp)
 40032c0:	1003cc16 	blt	r2,zero,40041f4 <___vfprintf_internal_r+0x1b8c>
 40032c4:	df002783 	ldbu	fp,158(sp)
 40032c8:	d8802a15 	stw	r2,168(sp)
 40032cc:	dcc02d15 	stw	r19,180(sp)
 40032d0:	d8002915 	stw	zero,164(sp)
 40032d4:	d8003215 	stw	zero,200(sp)
 40032d8:	003eb006 	br	4002d9c <__reset+0xfa812d9c>
 40032dc:	18c03fcc 	andi	r3,r3,255
 40032e0:	183f9b26 	beq	r3,zero,4003150 <__reset+0xfa813150>
 40032e4:	d9c02785 	stb	r7,158(sp)
 40032e8:	003f9906 	br	4003150 <__reset+0xfa813150>
 40032ec:	18c03fcc 	andi	r3,r3,255
 40032f0:	1805551e 	bne	r3,zero,4004848 <___vfprintf_internal_r+0x21e0>
 40032f4:	01410074 	movhi	r5,1025
 40032f8:	29548004 	addi	r5,r5,20992
 40032fc:	d9403915 	stw	r5,228(sp)
 4003300:	9080080c 	andi	r2,r18,32
 4003304:	103fae1e 	bne	r2,zero,40031c0 <__reset+0xfa8131c0>
 4003308:	9080040c 	andi	r2,r18,16
 400330c:	1002de26 	beq	r2,zero,4003e88 <___vfprintf_internal_r+0x1820>
 4003310:	d8c02d17 	ldw	r3,180(sp)
 4003314:	002d883a 	mov	r22,zero
 4003318:	1cc00017 	ldw	r19,0(r3)
 400331c:	18c00104 	addi	r3,r3,4
 4003320:	d8c02d15 	stw	r3,180(sp)
 4003324:	003fab06 	br	40031d4 <__reset+0xfa8131d4>
 4003328:	38803fcc 	andi	r2,r7,255
 400332c:	1080201c 	xori	r2,r2,128
 4003330:	10bfe004 	addi	r2,r2,-128
 4003334:	1002d21e 	bne	r2,zero,4003e80 <___vfprintf_internal_r+0x1818>
 4003338:	00c00044 	movi	r3,1
 400333c:	01c00804 	movi	r7,32
 4003340:	ac400007 	ldb	r17,0(r21)
 4003344:	003d2906 	br	40027ec <__reset+0xfa8127ec>
 4003348:	94800054 	ori	r18,r18,1
 400334c:	ac400007 	ldb	r17,0(r21)
 4003350:	003d2606 	br	40027ec <__reset+0xfa8127ec>
 4003354:	18c03fcc 	andi	r3,r3,255
 4003358:	183e0526 	beq	r3,zero,4002b70 <__reset+0xfa812b70>
 400335c:	d9c02785 	stb	r7,158(sp)
 4003360:	003e0306 	br	4002b70 <__reset+0xfa812b70>
 4003364:	94801014 	ori	r18,r18,64
 4003368:	ac400007 	ldb	r17,0(r21)
 400336c:	003d1f06 	br	40027ec <__reset+0xfa8127ec>
 4003370:	ac400007 	ldb	r17,0(r21)
 4003374:	8a438726 	beq	r17,r9,4004194 <___vfprintf_internal_r+0x1b2c>
 4003378:	94800414 	ori	r18,r18,16
 400337c:	003d1b06 	br	40027ec <__reset+0xfa8127ec>
 4003380:	18c03fcc 	andi	r3,r3,255
 4003384:	1805341e 	bne	r3,zero,4004858 <___vfprintf_internal_r+0x21f0>
 4003388:	9080080c 	andi	r2,r18,32
 400338c:	1002cd26 	beq	r2,zero,4003ec4 <___vfprintf_internal_r+0x185c>
 4003390:	d9402d17 	ldw	r5,180(sp)
 4003394:	d9002f17 	ldw	r4,188(sp)
 4003398:	28800017 	ldw	r2,0(r5)
 400339c:	2007d7fa 	srai	r3,r4,31
 40033a0:	29400104 	addi	r5,r5,4
 40033a4:	d9402d15 	stw	r5,180(sp)
 40033a8:	11000015 	stw	r4,0(r2)
 40033ac:	10c00115 	stw	r3,4(r2)
 40033b0:	003ce506 	br	4002748 <__reset+0xfa812748>
 40033b4:	d8c02d17 	ldw	r3,180(sp)
 40033b8:	d9002d17 	ldw	r4,180(sp)
 40033bc:	d8002785 	stb	zero,158(sp)
 40033c0:	18800017 	ldw	r2,0(r3)
 40033c4:	21000104 	addi	r4,r4,4
 40033c8:	00c00044 	movi	r3,1
 40033cc:	d8c02a15 	stw	r3,168(sp)
 40033d0:	d8801405 	stb	r2,80(sp)
 40033d4:	d9002d15 	stw	r4,180(sp)
 40033d8:	d8c02e15 	stw	r3,184(sp)
 40033dc:	d8002915 	stw	zero,164(sp)
 40033e0:	d8003215 	stw	zero,200(sp)
 40033e4:	dc001404 	addi	r16,sp,80
 40033e8:	0039883a 	mov	fp,zero
 40033ec:	003e7206 	br	4002db8 <__reset+0xfa812db8>
 40033f0:	01010074 	movhi	r4,1025
 40033f4:	21148004 	addi	r4,r4,20992
 40033f8:	0039883a 	mov	fp,zero
 40033fc:	d9003915 	stw	r4,228(sp)
 4003400:	04401e04 	movi	r17,120
 4003404:	003f8206 	br	4003210 <__reset+0xfa813210>
 4003408:	18c03fcc 	andi	r3,r3,255
 400340c:	1805061e 	bne	r3,zero,4004828 <___vfprintf_internal_r+0x21c0>
 4003410:	883d9126 	beq	r17,zero,4002a58 <__reset+0xfa812a58>
 4003414:	00c00044 	movi	r3,1
 4003418:	d8c02a15 	stw	r3,168(sp)
 400341c:	dc401405 	stb	r17,80(sp)
 4003420:	d8002785 	stb	zero,158(sp)
 4003424:	003fec06 	br	40033d8 <__reset+0xfa8133d8>
 4003428:	01410074 	movhi	r5,1025
 400342c:	29548004 	addi	r5,r5,20992
 4003430:	d9403915 	stw	r5,228(sp)
 4003434:	d8c02d15 	stw	r3,180(sp)
 4003438:	1025883a 	mov	r18,r2
 400343c:	04401e04 	movi	r17,120
 4003440:	9d84b03a 	or	r2,r19,r22
 4003444:	1000fc1e 	bne	r2,zero,4003838 <___vfprintf_internal_r+0x11d0>
 4003448:	0039883a 	mov	fp,zero
 400344c:	00800084 	movi	r2,2
 4003450:	10803fcc 	andi	r2,r2,255
 4003454:	00c00044 	movi	r3,1
 4003458:	10c20f26 	beq	r2,r3,4003c98 <___vfprintf_internal_r+0x1630>
 400345c:	00c00084 	movi	r3,2
 4003460:	10fd6326 	beq	r2,r3,40029f0 <__reset+0xfa8129f0>
 4003464:	003e2d06 	br	4002d1c <__reset+0xfa812d1c>
 4003468:	d8c02017 	ldw	r3,128(sp)
 400346c:	003e9306 	br	4002ebc <__reset+0xfa812ebc>
 4003470:	00801944 	movi	r2,101
 4003474:	14407e0e 	bge	r2,r17,4003670 <___vfprintf_internal_r+0x1008>
 4003478:	d9003617 	ldw	r4,216(sp)
 400347c:	d9403817 	ldw	r5,224(sp)
 4003480:	000d883a 	mov	r6,zero
 4003484:	000f883a 	mov	r7,zero
 4003488:	d8c03c15 	stw	r3,240(sp)
 400348c:	da003d15 	stw	r8,244(sp)
 4003490:	400d7940 	call	400d794 <__eqdf2>
 4003494:	d8c03c17 	ldw	r3,240(sp)
 4003498:	da003d17 	ldw	r8,244(sp)
 400349c:	1000f71e 	bne	r2,zero,400387c <___vfprintf_internal_r+0x1214>
 40034a0:	d8801f17 	ldw	r2,124(sp)
 40034a4:	01010074 	movhi	r4,1025
 40034a8:	21148704 	addi	r4,r4,21020
 40034ac:	18c00044 	addi	r3,r3,1
 40034b0:	10800044 	addi	r2,r2,1
 40034b4:	41000015 	stw	r4,0(r8)
 40034b8:	01000044 	movi	r4,1
 40034bc:	41000115 	stw	r4,4(r8)
 40034c0:	d8c02015 	stw	r3,128(sp)
 40034c4:	d8801f15 	stw	r2,124(sp)
 40034c8:	010001c4 	movi	r4,7
 40034cc:	2082b816 	blt	r4,r2,4003fb0 <___vfprintf_internal_r+0x1948>
 40034d0:	42000204 	addi	r8,r8,8
 40034d4:	d8802617 	ldw	r2,152(sp)
 40034d8:	d9403317 	ldw	r5,204(sp)
 40034dc:	11400216 	blt	r2,r5,40034e8 <___vfprintf_internal_r+0xe80>
 40034e0:	9080004c 	andi	r2,r18,1
 40034e4:	103ed526 	beq	r2,zero,400303c <__reset+0xfa81303c>
 40034e8:	d8803717 	ldw	r2,220(sp)
 40034ec:	d9003417 	ldw	r4,208(sp)
 40034f0:	d9403717 	ldw	r5,220(sp)
 40034f4:	1887883a 	add	r3,r3,r2
 40034f8:	d8801f17 	ldw	r2,124(sp)
 40034fc:	41000015 	stw	r4,0(r8)
 4003500:	41400115 	stw	r5,4(r8)
 4003504:	10800044 	addi	r2,r2,1
 4003508:	d8c02015 	stw	r3,128(sp)
 400350c:	d8801f15 	stw	r2,124(sp)
 4003510:	010001c4 	movi	r4,7
 4003514:	20832916 	blt	r4,r2,40041bc <___vfprintf_internal_r+0x1b54>
 4003518:	42000204 	addi	r8,r8,8
 400351c:	d8803317 	ldw	r2,204(sp)
 4003520:	143fffc4 	addi	r16,r2,-1
 4003524:	043ec50e 	bge	zero,r16,400303c <__reset+0xfa81303c>
 4003528:	04400404 	movi	r17,16
 400352c:	d8801f17 	ldw	r2,124(sp)
 4003530:	8c00880e 	bge	r17,r16,4003754 <___vfprintf_internal_r+0x10ec>
 4003534:	01410074 	movhi	r5,1025
 4003538:	29548784 	addi	r5,r5,21022
 400353c:	d9402b15 	stw	r5,172(sp)
 4003540:	058001c4 	movi	r22,7
 4003544:	dcc02c17 	ldw	r19,176(sp)
 4003548:	00000306 	br	4003558 <___vfprintf_internal_r+0xef0>
 400354c:	42000204 	addi	r8,r8,8
 4003550:	843ffc04 	addi	r16,r16,-16
 4003554:	8c00820e 	bge	r17,r16,4003760 <___vfprintf_internal_r+0x10f8>
 4003558:	18c00404 	addi	r3,r3,16
 400355c:	10800044 	addi	r2,r2,1
 4003560:	45000015 	stw	r20,0(r8)
 4003564:	44400115 	stw	r17,4(r8)
 4003568:	d8c02015 	stw	r3,128(sp)
 400356c:	d8801f15 	stw	r2,124(sp)
 4003570:	b0bff60e 	bge	r22,r2,400354c <__reset+0xfa81354c>
 4003574:	d9801e04 	addi	r6,sp,120
 4003578:	b80b883a 	mov	r5,r23
 400357c:	9809883a 	mov	r4,r19
 4003580:	4009b1c0 	call	4009b1c <__sprint_r>
 4003584:	103d3a1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003588:	d8c02017 	ldw	r3,128(sp)
 400358c:	d8801f17 	ldw	r2,124(sp)
 4003590:	da000404 	addi	r8,sp,16
 4003594:	003fee06 	br	4003550 <__reset+0xfa813550>
 4003598:	d9403117 	ldw	r5,196(sp)
 400359c:	d8802a17 	ldw	r2,168(sp)
 40035a0:	28adc83a 	sub	r22,r5,r2
 40035a4:	05be630e 	bge	zero,r22,4002f34 <__reset+0xfa812f34>
 40035a8:	07000404 	movi	fp,16
 40035ac:	d8801f17 	ldw	r2,124(sp)
 40035b0:	e5838f0e 	bge	fp,r22,40043f0 <___vfprintf_internal_r+0x1d88>
 40035b4:	01410074 	movhi	r5,1025
 40035b8:	29548784 	addi	r5,r5,21022
 40035bc:	dc403015 	stw	r17,192(sp)
 40035c0:	d9402b15 	stw	r5,172(sp)
 40035c4:	b023883a 	mov	r17,r22
 40035c8:	04c001c4 	movi	r19,7
 40035cc:	a82d883a 	mov	r22,r21
 40035d0:	902b883a 	mov	r21,r18
 40035d4:	8025883a 	mov	r18,r16
 40035d8:	dc002c17 	ldw	r16,176(sp)
 40035dc:	00000306 	br	40035ec <___vfprintf_internal_r+0xf84>
 40035e0:	8c7ffc04 	addi	r17,r17,-16
 40035e4:	42000204 	addi	r8,r8,8
 40035e8:	e440110e 	bge	fp,r17,4003630 <___vfprintf_internal_r+0xfc8>
 40035ec:	18c00404 	addi	r3,r3,16
 40035f0:	10800044 	addi	r2,r2,1
 40035f4:	45000015 	stw	r20,0(r8)
 40035f8:	47000115 	stw	fp,4(r8)
 40035fc:	d8c02015 	stw	r3,128(sp)
 4003600:	d8801f15 	stw	r2,124(sp)
 4003604:	98bff60e 	bge	r19,r2,40035e0 <__reset+0xfa8135e0>
 4003608:	d9801e04 	addi	r6,sp,120
 400360c:	b80b883a 	mov	r5,r23
 4003610:	8009883a 	mov	r4,r16
 4003614:	4009b1c0 	call	4009b1c <__sprint_r>
 4003618:	103d151e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 400361c:	8c7ffc04 	addi	r17,r17,-16
 4003620:	d8c02017 	ldw	r3,128(sp)
 4003624:	d8801f17 	ldw	r2,124(sp)
 4003628:	da000404 	addi	r8,sp,16
 400362c:	e47fef16 	blt	fp,r17,40035ec <__reset+0xfa8135ec>
 4003630:	9021883a 	mov	r16,r18
 4003634:	a825883a 	mov	r18,r21
 4003638:	b02b883a 	mov	r21,r22
 400363c:	882d883a 	mov	r22,r17
 4003640:	dc403017 	ldw	r17,192(sp)
 4003644:	d9002b17 	ldw	r4,172(sp)
 4003648:	1d87883a 	add	r3,r3,r22
 400364c:	10800044 	addi	r2,r2,1
 4003650:	41000015 	stw	r4,0(r8)
 4003654:	45800115 	stw	r22,4(r8)
 4003658:	d8c02015 	stw	r3,128(sp)
 400365c:	d8801f15 	stw	r2,124(sp)
 4003660:	010001c4 	movi	r4,7
 4003664:	20818e16 	blt	r4,r2,4003ca0 <___vfprintf_internal_r+0x1638>
 4003668:	42000204 	addi	r8,r8,8
 400366c:	003e3106 	br	4002f34 <__reset+0xfa812f34>
 4003670:	d9403317 	ldw	r5,204(sp)
 4003674:	00800044 	movi	r2,1
 4003678:	18c00044 	addi	r3,r3,1
 400367c:	1141530e 	bge	r2,r5,4003bcc <___vfprintf_internal_r+0x1564>
 4003680:	dc401f17 	ldw	r17,124(sp)
 4003684:	00800044 	movi	r2,1
 4003688:	40800115 	stw	r2,4(r8)
 400368c:	8c400044 	addi	r17,r17,1
 4003690:	44000015 	stw	r16,0(r8)
 4003694:	d8c02015 	stw	r3,128(sp)
 4003698:	dc401f15 	stw	r17,124(sp)
 400369c:	008001c4 	movi	r2,7
 40036a0:	14416b16 	blt	r2,r17,4003c50 <___vfprintf_internal_r+0x15e8>
 40036a4:	42000204 	addi	r8,r8,8
 40036a8:	d8803717 	ldw	r2,220(sp)
 40036ac:	d9003417 	ldw	r4,208(sp)
 40036b0:	8c400044 	addi	r17,r17,1
 40036b4:	10c7883a 	add	r3,r2,r3
 40036b8:	40800115 	stw	r2,4(r8)
 40036bc:	41000015 	stw	r4,0(r8)
 40036c0:	d8c02015 	stw	r3,128(sp)
 40036c4:	dc401f15 	stw	r17,124(sp)
 40036c8:	008001c4 	movi	r2,7
 40036cc:	14416916 	blt	r2,r17,4003c74 <___vfprintf_internal_r+0x160c>
 40036d0:	45800204 	addi	r22,r8,8
 40036d4:	d9003617 	ldw	r4,216(sp)
 40036d8:	d9403817 	ldw	r5,224(sp)
 40036dc:	000d883a 	mov	r6,zero
 40036e0:	000f883a 	mov	r7,zero
 40036e4:	d8c03c15 	stw	r3,240(sp)
 40036e8:	400d7940 	call	400d794 <__eqdf2>
 40036ec:	d8c03c17 	ldw	r3,240(sp)
 40036f0:	1000bc26 	beq	r2,zero,40039e4 <___vfprintf_internal_r+0x137c>
 40036f4:	d9403317 	ldw	r5,204(sp)
 40036f8:	84000044 	addi	r16,r16,1
 40036fc:	8c400044 	addi	r17,r17,1
 4003700:	28bfffc4 	addi	r2,r5,-1
 4003704:	1887883a 	add	r3,r3,r2
 4003708:	b0800115 	stw	r2,4(r22)
 400370c:	b4000015 	stw	r16,0(r22)
 4003710:	d8c02015 	stw	r3,128(sp)
 4003714:	dc401f15 	stw	r17,124(sp)
 4003718:	008001c4 	movi	r2,7
 400371c:	14414316 	blt	r2,r17,4003c2c <___vfprintf_internal_r+0x15c4>
 4003720:	b5800204 	addi	r22,r22,8
 4003724:	d9003a17 	ldw	r4,232(sp)
 4003728:	df0022c4 	addi	fp,sp,139
 400372c:	8c400044 	addi	r17,r17,1
 4003730:	20c7883a 	add	r3,r4,r3
 4003734:	b7000015 	stw	fp,0(r22)
 4003738:	b1000115 	stw	r4,4(r22)
 400373c:	d8c02015 	stw	r3,128(sp)
 4003740:	dc401f15 	stw	r17,124(sp)
 4003744:	008001c4 	movi	r2,7
 4003748:	14400e16 	blt	r2,r17,4003784 <___vfprintf_internal_r+0x111c>
 400374c:	b2000204 	addi	r8,r22,8
 4003750:	003e3a06 	br	400303c <__reset+0xfa81303c>
 4003754:	01010074 	movhi	r4,1025
 4003758:	21148784 	addi	r4,r4,21022
 400375c:	d9002b15 	stw	r4,172(sp)
 4003760:	d9002b17 	ldw	r4,172(sp)
 4003764:	1c07883a 	add	r3,r3,r16
 4003768:	44000115 	stw	r16,4(r8)
 400376c:	41000015 	stw	r4,0(r8)
 4003770:	10800044 	addi	r2,r2,1
 4003774:	d8c02015 	stw	r3,128(sp)
 4003778:	d8801f15 	stw	r2,124(sp)
 400377c:	010001c4 	movi	r4,7
 4003780:	20be2d0e 	bge	r4,r2,4003038 <__reset+0xfa813038>
 4003784:	d9002c17 	ldw	r4,176(sp)
 4003788:	d9801e04 	addi	r6,sp,120
 400378c:	b80b883a 	mov	r5,r23
 4003790:	4009b1c0 	call	4009b1c <__sprint_r>
 4003794:	103cb61e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003798:	d8c02017 	ldw	r3,128(sp)
 400379c:	da000404 	addi	r8,sp,16
 40037a0:	003e2606 	br	400303c <__reset+0xfa81303c>
 40037a4:	d9002c17 	ldw	r4,176(sp)
 40037a8:	d9801e04 	addi	r6,sp,120
 40037ac:	b80b883a 	mov	r5,r23
 40037b0:	4009b1c0 	call	4009b1c <__sprint_r>
 40037b4:	103e5d26 	beq	r2,zero,400312c <__reset+0xfa81312c>
 40037b8:	003cad06 	br	4002a70 <__reset+0xfa812a70>
 40037bc:	d9002c17 	ldw	r4,176(sp)
 40037c0:	d9801e04 	addi	r6,sp,120
 40037c4:	b80b883a 	mov	r5,r23
 40037c8:	4009b1c0 	call	4009b1c <__sprint_r>
 40037cc:	103ca81e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40037d0:	d8c02017 	ldw	r3,128(sp)
 40037d4:	da000404 	addi	r8,sp,16
 40037d8:	003e0b06 	br	4003008 <__reset+0xfa813008>
 40037dc:	d9002c17 	ldw	r4,176(sp)
 40037e0:	d9801e04 	addi	r6,sp,120
 40037e4:	b80b883a 	mov	r5,r23
 40037e8:	4009b1c0 	call	4009b1c <__sprint_r>
 40037ec:	103ca01e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40037f0:	d8c02017 	ldw	r3,128(sp)
 40037f4:	da000404 	addi	r8,sp,16
 40037f8:	003dbd06 	br	4002ef0 <__reset+0xfa812ef0>
 40037fc:	d9002c17 	ldw	r4,176(sp)
 4003800:	d9801e04 	addi	r6,sp,120
 4003804:	b80b883a 	mov	r5,r23
 4003808:	4009b1c0 	call	4009b1c <__sprint_r>
 400380c:	103c981e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003810:	d8c02017 	ldw	r3,128(sp)
 4003814:	da000404 	addi	r8,sp,16
 4003818:	003dc306 	br	4002f28 <__reset+0xfa812f28>
 400381c:	d8802917 	ldw	r2,164(sp)
 4003820:	d8002785 	stb	zero,158(sp)
 4003824:	103f0616 	blt	r2,zero,4003440 <__reset+0xfa813440>
 4003828:	00ffdfc4 	movi	r3,-129
 400382c:	9d84b03a 	or	r2,r19,r22
 4003830:	90e4703a 	and	r18,r18,r3
 4003834:	103c6b26 	beq	r2,zero,40029e4 <__reset+0xfa8129e4>
 4003838:	0039883a 	mov	fp,zero
 400383c:	003e7406 	br	4003210 <__reset+0xfa813210>
 4003840:	9080040c 	andi	r2,r18,16
 4003844:	1001b326 	beq	r2,zero,4003f14 <___vfprintf_internal_r+0x18ac>
 4003848:	d9002d17 	ldw	r4,180(sp)
 400384c:	d9402917 	ldw	r5,164(sp)
 4003850:	d8002785 	stb	zero,158(sp)
 4003854:	20800104 	addi	r2,r4,4
 4003858:	24c00017 	ldw	r19,0(r4)
 400385c:	002d883a 	mov	r22,zero
 4003860:	2801b516 	blt	r5,zero,4003f38 <___vfprintf_internal_r+0x18d0>
 4003864:	00ffdfc4 	movi	r3,-129
 4003868:	d8802d15 	stw	r2,180(sp)
 400386c:	90e4703a 	and	r18,r18,r3
 4003870:	983d2726 	beq	r19,zero,4002d10 <__reset+0xfa812d10>
 4003874:	0039883a 	mov	fp,zero
 4003878:	003d2a06 	br	4002d24 <__reset+0xfa812d24>
 400387c:	dc402617 	ldw	r17,152(sp)
 4003880:	0441d30e 	bge	zero,r17,4003fd0 <___vfprintf_internal_r+0x1968>
 4003884:	dc403217 	ldw	r17,200(sp)
 4003888:	d8803317 	ldw	r2,204(sp)
 400388c:	1440010e 	bge	r2,r17,4003894 <___vfprintf_internal_r+0x122c>
 4003890:	1023883a 	mov	r17,r2
 4003894:	04400a0e 	bge	zero,r17,40038c0 <___vfprintf_internal_r+0x1258>
 4003898:	d8801f17 	ldw	r2,124(sp)
 400389c:	1c47883a 	add	r3,r3,r17
 40038a0:	44000015 	stw	r16,0(r8)
 40038a4:	10800044 	addi	r2,r2,1
 40038a8:	44400115 	stw	r17,4(r8)
 40038ac:	d8c02015 	stw	r3,128(sp)
 40038b0:	d8801f15 	stw	r2,124(sp)
 40038b4:	010001c4 	movi	r4,7
 40038b8:	20826516 	blt	r4,r2,4004250 <___vfprintf_internal_r+0x1be8>
 40038bc:	42000204 	addi	r8,r8,8
 40038c0:	88026116 	blt	r17,zero,4004248 <___vfprintf_internal_r+0x1be0>
 40038c4:	d9003217 	ldw	r4,200(sp)
 40038c8:	2463c83a 	sub	r17,r4,r17
 40038cc:	04407b0e 	bge	zero,r17,4003abc <___vfprintf_internal_r+0x1454>
 40038d0:	05800404 	movi	r22,16
 40038d4:	d8801f17 	ldw	r2,124(sp)
 40038d8:	b4419d0e 	bge	r22,r17,4003f50 <___vfprintf_internal_r+0x18e8>
 40038dc:	01010074 	movhi	r4,1025
 40038e0:	21148784 	addi	r4,r4,21022
 40038e4:	d9002b15 	stw	r4,172(sp)
 40038e8:	070001c4 	movi	fp,7
 40038ec:	dcc02c17 	ldw	r19,176(sp)
 40038f0:	00000306 	br	4003900 <___vfprintf_internal_r+0x1298>
 40038f4:	42000204 	addi	r8,r8,8
 40038f8:	8c7ffc04 	addi	r17,r17,-16
 40038fc:	b441970e 	bge	r22,r17,4003f5c <___vfprintf_internal_r+0x18f4>
 4003900:	18c00404 	addi	r3,r3,16
 4003904:	10800044 	addi	r2,r2,1
 4003908:	45000015 	stw	r20,0(r8)
 400390c:	45800115 	stw	r22,4(r8)
 4003910:	d8c02015 	stw	r3,128(sp)
 4003914:	d8801f15 	stw	r2,124(sp)
 4003918:	e0bff60e 	bge	fp,r2,40038f4 <__reset+0xfa8138f4>
 400391c:	d9801e04 	addi	r6,sp,120
 4003920:	b80b883a 	mov	r5,r23
 4003924:	9809883a 	mov	r4,r19
 4003928:	4009b1c0 	call	4009b1c <__sprint_r>
 400392c:	103c501e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003930:	d8c02017 	ldw	r3,128(sp)
 4003934:	d8801f17 	ldw	r2,124(sp)
 4003938:	da000404 	addi	r8,sp,16
 400393c:	003fee06 	br	40038f8 <__reset+0xfa8138f8>
 4003940:	d9002c17 	ldw	r4,176(sp)
 4003944:	d9801e04 	addi	r6,sp,120
 4003948:	b80b883a 	mov	r5,r23
 400394c:	4009b1c0 	call	4009b1c <__sprint_r>
 4003950:	103c471e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003954:	d8c02017 	ldw	r3,128(sp)
 4003958:	df002787 	ldb	fp,158(sp)
 400395c:	da000404 	addi	r8,sp,16
 4003960:	003d5606 	br	4002ebc <__reset+0xfa812ebc>
 4003964:	9080040c 	andi	r2,r18,16
 4003968:	10016126 	beq	r2,zero,4003ef0 <___vfprintf_internal_r+0x1888>
 400396c:	d8802d17 	ldw	r2,180(sp)
 4003970:	14c00017 	ldw	r19,0(r2)
 4003974:	10800104 	addi	r2,r2,4
 4003978:	d8802d15 	stw	r2,180(sp)
 400397c:	982dd7fa 	srai	r22,r19,31
 4003980:	b005883a 	mov	r2,r22
 4003984:	003c8206 	br	4002b90 <__reset+0xfa812b90>
 4003988:	9080040c 	andi	r2,r18,16
 400398c:	10003526 	beq	r2,zero,4003a64 <___vfprintf_internal_r+0x13fc>
 4003990:	d9402d17 	ldw	r5,180(sp)
 4003994:	d8c02917 	ldw	r3,164(sp)
 4003998:	d8002785 	stb	zero,158(sp)
 400399c:	28800104 	addi	r2,r5,4
 40039a0:	2cc00017 	ldw	r19,0(r5)
 40039a4:	002d883a 	mov	r22,zero
 40039a8:	18003716 	blt	r3,zero,4003a88 <___vfprintf_internal_r+0x1420>
 40039ac:	00ffdfc4 	movi	r3,-129
 40039b0:	d8802d15 	stw	r2,180(sp)
 40039b4:	90e4703a 	and	r18,r18,r3
 40039b8:	0039883a 	mov	fp,zero
 40039bc:	983df326 	beq	r19,zero,400318c <__reset+0xfa81318c>
 40039c0:	00800244 	movi	r2,9
 40039c4:	14fc7b36 	bltu	r2,r19,4002bb4 <__reset+0xfa812bb4>
 40039c8:	d8c02817 	ldw	r3,160(sp)
 40039cc:	dc001dc4 	addi	r16,sp,119
 40039d0:	9cc00c04 	addi	r19,r19,48
 40039d4:	1c07c83a 	sub	r3,r3,r16
 40039d8:	dcc01dc5 	stb	r19,119(sp)
 40039dc:	d8c02e15 	stw	r3,184(sp)
 40039e0:	003ce806 	br	4002d84 <__reset+0xfa812d84>
 40039e4:	d8803317 	ldw	r2,204(sp)
 40039e8:	143fffc4 	addi	r16,r2,-1
 40039ec:	043f4d0e 	bge	zero,r16,4003724 <__reset+0xfa813724>
 40039f0:	07000404 	movi	fp,16
 40039f4:	e400810e 	bge	fp,r16,4003bfc <___vfprintf_internal_r+0x1594>
 40039f8:	01410074 	movhi	r5,1025
 40039fc:	29548784 	addi	r5,r5,21022
 4003a00:	d9402b15 	stw	r5,172(sp)
 4003a04:	01c001c4 	movi	r7,7
 4003a08:	dcc02c17 	ldw	r19,176(sp)
 4003a0c:	00000306 	br	4003a1c <___vfprintf_internal_r+0x13b4>
 4003a10:	b5800204 	addi	r22,r22,8
 4003a14:	843ffc04 	addi	r16,r16,-16
 4003a18:	e4007b0e 	bge	fp,r16,4003c08 <___vfprintf_internal_r+0x15a0>
 4003a1c:	18c00404 	addi	r3,r3,16
 4003a20:	8c400044 	addi	r17,r17,1
 4003a24:	b5000015 	stw	r20,0(r22)
 4003a28:	b7000115 	stw	fp,4(r22)
 4003a2c:	d8c02015 	stw	r3,128(sp)
 4003a30:	dc401f15 	stw	r17,124(sp)
 4003a34:	3c7ff60e 	bge	r7,r17,4003a10 <__reset+0xfa813a10>
 4003a38:	d9801e04 	addi	r6,sp,120
 4003a3c:	b80b883a 	mov	r5,r23
 4003a40:	9809883a 	mov	r4,r19
 4003a44:	d9c03c15 	stw	r7,240(sp)
 4003a48:	4009b1c0 	call	4009b1c <__sprint_r>
 4003a4c:	d9c03c17 	ldw	r7,240(sp)
 4003a50:	103c071e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003a54:	d8c02017 	ldw	r3,128(sp)
 4003a58:	dc401f17 	ldw	r17,124(sp)
 4003a5c:	dd800404 	addi	r22,sp,16
 4003a60:	003fec06 	br	4003a14 <__reset+0xfa813a14>
 4003a64:	9080100c 	andi	r2,r18,64
 4003a68:	d8002785 	stb	zero,158(sp)
 4003a6c:	10010e26 	beq	r2,zero,4003ea8 <___vfprintf_internal_r+0x1840>
 4003a70:	d9002d17 	ldw	r4,180(sp)
 4003a74:	d9402917 	ldw	r5,164(sp)
 4003a78:	002d883a 	mov	r22,zero
 4003a7c:	20800104 	addi	r2,r4,4
 4003a80:	24c0000b 	ldhu	r19,0(r4)
 4003a84:	283fc90e 	bge	r5,zero,40039ac <__reset+0xfa8139ac>
 4003a88:	d8802d15 	stw	r2,180(sp)
 4003a8c:	0039883a 	mov	fp,zero
 4003a90:	9d84b03a 	or	r2,r19,r22
 4003a94:	103c461e 	bne	r2,zero,4002bb0 <__reset+0xfa812bb0>
 4003a98:	00800044 	movi	r2,1
 4003a9c:	003e6c06 	br	4003450 <__reset+0xfa813450>
 4003aa0:	d9002c17 	ldw	r4,176(sp)
 4003aa4:	d9801e04 	addi	r6,sp,120
 4003aa8:	b80b883a 	mov	r5,r23
 4003aac:	4009b1c0 	call	4009b1c <__sprint_r>
 4003ab0:	103bef1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003ab4:	d8c02017 	ldw	r3,128(sp)
 4003ab8:	da000404 	addi	r8,sp,16
 4003abc:	d9003217 	ldw	r4,200(sp)
 4003ac0:	d8802617 	ldw	r2,152(sp)
 4003ac4:	d9403317 	ldw	r5,204(sp)
 4003ac8:	8123883a 	add	r17,r16,r4
 4003acc:	11400216 	blt	r2,r5,4003ad8 <___vfprintf_internal_r+0x1470>
 4003ad0:	9100004c 	andi	r4,r18,1
 4003ad4:	20000d26 	beq	r4,zero,4003b0c <___vfprintf_internal_r+0x14a4>
 4003ad8:	d9003717 	ldw	r4,220(sp)
 4003adc:	d9403417 	ldw	r5,208(sp)
 4003ae0:	1907883a 	add	r3,r3,r4
 4003ae4:	d9001f17 	ldw	r4,124(sp)
 4003ae8:	41400015 	stw	r5,0(r8)
 4003aec:	d9403717 	ldw	r5,220(sp)
 4003af0:	21000044 	addi	r4,r4,1
 4003af4:	d8c02015 	stw	r3,128(sp)
 4003af8:	41400115 	stw	r5,4(r8)
 4003afc:	d9001f15 	stw	r4,124(sp)
 4003b00:	014001c4 	movi	r5,7
 4003b04:	2901e816 	blt	r5,r4,40042a8 <___vfprintf_internal_r+0x1c40>
 4003b08:	42000204 	addi	r8,r8,8
 4003b0c:	d9003317 	ldw	r4,204(sp)
 4003b10:	8121883a 	add	r16,r16,r4
 4003b14:	2085c83a 	sub	r2,r4,r2
 4003b18:	8461c83a 	sub	r16,r16,r17
 4003b1c:	1400010e 	bge	r2,r16,4003b24 <___vfprintf_internal_r+0x14bc>
 4003b20:	1021883a 	mov	r16,r2
 4003b24:	04000a0e 	bge	zero,r16,4003b50 <___vfprintf_internal_r+0x14e8>
 4003b28:	d9001f17 	ldw	r4,124(sp)
 4003b2c:	1c07883a 	add	r3,r3,r16
 4003b30:	44400015 	stw	r17,0(r8)
 4003b34:	21000044 	addi	r4,r4,1
 4003b38:	44000115 	stw	r16,4(r8)
 4003b3c:	d8c02015 	stw	r3,128(sp)
 4003b40:	d9001f15 	stw	r4,124(sp)
 4003b44:	014001c4 	movi	r5,7
 4003b48:	2901fb16 	blt	r5,r4,4004338 <___vfprintf_internal_r+0x1cd0>
 4003b4c:	42000204 	addi	r8,r8,8
 4003b50:	8001f716 	blt	r16,zero,4004330 <___vfprintf_internal_r+0x1cc8>
 4003b54:	1421c83a 	sub	r16,r2,r16
 4003b58:	043d380e 	bge	zero,r16,400303c <__reset+0xfa81303c>
 4003b5c:	04400404 	movi	r17,16
 4003b60:	d8801f17 	ldw	r2,124(sp)
 4003b64:	8c3efb0e 	bge	r17,r16,4003754 <__reset+0xfa813754>
 4003b68:	01410074 	movhi	r5,1025
 4003b6c:	29548784 	addi	r5,r5,21022
 4003b70:	d9402b15 	stw	r5,172(sp)
 4003b74:	058001c4 	movi	r22,7
 4003b78:	dcc02c17 	ldw	r19,176(sp)
 4003b7c:	00000306 	br	4003b8c <___vfprintf_internal_r+0x1524>
 4003b80:	42000204 	addi	r8,r8,8
 4003b84:	843ffc04 	addi	r16,r16,-16
 4003b88:	8c3ef50e 	bge	r17,r16,4003760 <__reset+0xfa813760>
 4003b8c:	18c00404 	addi	r3,r3,16
 4003b90:	10800044 	addi	r2,r2,1
 4003b94:	45000015 	stw	r20,0(r8)
 4003b98:	44400115 	stw	r17,4(r8)
 4003b9c:	d8c02015 	stw	r3,128(sp)
 4003ba0:	d8801f15 	stw	r2,124(sp)
 4003ba4:	b0bff60e 	bge	r22,r2,4003b80 <__reset+0xfa813b80>
 4003ba8:	d9801e04 	addi	r6,sp,120
 4003bac:	b80b883a 	mov	r5,r23
 4003bb0:	9809883a 	mov	r4,r19
 4003bb4:	4009b1c0 	call	4009b1c <__sprint_r>
 4003bb8:	103bad1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003bbc:	d8c02017 	ldw	r3,128(sp)
 4003bc0:	d8801f17 	ldw	r2,124(sp)
 4003bc4:	da000404 	addi	r8,sp,16
 4003bc8:	003fee06 	br	4003b84 <__reset+0xfa813b84>
 4003bcc:	9088703a 	and	r4,r18,r2
 4003bd0:	203eab1e 	bne	r4,zero,4003680 <__reset+0xfa813680>
 4003bd4:	dc401f17 	ldw	r17,124(sp)
 4003bd8:	40800115 	stw	r2,4(r8)
 4003bdc:	44000015 	stw	r16,0(r8)
 4003be0:	8c400044 	addi	r17,r17,1
 4003be4:	d8c02015 	stw	r3,128(sp)
 4003be8:	dc401f15 	stw	r17,124(sp)
 4003bec:	008001c4 	movi	r2,7
 4003bf0:	14400e16 	blt	r2,r17,4003c2c <___vfprintf_internal_r+0x15c4>
 4003bf4:	45800204 	addi	r22,r8,8
 4003bf8:	003eca06 	br	4003724 <__reset+0xfa813724>
 4003bfc:	01010074 	movhi	r4,1025
 4003c00:	21148784 	addi	r4,r4,21022
 4003c04:	d9002b15 	stw	r4,172(sp)
 4003c08:	d8802b17 	ldw	r2,172(sp)
 4003c0c:	1c07883a 	add	r3,r3,r16
 4003c10:	8c400044 	addi	r17,r17,1
 4003c14:	b0800015 	stw	r2,0(r22)
 4003c18:	b4000115 	stw	r16,4(r22)
 4003c1c:	d8c02015 	stw	r3,128(sp)
 4003c20:	dc401f15 	stw	r17,124(sp)
 4003c24:	008001c4 	movi	r2,7
 4003c28:	147ebd0e 	bge	r2,r17,4003720 <__reset+0xfa813720>
 4003c2c:	d9002c17 	ldw	r4,176(sp)
 4003c30:	d9801e04 	addi	r6,sp,120
 4003c34:	b80b883a 	mov	r5,r23
 4003c38:	4009b1c0 	call	4009b1c <__sprint_r>
 4003c3c:	103b8c1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003c40:	d8c02017 	ldw	r3,128(sp)
 4003c44:	dc401f17 	ldw	r17,124(sp)
 4003c48:	dd800404 	addi	r22,sp,16
 4003c4c:	003eb506 	br	4003724 <__reset+0xfa813724>
 4003c50:	d9002c17 	ldw	r4,176(sp)
 4003c54:	d9801e04 	addi	r6,sp,120
 4003c58:	b80b883a 	mov	r5,r23
 4003c5c:	4009b1c0 	call	4009b1c <__sprint_r>
 4003c60:	103b831e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003c64:	d8c02017 	ldw	r3,128(sp)
 4003c68:	dc401f17 	ldw	r17,124(sp)
 4003c6c:	da000404 	addi	r8,sp,16
 4003c70:	003e8d06 	br	40036a8 <__reset+0xfa8136a8>
 4003c74:	d9002c17 	ldw	r4,176(sp)
 4003c78:	d9801e04 	addi	r6,sp,120
 4003c7c:	b80b883a 	mov	r5,r23
 4003c80:	4009b1c0 	call	4009b1c <__sprint_r>
 4003c84:	103b7a1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003c88:	d8c02017 	ldw	r3,128(sp)
 4003c8c:	dc401f17 	ldw	r17,124(sp)
 4003c90:	dd800404 	addi	r22,sp,16
 4003c94:	003e8f06 	br	40036d4 <__reset+0xfa8136d4>
 4003c98:	0027883a 	mov	r19,zero
 4003c9c:	003f4a06 	br	40039c8 <__reset+0xfa8139c8>
 4003ca0:	d9002c17 	ldw	r4,176(sp)
 4003ca4:	d9801e04 	addi	r6,sp,120
 4003ca8:	b80b883a 	mov	r5,r23
 4003cac:	4009b1c0 	call	4009b1c <__sprint_r>
 4003cb0:	103b6f1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003cb4:	d8c02017 	ldw	r3,128(sp)
 4003cb8:	da000404 	addi	r8,sp,16
 4003cbc:	003c9d06 	br	4002f34 <__reset+0xfa812f34>
 4003cc0:	04e7c83a 	sub	r19,zero,r19
 4003cc4:	9804c03a 	cmpne	r2,r19,zero
 4003cc8:	05adc83a 	sub	r22,zero,r22
 4003ccc:	b0adc83a 	sub	r22,r22,r2
 4003cd0:	d8802917 	ldw	r2,164(sp)
 4003cd4:	07000b44 	movi	fp,45
 4003cd8:	df002785 	stb	fp,158(sp)
 4003cdc:	10017b16 	blt	r2,zero,40042cc <___vfprintf_internal_r+0x1c64>
 4003ce0:	00bfdfc4 	movi	r2,-129
 4003ce4:	90a4703a 	and	r18,r18,r2
 4003ce8:	003bb106 	br	4002bb0 <__reset+0xfa812bb0>
 4003cec:	d9003617 	ldw	r4,216(sp)
 4003cf0:	d9403817 	ldw	r5,224(sp)
 4003cf4:	da003d15 	stw	r8,244(sp)
 4003cf8:	40097400 	call	4009740 <__fpclassifyd>
 4003cfc:	da003d17 	ldw	r8,244(sp)
 4003d00:	1000f026 	beq	r2,zero,40040c4 <___vfprintf_internal_r+0x1a5c>
 4003d04:	d9002917 	ldw	r4,164(sp)
 4003d08:	05bff7c4 	movi	r22,-33
 4003d0c:	00bfffc4 	movi	r2,-1
 4003d10:	8dac703a 	and	r22,r17,r22
 4003d14:	20820026 	beq	r4,r2,4004518 <___vfprintf_internal_r+0x1eb0>
 4003d18:	008011c4 	movi	r2,71
 4003d1c:	b081f726 	beq	r22,r2,40044fc <___vfprintf_internal_r+0x1e94>
 4003d20:	d9003817 	ldw	r4,224(sp)
 4003d24:	90c04014 	ori	r3,r18,256
 4003d28:	d8c02b15 	stw	r3,172(sp)
 4003d2c:	20021516 	blt	r4,zero,4004584 <___vfprintf_internal_r+0x1f1c>
 4003d30:	dcc03817 	ldw	r19,224(sp)
 4003d34:	d8002a05 	stb	zero,168(sp)
 4003d38:	00801984 	movi	r2,102
 4003d3c:	8881f926 	beq	r17,r2,4004524 <___vfprintf_internal_r+0x1ebc>
 4003d40:	00801184 	movi	r2,70
 4003d44:	88821c26 	beq	r17,r2,40045b8 <___vfprintf_internal_r+0x1f50>
 4003d48:	00801144 	movi	r2,69
 4003d4c:	b081ef26 	beq	r22,r2,400450c <___vfprintf_internal_r+0x1ea4>
 4003d50:	d8c02917 	ldw	r3,164(sp)
 4003d54:	d8802104 	addi	r2,sp,132
 4003d58:	d8800315 	stw	r2,12(sp)
 4003d5c:	d9403617 	ldw	r5,216(sp)
 4003d60:	d8802504 	addi	r2,sp,148
 4003d64:	d9002c17 	ldw	r4,176(sp)
 4003d68:	d8800215 	stw	r2,8(sp)
 4003d6c:	d8802604 	addi	r2,sp,152
 4003d70:	d8c00015 	stw	r3,0(sp)
 4003d74:	d8800115 	stw	r2,4(sp)
 4003d78:	01c00084 	movi	r7,2
 4003d7c:	980d883a 	mov	r6,r19
 4003d80:	d8c03c15 	stw	r3,240(sp)
 4003d84:	da003d15 	stw	r8,244(sp)
 4003d88:	4004c8c0 	call	4004c8c <_dtoa_r>
 4003d8c:	1021883a 	mov	r16,r2
 4003d90:	008019c4 	movi	r2,103
 4003d94:	d8c03c17 	ldw	r3,240(sp)
 4003d98:	da003d17 	ldw	r8,244(sp)
 4003d9c:	88817126 	beq	r17,r2,4004364 <___vfprintf_internal_r+0x1cfc>
 4003da0:	008011c4 	movi	r2,71
 4003da4:	88829226 	beq	r17,r2,40047f0 <___vfprintf_internal_r+0x2188>
 4003da8:	80f9883a 	add	fp,r16,r3
 4003dac:	d9003617 	ldw	r4,216(sp)
 4003db0:	000d883a 	mov	r6,zero
 4003db4:	000f883a 	mov	r7,zero
 4003db8:	980b883a 	mov	r5,r19
 4003dbc:	da003d15 	stw	r8,244(sp)
 4003dc0:	400d7940 	call	400d794 <__eqdf2>
 4003dc4:	da003d17 	ldw	r8,244(sp)
 4003dc8:	10018d26 	beq	r2,zero,4004400 <___vfprintf_internal_r+0x1d98>
 4003dcc:	d8802117 	ldw	r2,132(sp)
 4003dd0:	1700062e 	bgeu	r2,fp,4003dec <___vfprintf_internal_r+0x1784>
 4003dd4:	01000c04 	movi	r4,48
 4003dd8:	10c00044 	addi	r3,r2,1
 4003ddc:	d8c02115 	stw	r3,132(sp)
 4003de0:	11000005 	stb	r4,0(r2)
 4003de4:	d8802117 	ldw	r2,132(sp)
 4003de8:	173ffb36 	bltu	r2,fp,4003dd8 <__reset+0xfa813dd8>
 4003dec:	1405c83a 	sub	r2,r2,r16
 4003df0:	d8803315 	stw	r2,204(sp)
 4003df4:	008011c4 	movi	r2,71
 4003df8:	b0817626 	beq	r22,r2,40043d4 <___vfprintf_internal_r+0x1d6c>
 4003dfc:	00801944 	movi	r2,101
 4003e00:	1442810e 	bge	r2,r17,4004808 <___vfprintf_internal_r+0x21a0>
 4003e04:	d8c02617 	ldw	r3,152(sp)
 4003e08:	00801984 	movi	r2,102
 4003e0c:	d8c03215 	stw	r3,200(sp)
 4003e10:	8881fe26 	beq	r17,r2,400460c <___vfprintf_internal_r+0x1fa4>
 4003e14:	d8c03217 	ldw	r3,200(sp)
 4003e18:	d9003317 	ldw	r4,204(sp)
 4003e1c:	1901dd16 	blt	r3,r4,4004594 <___vfprintf_internal_r+0x1f2c>
 4003e20:	9480004c 	andi	r18,r18,1
 4003e24:	90022b1e 	bne	r18,zero,40046d4 <___vfprintf_internal_r+0x206c>
 4003e28:	1805883a 	mov	r2,r3
 4003e2c:	18028016 	blt	r3,zero,4004830 <___vfprintf_internal_r+0x21c8>
 4003e30:	d8c03217 	ldw	r3,200(sp)
 4003e34:	044019c4 	movi	r17,103
 4003e38:	d8c02e15 	stw	r3,184(sp)
 4003e3c:	df002a07 	ldb	fp,168(sp)
 4003e40:	e001531e 	bne	fp,zero,4004390 <___vfprintf_internal_r+0x1d28>
 4003e44:	df002783 	ldbu	fp,158(sp)
 4003e48:	d8802a15 	stw	r2,168(sp)
 4003e4c:	dc802b17 	ldw	r18,172(sp)
 4003e50:	d8002915 	stw	zero,164(sp)
 4003e54:	003bd106 	br	4002d9c <__reset+0xfa812d9c>
 4003e58:	d8802d17 	ldw	r2,180(sp)
 4003e5c:	d8c02d17 	ldw	r3,180(sp)
 4003e60:	d9002d17 	ldw	r4,180(sp)
 4003e64:	10800017 	ldw	r2,0(r2)
 4003e68:	18c00117 	ldw	r3,4(r3)
 4003e6c:	21000204 	addi	r4,r4,8
 4003e70:	d8803615 	stw	r2,216(sp)
 4003e74:	d8c03815 	stw	r3,224(sp)
 4003e78:	d9002d15 	stw	r4,180(sp)
 4003e7c:	003b7506 	br	4002c54 <__reset+0xfa812c54>
 4003e80:	ac400007 	ldb	r17,0(r21)
 4003e84:	003a5906 	br	40027ec <__reset+0xfa8127ec>
 4003e88:	9080100c 	andi	r2,r18,64
 4003e8c:	1000a826 	beq	r2,zero,4004130 <___vfprintf_internal_r+0x1ac8>
 4003e90:	d9002d17 	ldw	r4,180(sp)
 4003e94:	002d883a 	mov	r22,zero
 4003e98:	24c0000b 	ldhu	r19,0(r4)
 4003e9c:	21000104 	addi	r4,r4,4
 4003ea0:	d9002d15 	stw	r4,180(sp)
 4003ea4:	003ccb06 	br	40031d4 <__reset+0xfa8131d4>
 4003ea8:	d8c02d17 	ldw	r3,180(sp)
 4003eac:	d9002917 	ldw	r4,164(sp)
 4003eb0:	002d883a 	mov	r22,zero
 4003eb4:	18800104 	addi	r2,r3,4
 4003eb8:	1cc00017 	ldw	r19,0(r3)
 4003ebc:	203ebb0e 	bge	r4,zero,40039ac <__reset+0xfa8139ac>
 4003ec0:	003ef106 	br	4003a88 <__reset+0xfa813a88>
 4003ec4:	9080040c 	andi	r2,r18,16
 4003ec8:	1000921e 	bne	r2,zero,4004114 <___vfprintf_internal_r+0x1aac>
 4003ecc:	9480100c 	andi	r18,r18,64
 4003ed0:	90013926 	beq	r18,zero,40043b8 <___vfprintf_internal_r+0x1d50>
 4003ed4:	d9002d17 	ldw	r4,180(sp)
 4003ed8:	d9402f17 	ldw	r5,188(sp)
 4003edc:	20800017 	ldw	r2,0(r4)
 4003ee0:	21000104 	addi	r4,r4,4
 4003ee4:	d9002d15 	stw	r4,180(sp)
 4003ee8:	1140000d 	sth	r5,0(r2)
 4003eec:	003a1606 	br	4002748 <__reset+0xfa812748>
 4003ef0:	9080100c 	andi	r2,r18,64
 4003ef4:	10008026 	beq	r2,zero,40040f8 <___vfprintf_internal_r+0x1a90>
 4003ef8:	d8c02d17 	ldw	r3,180(sp)
 4003efc:	1cc0000f 	ldh	r19,0(r3)
 4003f00:	18c00104 	addi	r3,r3,4
 4003f04:	d8c02d15 	stw	r3,180(sp)
 4003f08:	982dd7fa 	srai	r22,r19,31
 4003f0c:	b005883a 	mov	r2,r22
 4003f10:	003b1f06 	br	4002b90 <__reset+0xfa812b90>
 4003f14:	9080100c 	andi	r2,r18,64
 4003f18:	d8002785 	stb	zero,158(sp)
 4003f1c:	10008a1e 	bne	r2,zero,4004148 <___vfprintf_internal_r+0x1ae0>
 4003f20:	d9402d17 	ldw	r5,180(sp)
 4003f24:	d8c02917 	ldw	r3,164(sp)
 4003f28:	002d883a 	mov	r22,zero
 4003f2c:	28800104 	addi	r2,r5,4
 4003f30:	2cc00017 	ldw	r19,0(r5)
 4003f34:	183e4b0e 	bge	r3,zero,4003864 <__reset+0xfa813864>
 4003f38:	9d86b03a 	or	r3,r19,r22
 4003f3c:	d8802d15 	stw	r2,180(sp)
 4003f40:	183e4c1e 	bne	r3,zero,4003874 <__reset+0xfa813874>
 4003f44:	0039883a 	mov	fp,zero
 4003f48:	0005883a 	mov	r2,zero
 4003f4c:	003d4006 	br	4003450 <__reset+0xfa813450>
 4003f50:	01410074 	movhi	r5,1025
 4003f54:	29548784 	addi	r5,r5,21022
 4003f58:	d9402b15 	stw	r5,172(sp)
 4003f5c:	d9402b17 	ldw	r5,172(sp)
 4003f60:	1c47883a 	add	r3,r3,r17
 4003f64:	10800044 	addi	r2,r2,1
 4003f68:	41400015 	stw	r5,0(r8)
 4003f6c:	44400115 	stw	r17,4(r8)
 4003f70:	d8c02015 	stw	r3,128(sp)
 4003f74:	d8801f15 	stw	r2,124(sp)
 4003f78:	010001c4 	movi	r4,7
 4003f7c:	20bec816 	blt	r4,r2,4003aa0 <__reset+0xfa813aa0>
 4003f80:	42000204 	addi	r8,r8,8
 4003f84:	003ecd06 	br	4003abc <__reset+0xfa813abc>
 4003f88:	d9002917 	ldw	r4,164(sp)
 4003f8c:	d8002785 	stb	zero,158(sp)
 4003f90:	203d2d16 	blt	r4,zero,4003448 <__reset+0xfa813448>
 4003f94:	00bfdfc4 	movi	r2,-129
 4003f98:	90a4703a 	and	r18,r18,r2
 4003f9c:	003a9106 	br	40029e4 <__reset+0xfa8129e4>
 4003fa0:	01010074 	movhi	r4,1025
 4003fa4:	21148784 	addi	r4,r4,21022
 4003fa8:	d9002b15 	stw	r4,172(sp)
 4003fac:	003c0c06 	br	4002fe0 <__reset+0xfa812fe0>
 4003fb0:	d9002c17 	ldw	r4,176(sp)
 4003fb4:	d9801e04 	addi	r6,sp,120
 4003fb8:	b80b883a 	mov	r5,r23
 4003fbc:	4009b1c0 	call	4009b1c <__sprint_r>
 4003fc0:	103aab1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4003fc4:	d8c02017 	ldw	r3,128(sp)
 4003fc8:	da000404 	addi	r8,sp,16
 4003fcc:	003d4106 	br	40034d4 <__reset+0xfa8134d4>
 4003fd0:	d8801f17 	ldw	r2,124(sp)
 4003fd4:	01410074 	movhi	r5,1025
 4003fd8:	01000044 	movi	r4,1
 4003fdc:	18c00044 	addi	r3,r3,1
 4003fe0:	10800044 	addi	r2,r2,1
 4003fe4:	29548704 	addi	r5,r5,21020
 4003fe8:	41000115 	stw	r4,4(r8)
 4003fec:	41400015 	stw	r5,0(r8)
 4003ff0:	d8c02015 	stw	r3,128(sp)
 4003ff4:	d8801f15 	stw	r2,124(sp)
 4003ff8:	010001c4 	movi	r4,7
 4003ffc:	20805c16 	blt	r4,r2,4004170 <___vfprintf_internal_r+0x1b08>
 4004000:	42000204 	addi	r8,r8,8
 4004004:	8800041e 	bne	r17,zero,4004018 <___vfprintf_internal_r+0x19b0>
 4004008:	d8803317 	ldw	r2,204(sp)
 400400c:	1000021e 	bne	r2,zero,4004018 <___vfprintf_internal_r+0x19b0>
 4004010:	9080004c 	andi	r2,r18,1
 4004014:	103c0926 	beq	r2,zero,400303c <__reset+0xfa81303c>
 4004018:	d9003717 	ldw	r4,220(sp)
 400401c:	d8801f17 	ldw	r2,124(sp)
 4004020:	d9403417 	ldw	r5,208(sp)
 4004024:	20c7883a 	add	r3,r4,r3
 4004028:	10800044 	addi	r2,r2,1
 400402c:	41000115 	stw	r4,4(r8)
 4004030:	41400015 	stw	r5,0(r8)
 4004034:	d8c02015 	stw	r3,128(sp)
 4004038:	d8801f15 	stw	r2,124(sp)
 400403c:	010001c4 	movi	r4,7
 4004040:	20812116 	blt	r4,r2,40044c8 <___vfprintf_internal_r+0x1e60>
 4004044:	42000204 	addi	r8,r8,8
 4004048:	0463c83a 	sub	r17,zero,r17
 400404c:	0440730e 	bge	zero,r17,400421c <___vfprintf_internal_r+0x1bb4>
 4004050:	05800404 	movi	r22,16
 4004054:	b440860e 	bge	r22,r17,4004270 <___vfprintf_internal_r+0x1c08>
 4004058:	01410074 	movhi	r5,1025
 400405c:	29548784 	addi	r5,r5,21022
 4004060:	d9402b15 	stw	r5,172(sp)
 4004064:	070001c4 	movi	fp,7
 4004068:	dcc02c17 	ldw	r19,176(sp)
 400406c:	00000306 	br	400407c <___vfprintf_internal_r+0x1a14>
 4004070:	42000204 	addi	r8,r8,8
 4004074:	8c7ffc04 	addi	r17,r17,-16
 4004078:	b440800e 	bge	r22,r17,400427c <___vfprintf_internal_r+0x1c14>
 400407c:	18c00404 	addi	r3,r3,16
 4004080:	10800044 	addi	r2,r2,1
 4004084:	45000015 	stw	r20,0(r8)
 4004088:	45800115 	stw	r22,4(r8)
 400408c:	d8c02015 	stw	r3,128(sp)
 4004090:	d8801f15 	stw	r2,124(sp)
 4004094:	e0bff60e 	bge	fp,r2,4004070 <__reset+0xfa814070>
 4004098:	d9801e04 	addi	r6,sp,120
 400409c:	b80b883a 	mov	r5,r23
 40040a0:	9809883a 	mov	r4,r19
 40040a4:	4009b1c0 	call	4009b1c <__sprint_r>
 40040a8:	103a711e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40040ac:	d8c02017 	ldw	r3,128(sp)
 40040b0:	d8801f17 	ldw	r2,124(sp)
 40040b4:	da000404 	addi	r8,sp,16
 40040b8:	003fee06 	br	4004074 <__reset+0xfa814074>
 40040bc:	00bfffc4 	movi	r2,-1
 40040c0:	003a6f06 	br	4002a80 <__reset+0xfa812a80>
 40040c4:	008011c4 	movi	r2,71
 40040c8:	1440b816 	blt	r2,r17,40043ac <___vfprintf_internal_r+0x1d44>
 40040cc:	04010074 	movhi	r16,1025
 40040d0:	84147904 	addi	r16,r16,20964
 40040d4:	00c000c4 	movi	r3,3
 40040d8:	00bfdfc4 	movi	r2,-129
 40040dc:	d8c02a15 	stw	r3,168(sp)
 40040e0:	90a4703a 	and	r18,r18,r2
 40040e4:	df002783 	ldbu	fp,158(sp)
 40040e8:	d8c02e15 	stw	r3,184(sp)
 40040ec:	d8002915 	stw	zero,164(sp)
 40040f0:	d8003215 	stw	zero,200(sp)
 40040f4:	003b2906 	br	4002d9c <__reset+0xfa812d9c>
 40040f8:	d9002d17 	ldw	r4,180(sp)
 40040fc:	24c00017 	ldw	r19,0(r4)
 4004100:	21000104 	addi	r4,r4,4
 4004104:	d9002d15 	stw	r4,180(sp)
 4004108:	982dd7fa 	srai	r22,r19,31
 400410c:	b005883a 	mov	r2,r22
 4004110:	003a9f06 	br	4002b90 <__reset+0xfa812b90>
 4004114:	d9402d17 	ldw	r5,180(sp)
 4004118:	d8c02f17 	ldw	r3,188(sp)
 400411c:	28800017 	ldw	r2,0(r5)
 4004120:	29400104 	addi	r5,r5,4
 4004124:	d9402d15 	stw	r5,180(sp)
 4004128:	10c00015 	stw	r3,0(r2)
 400412c:	00398606 	br	4002748 <__reset+0xfa812748>
 4004130:	d9402d17 	ldw	r5,180(sp)
 4004134:	002d883a 	mov	r22,zero
 4004138:	2cc00017 	ldw	r19,0(r5)
 400413c:	29400104 	addi	r5,r5,4
 4004140:	d9402d15 	stw	r5,180(sp)
 4004144:	003c2306 	br	40031d4 <__reset+0xfa8131d4>
 4004148:	d8c02d17 	ldw	r3,180(sp)
 400414c:	d9002917 	ldw	r4,164(sp)
 4004150:	002d883a 	mov	r22,zero
 4004154:	18800104 	addi	r2,r3,4
 4004158:	1cc0000b 	ldhu	r19,0(r3)
 400415c:	203dc10e 	bge	r4,zero,4003864 <__reset+0xfa813864>
 4004160:	003f7506 	br	4003f38 <__reset+0xfa813f38>
 4004164:	04010074 	movhi	r16,1025
 4004168:	84147704 	addi	r16,r16,20956
 400416c:	003acc06 	br	4002ca0 <__reset+0xfa812ca0>
 4004170:	d9002c17 	ldw	r4,176(sp)
 4004174:	d9801e04 	addi	r6,sp,120
 4004178:	b80b883a 	mov	r5,r23
 400417c:	4009b1c0 	call	4009b1c <__sprint_r>
 4004180:	103a3b1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4004184:	dc402617 	ldw	r17,152(sp)
 4004188:	d8c02017 	ldw	r3,128(sp)
 400418c:	da000404 	addi	r8,sp,16
 4004190:	003f9c06 	br	4004004 <__reset+0xfa814004>
 4004194:	ac400043 	ldbu	r17,1(r21)
 4004198:	94800814 	ori	r18,r18,32
 400419c:	ad400044 	addi	r21,r21,1
 40041a0:	8c403fcc 	andi	r17,r17,255
 40041a4:	8c40201c 	xori	r17,r17,128
 40041a8:	8c7fe004 	addi	r17,r17,-128
 40041ac:	00398f06 	br	40027ec <__reset+0xfa8127ec>
 40041b0:	d8c02d15 	stw	r3,180(sp)
 40041b4:	0039883a 	mov	fp,zero
 40041b8:	003e3506 	br	4003a90 <__reset+0xfa813a90>
 40041bc:	d9002c17 	ldw	r4,176(sp)
 40041c0:	d9801e04 	addi	r6,sp,120
 40041c4:	b80b883a 	mov	r5,r23
 40041c8:	4009b1c0 	call	4009b1c <__sprint_r>
 40041cc:	103a281e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40041d0:	d8c02017 	ldw	r3,128(sp)
 40041d4:	da000404 	addi	r8,sp,16
 40041d8:	003cd006 	br	400351c <__reset+0xfa81351c>
 40041dc:	8009883a 	mov	r4,r16
 40041e0:	da003d15 	stw	r8,244(sp)
 40041e4:	40025d00 	call	40025d0 <strlen>
 40041e8:	d8802e15 	stw	r2,184(sp)
 40041ec:	da003d17 	ldw	r8,244(sp)
 40041f0:	103c340e 	bge	r2,zero,40032c4 <__reset+0xfa8132c4>
 40041f4:	0005883a 	mov	r2,zero
 40041f8:	003c3206 	br	40032c4 <__reset+0xfa8132c4>
 40041fc:	d9002c17 	ldw	r4,176(sp)
 4004200:	d9801e04 	addi	r6,sp,120
 4004204:	b80b883a 	mov	r5,r23
 4004208:	4009b1c0 	call	4009b1c <__sprint_r>
 400420c:	103a181e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4004210:	d8c02017 	ldw	r3,128(sp)
 4004214:	d8801f17 	ldw	r2,124(sp)
 4004218:	da000404 	addi	r8,sp,16
 400421c:	d9403317 	ldw	r5,204(sp)
 4004220:	10800044 	addi	r2,r2,1
 4004224:	44000015 	stw	r16,0(r8)
 4004228:	28c7883a 	add	r3,r5,r3
 400422c:	003b7d06 	br	4003024 <__reset+0xfa813024>
 4004230:	01010074 	movhi	r4,1025
 4004234:	21148b84 	addi	r4,r4,21038
 4004238:	d9003515 	stw	r4,212(sp)
 400423c:	003b1406 	br	4002e90 <__reset+0xfa812e90>
 4004240:	013fffc4 	movi	r4,-1
 4004244:	003a3506 	br	4002b1c <__reset+0xfa812b1c>
 4004248:	0023883a 	mov	r17,zero
 400424c:	003d9d06 	br	40038c4 <__reset+0xfa8138c4>
 4004250:	d9002c17 	ldw	r4,176(sp)
 4004254:	d9801e04 	addi	r6,sp,120
 4004258:	b80b883a 	mov	r5,r23
 400425c:	4009b1c0 	call	4009b1c <__sprint_r>
 4004260:	103a031e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 4004264:	d8c02017 	ldw	r3,128(sp)
 4004268:	da000404 	addi	r8,sp,16
 400426c:	003d9406 	br	40038c0 <__reset+0xfa8138c0>
 4004270:	01010074 	movhi	r4,1025
 4004274:	21148784 	addi	r4,r4,21022
 4004278:	d9002b15 	stw	r4,172(sp)
 400427c:	d9002b17 	ldw	r4,172(sp)
 4004280:	1c47883a 	add	r3,r3,r17
 4004284:	10800044 	addi	r2,r2,1
 4004288:	41000015 	stw	r4,0(r8)
 400428c:	44400115 	stw	r17,4(r8)
 4004290:	d8c02015 	stw	r3,128(sp)
 4004294:	d8801f15 	stw	r2,124(sp)
 4004298:	010001c4 	movi	r4,7
 400429c:	20bfd716 	blt	r4,r2,40041fc <__reset+0xfa8141fc>
 40042a0:	42000204 	addi	r8,r8,8
 40042a4:	003fdd06 	br	400421c <__reset+0xfa81421c>
 40042a8:	d9002c17 	ldw	r4,176(sp)
 40042ac:	d9801e04 	addi	r6,sp,120
 40042b0:	b80b883a 	mov	r5,r23
 40042b4:	4009b1c0 	call	4009b1c <__sprint_r>
 40042b8:	1039ed1e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40042bc:	d8802617 	ldw	r2,152(sp)
 40042c0:	d8c02017 	ldw	r3,128(sp)
 40042c4:	da000404 	addi	r8,sp,16
 40042c8:	003e1006 	br	4003b0c <__reset+0xfa813b0c>
 40042cc:	00800044 	movi	r2,1
 40042d0:	10803fcc 	andi	r2,r2,255
 40042d4:	00c00044 	movi	r3,1
 40042d8:	10fa3526 	beq	r2,r3,4002bb0 <__reset+0xfa812bb0>
 40042dc:	00c00084 	movi	r3,2
 40042e0:	10fbcb26 	beq	r2,r3,4003210 <__reset+0xfa813210>
 40042e4:	003a8f06 	br	4002d24 <__reset+0xfa812d24>
 40042e8:	01010074 	movhi	r4,1025
 40042ec:	21148b84 	addi	r4,r4,21038
 40042f0:	d9003515 	stw	r4,212(sp)
 40042f4:	003b7606 	br	40030d0 <__reset+0xfa8130d0>
 40042f8:	d8802917 	ldw	r2,164(sp)
 40042fc:	00c00184 	movi	r3,6
 4004300:	1880012e 	bgeu	r3,r2,4004308 <___vfprintf_internal_r+0x1ca0>
 4004304:	1805883a 	mov	r2,r3
 4004308:	d8802e15 	stw	r2,184(sp)
 400430c:	1000ef16 	blt	r2,zero,40046cc <___vfprintf_internal_r+0x2064>
 4004310:	04010074 	movhi	r16,1025
 4004314:	d8802a15 	stw	r2,168(sp)
 4004318:	dcc02d15 	stw	r19,180(sp)
 400431c:	d8002915 	stw	zero,164(sp)
 4004320:	d8003215 	stw	zero,200(sp)
 4004324:	84148504 	addi	r16,r16,21012
 4004328:	0039883a 	mov	fp,zero
 400432c:	003aa206 	br	4002db8 <__reset+0xfa812db8>
 4004330:	0021883a 	mov	r16,zero
 4004334:	003e0706 	br	4003b54 <__reset+0xfa813b54>
 4004338:	d9002c17 	ldw	r4,176(sp)
 400433c:	d9801e04 	addi	r6,sp,120
 4004340:	b80b883a 	mov	r5,r23
 4004344:	4009b1c0 	call	4009b1c <__sprint_r>
 4004348:	1039c91e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 400434c:	d8802617 	ldw	r2,152(sp)
 4004350:	d9403317 	ldw	r5,204(sp)
 4004354:	d8c02017 	ldw	r3,128(sp)
 4004358:	da000404 	addi	r8,sp,16
 400435c:	2885c83a 	sub	r2,r5,r2
 4004360:	003dfb06 	br	4003b50 <__reset+0xfa813b50>
 4004364:	9080004c 	andi	r2,r18,1
 4004368:	103e8f1e 	bne	r2,zero,4003da8 <__reset+0xfa813da8>
 400436c:	d8802117 	ldw	r2,132(sp)
 4004370:	003e9e06 	br	4003dec <__reset+0xfa813dec>
 4004374:	1025883a 	mov	r18,r2
 4004378:	0039883a 	mov	fp,zero
 400437c:	00800084 	movi	r2,2
 4004380:	003fd306 	br	40042d0 <__reset+0xfa8142d0>
 4004384:	07000b44 	movi	fp,45
 4004388:	df002785 	stb	fp,158(sp)
 400438c:	003a4006 	br	4002c90 <__reset+0xfa812c90>
 4004390:	00c00b44 	movi	r3,45
 4004394:	d8c02785 	stb	r3,158(sp)
 4004398:	d8802a15 	stw	r2,168(sp)
 400439c:	dc802b17 	ldw	r18,172(sp)
 40043a0:	d8002915 	stw	zero,164(sp)
 40043a4:	07000b44 	movi	fp,45
 40043a8:	003a8006 	br	4002dac <__reset+0xfa812dac>
 40043ac:	04010074 	movhi	r16,1025
 40043b0:	84147a04 	addi	r16,r16,20968
 40043b4:	003f4706 	br	40040d4 <__reset+0xfa8140d4>
 40043b8:	d8c02d17 	ldw	r3,180(sp)
 40043bc:	d9002f17 	ldw	r4,188(sp)
 40043c0:	18800017 	ldw	r2,0(r3)
 40043c4:	18c00104 	addi	r3,r3,4
 40043c8:	d8c02d15 	stw	r3,180(sp)
 40043cc:	11000015 	stw	r4,0(r2)
 40043d0:	0038dd06 	br	4002748 <__reset+0xfa812748>
 40043d4:	dd802617 	ldw	r22,152(sp)
 40043d8:	00bfff44 	movi	r2,-3
 40043dc:	b0801c16 	blt	r22,r2,4004450 <___vfprintf_internal_r+0x1de8>
 40043e0:	d9402917 	ldw	r5,164(sp)
 40043e4:	2d801a16 	blt	r5,r22,4004450 <___vfprintf_internal_r+0x1de8>
 40043e8:	dd803215 	stw	r22,200(sp)
 40043ec:	003e8906 	br	4003e14 <__reset+0xfa813e14>
 40043f0:	01010074 	movhi	r4,1025
 40043f4:	21148784 	addi	r4,r4,21022
 40043f8:	d9002b15 	stw	r4,172(sp)
 40043fc:	003c9106 	br	4003644 <__reset+0xfa813644>
 4004400:	e005883a 	mov	r2,fp
 4004404:	003e7906 	br	4003dec <__reset+0xfa813dec>
 4004408:	d9402917 	ldw	r5,164(sp)
 400440c:	df002783 	ldbu	fp,158(sp)
 4004410:	dcc02d15 	stw	r19,180(sp)
 4004414:	d9402a15 	stw	r5,168(sp)
 4004418:	d9402e15 	stw	r5,184(sp)
 400441c:	d8002915 	stw	zero,164(sp)
 4004420:	d8003215 	stw	zero,200(sp)
 4004424:	003a5d06 	br	4002d9c <__reset+0xfa812d9c>
 4004428:	9080004c 	andi	r2,r18,1
 400442c:	0039883a 	mov	fp,zero
 4004430:	10000426 	beq	r2,zero,4004444 <___vfprintf_internal_r+0x1ddc>
 4004434:	00800c04 	movi	r2,48
 4004438:	dc001dc4 	addi	r16,sp,119
 400443c:	d8801dc5 	stb	r2,119(sp)
 4004440:	003b8006 	br	4003244 <__reset+0xfa813244>
 4004444:	d8002e15 	stw	zero,184(sp)
 4004448:	dc001e04 	addi	r16,sp,120
 400444c:	003a4d06 	br	4002d84 <__reset+0xfa812d84>
 4004450:	8c7fff84 	addi	r17,r17,-2
 4004454:	b5bfffc4 	addi	r22,r22,-1
 4004458:	dd802615 	stw	r22,152(sp)
 400445c:	dc4022c5 	stb	r17,139(sp)
 4004460:	b000bf16 	blt	r22,zero,4004760 <___vfprintf_internal_r+0x20f8>
 4004464:	00800ac4 	movi	r2,43
 4004468:	d8802305 	stb	r2,140(sp)
 400446c:	00800244 	movi	r2,9
 4004470:	15807016 	blt	r2,r22,4004634 <___vfprintf_internal_r+0x1fcc>
 4004474:	00800c04 	movi	r2,48
 4004478:	b5800c04 	addi	r22,r22,48
 400447c:	d8802345 	stb	r2,141(sp)
 4004480:	dd802385 	stb	r22,142(sp)
 4004484:	d88023c4 	addi	r2,sp,143
 4004488:	df0022c4 	addi	fp,sp,139
 400448c:	d8c03317 	ldw	r3,204(sp)
 4004490:	1739c83a 	sub	fp,r2,fp
 4004494:	d9003317 	ldw	r4,204(sp)
 4004498:	e0c7883a 	add	r3,fp,r3
 400449c:	df003a15 	stw	fp,232(sp)
 40044a0:	d8c02e15 	stw	r3,184(sp)
 40044a4:	00800044 	movi	r2,1
 40044a8:	1100b30e 	bge	r2,r4,4004778 <___vfprintf_internal_r+0x2110>
 40044ac:	d8c02e17 	ldw	r3,184(sp)
 40044b0:	18c00044 	addi	r3,r3,1
 40044b4:	d8c02e15 	stw	r3,184(sp)
 40044b8:	1805883a 	mov	r2,r3
 40044bc:	1800ac16 	blt	r3,zero,4004770 <___vfprintf_internal_r+0x2108>
 40044c0:	d8003215 	stw	zero,200(sp)
 40044c4:	003e5d06 	br	4003e3c <__reset+0xfa813e3c>
 40044c8:	d9002c17 	ldw	r4,176(sp)
 40044cc:	d9801e04 	addi	r6,sp,120
 40044d0:	b80b883a 	mov	r5,r23
 40044d4:	4009b1c0 	call	4009b1c <__sprint_r>
 40044d8:	1039651e 	bne	r2,zero,4002a70 <__reset+0xfa812a70>
 40044dc:	dc402617 	ldw	r17,152(sp)
 40044e0:	d8c02017 	ldw	r3,128(sp)
 40044e4:	d8801f17 	ldw	r2,124(sp)
 40044e8:	da000404 	addi	r8,sp,16
 40044ec:	003ed606 	br	4004048 <__reset+0xfa814048>
 40044f0:	582b883a 	mov	r21,r11
 40044f4:	d8002915 	stw	zero,164(sp)
 40044f8:	0038bd06 	br	40027f0 <__reset+0xfa8127f0>
 40044fc:	d8802917 	ldw	r2,164(sp)
 4004500:	103e071e 	bne	r2,zero,4003d20 <__reset+0xfa813d20>
 4004504:	dc002915 	stw	r16,164(sp)
 4004508:	003e0506 	br	4003d20 <__reset+0xfa813d20>
 400450c:	d9002917 	ldw	r4,164(sp)
 4004510:	20c00044 	addi	r3,r4,1
 4004514:	003e0f06 	br	4003d54 <__reset+0xfa813d54>
 4004518:	01400184 	movi	r5,6
 400451c:	d9402915 	stw	r5,164(sp)
 4004520:	003dff06 	br	4003d20 <__reset+0xfa813d20>
 4004524:	d8802104 	addi	r2,sp,132
 4004528:	d8800315 	stw	r2,12(sp)
 400452c:	d8802504 	addi	r2,sp,148
 4004530:	d8800215 	stw	r2,8(sp)
 4004534:	d8802604 	addi	r2,sp,152
 4004538:	d8800115 	stw	r2,4(sp)
 400453c:	d8802917 	ldw	r2,164(sp)
 4004540:	d9403617 	ldw	r5,216(sp)
 4004544:	d9002c17 	ldw	r4,176(sp)
 4004548:	d8800015 	stw	r2,0(sp)
 400454c:	01c000c4 	movi	r7,3
 4004550:	980d883a 	mov	r6,r19
 4004554:	da003d15 	stw	r8,244(sp)
 4004558:	4004c8c0 	call	4004c8c <_dtoa_r>
 400455c:	d8c02917 	ldw	r3,164(sp)
 4004560:	da003d17 	ldw	r8,244(sp)
 4004564:	1021883a 	mov	r16,r2
 4004568:	10f9883a 	add	fp,r2,r3
 400456c:	81000007 	ldb	r4,0(r16)
 4004570:	00800c04 	movi	r2,48
 4004574:	20805e26 	beq	r4,r2,40046f0 <___vfprintf_internal_r+0x2088>
 4004578:	d8c02617 	ldw	r3,152(sp)
 400457c:	e0f9883a 	add	fp,fp,r3
 4004580:	003e0a06 	br	4003dac <__reset+0xfa813dac>
 4004584:	00c00b44 	movi	r3,45
 4004588:	24e0003c 	xorhi	r19,r4,32768
 400458c:	d8c02a05 	stb	r3,168(sp)
 4004590:	003de906 	br	4003d38 <__reset+0xfa813d38>
 4004594:	d8c03217 	ldw	r3,200(sp)
 4004598:	00c07a0e 	bge	zero,r3,4004784 <___vfprintf_internal_r+0x211c>
 400459c:	00800044 	movi	r2,1
 40045a0:	d9003317 	ldw	r4,204(sp)
 40045a4:	1105883a 	add	r2,r2,r4
 40045a8:	d8802e15 	stw	r2,184(sp)
 40045ac:	10004e16 	blt	r2,zero,40046e8 <___vfprintf_internal_r+0x2080>
 40045b0:	044019c4 	movi	r17,103
 40045b4:	003e2106 	br	4003e3c <__reset+0xfa813e3c>
 40045b8:	d9002917 	ldw	r4,164(sp)
 40045bc:	d8802104 	addi	r2,sp,132
 40045c0:	d8800315 	stw	r2,12(sp)
 40045c4:	d9000015 	stw	r4,0(sp)
 40045c8:	d8802504 	addi	r2,sp,148
 40045cc:	d9403617 	ldw	r5,216(sp)
 40045d0:	d9002c17 	ldw	r4,176(sp)
 40045d4:	d8800215 	stw	r2,8(sp)
 40045d8:	d8802604 	addi	r2,sp,152
 40045dc:	d8800115 	stw	r2,4(sp)
 40045e0:	01c000c4 	movi	r7,3
 40045e4:	980d883a 	mov	r6,r19
 40045e8:	da003d15 	stw	r8,244(sp)
 40045ec:	4004c8c0 	call	4004c8c <_dtoa_r>
 40045f0:	d8c02917 	ldw	r3,164(sp)
 40045f4:	da003d17 	ldw	r8,244(sp)
 40045f8:	1021883a 	mov	r16,r2
 40045fc:	00801184 	movi	r2,70
 4004600:	80f9883a 	add	fp,r16,r3
 4004604:	88bfd926 	beq	r17,r2,400456c <__reset+0xfa81456c>
 4004608:	003de806 	br	4003dac <__reset+0xfa813dac>
 400460c:	d9002917 	ldw	r4,164(sp)
 4004610:	00c04d0e 	bge	zero,r3,4004748 <___vfprintf_internal_r+0x20e0>
 4004614:	2000441e 	bne	r4,zero,4004728 <___vfprintf_internal_r+0x20c0>
 4004618:	9480004c 	andi	r18,r18,1
 400461c:	9000421e 	bne	r18,zero,4004728 <___vfprintf_internal_r+0x20c0>
 4004620:	1805883a 	mov	r2,r3
 4004624:	18007016 	blt	r3,zero,40047e8 <___vfprintf_internal_r+0x2180>
 4004628:	d8c03217 	ldw	r3,200(sp)
 400462c:	d8c02e15 	stw	r3,184(sp)
 4004630:	003e0206 	br	4003e3c <__reset+0xfa813e3c>
 4004634:	df0022c4 	addi	fp,sp,139
 4004638:	dc002915 	stw	r16,164(sp)
 400463c:	4027883a 	mov	r19,r8
 4004640:	e021883a 	mov	r16,fp
 4004644:	b009883a 	mov	r4,r22
 4004648:	01400284 	movi	r5,10
 400464c:	400c4d00 	call	400c4d0 <__modsi3>
 4004650:	10800c04 	addi	r2,r2,48
 4004654:	843fffc4 	addi	r16,r16,-1
 4004658:	b009883a 	mov	r4,r22
 400465c:	01400284 	movi	r5,10
 4004660:	80800005 	stb	r2,0(r16)
 4004664:	400c44c0 	call	400c44c <__divsi3>
 4004668:	102d883a 	mov	r22,r2
 400466c:	00800244 	movi	r2,9
 4004670:	15bff416 	blt	r2,r22,4004644 <__reset+0xfa814644>
 4004674:	9811883a 	mov	r8,r19
 4004678:	b0800c04 	addi	r2,r22,48
 400467c:	8027883a 	mov	r19,r16
 4004680:	997fffc4 	addi	r5,r19,-1
 4004684:	98bfffc5 	stb	r2,-1(r19)
 4004688:	dc002917 	ldw	r16,164(sp)
 400468c:	2f006a2e 	bgeu	r5,fp,4004838 <___vfprintf_internal_r+0x21d0>
 4004690:	d9c02384 	addi	r7,sp,142
 4004694:	3ccfc83a 	sub	r7,r7,r19
 4004698:	d9002344 	addi	r4,sp,141
 400469c:	e1cf883a 	add	r7,fp,r7
 40046a0:	00000106 	br	40046a8 <___vfprintf_internal_r+0x2040>
 40046a4:	28800003 	ldbu	r2,0(r5)
 40046a8:	20800005 	stb	r2,0(r4)
 40046ac:	21000044 	addi	r4,r4,1
 40046b0:	29400044 	addi	r5,r5,1
 40046b4:	393ffb1e 	bne	r7,r4,40046a4 <__reset+0xfa8146a4>
 40046b8:	d8802304 	addi	r2,sp,140
 40046bc:	14c5c83a 	sub	r2,r2,r19
 40046c0:	d8c02344 	addi	r3,sp,141
 40046c4:	1885883a 	add	r2,r3,r2
 40046c8:	003f7006 	br	400448c <__reset+0xfa81448c>
 40046cc:	0005883a 	mov	r2,zero
 40046d0:	003f0f06 	br	4004310 <__reset+0xfa814310>
 40046d4:	d8c03217 	ldw	r3,200(sp)
 40046d8:	18c00044 	addi	r3,r3,1
 40046dc:	d8c02e15 	stw	r3,184(sp)
 40046e0:	1805883a 	mov	r2,r3
 40046e4:	183fb20e 	bge	r3,zero,40045b0 <__reset+0xfa8145b0>
 40046e8:	0005883a 	mov	r2,zero
 40046ec:	003fb006 	br	40045b0 <__reset+0xfa8145b0>
 40046f0:	d9003617 	ldw	r4,216(sp)
 40046f4:	000d883a 	mov	r6,zero
 40046f8:	000f883a 	mov	r7,zero
 40046fc:	980b883a 	mov	r5,r19
 4004700:	d8c03c15 	stw	r3,240(sp)
 4004704:	da003d15 	stw	r8,244(sp)
 4004708:	400d7940 	call	400d794 <__eqdf2>
 400470c:	d8c03c17 	ldw	r3,240(sp)
 4004710:	da003d17 	ldw	r8,244(sp)
 4004714:	103f9826 	beq	r2,zero,4004578 <__reset+0xfa814578>
 4004718:	00800044 	movi	r2,1
 400471c:	10c7c83a 	sub	r3,r2,r3
 4004720:	d8c02615 	stw	r3,152(sp)
 4004724:	003f9506 	br	400457c <__reset+0xfa81457c>
 4004728:	d9002917 	ldw	r4,164(sp)
 400472c:	d8c03217 	ldw	r3,200(sp)
 4004730:	20800044 	addi	r2,r4,1
 4004734:	1885883a 	add	r2,r3,r2
 4004738:	d8802e15 	stw	r2,184(sp)
 400473c:	103dbf0e 	bge	r2,zero,4003e3c <__reset+0xfa813e3c>
 4004740:	0005883a 	mov	r2,zero
 4004744:	003dbd06 	br	4003e3c <__reset+0xfa813e3c>
 4004748:	2000211e 	bne	r4,zero,40047d0 <___vfprintf_internal_r+0x2168>
 400474c:	9480004c 	andi	r18,r18,1
 4004750:	90001f1e 	bne	r18,zero,40047d0 <___vfprintf_internal_r+0x2168>
 4004754:	00800044 	movi	r2,1
 4004758:	d8802e15 	stw	r2,184(sp)
 400475c:	003db706 	br	4003e3c <__reset+0xfa813e3c>
 4004760:	00800b44 	movi	r2,45
 4004764:	05adc83a 	sub	r22,zero,r22
 4004768:	d8802305 	stb	r2,140(sp)
 400476c:	003f3f06 	br	400446c <__reset+0xfa81446c>
 4004770:	0005883a 	mov	r2,zero
 4004774:	003f5206 	br	40044c0 <__reset+0xfa8144c0>
 4004778:	90a4703a 	and	r18,r18,r2
 400477c:	903f4e26 	beq	r18,zero,40044b8 <__reset+0xfa8144b8>
 4004780:	003f4a06 	br	40044ac <__reset+0xfa8144ac>
 4004784:	00800084 	movi	r2,2
 4004788:	10c5c83a 	sub	r2,r2,r3
 400478c:	003f8406 	br	40045a0 <__reset+0xfa8145a0>
 4004790:	d8802d17 	ldw	r2,180(sp)
 4004794:	d9002d17 	ldw	r4,180(sp)
 4004798:	ac400043 	ldbu	r17,1(r21)
 400479c:	10800017 	ldw	r2,0(r2)
 40047a0:	582b883a 	mov	r21,r11
 40047a4:	d8802915 	stw	r2,164(sp)
 40047a8:	20800104 	addi	r2,r4,4
 40047ac:	d9002917 	ldw	r4,164(sp)
 40047b0:	d8802d15 	stw	r2,180(sp)
 40047b4:	203e7a0e 	bge	r4,zero,40041a0 <__reset+0xfa8141a0>
 40047b8:	8c403fcc 	andi	r17,r17,255
 40047bc:	00bfffc4 	movi	r2,-1
 40047c0:	8c40201c 	xori	r17,r17,128
 40047c4:	d8802915 	stw	r2,164(sp)
 40047c8:	8c7fe004 	addi	r17,r17,-128
 40047cc:	00380706 	br	40027ec <__reset+0xfa8127ec>
 40047d0:	d8c02917 	ldw	r3,164(sp)
 40047d4:	18c00084 	addi	r3,r3,2
 40047d8:	d8c02e15 	stw	r3,184(sp)
 40047dc:	1805883a 	mov	r2,r3
 40047e0:	183d960e 	bge	r3,zero,4003e3c <__reset+0xfa813e3c>
 40047e4:	003fd606 	br	4004740 <__reset+0xfa814740>
 40047e8:	0005883a 	mov	r2,zero
 40047ec:	003f8e06 	br	4004628 <__reset+0xfa814628>
 40047f0:	9080004c 	andi	r2,r18,1
 40047f4:	103f811e 	bne	r2,zero,40045fc <__reset+0xfa8145fc>
 40047f8:	d8802117 	ldw	r2,132(sp)
 40047fc:	1405c83a 	sub	r2,r2,r16
 4004800:	d8803315 	stw	r2,204(sp)
 4004804:	b47ef326 	beq	r22,r17,40043d4 <__reset+0xfa8143d4>
 4004808:	dd802617 	ldw	r22,152(sp)
 400480c:	003f1106 	br	4004454 <__reset+0xfa814454>
 4004810:	d9c02785 	stb	r7,158(sp)
 4004814:	00390406 	br	4002c28 <__reset+0xfa812c28>
 4004818:	d9c02785 	stb	r7,158(sp)
 400481c:	0038d306 	br	4002b6c <__reset+0xfa812b6c>
 4004820:	d9c02785 	stb	r7,158(sp)
 4004824:	003a6106 	br	40031ac <__reset+0xfa8131ac>
 4004828:	d9c02785 	stb	r7,158(sp)
 400482c:	003af806 	br	4003410 <__reset+0xfa813410>
 4004830:	0005883a 	mov	r2,zero
 4004834:	003d7e06 	br	4003e30 <__reset+0xfa813e30>
 4004838:	d8802344 	addi	r2,sp,141
 400483c:	003f1306 	br	400448c <__reset+0xfa81448c>
 4004840:	d9c02785 	stb	r7,158(sp)
 4004844:	00392306 	br	4002cd4 <__reset+0xfa812cd4>
 4004848:	d9c02785 	stb	r7,158(sp)
 400484c:	003aa906 	br	40032f4 <__reset+0xfa8132f4>
 4004850:	d9c02785 	stb	r7,158(sp)
 4004854:	003a3d06 	br	400314c <__reset+0xfa81314c>
 4004858:	d9c02785 	stb	r7,158(sp)
 400485c:	003aca06 	br	4003388 <__reset+0xfa813388>

04004860 <__vfprintf_internal>:
 4004860:	00810074 	movhi	r2,1025
 4004864:	109d0604 	addi	r2,r2,29720
 4004868:	300f883a 	mov	r7,r6
 400486c:	280d883a 	mov	r6,r5
 4004870:	200b883a 	mov	r5,r4
 4004874:	11000017 	ldw	r4,0(r2)
 4004878:	40026681 	jmpi	4002668 <___vfprintf_internal_r>

0400487c <__sbprintf>:
 400487c:	2880030b 	ldhu	r2,12(r5)
 4004880:	2ac01917 	ldw	r11,100(r5)
 4004884:	2a80038b 	ldhu	r10,14(r5)
 4004888:	2a400717 	ldw	r9,28(r5)
 400488c:	2a000917 	ldw	r8,36(r5)
 4004890:	defee204 	addi	sp,sp,-1144
 4004894:	00c10004 	movi	r3,1024
 4004898:	dc011a15 	stw	r16,1128(sp)
 400489c:	10bfff4c 	andi	r2,r2,65533
 40048a0:	2821883a 	mov	r16,r5
 40048a4:	d8cb883a 	add	r5,sp,r3
 40048a8:	dc811c15 	stw	r18,1136(sp)
 40048ac:	dc411b15 	stw	r17,1132(sp)
 40048b0:	dfc11d15 	stw	ra,1140(sp)
 40048b4:	2025883a 	mov	r18,r4
 40048b8:	d881030d 	sth	r2,1036(sp)
 40048bc:	dac11915 	stw	r11,1124(sp)
 40048c0:	da81038d 	sth	r10,1038(sp)
 40048c4:	da410715 	stw	r9,1052(sp)
 40048c8:	da010915 	stw	r8,1060(sp)
 40048cc:	dec10015 	stw	sp,1024(sp)
 40048d0:	dec10415 	stw	sp,1040(sp)
 40048d4:	d8c10215 	stw	r3,1032(sp)
 40048d8:	d8c10515 	stw	r3,1044(sp)
 40048dc:	d8010615 	stw	zero,1048(sp)
 40048e0:	40026680 	call	4002668 <___vfprintf_internal_r>
 40048e4:	1023883a 	mov	r17,r2
 40048e8:	10000416 	blt	r2,zero,40048fc <__sbprintf+0x80>
 40048ec:	d9410004 	addi	r5,sp,1024
 40048f0:	9009883a 	mov	r4,r18
 40048f4:	40065300 	call	4006530 <_fflush_r>
 40048f8:	10000d1e 	bne	r2,zero,4004930 <__sbprintf+0xb4>
 40048fc:	d881030b 	ldhu	r2,1036(sp)
 4004900:	1080100c 	andi	r2,r2,64
 4004904:	10000326 	beq	r2,zero,4004914 <__sbprintf+0x98>
 4004908:	8080030b 	ldhu	r2,12(r16)
 400490c:	10801014 	ori	r2,r2,64
 4004910:	8080030d 	sth	r2,12(r16)
 4004914:	8805883a 	mov	r2,r17
 4004918:	dfc11d17 	ldw	ra,1140(sp)
 400491c:	dc811c17 	ldw	r18,1136(sp)
 4004920:	dc411b17 	ldw	r17,1132(sp)
 4004924:	dc011a17 	ldw	r16,1128(sp)
 4004928:	dec11e04 	addi	sp,sp,1144
 400492c:	f800283a 	ret
 4004930:	047fffc4 	movi	r17,-1
 4004934:	003ff106 	br	40048fc <__reset+0xfa8148fc>

04004938 <__swsetup_r>:
 4004938:	00810074 	movhi	r2,1025
 400493c:	defffd04 	addi	sp,sp,-12
 4004940:	109d0604 	addi	r2,r2,29720
 4004944:	dc400115 	stw	r17,4(sp)
 4004948:	2023883a 	mov	r17,r4
 400494c:	11000017 	ldw	r4,0(r2)
 4004950:	dc000015 	stw	r16,0(sp)
 4004954:	dfc00215 	stw	ra,8(sp)
 4004958:	2821883a 	mov	r16,r5
 400495c:	20000226 	beq	r4,zero,4004968 <__swsetup_r+0x30>
 4004960:	20800e17 	ldw	r2,56(r4)
 4004964:	10003126 	beq	r2,zero,4004a2c <__swsetup_r+0xf4>
 4004968:	8080030b 	ldhu	r2,12(r16)
 400496c:	10c0020c 	andi	r3,r2,8
 4004970:	1009883a 	mov	r4,r2
 4004974:	18000f26 	beq	r3,zero,40049b4 <__swsetup_r+0x7c>
 4004978:	80c00417 	ldw	r3,16(r16)
 400497c:	18001526 	beq	r3,zero,40049d4 <__swsetup_r+0x9c>
 4004980:	1100004c 	andi	r4,r2,1
 4004984:	20001c1e 	bne	r4,zero,40049f8 <__swsetup_r+0xc0>
 4004988:	1080008c 	andi	r2,r2,2
 400498c:	1000291e 	bne	r2,zero,4004a34 <__swsetup_r+0xfc>
 4004990:	80800517 	ldw	r2,20(r16)
 4004994:	80800215 	stw	r2,8(r16)
 4004998:	18001c26 	beq	r3,zero,4004a0c <__swsetup_r+0xd4>
 400499c:	0005883a 	mov	r2,zero
 40049a0:	dfc00217 	ldw	ra,8(sp)
 40049a4:	dc400117 	ldw	r17,4(sp)
 40049a8:	dc000017 	ldw	r16,0(sp)
 40049ac:	dec00304 	addi	sp,sp,12
 40049b0:	f800283a 	ret
 40049b4:	2080040c 	andi	r2,r4,16
 40049b8:	10002e26 	beq	r2,zero,4004a74 <__swsetup_r+0x13c>
 40049bc:	2080010c 	andi	r2,r4,4
 40049c0:	10001e1e 	bne	r2,zero,4004a3c <__swsetup_r+0x104>
 40049c4:	80c00417 	ldw	r3,16(r16)
 40049c8:	20800214 	ori	r2,r4,8
 40049cc:	8080030d 	sth	r2,12(r16)
 40049d0:	183feb1e 	bne	r3,zero,4004980 <__reset+0xfa814980>
 40049d4:	1100a00c 	andi	r4,r2,640
 40049d8:	01408004 	movi	r5,512
 40049dc:	217fe826 	beq	r4,r5,4004980 <__reset+0xfa814980>
 40049e0:	800b883a 	mov	r5,r16
 40049e4:	8809883a 	mov	r4,r17
 40049e8:	40074b00 	call	40074b0 <__smakebuf_r>
 40049ec:	8080030b 	ldhu	r2,12(r16)
 40049f0:	80c00417 	ldw	r3,16(r16)
 40049f4:	003fe206 	br	4004980 <__reset+0xfa814980>
 40049f8:	80800517 	ldw	r2,20(r16)
 40049fc:	80000215 	stw	zero,8(r16)
 4004a00:	0085c83a 	sub	r2,zero,r2
 4004a04:	80800615 	stw	r2,24(r16)
 4004a08:	183fe41e 	bne	r3,zero,400499c <__reset+0xfa81499c>
 4004a0c:	80c0030b 	ldhu	r3,12(r16)
 4004a10:	0005883a 	mov	r2,zero
 4004a14:	1900200c 	andi	r4,r3,128
 4004a18:	203fe126 	beq	r4,zero,40049a0 <__reset+0xfa8149a0>
 4004a1c:	18c01014 	ori	r3,r3,64
 4004a20:	80c0030d 	sth	r3,12(r16)
 4004a24:	00bfffc4 	movi	r2,-1
 4004a28:	003fdd06 	br	40049a0 <__reset+0xfa8149a0>
 4004a2c:	400690c0 	call	400690c <__sinit>
 4004a30:	003fcd06 	br	4004968 <__reset+0xfa814968>
 4004a34:	0005883a 	mov	r2,zero
 4004a38:	003fd606 	br	4004994 <__reset+0xfa814994>
 4004a3c:	81400c17 	ldw	r5,48(r16)
 4004a40:	28000626 	beq	r5,zero,4004a5c <__swsetup_r+0x124>
 4004a44:	80801004 	addi	r2,r16,64
 4004a48:	28800326 	beq	r5,r2,4004a58 <__swsetup_r+0x120>
 4004a4c:	8809883a 	mov	r4,r17
 4004a50:	4006a800 	call	4006a80 <_free_r>
 4004a54:	8100030b 	ldhu	r4,12(r16)
 4004a58:	80000c15 	stw	zero,48(r16)
 4004a5c:	80c00417 	ldw	r3,16(r16)
 4004a60:	00bff6c4 	movi	r2,-37
 4004a64:	1108703a 	and	r4,r2,r4
 4004a68:	80000115 	stw	zero,4(r16)
 4004a6c:	80c00015 	stw	r3,0(r16)
 4004a70:	003fd506 	br	40049c8 <__reset+0xfa8149c8>
 4004a74:	00800244 	movi	r2,9
 4004a78:	88800015 	stw	r2,0(r17)
 4004a7c:	20801014 	ori	r2,r4,64
 4004a80:	8080030d 	sth	r2,12(r16)
 4004a84:	00bfffc4 	movi	r2,-1
 4004a88:	003fc506 	br	40049a0 <__reset+0xfa8149a0>

04004a8c <quorem>:
 4004a8c:	defff704 	addi	sp,sp,-36
 4004a90:	dc800215 	stw	r18,8(sp)
 4004a94:	20800417 	ldw	r2,16(r4)
 4004a98:	2c800417 	ldw	r18,16(r5)
 4004a9c:	dfc00815 	stw	ra,32(sp)
 4004aa0:	ddc00715 	stw	r23,28(sp)
 4004aa4:	dd800615 	stw	r22,24(sp)
 4004aa8:	dd400515 	stw	r21,20(sp)
 4004aac:	dd000415 	stw	r20,16(sp)
 4004ab0:	dcc00315 	stw	r19,12(sp)
 4004ab4:	dc400115 	stw	r17,4(sp)
 4004ab8:	dc000015 	stw	r16,0(sp)
 4004abc:	14807116 	blt	r2,r18,4004c84 <quorem+0x1f8>
 4004ac0:	94bfffc4 	addi	r18,r18,-1
 4004ac4:	94ad883a 	add	r22,r18,r18
 4004ac8:	b5ad883a 	add	r22,r22,r22
 4004acc:	2c400504 	addi	r17,r5,20
 4004ad0:	8da9883a 	add	r20,r17,r22
 4004ad4:	25400504 	addi	r21,r4,20
 4004ad8:	282f883a 	mov	r23,r5
 4004adc:	adad883a 	add	r22,r21,r22
 4004ae0:	a1400017 	ldw	r5,0(r20)
 4004ae4:	2021883a 	mov	r16,r4
 4004ae8:	b1000017 	ldw	r4,0(r22)
 4004aec:	29400044 	addi	r5,r5,1
 4004af0:	400c5440 	call	400c544 <__udivsi3>
 4004af4:	1027883a 	mov	r19,r2
 4004af8:	10002c26 	beq	r2,zero,4004bac <quorem+0x120>
 4004afc:	a813883a 	mov	r9,r21
 4004b00:	880b883a 	mov	r5,r17
 4004b04:	0009883a 	mov	r4,zero
 4004b08:	000d883a 	mov	r6,zero
 4004b0c:	2a000017 	ldw	r8,0(r5)
 4004b10:	49c00017 	ldw	r7,0(r9)
 4004b14:	29400104 	addi	r5,r5,4
 4004b18:	40bfffcc 	andi	r2,r8,65535
 4004b1c:	14c5383a 	mul	r2,r2,r19
 4004b20:	4010d43a 	srli	r8,r8,16
 4004b24:	38ffffcc 	andi	r3,r7,65535
 4004b28:	1105883a 	add	r2,r2,r4
 4004b2c:	1008d43a 	srli	r4,r2,16
 4004b30:	44d1383a 	mul	r8,r8,r19
 4004b34:	198d883a 	add	r6,r3,r6
 4004b38:	10ffffcc 	andi	r3,r2,65535
 4004b3c:	30c7c83a 	sub	r3,r6,r3
 4004b40:	380ed43a 	srli	r7,r7,16
 4004b44:	4105883a 	add	r2,r8,r4
 4004b48:	180dd43a 	srai	r6,r3,16
 4004b4c:	113fffcc 	andi	r4,r2,65535
 4004b50:	390fc83a 	sub	r7,r7,r4
 4004b54:	398d883a 	add	r6,r7,r6
 4004b58:	300e943a 	slli	r7,r6,16
 4004b5c:	18ffffcc 	andi	r3,r3,65535
 4004b60:	1008d43a 	srli	r4,r2,16
 4004b64:	38ceb03a 	or	r7,r7,r3
 4004b68:	49c00015 	stw	r7,0(r9)
 4004b6c:	300dd43a 	srai	r6,r6,16
 4004b70:	4a400104 	addi	r9,r9,4
 4004b74:	a17fe52e 	bgeu	r20,r5,4004b0c <__reset+0xfa814b0c>
 4004b78:	b0800017 	ldw	r2,0(r22)
 4004b7c:	10000b1e 	bne	r2,zero,4004bac <quorem+0x120>
 4004b80:	b0bfff04 	addi	r2,r22,-4
 4004b84:	a880082e 	bgeu	r21,r2,4004ba8 <quorem+0x11c>
 4004b88:	b0ffff17 	ldw	r3,-4(r22)
 4004b8c:	18000326 	beq	r3,zero,4004b9c <quorem+0x110>
 4004b90:	00000506 	br	4004ba8 <quorem+0x11c>
 4004b94:	10c00017 	ldw	r3,0(r2)
 4004b98:	1800031e 	bne	r3,zero,4004ba8 <quorem+0x11c>
 4004b9c:	10bfff04 	addi	r2,r2,-4
 4004ba0:	94bfffc4 	addi	r18,r18,-1
 4004ba4:	a8bffb36 	bltu	r21,r2,4004b94 <__reset+0xfa814b94>
 4004ba8:	84800415 	stw	r18,16(r16)
 4004bac:	b80b883a 	mov	r5,r23
 4004bb0:	8009883a 	mov	r4,r16
 4004bb4:	4008aa80 	call	4008aa8 <__mcmp>
 4004bb8:	10002616 	blt	r2,zero,4004c54 <quorem+0x1c8>
 4004bbc:	9cc00044 	addi	r19,r19,1
 4004bc0:	a805883a 	mov	r2,r21
 4004bc4:	000b883a 	mov	r5,zero
 4004bc8:	11000017 	ldw	r4,0(r2)
 4004bcc:	89800017 	ldw	r6,0(r17)
 4004bd0:	10800104 	addi	r2,r2,4
 4004bd4:	20ffffcc 	andi	r3,r4,65535
 4004bd8:	194b883a 	add	r5,r3,r5
 4004bdc:	30ffffcc 	andi	r3,r6,65535
 4004be0:	28c7c83a 	sub	r3,r5,r3
 4004be4:	300cd43a 	srli	r6,r6,16
 4004be8:	2008d43a 	srli	r4,r4,16
 4004bec:	180bd43a 	srai	r5,r3,16
 4004bf0:	18ffffcc 	andi	r3,r3,65535
 4004bf4:	2189c83a 	sub	r4,r4,r6
 4004bf8:	2149883a 	add	r4,r4,r5
 4004bfc:	200c943a 	slli	r6,r4,16
 4004c00:	8c400104 	addi	r17,r17,4
 4004c04:	200bd43a 	srai	r5,r4,16
 4004c08:	30c6b03a 	or	r3,r6,r3
 4004c0c:	10ffff15 	stw	r3,-4(r2)
 4004c10:	a47fed2e 	bgeu	r20,r17,4004bc8 <__reset+0xfa814bc8>
 4004c14:	9485883a 	add	r2,r18,r18
 4004c18:	1085883a 	add	r2,r2,r2
 4004c1c:	a887883a 	add	r3,r21,r2
 4004c20:	18800017 	ldw	r2,0(r3)
 4004c24:	10000b1e 	bne	r2,zero,4004c54 <quorem+0x1c8>
 4004c28:	18bfff04 	addi	r2,r3,-4
 4004c2c:	a880082e 	bgeu	r21,r2,4004c50 <quorem+0x1c4>
 4004c30:	18ffff17 	ldw	r3,-4(r3)
 4004c34:	18000326 	beq	r3,zero,4004c44 <quorem+0x1b8>
 4004c38:	00000506 	br	4004c50 <quorem+0x1c4>
 4004c3c:	10c00017 	ldw	r3,0(r2)
 4004c40:	1800031e 	bne	r3,zero,4004c50 <quorem+0x1c4>
 4004c44:	10bfff04 	addi	r2,r2,-4
 4004c48:	94bfffc4 	addi	r18,r18,-1
 4004c4c:	a8bffb36 	bltu	r21,r2,4004c3c <__reset+0xfa814c3c>
 4004c50:	84800415 	stw	r18,16(r16)
 4004c54:	9805883a 	mov	r2,r19
 4004c58:	dfc00817 	ldw	ra,32(sp)
 4004c5c:	ddc00717 	ldw	r23,28(sp)
 4004c60:	dd800617 	ldw	r22,24(sp)
 4004c64:	dd400517 	ldw	r21,20(sp)
 4004c68:	dd000417 	ldw	r20,16(sp)
 4004c6c:	dcc00317 	ldw	r19,12(sp)
 4004c70:	dc800217 	ldw	r18,8(sp)
 4004c74:	dc400117 	ldw	r17,4(sp)
 4004c78:	dc000017 	ldw	r16,0(sp)
 4004c7c:	dec00904 	addi	sp,sp,36
 4004c80:	f800283a 	ret
 4004c84:	0005883a 	mov	r2,zero
 4004c88:	003ff306 	br	4004c58 <__reset+0xfa814c58>

04004c8c <_dtoa_r>:
 4004c8c:	20801017 	ldw	r2,64(r4)
 4004c90:	deffde04 	addi	sp,sp,-136
 4004c94:	df002015 	stw	fp,128(sp)
 4004c98:	dcc01b15 	stw	r19,108(sp)
 4004c9c:	dc801a15 	stw	r18,104(sp)
 4004ca0:	dc401915 	stw	r17,100(sp)
 4004ca4:	dc001815 	stw	r16,96(sp)
 4004ca8:	dfc02115 	stw	ra,132(sp)
 4004cac:	ddc01f15 	stw	r23,124(sp)
 4004cb0:	dd801e15 	stw	r22,120(sp)
 4004cb4:	dd401d15 	stw	r21,116(sp)
 4004cb8:	dd001c15 	stw	r20,112(sp)
 4004cbc:	d9c00315 	stw	r7,12(sp)
 4004cc0:	2039883a 	mov	fp,r4
 4004cc4:	3023883a 	mov	r17,r6
 4004cc8:	2825883a 	mov	r18,r5
 4004ccc:	dc002417 	ldw	r16,144(sp)
 4004cd0:	3027883a 	mov	r19,r6
 4004cd4:	10000826 	beq	r2,zero,4004cf8 <_dtoa_r+0x6c>
 4004cd8:	21801117 	ldw	r6,68(r4)
 4004cdc:	00c00044 	movi	r3,1
 4004ce0:	100b883a 	mov	r5,r2
 4004ce4:	1986983a 	sll	r3,r3,r6
 4004ce8:	11800115 	stw	r6,4(r2)
 4004cec:	10c00215 	stw	r3,8(r2)
 4004cf0:	40082880 	call	4008288 <_Bfree>
 4004cf4:	e0001015 	stw	zero,64(fp)
 4004cf8:	88002e16 	blt	r17,zero,4004db4 <_dtoa_r+0x128>
 4004cfc:	80000015 	stw	zero,0(r16)
 4004d00:	889ffc2c 	andhi	r2,r17,32752
 4004d04:	00dffc34 	movhi	r3,32752
 4004d08:	10c01c26 	beq	r2,r3,4004d7c <_dtoa_r+0xf0>
 4004d0c:	000d883a 	mov	r6,zero
 4004d10:	000f883a 	mov	r7,zero
 4004d14:	9009883a 	mov	r4,r18
 4004d18:	980b883a 	mov	r5,r19
 4004d1c:	400d7940 	call	400d794 <__eqdf2>
 4004d20:	10002b1e 	bne	r2,zero,4004dd0 <_dtoa_r+0x144>
 4004d24:	d9c02317 	ldw	r7,140(sp)
 4004d28:	00800044 	movi	r2,1
 4004d2c:	38800015 	stw	r2,0(r7)
 4004d30:	d8802517 	ldw	r2,148(sp)
 4004d34:	10019e26 	beq	r2,zero,40053b0 <_dtoa_r+0x724>
 4004d38:	d8c02517 	ldw	r3,148(sp)
 4004d3c:	00810074 	movhi	r2,1025
 4004d40:	10948744 	addi	r2,r2,21021
 4004d44:	18800015 	stw	r2,0(r3)
 4004d48:	10bfffc4 	addi	r2,r2,-1
 4004d4c:	dfc02117 	ldw	ra,132(sp)
 4004d50:	df002017 	ldw	fp,128(sp)
 4004d54:	ddc01f17 	ldw	r23,124(sp)
 4004d58:	dd801e17 	ldw	r22,120(sp)
 4004d5c:	dd401d17 	ldw	r21,116(sp)
 4004d60:	dd001c17 	ldw	r20,112(sp)
 4004d64:	dcc01b17 	ldw	r19,108(sp)
 4004d68:	dc801a17 	ldw	r18,104(sp)
 4004d6c:	dc401917 	ldw	r17,100(sp)
 4004d70:	dc001817 	ldw	r16,96(sp)
 4004d74:	dec02204 	addi	sp,sp,136
 4004d78:	f800283a 	ret
 4004d7c:	d8c02317 	ldw	r3,140(sp)
 4004d80:	0089c3c4 	movi	r2,9999
 4004d84:	18800015 	stw	r2,0(r3)
 4004d88:	90017726 	beq	r18,zero,4005368 <_dtoa_r+0x6dc>
 4004d8c:	00810074 	movhi	r2,1025
 4004d90:	10949304 	addi	r2,r2,21068
 4004d94:	d9002517 	ldw	r4,148(sp)
 4004d98:	203fec26 	beq	r4,zero,4004d4c <__reset+0xfa814d4c>
 4004d9c:	10c000c7 	ldb	r3,3(r2)
 4004da0:	1801781e 	bne	r3,zero,4005384 <_dtoa_r+0x6f8>
 4004da4:	10c000c4 	addi	r3,r2,3
 4004da8:	d9802517 	ldw	r6,148(sp)
 4004dac:	30c00015 	stw	r3,0(r6)
 4004db0:	003fe606 	br	4004d4c <__reset+0xfa814d4c>
 4004db4:	04e00034 	movhi	r19,32768
 4004db8:	9cffffc4 	addi	r19,r19,-1
 4004dbc:	00800044 	movi	r2,1
 4004dc0:	8ce6703a 	and	r19,r17,r19
 4004dc4:	80800015 	stw	r2,0(r16)
 4004dc8:	9823883a 	mov	r17,r19
 4004dcc:	003fcc06 	br	4004d00 <__reset+0xfa814d00>
 4004dd0:	d8800204 	addi	r2,sp,8
 4004dd4:	d8800015 	stw	r2,0(sp)
 4004dd8:	d9c00104 	addi	r7,sp,4
 4004ddc:	900b883a 	mov	r5,r18
 4004de0:	980d883a 	mov	r6,r19
 4004de4:	e009883a 	mov	r4,fp
 4004de8:	8820d53a 	srli	r16,r17,20
 4004dec:	4008e740 	call	4008e74 <__d2b>
 4004df0:	d8800915 	stw	r2,36(sp)
 4004df4:	8001651e 	bne	r16,zero,400538c <_dtoa_r+0x700>
 4004df8:	dd800217 	ldw	r22,8(sp)
 4004dfc:	dc000117 	ldw	r16,4(sp)
 4004e00:	00800804 	movi	r2,32
 4004e04:	b421883a 	add	r16,r22,r16
 4004e08:	80c10c84 	addi	r3,r16,1074
 4004e0c:	10c2d10e 	bge	r2,r3,4005954 <_dtoa_r+0xcc8>
 4004e10:	00801004 	movi	r2,64
 4004e14:	81010484 	addi	r4,r16,1042
 4004e18:	10c7c83a 	sub	r3,r2,r3
 4004e1c:	9108d83a 	srl	r4,r18,r4
 4004e20:	88e2983a 	sll	r17,r17,r3
 4004e24:	2448b03a 	or	r4,r4,r17
 4004e28:	400eb5c0 	call	400eb5c <__floatunsidf>
 4004e2c:	017f8434 	movhi	r5,65040
 4004e30:	01800044 	movi	r6,1
 4004e34:	1009883a 	mov	r4,r2
 4004e38:	194b883a 	add	r5,r3,r5
 4004e3c:	843fffc4 	addi	r16,r16,-1
 4004e40:	d9801115 	stw	r6,68(sp)
 4004e44:	000d883a 	mov	r6,zero
 4004e48:	01cffe34 	movhi	r7,16376
 4004e4c:	400e1040 	call	400e104 <__subdf3>
 4004e50:	0198dbf4 	movhi	r6,25455
 4004e54:	01cff4f4 	movhi	r7,16339
 4004e58:	3190d844 	addi	r6,r6,17249
 4004e5c:	39e1e9c4 	addi	r7,r7,-30809
 4004e60:	1009883a 	mov	r4,r2
 4004e64:	180b883a 	mov	r5,r3
 4004e68:	400d9ec0 	call	400d9ec <__muldf3>
 4004e6c:	01a2d874 	movhi	r6,35681
 4004e70:	01cff1f4 	movhi	r7,16327
 4004e74:	31b22cc4 	addi	r6,r6,-14157
 4004e78:	39e28a04 	addi	r7,r7,-30168
 4004e7c:	180b883a 	mov	r5,r3
 4004e80:	1009883a 	mov	r4,r2
 4004e84:	400c6000 	call	400c600 <__adddf3>
 4004e88:	8009883a 	mov	r4,r16
 4004e8c:	1029883a 	mov	r20,r2
 4004e90:	1823883a 	mov	r17,r3
 4004e94:	400ea800 	call	400ea80 <__floatsidf>
 4004e98:	019427f4 	movhi	r6,20639
 4004e9c:	01cff4f4 	movhi	r7,16339
 4004ea0:	319e7ec4 	addi	r6,r6,31227
 4004ea4:	39d104c4 	addi	r7,r7,17427
 4004ea8:	1009883a 	mov	r4,r2
 4004eac:	180b883a 	mov	r5,r3
 4004eb0:	400d9ec0 	call	400d9ec <__muldf3>
 4004eb4:	100d883a 	mov	r6,r2
 4004eb8:	180f883a 	mov	r7,r3
 4004ebc:	a009883a 	mov	r4,r20
 4004ec0:	880b883a 	mov	r5,r17
 4004ec4:	400c6000 	call	400c600 <__adddf3>
 4004ec8:	1009883a 	mov	r4,r2
 4004ecc:	180b883a 	mov	r5,r3
 4004ed0:	1029883a 	mov	r20,r2
 4004ed4:	1823883a 	mov	r17,r3
 4004ed8:	400ea000 	call	400ea00 <__fixdfsi>
 4004edc:	000d883a 	mov	r6,zero
 4004ee0:	000f883a 	mov	r7,zero
 4004ee4:	a009883a 	mov	r4,r20
 4004ee8:	880b883a 	mov	r5,r17
 4004eec:	d8800515 	stw	r2,20(sp)
 4004ef0:	400d8f80 	call	400d8f8 <__ledf2>
 4004ef4:	10028716 	blt	r2,zero,4005914 <_dtoa_r+0xc88>
 4004ef8:	d8c00517 	ldw	r3,20(sp)
 4004efc:	00800584 	movi	r2,22
 4004f00:	10c27536 	bltu	r2,r3,40058d8 <_dtoa_r+0xc4c>
 4004f04:	180490fa 	slli	r2,r3,3
 4004f08:	00c10074 	movhi	r3,1025
 4004f0c:	18d4af04 	addi	r3,r3,21180
 4004f10:	1885883a 	add	r2,r3,r2
 4004f14:	11000017 	ldw	r4,0(r2)
 4004f18:	11400117 	ldw	r5,4(r2)
 4004f1c:	900d883a 	mov	r6,r18
 4004f20:	980f883a 	mov	r7,r19
 4004f24:	400d81c0 	call	400d81c <__gedf2>
 4004f28:	00828d0e 	bge	zero,r2,4005960 <_dtoa_r+0xcd4>
 4004f2c:	d9000517 	ldw	r4,20(sp)
 4004f30:	d8000e15 	stw	zero,56(sp)
 4004f34:	213fffc4 	addi	r4,r4,-1
 4004f38:	d9000515 	stw	r4,20(sp)
 4004f3c:	b42dc83a 	sub	r22,r22,r16
 4004f40:	b5bfffc4 	addi	r22,r22,-1
 4004f44:	b0026f16 	blt	r22,zero,4005904 <_dtoa_r+0xc78>
 4004f48:	d8000815 	stw	zero,32(sp)
 4004f4c:	d9c00517 	ldw	r7,20(sp)
 4004f50:	38026416 	blt	r7,zero,40058e4 <_dtoa_r+0xc58>
 4004f54:	b1ed883a 	add	r22,r22,r7
 4004f58:	d9c00d15 	stw	r7,52(sp)
 4004f5c:	d8000a15 	stw	zero,40(sp)
 4004f60:	d9800317 	ldw	r6,12(sp)
 4004f64:	00800244 	movi	r2,9
 4004f68:	11811436 	bltu	r2,r6,40053bc <_dtoa_r+0x730>
 4004f6c:	00800144 	movi	r2,5
 4004f70:	1184e10e 	bge	r2,r6,40062f8 <_dtoa_r+0x166c>
 4004f74:	31bfff04 	addi	r6,r6,-4
 4004f78:	d9800315 	stw	r6,12(sp)
 4004f7c:	0023883a 	mov	r17,zero
 4004f80:	d9800317 	ldw	r6,12(sp)
 4004f84:	008000c4 	movi	r2,3
 4004f88:	30836726 	beq	r6,r2,4005d28 <_dtoa_r+0x109c>
 4004f8c:	1183410e 	bge	r2,r6,4005c94 <_dtoa_r+0x1008>
 4004f90:	d9c00317 	ldw	r7,12(sp)
 4004f94:	00800104 	movi	r2,4
 4004f98:	38827c26 	beq	r7,r2,400598c <_dtoa_r+0xd00>
 4004f9c:	00800144 	movi	r2,5
 4004fa0:	3884c41e 	bne	r7,r2,40062b4 <_dtoa_r+0x1628>
 4004fa4:	00800044 	movi	r2,1
 4004fa8:	d8800b15 	stw	r2,44(sp)
 4004fac:	d8c00517 	ldw	r3,20(sp)
 4004fb0:	d9002217 	ldw	r4,136(sp)
 4004fb4:	1907883a 	add	r3,r3,r4
 4004fb8:	19800044 	addi	r6,r3,1
 4004fbc:	d8c00c15 	stw	r3,48(sp)
 4004fc0:	d9800615 	stw	r6,24(sp)
 4004fc4:	0183a40e 	bge	zero,r6,4005e58 <_dtoa_r+0x11cc>
 4004fc8:	d9800617 	ldw	r6,24(sp)
 4004fcc:	3021883a 	mov	r16,r6
 4004fd0:	e0001115 	stw	zero,68(fp)
 4004fd4:	008005c4 	movi	r2,23
 4004fd8:	1184c92e 	bgeu	r2,r6,4006300 <_dtoa_r+0x1674>
 4004fdc:	00c00044 	movi	r3,1
 4004fe0:	00800104 	movi	r2,4
 4004fe4:	1085883a 	add	r2,r2,r2
 4004fe8:	11000504 	addi	r4,r2,20
 4004fec:	180b883a 	mov	r5,r3
 4004ff0:	18c00044 	addi	r3,r3,1
 4004ff4:	313ffb2e 	bgeu	r6,r4,4004fe4 <__reset+0xfa814fe4>
 4004ff8:	e1401115 	stw	r5,68(fp)
 4004ffc:	e009883a 	mov	r4,fp
 4005000:	40081e00 	call	40081e0 <_Balloc>
 4005004:	d8800715 	stw	r2,28(sp)
 4005008:	e0801015 	stw	r2,64(fp)
 400500c:	00800384 	movi	r2,14
 4005010:	1400f736 	bltu	r2,r16,40053f0 <_dtoa_r+0x764>
 4005014:	8800f626 	beq	r17,zero,40053f0 <_dtoa_r+0x764>
 4005018:	d9c00517 	ldw	r7,20(sp)
 400501c:	01c39a0e 	bge	zero,r7,4005e88 <_dtoa_r+0x11fc>
 4005020:	388003cc 	andi	r2,r7,15
 4005024:	100490fa 	slli	r2,r2,3
 4005028:	382bd13a 	srai	r21,r7,4
 400502c:	00c10074 	movhi	r3,1025
 4005030:	18d4af04 	addi	r3,r3,21180
 4005034:	1885883a 	add	r2,r3,r2
 4005038:	a8c0040c 	andi	r3,r21,16
 400503c:	12400017 	ldw	r9,0(r2)
 4005040:	12000117 	ldw	r8,4(r2)
 4005044:	18037926 	beq	r3,zero,4005e2c <_dtoa_r+0x11a0>
 4005048:	00810074 	movhi	r2,1025
 400504c:	1094a504 	addi	r2,r2,21140
 4005050:	11800817 	ldw	r6,32(r2)
 4005054:	11c00917 	ldw	r7,36(r2)
 4005058:	9009883a 	mov	r4,r18
 400505c:	980b883a 	mov	r5,r19
 4005060:	da001715 	stw	r8,92(sp)
 4005064:	da401615 	stw	r9,88(sp)
 4005068:	400ceac0 	call	400ceac <__divdf3>
 400506c:	da001717 	ldw	r8,92(sp)
 4005070:	da401617 	ldw	r9,88(sp)
 4005074:	ad4003cc 	andi	r21,r21,15
 4005078:	040000c4 	movi	r16,3
 400507c:	1023883a 	mov	r17,r2
 4005080:	1829883a 	mov	r20,r3
 4005084:	a8001126 	beq	r21,zero,40050cc <_dtoa_r+0x440>
 4005088:	05c10074 	movhi	r23,1025
 400508c:	bdd4a504 	addi	r23,r23,21140
 4005090:	4805883a 	mov	r2,r9
 4005094:	4007883a 	mov	r3,r8
 4005098:	a980004c 	andi	r6,r21,1
 400509c:	1009883a 	mov	r4,r2
 40050a0:	a82bd07a 	srai	r21,r21,1
 40050a4:	180b883a 	mov	r5,r3
 40050a8:	30000426 	beq	r6,zero,40050bc <_dtoa_r+0x430>
 40050ac:	b9800017 	ldw	r6,0(r23)
 40050b0:	b9c00117 	ldw	r7,4(r23)
 40050b4:	84000044 	addi	r16,r16,1
 40050b8:	400d9ec0 	call	400d9ec <__muldf3>
 40050bc:	bdc00204 	addi	r23,r23,8
 40050c0:	a83ff51e 	bne	r21,zero,4005098 <__reset+0xfa815098>
 40050c4:	1013883a 	mov	r9,r2
 40050c8:	1811883a 	mov	r8,r3
 40050cc:	480d883a 	mov	r6,r9
 40050d0:	400f883a 	mov	r7,r8
 40050d4:	8809883a 	mov	r4,r17
 40050d8:	a00b883a 	mov	r5,r20
 40050dc:	400ceac0 	call	400ceac <__divdf3>
 40050e0:	d8800f15 	stw	r2,60(sp)
 40050e4:	d8c01015 	stw	r3,64(sp)
 40050e8:	d8c00e17 	ldw	r3,56(sp)
 40050ec:	18000626 	beq	r3,zero,4005108 <_dtoa_r+0x47c>
 40050f0:	d9000f17 	ldw	r4,60(sp)
 40050f4:	d9401017 	ldw	r5,64(sp)
 40050f8:	000d883a 	mov	r6,zero
 40050fc:	01cffc34 	movhi	r7,16368
 4005100:	400d8f80 	call	400d8f8 <__ledf2>
 4005104:	10040b16 	blt	r2,zero,4006134 <_dtoa_r+0x14a8>
 4005108:	8009883a 	mov	r4,r16
 400510c:	400ea800 	call	400ea80 <__floatsidf>
 4005110:	d9800f17 	ldw	r6,60(sp)
 4005114:	d9c01017 	ldw	r7,64(sp)
 4005118:	1009883a 	mov	r4,r2
 400511c:	180b883a 	mov	r5,r3
 4005120:	400d9ec0 	call	400d9ec <__muldf3>
 4005124:	000d883a 	mov	r6,zero
 4005128:	01d00734 	movhi	r7,16412
 400512c:	1009883a 	mov	r4,r2
 4005130:	180b883a 	mov	r5,r3
 4005134:	400c6000 	call	400c600 <__adddf3>
 4005138:	1021883a 	mov	r16,r2
 400513c:	d8800617 	ldw	r2,24(sp)
 4005140:	047f3034 	movhi	r17,64704
 4005144:	1c63883a 	add	r17,r3,r17
 4005148:	10031826 	beq	r2,zero,4005dac <_dtoa_r+0x1120>
 400514c:	d8c00517 	ldw	r3,20(sp)
 4005150:	db000617 	ldw	r12,24(sp)
 4005154:	d8c01315 	stw	r3,76(sp)
 4005158:	d9000b17 	ldw	r4,44(sp)
 400515c:	20038f26 	beq	r4,zero,4005f9c <_dtoa_r+0x1310>
 4005160:	60bfffc4 	addi	r2,r12,-1
 4005164:	100490fa 	slli	r2,r2,3
 4005168:	00c10074 	movhi	r3,1025
 400516c:	18d4af04 	addi	r3,r3,21180
 4005170:	1885883a 	add	r2,r3,r2
 4005174:	11800017 	ldw	r6,0(r2)
 4005178:	11c00117 	ldw	r7,4(r2)
 400517c:	d8800717 	ldw	r2,28(sp)
 4005180:	0009883a 	mov	r4,zero
 4005184:	014ff834 	movhi	r5,16352
 4005188:	db001615 	stw	r12,88(sp)
 400518c:	15c00044 	addi	r23,r2,1
 4005190:	400ceac0 	call	400ceac <__divdf3>
 4005194:	800d883a 	mov	r6,r16
 4005198:	880f883a 	mov	r7,r17
 400519c:	1009883a 	mov	r4,r2
 40051a0:	180b883a 	mov	r5,r3
 40051a4:	400e1040 	call	400e104 <__subdf3>
 40051a8:	d9401017 	ldw	r5,64(sp)
 40051ac:	d9000f17 	ldw	r4,60(sp)
 40051b0:	102b883a 	mov	r21,r2
 40051b4:	d8c01215 	stw	r3,72(sp)
 40051b8:	400ea000 	call	400ea00 <__fixdfsi>
 40051bc:	1009883a 	mov	r4,r2
 40051c0:	1029883a 	mov	r20,r2
 40051c4:	400ea800 	call	400ea80 <__floatsidf>
 40051c8:	d9000f17 	ldw	r4,60(sp)
 40051cc:	d9401017 	ldw	r5,64(sp)
 40051d0:	100d883a 	mov	r6,r2
 40051d4:	180f883a 	mov	r7,r3
 40051d8:	400e1040 	call	400e104 <__subdf3>
 40051dc:	1823883a 	mov	r17,r3
 40051e0:	d8c00717 	ldw	r3,28(sp)
 40051e4:	d9401217 	ldw	r5,72(sp)
 40051e8:	a2000c04 	addi	r8,r20,48
 40051ec:	1021883a 	mov	r16,r2
 40051f0:	1a000005 	stb	r8,0(r3)
 40051f4:	800d883a 	mov	r6,r16
 40051f8:	880f883a 	mov	r7,r17
 40051fc:	a809883a 	mov	r4,r21
 4005200:	4029883a 	mov	r20,r8
 4005204:	400d81c0 	call	400d81c <__gedf2>
 4005208:	00841d16 	blt	zero,r2,4006280 <_dtoa_r+0x15f4>
 400520c:	800d883a 	mov	r6,r16
 4005210:	880f883a 	mov	r7,r17
 4005214:	0009883a 	mov	r4,zero
 4005218:	014ffc34 	movhi	r5,16368
 400521c:	400e1040 	call	400e104 <__subdf3>
 4005220:	d9401217 	ldw	r5,72(sp)
 4005224:	100d883a 	mov	r6,r2
 4005228:	180f883a 	mov	r7,r3
 400522c:	a809883a 	mov	r4,r21
 4005230:	400d81c0 	call	400d81c <__gedf2>
 4005234:	db001617 	ldw	r12,88(sp)
 4005238:	00840e16 	blt	zero,r2,4006274 <_dtoa_r+0x15e8>
 400523c:	00800044 	movi	r2,1
 4005240:	13006b0e 	bge	r2,r12,40053f0 <_dtoa_r+0x764>
 4005244:	d9000717 	ldw	r4,28(sp)
 4005248:	dd800f15 	stw	r22,60(sp)
 400524c:	dcc01015 	stw	r19,64(sp)
 4005250:	2319883a 	add	r12,r4,r12
 4005254:	dcc01217 	ldw	r19,72(sp)
 4005258:	602d883a 	mov	r22,r12
 400525c:	dc801215 	stw	r18,72(sp)
 4005260:	b825883a 	mov	r18,r23
 4005264:	00000906 	br	400528c <_dtoa_r+0x600>
 4005268:	400e1040 	call	400e104 <__subdf3>
 400526c:	a80d883a 	mov	r6,r21
 4005270:	980f883a 	mov	r7,r19
 4005274:	1009883a 	mov	r4,r2
 4005278:	180b883a 	mov	r5,r3
 400527c:	400d8f80 	call	400d8f8 <__ledf2>
 4005280:	1003e816 	blt	r2,zero,4006224 <_dtoa_r+0x1598>
 4005284:	b825883a 	mov	r18,r23
 4005288:	bd83e926 	beq	r23,r22,4006230 <_dtoa_r+0x15a4>
 400528c:	a809883a 	mov	r4,r21
 4005290:	980b883a 	mov	r5,r19
 4005294:	000d883a 	mov	r6,zero
 4005298:	01d00934 	movhi	r7,16420
 400529c:	400d9ec0 	call	400d9ec <__muldf3>
 40052a0:	000d883a 	mov	r6,zero
 40052a4:	01d00934 	movhi	r7,16420
 40052a8:	8009883a 	mov	r4,r16
 40052ac:	880b883a 	mov	r5,r17
 40052b0:	102b883a 	mov	r21,r2
 40052b4:	1827883a 	mov	r19,r3
 40052b8:	400d9ec0 	call	400d9ec <__muldf3>
 40052bc:	180b883a 	mov	r5,r3
 40052c0:	1009883a 	mov	r4,r2
 40052c4:	1821883a 	mov	r16,r3
 40052c8:	1023883a 	mov	r17,r2
 40052cc:	400ea000 	call	400ea00 <__fixdfsi>
 40052d0:	1009883a 	mov	r4,r2
 40052d4:	1029883a 	mov	r20,r2
 40052d8:	400ea800 	call	400ea80 <__floatsidf>
 40052dc:	8809883a 	mov	r4,r17
 40052e0:	800b883a 	mov	r5,r16
 40052e4:	100d883a 	mov	r6,r2
 40052e8:	180f883a 	mov	r7,r3
 40052ec:	400e1040 	call	400e104 <__subdf3>
 40052f0:	a5000c04 	addi	r20,r20,48
 40052f4:	a80d883a 	mov	r6,r21
 40052f8:	980f883a 	mov	r7,r19
 40052fc:	1009883a 	mov	r4,r2
 4005300:	180b883a 	mov	r5,r3
 4005304:	95000005 	stb	r20,0(r18)
 4005308:	1021883a 	mov	r16,r2
 400530c:	1823883a 	mov	r17,r3
 4005310:	400d8f80 	call	400d8f8 <__ledf2>
 4005314:	bdc00044 	addi	r23,r23,1
 4005318:	800d883a 	mov	r6,r16
 400531c:	880f883a 	mov	r7,r17
 4005320:	0009883a 	mov	r4,zero
 4005324:	014ffc34 	movhi	r5,16368
 4005328:	103fcf0e 	bge	r2,zero,4005268 <__reset+0xfa815268>
 400532c:	d8c01317 	ldw	r3,76(sp)
 4005330:	d8c00515 	stw	r3,20(sp)
 4005334:	d9400917 	ldw	r5,36(sp)
 4005338:	e009883a 	mov	r4,fp
 400533c:	40082880 	call	4008288 <_Bfree>
 4005340:	d9000517 	ldw	r4,20(sp)
 4005344:	d9802317 	ldw	r6,140(sp)
 4005348:	d9c02517 	ldw	r7,148(sp)
 400534c:	b8000005 	stb	zero,0(r23)
 4005350:	20800044 	addi	r2,r4,1
 4005354:	30800015 	stw	r2,0(r6)
 4005358:	3802aa26 	beq	r7,zero,4005e04 <_dtoa_r+0x1178>
 400535c:	3dc00015 	stw	r23,0(r7)
 4005360:	d8800717 	ldw	r2,28(sp)
 4005364:	003e7906 	br	4004d4c <__reset+0xfa814d4c>
 4005368:	00800434 	movhi	r2,16
 400536c:	10bfffc4 	addi	r2,r2,-1
 4005370:	88a2703a 	and	r17,r17,r2
 4005374:	883e851e 	bne	r17,zero,4004d8c <__reset+0xfa814d8c>
 4005378:	00810074 	movhi	r2,1025
 400537c:	10949004 	addi	r2,r2,21056
 4005380:	003e8406 	br	4004d94 <__reset+0xfa814d94>
 4005384:	10c00204 	addi	r3,r2,8
 4005388:	003e8706 	br	4004da8 <__reset+0xfa814da8>
 400538c:	01400434 	movhi	r5,16
 4005390:	297fffc4 	addi	r5,r5,-1
 4005394:	994a703a 	and	r5,r19,r5
 4005398:	9009883a 	mov	r4,r18
 400539c:	843f0044 	addi	r16,r16,-1023
 40053a0:	294ffc34 	orhi	r5,r5,16368
 40053a4:	dd800217 	ldw	r22,8(sp)
 40053a8:	d8001115 	stw	zero,68(sp)
 40053ac:	003ea506 	br	4004e44 <__reset+0xfa814e44>
 40053b0:	00810074 	movhi	r2,1025
 40053b4:	10948704 	addi	r2,r2,21020
 40053b8:	003e6406 	br	4004d4c <__reset+0xfa814d4c>
 40053bc:	e0001115 	stw	zero,68(fp)
 40053c0:	000b883a 	mov	r5,zero
 40053c4:	e009883a 	mov	r4,fp
 40053c8:	40081e00 	call	40081e0 <_Balloc>
 40053cc:	01bfffc4 	movi	r6,-1
 40053d0:	01c00044 	movi	r7,1
 40053d4:	d8800715 	stw	r2,28(sp)
 40053d8:	d9800c15 	stw	r6,48(sp)
 40053dc:	e0801015 	stw	r2,64(fp)
 40053e0:	d8000315 	stw	zero,12(sp)
 40053e4:	d9c00b15 	stw	r7,44(sp)
 40053e8:	d9800615 	stw	r6,24(sp)
 40053ec:	d8002215 	stw	zero,136(sp)
 40053f0:	d8800117 	ldw	r2,4(sp)
 40053f4:	10008916 	blt	r2,zero,400561c <_dtoa_r+0x990>
 40053f8:	d9000517 	ldw	r4,20(sp)
 40053fc:	00c00384 	movi	r3,14
 4005400:	19008616 	blt	r3,r4,400561c <_dtoa_r+0x990>
 4005404:	200490fa 	slli	r2,r4,3
 4005408:	00c10074 	movhi	r3,1025
 400540c:	d9802217 	ldw	r6,136(sp)
 4005410:	18d4af04 	addi	r3,r3,21180
 4005414:	1885883a 	add	r2,r3,r2
 4005418:	14000017 	ldw	r16,0(r2)
 400541c:	14400117 	ldw	r17,4(r2)
 4005420:	30016316 	blt	r6,zero,40059b0 <_dtoa_r+0xd24>
 4005424:	800d883a 	mov	r6,r16
 4005428:	880f883a 	mov	r7,r17
 400542c:	9009883a 	mov	r4,r18
 4005430:	980b883a 	mov	r5,r19
 4005434:	400ceac0 	call	400ceac <__divdf3>
 4005438:	180b883a 	mov	r5,r3
 400543c:	1009883a 	mov	r4,r2
 4005440:	400ea000 	call	400ea00 <__fixdfsi>
 4005444:	1009883a 	mov	r4,r2
 4005448:	102b883a 	mov	r21,r2
 400544c:	400ea800 	call	400ea80 <__floatsidf>
 4005450:	800d883a 	mov	r6,r16
 4005454:	880f883a 	mov	r7,r17
 4005458:	1009883a 	mov	r4,r2
 400545c:	180b883a 	mov	r5,r3
 4005460:	400d9ec0 	call	400d9ec <__muldf3>
 4005464:	100d883a 	mov	r6,r2
 4005468:	180f883a 	mov	r7,r3
 400546c:	9009883a 	mov	r4,r18
 4005470:	980b883a 	mov	r5,r19
 4005474:	400e1040 	call	400e104 <__subdf3>
 4005478:	d9c00717 	ldw	r7,28(sp)
 400547c:	1009883a 	mov	r4,r2
 4005480:	a8800c04 	addi	r2,r21,48
 4005484:	38800005 	stb	r2,0(r7)
 4005488:	3dc00044 	addi	r23,r7,1
 400548c:	d9c00617 	ldw	r7,24(sp)
 4005490:	01800044 	movi	r6,1
 4005494:	180b883a 	mov	r5,r3
 4005498:	2005883a 	mov	r2,r4
 400549c:	39803826 	beq	r7,r6,4005580 <_dtoa_r+0x8f4>
 40054a0:	000d883a 	mov	r6,zero
 40054a4:	01d00934 	movhi	r7,16420
 40054a8:	400d9ec0 	call	400d9ec <__muldf3>
 40054ac:	000d883a 	mov	r6,zero
 40054b0:	000f883a 	mov	r7,zero
 40054b4:	1009883a 	mov	r4,r2
 40054b8:	180b883a 	mov	r5,r3
 40054bc:	1025883a 	mov	r18,r2
 40054c0:	1827883a 	mov	r19,r3
 40054c4:	400d7940 	call	400d794 <__eqdf2>
 40054c8:	103f9a26 	beq	r2,zero,4005334 <__reset+0xfa815334>
 40054cc:	d9c00617 	ldw	r7,24(sp)
 40054d0:	d8c00717 	ldw	r3,28(sp)
 40054d4:	b829883a 	mov	r20,r23
 40054d8:	38bfffc4 	addi	r2,r7,-1
 40054dc:	18ad883a 	add	r22,r3,r2
 40054e0:	00000a06 	br	400550c <_dtoa_r+0x880>
 40054e4:	400d9ec0 	call	400d9ec <__muldf3>
 40054e8:	000d883a 	mov	r6,zero
 40054ec:	000f883a 	mov	r7,zero
 40054f0:	1009883a 	mov	r4,r2
 40054f4:	180b883a 	mov	r5,r3
 40054f8:	1025883a 	mov	r18,r2
 40054fc:	1827883a 	mov	r19,r3
 4005500:	b829883a 	mov	r20,r23
 4005504:	400d7940 	call	400d794 <__eqdf2>
 4005508:	103f8a26 	beq	r2,zero,4005334 <__reset+0xfa815334>
 400550c:	800d883a 	mov	r6,r16
 4005510:	880f883a 	mov	r7,r17
 4005514:	9009883a 	mov	r4,r18
 4005518:	980b883a 	mov	r5,r19
 400551c:	400ceac0 	call	400ceac <__divdf3>
 4005520:	180b883a 	mov	r5,r3
 4005524:	1009883a 	mov	r4,r2
 4005528:	400ea000 	call	400ea00 <__fixdfsi>
 400552c:	1009883a 	mov	r4,r2
 4005530:	102b883a 	mov	r21,r2
 4005534:	400ea800 	call	400ea80 <__floatsidf>
 4005538:	800d883a 	mov	r6,r16
 400553c:	880f883a 	mov	r7,r17
 4005540:	1009883a 	mov	r4,r2
 4005544:	180b883a 	mov	r5,r3
 4005548:	400d9ec0 	call	400d9ec <__muldf3>
 400554c:	100d883a 	mov	r6,r2
 4005550:	180f883a 	mov	r7,r3
 4005554:	9009883a 	mov	r4,r18
 4005558:	980b883a 	mov	r5,r19
 400555c:	400e1040 	call	400e104 <__subdf3>
 4005560:	aa000c04 	addi	r8,r21,48
 4005564:	a2000005 	stb	r8,0(r20)
 4005568:	000d883a 	mov	r6,zero
 400556c:	01d00934 	movhi	r7,16420
 4005570:	1009883a 	mov	r4,r2
 4005574:	180b883a 	mov	r5,r3
 4005578:	a5c00044 	addi	r23,r20,1
 400557c:	b53fd91e 	bne	r22,r20,40054e4 <__reset+0xfa8154e4>
 4005580:	100d883a 	mov	r6,r2
 4005584:	180f883a 	mov	r7,r3
 4005588:	1009883a 	mov	r4,r2
 400558c:	180b883a 	mov	r5,r3
 4005590:	400c6000 	call	400c600 <__adddf3>
 4005594:	100d883a 	mov	r6,r2
 4005598:	180f883a 	mov	r7,r3
 400559c:	8009883a 	mov	r4,r16
 40055a0:	880b883a 	mov	r5,r17
 40055a4:	1027883a 	mov	r19,r2
 40055a8:	1825883a 	mov	r18,r3
 40055ac:	400d8f80 	call	400d8f8 <__ledf2>
 40055b0:	10000816 	blt	r2,zero,40055d4 <_dtoa_r+0x948>
 40055b4:	980d883a 	mov	r6,r19
 40055b8:	900f883a 	mov	r7,r18
 40055bc:	8009883a 	mov	r4,r16
 40055c0:	880b883a 	mov	r5,r17
 40055c4:	400d7940 	call	400d794 <__eqdf2>
 40055c8:	103f5a1e 	bne	r2,zero,4005334 <__reset+0xfa815334>
 40055cc:	ad40004c 	andi	r21,r21,1
 40055d0:	a83f5826 	beq	r21,zero,4005334 <__reset+0xfa815334>
 40055d4:	bd3fffc3 	ldbu	r20,-1(r23)
 40055d8:	b8bfffc4 	addi	r2,r23,-1
 40055dc:	1007883a 	mov	r3,r2
 40055e0:	01400e44 	movi	r5,57
 40055e4:	d9800717 	ldw	r6,28(sp)
 40055e8:	00000506 	br	4005600 <_dtoa_r+0x974>
 40055ec:	18ffffc4 	addi	r3,r3,-1
 40055f0:	11824726 	beq	r2,r6,4005f10 <_dtoa_r+0x1284>
 40055f4:	1d000003 	ldbu	r20,0(r3)
 40055f8:	102f883a 	mov	r23,r2
 40055fc:	10bfffc4 	addi	r2,r2,-1
 4005600:	a1003fcc 	andi	r4,r20,255
 4005604:	2100201c 	xori	r4,r4,128
 4005608:	213fe004 	addi	r4,r4,-128
 400560c:	217ff726 	beq	r4,r5,40055ec <__reset+0xfa8155ec>
 4005610:	a2000044 	addi	r8,r20,1
 4005614:	12000005 	stb	r8,0(r2)
 4005618:	003f4606 	br	4005334 <__reset+0xfa815334>
 400561c:	d9000b17 	ldw	r4,44(sp)
 4005620:	2000c826 	beq	r4,zero,4005944 <_dtoa_r+0xcb8>
 4005624:	d9800317 	ldw	r6,12(sp)
 4005628:	00c00044 	movi	r3,1
 400562c:	1980f90e 	bge	r3,r6,4005a14 <_dtoa_r+0xd88>
 4005630:	d8800617 	ldw	r2,24(sp)
 4005634:	d8c00a17 	ldw	r3,40(sp)
 4005638:	157fffc4 	addi	r21,r2,-1
 400563c:	1d41f316 	blt	r3,r21,4005e0c <_dtoa_r+0x1180>
 4005640:	1d6bc83a 	sub	r21,r3,r21
 4005644:	d9c00617 	ldw	r7,24(sp)
 4005648:	3802aa16 	blt	r7,zero,40060f4 <_dtoa_r+0x1468>
 400564c:	dd000817 	ldw	r20,32(sp)
 4005650:	d8800617 	ldw	r2,24(sp)
 4005654:	d8c00817 	ldw	r3,32(sp)
 4005658:	01400044 	movi	r5,1
 400565c:	e009883a 	mov	r4,fp
 4005660:	1887883a 	add	r3,r3,r2
 4005664:	d8c00815 	stw	r3,32(sp)
 4005668:	b0ad883a 	add	r22,r22,r2
 400566c:	40085ec0 	call	40085ec <__i2b>
 4005670:	1023883a 	mov	r17,r2
 4005674:	a0000826 	beq	r20,zero,4005698 <_dtoa_r+0xa0c>
 4005678:	0580070e 	bge	zero,r22,4005698 <_dtoa_r+0xa0c>
 400567c:	a005883a 	mov	r2,r20
 4005680:	b500b916 	blt	r22,r20,4005968 <_dtoa_r+0xcdc>
 4005684:	d9000817 	ldw	r4,32(sp)
 4005688:	a0a9c83a 	sub	r20,r20,r2
 400568c:	b0adc83a 	sub	r22,r22,r2
 4005690:	2089c83a 	sub	r4,r4,r2
 4005694:	d9000815 	stw	r4,32(sp)
 4005698:	d9800a17 	ldw	r6,40(sp)
 400569c:	0181810e 	bge	zero,r6,4005ca4 <_dtoa_r+0x1018>
 40056a0:	d9c00b17 	ldw	r7,44(sp)
 40056a4:	3800b326 	beq	r7,zero,4005974 <_dtoa_r+0xce8>
 40056a8:	a800b226 	beq	r21,zero,4005974 <_dtoa_r+0xce8>
 40056ac:	880b883a 	mov	r5,r17
 40056b0:	a80d883a 	mov	r6,r21
 40056b4:	e009883a 	mov	r4,fp
 40056b8:	40088200 	call	4008820 <__pow5mult>
 40056bc:	d9800917 	ldw	r6,36(sp)
 40056c0:	100b883a 	mov	r5,r2
 40056c4:	e009883a 	mov	r4,fp
 40056c8:	1023883a 	mov	r17,r2
 40056cc:	40086280 	call	4008628 <__multiply>
 40056d0:	1021883a 	mov	r16,r2
 40056d4:	d8800a17 	ldw	r2,40(sp)
 40056d8:	d9400917 	ldw	r5,36(sp)
 40056dc:	e009883a 	mov	r4,fp
 40056e0:	1545c83a 	sub	r2,r2,r21
 40056e4:	d8800a15 	stw	r2,40(sp)
 40056e8:	40082880 	call	4008288 <_Bfree>
 40056ec:	d8c00a17 	ldw	r3,40(sp)
 40056f0:	18009f1e 	bne	r3,zero,4005970 <_dtoa_r+0xce4>
 40056f4:	05c00044 	movi	r23,1
 40056f8:	e009883a 	mov	r4,fp
 40056fc:	b80b883a 	mov	r5,r23
 4005700:	40085ec0 	call	40085ec <__i2b>
 4005704:	d9000d17 	ldw	r4,52(sp)
 4005708:	102b883a 	mov	r21,r2
 400570c:	2000ce26 	beq	r4,zero,4005a48 <_dtoa_r+0xdbc>
 4005710:	200d883a 	mov	r6,r4
 4005714:	100b883a 	mov	r5,r2
 4005718:	e009883a 	mov	r4,fp
 400571c:	40088200 	call	4008820 <__pow5mult>
 4005720:	d9800317 	ldw	r6,12(sp)
 4005724:	102b883a 	mov	r21,r2
 4005728:	b981810e 	bge	r23,r6,4005d30 <_dtoa_r+0x10a4>
 400572c:	0027883a 	mov	r19,zero
 4005730:	a8800417 	ldw	r2,16(r21)
 4005734:	05c00804 	movi	r23,32
 4005738:	10800104 	addi	r2,r2,4
 400573c:	1085883a 	add	r2,r2,r2
 4005740:	1085883a 	add	r2,r2,r2
 4005744:	a885883a 	add	r2,r21,r2
 4005748:	11000017 	ldw	r4,0(r2)
 400574c:	40084d40 	call	40084d4 <__hi0bits>
 4005750:	b885c83a 	sub	r2,r23,r2
 4005754:	1585883a 	add	r2,r2,r22
 4005758:	108007cc 	andi	r2,r2,31
 400575c:	1000b326 	beq	r2,zero,4005a2c <_dtoa_r+0xda0>
 4005760:	00c00804 	movi	r3,32
 4005764:	1887c83a 	sub	r3,r3,r2
 4005768:	01000104 	movi	r4,4
 400576c:	20c2cd0e 	bge	r4,r3,40062a4 <_dtoa_r+0x1618>
 4005770:	00c00704 	movi	r3,28
 4005774:	1885c83a 	sub	r2,r3,r2
 4005778:	d8c00817 	ldw	r3,32(sp)
 400577c:	a0a9883a 	add	r20,r20,r2
 4005780:	b0ad883a 	add	r22,r22,r2
 4005784:	1887883a 	add	r3,r3,r2
 4005788:	d8c00815 	stw	r3,32(sp)
 400578c:	d9800817 	ldw	r6,32(sp)
 4005790:	0180040e 	bge	zero,r6,40057a4 <_dtoa_r+0xb18>
 4005794:	800b883a 	mov	r5,r16
 4005798:	e009883a 	mov	r4,fp
 400579c:	40089600 	call	4008960 <__lshift>
 40057a0:	1021883a 	mov	r16,r2
 40057a4:	0580050e 	bge	zero,r22,40057bc <_dtoa_r+0xb30>
 40057a8:	a80b883a 	mov	r5,r21
 40057ac:	b00d883a 	mov	r6,r22
 40057b0:	e009883a 	mov	r4,fp
 40057b4:	40089600 	call	4008960 <__lshift>
 40057b8:	102b883a 	mov	r21,r2
 40057bc:	d9c00e17 	ldw	r7,56(sp)
 40057c0:	3801211e 	bne	r7,zero,4005c48 <_dtoa_r+0xfbc>
 40057c4:	d9800617 	ldw	r6,24(sp)
 40057c8:	0181380e 	bge	zero,r6,4005cac <_dtoa_r+0x1020>
 40057cc:	d8c00b17 	ldw	r3,44(sp)
 40057d0:	1800ab1e 	bne	r3,zero,4005a80 <_dtoa_r+0xdf4>
 40057d4:	dc800717 	ldw	r18,28(sp)
 40057d8:	dcc00617 	ldw	r19,24(sp)
 40057dc:	9029883a 	mov	r20,r18
 40057e0:	00000206 	br	40057ec <_dtoa_r+0xb60>
 40057e4:	40082b00 	call	40082b0 <__multadd>
 40057e8:	1021883a 	mov	r16,r2
 40057ec:	a80b883a 	mov	r5,r21
 40057f0:	8009883a 	mov	r4,r16
 40057f4:	4004a8c0 	call	4004a8c <quorem>
 40057f8:	10800c04 	addi	r2,r2,48
 40057fc:	90800005 	stb	r2,0(r18)
 4005800:	94800044 	addi	r18,r18,1
 4005804:	9507c83a 	sub	r3,r18,r20
 4005808:	000f883a 	mov	r7,zero
 400580c:	01800284 	movi	r6,10
 4005810:	800b883a 	mov	r5,r16
 4005814:	e009883a 	mov	r4,fp
 4005818:	1cfff216 	blt	r3,r19,40057e4 <__reset+0xfa8157e4>
 400581c:	1011883a 	mov	r8,r2
 4005820:	d8800617 	ldw	r2,24(sp)
 4005824:	0082370e 	bge	zero,r2,4006104 <_dtoa_r+0x1478>
 4005828:	d9000717 	ldw	r4,28(sp)
 400582c:	0025883a 	mov	r18,zero
 4005830:	20af883a 	add	r23,r4,r2
 4005834:	01800044 	movi	r6,1
 4005838:	800b883a 	mov	r5,r16
 400583c:	e009883a 	mov	r4,fp
 4005840:	da001715 	stw	r8,92(sp)
 4005844:	40089600 	call	4008960 <__lshift>
 4005848:	a80b883a 	mov	r5,r21
 400584c:	1009883a 	mov	r4,r2
 4005850:	d8800915 	stw	r2,36(sp)
 4005854:	4008aa80 	call	4008aa8 <__mcmp>
 4005858:	da001717 	ldw	r8,92(sp)
 400585c:	0081800e 	bge	zero,r2,4005e60 <_dtoa_r+0x11d4>
 4005860:	b93fffc3 	ldbu	r4,-1(r23)
 4005864:	b8bfffc4 	addi	r2,r23,-1
 4005868:	1007883a 	mov	r3,r2
 400586c:	01800e44 	movi	r6,57
 4005870:	d9c00717 	ldw	r7,28(sp)
 4005874:	00000506 	br	400588c <_dtoa_r+0xc00>
 4005878:	18ffffc4 	addi	r3,r3,-1
 400587c:	11c12326 	beq	r2,r7,4005d0c <_dtoa_r+0x1080>
 4005880:	19000003 	ldbu	r4,0(r3)
 4005884:	102f883a 	mov	r23,r2
 4005888:	10bfffc4 	addi	r2,r2,-1
 400588c:	21403fcc 	andi	r5,r4,255
 4005890:	2940201c 	xori	r5,r5,128
 4005894:	297fe004 	addi	r5,r5,-128
 4005898:	29bff726 	beq	r5,r6,4005878 <__reset+0xfa815878>
 400589c:	21000044 	addi	r4,r4,1
 40058a0:	11000005 	stb	r4,0(r2)
 40058a4:	a80b883a 	mov	r5,r21
 40058a8:	e009883a 	mov	r4,fp
 40058ac:	40082880 	call	4008288 <_Bfree>
 40058b0:	883ea026 	beq	r17,zero,4005334 <__reset+0xfa815334>
 40058b4:	90000426 	beq	r18,zero,40058c8 <_dtoa_r+0xc3c>
 40058b8:	94400326 	beq	r18,r17,40058c8 <_dtoa_r+0xc3c>
 40058bc:	900b883a 	mov	r5,r18
 40058c0:	e009883a 	mov	r4,fp
 40058c4:	40082880 	call	4008288 <_Bfree>
 40058c8:	880b883a 	mov	r5,r17
 40058cc:	e009883a 	mov	r4,fp
 40058d0:	40082880 	call	4008288 <_Bfree>
 40058d4:	003e9706 	br	4005334 <__reset+0xfa815334>
 40058d8:	01800044 	movi	r6,1
 40058dc:	d9800e15 	stw	r6,56(sp)
 40058e0:	003d9606 	br	4004f3c <__reset+0xfa814f3c>
 40058e4:	d8800817 	ldw	r2,32(sp)
 40058e8:	d8c00517 	ldw	r3,20(sp)
 40058ec:	d8000d15 	stw	zero,52(sp)
 40058f0:	10c5c83a 	sub	r2,r2,r3
 40058f4:	00c9c83a 	sub	r4,zero,r3
 40058f8:	d8800815 	stw	r2,32(sp)
 40058fc:	d9000a15 	stw	r4,40(sp)
 4005900:	003d9706 	br	4004f60 <__reset+0xfa814f60>
 4005904:	05adc83a 	sub	r22,zero,r22
 4005908:	dd800815 	stw	r22,32(sp)
 400590c:	002d883a 	mov	r22,zero
 4005910:	003d8e06 	br	4004f4c <__reset+0xfa814f4c>
 4005914:	d9000517 	ldw	r4,20(sp)
 4005918:	400ea800 	call	400ea80 <__floatsidf>
 400591c:	100d883a 	mov	r6,r2
 4005920:	180f883a 	mov	r7,r3
 4005924:	a009883a 	mov	r4,r20
 4005928:	880b883a 	mov	r5,r17
 400592c:	400d7940 	call	400d794 <__eqdf2>
 4005930:	103d7126 	beq	r2,zero,4004ef8 <__reset+0xfa814ef8>
 4005934:	d9c00517 	ldw	r7,20(sp)
 4005938:	39ffffc4 	addi	r7,r7,-1
 400593c:	d9c00515 	stw	r7,20(sp)
 4005940:	003d6d06 	br	4004ef8 <__reset+0xfa814ef8>
 4005944:	dd400a17 	ldw	r21,40(sp)
 4005948:	dd000817 	ldw	r20,32(sp)
 400594c:	0023883a 	mov	r17,zero
 4005950:	003f4806 	br	4005674 <__reset+0xfa815674>
 4005954:	10e3c83a 	sub	r17,r2,r3
 4005958:	9448983a 	sll	r4,r18,r17
 400595c:	003d3206 	br	4004e28 <__reset+0xfa814e28>
 4005960:	d8000e15 	stw	zero,56(sp)
 4005964:	003d7506 	br	4004f3c <__reset+0xfa814f3c>
 4005968:	b005883a 	mov	r2,r22
 400596c:	003f4506 	br	4005684 <__reset+0xfa815684>
 4005970:	dc000915 	stw	r16,36(sp)
 4005974:	d9800a17 	ldw	r6,40(sp)
 4005978:	d9400917 	ldw	r5,36(sp)
 400597c:	e009883a 	mov	r4,fp
 4005980:	40088200 	call	4008820 <__pow5mult>
 4005984:	1021883a 	mov	r16,r2
 4005988:	003f5a06 	br	40056f4 <__reset+0xfa8156f4>
 400598c:	01c00044 	movi	r7,1
 4005990:	d9c00b15 	stw	r7,44(sp)
 4005994:	d8802217 	ldw	r2,136(sp)
 4005998:	0081280e 	bge	zero,r2,4005e3c <_dtoa_r+0x11b0>
 400599c:	100d883a 	mov	r6,r2
 40059a0:	1021883a 	mov	r16,r2
 40059a4:	d8800c15 	stw	r2,48(sp)
 40059a8:	d8800615 	stw	r2,24(sp)
 40059ac:	003d8806 	br	4004fd0 <__reset+0xfa814fd0>
 40059b0:	d8800617 	ldw	r2,24(sp)
 40059b4:	00be9b16 	blt	zero,r2,4005424 <__reset+0xfa815424>
 40059b8:	10010f1e 	bne	r2,zero,4005df8 <_dtoa_r+0x116c>
 40059bc:	880b883a 	mov	r5,r17
 40059c0:	000d883a 	mov	r6,zero
 40059c4:	01d00534 	movhi	r7,16404
 40059c8:	8009883a 	mov	r4,r16
 40059cc:	400d9ec0 	call	400d9ec <__muldf3>
 40059d0:	900d883a 	mov	r6,r18
 40059d4:	980f883a 	mov	r7,r19
 40059d8:	1009883a 	mov	r4,r2
 40059dc:	180b883a 	mov	r5,r3
 40059e0:	400d81c0 	call	400d81c <__gedf2>
 40059e4:	002b883a 	mov	r21,zero
 40059e8:	0023883a 	mov	r17,zero
 40059ec:	1000bf16 	blt	r2,zero,4005cec <_dtoa_r+0x1060>
 40059f0:	d9802217 	ldw	r6,136(sp)
 40059f4:	ddc00717 	ldw	r23,28(sp)
 40059f8:	018c303a 	nor	r6,zero,r6
 40059fc:	d9800515 	stw	r6,20(sp)
 4005a00:	a80b883a 	mov	r5,r21
 4005a04:	e009883a 	mov	r4,fp
 4005a08:	40082880 	call	4008288 <_Bfree>
 4005a0c:	883e4926 	beq	r17,zero,4005334 <__reset+0xfa815334>
 4005a10:	003fad06 	br	40058c8 <__reset+0xfa8158c8>
 4005a14:	d9c01117 	ldw	r7,68(sp)
 4005a18:	3801bc26 	beq	r7,zero,400610c <_dtoa_r+0x1480>
 4005a1c:	10810cc4 	addi	r2,r2,1075
 4005a20:	dd400a17 	ldw	r21,40(sp)
 4005a24:	dd000817 	ldw	r20,32(sp)
 4005a28:	003f0a06 	br	4005654 <__reset+0xfa815654>
 4005a2c:	00800704 	movi	r2,28
 4005a30:	d9000817 	ldw	r4,32(sp)
 4005a34:	a0a9883a 	add	r20,r20,r2
 4005a38:	b0ad883a 	add	r22,r22,r2
 4005a3c:	2089883a 	add	r4,r4,r2
 4005a40:	d9000815 	stw	r4,32(sp)
 4005a44:	003f5106 	br	400578c <__reset+0xfa81578c>
 4005a48:	d8c00317 	ldw	r3,12(sp)
 4005a4c:	b8c1fc0e 	bge	r23,r3,4006240 <_dtoa_r+0x15b4>
 4005a50:	0027883a 	mov	r19,zero
 4005a54:	b805883a 	mov	r2,r23
 4005a58:	003f3e06 	br	4005754 <__reset+0xfa815754>
 4005a5c:	880b883a 	mov	r5,r17
 4005a60:	e009883a 	mov	r4,fp
 4005a64:	000f883a 	mov	r7,zero
 4005a68:	01800284 	movi	r6,10
 4005a6c:	40082b00 	call	40082b0 <__multadd>
 4005a70:	d9000c17 	ldw	r4,48(sp)
 4005a74:	1023883a 	mov	r17,r2
 4005a78:	0102040e 	bge	zero,r4,400628c <_dtoa_r+0x1600>
 4005a7c:	d9000615 	stw	r4,24(sp)
 4005a80:	0500050e 	bge	zero,r20,4005a98 <_dtoa_r+0xe0c>
 4005a84:	880b883a 	mov	r5,r17
 4005a88:	a00d883a 	mov	r6,r20
 4005a8c:	e009883a 	mov	r4,fp
 4005a90:	40089600 	call	4008960 <__lshift>
 4005a94:	1023883a 	mov	r17,r2
 4005a98:	9801241e 	bne	r19,zero,4005f2c <_dtoa_r+0x12a0>
 4005a9c:	8829883a 	mov	r20,r17
 4005aa0:	d9000617 	ldw	r4,24(sp)
 4005aa4:	dcc00717 	ldw	r19,28(sp)
 4005aa8:	9480004c 	andi	r18,r18,1
 4005aac:	20bfffc4 	addi	r2,r4,-1
 4005ab0:	9885883a 	add	r2,r19,r2
 4005ab4:	d8800415 	stw	r2,16(sp)
 4005ab8:	dc800615 	stw	r18,24(sp)
 4005abc:	a80b883a 	mov	r5,r21
 4005ac0:	8009883a 	mov	r4,r16
 4005ac4:	4004a8c0 	call	4004a8c <quorem>
 4005ac8:	880b883a 	mov	r5,r17
 4005acc:	8009883a 	mov	r4,r16
 4005ad0:	102f883a 	mov	r23,r2
 4005ad4:	4008aa80 	call	4008aa8 <__mcmp>
 4005ad8:	a80b883a 	mov	r5,r21
 4005adc:	a00d883a 	mov	r6,r20
 4005ae0:	e009883a 	mov	r4,fp
 4005ae4:	102d883a 	mov	r22,r2
 4005ae8:	4008b080 	call	4008b08 <__mdiff>
 4005aec:	1007883a 	mov	r3,r2
 4005af0:	10800317 	ldw	r2,12(r2)
 4005af4:	bc800c04 	addi	r18,r23,48
 4005af8:	180b883a 	mov	r5,r3
 4005afc:	10004e1e 	bne	r2,zero,4005c38 <_dtoa_r+0xfac>
 4005b00:	8009883a 	mov	r4,r16
 4005b04:	d8c01615 	stw	r3,88(sp)
 4005b08:	4008aa80 	call	4008aa8 <__mcmp>
 4005b0c:	d8c01617 	ldw	r3,88(sp)
 4005b10:	e009883a 	mov	r4,fp
 4005b14:	d8801615 	stw	r2,88(sp)
 4005b18:	180b883a 	mov	r5,r3
 4005b1c:	40082880 	call	4008288 <_Bfree>
 4005b20:	d8801617 	ldw	r2,88(sp)
 4005b24:	1000041e 	bne	r2,zero,4005b38 <_dtoa_r+0xeac>
 4005b28:	d9800317 	ldw	r6,12(sp)
 4005b2c:	3000021e 	bne	r6,zero,4005b38 <_dtoa_r+0xeac>
 4005b30:	d8c00617 	ldw	r3,24(sp)
 4005b34:	18003726 	beq	r3,zero,4005c14 <_dtoa_r+0xf88>
 4005b38:	b0002016 	blt	r22,zero,4005bbc <_dtoa_r+0xf30>
 4005b3c:	b000041e 	bne	r22,zero,4005b50 <_dtoa_r+0xec4>
 4005b40:	d9000317 	ldw	r4,12(sp)
 4005b44:	2000021e 	bne	r4,zero,4005b50 <_dtoa_r+0xec4>
 4005b48:	d8c00617 	ldw	r3,24(sp)
 4005b4c:	18001b26 	beq	r3,zero,4005bbc <_dtoa_r+0xf30>
 4005b50:	00810716 	blt	zero,r2,4005f70 <_dtoa_r+0x12e4>
 4005b54:	d8c00417 	ldw	r3,16(sp)
 4005b58:	9d800044 	addi	r22,r19,1
 4005b5c:	9c800005 	stb	r18,0(r19)
 4005b60:	b02f883a 	mov	r23,r22
 4005b64:	98c10626 	beq	r19,r3,4005f80 <_dtoa_r+0x12f4>
 4005b68:	800b883a 	mov	r5,r16
 4005b6c:	000f883a 	mov	r7,zero
 4005b70:	01800284 	movi	r6,10
 4005b74:	e009883a 	mov	r4,fp
 4005b78:	40082b00 	call	40082b0 <__multadd>
 4005b7c:	1021883a 	mov	r16,r2
 4005b80:	000f883a 	mov	r7,zero
 4005b84:	01800284 	movi	r6,10
 4005b88:	880b883a 	mov	r5,r17
 4005b8c:	e009883a 	mov	r4,fp
 4005b90:	8d002526 	beq	r17,r20,4005c28 <_dtoa_r+0xf9c>
 4005b94:	40082b00 	call	40082b0 <__multadd>
 4005b98:	a00b883a 	mov	r5,r20
 4005b9c:	000f883a 	mov	r7,zero
 4005ba0:	01800284 	movi	r6,10
 4005ba4:	e009883a 	mov	r4,fp
 4005ba8:	1023883a 	mov	r17,r2
 4005bac:	40082b00 	call	40082b0 <__multadd>
 4005bb0:	1029883a 	mov	r20,r2
 4005bb4:	b027883a 	mov	r19,r22
 4005bb8:	003fc006 	br	4005abc <__reset+0xfa815abc>
 4005bbc:	9011883a 	mov	r8,r18
 4005bc0:	00800e0e 	bge	zero,r2,4005bfc <_dtoa_r+0xf70>
 4005bc4:	800b883a 	mov	r5,r16
 4005bc8:	01800044 	movi	r6,1
 4005bcc:	e009883a 	mov	r4,fp
 4005bd0:	da001715 	stw	r8,92(sp)
 4005bd4:	40089600 	call	4008960 <__lshift>
 4005bd8:	a80b883a 	mov	r5,r21
 4005bdc:	1009883a 	mov	r4,r2
 4005be0:	1021883a 	mov	r16,r2
 4005be4:	4008aa80 	call	4008aa8 <__mcmp>
 4005be8:	da001717 	ldw	r8,92(sp)
 4005bec:	0081960e 	bge	zero,r2,4006248 <_dtoa_r+0x15bc>
 4005bf0:	00800e44 	movi	r2,57
 4005bf4:	40817026 	beq	r8,r2,40061b8 <_dtoa_r+0x152c>
 4005bf8:	ba000c44 	addi	r8,r23,49
 4005bfc:	8825883a 	mov	r18,r17
 4005c00:	9dc00044 	addi	r23,r19,1
 4005c04:	9a000005 	stb	r8,0(r19)
 4005c08:	a023883a 	mov	r17,r20
 4005c0c:	dc000915 	stw	r16,36(sp)
 4005c10:	003f2406 	br	40058a4 <__reset+0xfa8158a4>
 4005c14:	00800e44 	movi	r2,57
 4005c18:	9011883a 	mov	r8,r18
 4005c1c:	90816626 	beq	r18,r2,40061b8 <_dtoa_r+0x152c>
 4005c20:	05bff516 	blt	zero,r22,4005bf8 <__reset+0xfa815bf8>
 4005c24:	003ff506 	br	4005bfc <__reset+0xfa815bfc>
 4005c28:	40082b00 	call	40082b0 <__multadd>
 4005c2c:	1023883a 	mov	r17,r2
 4005c30:	1029883a 	mov	r20,r2
 4005c34:	003fdf06 	br	4005bb4 <__reset+0xfa815bb4>
 4005c38:	e009883a 	mov	r4,fp
 4005c3c:	40082880 	call	4008288 <_Bfree>
 4005c40:	00800044 	movi	r2,1
 4005c44:	003fbc06 	br	4005b38 <__reset+0xfa815b38>
 4005c48:	a80b883a 	mov	r5,r21
 4005c4c:	8009883a 	mov	r4,r16
 4005c50:	4008aa80 	call	4008aa8 <__mcmp>
 4005c54:	103edb0e 	bge	r2,zero,40057c4 <__reset+0xfa8157c4>
 4005c58:	800b883a 	mov	r5,r16
 4005c5c:	000f883a 	mov	r7,zero
 4005c60:	01800284 	movi	r6,10
 4005c64:	e009883a 	mov	r4,fp
 4005c68:	40082b00 	call	40082b0 <__multadd>
 4005c6c:	1021883a 	mov	r16,r2
 4005c70:	d8800517 	ldw	r2,20(sp)
 4005c74:	d8c00b17 	ldw	r3,44(sp)
 4005c78:	10bfffc4 	addi	r2,r2,-1
 4005c7c:	d8800515 	stw	r2,20(sp)
 4005c80:	183f761e 	bne	r3,zero,4005a5c <__reset+0xfa815a5c>
 4005c84:	d9000c17 	ldw	r4,48(sp)
 4005c88:	0101730e 	bge	zero,r4,4006258 <_dtoa_r+0x15cc>
 4005c8c:	d9000615 	stw	r4,24(sp)
 4005c90:	003ed006 	br	40057d4 <__reset+0xfa8157d4>
 4005c94:	00800084 	movi	r2,2
 4005c98:	3081861e 	bne	r6,r2,40062b4 <_dtoa_r+0x1628>
 4005c9c:	d8000b15 	stw	zero,44(sp)
 4005ca0:	003f3c06 	br	4005994 <__reset+0xfa815994>
 4005ca4:	dc000917 	ldw	r16,36(sp)
 4005ca8:	003e9206 	br	40056f4 <__reset+0xfa8156f4>
 4005cac:	d9c00317 	ldw	r7,12(sp)
 4005cb0:	00800084 	movi	r2,2
 4005cb4:	11fec50e 	bge	r2,r7,40057cc <__reset+0xfa8157cc>
 4005cb8:	d9000617 	ldw	r4,24(sp)
 4005cbc:	20013c1e 	bne	r4,zero,40061b0 <_dtoa_r+0x1524>
 4005cc0:	a80b883a 	mov	r5,r21
 4005cc4:	000f883a 	mov	r7,zero
 4005cc8:	01800144 	movi	r6,5
 4005ccc:	e009883a 	mov	r4,fp
 4005cd0:	40082b00 	call	40082b0 <__multadd>
 4005cd4:	100b883a 	mov	r5,r2
 4005cd8:	8009883a 	mov	r4,r16
 4005cdc:	102b883a 	mov	r21,r2
 4005ce0:	4008aa80 	call	4008aa8 <__mcmp>
 4005ce4:	dc000915 	stw	r16,36(sp)
 4005ce8:	00bf410e 	bge	zero,r2,40059f0 <__reset+0xfa8159f0>
 4005cec:	d9c00717 	ldw	r7,28(sp)
 4005cf0:	00800c44 	movi	r2,49
 4005cf4:	38800005 	stb	r2,0(r7)
 4005cf8:	d8800517 	ldw	r2,20(sp)
 4005cfc:	3dc00044 	addi	r23,r7,1
 4005d00:	10800044 	addi	r2,r2,1
 4005d04:	d8800515 	stw	r2,20(sp)
 4005d08:	003f3d06 	br	4005a00 <__reset+0xfa815a00>
 4005d0c:	d9800517 	ldw	r6,20(sp)
 4005d10:	d9c00717 	ldw	r7,28(sp)
 4005d14:	00800c44 	movi	r2,49
 4005d18:	31800044 	addi	r6,r6,1
 4005d1c:	d9800515 	stw	r6,20(sp)
 4005d20:	38800005 	stb	r2,0(r7)
 4005d24:	003edf06 	br	40058a4 <__reset+0xfa8158a4>
 4005d28:	d8000b15 	stw	zero,44(sp)
 4005d2c:	003c9f06 	br	4004fac <__reset+0xfa814fac>
 4005d30:	903e7e1e 	bne	r18,zero,400572c <__reset+0xfa81572c>
 4005d34:	00800434 	movhi	r2,16
 4005d38:	10bfffc4 	addi	r2,r2,-1
 4005d3c:	9884703a 	and	r2,r19,r2
 4005d40:	1000ea1e 	bne	r2,zero,40060ec <_dtoa_r+0x1460>
 4005d44:	9cdffc2c 	andhi	r19,r19,32752
 4005d48:	9800e826 	beq	r19,zero,40060ec <_dtoa_r+0x1460>
 4005d4c:	d9c00817 	ldw	r7,32(sp)
 4005d50:	b5800044 	addi	r22,r22,1
 4005d54:	04c00044 	movi	r19,1
 4005d58:	39c00044 	addi	r7,r7,1
 4005d5c:	d9c00815 	stw	r7,32(sp)
 4005d60:	d8800d17 	ldw	r2,52(sp)
 4005d64:	103e721e 	bne	r2,zero,4005730 <__reset+0xfa815730>
 4005d68:	00800044 	movi	r2,1
 4005d6c:	003e7906 	br	4005754 <__reset+0xfa815754>
 4005d70:	8009883a 	mov	r4,r16
 4005d74:	400ea800 	call	400ea80 <__floatsidf>
 4005d78:	d9800f17 	ldw	r6,60(sp)
 4005d7c:	d9c01017 	ldw	r7,64(sp)
 4005d80:	1009883a 	mov	r4,r2
 4005d84:	180b883a 	mov	r5,r3
 4005d88:	400d9ec0 	call	400d9ec <__muldf3>
 4005d8c:	000d883a 	mov	r6,zero
 4005d90:	01d00734 	movhi	r7,16412
 4005d94:	1009883a 	mov	r4,r2
 4005d98:	180b883a 	mov	r5,r3
 4005d9c:	400c6000 	call	400c600 <__adddf3>
 4005da0:	047f3034 	movhi	r17,64704
 4005da4:	1021883a 	mov	r16,r2
 4005da8:	1c63883a 	add	r17,r3,r17
 4005dac:	d9000f17 	ldw	r4,60(sp)
 4005db0:	d9401017 	ldw	r5,64(sp)
 4005db4:	000d883a 	mov	r6,zero
 4005db8:	01d00534 	movhi	r7,16404
 4005dbc:	400e1040 	call	400e104 <__subdf3>
 4005dc0:	800d883a 	mov	r6,r16
 4005dc4:	880f883a 	mov	r7,r17
 4005dc8:	1009883a 	mov	r4,r2
 4005dcc:	180b883a 	mov	r5,r3
 4005dd0:	102b883a 	mov	r21,r2
 4005dd4:	1829883a 	mov	r20,r3
 4005dd8:	400d81c0 	call	400d81c <__gedf2>
 4005ddc:	00806c16 	blt	zero,r2,4005f90 <_dtoa_r+0x1304>
 4005de0:	89e0003c 	xorhi	r7,r17,32768
 4005de4:	800d883a 	mov	r6,r16
 4005de8:	a809883a 	mov	r4,r21
 4005dec:	a00b883a 	mov	r5,r20
 4005df0:	400d8f80 	call	400d8f8 <__ledf2>
 4005df4:	103d7e0e 	bge	r2,zero,40053f0 <__reset+0xfa8153f0>
 4005df8:	002b883a 	mov	r21,zero
 4005dfc:	0023883a 	mov	r17,zero
 4005e00:	003efb06 	br	40059f0 <__reset+0xfa8159f0>
 4005e04:	d8800717 	ldw	r2,28(sp)
 4005e08:	003bd006 	br	4004d4c <__reset+0xfa814d4c>
 4005e0c:	d9000a17 	ldw	r4,40(sp)
 4005e10:	d9800d17 	ldw	r6,52(sp)
 4005e14:	dd400a15 	stw	r21,40(sp)
 4005e18:	a905c83a 	sub	r2,r21,r4
 4005e1c:	308d883a 	add	r6,r6,r2
 4005e20:	d9800d15 	stw	r6,52(sp)
 4005e24:	002b883a 	mov	r21,zero
 4005e28:	003e0606 	br	4005644 <__reset+0xfa815644>
 4005e2c:	9023883a 	mov	r17,r18
 4005e30:	9829883a 	mov	r20,r19
 4005e34:	04000084 	movi	r16,2
 4005e38:	003c9206 	br	4005084 <__reset+0xfa815084>
 4005e3c:	04000044 	movi	r16,1
 4005e40:	dc000c15 	stw	r16,48(sp)
 4005e44:	dc000615 	stw	r16,24(sp)
 4005e48:	dc002215 	stw	r16,136(sp)
 4005e4c:	e0001115 	stw	zero,68(fp)
 4005e50:	000b883a 	mov	r5,zero
 4005e54:	003c6906 	br	4004ffc <__reset+0xfa814ffc>
 4005e58:	3021883a 	mov	r16,r6
 4005e5c:	003ffb06 	br	4005e4c <__reset+0xfa815e4c>
 4005e60:	1000021e 	bne	r2,zero,4005e6c <_dtoa_r+0x11e0>
 4005e64:	4200004c 	andi	r8,r8,1
 4005e68:	403e7d1e 	bne	r8,zero,4005860 <__reset+0xfa815860>
 4005e6c:	01000c04 	movi	r4,48
 4005e70:	00000106 	br	4005e78 <_dtoa_r+0x11ec>
 4005e74:	102f883a 	mov	r23,r2
 4005e78:	b8bfffc4 	addi	r2,r23,-1
 4005e7c:	10c00007 	ldb	r3,0(r2)
 4005e80:	193ffc26 	beq	r3,r4,4005e74 <__reset+0xfa815e74>
 4005e84:	003e8706 	br	40058a4 <__reset+0xfa8158a4>
 4005e88:	d8800517 	ldw	r2,20(sp)
 4005e8c:	00a3c83a 	sub	r17,zero,r2
 4005e90:	8800a426 	beq	r17,zero,4006124 <_dtoa_r+0x1498>
 4005e94:	888003cc 	andi	r2,r17,15
 4005e98:	100490fa 	slli	r2,r2,3
 4005e9c:	00c10074 	movhi	r3,1025
 4005ea0:	18d4af04 	addi	r3,r3,21180
 4005ea4:	1885883a 	add	r2,r3,r2
 4005ea8:	11800017 	ldw	r6,0(r2)
 4005eac:	11c00117 	ldw	r7,4(r2)
 4005eb0:	9009883a 	mov	r4,r18
 4005eb4:	980b883a 	mov	r5,r19
 4005eb8:	8823d13a 	srai	r17,r17,4
 4005ebc:	400d9ec0 	call	400d9ec <__muldf3>
 4005ec0:	d8800f15 	stw	r2,60(sp)
 4005ec4:	d8c01015 	stw	r3,64(sp)
 4005ec8:	8800e826 	beq	r17,zero,400626c <_dtoa_r+0x15e0>
 4005ecc:	05010074 	movhi	r20,1025
 4005ed0:	a514a504 	addi	r20,r20,21140
 4005ed4:	04000084 	movi	r16,2
 4005ed8:	8980004c 	andi	r6,r17,1
 4005edc:	1009883a 	mov	r4,r2
 4005ee0:	8823d07a 	srai	r17,r17,1
 4005ee4:	180b883a 	mov	r5,r3
 4005ee8:	30000426 	beq	r6,zero,4005efc <_dtoa_r+0x1270>
 4005eec:	a1800017 	ldw	r6,0(r20)
 4005ef0:	a1c00117 	ldw	r7,4(r20)
 4005ef4:	84000044 	addi	r16,r16,1
 4005ef8:	400d9ec0 	call	400d9ec <__muldf3>
 4005efc:	a5000204 	addi	r20,r20,8
 4005f00:	883ff51e 	bne	r17,zero,4005ed8 <__reset+0xfa815ed8>
 4005f04:	d8800f15 	stw	r2,60(sp)
 4005f08:	d8c01015 	stw	r3,64(sp)
 4005f0c:	003c7606 	br	40050e8 <__reset+0xfa8150e8>
 4005f10:	00c00c04 	movi	r3,48
 4005f14:	10c00005 	stb	r3,0(r2)
 4005f18:	d8c00517 	ldw	r3,20(sp)
 4005f1c:	bd3fffc3 	ldbu	r20,-1(r23)
 4005f20:	18c00044 	addi	r3,r3,1
 4005f24:	d8c00515 	stw	r3,20(sp)
 4005f28:	003db906 	br	4005610 <__reset+0xfa815610>
 4005f2c:	89400117 	ldw	r5,4(r17)
 4005f30:	e009883a 	mov	r4,fp
 4005f34:	40081e00 	call	40081e0 <_Balloc>
 4005f38:	89800417 	ldw	r6,16(r17)
 4005f3c:	89400304 	addi	r5,r17,12
 4005f40:	11000304 	addi	r4,r2,12
 4005f44:	31800084 	addi	r6,r6,2
 4005f48:	318d883a 	add	r6,r6,r6
 4005f4c:	318d883a 	add	r6,r6,r6
 4005f50:	1027883a 	mov	r19,r2
 4005f54:	40023480 	call	4002348 <memcpy>
 4005f58:	01800044 	movi	r6,1
 4005f5c:	980b883a 	mov	r5,r19
 4005f60:	e009883a 	mov	r4,fp
 4005f64:	40089600 	call	4008960 <__lshift>
 4005f68:	1029883a 	mov	r20,r2
 4005f6c:	003ecc06 	br	4005aa0 <__reset+0xfa815aa0>
 4005f70:	00800e44 	movi	r2,57
 4005f74:	90809026 	beq	r18,r2,40061b8 <_dtoa_r+0x152c>
 4005f78:	92000044 	addi	r8,r18,1
 4005f7c:	003f1f06 	br	4005bfc <__reset+0xfa815bfc>
 4005f80:	9011883a 	mov	r8,r18
 4005f84:	8825883a 	mov	r18,r17
 4005f88:	a023883a 	mov	r17,r20
 4005f8c:	003e2906 	br	4005834 <__reset+0xfa815834>
 4005f90:	002b883a 	mov	r21,zero
 4005f94:	0023883a 	mov	r17,zero
 4005f98:	003f5406 	br	4005cec <__reset+0xfa815cec>
 4005f9c:	61bfffc4 	addi	r6,r12,-1
 4005fa0:	300490fa 	slli	r2,r6,3
 4005fa4:	00c10074 	movhi	r3,1025
 4005fa8:	18d4af04 	addi	r3,r3,21180
 4005fac:	1885883a 	add	r2,r3,r2
 4005fb0:	11000017 	ldw	r4,0(r2)
 4005fb4:	11400117 	ldw	r5,4(r2)
 4005fb8:	d8800717 	ldw	r2,28(sp)
 4005fbc:	880f883a 	mov	r7,r17
 4005fc0:	d9801215 	stw	r6,72(sp)
 4005fc4:	800d883a 	mov	r6,r16
 4005fc8:	db001615 	stw	r12,88(sp)
 4005fcc:	15c00044 	addi	r23,r2,1
 4005fd0:	400d9ec0 	call	400d9ec <__muldf3>
 4005fd4:	d9401017 	ldw	r5,64(sp)
 4005fd8:	d9000f17 	ldw	r4,60(sp)
 4005fdc:	d8c01515 	stw	r3,84(sp)
 4005fe0:	d8801415 	stw	r2,80(sp)
 4005fe4:	400ea000 	call	400ea00 <__fixdfsi>
 4005fe8:	1009883a 	mov	r4,r2
 4005fec:	1021883a 	mov	r16,r2
 4005ff0:	400ea800 	call	400ea80 <__floatsidf>
 4005ff4:	d9000f17 	ldw	r4,60(sp)
 4005ff8:	d9401017 	ldw	r5,64(sp)
 4005ffc:	100d883a 	mov	r6,r2
 4006000:	180f883a 	mov	r7,r3
 4006004:	400e1040 	call	400e104 <__subdf3>
 4006008:	1829883a 	mov	r20,r3
 400600c:	d8c00717 	ldw	r3,28(sp)
 4006010:	84000c04 	addi	r16,r16,48
 4006014:	1023883a 	mov	r17,r2
 4006018:	1c000005 	stb	r16,0(r3)
 400601c:	db001617 	ldw	r12,88(sp)
 4006020:	00800044 	movi	r2,1
 4006024:	60802226 	beq	r12,r2,40060b0 <_dtoa_r+0x1424>
 4006028:	d9c00717 	ldw	r7,28(sp)
 400602c:	8805883a 	mov	r2,r17
 4006030:	b82b883a 	mov	r21,r23
 4006034:	3b19883a 	add	r12,r7,r12
 4006038:	6023883a 	mov	r17,r12
 400603c:	a007883a 	mov	r3,r20
 4006040:	dc800f15 	stw	r18,60(sp)
 4006044:	000d883a 	mov	r6,zero
 4006048:	01d00934 	movhi	r7,16420
 400604c:	1009883a 	mov	r4,r2
 4006050:	180b883a 	mov	r5,r3
 4006054:	400d9ec0 	call	400d9ec <__muldf3>
 4006058:	180b883a 	mov	r5,r3
 400605c:	1009883a 	mov	r4,r2
 4006060:	1829883a 	mov	r20,r3
 4006064:	1025883a 	mov	r18,r2
 4006068:	400ea000 	call	400ea00 <__fixdfsi>
 400606c:	1009883a 	mov	r4,r2
 4006070:	1021883a 	mov	r16,r2
 4006074:	400ea800 	call	400ea80 <__floatsidf>
 4006078:	100d883a 	mov	r6,r2
 400607c:	180f883a 	mov	r7,r3
 4006080:	9009883a 	mov	r4,r18
 4006084:	a00b883a 	mov	r5,r20
 4006088:	84000c04 	addi	r16,r16,48
 400608c:	400e1040 	call	400e104 <__subdf3>
 4006090:	ad400044 	addi	r21,r21,1
 4006094:	ac3fffc5 	stb	r16,-1(r21)
 4006098:	ac7fea1e 	bne	r21,r17,4006044 <__reset+0xfa816044>
 400609c:	1023883a 	mov	r17,r2
 40060a0:	d8801217 	ldw	r2,72(sp)
 40060a4:	dc800f17 	ldw	r18,60(sp)
 40060a8:	1829883a 	mov	r20,r3
 40060ac:	b8af883a 	add	r23,r23,r2
 40060b0:	d9001417 	ldw	r4,80(sp)
 40060b4:	d9401517 	ldw	r5,84(sp)
 40060b8:	000d883a 	mov	r6,zero
 40060bc:	01cff834 	movhi	r7,16352
 40060c0:	400c6000 	call	400c600 <__adddf3>
 40060c4:	880d883a 	mov	r6,r17
 40060c8:	a00f883a 	mov	r7,r20
 40060cc:	1009883a 	mov	r4,r2
 40060d0:	180b883a 	mov	r5,r3
 40060d4:	400d8f80 	call	400d8f8 <__ledf2>
 40060d8:	10003e0e 	bge	r2,zero,40061d4 <_dtoa_r+0x1548>
 40060dc:	d9001317 	ldw	r4,76(sp)
 40060e0:	bd3fffc3 	ldbu	r20,-1(r23)
 40060e4:	d9000515 	stw	r4,20(sp)
 40060e8:	003d3b06 	br	40055d8 <__reset+0xfa8155d8>
 40060ec:	0027883a 	mov	r19,zero
 40060f0:	003f1b06 	br	4005d60 <__reset+0xfa815d60>
 40060f4:	d8800817 	ldw	r2,32(sp)
 40060f8:	11e9c83a 	sub	r20,r2,r7
 40060fc:	0005883a 	mov	r2,zero
 4006100:	003d5406 	br	4005654 <__reset+0xfa815654>
 4006104:	00800044 	movi	r2,1
 4006108:	003dc706 	br	4005828 <__reset+0xfa815828>
 400610c:	d8c00217 	ldw	r3,8(sp)
 4006110:	00800d84 	movi	r2,54
 4006114:	dd400a17 	ldw	r21,40(sp)
 4006118:	10c5c83a 	sub	r2,r2,r3
 400611c:	dd000817 	ldw	r20,32(sp)
 4006120:	003d4c06 	br	4005654 <__reset+0xfa815654>
 4006124:	dc800f15 	stw	r18,60(sp)
 4006128:	dcc01015 	stw	r19,64(sp)
 400612c:	04000084 	movi	r16,2
 4006130:	003bed06 	br	40050e8 <__reset+0xfa8150e8>
 4006134:	d9000617 	ldw	r4,24(sp)
 4006138:	203f0d26 	beq	r4,zero,4005d70 <__reset+0xfa815d70>
 400613c:	d9800c17 	ldw	r6,48(sp)
 4006140:	01bcab0e 	bge	zero,r6,40053f0 <__reset+0xfa8153f0>
 4006144:	d9401017 	ldw	r5,64(sp)
 4006148:	d9000f17 	ldw	r4,60(sp)
 400614c:	000d883a 	mov	r6,zero
 4006150:	01d00934 	movhi	r7,16420
 4006154:	400d9ec0 	call	400d9ec <__muldf3>
 4006158:	81000044 	addi	r4,r16,1
 400615c:	d8800f15 	stw	r2,60(sp)
 4006160:	d8c01015 	stw	r3,64(sp)
 4006164:	400ea800 	call	400ea80 <__floatsidf>
 4006168:	d9800f17 	ldw	r6,60(sp)
 400616c:	d9c01017 	ldw	r7,64(sp)
 4006170:	1009883a 	mov	r4,r2
 4006174:	180b883a 	mov	r5,r3
 4006178:	400d9ec0 	call	400d9ec <__muldf3>
 400617c:	01d00734 	movhi	r7,16412
 4006180:	000d883a 	mov	r6,zero
 4006184:	1009883a 	mov	r4,r2
 4006188:	180b883a 	mov	r5,r3
 400618c:	400c6000 	call	400c600 <__adddf3>
 4006190:	d9c00517 	ldw	r7,20(sp)
 4006194:	047f3034 	movhi	r17,64704
 4006198:	1021883a 	mov	r16,r2
 400619c:	39ffffc4 	addi	r7,r7,-1
 40061a0:	d9c01315 	stw	r7,76(sp)
 40061a4:	1c63883a 	add	r17,r3,r17
 40061a8:	db000c17 	ldw	r12,48(sp)
 40061ac:	003bea06 	br	4005158 <__reset+0xfa815158>
 40061b0:	dc000915 	stw	r16,36(sp)
 40061b4:	003e0e06 	br	40059f0 <__reset+0xfa8159f0>
 40061b8:	01000e44 	movi	r4,57
 40061bc:	8825883a 	mov	r18,r17
 40061c0:	9dc00044 	addi	r23,r19,1
 40061c4:	99000005 	stb	r4,0(r19)
 40061c8:	a023883a 	mov	r17,r20
 40061cc:	dc000915 	stw	r16,36(sp)
 40061d0:	003da406 	br	4005864 <__reset+0xfa815864>
 40061d4:	d9801417 	ldw	r6,80(sp)
 40061d8:	d9c01517 	ldw	r7,84(sp)
 40061dc:	0009883a 	mov	r4,zero
 40061e0:	014ff834 	movhi	r5,16352
 40061e4:	400e1040 	call	400e104 <__subdf3>
 40061e8:	880d883a 	mov	r6,r17
 40061ec:	a00f883a 	mov	r7,r20
 40061f0:	1009883a 	mov	r4,r2
 40061f4:	180b883a 	mov	r5,r3
 40061f8:	400d81c0 	call	400d81c <__gedf2>
 40061fc:	00bc7c0e 	bge	zero,r2,40053f0 <__reset+0xfa8153f0>
 4006200:	01000c04 	movi	r4,48
 4006204:	00000106 	br	400620c <_dtoa_r+0x1580>
 4006208:	102f883a 	mov	r23,r2
 400620c:	b8bfffc4 	addi	r2,r23,-1
 4006210:	10c00007 	ldb	r3,0(r2)
 4006214:	193ffc26 	beq	r3,r4,4006208 <__reset+0xfa816208>
 4006218:	d9801317 	ldw	r6,76(sp)
 400621c:	d9800515 	stw	r6,20(sp)
 4006220:	003c4406 	br	4005334 <__reset+0xfa815334>
 4006224:	d9801317 	ldw	r6,76(sp)
 4006228:	d9800515 	stw	r6,20(sp)
 400622c:	003cea06 	br	40055d8 <__reset+0xfa8155d8>
 4006230:	dd800f17 	ldw	r22,60(sp)
 4006234:	dcc01017 	ldw	r19,64(sp)
 4006238:	dc801217 	ldw	r18,72(sp)
 400623c:	003c6c06 	br	40053f0 <__reset+0xfa8153f0>
 4006240:	903e031e 	bne	r18,zero,4005a50 <__reset+0xfa815a50>
 4006244:	003ebb06 	br	4005d34 <__reset+0xfa815d34>
 4006248:	103e6c1e 	bne	r2,zero,4005bfc <__reset+0xfa815bfc>
 400624c:	4080004c 	andi	r2,r8,1
 4006250:	103e6a26 	beq	r2,zero,4005bfc <__reset+0xfa815bfc>
 4006254:	003e6606 	br	4005bf0 <__reset+0xfa815bf0>
 4006258:	d8c00317 	ldw	r3,12(sp)
 400625c:	00800084 	movi	r2,2
 4006260:	10c02916 	blt	r2,r3,4006308 <_dtoa_r+0x167c>
 4006264:	d9000c17 	ldw	r4,48(sp)
 4006268:	003e8806 	br	4005c8c <__reset+0xfa815c8c>
 400626c:	04000084 	movi	r16,2
 4006270:	003b9d06 	br	40050e8 <__reset+0xfa8150e8>
 4006274:	d9001317 	ldw	r4,76(sp)
 4006278:	d9000515 	stw	r4,20(sp)
 400627c:	003cd606 	br	40055d8 <__reset+0xfa8155d8>
 4006280:	d8801317 	ldw	r2,76(sp)
 4006284:	d8800515 	stw	r2,20(sp)
 4006288:	003c2a06 	br	4005334 <__reset+0xfa815334>
 400628c:	d9800317 	ldw	r6,12(sp)
 4006290:	00800084 	movi	r2,2
 4006294:	11801516 	blt	r2,r6,40062ec <_dtoa_r+0x1660>
 4006298:	d9c00c17 	ldw	r7,48(sp)
 400629c:	d9c00615 	stw	r7,24(sp)
 40062a0:	003df706 	br	4005a80 <__reset+0xfa815a80>
 40062a4:	193d3926 	beq	r3,r4,400578c <__reset+0xfa81578c>
 40062a8:	00c00f04 	movi	r3,60
 40062ac:	1885c83a 	sub	r2,r3,r2
 40062b0:	003ddf06 	br	4005a30 <__reset+0xfa815a30>
 40062b4:	e009883a 	mov	r4,fp
 40062b8:	e0001115 	stw	zero,68(fp)
 40062bc:	000b883a 	mov	r5,zero
 40062c0:	40081e00 	call	40081e0 <_Balloc>
 40062c4:	d8800715 	stw	r2,28(sp)
 40062c8:	d8c00717 	ldw	r3,28(sp)
 40062cc:	00bfffc4 	movi	r2,-1
 40062d0:	01000044 	movi	r4,1
 40062d4:	d8800c15 	stw	r2,48(sp)
 40062d8:	e0c01015 	stw	r3,64(fp)
 40062dc:	d9000b15 	stw	r4,44(sp)
 40062e0:	d8800615 	stw	r2,24(sp)
 40062e4:	d8002215 	stw	zero,136(sp)
 40062e8:	003c4106 	br	40053f0 <__reset+0xfa8153f0>
 40062ec:	d8c00c17 	ldw	r3,48(sp)
 40062f0:	d8c00615 	stw	r3,24(sp)
 40062f4:	003e7006 	br	4005cb8 <__reset+0xfa815cb8>
 40062f8:	04400044 	movi	r17,1
 40062fc:	003b2006 	br	4004f80 <__reset+0xfa814f80>
 4006300:	000b883a 	mov	r5,zero
 4006304:	003b3d06 	br	4004ffc <__reset+0xfa814ffc>
 4006308:	d8800c17 	ldw	r2,48(sp)
 400630c:	d8800615 	stw	r2,24(sp)
 4006310:	003e6906 	br	4005cb8 <__reset+0xfa815cb8>

04006314 <__sflush_r>:
 4006314:	2880030b 	ldhu	r2,12(r5)
 4006318:	defffb04 	addi	sp,sp,-20
 400631c:	dcc00315 	stw	r19,12(sp)
 4006320:	dc400115 	stw	r17,4(sp)
 4006324:	dfc00415 	stw	ra,16(sp)
 4006328:	dc800215 	stw	r18,8(sp)
 400632c:	dc000015 	stw	r16,0(sp)
 4006330:	10c0020c 	andi	r3,r2,8
 4006334:	2823883a 	mov	r17,r5
 4006338:	2027883a 	mov	r19,r4
 400633c:	1800311e 	bne	r3,zero,4006404 <__sflush_r+0xf0>
 4006340:	28c00117 	ldw	r3,4(r5)
 4006344:	10820014 	ori	r2,r2,2048
 4006348:	2880030d 	sth	r2,12(r5)
 400634c:	00c04b0e 	bge	zero,r3,400647c <__sflush_r+0x168>
 4006350:	8a000a17 	ldw	r8,40(r17)
 4006354:	40002326 	beq	r8,zero,40063e4 <__sflush_r+0xd0>
 4006358:	9c000017 	ldw	r16,0(r19)
 400635c:	10c4000c 	andi	r3,r2,4096
 4006360:	98000015 	stw	zero,0(r19)
 4006364:	18004826 	beq	r3,zero,4006488 <__sflush_r+0x174>
 4006368:	89801417 	ldw	r6,80(r17)
 400636c:	10c0010c 	andi	r3,r2,4
 4006370:	18000626 	beq	r3,zero,400638c <__sflush_r+0x78>
 4006374:	88c00117 	ldw	r3,4(r17)
 4006378:	88800c17 	ldw	r2,48(r17)
 400637c:	30cdc83a 	sub	r6,r6,r3
 4006380:	10000226 	beq	r2,zero,400638c <__sflush_r+0x78>
 4006384:	88800f17 	ldw	r2,60(r17)
 4006388:	308dc83a 	sub	r6,r6,r2
 400638c:	89400717 	ldw	r5,28(r17)
 4006390:	000f883a 	mov	r7,zero
 4006394:	9809883a 	mov	r4,r19
 4006398:	403ee83a 	callr	r8
 400639c:	00ffffc4 	movi	r3,-1
 40063a0:	10c04426 	beq	r2,r3,40064b4 <__sflush_r+0x1a0>
 40063a4:	88c0030b 	ldhu	r3,12(r17)
 40063a8:	89000417 	ldw	r4,16(r17)
 40063ac:	88000115 	stw	zero,4(r17)
 40063b0:	197dffcc 	andi	r5,r3,63487
 40063b4:	8940030d 	sth	r5,12(r17)
 40063b8:	89000015 	stw	r4,0(r17)
 40063bc:	18c4000c 	andi	r3,r3,4096
 40063c0:	18002c1e 	bne	r3,zero,4006474 <__sflush_r+0x160>
 40063c4:	89400c17 	ldw	r5,48(r17)
 40063c8:	9c000015 	stw	r16,0(r19)
 40063cc:	28000526 	beq	r5,zero,40063e4 <__sflush_r+0xd0>
 40063d0:	88801004 	addi	r2,r17,64
 40063d4:	28800226 	beq	r5,r2,40063e0 <__sflush_r+0xcc>
 40063d8:	9809883a 	mov	r4,r19
 40063dc:	4006a800 	call	4006a80 <_free_r>
 40063e0:	88000c15 	stw	zero,48(r17)
 40063e4:	0005883a 	mov	r2,zero
 40063e8:	dfc00417 	ldw	ra,16(sp)
 40063ec:	dcc00317 	ldw	r19,12(sp)
 40063f0:	dc800217 	ldw	r18,8(sp)
 40063f4:	dc400117 	ldw	r17,4(sp)
 40063f8:	dc000017 	ldw	r16,0(sp)
 40063fc:	dec00504 	addi	sp,sp,20
 4006400:	f800283a 	ret
 4006404:	2c800417 	ldw	r18,16(r5)
 4006408:	903ff626 	beq	r18,zero,40063e4 <__reset+0xfa8163e4>
 400640c:	2c000017 	ldw	r16,0(r5)
 4006410:	108000cc 	andi	r2,r2,3
 4006414:	2c800015 	stw	r18,0(r5)
 4006418:	84a1c83a 	sub	r16,r16,r18
 400641c:	1000131e 	bne	r2,zero,400646c <__sflush_r+0x158>
 4006420:	28800517 	ldw	r2,20(r5)
 4006424:	88800215 	stw	r2,8(r17)
 4006428:	04000316 	blt	zero,r16,4006438 <__sflush_r+0x124>
 400642c:	003fed06 	br	40063e4 <__reset+0xfa8163e4>
 4006430:	90a5883a 	add	r18,r18,r2
 4006434:	043feb0e 	bge	zero,r16,40063e4 <__reset+0xfa8163e4>
 4006438:	88800917 	ldw	r2,36(r17)
 400643c:	89400717 	ldw	r5,28(r17)
 4006440:	800f883a 	mov	r7,r16
 4006444:	900d883a 	mov	r6,r18
 4006448:	9809883a 	mov	r4,r19
 400644c:	103ee83a 	callr	r2
 4006450:	80a1c83a 	sub	r16,r16,r2
 4006454:	00bff616 	blt	zero,r2,4006430 <__reset+0xfa816430>
 4006458:	88c0030b 	ldhu	r3,12(r17)
 400645c:	00bfffc4 	movi	r2,-1
 4006460:	18c01014 	ori	r3,r3,64
 4006464:	88c0030d 	sth	r3,12(r17)
 4006468:	003fdf06 	br	40063e8 <__reset+0xfa8163e8>
 400646c:	0005883a 	mov	r2,zero
 4006470:	003fec06 	br	4006424 <__reset+0xfa816424>
 4006474:	88801415 	stw	r2,80(r17)
 4006478:	003fd206 	br	40063c4 <__reset+0xfa8163c4>
 400647c:	28c00f17 	ldw	r3,60(r5)
 4006480:	00ffb316 	blt	zero,r3,4006350 <__reset+0xfa816350>
 4006484:	003fd706 	br	40063e4 <__reset+0xfa8163e4>
 4006488:	89400717 	ldw	r5,28(r17)
 400648c:	000d883a 	mov	r6,zero
 4006490:	01c00044 	movi	r7,1
 4006494:	9809883a 	mov	r4,r19
 4006498:	403ee83a 	callr	r8
 400649c:	100d883a 	mov	r6,r2
 40064a0:	00bfffc4 	movi	r2,-1
 40064a4:	30801426 	beq	r6,r2,40064f8 <__sflush_r+0x1e4>
 40064a8:	8880030b 	ldhu	r2,12(r17)
 40064ac:	8a000a17 	ldw	r8,40(r17)
 40064b0:	003fae06 	br	400636c <__reset+0xfa81636c>
 40064b4:	98c00017 	ldw	r3,0(r19)
 40064b8:	183fba26 	beq	r3,zero,40063a4 <__reset+0xfa8163a4>
 40064bc:	01000744 	movi	r4,29
 40064c0:	19000626 	beq	r3,r4,40064dc <__sflush_r+0x1c8>
 40064c4:	01000584 	movi	r4,22
 40064c8:	19000426 	beq	r3,r4,40064dc <__sflush_r+0x1c8>
 40064cc:	88c0030b 	ldhu	r3,12(r17)
 40064d0:	18c01014 	ori	r3,r3,64
 40064d4:	88c0030d 	sth	r3,12(r17)
 40064d8:	003fc306 	br	40063e8 <__reset+0xfa8163e8>
 40064dc:	8880030b 	ldhu	r2,12(r17)
 40064e0:	88c00417 	ldw	r3,16(r17)
 40064e4:	88000115 	stw	zero,4(r17)
 40064e8:	10bdffcc 	andi	r2,r2,63487
 40064ec:	8880030d 	sth	r2,12(r17)
 40064f0:	88c00015 	stw	r3,0(r17)
 40064f4:	003fb306 	br	40063c4 <__reset+0xfa8163c4>
 40064f8:	98800017 	ldw	r2,0(r19)
 40064fc:	103fea26 	beq	r2,zero,40064a8 <__reset+0xfa8164a8>
 4006500:	00c00744 	movi	r3,29
 4006504:	10c00226 	beq	r2,r3,4006510 <__sflush_r+0x1fc>
 4006508:	00c00584 	movi	r3,22
 400650c:	10c0031e 	bne	r2,r3,400651c <__sflush_r+0x208>
 4006510:	9c000015 	stw	r16,0(r19)
 4006514:	0005883a 	mov	r2,zero
 4006518:	003fb306 	br	40063e8 <__reset+0xfa8163e8>
 400651c:	88c0030b 	ldhu	r3,12(r17)
 4006520:	3005883a 	mov	r2,r6
 4006524:	18c01014 	ori	r3,r3,64
 4006528:	88c0030d 	sth	r3,12(r17)
 400652c:	003fae06 	br	40063e8 <__reset+0xfa8163e8>

04006530 <_fflush_r>:
 4006530:	defffd04 	addi	sp,sp,-12
 4006534:	dc000115 	stw	r16,4(sp)
 4006538:	dfc00215 	stw	ra,8(sp)
 400653c:	2021883a 	mov	r16,r4
 4006540:	20000226 	beq	r4,zero,400654c <_fflush_r+0x1c>
 4006544:	20800e17 	ldw	r2,56(r4)
 4006548:	10000c26 	beq	r2,zero,400657c <_fflush_r+0x4c>
 400654c:	2880030f 	ldh	r2,12(r5)
 4006550:	1000051e 	bne	r2,zero,4006568 <_fflush_r+0x38>
 4006554:	0005883a 	mov	r2,zero
 4006558:	dfc00217 	ldw	ra,8(sp)
 400655c:	dc000117 	ldw	r16,4(sp)
 4006560:	dec00304 	addi	sp,sp,12
 4006564:	f800283a 	ret
 4006568:	8009883a 	mov	r4,r16
 400656c:	dfc00217 	ldw	ra,8(sp)
 4006570:	dc000117 	ldw	r16,4(sp)
 4006574:	dec00304 	addi	sp,sp,12
 4006578:	40063141 	jmpi	4006314 <__sflush_r>
 400657c:	d9400015 	stw	r5,0(sp)
 4006580:	400690c0 	call	400690c <__sinit>
 4006584:	d9400017 	ldw	r5,0(sp)
 4006588:	003ff006 	br	400654c <__reset+0xfa81654c>

0400658c <fflush>:
 400658c:	20000526 	beq	r4,zero,40065a4 <fflush+0x18>
 4006590:	00810074 	movhi	r2,1025
 4006594:	109d0604 	addi	r2,r2,29720
 4006598:	200b883a 	mov	r5,r4
 400659c:	11000017 	ldw	r4,0(r2)
 40065a0:	40065301 	jmpi	4006530 <_fflush_r>
 40065a4:	00810074 	movhi	r2,1025
 40065a8:	109d0504 	addi	r2,r2,29716
 40065ac:	11000017 	ldw	r4,0(r2)
 40065b0:	01410034 	movhi	r5,1024
 40065b4:	29594c04 	addi	r5,r5,25904
 40065b8:	40073101 	jmpi	4007310 <_fwalk_reent>

040065bc <__fp_unlock>:
 40065bc:	0005883a 	mov	r2,zero
 40065c0:	f800283a 	ret

040065c4 <_cleanup_r>:
 40065c4:	01410074 	movhi	r5,1025
 40065c8:	296c7804 	addi	r5,r5,-20000
 40065cc:	40073101 	jmpi	4007310 <_fwalk_reent>

040065d0 <__sinit.part.1>:
 40065d0:	defff704 	addi	sp,sp,-36
 40065d4:	00c10034 	movhi	r3,1024
 40065d8:	dfc00815 	stw	ra,32(sp)
 40065dc:	ddc00715 	stw	r23,28(sp)
 40065e0:	dd800615 	stw	r22,24(sp)
 40065e4:	dd400515 	stw	r21,20(sp)
 40065e8:	dd000415 	stw	r20,16(sp)
 40065ec:	dcc00315 	stw	r19,12(sp)
 40065f0:	dc800215 	stw	r18,8(sp)
 40065f4:	dc400115 	stw	r17,4(sp)
 40065f8:	dc000015 	stw	r16,0(sp)
 40065fc:	18d97104 	addi	r3,r3,26052
 4006600:	24000117 	ldw	r16,4(r4)
 4006604:	20c00f15 	stw	r3,60(r4)
 4006608:	2080bb04 	addi	r2,r4,748
 400660c:	00c000c4 	movi	r3,3
 4006610:	20c0b915 	stw	r3,740(r4)
 4006614:	2080ba15 	stw	r2,744(r4)
 4006618:	2000b815 	stw	zero,736(r4)
 400661c:	05c00204 	movi	r23,8
 4006620:	00800104 	movi	r2,4
 4006624:	2025883a 	mov	r18,r4
 4006628:	b80d883a 	mov	r6,r23
 400662c:	81001704 	addi	r4,r16,92
 4006630:	000b883a 	mov	r5,zero
 4006634:	80000015 	stw	zero,0(r16)
 4006638:	80000115 	stw	zero,4(r16)
 400663c:	80000215 	stw	zero,8(r16)
 4006640:	8080030d 	sth	r2,12(r16)
 4006644:	80001915 	stw	zero,100(r16)
 4006648:	8000038d 	sth	zero,14(r16)
 400664c:	80000415 	stw	zero,16(r16)
 4006650:	80000515 	stw	zero,20(r16)
 4006654:	80000615 	stw	zero,24(r16)
 4006658:	40080b80 	call	40080b8 <memset>
 400665c:	05810074 	movhi	r22,1025
 4006660:	94400217 	ldw	r17,8(r18)
 4006664:	05410074 	movhi	r21,1025
 4006668:	05010074 	movhi	r20,1025
 400666c:	04c10074 	movhi	r19,1025
 4006670:	b5a60204 	addi	r22,r22,-26616
 4006674:	ad661904 	addi	r21,r21,-26524
 4006678:	a5263804 	addi	r20,r20,-26400
 400667c:	9ce64f04 	addi	r19,r19,-26308
 4006680:	85800815 	stw	r22,32(r16)
 4006684:	85400915 	stw	r21,36(r16)
 4006688:	85000a15 	stw	r20,40(r16)
 400668c:	84c00b15 	stw	r19,44(r16)
 4006690:	84000715 	stw	r16,28(r16)
 4006694:	00800284 	movi	r2,10
 4006698:	8880030d 	sth	r2,12(r17)
 400669c:	00800044 	movi	r2,1
 40066a0:	b80d883a 	mov	r6,r23
 40066a4:	89001704 	addi	r4,r17,92
 40066a8:	000b883a 	mov	r5,zero
 40066ac:	88000015 	stw	zero,0(r17)
 40066b0:	88000115 	stw	zero,4(r17)
 40066b4:	88000215 	stw	zero,8(r17)
 40066b8:	88001915 	stw	zero,100(r17)
 40066bc:	8880038d 	sth	r2,14(r17)
 40066c0:	88000415 	stw	zero,16(r17)
 40066c4:	88000515 	stw	zero,20(r17)
 40066c8:	88000615 	stw	zero,24(r17)
 40066cc:	40080b80 	call	40080b8 <memset>
 40066d0:	94000317 	ldw	r16,12(r18)
 40066d4:	00800484 	movi	r2,18
 40066d8:	8c400715 	stw	r17,28(r17)
 40066dc:	8d800815 	stw	r22,32(r17)
 40066e0:	8d400915 	stw	r21,36(r17)
 40066e4:	8d000a15 	stw	r20,40(r17)
 40066e8:	8cc00b15 	stw	r19,44(r17)
 40066ec:	8080030d 	sth	r2,12(r16)
 40066f0:	00800084 	movi	r2,2
 40066f4:	80000015 	stw	zero,0(r16)
 40066f8:	80000115 	stw	zero,4(r16)
 40066fc:	80000215 	stw	zero,8(r16)
 4006700:	80001915 	stw	zero,100(r16)
 4006704:	8080038d 	sth	r2,14(r16)
 4006708:	80000415 	stw	zero,16(r16)
 400670c:	80000515 	stw	zero,20(r16)
 4006710:	80000615 	stw	zero,24(r16)
 4006714:	b80d883a 	mov	r6,r23
 4006718:	000b883a 	mov	r5,zero
 400671c:	81001704 	addi	r4,r16,92
 4006720:	40080b80 	call	40080b8 <memset>
 4006724:	00800044 	movi	r2,1
 4006728:	84000715 	stw	r16,28(r16)
 400672c:	85800815 	stw	r22,32(r16)
 4006730:	85400915 	stw	r21,36(r16)
 4006734:	85000a15 	stw	r20,40(r16)
 4006738:	84c00b15 	stw	r19,44(r16)
 400673c:	90800e15 	stw	r2,56(r18)
 4006740:	dfc00817 	ldw	ra,32(sp)
 4006744:	ddc00717 	ldw	r23,28(sp)
 4006748:	dd800617 	ldw	r22,24(sp)
 400674c:	dd400517 	ldw	r21,20(sp)
 4006750:	dd000417 	ldw	r20,16(sp)
 4006754:	dcc00317 	ldw	r19,12(sp)
 4006758:	dc800217 	ldw	r18,8(sp)
 400675c:	dc400117 	ldw	r17,4(sp)
 4006760:	dc000017 	ldw	r16,0(sp)
 4006764:	dec00904 	addi	sp,sp,36
 4006768:	f800283a 	ret

0400676c <__fp_lock>:
 400676c:	0005883a 	mov	r2,zero
 4006770:	f800283a 	ret

04006774 <__sfmoreglue>:
 4006774:	defffc04 	addi	sp,sp,-16
 4006778:	dc400115 	stw	r17,4(sp)
 400677c:	2c7fffc4 	addi	r17,r5,-1
 4006780:	8c401a24 	muli	r17,r17,104
 4006784:	dc800215 	stw	r18,8(sp)
 4006788:	2825883a 	mov	r18,r5
 400678c:	89401d04 	addi	r5,r17,116
 4006790:	dc000015 	stw	r16,0(sp)
 4006794:	dfc00315 	stw	ra,12(sp)
 4006798:	400766c0 	call	400766c <_malloc_r>
 400679c:	1021883a 	mov	r16,r2
 40067a0:	10000726 	beq	r2,zero,40067c0 <__sfmoreglue+0x4c>
 40067a4:	11000304 	addi	r4,r2,12
 40067a8:	10000015 	stw	zero,0(r2)
 40067ac:	14800115 	stw	r18,4(r2)
 40067b0:	11000215 	stw	r4,8(r2)
 40067b4:	89801a04 	addi	r6,r17,104
 40067b8:	000b883a 	mov	r5,zero
 40067bc:	40080b80 	call	40080b8 <memset>
 40067c0:	8005883a 	mov	r2,r16
 40067c4:	dfc00317 	ldw	ra,12(sp)
 40067c8:	dc800217 	ldw	r18,8(sp)
 40067cc:	dc400117 	ldw	r17,4(sp)
 40067d0:	dc000017 	ldw	r16,0(sp)
 40067d4:	dec00404 	addi	sp,sp,16
 40067d8:	f800283a 	ret

040067dc <__sfp>:
 40067dc:	defffb04 	addi	sp,sp,-20
 40067e0:	dc000015 	stw	r16,0(sp)
 40067e4:	04010074 	movhi	r16,1025
 40067e8:	841d0504 	addi	r16,r16,29716
 40067ec:	dcc00315 	stw	r19,12(sp)
 40067f0:	2027883a 	mov	r19,r4
 40067f4:	81000017 	ldw	r4,0(r16)
 40067f8:	dfc00415 	stw	ra,16(sp)
 40067fc:	dc800215 	stw	r18,8(sp)
 4006800:	20800e17 	ldw	r2,56(r4)
 4006804:	dc400115 	stw	r17,4(sp)
 4006808:	1000021e 	bne	r2,zero,4006814 <__sfp+0x38>
 400680c:	40065d00 	call	40065d0 <__sinit.part.1>
 4006810:	81000017 	ldw	r4,0(r16)
 4006814:	2480b804 	addi	r18,r4,736
 4006818:	047fffc4 	movi	r17,-1
 400681c:	91000117 	ldw	r4,4(r18)
 4006820:	94000217 	ldw	r16,8(r18)
 4006824:	213fffc4 	addi	r4,r4,-1
 4006828:	20000a16 	blt	r4,zero,4006854 <__sfp+0x78>
 400682c:	8080030f 	ldh	r2,12(r16)
 4006830:	10000c26 	beq	r2,zero,4006864 <__sfp+0x88>
 4006834:	80c01d04 	addi	r3,r16,116
 4006838:	00000206 	br	4006844 <__sfp+0x68>
 400683c:	18bfe60f 	ldh	r2,-104(r3)
 4006840:	10000826 	beq	r2,zero,4006864 <__sfp+0x88>
 4006844:	213fffc4 	addi	r4,r4,-1
 4006848:	1c3ffd04 	addi	r16,r3,-12
 400684c:	18c01a04 	addi	r3,r3,104
 4006850:	247ffa1e 	bne	r4,r17,400683c <__reset+0xfa81683c>
 4006854:	90800017 	ldw	r2,0(r18)
 4006858:	10001d26 	beq	r2,zero,40068d0 <__sfp+0xf4>
 400685c:	1025883a 	mov	r18,r2
 4006860:	003fee06 	br	400681c <__reset+0xfa81681c>
 4006864:	00bfffc4 	movi	r2,-1
 4006868:	8080038d 	sth	r2,14(r16)
 400686c:	00800044 	movi	r2,1
 4006870:	8080030d 	sth	r2,12(r16)
 4006874:	80001915 	stw	zero,100(r16)
 4006878:	80000015 	stw	zero,0(r16)
 400687c:	80000215 	stw	zero,8(r16)
 4006880:	80000115 	stw	zero,4(r16)
 4006884:	80000415 	stw	zero,16(r16)
 4006888:	80000515 	stw	zero,20(r16)
 400688c:	80000615 	stw	zero,24(r16)
 4006890:	01800204 	movi	r6,8
 4006894:	000b883a 	mov	r5,zero
 4006898:	81001704 	addi	r4,r16,92
 400689c:	40080b80 	call	40080b8 <memset>
 40068a0:	8005883a 	mov	r2,r16
 40068a4:	80000c15 	stw	zero,48(r16)
 40068a8:	80000d15 	stw	zero,52(r16)
 40068ac:	80001115 	stw	zero,68(r16)
 40068b0:	80001215 	stw	zero,72(r16)
 40068b4:	dfc00417 	ldw	ra,16(sp)
 40068b8:	dcc00317 	ldw	r19,12(sp)
 40068bc:	dc800217 	ldw	r18,8(sp)
 40068c0:	dc400117 	ldw	r17,4(sp)
 40068c4:	dc000017 	ldw	r16,0(sp)
 40068c8:	dec00504 	addi	sp,sp,20
 40068cc:	f800283a 	ret
 40068d0:	01400104 	movi	r5,4
 40068d4:	9809883a 	mov	r4,r19
 40068d8:	40067740 	call	4006774 <__sfmoreglue>
 40068dc:	90800015 	stw	r2,0(r18)
 40068e0:	103fde1e 	bne	r2,zero,400685c <__reset+0xfa81685c>
 40068e4:	00800304 	movi	r2,12
 40068e8:	98800015 	stw	r2,0(r19)
 40068ec:	0005883a 	mov	r2,zero
 40068f0:	003ff006 	br	40068b4 <__reset+0xfa8168b4>

040068f4 <_cleanup>:
 40068f4:	00810074 	movhi	r2,1025
 40068f8:	109d0504 	addi	r2,r2,29716
 40068fc:	11000017 	ldw	r4,0(r2)
 4006900:	01410074 	movhi	r5,1025
 4006904:	296c7804 	addi	r5,r5,-20000
 4006908:	40073101 	jmpi	4007310 <_fwalk_reent>

0400690c <__sinit>:
 400690c:	20800e17 	ldw	r2,56(r4)
 4006910:	10000126 	beq	r2,zero,4006918 <__sinit+0xc>
 4006914:	f800283a 	ret
 4006918:	40065d01 	jmpi	40065d0 <__sinit.part.1>

0400691c <__sfp_lock_acquire>:
 400691c:	f800283a 	ret

04006920 <__sfp_lock_release>:
 4006920:	f800283a 	ret

04006924 <__sinit_lock_acquire>:
 4006924:	f800283a 	ret

04006928 <__sinit_lock_release>:
 4006928:	f800283a 	ret

0400692c <__fp_lock_all>:
 400692c:	00810074 	movhi	r2,1025
 4006930:	109d0604 	addi	r2,r2,29720
 4006934:	11000017 	ldw	r4,0(r2)
 4006938:	01410034 	movhi	r5,1024
 400693c:	2959db04 	addi	r5,r5,26476
 4006940:	400724c1 	jmpi	400724c <_fwalk>

04006944 <__fp_unlock_all>:
 4006944:	00810074 	movhi	r2,1025
 4006948:	109d0604 	addi	r2,r2,29720
 400694c:	11000017 	ldw	r4,0(r2)
 4006950:	01410034 	movhi	r5,1024
 4006954:	29596f04 	addi	r5,r5,26044
 4006958:	400724c1 	jmpi	400724c <_fwalk>

0400695c <_malloc_trim_r>:
 400695c:	defffb04 	addi	sp,sp,-20
 4006960:	dcc00315 	stw	r19,12(sp)
 4006964:	04c10074 	movhi	r19,1025
 4006968:	dc800215 	stw	r18,8(sp)
 400696c:	dc400115 	stw	r17,4(sp)
 4006970:	dc000015 	stw	r16,0(sp)
 4006974:	dfc00415 	stw	ra,16(sp)
 4006978:	2821883a 	mov	r16,r5
 400697c:	9cd73c04 	addi	r19,r19,23792
 4006980:	2025883a 	mov	r18,r4
 4006984:	400f4c40 	call	400f4c4 <__malloc_lock>
 4006988:	98800217 	ldw	r2,8(r19)
 400698c:	14400117 	ldw	r17,4(r2)
 4006990:	00bfff04 	movi	r2,-4
 4006994:	88a2703a 	and	r17,r17,r2
 4006998:	8c21c83a 	sub	r16,r17,r16
 400699c:	8403fbc4 	addi	r16,r16,4079
 40069a0:	8020d33a 	srli	r16,r16,12
 40069a4:	0083ffc4 	movi	r2,4095
 40069a8:	843fffc4 	addi	r16,r16,-1
 40069ac:	8020933a 	slli	r16,r16,12
 40069b0:	1400060e 	bge	r2,r16,40069cc <_malloc_trim_r+0x70>
 40069b4:	000b883a 	mov	r5,zero
 40069b8:	9009883a 	mov	r4,r18
 40069bc:	40097b40 	call	40097b4 <_sbrk_r>
 40069c0:	98c00217 	ldw	r3,8(r19)
 40069c4:	1c47883a 	add	r3,r3,r17
 40069c8:	10c00a26 	beq	r2,r3,40069f4 <_malloc_trim_r+0x98>
 40069cc:	9009883a 	mov	r4,r18
 40069d0:	400f4e80 	call	400f4e8 <__malloc_unlock>
 40069d4:	0005883a 	mov	r2,zero
 40069d8:	dfc00417 	ldw	ra,16(sp)
 40069dc:	dcc00317 	ldw	r19,12(sp)
 40069e0:	dc800217 	ldw	r18,8(sp)
 40069e4:	dc400117 	ldw	r17,4(sp)
 40069e8:	dc000017 	ldw	r16,0(sp)
 40069ec:	dec00504 	addi	sp,sp,20
 40069f0:	f800283a 	ret
 40069f4:	040bc83a 	sub	r5,zero,r16
 40069f8:	9009883a 	mov	r4,r18
 40069fc:	40097b40 	call	40097b4 <_sbrk_r>
 4006a00:	00ffffc4 	movi	r3,-1
 4006a04:	10c00d26 	beq	r2,r3,4006a3c <_malloc_trim_r+0xe0>
 4006a08:	00c10074 	movhi	r3,1025
 4006a0c:	18dd2904 	addi	r3,r3,29860
 4006a10:	18800017 	ldw	r2,0(r3)
 4006a14:	99000217 	ldw	r4,8(r19)
 4006a18:	8c23c83a 	sub	r17,r17,r16
 4006a1c:	8c400054 	ori	r17,r17,1
 4006a20:	1421c83a 	sub	r16,r2,r16
 4006a24:	24400115 	stw	r17,4(r4)
 4006a28:	9009883a 	mov	r4,r18
 4006a2c:	1c000015 	stw	r16,0(r3)
 4006a30:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4006a34:	00800044 	movi	r2,1
 4006a38:	003fe706 	br	40069d8 <__reset+0xfa8169d8>
 4006a3c:	000b883a 	mov	r5,zero
 4006a40:	9009883a 	mov	r4,r18
 4006a44:	40097b40 	call	40097b4 <_sbrk_r>
 4006a48:	99000217 	ldw	r4,8(r19)
 4006a4c:	014003c4 	movi	r5,15
 4006a50:	1107c83a 	sub	r3,r2,r4
 4006a54:	28ffdd0e 	bge	r5,r3,40069cc <__reset+0xfa8169cc>
 4006a58:	01410074 	movhi	r5,1025
 4006a5c:	295d0804 	addi	r5,r5,29728
 4006a60:	29400017 	ldw	r5,0(r5)
 4006a64:	18c00054 	ori	r3,r3,1
 4006a68:	20c00115 	stw	r3,4(r4)
 4006a6c:	00c10074 	movhi	r3,1025
 4006a70:	1145c83a 	sub	r2,r2,r5
 4006a74:	18dd2904 	addi	r3,r3,29860
 4006a78:	18800015 	stw	r2,0(r3)
 4006a7c:	003fd306 	br	40069cc <__reset+0xfa8169cc>

04006a80 <_free_r>:
 4006a80:	28004126 	beq	r5,zero,4006b88 <_free_r+0x108>
 4006a84:	defffd04 	addi	sp,sp,-12
 4006a88:	dc400115 	stw	r17,4(sp)
 4006a8c:	dc000015 	stw	r16,0(sp)
 4006a90:	2023883a 	mov	r17,r4
 4006a94:	2821883a 	mov	r16,r5
 4006a98:	dfc00215 	stw	ra,8(sp)
 4006a9c:	400f4c40 	call	400f4c4 <__malloc_lock>
 4006aa0:	81ffff17 	ldw	r7,-4(r16)
 4006aa4:	00bfff84 	movi	r2,-2
 4006aa8:	01010074 	movhi	r4,1025
 4006aac:	81bffe04 	addi	r6,r16,-8
 4006ab0:	3884703a 	and	r2,r7,r2
 4006ab4:	21173c04 	addi	r4,r4,23792
 4006ab8:	308b883a 	add	r5,r6,r2
 4006abc:	2a400117 	ldw	r9,4(r5)
 4006ac0:	22000217 	ldw	r8,8(r4)
 4006ac4:	00ffff04 	movi	r3,-4
 4006ac8:	48c6703a 	and	r3,r9,r3
 4006acc:	2a005726 	beq	r5,r8,4006c2c <_free_r+0x1ac>
 4006ad0:	28c00115 	stw	r3,4(r5)
 4006ad4:	39c0004c 	andi	r7,r7,1
 4006ad8:	3800091e 	bne	r7,zero,4006b00 <_free_r+0x80>
 4006adc:	823ffe17 	ldw	r8,-8(r16)
 4006ae0:	22400204 	addi	r9,r4,8
 4006ae4:	320dc83a 	sub	r6,r6,r8
 4006ae8:	31c00217 	ldw	r7,8(r6)
 4006aec:	1205883a 	add	r2,r2,r8
 4006af0:	3a406526 	beq	r7,r9,4006c88 <_free_r+0x208>
 4006af4:	32000317 	ldw	r8,12(r6)
 4006af8:	3a000315 	stw	r8,12(r7)
 4006afc:	41c00215 	stw	r7,8(r8)
 4006b00:	28cf883a 	add	r7,r5,r3
 4006b04:	39c00117 	ldw	r7,4(r7)
 4006b08:	39c0004c 	andi	r7,r7,1
 4006b0c:	38003a26 	beq	r7,zero,4006bf8 <_free_r+0x178>
 4006b10:	10c00054 	ori	r3,r2,1
 4006b14:	30c00115 	stw	r3,4(r6)
 4006b18:	3087883a 	add	r3,r6,r2
 4006b1c:	18800015 	stw	r2,0(r3)
 4006b20:	00c07fc4 	movi	r3,511
 4006b24:	18801936 	bltu	r3,r2,4006b8c <_free_r+0x10c>
 4006b28:	1004d0fa 	srli	r2,r2,3
 4006b2c:	01c00044 	movi	r7,1
 4006b30:	21400117 	ldw	r5,4(r4)
 4006b34:	10c00044 	addi	r3,r2,1
 4006b38:	18c7883a 	add	r3,r3,r3
 4006b3c:	1005d0ba 	srai	r2,r2,2
 4006b40:	18c7883a 	add	r3,r3,r3
 4006b44:	18c7883a 	add	r3,r3,r3
 4006b48:	1907883a 	add	r3,r3,r4
 4006b4c:	3884983a 	sll	r2,r7,r2
 4006b50:	19c00017 	ldw	r7,0(r3)
 4006b54:	1a3ffe04 	addi	r8,r3,-8
 4006b58:	1144b03a 	or	r2,r2,r5
 4006b5c:	32000315 	stw	r8,12(r6)
 4006b60:	31c00215 	stw	r7,8(r6)
 4006b64:	20800115 	stw	r2,4(r4)
 4006b68:	19800015 	stw	r6,0(r3)
 4006b6c:	39800315 	stw	r6,12(r7)
 4006b70:	8809883a 	mov	r4,r17
 4006b74:	dfc00217 	ldw	ra,8(sp)
 4006b78:	dc400117 	ldw	r17,4(sp)
 4006b7c:	dc000017 	ldw	r16,0(sp)
 4006b80:	dec00304 	addi	sp,sp,12
 4006b84:	400f4e81 	jmpi	400f4e8 <__malloc_unlock>
 4006b88:	f800283a 	ret
 4006b8c:	100ad27a 	srli	r5,r2,9
 4006b90:	00c00104 	movi	r3,4
 4006b94:	19404a36 	bltu	r3,r5,4006cc0 <_free_r+0x240>
 4006b98:	100ad1ba 	srli	r5,r2,6
 4006b9c:	28c00e44 	addi	r3,r5,57
 4006ba0:	18c7883a 	add	r3,r3,r3
 4006ba4:	29400e04 	addi	r5,r5,56
 4006ba8:	18c7883a 	add	r3,r3,r3
 4006bac:	18c7883a 	add	r3,r3,r3
 4006bb0:	1909883a 	add	r4,r3,r4
 4006bb4:	20c00017 	ldw	r3,0(r4)
 4006bb8:	01c10074 	movhi	r7,1025
 4006bbc:	213ffe04 	addi	r4,r4,-8
 4006bc0:	39d73c04 	addi	r7,r7,23792
 4006bc4:	20c04426 	beq	r4,r3,4006cd8 <_free_r+0x258>
 4006bc8:	01ffff04 	movi	r7,-4
 4006bcc:	19400117 	ldw	r5,4(r3)
 4006bd0:	29ca703a 	and	r5,r5,r7
 4006bd4:	1140022e 	bgeu	r2,r5,4006be0 <_free_r+0x160>
 4006bd8:	18c00217 	ldw	r3,8(r3)
 4006bdc:	20fffb1e 	bne	r4,r3,4006bcc <__reset+0xfa816bcc>
 4006be0:	19000317 	ldw	r4,12(r3)
 4006be4:	31000315 	stw	r4,12(r6)
 4006be8:	30c00215 	stw	r3,8(r6)
 4006bec:	21800215 	stw	r6,8(r4)
 4006bf0:	19800315 	stw	r6,12(r3)
 4006bf4:	003fde06 	br	4006b70 <__reset+0xfa816b70>
 4006bf8:	29c00217 	ldw	r7,8(r5)
 4006bfc:	10c5883a 	add	r2,r2,r3
 4006c00:	00c10074 	movhi	r3,1025
 4006c04:	18d73e04 	addi	r3,r3,23800
 4006c08:	38c03b26 	beq	r7,r3,4006cf8 <_free_r+0x278>
 4006c0c:	2a000317 	ldw	r8,12(r5)
 4006c10:	11400054 	ori	r5,r2,1
 4006c14:	3087883a 	add	r3,r6,r2
 4006c18:	3a000315 	stw	r8,12(r7)
 4006c1c:	41c00215 	stw	r7,8(r8)
 4006c20:	31400115 	stw	r5,4(r6)
 4006c24:	18800015 	stw	r2,0(r3)
 4006c28:	003fbd06 	br	4006b20 <__reset+0xfa816b20>
 4006c2c:	39c0004c 	andi	r7,r7,1
 4006c30:	10c5883a 	add	r2,r2,r3
 4006c34:	3800071e 	bne	r7,zero,4006c54 <_free_r+0x1d4>
 4006c38:	81fffe17 	ldw	r7,-8(r16)
 4006c3c:	31cdc83a 	sub	r6,r6,r7
 4006c40:	30c00317 	ldw	r3,12(r6)
 4006c44:	31400217 	ldw	r5,8(r6)
 4006c48:	11c5883a 	add	r2,r2,r7
 4006c4c:	28c00315 	stw	r3,12(r5)
 4006c50:	19400215 	stw	r5,8(r3)
 4006c54:	10c00054 	ori	r3,r2,1
 4006c58:	30c00115 	stw	r3,4(r6)
 4006c5c:	00c10074 	movhi	r3,1025
 4006c60:	18dd0904 	addi	r3,r3,29732
 4006c64:	18c00017 	ldw	r3,0(r3)
 4006c68:	21800215 	stw	r6,8(r4)
 4006c6c:	10ffc036 	bltu	r2,r3,4006b70 <__reset+0xfa816b70>
 4006c70:	00810074 	movhi	r2,1025
 4006c74:	109d2004 	addi	r2,r2,29824
 4006c78:	11400017 	ldw	r5,0(r2)
 4006c7c:	8809883a 	mov	r4,r17
 4006c80:	400695c0 	call	400695c <_malloc_trim_r>
 4006c84:	003fba06 	br	4006b70 <__reset+0xfa816b70>
 4006c88:	28c9883a 	add	r4,r5,r3
 4006c8c:	21000117 	ldw	r4,4(r4)
 4006c90:	2100004c 	andi	r4,r4,1
 4006c94:	2000391e 	bne	r4,zero,4006d7c <_free_r+0x2fc>
 4006c98:	29c00217 	ldw	r7,8(r5)
 4006c9c:	29000317 	ldw	r4,12(r5)
 4006ca0:	1885883a 	add	r2,r3,r2
 4006ca4:	10c00054 	ori	r3,r2,1
 4006ca8:	39000315 	stw	r4,12(r7)
 4006cac:	21c00215 	stw	r7,8(r4)
 4006cb0:	30c00115 	stw	r3,4(r6)
 4006cb4:	308d883a 	add	r6,r6,r2
 4006cb8:	30800015 	stw	r2,0(r6)
 4006cbc:	003fac06 	br	4006b70 <__reset+0xfa816b70>
 4006cc0:	00c00504 	movi	r3,20
 4006cc4:	19401536 	bltu	r3,r5,4006d1c <_free_r+0x29c>
 4006cc8:	28c01704 	addi	r3,r5,92
 4006ccc:	18c7883a 	add	r3,r3,r3
 4006cd0:	294016c4 	addi	r5,r5,91
 4006cd4:	003fb406 	br	4006ba8 <__reset+0xfa816ba8>
 4006cd8:	280bd0ba 	srai	r5,r5,2
 4006cdc:	00c00044 	movi	r3,1
 4006ce0:	38800117 	ldw	r2,4(r7)
 4006ce4:	194a983a 	sll	r5,r3,r5
 4006ce8:	2007883a 	mov	r3,r4
 4006cec:	2884b03a 	or	r2,r5,r2
 4006cf0:	38800115 	stw	r2,4(r7)
 4006cf4:	003fbb06 	br	4006be4 <__reset+0xfa816be4>
 4006cf8:	21800515 	stw	r6,20(r4)
 4006cfc:	21800415 	stw	r6,16(r4)
 4006d00:	10c00054 	ori	r3,r2,1
 4006d04:	31c00315 	stw	r7,12(r6)
 4006d08:	31c00215 	stw	r7,8(r6)
 4006d0c:	30c00115 	stw	r3,4(r6)
 4006d10:	308d883a 	add	r6,r6,r2
 4006d14:	30800015 	stw	r2,0(r6)
 4006d18:	003f9506 	br	4006b70 <__reset+0xfa816b70>
 4006d1c:	00c01504 	movi	r3,84
 4006d20:	19400536 	bltu	r3,r5,4006d38 <_free_r+0x2b8>
 4006d24:	100ad33a 	srli	r5,r2,12
 4006d28:	28c01bc4 	addi	r3,r5,111
 4006d2c:	18c7883a 	add	r3,r3,r3
 4006d30:	29401b84 	addi	r5,r5,110
 4006d34:	003f9c06 	br	4006ba8 <__reset+0xfa816ba8>
 4006d38:	00c05504 	movi	r3,340
 4006d3c:	19400536 	bltu	r3,r5,4006d54 <_free_r+0x2d4>
 4006d40:	100ad3fa 	srli	r5,r2,15
 4006d44:	28c01e04 	addi	r3,r5,120
 4006d48:	18c7883a 	add	r3,r3,r3
 4006d4c:	29401dc4 	addi	r5,r5,119
 4006d50:	003f9506 	br	4006ba8 <__reset+0xfa816ba8>
 4006d54:	00c15504 	movi	r3,1364
 4006d58:	19400536 	bltu	r3,r5,4006d70 <_free_r+0x2f0>
 4006d5c:	100ad4ba 	srli	r5,r2,18
 4006d60:	28c01f44 	addi	r3,r5,125
 4006d64:	18c7883a 	add	r3,r3,r3
 4006d68:	29401f04 	addi	r5,r5,124
 4006d6c:	003f8e06 	br	4006ba8 <__reset+0xfa816ba8>
 4006d70:	00c03f84 	movi	r3,254
 4006d74:	01401f84 	movi	r5,126
 4006d78:	003f8b06 	br	4006ba8 <__reset+0xfa816ba8>
 4006d7c:	10c00054 	ori	r3,r2,1
 4006d80:	30c00115 	stw	r3,4(r6)
 4006d84:	308d883a 	add	r6,r6,r2
 4006d88:	30800015 	stw	r2,0(r6)
 4006d8c:	003f7806 	br	4006b70 <__reset+0xfa816b70>

04006d90 <__sfvwrite_r>:
 4006d90:	30800217 	ldw	r2,8(r6)
 4006d94:	10006726 	beq	r2,zero,4006f34 <__sfvwrite_r+0x1a4>
 4006d98:	28c0030b 	ldhu	r3,12(r5)
 4006d9c:	defff404 	addi	sp,sp,-48
 4006da0:	dd400715 	stw	r21,28(sp)
 4006da4:	dd000615 	stw	r20,24(sp)
 4006da8:	dc000215 	stw	r16,8(sp)
 4006dac:	dfc00b15 	stw	ra,44(sp)
 4006db0:	df000a15 	stw	fp,40(sp)
 4006db4:	ddc00915 	stw	r23,36(sp)
 4006db8:	dd800815 	stw	r22,32(sp)
 4006dbc:	dcc00515 	stw	r19,20(sp)
 4006dc0:	dc800415 	stw	r18,16(sp)
 4006dc4:	dc400315 	stw	r17,12(sp)
 4006dc8:	1880020c 	andi	r2,r3,8
 4006dcc:	2821883a 	mov	r16,r5
 4006dd0:	202b883a 	mov	r21,r4
 4006dd4:	3029883a 	mov	r20,r6
 4006dd8:	10002726 	beq	r2,zero,4006e78 <__sfvwrite_r+0xe8>
 4006ddc:	28800417 	ldw	r2,16(r5)
 4006de0:	10002526 	beq	r2,zero,4006e78 <__sfvwrite_r+0xe8>
 4006de4:	1880008c 	andi	r2,r3,2
 4006de8:	a4400017 	ldw	r17,0(r20)
 4006dec:	10002a26 	beq	r2,zero,4006e98 <__sfvwrite_r+0x108>
 4006df0:	05a00034 	movhi	r22,32768
 4006df4:	0027883a 	mov	r19,zero
 4006df8:	0025883a 	mov	r18,zero
 4006dfc:	b5bf0004 	addi	r22,r22,-1024
 4006e00:	980d883a 	mov	r6,r19
 4006e04:	a809883a 	mov	r4,r21
 4006e08:	90004626 	beq	r18,zero,4006f24 <__sfvwrite_r+0x194>
 4006e0c:	900f883a 	mov	r7,r18
 4006e10:	b480022e 	bgeu	r22,r18,4006e1c <__sfvwrite_r+0x8c>
 4006e14:	01e00034 	movhi	r7,32768
 4006e18:	39ff0004 	addi	r7,r7,-1024
 4006e1c:	80800917 	ldw	r2,36(r16)
 4006e20:	81400717 	ldw	r5,28(r16)
 4006e24:	103ee83a 	callr	r2
 4006e28:	0080570e 	bge	zero,r2,4006f88 <__sfvwrite_r+0x1f8>
 4006e2c:	a0c00217 	ldw	r3,8(r20)
 4006e30:	98a7883a 	add	r19,r19,r2
 4006e34:	90a5c83a 	sub	r18,r18,r2
 4006e38:	1885c83a 	sub	r2,r3,r2
 4006e3c:	a0800215 	stw	r2,8(r20)
 4006e40:	103fef1e 	bne	r2,zero,4006e00 <__reset+0xfa816e00>
 4006e44:	0005883a 	mov	r2,zero
 4006e48:	dfc00b17 	ldw	ra,44(sp)
 4006e4c:	df000a17 	ldw	fp,40(sp)
 4006e50:	ddc00917 	ldw	r23,36(sp)
 4006e54:	dd800817 	ldw	r22,32(sp)
 4006e58:	dd400717 	ldw	r21,28(sp)
 4006e5c:	dd000617 	ldw	r20,24(sp)
 4006e60:	dcc00517 	ldw	r19,20(sp)
 4006e64:	dc800417 	ldw	r18,16(sp)
 4006e68:	dc400317 	ldw	r17,12(sp)
 4006e6c:	dc000217 	ldw	r16,8(sp)
 4006e70:	dec00c04 	addi	sp,sp,48
 4006e74:	f800283a 	ret
 4006e78:	800b883a 	mov	r5,r16
 4006e7c:	a809883a 	mov	r4,r21
 4006e80:	40049380 	call	4004938 <__swsetup_r>
 4006e84:	1000eb1e 	bne	r2,zero,4007234 <__sfvwrite_r+0x4a4>
 4006e88:	80c0030b 	ldhu	r3,12(r16)
 4006e8c:	a4400017 	ldw	r17,0(r20)
 4006e90:	1880008c 	andi	r2,r3,2
 4006e94:	103fd61e 	bne	r2,zero,4006df0 <__reset+0xfa816df0>
 4006e98:	1880004c 	andi	r2,r3,1
 4006e9c:	10003f1e 	bne	r2,zero,4006f9c <__sfvwrite_r+0x20c>
 4006ea0:	0039883a 	mov	fp,zero
 4006ea4:	0025883a 	mov	r18,zero
 4006ea8:	90001a26 	beq	r18,zero,4006f14 <__sfvwrite_r+0x184>
 4006eac:	1880800c 	andi	r2,r3,512
 4006eb0:	84c00217 	ldw	r19,8(r16)
 4006eb4:	10002126 	beq	r2,zero,4006f3c <__sfvwrite_r+0x1ac>
 4006eb8:	982f883a 	mov	r23,r19
 4006ebc:	94c09336 	bltu	r18,r19,400710c <__sfvwrite_r+0x37c>
 4006ec0:	1881200c 	andi	r2,r3,1152
 4006ec4:	10009e1e 	bne	r2,zero,4007140 <__sfvwrite_r+0x3b0>
 4006ec8:	81000017 	ldw	r4,0(r16)
 4006ecc:	b80d883a 	mov	r6,r23
 4006ed0:	e00b883a 	mov	r5,fp
 4006ed4:	4007f5c0 	call	4007f5c <memmove>
 4006ed8:	80c00217 	ldw	r3,8(r16)
 4006edc:	81000017 	ldw	r4,0(r16)
 4006ee0:	9005883a 	mov	r2,r18
 4006ee4:	1ce7c83a 	sub	r19,r3,r19
 4006ee8:	25cf883a 	add	r7,r4,r23
 4006eec:	84c00215 	stw	r19,8(r16)
 4006ef0:	81c00015 	stw	r7,0(r16)
 4006ef4:	a0c00217 	ldw	r3,8(r20)
 4006ef8:	e0b9883a 	add	fp,fp,r2
 4006efc:	90a5c83a 	sub	r18,r18,r2
 4006f00:	18a7c83a 	sub	r19,r3,r2
 4006f04:	a4c00215 	stw	r19,8(r20)
 4006f08:	983fce26 	beq	r19,zero,4006e44 <__reset+0xfa816e44>
 4006f0c:	80c0030b 	ldhu	r3,12(r16)
 4006f10:	903fe61e 	bne	r18,zero,4006eac <__reset+0xfa816eac>
 4006f14:	8f000017 	ldw	fp,0(r17)
 4006f18:	8c800117 	ldw	r18,4(r17)
 4006f1c:	8c400204 	addi	r17,r17,8
 4006f20:	003fe106 	br	4006ea8 <__reset+0xfa816ea8>
 4006f24:	8cc00017 	ldw	r19,0(r17)
 4006f28:	8c800117 	ldw	r18,4(r17)
 4006f2c:	8c400204 	addi	r17,r17,8
 4006f30:	003fb306 	br	4006e00 <__reset+0xfa816e00>
 4006f34:	0005883a 	mov	r2,zero
 4006f38:	f800283a 	ret
 4006f3c:	81000017 	ldw	r4,0(r16)
 4006f40:	80800417 	ldw	r2,16(r16)
 4006f44:	11005736 	bltu	r2,r4,40070a4 <__sfvwrite_r+0x314>
 4006f48:	85c00517 	ldw	r23,20(r16)
 4006f4c:	95c05536 	bltu	r18,r23,40070a4 <__sfvwrite_r+0x314>
 4006f50:	00a00034 	movhi	r2,32768
 4006f54:	10bfffc4 	addi	r2,r2,-1
 4006f58:	9009883a 	mov	r4,r18
 4006f5c:	1480012e 	bgeu	r2,r18,4006f64 <__sfvwrite_r+0x1d4>
 4006f60:	1009883a 	mov	r4,r2
 4006f64:	b80b883a 	mov	r5,r23
 4006f68:	400c44c0 	call	400c44c <__divsi3>
 4006f6c:	15cf383a 	mul	r7,r2,r23
 4006f70:	81400717 	ldw	r5,28(r16)
 4006f74:	80800917 	ldw	r2,36(r16)
 4006f78:	e00d883a 	mov	r6,fp
 4006f7c:	a809883a 	mov	r4,r21
 4006f80:	103ee83a 	callr	r2
 4006f84:	00bfdb16 	blt	zero,r2,4006ef4 <__reset+0xfa816ef4>
 4006f88:	8080030b 	ldhu	r2,12(r16)
 4006f8c:	10801014 	ori	r2,r2,64
 4006f90:	8080030d 	sth	r2,12(r16)
 4006f94:	00bfffc4 	movi	r2,-1
 4006f98:	003fab06 	br	4006e48 <__reset+0xfa816e48>
 4006f9c:	0027883a 	mov	r19,zero
 4006fa0:	0011883a 	mov	r8,zero
 4006fa4:	0039883a 	mov	fp,zero
 4006fa8:	0025883a 	mov	r18,zero
 4006fac:	90001f26 	beq	r18,zero,400702c <__sfvwrite_r+0x29c>
 4006fb0:	40005a26 	beq	r8,zero,400711c <__sfvwrite_r+0x38c>
 4006fb4:	982d883a 	mov	r22,r19
 4006fb8:	94c0012e 	bgeu	r18,r19,4006fc0 <__sfvwrite_r+0x230>
 4006fbc:	902d883a 	mov	r22,r18
 4006fc0:	81000017 	ldw	r4,0(r16)
 4006fc4:	80800417 	ldw	r2,16(r16)
 4006fc8:	b02f883a 	mov	r23,r22
 4006fcc:	81c00517 	ldw	r7,20(r16)
 4006fd0:	1100032e 	bgeu	r2,r4,4006fe0 <__sfvwrite_r+0x250>
 4006fd4:	80c00217 	ldw	r3,8(r16)
 4006fd8:	38c7883a 	add	r3,r7,r3
 4006fdc:	1d801816 	blt	r3,r22,4007040 <__sfvwrite_r+0x2b0>
 4006fe0:	b1c03e16 	blt	r22,r7,40070dc <__sfvwrite_r+0x34c>
 4006fe4:	80800917 	ldw	r2,36(r16)
 4006fe8:	81400717 	ldw	r5,28(r16)
 4006fec:	e00d883a 	mov	r6,fp
 4006ff0:	da000115 	stw	r8,4(sp)
 4006ff4:	a809883a 	mov	r4,r21
 4006ff8:	103ee83a 	callr	r2
 4006ffc:	102f883a 	mov	r23,r2
 4007000:	da000117 	ldw	r8,4(sp)
 4007004:	00bfe00e 	bge	zero,r2,4006f88 <__reset+0xfa816f88>
 4007008:	9de7c83a 	sub	r19,r19,r23
 400700c:	98001f26 	beq	r19,zero,400708c <__sfvwrite_r+0x2fc>
 4007010:	a0800217 	ldw	r2,8(r20)
 4007014:	e5f9883a 	add	fp,fp,r23
 4007018:	95e5c83a 	sub	r18,r18,r23
 400701c:	15efc83a 	sub	r23,r2,r23
 4007020:	a5c00215 	stw	r23,8(r20)
 4007024:	b83f8726 	beq	r23,zero,4006e44 <__reset+0xfa816e44>
 4007028:	903fe11e 	bne	r18,zero,4006fb0 <__reset+0xfa816fb0>
 400702c:	8f000017 	ldw	fp,0(r17)
 4007030:	8c800117 	ldw	r18,4(r17)
 4007034:	0011883a 	mov	r8,zero
 4007038:	8c400204 	addi	r17,r17,8
 400703c:	003fdb06 	br	4006fac <__reset+0xfa816fac>
 4007040:	180d883a 	mov	r6,r3
 4007044:	e00b883a 	mov	r5,fp
 4007048:	da000115 	stw	r8,4(sp)
 400704c:	d8c00015 	stw	r3,0(sp)
 4007050:	4007f5c0 	call	4007f5c <memmove>
 4007054:	d8c00017 	ldw	r3,0(sp)
 4007058:	80800017 	ldw	r2,0(r16)
 400705c:	800b883a 	mov	r5,r16
 4007060:	a809883a 	mov	r4,r21
 4007064:	10c5883a 	add	r2,r2,r3
 4007068:	80800015 	stw	r2,0(r16)
 400706c:	d8c00015 	stw	r3,0(sp)
 4007070:	40065300 	call	4006530 <_fflush_r>
 4007074:	d8c00017 	ldw	r3,0(sp)
 4007078:	da000117 	ldw	r8,4(sp)
 400707c:	103fc21e 	bne	r2,zero,4006f88 <__reset+0xfa816f88>
 4007080:	182f883a 	mov	r23,r3
 4007084:	9de7c83a 	sub	r19,r19,r23
 4007088:	983fe11e 	bne	r19,zero,4007010 <__reset+0xfa817010>
 400708c:	800b883a 	mov	r5,r16
 4007090:	a809883a 	mov	r4,r21
 4007094:	40065300 	call	4006530 <_fflush_r>
 4007098:	103fbb1e 	bne	r2,zero,4006f88 <__reset+0xfa816f88>
 400709c:	0011883a 	mov	r8,zero
 40070a0:	003fdb06 	br	4007010 <__reset+0xfa817010>
 40070a4:	94c0012e 	bgeu	r18,r19,40070ac <__sfvwrite_r+0x31c>
 40070a8:	9027883a 	mov	r19,r18
 40070ac:	980d883a 	mov	r6,r19
 40070b0:	e00b883a 	mov	r5,fp
 40070b4:	4007f5c0 	call	4007f5c <memmove>
 40070b8:	80800217 	ldw	r2,8(r16)
 40070bc:	80c00017 	ldw	r3,0(r16)
 40070c0:	14c5c83a 	sub	r2,r2,r19
 40070c4:	1cc7883a 	add	r3,r3,r19
 40070c8:	80800215 	stw	r2,8(r16)
 40070cc:	80c00015 	stw	r3,0(r16)
 40070d0:	10004326 	beq	r2,zero,40071e0 <__sfvwrite_r+0x450>
 40070d4:	9805883a 	mov	r2,r19
 40070d8:	003f8606 	br	4006ef4 <__reset+0xfa816ef4>
 40070dc:	b00d883a 	mov	r6,r22
 40070e0:	e00b883a 	mov	r5,fp
 40070e4:	da000115 	stw	r8,4(sp)
 40070e8:	4007f5c0 	call	4007f5c <memmove>
 40070ec:	80800217 	ldw	r2,8(r16)
 40070f0:	80c00017 	ldw	r3,0(r16)
 40070f4:	da000117 	ldw	r8,4(sp)
 40070f8:	1585c83a 	sub	r2,r2,r22
 40070fc:	1dad883a 	add	r22,r3,r22
 4007100:	80800215 	stw	r2,8(r16)
 4007104:	85800015 	stw	r22,0(r16)
 4007108:	003fbf06 	br	4007008 <__reset+0xfa817008>
 400710c:	81000017 	ldw	r4,0(r16)
 4007110:	9027883a 	mov	r19,r18
 4007114:	902f883a 	mov	r23,r18
 4007118:	003f6c06 	br	4006ecc <__reset+0xfa816ecc>
 400711c:	900d883a 	mov	r6,r18
 4007120:	01400284 	movi	r5,10
 4007124:	e009883a 	mov	r4,fp
 4007128:	4007e780 	call	4007e78 <memchr>
 400712c:	10003e26 	beq	r2,zero,4007228 <__sfvwrite_r+0x498>
 4007130:	10800044 	addi	r2,r2,1
 4007134:	1727c83a 	sub	r19,r2,fp
 4007138:	02000044 	movi	r8,1
 400713c:	003f9d06 	br	4006fb4 <__reset+0xfa816fb4>
 4007140:	80800517 	ldw	r2,20(r16)
 4007144:	81400417 	ldw	r5,16(r16)
 4007148:	81c00017 	ldw	r7,0(r16)
 400714c:	10a7883a 	add	r19,r2,r2
 4007150:	9885883a 	add	r2,r19,r2
 4007154:	1026d7fa 	srli	r19,r2,31
 4007158:	396dc83a 	sub	r22,r7,r5
 400715c:	b1000044 	addi	r4,r22,1
 4007160:	9885883a 	add	r2,r19,r2
 4007164:	1027d07a 	srai	r19,r2,1
 4007168:	2485883a 	add	r2,r4,r18
 400716c:	980d883a 	mov	r6,r19
 4007170:	9880022e 	bgeu	r19,r2,400717c <__sfvwrite_r+0x3ec>
 4007174:	1027883a 	mov	r19,r2
 4007178:	100d883a 	mov	r6,r2
 400717c:	18c1000c 	andi	r3,r3,1024
 4007180:	18001c26 	beq	r3,zero,40071f4 <__sfvwrite_r+0x464>
 4007184:	300b883a 	mov	r5,r6
 4007188:	a809883a 	mov	r4,r21
 400718c:	400766c0 	call	400766c <_malloc_r>
 4007190:	102f883a 	mov	r23,r2
 4007194:	10002926 	beq	r2,zero,400723c <__sfvwrite_r+0x4ac>
 4007198:	81400417 	ldw	r5,16(r16)
 400719c:	b00d883a 	mov	r6,r22
 40071a0:	1009883a 	mov	r4,r2
 40071a4:	40023480 	call	4002348 <memcpy>
 40071a8:	8080030b 	ldhu	r2,12(r16)
 40071ac:	00fedfc4 	movi	r3,-1153
 40071b0:	10c4703a 	and	r2,r2,r3
 40071b4:	10802014 	ori	r2,r2,128
 40071b8:	8080030d 	sth	r2,12(r16)
 40071bc:	bd89883a 	add	r4,r23,r22
 40071c0:	9d8fc83a 	sub	r7,r19,r22
 40071c4:	85c00415 	stw	r23,16(r16)
 40071c8:	84c00515 	stw	r19,20(r16)
 40071cc:	81000015 	stw	r4,0(r16)
 40071d0:	9027883a 	mov	r19,r18
 40071d4:	81c00215 	stw	r7,8(r16)
 40071d8:	902f883a 	mov	r23,r18
 40071dc:	003f3b06 	br	4006ecc <__reset+0xfa816ecc>
 40071e0:	800b883a 	mov	r5,r16
 40071e4:	a809883a 	mov	r4,r21
 40071e8:	40065300 	call	4006530 <_fflush_r>
 40071ec:	103fb926 	beq	r2,zero,40070d4 <__reset+0xfa8170d4>
 40071f0:	003f6506 	br	4006f88 <__reset+0xfa816f88>
 40071f4:	a809883a 	mov	r4,r21
 40071f8:	40091dc0 	call	40091dc <_realloc_r>
 40071fc:	102f883a 	mov	r23,r2
 4007200:	103fee1e 	bne	r2,zero,40071bc <__reset+0xfa8171bc>
 4007204:	81400417 	ldw	r5,16(r16)
 4007208:	a809883a 	mov	r4,r21
 400720c:	4006a800 	call	4006a80 <_free_r>
 4007210:	8080030b 	ldhu	r2,12(r16)
 4007214:	00ffdfc4 	movi	r3,-129
 4007218:	1884703a 	and	r2,r3,r2
 400721c:	00c00304 	movi	r3,12
 4007220:	a8c00015 	stw	r3,0(r21)
 4007224:	003f5906 	br	4006f8c <__reset+0xfa816f8c>
 4007228:	94c00044 	addi	r19,r18,1
 400722c:	02000044 	movi	r8,1
 4007230:	003f6006 	br	4006fb4 <__reset+0xfa816fb4>
 4007234:	00bfffc4 	movi	r2,-1
 4007238:	003f0306 	br	4006e48 <__reset+0xfa816e48>
 400723c:	00800304 	movi	r2,12
 4007240:	a8800015 	stw	r2,0(r21)
 4007244:	8080030b 	ldhu	r2,12(r16)
 4007248:	003f5006 	br	4006f8c <__reset+0xfa816f8c>

0400724c <_fwalk>:
 400724c:	defff704 	addi	sp,sp,-36
 4007250:	dd000415 	stw	r20,16(sp)
 4007254:	dfc00815 	stw	ra,32(sp)
 4007258:	ddc00715 	stw	r23,28(sp)
 400725c:	dd800615 	stw	r22,24(sp)
 4007260:	dd400515 	stw	r21,20(sp)
 4007264:	dcc00315 	stw	r19,12(sp)
 4007268:	dc800215 	stw	r18,8(sp)
 400726c:	dc400115 	stw	r17,4(sp)
 4007270:	dc000015 	stw	r16,0(sp)
 4007274:	2500b804 	addi	r20,r4,736
 4007278:	a0002326 	beq	r20,zero,4007308 <_fwalk+0xbc>
 400727c:	282b883a 	mov	r21,r5
 4007280:	002f883a 	mov	r23,zero
 4007284:	05800044 	movi	r22,1
 4007288:	04ffffc4 	movi	r19,-1
 400728c:	a4400117 	ldw	r17,4(r20)
 4007290:	a4800217 	ldw	r18,8(r20)
 4007294:	8c7fffc4 	addi	r17,r17,-1
 4007298:	88000d16 	blt	r17,zero,40072d0 <_fwalk+0x84>
 400729c:	94000304 	addi	r16,r18,12
 40072a0:	94800384 	addi	r18,r18,14
 40072a4:	8080000b 	ldhu	r2,0(r16)
 40072a8:	8c7fffc4 	addi	r17,r17,-1
 40072ac:	813ffd04 	addi	r4,r16,-12
 40072b0:	b080042e 	bgeu	r22,r2,40072c4 <_fwalk+0x78>
 40072b4:	9080000f 	ldh	r2,0(r18)
 40072b8:	14c00226 	beq	r2,r19,40072c4 <_fwalk+0x78>
 40072bc:	a83ee83a 	callr	r21
 40072c0:	b8aeb03a 	or	r23,r23,r2
 40072c4:	84001a04 	addi	r16,r16,104
 40072c8:	94801a04 	addi	r18,r18,104
 40072cc:	8cfff51e 	bne	r17,r19,40072a4 <__reset+0xfa8172a4>
 40072d0:	a5000017 	ldw	r20,0(r20)
 40072d4:	a03fed1e 	bne	r20,zero,400728c <__reset+0xfa81728c>
 40072d8:	b805883a 	mov	r2,r23
 40072dc:	dfc00817 	ldw	ra,32(sp)
 40072e0:	ddc00717 	ldw	r23,28(sp)
 40072e4:	dd800617 	ldw	r22,24(sp)
 40072e8:	dd400517 	ldw	r21,20(sp)
 40072ec:	dd000417 	ldw	r20,16(sp)
 40072f0:	dcc00317 	ldw	r19,12(sp)
 40072f4:	dc800217 	ldw	r18,8(sp)
 40072f8:	dc400117 	ldw	r17,4(sp)
 40072fc:	dc000017 	ldw	r16,0(sp)
 4007300:	dec00904 	addi	sp,sp,36
 4007304:	f800283a 	ret
 4007308:	002f883a 	mov	r23,zero
 400730c:	003ff206 	br	40072d8 <__reset+0xfa8172d8>

04007310 <_fwalk_reent>:
 4007310:	defff704 	addi	sp,sp,-36
 4007314:	dd000415 	stw	r20,16(sp)
 4007318:	dfc00815 	stw	ra,32(sp)
 400731c:	ddc00715 	stw	r23,28(sp)
 4007320:	dd800615 	stw	r22,24(sp)
 4007324:	dd400515 	stw	r21,20(sp)
 4007328:	dcc00315 	stw	r19,12(sp)
 400732c:	dc800215 	stw	r18,8(sp)
 4007330:	dc400115 	stw	r17,4(sp)
 4007334:	dc000015 	stw	r16,0(sp)
 4007338:	2500b804 	addi	r20,r4,736
 400733c:	a0002326 	beq	r20,zero,40073cc <_fwalk_reent+0xbc>
 4007340:	282b883a 	mov	r21,r5
 4007344:	2027883a 	mov	r19,r4
 4007348:	002f883a 	mov	r23,zero
 400734c:	05800044 	movi	r22,1
 4007350:	04bfffc4 	movi	r18,-1
 4007354:	a4400117 	ldw	r17,4(r20)
 4007358:	a4000217 	ldw	r16,8(r20)
 400735c:	8c7fffc4 	addi	r17,r17,-1
 4007360:	88000c16 	blt	r17,zero,4007394 <_fwalk_reent+0x84>
 4007364:	84000304 	addi	r16,r16,12
 4007368:	8080000b 	ldhu	r2,0(r16)
 400736c:	8c7fffc4 	addi	r17,r17,-1
 4007370:	817ffd04 	addi	r5,r16,-12
 4007374:	b080052e 	bgeu	r22,r2,400738c <_fwalk_reent+0x7c>
 4007378:	8080008f 	ldh	r2,2(r16)
 400737c:	9809883a 	mov	r4,r19
 4007380:	14800226 	beq	r2,r18,400738c <_fwalk_reent+0x7c>
 4007384:	a83ee83a 	callr	r21
 4007388:	b8aeb03a 	or	r23,r23,r2
 400738c:	84001a04 	addi	r16,r16,104
 4007390:	8cbff51e 	bne	r17,r18,4007368 <__reset+0xfa817368>
 4007394:	a5000017 	ldw	r20,0(r20)
 4007398:	a03fee1e 	bne	r20,zero,4007354 <__reset+0xfa817354>
 400739c:	b805883a 	mov	r2,r23
 40073a0:	dfc00817 	ldw	ra,32(sp)
 40073a4:	ddc00717 	ldw	r23,28(sp)
 40073a8:	dd800617 	ldw	r22,24(sp)
 40073ac:	dd400517 	ldw	r21,20(sp)
 40073b0:	dd000417 	ldw	r20,16(sp)
 40073b4:	dcc00317 	ldw	r19,12(sp)
 40073b8:	dc800217 	ldw	r18,8(sp)
 40073bc:	dc400117 	ldw	r17,4(sp)
 40073c0:	dc000017 	ldw	r16,0(sp)
 40073c4:	dec00904 	addi	sp,sp,36
 40073c8:	f800283a 	ret
 40073cc:	002f883a 	mov	r23,zero
 40073d0:	003ff206 	br	400739c <__reset+0xfa81739c>

040073d4 <_setlocale_r>:
 40073d4:	30001b26 	beq	r6,zero,4007444 <_setlocale_r+0x70>
 40073d8:	01410074 	movhi	r5,1025
 40073dc:	defffe04 	addi	sp,sp,-8
 40073e0:	29549504 	addi	r5,r5,21076
 40073e4:	3009883a 	mov	r4,r6
 40073e8:	dc000015 	stw	r16,0(sp)
 40073ec:	dfc00115 	stw	ra,4(sp)
 40073f0:	3021883a 	mov	r16,r6
 40073f4:	40099440 	call	4009944 <strcmp>
 40073f8:	1000061e 	bne	r2,zero,4007414 <_setlocale_r+0x40>
 40073fc:	00810074 	movhi	r2,1025
 4007400:	10949404 	addi	r2,r2,21072
 4007404:	dfc00117 	ldw	ra,4(sp)
 4007408:	dc000017 	ldw	r16,0(sp)
 400740c:	dec00204 	addi	sp,sp,8
 4007410:	f800283a 	ret
 4007414:	01410074 	movhi	r5,1025
 4007418:	29549404 	addi	r5,r5,21072
 400741c:	8009883a 	mov	r4,r16
 4007420:	40099440 	call	4009944 <strcmp>
 4007424:	103ff526 	beq	r2,zero,40073fc <__reset+0xfa8173fc>
 4007428:	01410074 	movhi	r5,1025
 400742c:	29547f04 	addi	r5,r5,20988
 4007430:	8009883a 	mov	r4,r16
 4007434:	40099440 	call	4009944 <strcmp>
 4007438:	103ff026 	beq	r2,zero,40073fc <__reset+0xfa8173fc>
 400743c:	0005883a 	mov	r2,zero
 4007440:	003ff006 	br	4007404 <__reset+0xfa817404>
 4007444:	00810074 	movhi	r2,1025
 4007448:	10949404 	addi	r2,r2,21072
 400744c:	f800283a 	ret

04007450 <__locale_charset>:
 4007450:	00810074 	movhi	r2,1025
 4007454:	10972604 	addi	r2,r2,23704
 4007458:	f800283a 	ret

0400745c <__locale_mb_cur_max>:
 400745c:	00810074 	movhi	r2,1025
 4007460:	109d0704 	addi	r2,r2,29724
 4007464:	10800017 	ldw	r2,0(r2)
 4007468:	f800283a 	ret

0400746c <__locale_msgcharset>:
 400746c:	00810074 	movhi	r2,1025
 4007470:	10971e04 	addi	r2,r2,23672
 4007474:	f800283a 	ret

04007478 <__locale_cjk_lang>:
 4007478:	0005883a 	mov	r2,zero
 400747c:	f800283a 	ret

04007480 <_localeconv_r>:
 4007480:	00810074 	movhi	r2,1025
 4007484:	10972e04 	addi	r2,r2,23736
 4007488:	f800283a 	ret

0400748c <setlocale>:
 400748c:	00810074 	movhi	r2,1025
 4007490:	109d0604 	addi	r2,r2,29720
 4007494:	280d883a 	mov	r6,r5
 4007498:	200b883a 	mov	r5,r4
 400749c:	11000017 	ldw	r4,0(r2)
 40074a0:	40073d41 	jmpi	40073d4 <_setlocale_r>

040074a4 <localeconv>:
 40074a4:	00810074 	movhi	r2,1025
 40074a8:	10972e04 	addi	r2,r2,23736
 40074ac:	f800283a 	ret

040074b0 <__smakebuf_r>:
 40074b0:	2880030b 	ldhu	r2,12(r5)
 40074b4:	10c0008c 	andi	r3,r2,2
 40074b8:	1800411e 	bne	r3,zero,40075c0 <__smakebuf_r+0x110>
 40074bc:	deffec04 	addi	sp,sp,-80
 40074c0:	dc000f15 	stw	r16,60(sp)
 40074c4:	2821883a 	mov	r16,r5
 40074c8:	2940038f 	ldh	r5,14(r5)
 40074cc:	dc401015 	stw	r17,64(sp)
 40074d0:	dfc01315 	stw	ra,76(sp)
 40074d4:	dcc01215 	stw	r19,72(sp)
 40074d8:	dc801115 	stw	r18,68(sp)
 40074dc:	2023883a 	mov	r17,r4
 40074e0:	28001c16 	blt	r5,zero,4007554 <__smakebuf_r+0xa4>
 40074e4:	d80d883a 	mov	r6,sp
 40074e8:	400b4ec0 	call	400b4ec <_fstat_r>
 40074ec:	10001816 	blt	r2,zero,4007550 <__smakebuf_r+0xa0>
 40074f0:	d8800117 	ldw	r2,4(sp)
 40074f4:	00e00014 	movui	r3,32768
 40074f8:	10bc000c 	andi	r2,r2,61440
 40074fc:	14c80020 	cmpeqi	r19,r2,8192
 4007500:	10c03726 	beq	r2,r3,40075e0 <__smakebuf_r+0x130>
 4007504:	80c0030b 	ldhu	r3,12(r16)
 4007508:	18c20014 	ori	r3,r3,2048
 400750c:	80c0030d 	sth	r3,12(r16)
 4007510:	00c80004 	movi	r3,8192
 4007514:	10c0521e 	bne	r2,r3,4007660 <__smakebuf_r+0x1b0>
 4007518:	8140038f 	ldh	r5,14(r16)
 400751c:	8809883a 	mov	r4,r17
 4007520:	400b5480 	call	400b548 <_isatty_r>
 4007524:	10004c26 	beq	r2,zero,4007658 <__smakebuf_r+0x1a8>
 4007528:	8080030b 	ldhu	r2,12(r16)
 400752c:	80c010c4 	addi	r3,r16,67
 4007530:	80c00015 	stw	r3,0(r16)
 4007534:	10800054 	ori	r2,r2,1
 4007538:	8080030d 	sth	r2,12(r16)
 400753c:	00800044 	movi	r2,1
 4007540:	80c00415 	stw	r3,16(r16)
 4007544:	80800515 	stw	r2,20(r16)
 4007548:	04810004 	movi	r18,1024
 400754c:	00000706 	br	400756c <__smakebuf_r+0xbc>
 4007550:	8080030b 	ldhu	r2,12(r16)
 4007554:	10c0200c 	andi	r3,r2,128
 4007558:	18001f1e 	bne	r3,zero,40075d8 <__smakebuf_r+0x128>
 400755c:	04810004 	movi	r18,1024
 4007560:	10820014 	ori	r2,r2,2048
 4007564:	8080030d 	sth	r2,12(r16)
 4007568:	0027883a 	mov	r19,zero
 400756c:	900b883a 	mov	r5,r18
 4007570:	8809883a 	mov	r4,r17
 4007574:	400766c0 	call	400766c <_malloc_r>
 4007578:	10002c26 	beq	r2,zero,400762c <__smakebuf_r+0x17c>
 400757c:	80c0030b 	ldhu	r3,12(r16)
 4007580:	01010034 	movhi	r4,1024
 4007584:	21197104 	addi	r4,r4,26052
 4007588:	89000f15 	stw	r4,60(r17)
 400758c:	18c02014 	ori	r3,r3,128
 4007590:	80c0030d 	sth	r3,12(r16)
 4007594:	80800015 	stw	r2,0(r16)
 4007598:	80800415 	stw	r2,16(r16)
 400759c:	84800515 	stw	r18,20(r16)
 40075a0:	98001a1e 	bne	r19,zero,400760c <__smakebuf_r+0x15c>
 40075a4:	dfc01317 	ldw	ra,76(sp)
 40075a8:	dcc01217 	ldw	r19,72(sp)
 40075ac:	dc801117 	ldw	r18,68(sp)
 40075b0:	dc401017 	ldw	r17,64(sp)
 40075b4:	dc000f17 	ldw	r16,60(sp)
 40075b8:	dec01404 	addi	sp,sp,80
 40075bc:	f800283a 	ret
 40075c0:	288010c4 	addi	r2,r5,67
 40075c4:	28800015 	stw	r2,0(r5)
 40075c8:	28800415 	stw	r2,16(r5)
 40075cc:	00800044 	movi	r2,1
 40075d0:	28800515 	stw	r2,20(r5)
 40075d4:	f800283a 	ret
 40075d8:	04801004 	movi	r18,64
 40075dc:	003fe006 	br	4007560 <__reset+0xfa817560>
 40075e0:	81000a17 	ldw	r4,40(r16)
 40075e4:	00c10074 	movhi	r3,1025
 40075e8:	18e63804 	addi	r3,r3,-26400
 40075ec:	20ffc51e 	bne	r4,r3,4007504 <__reset+0xfa817504>
 40075f0:	8080030b 	ldhu	r2,12(r16)
 40075f4:	04810004 	movi	r18,1024
 40075f8:	84801315 	stw	r18,76(r16)
 40075fc:	1484b03a 	or	r2,r2,r18
 4007600:	8080030d 	sth	r2,12(r16)
 4007604:	0027883a 	mov	r19,zero
 4007608:	003fd806 	br	400756c <__reset+0xfa81756c>
 400760c:	8140038f 	ldh	r5,14(r16)
 4007610:	8809883a 	mov	r4,r17
 4007614:	400b5480 	call	400b548 <_isatty_r>
 4007618:	103fe226 	beq	r2,zero,40075a4 <__reset+0xfa8175a4>
 400761c:	8080030b 	ldhu	r2,12(r16)
 4007620:	10800054 	ori	r2,r2,1
 4007624:	8080030d 	sth	r2,12(r16)
 4007628:	003fde06 	br	40075a4 <__reset+0xfa8175a4>
 400762c:	8080030b 	ldhu	r2,12(r16)
 4007630:	10c0800c 	andi	r3,r2,512
 4007634:	183fdb1e 	bne	r3,zero,40075a4 <__reset+0xfa8175a4>
 4007638:	10800094 	ori	r2,r2,2
 400763c:	80c010c4 	addi	r3,r16,67
 4007640:	8080030d 	sth	r2,12(r16)
 4007644:	00800044 	movi	r2,1
 4007648:	80c00015 	stw	r3,0(r16)
 400764c:	80c00415 	stw	r3,16(r16)
 4007650:	80800515 	stw	r2,20(r16)
 4007654:	003fd306 	br	40075a4 <__reset+0xfa8175a4>
 4007658:	04810004 	movi	r18,1024
 400765c:	003fc306 	br	400756c <__reset+0xfa81756c>
 4007660:	0027883a 	mov	r19,zero
 4007664:	04810004 	movi	r18,1024
 4007668:	003fc006 	br	400756c <__reset+0xfa81756c>

0400766c <_malloc_r>:
 400766c:	defff504 	addi	sp,sp,-44
 4007670:	dc800315 	stw	r18,12(sp)
 4007674:	dfc00a15 	stw	ra,40(sp)
 4007678:	df000915 	stw	fp,36(sp)
 400767c:	ddc00815 	stw	r23,32(sp)
 4007680:	dd800715 	stw	r22,28(sp)
 4007684:	dd400615 	stw	r21,24(sp)
 4007688:	dd000515 	stw	r20,20(sp)
 400768c:	dcc00415 	stw	r19,16(sp)
 4007690:	dc400215 	stw	r17,8(sp)
 4007694:	dc000115 	stw	r16,4(sp)
 4007698:	288002c4 	addi	r2,r5,11
 400769c:	00c00584 	movi	r3,22
 40076a0:	2025883a 	mov	r18,r4
 40076a4:	18807f2e 	bgeu	r3,r2,40078a4 <_malloc_r+0x238>
 40076a8:	047ffe04 	movi	r17,-8
 40076ac:	1462703a 	and	r17,r2,r17
 40076b0:	8800a316 	blt	r17,zero,4007940 <_malloc_r+0x2d4>
 40076b4:	8940a236 	bltu	r17,r5,4007940 <_malloc_r+0x2d4>
 40076b8:	400f4c40 	call	400f4c4 <__malloc_lock>
 40076bc:	00807dc4 	movi	r2,503
 40076c0:	1441e92e 	bgeu	r2,r17,4007e68 <_malloc_r+0x7fc>
 40076c4:	8804d27a 	srli	r2,r17,9
 40076c8:	1000a126 	beq	r2,zero,4007950 <_malloc_r+0x2e4>
 40076cc:	00c00104 	movi	r3,4
 40076d0:	18811e36 	bltu	r3,r2,4007b4c <_malloc_r+0x4e0>
 40076d4:	8804d1ba 	srli	r2,r17,6
 40076d8:	12000e44 	addi	r8,r2,57
 40076dc:	11c00e04 	addi	r7,r2,56
 40076e0:	4209883a 	add	r4,r8,r8
 40076e4:	04c10074 	movhi	r19,1025
 40076e8:	2109883a 	add	r4,r4,r4
 40076ec:	9cd73c04 	addi	r19,r19,23792
 40076f0:	2109883a 	add	r4,r4,r4
 40076f4:	9909883a 	add	r4,r19,r4
 40076f8:	24000117 	ldw	r16,4(r4)
 40076fc:	213ffe04 	addi	r4,r4,-8
 4007700:	24009726 	beq	r4,r16,4007960 <_malloc_r+0x2f4>
 4007704:	80800117 	ldw	r2,4(r16)
 4007708:	01bfff04 	movi	r6,-4
 400770c:	014003c4 	movi	r5,15
 4007710:	1184703a 	and	r2,r2,r6
 4007714:	1447c83a 	sub	r3,r2,r17
 4007718:	28c00716 	blt	r5,r3,4007738 <_malloc_r+0xcc>
 400771c:	1800920e 	bge	r3,zero,4007968 <_malloc_r+0x2fc>
 4007720:	84000317 	ldw	r16,12(r16)
 4007724:	24008e26 	beq	r4,r16,4007960 <_malloc_r+0x2f4>
 4007728:	80800117 	ldw	r2,4(r16)
 400772c:	1184703a 	and	r2,r2,r6
 4007730:	1447c83a 	sub	r3,r2,r17
 4007734:	28fff90e 	bge	r5,r3,400771c <__reset+0xfa81771c>
 4007738:	3809883a 	mov	r4,r7
 400773c:	01810074 	movhi	r6,1025
 4007740:	9c000417 	ldw	r16,16(r19)
 4007744:	31973c04 	addi	r6,r6,23792
 4007748:	32000204 	addi	r8,r6,8
 400774c:	82013426 	beq	r16,r8,4007c20 <_malloc_r+0x5b4>
 4007750:	80c00117 	ldw	r3,4(r16)
 4007754:	00bfff04 	movi	r2,-4
 4007758:	188e703a 	and	r7,r3,r2
 400775c:	3c45c83a 	sub	r2,r7,r17
 4007760:	00c003c4 	movi	r3,15
 4007764:	18811f16 	blt	r3,r2,4007be4 <_malloc_r+0x578>
 4007768:	32000515 	stw	r8,20(r6)
 400776c:	32000415 	stw	r8,16(r6)
 4007770:	10007f0e 	bge	r2,zero,4007970 <_malloc_r+0x304>
 4007774:	00807fc4 	movi	r2,511
 4007778:	11c0fd36 	bltu	r2,r7,4007b70 <_malloc_r+0x504>
 400777c:	3806d0fa 	srli	r3,r7,3
 4007780:	01c00044 	movi	r7,1
 4007784:	30800117 	ldw	r2,4(r6)
 4007788:	19400044 	addi	r5,r3,1
 400778c:	294b883a 	add	r5,r5,r5
 4007790:	1807d0ba 	srai	r3,r3,2
 4007794:	294b883a 	add	r5,r5,r5
 4007798:	294b883a 	add	r5,r5,r5
 400779c:	298b883a 	add	r5,r5,r6
 40077a0:	38c6983a 	sll	r3,r7,r3
 40077a4:	29c00017 	ldw	r7,0(r5)
 40077a8:	2a7ffe04 	addi	r9,r5,-8
 40077ac:	1886b03a 	or	r3,r3,r2
 40077b0:	82400315 	stw	r9,12(r16)
 40077b4:	81c00215 	stw	r7,8(r16)
 40077b8:	30c00115 	stw	r3,4(r6)
 40077bc:	2c000015 	stw	r16,0(r5)
 40077c0:	3c000315 	stw	r16,12(r7)
 40077c4:	2005d0ba 	srai	r2,r4,2
 40077c8:	01400044 	movi	r5,1
 40077cc:	288a983a 	sll	r5,r5,r2
 40077d0:	19406f36 	bltu	r3,r5,4007990 <_malloc_r+0x324>
 40077d4:	28c4703a 	and	r2,r5,r3
 40077d8:	10000a1e 	bne	r2,zero,4007804 <_malloc_r+0x198>
 40077dc:	00bfff04 	movi	r2,-4
 40077e0:	294b883a 	add	r5,r5,r5
 40077e4:	2088703a 	and	r4,r4,r2
 40077e8:	28c4703a 	and	r2,r5,r3
 40077ec:	21000104 	addi	r4,r4,4
 40077f0:	1000041e 	bne	r2,zero,4007804 <_malloc_r+0x198>
 40077f4:	294b883a 	add	r5,r5,r5
 40077f8:	28c4703a 	and	r2,r5,r3
 40077fc:	21000104 	addi	r4,r4,4
 4007800:	103ffc26 	beq	r2,zero,40077f4 <__reset+0xfa8177f4>
 4007804:	02bfff04 	movi	r10,-4
 4007808:	024003c4 	movi	r9,15
 400780c:	21800044 	addi	r6,r4,1
 4007810:	318d883a 	add	r6,r6,r6
 4007814:	318d883a 	add	r6,r6,r6
 4007818:	318d883a 	add	r6,r6,r6
 400781c:	998d883a 	add	r6,r19,r6
 4007820:	333ffe04 	addi	r12,r6,-8
 4007824:	2017883a 	mov	r11,r4
 4007828:	31800104 	addi	r6,r6,4
 400782c:	34000017 	ldw	r16,0(r6)
 4007830:	31fffd04 	addi	r7,r6,-12
 4007834:	81c0041e 	bne	r16,r7,4007848 <_malloc_r+0x1dc>
 4007838:	0000fb06 	br	4007c28 <_malloc_r+0x5bc>
 400783c:	1801030e 	bge	r3,zero,4007c4c <_malloc_r+0x5e0>
 4007840:	84000317 	ldw	r16,12(r16)
 4007844:	81c0f826 	beq	r16,r7,4007c28 <_malloc_r+0x5bc>
 4007848:	80800117 	ldw	r2,4(r16)
 400784c:	1284703a 	and	r2,r2,r10
 4007850:	1447c83a 	sub	r3,r2,r17
 4007854:	48fff90e 	bge	r9,r3,400783c <__reset+0xfa81783c>
 4007858:	80800317 	ldw	r2,12(r16)
 400785c:	81000217 	ldw	r4,8(r16)
 4007860:	89400054 	ori	r5,r17,1
 4007864:	81400115 	stw	r5,4(r16)
 4007868:	20800315 	stw	r2,12(r4)
 400786c:	11000215 	stw	r4,8(r2)
 4007870:	8463883a 	add	r17,r16,r17
 4007874:	9c400515 	stw	r17,20(r19)
 4007878:	9c400415 	stw	r17,16(r19)
 400787c:	18800054 	ori	r2,r3,1
 4007880:	88800115 	stw	r2,4(r17)
 4007884:	8a000315 	stw	r8,12(r17)
 4007888:	8a000215 	stw	r8,8(r17)
 400788c:	88e3883a 	add	r17,r17,r3
 4007890:	88c00015 	stw	r3,0(r17)
 4007894:	9009883a 	mov	r4,r18
 4007898:	400f4e80 	call	400f4e8 <__malloc_unlock>
 400789c:	80800204 	addi	r2,r16,8
 40078a0:	00001b06 	br	4007910 <_malloc_r+0x2a4>
 40078a4:	04400404 	movi	r17,16
 40078a8:	89402536 	bltu	r17,r5,4007940 <_malloc_r+0x2d4>
 40078ac:	400f4c40 	call	400f4c4 <__malloc_lock>
 40078b0:	00800184 	movi	r2,6
 40078b4:	01000084 	movi	r4,2
 40078b8:	04c10074 	movhi	r19,1025
 40078bc:	1085883a 	add	r2,r2,r2
 40078c0:	9cd73c04 	addi	r19,r19,23792
 40078c4:	1085883a 	add	r2,r2,r2
 40078c8:	9885883a 	add	r2,r19,r2
 40078cc:	14000117 	ldw	r16,4(r2)
 40078d0:	10fffe04 	addi	r3,r2,-8
 40078d4:	80c0d926 	beq	r16,r3,4007c3c <_malloc_r+0x5d0>
 40078d8:	80c00117 	ldw	r3,4(r16)
 40078dc:	81000317 	ldw	r4,12(r16)
 40078e0:	00bfff04 	movi	r2,-4
 40078e4:	1884703a 	and	r2,r3,r2
 40078e8:	81400217 	ldw	r5,8(r16)
 40078ec:	8085883a 	add	r2,r16,r2
 40078f0:	10c00117 	ldw	r3,4(r2)
 40078f4:	29000315 	stw	r4,12(r5)
 40078f8:	21400215 	stw	r5,8(r4)
 40078fc:	18c00054 	ori	r3,r3,1
 4007900:	10c00115 	stw	r3,4(r2)
 4007904:	9009883a 	mov	r4,r18
 4007908:	400f4e80 	call	400f4e8 <__malloc_unlock>
 400790c:	80800204 	addi	r2,r16,8
 4007910:	dfc00a17 	ldw	ra,40(sp)
 4007914:	df000917 	ldw	fp,36(sp)
 4007918:	ddc00817 	ldw	r23,32(sp)
 400791c:	dd800717 	ldw	r22,28(sp)
 4007920:	dd400617 	ldw	r21,24(sp)
 4007924:	dd000517 	ldw	r20,20(sp)
 4007928:	dcc00417 	ldw	r19,16(sp)
 400792c:	dc800317 	ldw	r18,12(sp)
 4007930:	dc400217 	ldw	r17,8(sp)
 4007934:	dc000117 	ldw	r16,4(sp)
 4007938:	dec00b04 	addi	sp,sp,44
 400793c:	f800283a 	ret
 4007940:	00800304 	movi	r2,12
 4007944:	90800015 	stw	r2,0(r18)
 4007948:	0005883a 	mov	r2,zero
 400794c:	003ff006 	br	4007910 <__reset+0xfa817910>
 4007950:	01002004 	movi	r4,128
 4007954:	02001004 	movi	r8,64
 4007958:	01c00fc4 	movi	r7,63
 400795c:	003f6106 	br	40076e4 <__reset+0xfa8176e4>
 4007960:	4009883a 	mov	r4,r8
 4007964:	003f7506 	br	400773c <__reset+0xfa81773c>
 4007968:	81000317 	ldw	r4,12(r16)
 400796c:	003fde06 	br	40078e8 <__reset+0xfa8178e8>
 4007970:	81c5883a 	add	r2,r16,r7
 4007974:	11400117 	ldw	r5,4(r2)
 4007978:	9009883a 	mov	r4,r18
 400797c:	29400054 	ori	r5,r5,1
 4007980:	11400115 	stw	r5,4(r2)
 4007984:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4007988:	80800204 	addi	r2,r16,8
 400798c:	003fe006 	br	4007910 <__reset+0xfa817910>
 4007990:	9c000217 	ldw	r16,8(r19)
 4007994:	00bfff04 	movi	r2,-4
 4007998:	85800117 	ldw	r22,4(r16)
 400799c:	b0ac703a 	and	r22,r22,r2
 40079a0:	b4400336 	bltu	r22,r17,40079b0 <_malloc_r+0x344>
 40079a4:	b445c83a 	sub	r2,r22,r17
 40079a8:	00c003c4 	movi	r3,15
 40079ac:	18805d16 	blt	r3,r2,4007b24 <_malloc_r+0x4b8>
 40079b0:	05c10074 	movhi	r23,1025
 40079b4:	00810074 	movhi	r2,1025
 40079b8:	109d2004 	addi	r2,r2,29824
 40079bc:	bddd0804 	addi	r23,r23,29728
 40079c0:	15400017 	ldw	r21,0(r2)
 40079c4:	b8c00017 	ldw	r3,0(r23)
 40079c8:	00bfffc4 	movi	r2,-1
 40079cc:	858d883a 	add	r6,r16,r22
 40079d0:	8d6b883a 	add	r21,r17,r21
 40079d4:	1880ea26 	beq	r3,r2,4007d80 <_malloc_r+0x714>
 40079d8:	ad4403c4 	addi	r21,r21,4111
 40079dc:	00bc0004 	movi	r2,-4096
 40079e0:	a8aa703a 	and	r21,r21,r2
 40079e4:	a80b883a 	mov	r5,r21
 40079e8:	9009883a 	mov	r4,r18
 40079ec:	d9800015 	stw	r6,0(sp)
 40079f0:	40097b40 	call	40097b4 <_sbrk_r>
 40079f4:	1029883a 	mov	r20,r2
 40079f8:	00bfffc4 	movi	r2,-1
 40079fc:	d9800017 	ldw	r6,0(sp)
 4007a00:	a080e826 	beq	r20,r2,4007da4 <_malloc_r+0x738>
 4007a04:	a180a636 	bltu	r20,r6,4007ca0 <_malloc_r+0x634>
 4007a08:	07010074 	movhi	fp,1025
 4007a0c:	e71d2904 	addi	fp,fp,29860
 4007a10:	e0800017 	ldw	r2,0(fp)
 4007a14:	a887883a 	add	r3,r21,r2
 4007a18:	e0c00015 	stw	r3,0(fp)
 4007a1c:	3500e626 	beq	r6,r20,4007db8 <_malloc_r+0x74c>
 4007a20:	b9000017 	ldw	r4,0(r23)
 4007a24:	00bfffc4 	movi	r2,-1
 4007a28:	2080ee26 	beq	r4,r2,4007de4 <_malloc_r+0x778>
 4007a2c:	a185c83a 	sub	r2,r20,r6
 4007a30:	10c5883a 	add	r2,r2,r3
 4007a34:	e0800015 	stw	r2,0(fp)
 4007a38:	a0c001cc 	andi	r3,r20,7
 4007a3c:	1800bc26 	beq	r3,zero,4007d30 <_malloc_r+0x6c4>
 4007a40:	a0e9c83a 	sub	r20,r20,r3
 4007a44:	00840204 	movi	r2,4104
 4007a48:	a5000204 	addi	r20,r20,8
 4007a4c:	10c7c83a 	sub	r3,r2,r3
 4007a50:	a545883a 	add	r2,r20,r21
 4007a54:	1083ffcc 	andi	r2,r2,4095
 4007a58:	18abc83a 	sub	r21,r3,r2
 4007a5c:	a80b883a 	mov	r5,r21
 4007a60:	9009883a 	mov	r4,r18
 4007a64:	40097b40 	call	40097b4 <_sbrk_r>
 4007a68:	00ffffc4 	movi	r3,-1
 4007a6c:	10c0e126 	beq	r2,r3,4007df4 <_malloc_r+0x788>
 4007a70:	1505c83a 	sub	r2,r2,r20
 4007a74:	1545883a 	add	r2,r2,r21
 4007a78:	10800054 	ori	r2,r2,1
 4007a7c:	e0c00017 	ldw	r3,0(fp)
 4007a80:	9d000215 	stw	r20,8(r19)
 4007a84:	a0800115 	stw	r2,4(r20)
 4007a88:	a8c7883a 	add	r3,r21,r3
 4007a8c:	e0c00015 	stw	r3,0(fp)
 4007a90:	84c00e26 	beq	r16,r19,4007acc <_malloc_r+0x460>
 4007a94:	018003c4 	movi	r6,15
 4007a98:	3580a72e 	bgeu	r6,r22,4007d38 <_malloc_r+0x6cc>
 4007a9c:	81400117 	ldw	r5,4(r16)
 4007aa0:	013ffe04 	movi	r4,-8
 4007aa4:	b0bffd04 	addi	r2,r22,-12
 4007aa8:	1104703a 	and	r2,r2,r4
 4007aac:	2900004c 	andi	r4,r5,1
 4007ab0:	2088b03a 	or	r4,r4,r2
 4007ab4:	81000115 	stw	r4,4(r16)
 4007ab8:	01400144 	movi	r5,5
 4007abc:	8089883a 	add	r4,r16,r2
 4007ac0:	21400115 	stw	r5,4(r4)
 4007ac4:	21400215 	stw	r5,8(r4)
 4007ac8:	3080cd36 	bltu	r6,r2,4007e00 <_malloc_r+0x794>
 4007acc:	00810074 	movhi	r2,1025
 4007ad0:	109d1f04 	addi	r2,r2,29820
 4007ad4:	11000017 	ldw	r4,0(r2)
 4007ad8:	20c0012e 	bgeu	r4,r3,4007ae0 <_malloc_r+0x474>
 4007adc:	10c00015 	stw	r3,0(r2)
 4007ae0:	00810074 	movhi	r2,1025
 4007ae4:	109d1e04 	addi	r2,r2,29816
 4007ae8:	11000017 	ldw	r4,0(r2)
 4007aec:	9c000217 	ldw	r16,8(r19)
 4007af0:	20c0012e 	bgeu	r4,r3,4007af8 <_malloc_r+0x48c>
 4007af4:	10c00015 	stw	r3,0(r2)
 4007af8:	80c00117 	ldw	r3,4(r16)
 4007afc:	00bfff04 	movi	r2,-4
 4007b00:	1886703a 	and	r3,r3,r2
 4007b04:	1c45c83a 	sub	r2,r3,r17
 4007b08:	1c400236 	bltu	r3,r17,4007b14 <_malloc_r+0x4a8>
 4007b0c:	00c003c4 	movi	r3,15
 4007b10:	18800416 	blt	r3,r2,4007b24 <_malloc_r+0x4b8>
 4007b14:	9009883a 	mov	r4,r18
 4007b18:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4007b1c:	0005883a 	mov	r2,zero
 4007b20:	003f7b06 	br	4007910 <__reset+0xfa817910>
 4007b24:	88c00054 	ori	r3,r17,1
 4007b28:	80c00115 	stw	r3,4(r16)
 4007b2c:	8463883a 	add	r17,r16,r17
 4007b30:	10800054 	ori	r2,r2,1
 4007b34:	9c400215 	stw	r17,8(r19)
 4007b38:	88800115 	stw	r2,4(r17)
 4007b3c:	9009883a 	mov	r4,r18
 4007b40:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4007b44:	80800204 	addi	r2,r16,8
 4007b48:	003f7106 	br	4007910 <__reset+0xfa817910>
 4007b4c:	00c00504 	movi	r3,20
 4007b50:	18804a2e 	bgeu	r3,r2,4007c7c <_malloc_r+0x610>
 4007b54:	00c01504 	movi	r3,84
 4007b58:	18806e36 	bltu	r3,r2,4007d14 <_malloc_r+0x6a8>
 4007b5c:	8804d33a 	srli	r2,r17,12
 4007b60:	12001bc4 	addi	r8,r2,111
 4007b64:	11c01b84 	addi	r7,r2,110
 4007b68:	4209883a 	add	r4,r8,r8
 4007b6c:	003edd06 	br	40076e4 <__reset+0xfa8176e4>
 4007b70:	3804d27a 	srli	r2,r7,9
 4007b74:	00c00104 	movi	r3,4
 4007b78:	1880442e 	bgeu	r3,r2,4007c8c <_malloc_r+0x620>
 4007b7c:	00c00504 	movi	r3,20
 4007b80:	18808136 	bltu	r3,r2,4007d88 <_malloc_r+0x71c>
 4007b84:	11401704 	addi	r5,r2,92
 4007b88:	10c016c4 	addi	r3,r2,91
 4007b8c:	294b883a 	add	r5,r5,r5
 4007b90:	294b883a 	add	r5,r5,r5
 4007b94:	294b883a 	add	r5,r5,r5
 4007b98:	994b883a 	add	r5,r19,r5
 4007b9c:	28800017 	ldw	r2,0(r5)
 4007ba0:	01810074 	movhi	r6,1025
 4007ba4:	297ffe04 	addi	r5,r5,-8
 4007ba8:	31973c04 	addi	r6,r6,23792
 4007bac:	28806526 	beq	r5,r2,4007d44 <_malloc_r+0x6d8>
 4007bb0:	01bfff04 	movi	r6,-4
 4007bb4:	10c00117 	ldw	r3,4(r2)
 4007bb8:	1986703a 	and	r3,r3,r6
 4007bbc:	38c0022e 	bgeu	r7,r3,4007bc8 <_malloc_r+0x55c>
 4007bc0:	10800217 	ldw	r2,8(r2)
 4007bc4:	28bffb1e 	bne	r5,r2,4007bb4 <__reset+0xfa817bb4>
 4007bc8:	11400317 	ldw	r5,12(r2)
 4007bcc:	98c00117 	ldw	r3,4(r19)
 4007bd0:	81400315 	stw	r5,12(r16)
 4007bd4:	80800215 	stw	r2,8(r16)
 4007bd8:	2c000215 	stw	r16,8(r5)
 4007bdc:	14000315 	stw	r16,12(r2)
 4007be0:	003ef806 	br	40077c4 <__reset+0xfa8177c4>
 4007be4:	88c00054 	ori	r3,r17,1
 4007be8:	80c00115 	stw	r3,4(r16)
 4007bec:	8463883a 	add	r17,r16,r17
 4007bf0:	34400515 	stw	r17,20(r6)
 4007bf4:	34400415 	stw	r17,16(r6)
 4007bf8:	10c00054 	ori	r3,r2,1
 4007bfc:	8a000315 	stw	r8,12(r17)
 4007c00:	8a000215 	stw	r8,8(r17)
 4007c04:	88c00115 	stw	r3,4(r17)
 4007c08:	88a3883a 	add	r17,r17,r2
 4007c0c:	88800015 	stw	r2,0(r17)
 4007c10:	9009883a 	mov	r4,r18
 4007c14:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4007c18:	80800204 	addi	r2,r16,8
 4007c1c:	003f3c06 	br	4007910 <__reset+0xfa817910>
 4007c20:	30c00117 	ldw	r3,4(r6)
 4007c24:	003ee706 	br	40077c4 <__reset+0xfa8177c4>
 4007c28:	5ac00044 	addi	r11,r11,1
 4007c2c:	588000cc 	andi	r2,r11,3
 4007c30:	31800204 	addi	r6,r6,8
 4007c34:	103efd1e 	bne	r2,zero,400782c <__reset+0xfa81782c>
 4007c38:	00002406 	br	4007ccc <_malloc_r+0x660>
 4007c3c:	14000317 	ldw	r16,12(r2)
 4007c40:	143f251e 	bne	r2,r16,40078d8 <__reset+0xfa8178d8>
 4007c44:	21000084 	addi	r4,r4,2
 4007c48:	003ebc06 	br	400773c <__reset+0xfa81773c>
 4007c4c:	8085883a 	add	r2,r16,r2
 4007c50:	10c00117 	ldw	r3,4(r2)
 4007c54:	81000317 	ldw	r4,12(r16)
 4007c58:	81400217 	ldw	r5,8(r16)
 4007c5c:	18c00054 	ori	r3,r3,1
 4007c60:	10c00115 	stw	r3,4(r2)
 4007c64:	29000315 	stw	r4,12(r5)
 4007c68:	21400215 	stw	r5,8(r4)
 4007c6c:	9009883a 	mov	r4,r18
 4007c70:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4007c74:	80800204 	addi	r2,r16,8
 4007c78:	003f2506 	br	4007910 <__reset+0xfa817910>
 4007c7c:	12001704 	addi	r8,r2,92
 4007c80:	11c016c4 	addi	r7,r2,91
 4007c84:	4209883a 	add	r4,r8,r8
 4007c88:	003e9606 	br	40076e4 <__reset+0xfa8176e4>
 4007c8c:	3804d1ba 	srli	r2,r7,6
 4007c90:	11400e44 	addi	r5,r2,57
 4007c94:	10c00e04 	addi	r3,r2,56
 4007c98:	294b883a 	add	r5,r5,r5
 4007c9c:	003fbc06 	br	4007b90 <__reset+0xfa817b90>
 4007ca0:	84ff5926 	beq	r16,r19,4007a08 <__reset+0xfa817a08>
 4007ca4:	00810074 	movhi	r2,1025
 4007ca8:	10973c04 	addi	r2,r2,23792
 4007cac:	14000217 	ldw	r16,8(r2)
 4007cb0:	00bfff04 	movi	r2,-4
 4007cb4:	80c00117 	ldw	r3,4(r16)
 4007cb8:	1886703a 	and	r3,r3,r2
 4007cbc:	003f9106 	br	4007b04 <__reset+0xfa817b04>
 4007cc0:	60800217 	ldw	r2,8(r12)
 4007cc4:	213fffc4 	addi	r4,r4,-1
 4007cc8:	1300651e 	bne	r2,r12,4007e60 <_malloc_r+0x7f4>
 4007ccc:	208000cc 	andi	r2,r4,3
 4007cd0:	633ffe04 	addi	r12,r12,-8
 4007cd4:	103ffa1e 	bne	r2,zero,4007cc0 <__reset+0xfa817cc0>
 4007cd8:	98800117 	ldw	r2,4(r19)
 4007cdc:	0146303a 	nor	r3,zero,r5
 4007ce0:	1884703a 	and	r2,r3,r2
 4007ce4:	98800115 	stw	r2,4(r19)
 4007ce8:	294b883a 	add	r5,r5,r5
 4007cec:	117f2836 	bltu	r2,r5,4007990 <__reset+0xfa817990>
 4007cf0:	283f2726 	beq	r5,zero,4007990 <__reset+0xfa817990>
 4007cf4:	2886703a 	and	r3,r5,r2
 4007cf8:	5809883a 	mov	r4,r11
 4007cfc:	183ec31e 	bne	r3,zero,400780c <__reset+0xfa81780c>
 4007d00:	294b883a 	add	r5,r5,r5
 4007d04:	2886703a 	and	r3,r5,r2
 4007d08:	21000104 	addi	r4,r4,4
 4007d0c:	183ffc26 	beq	r3,zero,4007d00 <__reset+0xfa817d00>
 4007d10:	003ebe06 	br	400780c <__reset+0xfa81780c>
 4007d14:	00c05504 	movi	r3,340
 4007d18:	18801236 	bltu	r3,r2,4007d64 <_malloc_r+0x6f8>
 4007d1c:	8804d3fa 	srli	r2,r17,15
 4007d20:	12001e04 	addi	r8,r2,120
 4007d24:	11c01dc4 	addi	r7,r2,119
 4007d28:	4209883a 	add	r4,r8,r8
 4007d2c:	003e6d06 	br	40076e4 <__reset+0xfa8176e4>
 4007d30:	00c40004 	movi	r3,4096
 4007d34:	003f4606 	br	4007a50 <__reset+0xfa817a50>
 4007d38:	00800044 	movi	r2,1
 4007d3c:	a0800115 	stw	r2,4(r20)
 4007d40:	003f7406 	br	4007b14 <__reset+0xfa817b14>
 4007d44:	1805d0ba 	srai	r2,r3,2
 4007d48:	01c00044 	movi	r7,1
 4007d4c:	30c00117 	ldw	r3,4(r6)
 4007d50:	388e983a 	sll	r7,r7,r2
 4007d54:	2805883a 	mov	r2,r5
 4007d58:	38c6b03a 	or	r3,r7,r3
 4007d5c:	30c00115 	stw	r3,4(r6)
 4007d60:	003f9b06 	br	4007bd0 <__reset+0xfa817bd0>
 4007d64:	00c15504 	movi	r3,1364
 4007d68:	18801a36 	bltu	r3,r2,4007dd4 <_malloc_r+0x768>
 4007d6c:	8804d4ba 	srli	r2,r17,18
 4007d70:	12001f44 	addi	r8,r2,125
 4007d74:	11c01f04 	addi	r7,r2,124
 4007d78:	4209883a 	add	r4,r8,r8
 4007d7c:	003e5906 	br	40076e4 <__reset+0xfa8176e4>
 4007d80:	ad400404 	addi	r21,r21,16
 4007d84:	003f1706 	br	40079e4 <__reset+0xfa8179e4>
 4007d88:	00c01504 	movi	r3,84
 4007d8c:	18802336 	bltu	r3,r2,4007e1c <_malloc_r+0x7b0>
 4007d90:	3804d33a 	srli	r2,r7,12
 4007d94:	11401bc4 	addi	r5,r2,111
 4007d98:	10c01b84 	addi	r3,r2,110
 4007d9c:	294b883a 	add	r5,r5,r5
 4007da0:	003f7b06 	br	4007b90 <__reset+0xfa817b90>
 4007da4:	9c000217 	ldw	r16,8(r19)
 4007da8:	00bfff04 	movi	r2,-4
 4007dac:	80c00117 	ldw	r3,4(r16)
 4007db0:	1886703a 	and	r3,r3,r2
 4007db4:	003f5306 	br	4007b04 <__reset+0xfa817b04>
 4007db8:	3083ffcc 	andi	r2,r6,4095
 4007dbc:	103f181e 	bne	r2,zero,4007a20 <__reset+0xfa817a20>
 4007dc0:	99000217 	ldw	r4,8(r19)
 4007dc4:	b545883a 	add	r2,r22,r21
 4007dc8:	10800054 	ori	r2,r2,1
 4007dcc:	20800115 	stw	r2,4(r4)
 4007dd0:	003f3e06 	br	4007acc <__reset+0xfa817acc>
 4007dd4:	01003f84 	movi	r4,254
 4007dd8:	02001fc4 	movi	r8,127
 4007ddc:	01c01f84 	movi	r7,126
 4007de0:	003e4006 	br	40076e4 <__reset+0xfa8176e4>
 4007de4:	00810074 	movhi	r2,1025
 4007de8:	109d0804 	addi	r2,r2,29728
 4007dec:	15000015 	stw	r20,0(r2)
 4007df0:	003f1106 	br	4007a38 <__reset+0xfa817a38>
 4007df4:	00800044 	movi	r2,1
 4007df8:	002b883a 	mov	r21,zero
 4007dfc:	003f1f06 	br	4007a7c <__reset+0xfa817a7c>
 4007e00:	81400204 	addi	r5,r16,8
 4007e04:	9009883a 	mov	r4,r18
 4007e08:	4006a800 	call	4006a80 <_free_r>
 4007e0c:	00810074 	movhi	r2,1025
 4007e10:	109d2904 	addi	r2,r2,29860
 4007e14:	10c00017 	ldw	r3,0(r2)
 4007e18:	003f2c06 	br	4007acc <__reset+0xfa817acc>
 4007e1c:	00c05504 	movi	r3,340
 4007e20:	18800536 	bltu	r3,r2,4007e38 <_malloc_r+0x7cc>
 4007e24:	3804d3fa 	srli	r2,r7,15
 4007e28:	11401e04 	addi	r5,r2,120
 4007e2c:	10c01dc4 	addi	r3,r2,119
 4007e30:	294b883a 	add	r5,r5,r5
 4007e34:	003f5606 	br	4007b90 <__reset+0xfa817b90>
 4007e38:	00c15504 	movi	r3,1364
 4007e3c:	18800536 	bltu	r3,r2,4007e54 <_malloc_r+0x7e8>
 4007e40:	3804d4ba 	srli	r2,r7,18
 4007e44:	11401f44 	addi	r5,r2,125
 4007e48:	10c01f04 	addi	r3,r2,124
 4007e4c:	294b883a 	add	r5,r5,r5
 4007e50:	003f4f06 	br	4007b90 <__reset+0xfa817b90>
 4007e54:	01403f84 	movi	r5,254
 4007e58:	00c01f84 	movi	r3,126
 4007e5c:	003f4c06 	br	4007b90 <__reset+0xfa817b90>
 4007e60:	98800117 	ldw	r2,4(r19)
 4007e64:	003fa006 	br	4007ce8 <__reset+0xfa817ce8>
 4007e68:	8808d0fa 	srli	r4,r17,3
 4007e6c:	20800044 	addi	r2,r4,1
 4007e70:	1085883a 	add	r2,r2,r2
 4007e74:	003e9006 	br	40078b8 <__reset+0xfa8178b8>

04007e78 <memchr>:
 4007e78:	208000cc 	andi	r2,r4,3
 4007e7c:	280f883a 	mov	r7,r5
 4007e80:	10003426 	beq	r2,zero,4007f54 <memchr+0xdc>
 4007e84:	30bfffc4 	addi	r2,r6,-1
 4007e88:	30001a26 	beq	r6,zero,4007ef4 <memchr+0x7c>
 4007e8c:	20c00003 	ldbu	r3,0(r4)
 4007e90:	29803fcc 	andi	r6,r5,255
 4007e94:	30c0051e 	bne	r6,r3,4007eac <memchr+0x34>
 4007e98:	00001806 	br	4007efc <memchr+0x84>
 4007e9c:	10001526 	beq	r2,zero,4007ef4 <memchr+0x7c>
 4007ea0:	20c00003 	ldbu	r3,0(r4)
 4007ea4:	10bfffc4 	addi	r2,r2,-1
 4007ea8:	30c01426 	beq	r6,r3,4007efc <memchr+0x84>
 4007eac:	21000044 	addi	r4,r4,1
 4007eb0:	20c000cc 	andi	r3,r4,3
 4007eb4:	183ff91e 	bne	r3,zero,4007e9c <__reset+0xfa817e9c>
 4007eb8:	020000c4 	movi	r8,3
 4007ebc:	40801136 	bltu	r8,r2,4007f04 <memchr+0x8c>
 4007ec0:	10000c26 	beq	r2,zero,4007ef4 <memchr+0x7c>
 4007ec4:	20c00003 	ldbu	r3,0(r4)
 4007ec8:	29403fcc 	andi	r5,r5,255
 4007ecc:	28c00b26 	beq	r5,r3,4007efc <memchr+0x84>
 4007ed0:	20c00044 	addi	r3,r4,1
 4007ed4:	39803fcc 	andi	r6,r7,255
 4007ed8:	2089883a 	add	r4,r4,r2
 4007edc:	00000306 	br	4007eec <memchr+0x74>
 4007ee0:	18c00044 	addi	r3,r3,1
 4007ee4:	197fffc3 	ldbu	r5,-1(r3)
 4007ee8:	31400526 	beq	r6,r5,4007f00 <memchr+0x88>
 4007eec:	1805883a 	mov	r2,r3
 4007ef0:	20fffb1e 	bne	r4,r3,4007ee0 <__reset+0xfa817ee0>
 4007ef4:	0005883a 	mov	r2,zero
 4007ef8:	f800283a 	ret
 4007efc:	2005883a 	mov	r2,r4
 4007f00:	f800283a 	ret
 4007f04:	28c03fcc 	andi	r3,r5,255
 4007f08:	1812923a 	slli	r9,r3,8
 4007f0c:	02ffbff4 	movhi	r11,65279
 4007f10:	02a02074 	movhi	r10,32897
 4007f14:	48d2b03a 	or	r9,r9,r3
 4007f18:	4806943a 	slli	r3,r9,16
 4007f1c:	5affbfc4 	addi	r11,r11,-257
 4007f20:	52a02004 	addi	r10,r10,-32640
 4007f24:	48d2b03a 	or	r9,r9,r3
 4007f28:	20c00017 	ldw	r3,0(r4)
 4007f2c:	48c6f03a 	xor	r3,r9,r3
 4007f30:	1acd883a 	add	r6,r3,r11
 4007f34:	00c6303a 	nor	r3,zero,r3
 4007f38:	30c6703a 	and	r3,r6,r3
 4007f3c:	1a86703a 	and	r3,r3,r10
 4007f40:	183fe01e 	bne	r3,zero,4007ec4 <__reset+0xfa817ec4>
 4007f44:	10bfff04 	addi	r2,r2,-4
 4007f48:	21000104 	addi	r4,r4,4
 4007f4c:	40bff636 	bltu	r8,r2,4007f28 <__reset+0xfa817f28>
 4007f50:	003fdb06 	br	4007ec0 <__reset+0xfa817ec0>
 4007f54:	3005883a 	mov	r2,r6
 4007f58:	003fd706 	br	4007eb8 <__reset+0xfa817eb8>

04007f5c <memmove>:
 4007f5c:	2005883a 	mov	r2,r4
 4007f60:	29000b2e 	bgeu	r5,r4,4007f90 <memmove+0x34>
 4007f64:	298f883a 	add	r7,r5,r6
 4007f68:	21c0092e 	bgeu	r4,r7,4007f90 <memmove+0x34>
 4007f6c:	2187883a 	add	r3,r4,r6
 4007f70:	198bc83a 	sub	r5,r3,r6
 4007f74:	30004826 	beq	r6,zero,4008098 <memmove+0x13c>
 4007f78:	39ffffc4 	addi	r7,r7,-1
 4007f7c:	39000003 	ldbu	r4,0(r7)
 4007f80:	18ffffc4 	addi	r3,r3,-1
 4007f84:	19000005 	stb	r4,0(r3)
 4007f88:	28fffb1e 	bne	r5,r3,4007f78 <__reset+0xfa817f78>
 4007f8c:	f800283a 	ret
 4007f90:	00c003c4 	movi	r3,15
 4007f94:	1980412e 	bgeu	r3,r6,400809c <memmove+0x140>
 4007f98:	2886b03a 	or	r3,r5,r2
 4007f9c:	18c000cc 	andi	r3,r3,3
 4007fa0:	1800401e 	bne	r3,zero,40080a4 <memmove+0x148>
 4007fa4:	33fffc04 	addi	r15,r6,-16
 4007fa8:	781ed13a 	srli	r15,r15,4
 4007fac:	28c00104 	addi	r3,r5,4
 4007fb0:	13400104 	addi	r13,r2,4
 4007fb4:	781c913a 	slli	r14,r15,4
 4007fb8:	2b000204 	addi	r12,r5,8
 4007fbc:	12c00204 	addi	r11,r2,8
 4007fc0:	73800504 	addi	r14,r14,20
 4007fc4:	2a800304 	addi	r10,r5,12
 4007fc8:	12400304 	addi	r9,r2,12
 4007fcc:	2b9d883a 	add	r14,r5,r14
 4007fd0:	2811883a 	mov	r8,r5
 4007fd4:	100f883a 	mov	r7,r2
 4007fd8:	41000017 	ldw	r4,0(r8)
 4007fdc:	39c00404 	addi	r7,r7,16
 4007fe0:	18c00404 	addi	r3,r3,16
 4007fe4:	393ffc15 	stw	r4,-16(r7)
 4007fe8:	193ffc17 	ldw	r4,-16(r3)
 4007fec:	6b400404 	addi	r13,r13,16
 4007ff0:	5ac00404 	addi	r11,r11,16
 4007ff4:	693ffc15 	stw	r4,-16(r13)
 4007ff8:	61000017 	ldw	r4,0(r12)
 4007ffc:	4a400404 	addi	r9,r9,16
 4008000:	42000404 	addi	r8,r8,16
 4008004:	593ffc15 	stw	r4,-16(r11)
 4008008:	51000017 	ldw	r4,0(r10)
 400800c:	63000404 	addi	r12,r12,16
 4008010:	52800404 	addi	r10,r10,16
 4008014:	493ffc15 	stw	r4,-16(r9)
 4008018:	1bbfef1e 	bne	r3,r14,4007fd8 <__reset+0xfa817fd8>
 400801c:	79000044 	addi	r4,r15,1
 4008020:	2008913a 	slli	r4,r4,4
 4008024:	328003cc 	andi	r10,r6,15
 4008028:	02c000c4 	movi	r11,3
 400802c:	1107883a 	add	r3,r2,r4
 4008030:	290b883a 	add	r5,r5,r4
 4008034:	5a801e2e 	bgeu	r11,r10,40080b0 <memmove+0x154>
 4008038:	1813883a 	mov	r9,r3
 400803c:	2811883a 	mov	r8,r5
 4008040:	500f883a 	mov	r7,r10
 4008044:	41000017 	ldw	r4,0(r8)
 4008048:	4a400104 	addi	r9,r9,4
 400804c:	39ffff04 	addi	r7,r7,-4
 4008050:	493fff15 	stw	r4,-4(r9)
 4008054:	42000104 	addi	r8,r8,4
 4008058:	59fffa36 	bltu	r11,r7,4008044 <__reset+0xfa818044>
 400805c:	513fff04 	addi	r4,r10,-4
 4008060:	2008d0ba 	srli	r4,r4,2
 4008064:	318000cc 	andi	r6,r6,3
 4008068:	21000044 	addi	r4,r4,1
 400806c:	2109883a 	add	r4,r4,r4
 4008070:	2109883a 	add	r4,r4,r4
 4008074:	1907883a 	add	r3,r3,r4
 4008078:	290b883a 	add	r5,r5,r4
 400807c:	30000b26 	beq	r6,zero,40080ac <memmove+0x150>
 4008080:	198d883a 	add	r6,r3,r6
 4008084:	29c00003 	ldbu	r7,0(r5)
 4008088:	18c00044 	addi	r3,r3,1
 400808c:	29400044 	addi	r5,r5,1
 4008090:	19ffffc5 	stb	r7,-1(r3)
 4008094:	19bffb1e 	bne	r3,r6,4008084 <__reset+0xfa818084>
 4008098:	f800283a 	ret
 400809c:	1007883a 	mov	r3,r2
 40080a0:	003ff606 	br	400807c <__reset+0xfa81807c>
 40080a4:	1007883a 	mov	r3,r2
 40080a8:	003ff506 	br	4008080 <__reset+0xfa818080>
 40080ac:	f800283a 	ret
 40080b0:	500d883a 	mov	r6,r10
 40080b4:	003ff106 	br	400807c <__reset+0xfa81807c>

040080b8 <memset>:
 40080b8:	20c000cc 	andi	r3,r4,3
 40080bc:	2005883a 	mov	r2,r4
 40080c0:	18004426 	beq	r3,zero,40081d4 <memset+0x11c>
 40080c4:	31ffffc4 	addi	r7,r6,-1
 40080c8:	30004026 	beq	r6,zero,40081cc <memset+0x114>
 40080cc:	2813883a 	mov	r9,r5
 40080d0:	200d883a 	mov	r6,r4
 40080d4:	2007883a 	mov	r3,r4
 40080d8:	00000406 	br	40080ec <memset+0x34>
 40080dc:	3a3fffc4 	addi	r8,r7,-1
 40080e0:	31800044 	addi	r6,r6,1
 40080e4:	38003926 	beq	r7,zero,40081cc <memset+0x114>
 40080e8:	400f883a 	mov	r7,r8
 40080ec:	18c00044 	addi	r3,r3,1
 40080f0:	32400005 	stb	r9,0(r6)
 40080f4:	1a0000cc 	andi	r8,r3,3
 40080f8:	403ff81e 	bne	r8,zero,40080dc <__reset+0xfa8180dc>
 40080fc:	010000c4 	movi	r4,3
 4008100:	21c02d2e 	bgeu	r4,r7,40081b8 <memset+0x100>
 4008104:	29003fcc 	andi	r4,r5,255
 4008108:	200c923a 	slli	r6,r4,8
 400810c:	3108b03a 	or	r4,r6,r4
 4008110:	200c943a 	slli	r6,r4,16
 4008114:	218cb03a 	or	r6,r4,r6
 4008118:	010003c4 	movi	r4,15
 400811c:	21c0182e 	bgeu	r4,r7,4008180 <memset+0xc8>
 4008120:	3b3ffc04 	addi	r12,r7,-16
 4008124:	6018d13a 	srli	r12,r12,4
 4008128:	1a000104 	addi	r8,r3,4
 400812c:	1ac00204 	addi	r11,r3,8
 4008130:	6008913a 	slli	r4,r12,4
 4008134:	1a800304 	addi	r10,r3,12
 4008138:	1813883a 	mov	r9,r3
 400813c:	21000504 	addi	r4,r4,20
 4008140:	1909883a 	add	r4,r3,r4
 4008144:	49800015 	stw	r6,0(r9)
 4008148:	41800015 	stw	r6,0(r8)
 400814c:	59800015 	stw	r6,0(r11)
 4008150:	51800015 	stw	r6,0(r10)
 4008154:	42000404 	addi	r8,r8,16
 4008158:	4a400404 	addi	r9,r9,16
 400815c:	5ac00404 	addi	r11,r11,16
 4008160:	52800404 	addi	r10,r10,16
 4008164:	413ff71e 	bne	r8,r4,4008144 <__reset+0xfa818144>
 4008168:	63000044 	addi	r12,r12,1
 400816c:	6018913a 	slli	r12,r12,4
 4008170:	39c003cc 	andi	r7,r7,15
 4008174:	010000c4 	movi	r4,3
 4008178:	1b07883a 	add	r3,r3,r12
 400817c:	21c00e2e 	bgeu	r4,r7,40081b8 <memset+0x100>
 4008180:	1813883a 	mov	r9,r3
 4008184:	3811883a 	mov	r8,r7
 4008188:	010000c4 	movi	r4,3
 400818c:	49800015 	stw	r6,0(r9)
 4008190:	423fff04 	addi	r8,r8,-4
 4008194:	4a400104 	addi	r9,r9,4
 4008198:	223ffc36 	bltu	r4,r8,400818c <__reset+0xfa81818c>
 400819c:	393fff04 	addi	r4,r7,-4
 40081a0:	2008d0ba 	srli	r4,r4,2
 40081a4:	39c000cc 	andi	r7,r7,3
 40081a8:	21000044 	addi	r4,r4,1
 40081ac:	2109883a 	add	r4,r4,r4
 40081b0:	2109883a 	add	r4,r4,r4
 40081b4:	1907883a 	add	r3,r3,r4
 40081b8:	38000526 	beq	r7,zero,40081d0 <memset+0x118>
 40081bc:	19cf883a 	add	r7,r3,r7
 40081c0:	19400005 	stb	r5,0(r3)
 40081c4:	18c00044 	addi	r3,r3,1
 40081c8:	38fffd1e 	bne	r7,r3,40081c0 <__reset+0xfa8181c0>
 40081cc:	f800283a 	ret
 40081d0:	f800283a 	ret
 40081d4:	2007883a 	mov	r3,r4
 40081d8:	300f883a 	mov	r7,r6
 40081dc:	003fc706 	br	40080fc <__reset+0xfa8180fc>

040081e0 <_Balloc>:
 40081e0:	20801317 	ldw	r2,76(r4)
 40081e4:	defffc04 	addi	sp,sp,-16
 40081e8:	dc400115 	stw	r17,4(sp)
 40081ec:	dc000015 	stw	r16,0(sp)
 40081f0:	dfc00315 	stw	ra,12(sp)
 40081f4:	dc800215 	stw	r18,8(sp)
 40081f8:	2023883a 	mov	r17,r4
 40081fc:	2821883a 	mov	r16,r5
 4008200:	10000f26 	beq	r2,zero,4008240 <_Balloc+0x60>
 4008204:	8407883a 	add	r3,r16,r16
 4008208:	18c7883a 	add	r3,r3,r3
 400820c:	10c7883a 	add	r3,r2,r3
 4008210:	18800017 	ldw	r2,0(r3)
 4008214:	10001126 	beq	r2,zero,400825c <_Balloc+0x7c>
 4008218:	11000017 	ldw	r4,0(r2)
 400821c:	19000015 	stw	r4,0(r3)
 4008220:	10000415 	stw	zero,16(r2)
 4008224:	10000315 	stw	zero,12(r2)
 4008228:	dfc00317 	ldw	ra,12(sp)
 400822c:	dc800217 	ldw	r18,8(sp)
 4008230:	dc400117 	ldw	r17,4(sp)
 4008234:	dc000017 	ldw	r16,0(sp)
 4008238:	dec00404 	addi	sp,sp,16
 400823c:	f800283a 	ret
 4008240:	01800844 	movi	r6,33
 4008244:	01400104 	movi	r5,4
 4008248:	400b11c0 	call	400b11c <_calloc_r>
 400824c:	88801315 	stw	r2,76(r17)
 4008250:	103fec1e 	bne	r2,zero,4008204 <__reset+0xfa818204>
 4008254:	0005883a 	mov	r2,zero
 4008258:	003ff306 	br	4008228 <__reset+0xfa818228>
 400825c:	01400044 	movi	r5,1
 4008260:	2c24983a 	sll	r18,r5,r16
 4008264:	8809883a 	mov	r4,r17
 4008268:	91800144 	addi	r6,r18,5
 400826c:	318d883a 	add	r6,r6,r6
 4008270:	318d883a 	add	r6,r6,r6
 4008274:	400b11c0 	call	400b11c <_calloc_r>
 4008278:	103ff626 	beq	r2,zero,4008254 <__reset+0xfa818254>
 400827c:	14000115 	stw	r16,4(r2)
 4008280:	14800215 	stw	r18,8(r2)
 4008284:	003fe606 	br	4008220 <__reset+0xfa818220>

04008288 <_Bfree>:
 4008288:	28000826 	beq	r5,zero,40082ac <_Bfree+0x24>
 400828c:	28c00117 	ldw	r3,4(r5)
 4008290:	20801317 	ldw	r2,76(r4)
 4008294:	18c7883a 	add	r3,r3,r3
 4008298:	18c7883a 	add	r3,r3,r3
 400829c:	10c5883a 	add	r2,r2,r3
 40082a0:	10c00017 	ldw	r3,0(r2)
 40082a4:	28c00015 	stw	r3,0(r5)
 40082a8:	11400015 	stw	r5,0(r2)
 40082ac:	f800283a 	ret

040082b0 <__multadd>:
 40082b0:	defffa04 	addi	sp,sp,-24
 40082b4:	dc800315 	stw	r18,12(sp)
 40082b8:	dc400215 	stw	r17,8(sp)
 40082bc:	dc000115 	stw	r16,4(sp)
 40082c0:	2823883a 	mov	r17,r5
 40082c4:	2c000417 	ldw	r16,16(r5)
 40082c8:	dfc00515 	stw	ra,20(sp)
 40082cc:	dcc00415 	stw	r19,16(sp)
 40082d0:	2025883a 	mov	r18,r4
 40082d4:	29400504 	addi	r5,r5,20
 40082d8:	0011883a 	mov	r8,zero
 40082dc:	28c00017 	ldw	r3,0(r5)
 40082e0:	29400104 	addi	r5,r5,4
 40082e4:	42000044 	addi	r8,r8,1
 40082e8:	18bfffcc 	andi	r2,r3,65535
 40082ec:	1185383a 	mul	r2,r2,r6
 40082f0:	1806d43a 	srli	r3,r3,16
 40082f4:	11cf883a 	add	r7,r2,r7
 40082f8:	3808d43a 	srli	r4,r7,16
 40082fc:	1987383a 	mul	r3,r3,r6
 4008300:	38bfffcc 	andi	r2,r7,65535
 4008304:	1907883a 	add	r3,r3,r4
 4008308:	1808943a 	slli	r4,r3,16
 400830c:	180ed43a 	srli	r7,r3,16
 4008310:	2085883a 	add	r2,r4,r2
 4008314:	28bfff15 	stw	r2,-4(r5)
 4008318:	443ff016 	blt	r8,r16,40082dc <__reset+0xfa8182dc>
 400831c:	38000926 	beq	r7,zero,4008344 <__multadd+0x94>
 4008320:	88800217 	ldw	r2,8(r17)
 4008324:	80800f0e 	bge	r16,r2,4008364 <__multadd+0xb4>
 4008328:	80800144 	addi	r2,r16,5
 400832c:	1085883a 	add	r2,r2,r2
 4008330:	1085883a 	add	r2,r2,r2
 4008334:	8885883a 	add	r2,r17,r2
 4008338:	11c00015 	stw	r7,0(r2)
 400833c:	84000044 	addi	r16,r16,1
 4008340:	8c000415 	stw	r16,16(r17)
 4008344:	8805883a 	mov	r2,r17
 4008348:	dfc00517 	ldw	ra,20(sp)
 400834c:	dcc00417 	ldw	r19,16(sp)
 4008350:	dc800317 	ldw	r18,12(sp)
 4008354:	dc400217 	ldw	r17,8(sp)
 4008358:	dc000117 	ldw	r16,4(sp)
 400835c:	dec00604 	addi	sp,sp,24
 4008360:	f800283a 	ret
 4008364:	89400117 	ldw	r5,4(r17)
 4008368:	9009883a 	mov	r4,r18
 400836c:	d9c00015 	stw	r7,0(sp)
 4008370:	29400044 	addi	r5,r5,1
 4008374:	40081e00 	call	40081e0 <_Balloc>
 4008378:	89800417 	ldw	r6,16(r17)
 400837c:	89400304 	addi	r5,r17,12
 4008380:	11000304 	addi	r4,r2,12
 4008384:	31800084 	addi	r6,r6,2
 4008388:	318d883a 	add	r6,r6,r6
 400838c:	318d883a 	add	r6,r6,r6
 4008390:	1027883a 	mov	r19,r2
 4008394:	40023480 	call	4002348 <memcpy>
 4008398:	d9c00017 	ldw	r7,0(sp)
 400839c:	88000a26 	beq	r17,zero,40083c8 <__multadd+0x118>
 40083a0:	88c00117 	ldw	r3,4(r17)
 40083a4:	90801317 	ldw	r2,76(r18)
 40083a8:	18c7883a 	add	r3,r3,r3
 40083ac:	18c7883a 	add	r3,r3,r3
 40083b0:	10c5883a 	add	r2,r2,r3
 40083b4:	10c00017 	ldw	r3,0(r2)
 40083b8:	88c00015 	stw	r3,0(r17)
 40083bc:	14400015 	stw	r17,0(r2)
 40083c0:	9823883a 	mov	r17,r19
 40083c4:	003fd806 	br	4008328 <__reset+0xfa818328>
 40083c8:	9823883a 	mov	r17,r19
 40083cc:	003fd606 	br	4008328 <__reset+0xfa818328>

040083d0 <__s2b>:
 40083d0:	defff904 	addi	sp,sp,-28
 40083d4:	dc400115 	stw	r17,4(sp)
 40083d8:	dc000015 	stw	r16,0(sp)
 40083dc:	2023883a 	mov	r17,r4
 40083e0:	2821883a 	mov	r16,r5
 40083e4:	39000204 	addi	r4,r7,8
 40083e8:	01400244 	movi	r5,9
 40083ec:	dcc00315 	stw	r19,12(sp)
 40083f0:	dc800215 	stw	r18,8(sp)
 40083f4:	dfc00615 	stw	ra,24(sp)
 40083f8:	dd400515 	stw	r21,20(sp)
 40083fc:	dd000415 	stw	r20,16(sp)
 4008400:	3825883a 	mov	r18,r7
 4008404:	3027883a 	mov	r19,r6
 4008408:	400c44c0 	call	400c44c <__divsi3>
 400840c:	00c00044 	movi	r3,1
 4008410:	000b883a 	mov	r5,zero
 4008414:	1880030e 	bge	r3,r2,4008424 <__s2b+0x54>
 4008418:	18c7883a 	add	r3,r3,r3
 400841c:	29400044 	addi	r5,r5,1
 4008420:	18bffd16 	blt	r3,r2,4008418 <__reset+0xfa818418>
 4008424:	8809883a 	mov	r4,r17
 4008428:	40081e00 	call	40081e0 <_Balloc>
 400842c:	d8c00717 	ldw	r3,28(sp)
 4008430:	10c00515 	stw	r3,20(r2)
 4008434:	00c00044 	movi	r3,1
 4008438:	10c00415 	stw	r3,16(r2)
 400843c:	00c00244 	movi	r3,9
 4008440:	1cc0210e 	bge	r3,r19,40084c8 <__s2b+0xf8>
 4008444:	80eb883a 	add	r21,r16,r3
 4008448:	a829883a 	mov	r20,r21
 400844c:	84e1883a 	add	r16,r16,r19
 4008450:	a1c00007 	ldb	r7,0(r20)
 4008454:	01800284 	movi	r6,10
 4008458:	a5000044 	addi	r20,r20,1
 400845c:	100b883a 	mov	r5,r2
 4008460:	39fff404 	addi	r7,r7,-48
 4008464:	8809883a 	mov	r4,r17
 4008468:	40082b00 	call	40082b0 <__multadd>
 400846c:	a43ff81e 	bne	r20,r16,4008450 <__reset+0xfa818450>
 4008470:	ace1883a 	add	r16,r21,r19
 4008474:	843ffe04 	addi	r16,r16,-8
 4008478:	9c800a0e 	bge	r19,r18,40084a4 <__s2b+0xd4>
 400847c:	94e5c83a 	sub	r18,r18,r19
 4008480:	84a5883a 	add	r18,r16,r18
 4008484:	81c00007 	ldb	r7,0(r16)
 4008488:	01800284 	movi	r6,10
 400848c:	84000044 	addi	r16,r16,1
 4008490:	100b883a 	mov	r5,r2
 4008494:	39fff404 	addi	r7,r7,-48
 4008498:	8809883a 	mov	r4,r17
 400849c:	40082b00 	call	40082b0 <__multadd>
 40084a0:	84bff81e 	bne	r16,r18,4008484 <__reset+0xfa818484>
 40084a4:	dfc00617 	ldw	ra,24(sp)
 40084a8:	dd400517 	ldw	r21,20(sp)
 40084ac:	dd000417 	ldw	r20,16(sp)
 40084b0:	dcc00317 	ldw	r19,12(sp)
 40084b4:	dc800217 	ldw	r18,8(sp)
 40084b8:	dc400117 	ldw	r17,4(sp)
 40084bc:	dc000017 	ldw	r16,0(sp)
 40084c0:	dec00704 	addi	sp,sp,28
 40084c4:	f800283a 	ret
 40084c8:	84000284 	addi	r16,r16,10
 40084cc:	1827883a 	mov	r19,r3
 40084d0:	003fe906 	br	4008478 <__reset+0xfa818478>

040084d4 <__hi0bits>:
 40084d4:	20bfffec 	andhi	r2,r4,65535
 40084d8:	1000141e 	bne	r2,zero,400852c <__hi0bits+0x58>
 40084dc:	2008943a 	slli	r4,r4,16
 40084e0:	00800404 	movi	r2,16
 40084e4:	20ffc02c 	andhi	r3,r4,65280
 40084e8:	1800021e 	bne	r3,zero,40084f4 <__hi0bits+0x20>
 40084ec:	2008923a 	slli	r4,r4,8
 40084f0:	10800204 	addi	r2,r2,8
 40084f4:	20fc002c 	andhi	r3,r4,61440
 40084f8:	1800021e 	bne	r3,zero,4008504 <__hi0bits+0x30>
 40084fc:	2008913a 	slli	r4,r4,4
 4008500:	10800104 	addi	r2,r2,4
 4008504:	20f0002c 	andhi	r3,r4,49152
 4008508:	1800031e 	bne	r3,zero,4008518 <__hi0bits+0x44>
 400850c:	2109883a 	add	r4,r4,r4
 4008510:	10800084 	addi	r2,r2,2
 4008514:	2109883a 	add	r4,r4,r4
 4008518:	20000316 	blt	r4,zero,4008528 <__hi0bits+0x54>
 400851c:	2110002c 	andhi	r4,r4,16384
 4008520:	2000041e 	bne	r4,zero,4008534 <__hi0bits+0x60>
 4008524:	00800804 	movi	r2,32
 4008528:	f800283a 	ret
 400852c:	0005883a 	mov	r2,zero
 4008530:	003fec06 	br	40084e4 <__reset+0xfa8184e4>
 4008534:	10800044 	addi	r2,r2,1
 4008538:	f800283a 	ret

0400853c <__lo0bits>:
 400853c:	20c00017 	ldw	r3,0(r4)
 4008540:	188001cc 	andi	r2,r3,7
 4008544:	10000826 	beq	r2,zero,4008568 <__lo0bits+0x2c>
 4008548:	1880004c 	andi	r2,r3,1
 400854c:	1000211e 	bne	r2,zero,40085d4 <__lo0bits+0x98>
 4008550:	1880008c 	andi	r2,r3,2
 4008554:	1000211e 	bne	r2,zero,40085dc <__lo0bits+0xa0>
 4008558:	1806d0ba 	srli	r3,r3,2
 400855c:	00800084 	movi	r2,2
 4008560:	20c00015 	stw	r3,0(r4)
 4008564:	f800283a 	ret
 4008568:	18bfffcc 	andi	r2,r3,65535
 400856c:	10001326 	beq	r2,zero,40085bc <__lo0bits+0x80>
 4008570:	0005883a 	mov	r2,zero
 4008574:	19403fcc 	andi	r5,r3,255
 4008578:	2800021e 	bne	r5,zero,4008584 <__lo0bits+0x48>
 400857c:	1806d23a 	srli	r3,r3,8
 4008580:	10800204 	addi	r2,r2,8
 4008584:	194003cc 	andi	r5,r3,15
 4008588:	2800021e 	bne	r5,zero,4008594 <__lo0bits+0x58>
 400858c:	1806d13a 	srli	r3,r3,4
 4008590:	10800104 	addi	r2,r2,4
 4008594:	194000cc 	andi	r5,r3,3
 4008598:	2800021e 	bne	r5,zero,40085a4 <__lo0bits+0x68>
 400859c:	1806d0ba 	srli	r3,r3,2
 40085a0:	10800084 	addi	r2,r2,2
 40085a4:	1940004c 	andi	r5,r3,1
 40085a8:	2800081e 	bne	r5,zero,40085cc <__lo0bits+0x90>
 40085ac:	1806d07a 	srli	r3,r3,1
 40085b0:	1800051e 	bne	r3,zero,40085c8 <__lo0bits+0x8c>
 40085b4:	00800804 	movi	r2,32
 40085b8:	f800283a 	ret
 40085bc:	1806d43a 	srli	r3,r3,16
 40085c0:	00800404 	movi	r2,16
 40085c4:	003feb06 	br	4008574 <__reset+0xfa818574>
 40085c8:	10800044 	addi	r2,r2,1
 40085cc:	20c00015 	stw	r3,0(r4)
 40085d0:	f800283a 	ret
 40085d4:	0005883a 	mov	r2,zero
 40085d8:	f800283a 	ret
 40085dc:	1806d07a 	srli	r3,r3,1
 40085e0:	00800044 	movi	r2,1
 40085e4:	20c00015 	stw	r3,0(r4)
 40085e8:	f800283a 	ret

040085ec <__i2b>:
 40085ec:	defffd04 	addi	sp,sp,-12
 40085f0:	dc000015 	stw	r16,0(sp)
 40085f4:	04000044 	movi	r16,1
 40085f8:	dc400115 	stw	r17,4(sp)
 40085fc:	2823883a 	mov	r17,r5
 4008600:	800b883a 	mov	r5,r16
 4008604:	dfc00215 	stw	ra,8(sp)
 4008608:	40081e00 	call	40081e0 <_Balloc>
 400860c:	14400515 	stw	r17,20(r2)
 4008610:	14000415 	stw	r16,16(r2)
 4008614:	dfc00217 	ldw	ra,8(sp)
 4008618:	dc400117 	ldw	r17,4(sp)
 400861c:	dc000017 	ldw	r16,0(sp)
 4008620:	dec00304 	addi	sp,sp,12
 4008624:	f800283a 	ret

04008628 <__multiply>:
 4008628:	defffa04 	addi	sp,sp,-24
 400862c:	dcc00315 	stw	r19,12(sp)
 4008630:	dc800215 	stw	r18,8(sp)
 4008634:	34c00417 	ldw	r19,16(r6)
 4008638:	2c800417 	ldw	r18,16(r5)
 400863c:	dd000415 	stw	r20,16(sp)
 4008640:	dc400115 	stw	r17,4(sp)
 4008644:	dfc00515 	stw	ra,20(sp)
 4008648:	dc000015 	stw	r16,0(sp)
 400864c:	2829883a 	mov	r20,r5
 4008650:	3023883a 	mov	r17,r6
 4008654:	94c0050e 	bge	r18,r19,400866c <__multiply+0x44>
 4008658:	9007883a 	mov	r3,r18
 400865c:	3029883a 	mov	r20,r6
 4008660:	9825883a 	mov	r18,r19
 4008664:	2823883a 	mov	r17,r5
 4008668:	1827883a 	mov	r19,r3
 400866c:	a0800217 	ldw	r2,8(r20)
 4008670:	94e1883a 	add	r16,r18,r19
 4008674:	a1400117 	ldw	r5,4(r20)
 4008678:	1400010e 	bge	r2,r16,4008680 <__multiply+0x58>
 400867c:	29400044 	addi	r5,r5,1
 4008680:	40081e00 	call	40081e0 <_Balloc>
 4008684:	8415883a 	add	r10,r16,r16
 4008688:	12c00504 	addi	r11,r2,20
 400868c:	5295883a 	add	r10,r10,r10
 4008690:	5a95883a 	add	r10,r11,r10
 4008694:	5807883a 	mov	r3,r11
 4008698:	5a80032e 	bgeu	r11,r10,40086a8 <__multiply+0x80>
 400869c:	18000015 	stw	zero,0(r3)
 40086a0:	18c00104 	addi	r3,r3,4
 40086a4:	1abffd36 	bltu	r3,r10,400869c <__reset+0xfa81869c>
 40086a8:	9ce7883a 	add	r19,r19,r19
 40086ac:	94a5883a 	add	r18,r18,r18
 40086b0:	89800504 	addi	r6,r17,20
 40086b4:	9ce7883a 	add	r19,r19,r19
 40086b8:	a3400504 	addi	r13,r20,20
 40086bc:	94a5883a 	add	r18,r18,r18
 40086c0:	34d9883a 	add	r12,r6,r19
 40086c4:	6c93883a 	add	r9,r13,r18
 40086c8:	3300422e 	bgeu	r6,r12,40087d4 <__multiply+0x1ac>
 40086cc:	37c00017 	ldw	ra,0(r6)
 40086d0:	fbffffcc 	andi	r15,ra,65535
 40086d4:	78001b26 	beq	r15,zero,4008744 <__multiply+0x11c>
 40086d8:	5811883a 	mov	r8,r11
 40086dc:	681d883a 	mov	r14,r13
 40086e0:	000f883a 	mov	r7,zero
 40086e4:	71000017 	ldw	r4,0(r14)
 40086e8:	40c00017 	ldw	r3,0(r8)
 40086ec:	73800104 	addi	r14,r14,4
 40086f0:	217fffcc 	andi	r5,r4,65535
 40086f4:	2bcb383a 	mul	r5,r5,r15
 40086f8:	2008d43a 	srli	r4,r4,16
 40086fc:	1c7fffcc 	andi	r17,r3,65535
 4008700:	2c4b883a 	add	r5,r5,r17
 4008704:	29cb883a 	add	r5,r5,r7
 4008708:	23c9383a 	mul	r4,r4,r15
 400870c:	1806d43a 	srli	r3,r3,16
 4008710:	280ed43a 	srli	r7,r5,16
 4008714:	297fffcc 	andi	r5,r5,65535
 4008718:	20c7883a 	add	r3,r4,r3
 400871c:	19c7883a 	add	r3,r3,r7
 4008720:	1808943a 	slli	r4,r3,16
 4008724:	4023883a 	mov	r17,r8
 4008728:	180ed43a 	srli	r7,r3,16
 400872c:	214ab03a 	or	r5,r4,r5
 4008730:	41400015 	stw	r5,0(r8)
 4008734:	42000104 	addi	r8,r8,4
 4008738:	727fea36 	bltu	r14,r9,40086e4 <__reset+0xfa8186e4>
 400873c:	89c00115 	stw	r7,4(r17)
 4008740:	37c00017 	ldw	ra,0(r6)
 4008744:	f83ed43a 	srli	ra,ra,16
 4008748:	f8001f26 	beq	ra,zero,40087c8 <__multiply+0x1a0>
 400874c:	58c00017 	ldw	r3,0(r11)
 4008750:	681d883a 	mov	r14,r13
 4008754:	581f883a 	mov	r15,r11
 4008758:	1811883a 	mov	r8,r3
 400875c:	5825883a 	mov	r18,r11
 4008760:	000f883a 	mov	r7,zero
 4008764:	00000106 	br	400876c <__multiply+0x144>
 4008768:	8825883a 	mov	r18,r17
 400876c:	7140000b 	ldhu	r5,0(r14)
 4008770:	4010d43a 	srli	r8,r8,16
 4008774:	193fffcc 	andi	r4,r3,65535
 4008778:	2fcb383a 	mul	r5,r5,ra
 400877c:	7bc00104 	addi	r15,r15,4
 4008780:	73800104 	addi	r14,r14,4
 4008784:	2a0b883a 	add	r5,r5,r8
 4008788:	29cb883a 	add	r5,r5,r7
 400878c:	2806943a 	slli	r3,r5,16
 4008790:	94400104 	addi	r17,r18,4
 4008794:	280ad43a 	srli	r5,r5,16
 4008798:	1908b03a 	or	r4,r3,r4
 400879c:	793fff15 	stw	r4,-4(r15)
 40087a0:	70ffff17 	ldw	r3,-4(r14)
 40087a4:	8a000017 	ldw	r8,0(r17)
 40087a8:	1806d43a 	srli	r3,r3,16
 40087ac:	413fffcc 	andi	r4,r8,65535
 40087b0:	1fc7383a 	mul	r3,r3,ra
 40087b4:	1907883a 	add	r3,r3,r4
 40087b8:	1947883a 	add	r3,r3,r5
 40087bc:	180ed43a 	srli	r7,r3,16
 40087c0:	727fe936 	bltu	r14,r9,4008768 <__reset+0xfa818768>
 40087c4:	90c00115 	stw	r3,4(r18)
 40087c8:	31800104 	addi	r6,r6,4
 40087cc:	5ac00104 	addi	r11,r11,4
 40087d0:	333fbe36 	bltu	r6,r12,40086cc <__reset+0xfa8186cc>
 40087d4:	0400090e 	bge	zero,r16,40087fc <__multiply+0x1d4>
 40087d8:	50ffff17 	ldw	r3,-4(r10)
 40087dc:	52bfff04 	addi	r10,r10,-4
 40087e0:	18000326 	beq	r3,zero,40087f0 <__multiply+0x1c8>
 40087e4:	00000506 	br	40087fc <__multiply+0x1d4>
 40087e8:	50c00017 	ldw	r3,0(r10)
 40087ec:	1800031e 	bne	r3,zero,40087fc <__multiply+0x1d4>
 40087f0:	843fffc4 	addi	r16,r16,-1
 40087f4:	52bfff04 	addi	r10,r10,-4
 40087f8:	803ffb1e 	bne	r16,zero,40087e8 <__reset+0xfa8187e8>
 40087fc:	14000415 	stw	r16,16(r2)
 4008800:	dfc00517 	ldw	ra,20(sp)
 4008804:	dd000417 	ldw	r20,16(sp)
 4008808:	dcc00317 	ldw	r19,12(sp)
 400880c:	dc800217 	ldw	r18,8(sp)
 4008810:	dc400117 	ldw	r17,4(sp)
 4008814:	dc000017 	ldw	r16,0(sp)
 4008818:	dec00604 	addi	sp,sp,24
 400881c:	f800283a 	ret

04008820 <__pow5mult>:
 4008820:	defffa04 	addi	sp,sp,-24
 4008824:	dcc00315 	stw	r19,12(sp)
 4008828:	dc000015 	stw	r16,0(sp)
 400882c:	dfc00515 	stw	ra,20(sp)
 4008830:	dd000415 	stw	r20,16(sp)
 4008834:	dc800215 	stw	r18,8(sp)
 4008838:	dc400115 	stw	r17,4(sp)
 400883c:	308000cc 	andi	r2,r6,3
 4008840:	3021883a 	mov	r16,r6
 4008844:	2027883a 	mov	r19,r4
 4008848:	10002f1e 	bne	r2,zero,4008908 <__pow5mult+0xe8>
 400884c:	2825883a 	mov	r18,r5
 4008850:	8021d0ba 	srai	r16,r16,2
 4008854:	80001a26 	beq	r16,zero,40088c0 <__pow5mult+0xa0>
 4008858:	9c401217 	ldw	r17,72(r19)
 400885c:	8800061e 	bne	r17,zero,4008878 <__pow5mult+0x58>
 4008860:	00003406 	br	4008934 <__pow5mult+0x114>
 4008864:	8021d07a 	srai	r16,r16,1
 4008868:	80001526 	beq	r16,zero,40088c0 <__pow5mult+0xa0>
 400886c:	88800017 	ldw	r2,0(r17)
 4008870:	10001c26 	beq	r2,zero,40088e4 <__pow5mult+0xc4>
 4008874:	1023883a 	mov	r17,r2
 4008878:	8080004c 	andi	r2,r16,1
 400887c:	103ff926 	beq	r2,zero,4008864 <__reset+0xfa818864>
 4008880:	880d883a 	mov	r6,r17
 4008884:	900b883a 	mov	r5,r18
 4008888:	9809883a 	mov	r4,r19
 400888c:	40086280 	call	4008628 <__multiply>
 4008890:	90001b26 	beq	r18,zero,4008900 <__pow5mult+0xe0>
 4008894:	91000117 	ldw	r4,4(r18)
 4008898:	98c01317 	ldw	r3,76(r19)
 400889c:	8021d07a 	srai	r16,r16,1
 40088a0:	2109883a 	add	r4,r4,r4
 40088a4:	2109883a 	add	r4,r4,r4
 40088a8:	1907883a 	add	r3,r3,r4
 40088ac:	19000017 	ldw	r4,0(r3)
 40088b0:	91000015 	stw	r4,0(r18)
 40088b4:	1c800015 	stw	r18,0(r3)
 40088b8:	1025883a 	mov	r18,r2
 40088bc:	803feb1e 	bne	r16,zero,400886c <__reset+0xfa81886c>
 40088c0:	9005883a 	mov	r2,r18
 40088c4:	dfc00517 	ldw	ra,20(sp)
 40088c8:	dd000417 	ldw	r20,16(sp)
 40088cc:	dcc00317 	ldw	r19,12(sp)
 40088d0:	dc800217 	ldw	r18,8(sp)
 40088d4:	dc400117 	ldw	r17,4(sp)
 40088d8:	dc000017 	ldw	r16,0(sp)
 40088dc:	dec00604 	addi	sp,sp,24
 40088e0:	f800283a 	ret
 40088e4:	880d883a 	mov	r6,r17
 40088e8:	880b883a 	mov	r5,r17
 40088ec:	9809883a 	mov	r4,r19
 40088f0:	40086280 	call	4008628 <__multiply>
 40088f4:	88800015 	stw	r2,0(r17)
 40088f8:	10000015 	stw	zero,0(r2)
 40088fc:	003fdd06 	br	4008874 <__reset+0xfa818874>
 4008900:	1025883a 	mov	r18,r2
 4008904:	003fd706 	br	4008864 <__reset+0xfa818864>
 4008908:	10bfffc4 	addi	r2,r2,-1
 400890c:	1085883a 	add	r2,r2,r2
 4008910:	00c10074 	movhi	r3,1025
 4008914:	18d49804 	addi	r3,r3,21088
 4008918:	1085883a 	add	r2,r2,r2
 400891c:	1885883a 	add	r2,r3,r2
 4008920:	11800017 	ldw	r6,0(r2)
 4008924:	000f883a 	mov	r7,zero
 4008928:	40082b00 	call	40082b0 <__multadd>
 400892c:	1025883a 	mov	r18,r2
 4008930:	003fc706 	br	4008850 <__reset+0xfa818850>
 4008934:	05000044 	movi	r20,1
 4008938:	a00b883a 	mov	r5,r20
 400893c:	9809883a 	mov	r4,r19
 4008940:	40081e00 	call	40081e0 <_Balloc>
 4008944:	1023883a 	mov	r17,r2
 4008948:	00809c44 	movi	r2,625
 400894c:	88800515 	stw	r2,20(r17)
 4008950:	8d000415 	stw	r20,16(r17)
 4008954:	9c401215 	stw	r17,72(r19)
 4008958:	88000015 	stw	zero,0(r17)
 400895c:	003fc606 	br	4008878 <__reset+0xfa818878>

04008960 <__lshift>:
 4008960:	defff904 	addi	sp,sp,-28
 4008964:	dd400515 	stw	r21,20(sp)
 4008968:	dcc00315 	stw	r19,12(sp)
 400896c:	302bd17a 	srai	r21,r6,5
 4008970:	2cc00417 	ldw	r19,16(r5)
 4008974:	28800217 	ldw	r2,8(r5)
 4008978:	dd000415 	stw	r20,16(sp)
 400897c:	ace7883a 	add	r19,r21,r19
 4008980:	dc800215 	stw	r18,8(sp)
 4008984:	dc400115 	stw	r17,4(sp)
 4008988:	dc000015 	stw	r16,0(sp)
 400898c:	dfc00615 	stw	ra,24(sp)
 4008990:	9c000044 	addi	r16,r19,1
 4008994:	2823883a 	mov	r17,r5
 4008998:	3029883a 	mov	r20,r6
 400899c:	2025883a 	mov	r18,r4
 40089a0:	29400117 	ldw	r5,4(r5)
 40089a4:	1400030e 	bge	r2,r16,40089b4 <__lshift+0x54>
 40089a8:	1085883a 	add	r2,r2,r2
 40089ac:	29400044 	addi	r5,r5,1
 40089b0:	143ffd16 	blt	r2,r16,40089a8 <__reset+0xfa8189a8>
 40089b4:	9009883a 	mov	r4,r18
 40089b8:	40081e00 	call	40081e0 <_Balloc>
 40089bc:	10c00504 	addi	r3,r2,20
 40089c0:	0540070e 	bge	zero,r21,40089e0 <__lshift+0x80>
 40089c4:	ad6b883a 	add	r21,r21,r21
 40089c8:	ad6b883a 	add	r21,r21,r21
 40089cc:	1809883a 	mov	r4,r3
 40089d0:	1d47883a 	add	r3,r3,r21
 40089d4:	20000015 	stw	zero,0(r4)
 40089d8:	21000104 	addi	r4,r4,4
 40089dc:	193ffd1e 	bne	r3,r4,40089d4 <__reset+0xfa8189d4>
 40089e0:	8a000417 	ldw	r8,16(r17)
 40089e4:	89000504 	addi	r4,r17,20
 40089e8:	a18007cc 	andi	r6,r20,31
 40089ec:	4211883a 	add	r8,r8,r8
 40089f0:	4211883a 	add	r8,r8,r8
 40089f4:	2211883a 	add	r8,r4,r8
 40089f8:	30002326 	beq	r6,zero,4008a88 <__lshift+0x128>
 40089fc:	02400804 	movi	r9,32
 4008a00:	4993c83a 	sub	r9,r9,r6
 4008a04:	000b883a 	mov	r5,zero
 4008a08:	21c00017 	ldw	r7,0(r4)
 4008a0c:	1815883a 	mov	r10,r3
 4008a10:	18c00104 	addi	r3,r3,4
 4008a14:	398e983a 	sll	r7,r7,r6
 4008a18:	21000104 	addi	r4,r4,4
 4008a1c:	394ab03a 	or	r5,r7,r5
 4008a20:	197fff15 	stw	r5,-4(r3)
 4008a24:	217fff17 	ldw	r5,-4(r4)
 4008a28:	2a4ad83a 	srl	r5,r5,r9
 4008a2c:	223ff636 	bltu	r4,r8,4008a08 <__reset+0xfa818a08>
 4008a30:	51400115 	stw	r5,4(r10)
 4008a34:	28001a1e 	bne	r5,zero,4008aa0 <__lshift+0x140>
 4008a38:	843fffc4 	addi	r16,r16,-1
 4008a3c:	14000415 	stw	r16,16(r2)
 4008a40:	88000826 	beq	r17,zero,4008a64 <__lshift+0x104>
 4008a44:	89000117 	ldw	r4,4(r17)
 4008a48:	90c01317 	ldw	r3,76(r18)
 4008a4c:	2109883a 	add	r4,r4,r4
 4008a50:	2109883a 	add	r4,r4,r4
 4008a54:	1907883a 	add	r3,r3,r4
 4008a58:	19000017 	ldw	r4,0(r3)
 4008a5c:	89000015 	stw	r4,0(r17)
 4008a60:	1c400015 	stw	r17,0(r3)
 4008a64:	dfc00617 	ldw	ra,24(sp)
 4008a68:	dd400517 	ldw	r21,20(sp)
 4008a6c:	dd000417 	ldw	r20,16(sp)
 4008a70:	dcc00317 	ldw	r19,12(sp)
 4008a74:	dc800217 	ldw	r18,8(sp)
 4008a78:	dc400117 	ldw	r17,4(sp)
 4008a7c:	dc000017 	ldw	r16,0(sp)
 4008a80:	dec00704 	addi	sp,sp,28
 4008a84:	f800283a 	ret
 4008a88:	21400017 	ldw	r5,0(r4)
 4008a8c:	18c00104 	addi	r3,r3,4
 4008a90:	21000104 	addi	r4,r4,4
 4008a94:	197fff15 	stw	r5,-4(r3)
 4008a98:	223ffb36 	bltu	r4,r8,4008a88 <__reset+0xfa818a88>
 4008a9c:	003fe606 	br	4008a38 <__reset+0xfa818a38>
 4008aa0:	9c000084 	addi	r16,r19,2
 4008aa4:	003fe406 	br	4008a38 <__reset+0xfa818a38>

04008aa8 <__mcmp>:
 4008aa8:	20800417 	ldw	r2,16(r4)
 4008aac:	28c00417 	ldw	r3,16(r5)
 4008ab0:	10c5c83a 	sub	r2,r2,r3
 4008ab4:	1000111e 	bne	r2,zero,4008afc <__mcmp+0x54>
 4008ab8:	18c7883a 	add	r3,r3,r3
 4008abc:	18c7883a 	add	r3,r3,r3
 4008ac0:	21000504 	addi	r4,r4,20
 4008ac4:	29400504 	addi	r5,r5,20
 4008ac8:	20c5883a 	add	r2,r4,r3
 4008acc:	28cb883a 	add	r5,r5,r3
 4008ad0:	00000106 	br	4008ad8 <__mcmp+0x30>
 4008ad4:	20800a2e 	bgeu	r4,r2,4008b00 <__mcmp+0x58>
 4008ad8:	10bfff04 	addi	r2,r2,-4
 4008adc:	297fff04 	addi	r5,r5,-4
 4008ae0:	11800017 	ldw	r6,0(r2)
 4008ae4:	28c00017 	ldw	r3,0(r5)
 4008ae8:	30fffa26 	beq	r6,r3,4008ad4 <__reset+0xfa818ad4>
 4008aec:	30c00236 	bltu	r6,r3,4008af8 <__mcmp+0x50>
 4008af0:	00800044 	movi	r2,1
 4008af4:	f800283a 	ret
 4008af8:	00bfffc4 	movi	r2,-1
 4008afc:	f800283a 	ret
 4008b00:	0005883a 	mov	r2,zero
 4008b04:	f800283a 	ret

04008b08 <__mdiff>:
 4008b08:	28c00417 	ldw	r3,16(r5)
 4008b0c:	30800417 	ldw	r2,16(r6)
 4008b10:	defffa04 	addi	sp,sp,-24
 4008b14:	dcc00315 	stw	r19,12(sp)
 4008b18:	dc800215 	stw	r18,8(sp)
 4008b1c:	dfc00515 	stw	ra,20(sp)
 4008b20:	dd000415 	stw	r20,16(sp)
 4008b24:	dc400115 	stw	r17,4(sp)
 4008b28:	dc000015 	stw	r16,0(sp)
 4008b2c:	1887c83a 	sub	r3,r3,r2
 4008b30:	2825883a 	mov	r18,r5
 4008b34:	3027883a 	mov	r19,r6
 4008b38:	1800141e 	bne	r3,zero,4008b8c <__mdiff+0x84>
 4008b3c:	1085883a 	add	r2,r2,r2
 4008b40:	1085883a 	add	r2,r2,r2
 4008b44:	2a000504 	addi	r8,r5,20
 4008b48:	34000504 	addi	r16,r6,20
 4008b4c:	4087883a 	add	r3,r8,r2
 4008b50:	8085883a 	add	r2,r16,r2
 4008b54:	00000106 	br	4008b5c <__mdiff+0x54>
 4008b58:	40c0592e 	bgeu	r8,r3,4008cc0 <__mdiff+0x1b8>
 4008b5c:	18ffff04 	addi	r3,r3,-4
 4008b60:	10bfff04 	addi	r2,r2,-4
 4008b64:	19c00017 	ldw	r7,0(r3)
 4008b68:	11400017 	ldw	r5,0(r2)
 4008b6c:	397ffa26 	beq	r7,r5,4008b58 <__reset+0xfa818b58>
 4008b70:	3940592e 	bgeu	r7,r5,4008cd8 <__mdiff+0x1d0>
 4008b74:	9005883a 	mov	r2,r18
 4008b78:	4023883a 	mov	r17,r8
 4008b7c:	9825883a 	mov	r18,r19
 4008b80:	05000044 	movi	r20,1
 4008b84:	1027883a 	mov	r19,r2
 4008b88:	00000406 	br	4008b9c <__mdiff+0x94>
 4008b8c:	18005616 	blt	r3,zero,4008ce8 <__mdiff+0x1e0>
 4008b90:	34400504 	addi	r17,r6,20
 4008b94:	2c000504 	addi	r16,r5,20
 4008b98:	0029883a 	mov	r20,zero
 4008b9c:	91400117 	ldw	r5,4(r18)
 4008ba0:	40081e00 	call	40081e0 <_Balloc>
 4008ba4:	92400417 	ldw	r9,16(r18)
 4008ba8:	9b000417 	ldw	r12,16(r19)
 4008bac:	12c00504 	addi	r11,r2,20
 4008bb0:	4a51883a 	add	r8,r9,r9
 4008bb4:	6319883a 	add	r12,r12,r12
 4008bb8:	4211883a 	add	r8,r8,r8
 4008bbc:	6319883a 	add	r12,r12,r12
 4008bc0:	15000315 	stw	r20,12(r2)
 4008bc4:	8211883a 	add	r8,r16,r8
 4008bc8:	8b19883a 	add	r12,r17,r12
 4008bcc:	0007883a 	mov	r3,zero
 4008bd0:	81400017 	ldw	r5,0(r16)
 4008bd4:	89c00017 	ldw	r7,0(r17)
 4008bd8:	59800104 	addi	r6,r11,4
 4008bdc:	293fffcc 	andi	r4,r5,65535
 4008be0:	20c7883a 	add	r3,r4,r3
 4008be4:	393fffcc 	andi	r4,r7,65535
 4008be8:	1909c83a 	sub	r4,r3,r4
 4008bec:	280ad43a 	srli	r5,r5,16
 4008bf0:	380ed43a 	srli	r7,r7,16
 4008bf4:	2007d43a 	srai	r3,r4,16
 4008bf8:	213fffcc 	andi	r4,r4,65535
 4008bfc:	29cbc83a 	sub	r5,r5,r7
 4008c00:	28c7883a 	add	r3,r5,r3
 4008c04:	180a943a 	slli	r5,r3,16
 4008c08:	8c400104 	addi	r17,r17,4
 4008c0c:	84000104 	addi	r16,r16,4
 4008c10:	2908b03a 	or	r4,r5,r4
 4008c14:	59000015 	stw	r4,0(r11)
 4008c18:	1807d43a 	srai	r3,r3,16
 4008c1c:	3015883a 	mov	r10,r6
 4008c20:	3017883a 	mov	r11,r6
 4008c24:	8b3fea36 	bltu	r17,r12,4008bd0 <__reset+0xfa818bd0>
 4008c28:	8200162e 	bgeu	r16,r8,4008c84 <__mdiff+0x17c>
 4008c2c:	8017883a 	mov	r11,r16
 4008c30:	59400017 	ldw	r5,0(r11)
 4008c34:	31800104 	addi	r6,r6,4
 4008c38:	5ac00104 	addi	r11,r11,4
 4008c3c:	293fffcc 	andi	r4,r5,65535
 4008c40:	20c7883a 	add	r3,r4,r3
 4008c44:	280ed43a 	srli	r7,r5,16
 4008c48:	180bd43a 	srai	r5,r3,16
 4008c4c:	193fffcc 	andi	r4,r3,65535
 4008c50:	3947883a 	add	r3,r7,r5
 4008c54:	180a943a 	slli	r5,r3,16
 4008c58:	1807d43a 	srai	r3,r3,16
 4008c5c:	2908b03a 	or	r4,r5,r4
 4008c60:	313fff15 	stw	r4,-4(r6)
 4008c64:	5a3ff236 	bltu	r11,r8,4008c30 <__reset+0xfa818c30>
 4008c68:	0406303a 	nor	r3,zero,r16
 4008c6c:	1a07883a 	add	r3,r3,r8
 4008c70:	1806d0ba 	srli	r3,r3,2
 4008c74:	18c00044 	addi	r3,r3,1
 4008c78:	18c7883a 	add	r3,r3,r3
 4008c7c:	18c7883a 	add	r3,r3,r3
 4008c80:	50d5883a 	add	r10,r10,r3
 4008c84:	50ffff04 	addi	r3,r10,-4
 4008c88:	2000041e 	bne	r4,zero,4008c9c <__mdiff+0x194>
 4008c8c:	18ffff04 	addi	r3,r3,-4
 4008c90:	19000017 	ldw	r4,0(r3)
 4008c94:	4a7fffc4 	addi	r9,r9,-1
 4008c98:	203ffc26 	beq	r4,zero,4008c8c <__reset+0xfa818c8c>
 4008c9c:	12400415 	stw	r9,16(r2)
 4008ca0:	dfc00517 	ldw	ra,20(sp)
 4008ca4:	dd000417 	ldw	r20,16(sp)
 4008ca8:	dcc00317 	ldw	r19,12(sp)
 4008cac:	dc800217 	ldw	r18,8(sp)
 4008cb0:	dc400117 	ldw	r17,4(sp)
 4008cb4:	dc000017 	ldw	r16,0(sp)
 4008cb8:	dec00604 	addi	sp,sp,24
 4008cbc:	f800283a 	ret
 4008cc0:	000b883a 	mov	r5,zero
 4008cc4:	40081e00 	call	40081e0 <_Balloc>
 4008cc8:	00c00044 	movi	r3,1
 4008ccc:	10c00415 	stw	r3,16(r2)
 4008cd0:	10000515 	stw	zero,20(r2)
 4008cd4:	003ff206 	br	4008ca0 <__reset+0xfa818ca0>
 4008cd8:	8023883a 	mov	r17,r16
 4008cdc:	0029883a 	mov	r20,zero
 4008ce0:	4021883a 	mov	r16,r8
 4008ce4:	003fad06 	br	4008b9c <__reset+0xfa818b9c>
 4008ce8:	9005883a 	mov	r2,r18
 4008cec:	94400504 	addi	r17,r18,20
 4008cf0:	9c000504 	addi	r16,r19,20
 4008cf4:	9825883a 	mov	r18,r19
 4008cf8:	05000044 	movi	r20,1
 4008cfc:	1027883a 	mov	r19,r2
 4008d00:	003fa606 	br	4008b9c <__reset+0xfa818b9c>

04008d04 <__ulp>:
 4008d04:	295ffc2c 	andhi	r5,r5,32752
 4008d08:	00bf3034 	movhi	r2,64704
 4008d0c:	2887883a 	add	r3,r5,r2
 4008d10:	00c0020e 	bge	zero,r3,4008d1c <__ulp+0x18>
 4008d14:	0005883a 	mov	r2,zero
 4008d18:	f800283a 	ret
 4008d1c:	00c7c83a 	sub	r3,zero,r3
 4008d20:	1807d53a 	srai	r3,r3,20
 4008d24:	008004c4 	movi	r2,19
 4008d28:	10c00b0e 	bge	r2,r3,4008d58 <__ulp+0x54>
 4008d2c:	18bffb04 	addi	r2,r3,-20
 4008d30:	01000784 	movi	r4,30
 4008d34:	0007883a 	mov	r3,zero
 4008d38:	20800516 	blt	r4,r2,4008d50 <__ulp+0x4c>
 4008d3c:	010007c4 	movi	r4,31
 4008d40:	2089c83a 	sub	r4,r4,r2
 4008d44:	00800044 	movi	r2,1
 4008d48:	1104983a 	sll	r2,r2,r4
 4008d4c:	f800283a 	ret
 4008d50:	00800044 	movi	r2,1
 4008d54:	f800283a 	ret
 4008d58:	01400234 	movhi	r5,8
 4008d5c:	28c7d83a 	sra	r3,r5,r3
 4008d60:	0005883a 	mov	r2,zero
 4008d64:	f800283a 	ret

04008d68 <__b2d>:
 4008d68:	defffa04 	addi	sp,sp,-24
 4008d6c:	dc000015 	stw	r16,0(sp)
 4008d70:	24000417 	ldw	r16,16(r4)
 4008d74:	dc400115 	stw	r17,4(sp)
 4008d78:	24400504 	addi	r17,r4,20
 4008d7c:	8421883a 	add	r16,r16,r16
 4008d80:	8421883a 	add	r16,r16,r16
 4008d84:	8c21883a 	add	r16,r17,r16
 4008d88:	dc800215 	stw	r18,8(sp)
 4008d8c:	84bfff17 	ldw	r18,-4(r16)
 4008d90:	dd000415 	stw	r20,16(sp)
 4008d94:	dcc00315 	stw	r19,12(sp)
 4008d98:	9009883a 	mov	r4,r18
 4008d9c:	2829883a 	mov	r20,r5
 4008da0:	dfc00515 	stw	ra,20(sp)
 4008da4:	40084d40 	call	40084d4 <__hi0bits>
 4008da8:	00c00804 	movi	r3,32
 4008dac:	1889c83a 	sub	r4,r3,r2
 4008db0:	a1000015 	stw	r4,0(r20)
 4008db4:	01000284 	movi	r4,10
 4008db8:	84ffff04 	addi	r19,r16,-4
 4008dbc:	20801216 	blt	r4,r2,4008e08 <__b2d+0xa0>
 4008dc0:	018002c4 	movi	r6,11
 4008dc4:	308dc83a 	sub	r6,r6,r2
 4008dc8:	9186d83a 	srl	r3,r18,r6
 4008dcc:	18cffc34 	orhi	r3,r3,16368
 4008dd0:	8cc0212e 	bgeu	r17,r19,4008e58 <__b2d+0xf0>
 4008dd4:	813ffe17 	ldw	r4,-8(r16)
 4008dd8:	218cd83a 	srl	r6,r4,r6
 4008ddc:	10800544 	addi	r2,r2,21
 4008de0:	9084983a 	sll	r2,r18,r2
 4008de4:	1184b03a 	or	r2,r2,r6
 4008de8:	dfc00517 	ldw	ra,20(sp)
 4008dec:	dd000417 	ldw	r20,16(sp)
 4008df0:	dcc00317 	ldw	r19,12(sp)
 4008df4:	dc800217 	ldw	r18,8(sp)
 4008df8:	dc400117 	ldw	r17,4(sp)
 4008dfc:	dc000017 	ldw	r16,0(sp)
 4008e00:	dec00604 	addi	sp,sp,24
 4008e04:	f800283a 	ret
 4008e08:	8cc00f2e 	bgeu	r17,r19,4008e48 <__b2d+0xe0>
 4008e0c:	117ffd44 	addi	r5,r2,-11
 4008e10:	80bffe17 	ldw	r2,-8(r16)
 4008e14:	28000e26 	beq	r5,zero,4008e50 <__b2d+0xe8>
 4008e18:	1949c83a 	sub	r4,r3,r5
 4008e1c:	9164983a 	sll	r18,r18,r5
 4008e20:	1106d83a 	srl	r3,r2,r4
 4008e24:	81bffe04 	addi	r6,r16,-8
 4008e28:	948ffc34 	orhi	r18,r18,16368
 4008e2c:	90c6b03a 	or	r3,r18,r3
 4008e30:	89800e2e 	bgeu	r17,r6,4008e6c <__b2d+0x104>
 4008e34:	81bffd17 	ldw	r6,-12(r16)
 4008e38:	1144983a 	sll	r2,r2,r5
 4008e3c:	310ad83a 	srl	r5,r6,r4
 4008e40:	2884b03a 	or	r2,r5,r2
 4008e44:	003fe806 	br	4008de8 <__reset+0xfa818de8>
 4008e48:	10bffd44 	addi	r2,r2,-11
 4008e4c:	1000041e 	bne	r2,zero,4008e60 <__b2d+0xf8>
 4008e50:	90cffc34 	orhi	r3,r18,16368
 4008e54:	003fe406 	br	4008de8 <__reset+0xfa818de8>
 4008e58:	000d883a 	mov	r6,zero
 4008e5c:	003fdf06 	br	4008ddc <__reset+0xfa818ddc>
 4008e60:	90a4983a 	sll	r18,r18,r2
 4008e64:	0005883a 	mov	r2,zero
 4008e68:	003ff906 	br	4008e50 <__reset+0xfa818e50>
 4008e6c:	1144983a 	sll	r2,r2,r5
 4008e70:	003fdd06 	br	4008de8 <__reset+0xfa818de8>

04008e74 <__d2b>:
 4008e74:	defff804 	addi	sp,sp,-32
 4008e78:	dc000215 	stw	r16,8(sp)
 4008e7c:	3021883a 	mov	r16,r6
 4008e80:	dc400315 	stw	r17,12(sp)
 4008e84:	8022907a 	slli	r17,r16,1
 4008e88:	dd000615 	stw	r20,24(sp)
 4008e8c:	2829883a 	mov	r20,r5
 4008e90:	01400044 	movi	r5,1
 4008e94:	dcc00515 	stw	r19,20(sp)
 4008e98:	dc800415 	stw	r18,16(sp)
 4008e9c:	dfc00715 	stw	ra,28(sp)
 4008ea0:	3825883a 	mov	r18,r7
 4008ea4:	8822d57a 	srli	r17,r17,21
 4008ea8:	40081e00 	call	40081e0 <_Balloc>
 4008eac:	1027883a 	mov	r19,r2
 4008eb0:	00800434 	movhi	r2,16
 4008eb4:	10bfffc4 	addi	r2,r2,-1
 4008eb8:	808c703a 	and	r6,r16,r2
 4008ebc:	88000126 	beq	r17,zero,4008ec4 <__d2b+0x50>
 4008ec0:	31800434 	orhi	r6,r6,16
 4008ec4:	d9800015 	stw	r6,0(sp)
 4008ec8:	a0002426 	beq	r20,zero,4008f5c <__d2b+0xe8>
 4008ecc:	d9000104 	addi	r4,sp,4
 4008ed0:	dd000115 	stw	r20,4(sp)
 4008ed4:	400853c0 	call	400853c <__lo0bits>
 4008ed8:	d8c00017 	ldw	r3,0(sp)
 4008edc:	10002f1e 	bne	r2,zero,4008f9c <__d2b+0x128>
 4008ee0:	d9000117 	ldw	r4,4(sp)
 4008ee4:	99000515 	stw	r4,20(r19)
 4008ee8:	1821003a 	cmpeq	r16,r3,zero
 4008eec:	01000084 	movi	r4,2
 4008ef0:	2421c83a 	sub	r16,r4,r16
 4008ef4:	98c00615 	stw	r3,24(r19)
 4008ef8:	9c000415 	stw	r16,16(r19)
 4008efc:	88001f1e 	bne	r17,zero,4008f7c <__d2b+0x108>
 4008f00:	10bef384 	addi	r2,r2,-1074
 4008f04:	90800015 	stw	r2,0(r18)
 4008f08:	00900034 	movhi	r2,16384
 4008f0c:	10bfffc4 	addi	r2,r2,-1
 4008f10:	8085883a 	add	r2,r16,r2
 4008f14:	1085883a 	add	r2,r2,r2
 4008f18:	1085883a 	add	r2,r2,r2
 4008f1c:	9885883a 	add	r2,r19,r2
 4008f20:	11000517 	ldw	r4,20(r2)
 4008f24:	8020917a 	slli	r16,r16,5
 4008f28:	40084d40 	call	40084d4 <__hi0bits>
 4008f2c:	d8c00817 	ldw	r3,32(sp)
 4008f30:	8085c83a 	sub	r2,r16,r2
 4008f34:	18800015 	stw	r2,0(r3)
 4008f38:	9805883a 	mov	r2,r19
 4008f3c:	dfc00717 	ldw	ra,28(sp)
 4008f40:	dd000617 	ldw	r20,24(sp)
 4008f44:	dcc00517 	ldw	r19,20(sp)
 4008f48:	dc800417 	ldw	r18,16(sp)
 4008f4c:	dc400317 	ldw	r17,12(sp)
 4008f50:	dc000217 	ldw	r16,8(sp)
 4008f54:	dec00804 	addi	sp,sp,32
 4008f58:	f800283a 	ret
 4008f5c:	d809883a 	mov	r4,sp
 4008f60:	400853c0 	call	400853c <__lo0bits>
 4008f64:	d8c00017 	ldw	r3,0(sp)
 4008f68:	04000044 	movi	r16,1
 4008f6c:	9c000415 	stw	r16,16(r19)
 4008f70:	98c00515 	stw	r3,20(r19)
 4008f74:	10800804 	addi	r2,r2,32
 4008f78:	883fe126 	beq	r17,zero,4008f00 <__reset+0xfa818f00>
 4008f7c:	00c00d44 	movi	r3,53
 4008f80:	8c7ef344 	addi	r17,r17,-1075
 4008f84:	88a3883a 	add	r17,r17,r2
 4008f88:	1885c83a 	sub	r2,r3,r2
 4008f8c:	d8c00817 	ldw	r3,32(sp)
 4008f90:	94400015 	stw	r17,0(r18)
 4008f94:	18800015 	stw	r2,0(r3)
 4008f98:	003fe706 	br	4008f38 <__reset+0xfa818f38>
 4008f9c:	01000804 	movi	r4,32
 4008fa0:	2089c83a 	sub	r4,r4,r2
 4008fa4:	1908983a 	sll	r4,r3,r4
 4008fa8:	d9400117 	ldw	r5,4(sp)
 4008fac:	1886d83a 	srl	r3,r3,r2
 4008fb0:	2148b03a 	or	r4,r4,r5
 4008fb4:	99000515 	stw	r4,20(r19)
 4008fb8:	d8c00015 	stw	r3,0(sp)
 4008fbc:	003fca06 	br	4008ee8 <__reset+0xfa818ee8>

04008fc0 <__ratio>:
 4008fc0:	defff904 	addi	sp,sp,-28
 4008fc4:	dc400315 	stw	r17,12(sp)
 4008fc8:	2823883a 	mov	r17,r5
 4008fcc:	d9400104 	addi	r5,sp,4
 4008fd0:	dfc00615 	stw	ra,24(sp)
 4008fd4:	dcc00515 	stw	r19,20(sp)
 4008fd8:	dc800415 	stw	r18,16(sp)
 4008fdc:	2027883a 	mov	r19,r4
 4008fe0:	dc000215 	stw	r16,8(sp)
 4008fe4:	4008d680 	call	4008d68 <__b2d>
 4008fe8:	d80b883a 	mov	r5,sp
 4008fec:	8809883a 	mov	r4,r17
 4008ff0:	1025883a 	mov	r18,r2
 4008ff4:	1821883a 	mov	r16,r3
 4008ff8:	4008d680 	call	4008d68 <__b2d>
 4008ffc:	8a000417 	ldw	r8,16(r17)
 4009000:	99000417 	ldw	r4,16(r19)
 4009004:	d9400117 	ldw	r5,4(sp)
 4009008:	2209c83a 	sub	r4,r4,r8
 400900c:	2010917a 	slli	r8,r4,5
 4009010:	d9000017 	ldw	r4,0(sp)
 4009014:	2909c83a 	sub	r4,r5,r4
 4009018:	4109883a 	add	r4,r8,r4
 400901c:	01000e0e 	bge	zero,r4,4009058 <__ratio+0x98>
 4009020:	2008953a 	slli	r4,r4,20
 4009024:	2421883a 	add	r16,r4,r16
 4009028:	100d883a 	mov	r6,r2
 400902c:	180f883a 	mov	r7,r3
 4009030:	9009883a 	mov	r4,r18
 4009034:	800b883a 	mov	r5,r16
 4009038:	400ceac0 	call	400ceac <__divdf3>
 400903c:	dfc00617 	ldw	ra,24(sp)
 4009040:	dcc00517 	ldw	r19,20(sp)
 4009044:	dc800417 	ldw	r18,16(sp)
 4009048:	dc400317 	ldw	r17,12(sp)
 400904c:	dc000217 	ldw	r16,8(sp)
 4009050:	dec00704 	addi	sp,sp,28
 4009054:	f800283a 	ret
 4009058:	2008953a 	slli	r4,r4,20
 400905c:	1907c83a 	sub	r3,r3,r4
 4009060:	003ff106 	br	4009028 <__reset+0xfa819028>

04009064 <_mprec_log10>:
 4009064:	defffe04 	addi	sp,sp,-8
 4009068:	dc000015 	stw	r16,0(sp)
 400906c:	dfc00115 	stw	ra,4(sp)
 4009070:	008005c4 	movi	r2,23
 4009074:	2021883a 	mov	r16,r4
 4009078:	11000d0e 	bge	r2,r4,40090b0 <_mprec_log10+0x4c>
 400907c:	0005883a 	mov	r2,zero
 4009080:	00cffc34 	movhi	r3,16368
 4009084:	843fffc4 	addi	r16,r16,-1
 4009088:	000d883a 	mov	r6,zero
 400908c:	01d00934 	movhi	r7,16420
 4009090:	1009883a 	mov	r4,r2
 4009094:	180b883a 	mov	r5,r3
 4009098:	400d9ec0 	call	400d9ec <__muldf3>
 400909c:	803ff91e 	bne	r16,zero,4009084 <__reset+0xfa819084>
 40090a0:	dfc00117 	ldw	ra,4(sp)
 40090a4:	dc000017 	ldw	r16,0(sp)
 40090a8:	dec00204 	addi	sp,sp,8
 40090ac:	f800283a 	ret
 40090b0:	202090fa 	slli	r16,r4,3
 40090b4:	00810074 	movhi	r2,1025
 40090b8:	1094af04 	addi	r2,r2,21180
 40090bc:	1421883a 	add	r16,r2,r16
 40090c0:	80800017 	ldw	r2,0(r16)
 40090c4:	80c00117 	ldw	r3,4(r16)
 40090c8:	dfc00117 	ldw	ra,4(sp)
 40090cc:	dc000017 	ldw	r16,0(sp)
 40090d0:	dec00204 	addi	sp,sp,8
 40090d4:	f800283a 	ret

040090d8 <__copybits>:
 40090d8:	297fffc4 	addi	r5,r5,-1
 40090dc:	280fd17a 	srai	r7,r5,5
 40090e0:	30c00417 	ldw	r3,16(r6)
 40090e4:	30800504 	addi	r2,r6,20
 40090e8:	39c00044 	addi	r7,r7,1
 40090ec:	18c7883a 	add	r3,r3,r3
 40090f0:	39cf883a 	add	r7,r7,r7
 40090f4:	18c7883a 	add	r3,r3,r3
 40090f8:	39cf883a 	add	r7,r7,r7
 40090fc:	10c7883a 	add	r3,r2,r3
 4009100:	21cf883a 	add	r7,r4,r7
 4009104:	10c00d2e 	bgeu	r2,r3,400913c <__copybits+0x64>
 4009108:	200b883a 	mov	r5,r4
 400910c:	12000017 	ldw	r8,0(r2)
 4009110:	29400104 	addi	r5,r5,4
 4009114:	10800104 	addi	r2,r2,4
 4009118:	2a3fff15 	stw	r8,-4(r5)
 400911c:	10fffb36 	bltu	r2,r3,400910c <__reset+0xfa81910c>
 4009120:	1985c83a 	sub	r2,r3,r6
 4009124:	10bffac4 	addi	r2,r2,-21
 4009128:	1004d0ba 	srli	r2,r2,2
 400912c:	10800044 	addi	r2,r2,1
 4009130:	1085883a 	add	r2,r2,r2
 4009134:	1085883a 	add	r2,r2,r2
 4009138:	2089883a 	add	r4,r4,r2
 400913c:	21c0032e 	bgeu	r4,r7,400914c <__copybits+0x74>
 4009140:	20000015 	stw	zero,0(r4)
 4009144:	21000104 	addi	r4,r4,4
 4009148:	21fffd36 	bltu	r4,r7,4009140 <__reset+0xfa819140>
 400914c:	f800283a 	ret

04009150 <__any_on>:
 4009150:	20c00417 	ldw	r3,16(r4)
 4009154:	2805d17a 	srai	r2,r5,5
 4009158:	21000504 	addi	r4,r4,20
 400915c:	18800d0e 	bge	r3,r2,4009194 <__any_on+0x44>
 4009160:	18c7883a 	add	r3,r3,r3
 4009164:	18c7883a 	add	r3,r3,r3
 4009168:	20c7883a 	add	r3,r4,r3
 400916c:	20c0192e 	bgeu	r4,r3,40091d4 <__any_on+0x84>
 4009170:	18bfff17 	ldw	r2,-4(r3)
 4009174:	18ffff04 	addi	r3,r3,-4
 4009178:	1000041e 	bne	r2,zero,400918c <__any_on+0x3c>
 400917c:	20c0142e 	bgeu	r4,r3,40091d0 <__any_on+0x80>
 4009180:	18ffff04 	addi	r3,r3,-4
 4009184:	19400017 	ldw	r5,0(r3)
 4009188:	283ffc26 	beq	r5,zero,400917c <__reset+0xfa81917c>
 400918c:	00800044 	movi	r2,1
 4009190:	f800283a 	ret
 4009194:	10c00a0e 	bge	r2,r3,40091c0 <__any_on+0x70>
 4009198:	1085883a 	add	r2,r2,r2
 400919c:	1085883a 	add	r2,r2,r2
 40091a0:	294007cc 	andi	r5,r5,31
 40091a4:	2087883a 	add	r3,r4,r2
 40091a8:	283ff026 	beq	r5,zero,400916c <__reset+0xfa81916c>
 40091ac:	19800017 	ldw	r6,0(r3)
 40091b0:	3144d83a 	srl	r2,r6,r5
 40091b4:	114a983a 	sll	r5,r2,r5
 40091b8:	317ff41e 	bne	r6,r5,400918c <__reset+0xfa81918c>
 40091bc:	003feb06 	br	400916c <__reset+0xfa81916c>
 40091c0:	1085883a 	add	r2,r2,r2
 40091c4:	1085883a 	add	r2,r2,r2
 40091c8:	2087883a 	add	r3,r4,r2
 40091cc:	003fe706 	br	400916c <__reset+0xfa81916c>
 40091d0:	f800283a 	ret
 40091d4:	0005883a 	mov	r2,zero
 40091d8:	f800283a 	ret

040091dc <_realloc_r>:
 40091dc:	defff604 	addi	sp,sp,-40
 40091e0:	dc800215 	stw	r18,8(sp)
 40091e4:	dfc00915 	stw	ra,36(sp)
 40091e8:	df000815 	stw	fp,32(sp)
 40091ec:	ddc00715 	stw	r23,28(sp)
 40091f0:	dd800615 	stw	r22,24(sp)
 40091f4:	dd400515 	stw	r21,20(sp)
 40091f8:	dd000415 	stw	r20,16(sp)
 40091fc:	dcc00315 	stw	r19,12(sp)
 4009200:	dc400115 	stw	r17,4(sp)
 4009204:	dc000015 	stw	r16,0(sp)
 4009208:	3025883a 	mov	r18,r6
 400920c:	2800b726 	beq	r5,zero,40094ec <_realloc_r+0x310>
 4009210:	282b883a 	mov	r21,r5
 4009214:	2029883a 	mov	r20,r4
 4009218:	400f4c40 	call	400f4c4 <__malloc_lock>
 400921c:	a8bfff17 	ldw	r2,-4(r21)
 4009220:	043fff04 	movi	r16,-4
 4009224:	90c002c4 	addi	r3,r18,11
 4009228:	01000584 	movi	r4,22
 400922c:	acfffe04 	addi	r19,r21,-8
 4009230:	1420703a 	and	r16,r2,r16
 4009234:	20c0332e 	bgeu	r4,r3,4009304 <_realloc_r+0x128>
 4009238:	047ffe04 	movi	r17,-8
 400923c:	1c62703a 	and	r17,r3,r17
 4009240:	8807883a 	mov	r3,r17
 4009244:	88005816 	blt	r17,zero,40093a8 <_realloc_r+0x1cc>
 4009248:	8c805736 	bltu	r17,r18,40093a8 <_realloc_r+0x1cc>
 400924c:	80c0300e 	bge	r16,r3,4009310 <_realloc_r+0x134>
 4009250:	07010074 	movhi	fp,1025
 4009254:	e7173c04 	addi	fp,fp,23792
 4009258:	e1c00217 	ldw	r7,8(fp)
 400925c:	9c09883a 	add	r4,r19,r16
 4009260:	22000117 	ldw	r8,4(r4)
 4009264:	21c06326 	beq	r4,r7,40093f4 <_realloc_r+0x218>
 4009268:	017fff84 	movi	r5,-2
 400926c:	414a703a 	and	r5,r8,r5
 4009270:	214b883a 	add	r5,r4,r5
 4009274:	29800117 	ldw	r6,4(r5)
 4009278:	3180004c 	andi	r6,r6,1
 400927c:	30003f26 	beq	r6,zero,400937c <_realloc_r+0x1a0>
 4009280:	1080004c 	andi	r2,r2,1
 4009284:	10008326 	beq	r2,zero,4009494 <_realloc_r+0x2b8>
 4009288:	900b883a 	mov	r5,r18
 400928c:	a009883a 	mov	r4,r20
 4009290:	400766c0 	call	400766c <_malloc_r>
 4009294:	1025883a 	mov	r18,r2
 4009298:	10011e26 	beq	r2,zero,4009714 <_realloc_r+0x538>
 400929c:	a93fff17 	ldw	r4,-4(r21)
 40092a0:	10fffe04 	addi	r3,r2,-8
 40092a4:	00bfff84 	movi	r2,-2
 40092a8:	2084703a 	and	r2,r4,r2
 40092ac:	9885883a 	add	r2,r19,r2
 40092b0:	1880ee26 	beq	r3,r2,400966c <_realloc_r+0x490>
 40092b4:	81bfff04 	addi	r6,r16,-4
 40092b8:	00800904 	movi	r2,36
 40092bc:	1180b836 	bltu	r2,r6,40095a0 <_realloc_r+0x3c4>
 40092c0:	00c004c4 	movi	r3,19
 40092c4:	19809636 	bltu	r3,r6,4009520 <_realloc_r+0x344>
 40092c8:	9005883a 	mov	r2,r18
 40092cc:	a807883a 	mov	r3,r21
 40092d0:	19000017 	ldw	r4,0(r3)
 40092d4:	11000015 	stw	r4,0(r2)
 40092d8:	19000117 	ldw	r4,4(r3)
 40092dc:	11000115 	stw	r4,4(r2)
 40092e0:	18c00217 	ldw	r3,8(r3)
 40092e4:	10c00215 	stw	r3,8(r2)
 40092e8:	a80b883a 	mov	r5,r21
 40092ec:	a009883a 	mov	r4,r20
 40092f0:	4006a800 	call	4006a80 <_free_r>
 40092f4:	a009883a 	mov	r4,r20
 40092f8:	400f4e80 	call	400f4e8 <__malloc_unlock>
 40092fc:	9005883a 	mov	r2,r18
 4009300:	00001206 	br	400934c <_realloc_r+0x170>
 4009304:	00c00404 	movi	r3,16
 4009308:	1823883a 	mov	r17,r3
 400930c:	003fce06 	br	4009248 <__reset+0xfa819248>
 4009310:	a825883a 	mov	r18,r21
 4009314:	8445c83a 	sub	r2,r16,r17
 4009318:	00c003c4 	movi	r3,15
 400931c:	18802636 	bltu	r3,r2,40093b8 <_realloc_r+0x1dc>
 4009320:	99800117 	ldw	r6,4(r19)
 4009324:	9c07883a 	add	r3,r19,r16
 4009328:	3180004c 	andi	r6,r6,1
 400932c:	3420b03a 	or	r16,r6,r16
 4009330:	9c000115 	stw	r16,4(r19)
 4009334:	18800117 	ldw	r2,4(r3)
 4009338:	10800054 	ori	r2,r2,1
 400933c:	18800115 	stw	r2,4(r3)
 4009340:	a009883a 	mov	r4,r20
 4009344:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4009348:	9005883a 	mov	r2,r18
 400934c:	dfc00917 	ldw	ra,36(sp)
 4009350:	df000817 	ldw	fp,32(sp)
 4009354:	ddc00717 	ldw	r23,28(sp)
 4009358:	dd800617 	ldw	r22,24(sp)
 400935c:	dd400517 	ldw	r21,20(sp)
 4009360:	dd000417 	ldw	r20,16(sp)
 4009364:	dcc00317 	ldw	r19,12(sp)
 4009368:	dc800217 	ldw	r18,8(sp)
 400936c:	dc400117 	ldw	r17,4(sp)
 4009370:	dc000017 	ldw	r16,0(sp)
 4009374:	dec00a04 	addi	sp,sp,40
 4009378:	f800283a 	ret
 400937c:	017fff04 	movi	r5,-4
 4009380:	414a703a 	and	r5,r8,r5
 4009384:	814d883a 	add	r6,r16,r5
 4009388:	30c01f16 	blt	r6,r3,4009408 <_realloc_r+0x22c>
 400938c:	20800317 	ldw	r2,12(r4)
 4009390:	20c00217 	ldw	r3,8(r4)
 4009394:	a825883a 	mov	r18,r21
 4009398:	3021883a 	mov	r16,r6
 400939c:	18800315 	stw	r2,12(r3)
 40093a0:	10c00215 	stw	r3,8(r2)
 40093a4:	003fdb06 	br	4009314 <__reset+0xfa819314>
 40093a8:	00800304 	movi	r2,12
 40093ac:	a0800015 	stw	r2,0(r20)
 40093b0:	0005883a 	mov	r2,zero
 40093b4:	003fe506 	br	400934c <__reset+0xfa81934c>
 40093b8:	98c00117 	ldw	r3,4(r19)
 40093bc:	9c4b883a 	add	r5,r19,r17
 40093c0:	11000054 	ori	r4,r2,1
 40093c4:	18c0004c 	andi	r3,r3,1
 40093c8:	1c62b03a 	or	r17,r3,r17
 40093cc:	9c400115 	stw	r17,4(r19)
 40093d0:	29000115 	stw	r4,4(r5)
 40093d4:	2885883a 	add	r2,r5,r2
 40093d8:	10c00117 	ldw	r3,4(r2)
 40093dc:	29400204 	addi	r5,r5,8
 40093e0:	a009883a 	mov	r4,r20
 40093e4:	18c00054 	ori	r3,r3,1
 40093e8:	10c00115 	stw	r3,4(r2)
 40093ec:	4006a800 	call	4006a80 <_free_r>
 40093f0:	003fd306 	br	4009340 <__reset+0xfa819340>
 40093f4:	017fff04 	movi	r5,-4
 40093f8:	414a703a 	and	r5,r8,r5
 40093fc:	89800404 	addi	r6,r17,16
 4009400:	8151883a 	add	r8,r16,r5
 4009404:	4180590e 	bge	r8,r6,400956c <_realloc_r+0x390>
 4009408:	1080004c 	andi	r2,r2,1
 400940c:	103f9e1e 	bne	r2,zero,4009288 <__reset+0xfa819288>
 4009410:	adbffe17 	ldw	r22,-8(r21)
 4009414:	00bfff04 	movi	r2,-4
 4009418:	9dadc83a 	sub	r22,r19,r22
 400941c:	b1800117 	ldw	r6,4(r22)
 4009420:	3084703a 	and	r2,r6,r2
 4009424:	20002026 	beq	r4,zero,40094a8 <_realloc_r+0x2cc>
 4009428:	80af883a 	add	r23,r16,r2
 400942c:	b96f883a 	add	r23,r23,r5
 4009430:	21c05f26 	beq	r4,r7,40095b0 <_realloc_r+0x3d4>
 4009434:	b8c01c16 	blt	r23,r3,40094a8 <_realloc_r+0x2cc>
 4009438:	20800317 	ldw	r2,12(r4)
 400943c:	20c00217 	ldw	r3,8(r4)
 4009440:	81bfff04 	addi	r6,r16,-4
 4009444:	01000904 	movi	r4,36
 4009448:	18800315 	stw	r2,12(r3)
 400944c:	10c00215 	stw	r3,8(r2)
 4009450:	b0c00217 	ldw	r3,8(r22)
 4009454:	b0800317 	ldw	r2,12(r22)
 4009458:	b4800204 	addi	r18,r22,8
 400945c:	18800315 	stw	r2,12(r3)
 4009460:	10c00215 	stw	r3,8(r2)
 4009464:	21801b36 	bltu	r4,r6,40094d4 <_realloc_r+0x2f8>
 4009468:	008004c4 	movi	r2,19
 400946c:	1180352e 	bgeu	r2,r6,4009544 <_realloc_r+0x368>
 4009470:	a8800017 	ldw	r2,0(r21)
 4009474:	b0800215 	stw	r2,8(r22)
 4009478:	a8800117 	ldw	r2,4(r21)
 400947c:	b0800315 	stw	r2,12(r22)
 4009480:	008006c4 	movi	r2,27
 4009484:	11807f36 	bltu	r2,r6,4009684 <_realloc_r+0x4a8>
 4009488:	b0800404 	addi	r2,r22,16
 400948c:	ad400204 	addi	r21,r21,8
 4009490:	00002d06 	br	4009548 <_realloc_r+0x36c>
 4009494:	adbffe17 	ldw	r22,-8(r21)
 4009498:	00bfff04 	movi	r2,-4
 400949c:	9dadc83a 	sub	r22,r19,r22
 40094a0:	b1000117 	ldw	r4,4(r22)
 40094a4:	2084703a 	and	r2,r4,r2
 40094a8:	b03f7726 	beq	r22,zero,4009288 <__reset+0xfa819288>
 40094ac:	80af883a 	add	r23,r16,r2
 40094b0:	b8ff7516 	blt	r23,r3,4009288 <__reset+0xfa819288>
 40094b4:	b0800317 	ldw	r2,12(r22)
 40094b8:	b0c00217 	ldw	r3,8(r22)
 40094bc:	81bfff04 	addi	r6,r16,-4
 40094c0:	01000904 	movi	r4,36
 40094c4:	18800315 	stw	r2,12(r3)
 40094c8:	10c00215 	stw	r3,8(r2)
 40094cc:	b4800204 	addi	r18,r22,8
 40094d0:	21bfe52e 	bgeu	r4,r6,4009468 <__reset+0xfa819468>
 40094d4:	a80b883a 	mov	r5,r21
 40094d8:	9009883a 	mov	r4,r18
 40094dc:	4007f5c0 	call	4007f5c <memmove>
 40094e0:	b821883a 	mov	r16,r23
 40094e4:	b027883a 	mov	r19,r22
 40094e8:	003f8a06 	br	4009314 <__reset+0xfa819314>
 40094ec:	300b883a 	mov	r5,r6
 40094f0:	dfc00917 	ldw	ra,36(sp)
 40094f4:	df000817 	ldw	fp,32(sp)
 40094f8:	ddc00717 	ldw	r23,28(sp)
 40094fc:	dd800617 	ldw	r22,24(sp)
 4009500:	dd400517 	ldw	r21,20(sp)
 4009504:	dd000417 	ldw	r20,16(sp)
 4009508:	dcc00317 	ldw	r19,12(sp)
 400950c:	dc800217 	ldw	r18,8(sp)
 4009510:	dc400117 	ldw	r17,4(sp)
 4009514:	dc000017 	ldw	r16,0(sp)
 4009518:	dec00a04 	addi	sp,sp,40
 400951c:	400766c1 	jmpi	400766c <_malloc_r>
 4009520:	a8c00017 	ldw	r3,0(r21)
 4009524:	90c00015 	stw	r3,0(r18)
 4009528:	a8c00117 	ldw	r3,4(r21)
 400952c:	90c00115 	stw	r3,4(r18)
 4009530:	00c006c4 	movi	r3,27
 4009534:	19804536 	bltu	r3,r6,400964c <_realloc_r+0x470>
 4009538:	90800204 	addi	r2,r18,8
 400953c:	a8c00204 	addi	r3,r21,8
 4009540:	003f6306 	br	40092d0 <__reset+0xfa8192d0>
 4009544:	9005883a 	mov	r2,r18
 4009548:	a8c00017 	ldw	r3,0(r21)
 400954c:	b821883a 	mov	r16,r23
 4009550:	b027883a 	mov	r19,r22
 4009554:	10c00015 	stw	r3,0(r2)
 4009558:	a8c00117 	ldw	r3,4(r21)
 400955c:	10c00115 	stw	r3,4(r2)
 4009560:	a8c00217 	ldw	r3,8(r21)
 4009564:	10c00215 	stw	r3,8(r2)
 4009568:	003f6a06 	br	4009314 <__reset+0xfa819314>
 400956c:	9c67883a 	add	r19,r19,r17
 4009570:	4445c83a 	sub	r2,r8,r17
 4009574:	e4c00215 	stw	r19,8(fp)
 4009578:	10800054 	ori	r2,r2,1
 400957c:	98800115 	stw	r2,4(r19)
 4009580:	a8bfff17 	ldw	r2,-4(r21)
 4009584:	a009883a 	mov	r4,r20
 4009588:	1080004c 	andi	r2,r2,1
 400958c:	1462b03a 	or	r17,r2,r17
 4009590:	ac7fff15 	stw	r17,-4(r21)
 4009594:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4009598:	a805883a 	mov	r2,r21
 400959c:	003f6b06 	br	400934c <__reset+0xfa81934c>
 40095a0:	a80b883a 	mov	r5,r21
 40095a4:	9009883a 	mov	r4,r18
 40095a8:	4007f5c0 	call	4007f5c <memmove>
 40095ac:	003f4e06 	br	40092e8 <__reset+0xfa8192e8>
 40095b0:	89000404 	addi	r4,r17,16
 40095b4:	b93fbc16 	blt	r23,r4,40094a8 <__reset+0xfa8194a8>
 40095b8:	b0800317 	ldw	r2,12(r22)
 40095bc:	b0c00217 	ldw	r3,8(r22)
 40095c0:	81bfff04 	addi	r6,r16,-4
 40095c4:	01000904 	movi	r4,36
 40095c8:	18800315 	stw	r2,12(r3)
 40095cc:	10c00215 	stw	r3,8(r2)
 40095d0:	b4800204 	addi	r18,r22,8
 40095d4:	21804336 	bltu	r4,r6,40096e4 <_realloc_r+0x508>
 40095d8:	008004c4 	movi	r2,19
 40095dc:	11803f2e 	bgeu	r2,r6,40096dc <_realloc_r+0x500>
 40095e0:	a8800017 	ldw	r2,0(r21)
 40095e4:	b0800215 	stw	r2,8(r22)
 40095e8:	a8800117 	ldw	r2,4(r21)
 40095ec:	b0800315 	stw	r2,12(r22)
 40095f0:	008006c4 	movi	r2,27
 40095f4:	11803f36 	bltu	r2,r6,40096f4 <_realloc_r+0x518>
 40095f8:	b0800404 	addi	r2,r22,16
 40095fc:	ad400204 	addi	r21,r21,8
 4009600:	a8c00017 	ldw	r3,0(r21)
 4009604:	10c00015 	stw	r3,0(r2)
 4009608:	a8c00117 	ldw	r3,4(r21)
 400960c:	10c00115 	stw	r3,4(r2)
 4009610:	a8c00217 	ldw	r3,8(r21)
 4009614:	10c00215 	stw	r3,8(r2)
 4009618:	b447883a 	add	r3,r22,r17
 400961c:	bc45c83a 	sub	r2,r23,r17
 4009620:	e0c00215 	stw	r3,8(fp)
 4009624:	10800054 	ori	r2,r2,1
 4009628:	18800115 	stw	r2,4(r3)
 400962c:	b0800117 	ldw	r2,4(r22)
 4009630:	a009883a 	mov	r4,r20
 4009634:	1080004c 	andi	r2,r2,1
 4009638:	1462b03a 	or	r17,r2,r17
 400963c:	b4400115 	stw	r17,4(r22)
 4009640:	400f4e80 	call	400f4e8 <__malloc_unlock>
 4009644:	9005883a 	mov	r2,r18
 4009648:	003f4006 	br	400934c <__reset+0xfa81934c>
 400964c:	a8c00217 	ldw	r3,8(r21)
 4009650:	90c00215 	stw	r3,8(r18)
 4009654:	a8c00317 	ldw	r3,12(r21)
 4009658:	90c00315 	stw	r3,12(r18)
 400965c:	30801126 	beq	r6,r2,40096a4 <_realloc_r+0x4c8>
 4009660:	90800404 	addi	r2,r18,16
 4009664:	a8c00404 	addi	r3,r21,16
 4009668:	003f1906 	br	40092d0 <__reset+0xfa8192d0>
 400966c:	90ffff17 	ldw	r3,-4(r18)
 4009670:	00bfff04 	movi	r2,-4
 4009674:	a825883a 	mov	r18,r21
 4009678:	1884703a 	and	r2,r3,r2
 400967c:	80a1883a 	add	r16,r16,r2
 4009680:	003f2406 	br	4009314 <__reset+0xfa819314>
 4009684:	a8800217 	ldw	r2,8(r21)
 4009688:	b0800415 	stw	r2,16(r22)
 400968c:	a8800317 	ldw	r2,12(r21)
 4009690:	b0800515 	stw	r2,20(r22)
 4009694:	31000a26 	beq	r6,r4,40096c0 <_realloc_r+0x4e4>
 4009698:	b0800604 	addi	r2,r22,24
 400969c:	ad400404 	addi	r21,r21,16
 40096a0:	003fa906 	br	4009548 <__reset+0xfa819548>
 40096a4:	a9000417 	ldw	r4,16(r21)
 40096a8:	90800604 	addi	r2,r18,24
 40096ac:	a8c00604 	addi	r3,r21,24
 40096b0:	91000415 	stw	r4,16(r18)
 40096b4:	a9000517 	ldw	r4,20(r21)
 40096b8:	91000515 	stw	r4,20(r18)
 40096bc:	003f0406 	br	40092d0 <__reset+0xfa8192d0>
 40096c0:	a8c00417 	ldw	r3,16(r21)
 40096c4:	ad400604 	addi	r21,r21,24
 40096c8:	b0800804 	addi	r2,r22,32
 40096cc:	b0c00615 	stw	r3,24(r22)
 40096d0:	a8ffff17 	ldw	r3,-4(r21)
 40096d4:	b0c00715 	stw	r3,28(r22)
 40096d8:	003f9b06 	br	4009548 <__reset+0xfa819548>
 40096dc:	9005883a 	mov	r2,r18
 40096e0:	003fc706 	br	4009600 <__reset+0xfa819600>
 40096e4:	a80b883a 	mov	r5,r21
 40096e8:	9009883a 	mov	r4,r18
 40096ec:	4007f5c0 	call	4007f5c <memmove>
 40096f0:	003fc906 	br	4009618 <__reset+0xfa819618>
 40096f4:	a8800217 	ldw	r2,8(r21)
 40096f8:	b0800415 	stw	r2,16(r22)
 40096fc:	a8800317 	ldw	r2,12(r21)
 4009700:	b0800515 	stw	r2,20(r22)
 4009704:	31000726 	beq	r6,r4,4009724 <_realloc_r+0x548>
 4009708:	b0800604 	addi	r2,r22,24
 400970c:	ad400404 	addi	r21,r21,16
 4009710:	003fbb06 	br	4009600 <__reset+0xfa819600>
 4009714:	a009883a 	mov	r4,r20
 4009718:	400f4e80 	call	400f4e8 <__malloc_unlock>
 400971c:	0005883a 	mov	r2,zero
 4009720:	003f0a06 	br	400934c <__reset+0xfa81934c>
 4009724:	a8c00417 	ldw	r3,16(r21)
 4009728:	ad400604 	addi	r21,r21,24
 400972c:	b0800804 	addi	r2,r22,32
 4009730:	b0c00615 	stw	r3,24(r22)
 4009734:	a8ffff17 	ldw	r3,-4(r21)
 4009738:	b0c00715 	stw	r3,28(r22)
 400973c:	003fb006 	br	4009600 <__reset+0xfa819600>

04009740 <__fpclassifyd>:
 4009740:	00a00034 	movhi	r2,32768
 4009744:	10bfffc4 	addi	r2,r2,-1
 4009748:	2884703a 	and	r2,r5,r2
 400974c:	10000726 	beq	r2,zero,400976c <__fpclassifyd+0x2c>
 4009750:	00fffc34 	movhi	r3,65520
 4009754:	019ff834 	movhi	r6,32736
 4009758:	28c7883a 	add	r3,r5,r3
 400975c:	31bfffc4 	addi	r6,r6,-1
 4009760:	30c00536 	bltu	r6,r3,4009778 <__fpclassifyd+0x38>
 4009764:	00800104 	movi	r2,4
 4009768:	f800283a 	ret
 400976c:	2000021e 	bne	r4,zero,4009778 <__fpclassifyd+0x38>
 4009770:	00800084 	movi	r2,2
 4009774:	f800283a 	ret
 4009778:	00dffc34 	movhi	r3,32752
 400977c:	019ff834 	movhi	r6,32736
 4009780:	28cb883a 	add	r5,r5,r3
 4009784:	31bfffc4 	addi	r6,r6,-1
 4009788:	317ff62e 	bgeu	r6,r5,4009764 <__reset+0xfa819764>
 400978c:	01400434 	movhi	r5,16
 4009790:	297fffc4 	addi	r5,r5,-1
 4009794:	28800236 	bltu	r5,r2,40097a0 <__fpclassifyd+0x60>
 4009798:	008000c4 	movi	r2,3
 400979c:	f800283a 	ret
 40097a0:	10c00226 	beq	r2,r3,40097ac <__fpclassifyd+0x6c>
 40097a4:	0005883a 	mov	r2,zero
 40097a8:	f800283a 	ret
 40097ac:	2005003a 	cmpeq	r2,r4,zero
 40097b0:	f800283a 	ret

040097b4 <_sbrk_r>:
 40097b4:	defffd04 	addi	sp,sp,-12
 40097b8:	dc000015 	stw	r16,0(sp)
 40097bc:	04010074 	movhi	r16,1025
 40097c0:	dc400115 	stw	r17,4(sp)
 40097c4:	841d2104 	addi	r16,r16,29828
 40097c8:	2023883a 	mov	r17,r4
 40097cc:	2809883a 	mov	r4,r5
 40097d0:	dfc00215 	stw	ra,8(sp)
 40097d4:	80000015 	stw	zero,0(r16)
 40097d8:	400f6a80 	call	400f6a8 <sbrk>
 40097dc:	00ffffc4 	movi	r3,-1
 40097e0:	10c00526 	beq	r2,r3,40097f8 <_sbrk_r+0x44>
 40097e4:	dfc00217 	ldw	ra,8(sp)
 40097e8:	dc400117 	ldw	r17,4(sp)
 40097ec:	dc000017 	ldw	r16,0(sp)
 40097f0:	dec00304 	addi	sp,sp,12
 40097f4:	f800283a 	ret
 40097f8:	80c00017 	ldw	r3,0(r16)
 40097fc:	183ff926 	beq	r3,zero,40097e4 <__reset+0xfa8197e4>
 4009800:	88c00015 	stw	r3,0(r17)
 4009804:	003ff706 	br	40097e4 <__reset+0xfa8197e4>

04009808 <__sread>:
 4009808:	defffe04 	addi	sp,sp,-8
 400980c:	dc000015 	stw	r16,0(sp)
 4009810:	2821883a 	mov	r16,r5
 4009814:	2940038f 	ldh	r5,14(r5)
 4009818:	dfc00115 	stw	ra,4(sp)
 400981c:	400b5fc0 	call	400b5fc <_read_r>
 4009820:	10000716 	blt	r2,zero,4009840 <__sread+0x38>
 4009824:	80c01417 	ldw	r3,80(r16)
 4009828:	1887883a 	add	r3,r3,r2
 400982c:	80c01415 	stw	r3,80(r16)
 4009830:	dfc00117 	ldw	ra,4(sp)
 4009834:	dc000017 	ldw	r16,0(sp)
 4009838:	dec00204 	addi	sp,sp,8
 400983c:	f800283a 	ret
 4009840:	80c0030b 	ldhu	r3,12(r16)
 4009844:	18fbffcc 	andi	r3,r3,61439
 4009848:	80c0030d 	sth	r3,12(r16)
 400984c:	dfc00117 	ldw	ra,4(sp)
 4009850:	dc000017 	ldw	r16,0(sp)
 4009854:	dec00204 	addi	sp,sp,8
 4009858:	f800283a 	ret

0400985c <__seofread>:
 400985c:	0005883a 	mov	r2,zero
 4009860:	f800283a 	ret

04009864 <__swrite>:
 4009864:	2880030b 	ldhu	r2,12(r5)
 4009868:	defffb04 	addi	sp,sp,-20
 400986c:	dcc00315 	stw	r19,12(sp)
 4009870:	dc800215 	stw	r18,8(sp)
 4009874:	dc400115 	stw	r17,4(sp)
 4009878:	dc000015 	stw	r16,0(sp)
 400987c:	dfc00415 	stw	ra,16(sp)
 4009880:	10c0400c 	andi	r3,r2,256
 4009884:	2821883a 	mov	r16,r5
 4009888:	2023883a 	mov	r17,r4
 400988c:	3025883a 	mov	r18,r6
 4009890:	3827883a 	mov	r19,r7
 4009894:	18000526 	beq	r3,zero,40098ac <__swrite+0x48>
 4009898:	2940038f 	ldh	r5,14(r5)
 400989c:	01c00084 	movi	r7,2
 40098a0:	000d883a 	mov	r6,zero
 40098a4:	400b59c0 	call	400b59c <_lseek_r>
 40098a8:	8080030b 	ldhu	r2,12(r16)
 40098ac:	8140038f 	ldh	r5,14(r16)
 40098b0:	10bbffcc 	andi	r2,r2,61439
 40098b4:	980f883a 	mov	r7,r19
 40098b8:	900d883a 	mov	r6,r18
 40098bc:	8809883a 	mov	r4,r17
 40098c0:	8080030d 	sth	r2,12(r16)
 40098c4:	dfc00417 	ldw	ra,16(sp)
 40098c8:	dcc00317 	ldw	r19,12(sp)
 40098cc:	dc800217 	ldw	r18,8(sp)
 40098d0:	dc400117 	ldw	r17,4(sp)
 40098d4:	dc000017 	ldw	r16,0(sp)
 40098d8:	dec00504 	addi	sp,sp,20
 40098dc:	400b0681 	jmpi	400b068 <_write_r>

040098e0 <__sseek>:
 40098e0:	defffe04 	addi	sp,sp,-8
 40098e4:	dc000015 	stw	r16,0(sp)
 40098e8:	2821883a 	mov	r16,r5
 40098ec:	2940038f 	ldh	r5,14(r5)
 40098f0:	dfc00115 	stw	ra,4(sp)
 40098f4:	400b59c0 	call	400b59c <_lseek_r>
 40098f8:	00ffffc4 	movi	r3,-1
 40098fc:	10c00826 	beq	r2,r3,4009920 <__sseek+0x40>
 4009900:	80c0030b 	ldhu	r3,12(r16)
 4009904:	80801415 	stw	r2,80(r16)
 4009908:	18c40014 	ori	r3,r3,4096
 400990c:	80c0030d 	sth	r3,12(r16)
 4009910:	dfc00117 	ldw	ra,4(sp)
 4009914:	dc000017 	ldw	r16,0(sp)
 4009918:	dec00204 	addi	sp,sp,8
 400991c:	f800283a 	ret
 4009920:	80c0030b 	ldhu	r3,12(r16)
 4009924:	18fbffcc 	andi	r3,r3,61439
 4009928:	80c0030d 	sth	r3,12(r16)
 400992c:	dfc00117 	ldw	ra,4(sp)
 4009930:	dc000017 	ldw	r16,0(sp)
 4009934:	dec00204 	addi	sp,sp,8
 4009938:	f800283a 	ret

0400993c <__sclose>:
 400993c:	2940038f 	ldh	r5,14(r5)
 4009940:	400b0c81 	jmpi	400b0c8 <_close_r>

04009944 <strcmp>:
 4009944:	2144b03a 	or	r2,r4,r5
 4009948:	108000cc 	andi	r2,r2,3
 400994c:	1000171e 	bne	r2,zero,40099ac <strcmp+0x68>
 4009950:	20800017 	ldw	r2,0(r4)
 4009954:	28c00017 	ldw	r3,0(r5)
 4009958:	10c0141e 	bne	r2,r3,40099ac <strcmp+0x68>
 400995c:	027fbff4 	movhi	r9,65279
 4009960:	4a7fbfc4 	addi	r9,r9,-257
 4009964:	0086303a 	nor	r3,zero,r2
 4009968:	02202074 	movhi	r8,32897
 400996c:	1245883a 	add	r2,r2,r9
 4009970:	42202004 	addi	r8,r8,-32640
 4009974:	10c4703a 	and	r2,r2,r3
 4009978:	1204703a 	and	r2,r2,r8
 400997c:	10000226 	beq	r2,zero,4009988 <strcmp+0x44>
 4009980:	00002306 	br	4009a10 <strcmp+0xcc>
 4009984:	1000221e 	bne	r2,zero,4009a10 <strcmp+0xcc>
 4009988:	21000104 	addi	r4,r4,4
 400998c:	20c00017 	ldw	r3,0(r4)
 4009990:	29400104 	addi	r5,r5,4
 4009994:	29800017 	ldw	r6,0(r5)
 4009998:	1a4f883a 	add	r7,r3,r9
 400999c:	00c4303a 	nor	r2,zero,r3
 40099a0:	3884703a 	and	r2,r7,r2
 40099a4:	1204703a 	and	r2,r2,r8
 40099a8:	19bff626 	beq	r3,r6,4009984 <__reset+0xfa819984>
 40099ac:	20800003 	ldbu	r2,0(r4)
 40099b0:	10c03fcc 	andi	r3,r2,255
 40099b4:	18c0201c 	xori	r3,r3,128
 40099b8:	18ffe004 	addi	r3,r3,-128
 40099bc:	18000c26 	beq	r3,zero,40099f0 <strcmp+0xac>
 40099c0:	29800007 	ldb	r6,0(r5)
 40099c4:	19800326 	beq	r3,r6,40099d4 <strcmp+0x90>
 40099c8:	00001306 	br	4009a18 <strcmp+0xd4>
 40099cc:	29800007 	ldb	r6,0(r5)
 40099d0:	11800b1e 	bne	r2,r6,4009a00 <strcmp+0xbc>
 40099d4:	21000044 	addi	r4,r4,1
 40099d8:	20c00003 	ldbu	r3,0(r4)
 40099dc:	29400044 	addi	r5,r5,1
 40099e0:	18803fcc 	andi	r2,r3,255
 40099e4:	1080201c 	xori	r2,r2,128
 40099e8:	10bfe004 	addi	r2,r2,-128
 40099ec:	103ff71e 	bne	r2,zero,40099cc <__reset+0xfa8199cc>
 40099f0:	0007883a 	mov	r3,zero
 40099f4:	28800003 	ldbu	r2,0(r5)
 40099f8:	1885c83a 	sub	r2,r3,r2
 40099fc:	f800283a 	ret
 4009a00:	28800003 	ldbu	r2,0(r5)
 4009a04:	18c03fcc 	andi	r3,r3,255
 4009a08:	1885c83a 	sub	r2,r3,r2
 4009a0c:	f800283a 	ret
 4009a10:	0005883a 	mov	r2,zero
 4009a14:	f800283a 	ret
 4009a18:	10c03fcc 	andi	r3,r2,255
 4009a1c:	003ff506 	br	40099f4 <__reset+0xfa8199f4>

04009a20 <__sprint_r.part.0>:
 4009a20:	28801917 	ldw	r2,100(r5)
 4009a24:	defff604 	addi	sp,sp,-40
 4009a28:	dd400515 	stw	r21,20(sp)
 4009a2c:	dfc00915 	stw	ra,36(sp)
 4009a30:	df000815 	stw	fp,32(sp)
 4009a34:	ddc00715 	stw	r23,28(sp)
 4009a38:	dd800615 	stw	r22,24(sp)
 4009a3c:	dd000415 	stw	r20,16(sp)
 4009a40:	dcc00315 	stw	r19,12(sp)
 4009a44:	dc800215 	stw	r18,8(sp)
 4009a48:	dc400115 	stw	r17,4(sp)
 4009a4c:	dc000015 	stw	r16,0(sp)
 4009a50:	1088000c 	andi	r2,r2,8192
 4009a54:	302b883a 	mov	r21,r6
 4009a58:	10002e26 	beq	r2,zero,4009b14 <__sprint_r.part.0+0xf4>
 4009a5c:	30800217 	ldw	r2,8(r6)
 4009a60:	35800017 	ldw	r22,0(r6)
 4009a64:	10002926 	beq	r2,zero,4009b0c <__sprint_r.part.0+0xec>
 4009a68:	2827883a 	mov	r19,r5
 4009a6c:	2029883a 	mov	r20,r4
 4009a70:	b5c00104 	addi	r23,r22,4
 4009a74:	04bfffc4 	movi	r18,-1
 4009a78:	bc400017 	ldw	r17,0(r23)
 4009a7c:	b4000017 	ldw	r16,0(r22)
 4009a80:	0039883a 	mov	fp,zero
 4009a84:	8822d0ba 	srli	r17,r17,2
 4009a88:	8800031e 	bne	r17,zero,4009a98 <__sprint_r.part.0+0x78>
 4009a8c:	00001806 	br	4009af0 <__sprint_r.part.0+0xd0>
 4009a90:	84000104 	addi	r16,r16,4
 4009a94:	8f001526 	beq	r17,fp,4009aec <__sprint_r.part.0+0xcc>
 4009a98:	81400017 	ldw	r5,0(r16)
 4009a9c:	980d883a 	mov	r6,r19
 4009aa0:	a009883a 	mov	r4,r20
 4009aa4:	400b4480 	call	400b448 <_fputwc_r>
 4009aa8:	e7000044 	addi	fp,fp,1
 4009aac:	14bff81e 	bne	r2,r18,4009a90 <__reset+0xfa819a90>
 4009ab0:	9005883a 	mov	r2,r18
 4009ab4:	a8000215 	stw	zero,8(r21)
 4009ab8:	a8000115 	stw	zero,4(r21)
 4009abc:	dfc00917 	ldw	ra,36(sp)
 4009ac0:	df000817 	ldw	fp,32(sp)
 4009ac4:	ddc00717 	ldw	r23,28(sp)
 4009ac8:	dd800617 	ldw	r22,24(sp)
 4009acc:	dd400517 	ldw	r21,20(sp)
 4009ad0:	dd000417 	ldw	r20,16(sp)
 4009ad4:	dcc00317 	ldw	r19,12(sp)
 4009ad8:	dc800217 	ldw	r18,8(sp)
 4009adc:	dc400117 	ldw	r17,4(sp)
 4009ae0:	dc000017 	ldw	r16,0(sp)
 4009ae4:	dec00a04 	addi	sp,sp,40
 4009ae8:	f800283a 	ret
 4009aec:	a8800217 	ldw	r2,8(r21)
 4009af0:	8c63883a 	add	r17,r17,r17
 4009af4:	8c63883a 	add	r17,r17,r17
 4009af8:	1445c83a 	sub	r2,r2,r17
 4009afc:	a8800215 	stw	r2,8(r21)
 4009b00:	b5800204 	addi	r22,r22,8
 4009b04:	bdc00204 	addi	r23,r23,8
 4009b08:	103fdb1e 	bne	r2,zero,4009a78 <__reset+0xfa819a78>
 4009b0c:	0005883a 	mov	r2,zero
 4009b10:	003fe806 	br	4009ab4 <__reset+0xfa819ab4>
 4009b14:	4006d900 	call	4006d90 <__sfvwrite_r>
 4009b18:	003fe606 	br	4009ab4 <__reset+0xfa819ab4>

04009b1c <__sprint_r>:
 4009b1c:	30c00217 	ldw	r3,8(r6)
 4009b20:	18000126 	beq	r3,zero,4009b28 <__sprint_r+0xc>
 4009b24:	4009a201 	jmpi	4009a20 <__sprint_r.part.0>
 4009b28:	30000115 	stw	zero,4(r6)
 4009b2c:	0005883a 	mov	r2,zero
 4009b30:	f800283a 	ret

04009b34 <___vfiprintf_internal_r>:
 4009b34:	deffc904 	addi	sp,sp,-220
 4009b38:	df003515 	stw	fp,212(sp)
 4009b3c:	dd003115 	stw	r20,196(sp)
 4009b40:	dfc03615 	stw	ra,216(sp)
 4009b44:	ddc03415 	stw	r23,208(sp)
 4009b48:	dd803315 	stw	r22,204(sp)
 4009b4c:	dd403215 	stw	r21,200(sp)
 4009b50:	dcc03015 	stw	r19,192(sp)
 4009b54:	dc802f15 	stw	r18,188(sp)
 4009b58:	dc402e15 	stw	r17,184(sp)
 4009b5c:	dc002d15 	stw	r16,180(sp)
 4009b60:	d9002015 	stw	r4,128(sp)
 4009b64:	d9c02215 	stw	r7,136(sp)
 4009b68:	2829883a 	mov	r20,r5
 4009b6c:	3039883a 	mov	fp,r6
 4009b70:	20000226 	beq	r4,zero,4009b7c <___vfiprintf_internal_r+0x48>
 4009b74:	20800e17 	ldw	r2,56(r4)
 4009b78:	1000cf26 	beq	r2,zero,4009eb8 <___vfiprintf_internal_r+0x384>
 4009b7c:	a080030b 	ldhu	r2,12(r20)
 4009b80:	10c8000c 	andi	r3,r2,8192
 4009b84:	1800061e 	bne	r3,zero,4009ba0 <___vfiprintf_internal_r+0x6c>
 4009b88:	a1001917 	ldw	r4,100(r20)
 4009b8c:	00f7ffc4 	movi	r3,-8193
 4009b90:	10880014 	ori	r2,r2,8192
 4009b94:	20c6703a 	and	r3,r4,r3
 4009b98:	a080030d 	sth	r2,12(r20)
 4009b9c:	a0c01915 	stw	r3,100(r20)
 4009ba0:	10c0020c 	andi	r3,r2,8
 4009ba4:	1800a926 	beq	r3,zero,4009e4c <___vfiprintf_internal_r+0x318>
 4009ba8:	a0c00417 	ldw	r3,16(r20)
 4009bac:	1800a726 	beq	r3,zero,4009e4c <___vfiprintf_internal_r+0x318>
 4009bb0:	1080068c 	andi	r2,r2,26
 4009bb4:	00c00284 	movi	r3,10
 4009bb8:	10c0ac26 	beq	r2,r3,4009e6c <___vfiprintf_internal_r+0x338>
 4009bbc:	da801a04 	addi	r10,sp,104
 4009bc0:	da801e15 	stw	r10,120(sp)
 4009bc4:	d8801e17 	ldw	r2,120(sp)
 4009bc8:	da8019c4 	addi	r10,sp,103
 4009bcc:	05810074 	movhi	r22,1025
 4009bd0:	05c10074 	movhi	r23,1025
 4009bd4:	da801f15 	stw	r10,124(sp)
 4009bd8:	1295c83a 	sub	r10,r2,r10
 4009bdc:	b594e504 	addi	r22,r22,21396
 4009be0:	bdd4e104 	addi	r23,r23,21380
 4009be4:	dec01a15 	stw	sp,104(sp)
 4009be8:	d8001c15 	stw	zero,112(sp)
 4009bec:	d8001b15 	stw	zero,108(sp)
 4009bf0:	d8002615 	stw	zero,152(sp)
 4009bf4:	d8002315 	stw	zero,140(sp)
 4009bf8:	da802715 	stw	r10,156(sp)
 4009bfc:	d811883a 	mov	r8,sp
 4009c00:	dd002115 	stw	r20,132(sp)
 4009c04:	e021883a 	mov	r16,fp
 4009c08:	80800007 	ldb	r2,0(r16)
 4009c0c:	1003ea26 	beq	r2,zero,400abb8 <___vfiprintf_internal_r+0x1084>
 4009c10:	00c00944 	movi	r3,37
 4009c14:	8025883a 	mov	r18,r16
 4009c18:	10c0021e 	bne	r2,r3,4009c24 <___vfiprintf_internal_r+0xf0>
 4009c1c:	00001606 	br	4009c78 <___vfiprintf_internal_r+0x144>
 4009c20:	10c00326 	beq	r2,r3,4009c30 <___vfiprintf_internal_r+0xfc>
 4009c24:	94800044 	addi	r18,r18,1
 4009c28:	90800007 	ldb	r2,0(r18)
 4009c2c:	103ffc1e 	bne	r2,zero,4009c20 <__reset+0xfa819c20>
 4009c30:	9423c83a 	sub	r17,r18,r16
 4009c34:	88001026 	beq	r17,zero,4009c78 <___vfiprintf_internal_r+0x144>
 4009c38:	d8c01c17 	ldw	r3,112(sp)
 4009c3c:	d8801b17 	ldw	r2,108(sp)
 4009c40:	44000015 	stw	r16,0(r8)
 4009c44:	88c7883a 	add	r3,r17,r3
 4009c48:	10800044 	addi	r2,r2,1
 4009c4c:	44400115 	stw	r17,4(r8)
 4009c50:	d8c01c15 	stw	r3,112(sp)
 4009c54:	d8801b15 	stw	r2,108(sp)
 4009c58:	010001c4 	movi	r4,7
 4009c5c:	2080760e 	bge	r4,r2,4009e38 <___vfiprintf_internal_r+0x304>
 4009c60:	1803821e 	bne	r3,zero,400aa6c <___vfiprintf_internal_r+0xf38>
 4009c64:	da802317 	ldw	r10,140(sp)
 4009c68:	d8001b15 	stw	zero,108(sp)
 4009c6c:	d811883a 	mov	r8,sp
 4009c70:	5455883a 	add	r10,r10,r17
 4009c74:	da802315 	stw	r10,140(sp)
 4009c78:	90800007 	ldb	r2,0(r18)
 4009c7c:	10044626 	beq	r2,zero,400ad98 <___vfiprintf_internal_r+0x1264>
 4009c80:	90c00047 	ldb	r3,1(r18)
 4009c84:	94000044 	addi	r16,r18,1
 4009c88:	d8001d85 	stb	zero,118(sp)
 4009c8c:	0009883a 	mov	r4,zero
 4009c90:	000f883a 	mov	r7,zero
 4009c94:	027fffc4 	movi	r9,-1
 4009c98:	0023883a 	mov	r17,zero
 4009c9c:	0029883a 	mov	r20,zero
 4009ca0:	01401604 	movi	r5,88
 4009ca4:	01800244 	movi	r6,9
 4009ca8:	03400a84 	movi	r13,42
 4009cac:	03001b04 	movi	r12,108
 4009cb0:	84000044 	addi	r16,r16,1
 4009cb4:	18bff804 	addi	r2,r3,-32
 4009cb8:	28827336 	bltu	r5,r2,400a688 <___vfiprintf_internal_r+0xb54>
 4009cbc:	100490ba 	slli	r2,r2,2
 4009cc0:	02810074 	movhi	r10,1025
 4009cc4:	52a73504 	addi	r10,r10,-25388
 4009cc8:	1285883a 	add	r2,r2,r10
 4009ccc:	10800017 	ldw	r2,0(r2)
 4009cd0:	1000683a 	jmp	r2
 4009cd4:	0400a3bc 	xorhi	r16,zero,654
 4009cd8:	0400a688 	cmpgei	r16,zero,666
 4009cdc:	0400a688 	cmpgei	r16,zero,666
 4009ce0:	0400a3dc 	xori	r16,zero,655
 4009ce4:	0400a688 	cmpgei	r16,zero,666
 4009ce8:	0400a688 	cmpgei	r16,zero,666
 4009cec:	0400a688 	cmpgei	r16,zero,666
 4009cf0:	0400a688 	cmpgei	r16,zero,666
 4009cf4:	0400a688 	cmpgei	r16,zero,666
 4009cf8:	0400a688 	cmpgei	r16,zero,666
 4009cfc:	0400a5c4 	movi	r16,663
 4009d00:	0400a5e0 	cmpeqi	r16,zero,663
 4009d04:	0400a688 	cmpgei	r16,zero,666
 4009d08:	04009ec8 	cmpgei	r16,zero,635
 4009d0c:	0400a5f0 	cmpltui	r16,zero,663
 4009d10:	0400a688 	cmpgei	r16,zero,666
 4009d14:	0400a3e8 	cmpgeui	r16,zero,655
 4009d18:	0400a3f4 	movhi	r16,655
 4009d1c:	0400a3f4 	movhi	r16,655
 4009d20:	0400a3f4 	movhi	r16,655
 4009d24:	0400a3f4 	movhi	r16,655
 4009d28:	0400a3f4 	movhi	r16,655
 4009d2c:	0400a3f4 	movhi	r16,655
 4009d30:	0400a3f4 	movhi	r16,655
 4009d34:	0400a3f4 	movhi	r16,655
 4009d38:	0400a3f4 	movhi	r16,655
 4009d3c:	0400a688 	cmpgei	r16,zero,666
 4009d40:	0400a688 	cmpgei	r16,zero,666
 4009d44:	0400a688 	cmpgei	r16,zero,666
 4009d48:	0400a688 	cmpgei	r16,zero,666
 4009d4c:	0400a688 	cmpgei	r16,zero,666
 4009d50:	0400a688 	cmpgei	r16,zero,666
 4009d54:	0400a688 	cmpgei	r16,zero,666
 4009d58:	0400a688 	cmpgei	r16,zero,666
 4009d5c:	0400a688 	cmpgei	r16,zero,666
 4009d60:	0400a688 	cmpgei	r16,zero,666
 4009d64:	0400a420 	cmpeqi	r16,zero,656
 4009d68:	0400a688 	cmpgei	r16,zero,666
 4009d6c:	0400a688 	cmpgei	r16,zero,666
 4009d70:	0400a688 	cmpgei	r16,zero,666
 4009d74:	0400a688 	cmpgei	r16,zero,666
 4009d78:	0400a688 	cmpgei	r16,zero,666
 4009d7c:	0400a688 	cmpgei	r16,zero,666
 4009d80:	0400a688 	cmpgei	r16,zero,666
 4009d84:	0400a688 	cmpgei	r16,zero,666
 4009d88:	0400a688 	cmpgei	r16,zero,666
 4009d8c:	0400a688 	cmpgei	r16,zero,666
 4009d90:	0400a458 	cmpnei	r16,zero,657
 4009d94:	0400a688 	cmpgei	r16,zero,666
 4009d98:	0400a688 	cmpgei	r16,zero,666
 4009d9c:	0400a688 	cmpgei	r16,zero,666
 4009da0:	0400a688 	cmpgei	r16,zero,666
 4009da4:	0400a688 	cmpgei	r16,zero,666
 4009da8:	0400a4b0 	cmpltui	r16,zero,658
 4009dac:	0400a688 	cmpgei	r16,zero,666
 4009db0:	0400a688 	cmpgei	r16,zero,666
 4009db4:	0400a520 	cmpeqi	r16,zero,660
 4009db8:	0400a688 	cmpgei	r16,zero,666
 4009dbc:	0400a688 	cmpgei	r16,zero,666
 4009dc0:	0400a688 	cmpgei	r16,zero,666
 4009dc4:	0400a688 	cmpgei	r16,zero,666
 4009dc8:	0400a688 	cmpgei	r16,zero,666
 4009dcc:	0400a688 	cmpgei	r16,zero,666
 4009dd0:	0400a688 	cmpgei	r16,zero,666
 4009dd4:	0400a688 	cmpgei	r16,zero,666
 4009dd8:	0400a688 	cmpgei	r16,zero,666
 4009ddc:	0400a688 	cmpgei	r16,zero,666
 4009de0:	0400a2cc 	andi	r16,zero,651
 4009de4:	0400a2f8 	rdprs	r16,zero,651
 4009de8:	0400a688 	cmpgei	r16,zero,666
 4009dec:	0400a688 	cmpgei	r16,zero,666
 4009df0:	0400a688 	cmpgei	r16,zero,666
 4009df4:	0400a630 	cmpltui	r16,zero,664
 4009df8:	0400a2f8 	rdprs	r16,zero,651
 4009dfc:	0400a688 	cmpgei	r16,zero,666
 4009e00:	0400a688 	cmpgei	r16,zero,666
 4009e04:	0400a18c 	andi	r16,zero,646
 4009e08:	0400a688 	cmpgei	r16,zero,666
 4009e0c:	0400a19c 	xori	r16,zero,646
 4009e10:	0400a1d8 	cmpnei	r16,zero,647
 4009e14:	04009ed4 	movui	r16,635
 4009e18:	0400a180 	call	400a18 <__alt_mem_dram_cntrl-0x3bff5e8>
 4009e1c:	0400a688 	cmpgei	r16,zero,666
 4009e20:	0400a55c 	xori	r16,zero,661
 4009e24:	0400a688 	cmpgei	r16,zero,666
 4009e28:	0400a5b4 	movhi	r16,662
 4009e2c:	0400a688 	cmpgei	r16,zero,666
 4009e30:	0400a688 	cmpgei	r16,zero,666
 4009e34:	0400a278 	rdprs	r16,zero,649
 4009e38:	42000204 	addi	r8,r8,8
 4009e3c:	da802317 	ldw	r10,140(sp)
 4009e40:	5455883a 	add	r10,r10,r17
 4009e44:	da802315 	stw	r10,140(sp)
 4009e48:	003f8b06 	br	4009c78 <__reset+0xfa819c78>
 4009e4c:	d9002017 	ldw	r4,128(sp)
 4009e50:	a00b883a 	mov	r5,r20
 4009e54:	40049380 	call	4004938 <__swsetup_r>
 4009e58:	1003b11e 	bne	r2,zero,400ad20 <___vfiprintf_internal_r+0x11ec>
 4009e5c:	a080030b 	ldhu	r2,12(r20)
 4009e60:	00c00284 	movi	r3,10
 4009e64:	1080068c 	andi	r2,r2,26
 4009e68:	10ff541e 	bne	r2,r3,4009bbc <__reset+0xfa819bbc>
 4009e6c:	a080038f 	ldh	r2,14(r20)
 4009e70:	103f5216 	blt	r2,zero,4009bbc <__reset+0xfa819bbc>
 4009e74:	d9c02217 	ldw	r7,136(sp)
 4009e78:	d9002017 	ldw	r4,128(sp)
 4009e7c:	e00d883a 	mov	r6,fp
 4009e80:	a00b883a 	mov	r5,r20
 4009e84:	400afac0 	call	400afac <__sbprintf>
 4009e88:	dfc03617 	ldw	ra,216(sp)
 4009e8c:	df003517 	ldw	fp,212(sp)
 4009e90:	ddc03417 	ldw	r23,208(sp)
 4009e94:	dd803317 	ldw	r22,204(sp)
 4009e98:	dd403217 	ldw	r21,200(sp)
 4009e9c:	dd003117 	ldw	r20,196(sp)
 4009ea0:	dcc03017 	ldw	r19,192(sp)
 4009ea4:	dc802f17 	ldw	r18,188(sp)
 4009ea8:	dc402e17 	ldw	r17,184(sp)
 4009eac:	dc002d17 	ldw	r16,180(sp)
 4009eb0:	dec03704 	addi	sp,sp,220
 4009eb4:	f800283a 	ret
 4009eb8:	400690c0 	call	400690c <__sinit>
 4009ebc:	003f2f06 	br	4009b7c <__reset+0xfa819b7c>
 4009ec0:	0463c83a 	sub	r17,zero,r17
 4009ec4:	d8802215 	stw	r2,136(sp)
 4009ec8:	a5000114 	ori	r20,r20,4
 4009ecc:	80c00007 	ldb	r3,0(r16)
 4009ed0:	003f7706 	br	4009cb0 <__reset+0xfa819cb0>
 4009ed4:	00800c04 	movi	r2,48
 4009ed8:	da802217 	ldw	r10,136(sp)
 4009edc:	d8801d05 	stb	r2,116(sp)
 4009ee0:	00801e04 	movi	r2,120
 4009ee4:	d8801d45 	stb	r2,117(sp)
 4009ee8:	d8001d85 	stb	zero,118(sp)
 4009eec:	50c00104 	addi	r3,r10,4
 4009ef0:	54800017 	ldw	r18,0(r10)
 4009ef4:	0027883a 	mov	r19,zero
 4009ef8:	a0800094 	ori	r2,r20,2
 4009efc:	48030b16 	blt	r9,zero,400ab2c <___vfiprintf_internal_r+0xff8>
 4009f00:	00bfdfc4 	movi	r2,-129
 4009f04:	a096703a 	and	r11,r20,r2
 4009f08:	d8c02215 	stw	r3,136(sp)
 4009f0c:	5d000094 	ori	r20,r11,2
 4009f10:	90032b1e 	bne	r18,zero,400abc0 <___vfiprintf_internal_r+0x108c>
 4009f14:	00810074 	movhi	r2,1025
 4009f18:	10948004 	addi	r2,r2,20992
 4009f1c:	d8802615 	stw	r2,152(sp)
 4009f20:	0039883a 	mov	fp,zero
 4009f24:	48017b1e 	bne	r9,zero,400a514 <___vfiprintf_internal_r+0x9e0>
 4009f28:	0013883a 	mov	r9,zero
 4009f2c:	0027883a 	mov	r19,zero
 4009f30:	dd401a04 	addi	r21,sp,104
 4009f34:	4825883a 	mov	r18,r9
 4009f38:	4cc0010e 	bge	r9,r19,4009f40 <___vfiprintf_internal_r+0x40c>
 4009f3c:	9825883a 	mov	r18,r19
 4009f40:	e7003fcc 	andi	fp,fp,255
 4009f44:	e700201c 	xori	fp,fp,128
 4009f48:	e73fe004 	addi	fp,fp,-128
 4009f4c:	e0000126 	beq	fp,zero,4009f54 <___vfiprintf_internal_r+0x420>
 4009f50:	94800044 	addi	r18,r18,1
 4009f54:	a380008c 	andi	r14,r20,2
 4009f58:	70000126 	beq	r14,zero,4009f60 <___vfiprintf_internal_r+0x42c>
 4009f5c:	94800084 	addi	r18,r18,2
 4009f60:	a700210c 	andi	fp,r20,132
 4009f64:	e001df1e 	bne	fp,zero,400a6e4 <___vfiprintf_internal_r+0xbb0>
 4009f68:	8c87c83a 	sub	r3,r17,r18
 4009f6c:	00c1dd0e 	bge	zero,r3,400a6e4 <___vfiprintf_internal_r+0xbb0>
 4009f70:	01c00404 	movi	r7,16
 4009f74:	d8801c17 	ldw	r2,112(sp)
 4009f78:	38c3ad0e 	bge	r7,r3,400ae30 <___vfiprintf_internal_r+0x12fc>
 4009f7c:	02810074 	movhi	r10,1025
 4009f80:	5294e504 	addi	r10,r10,21396
 4009f84:	dc002915 	stw	r16,164(sp)
 4009f88:	d9801b17 	ldw	r6,108(sp)
 4009f8c:	da802415 	stw	r10,144(sp)
 4009f90:	03c001c4 	movi	r15,7
 4009f94:	da402515 	stw	r9,148(sp)
 4009f98:	db802815 	stw	r14,160(sp)
 4009f9c:	1821883a 	mov	r16,r3
 4009fa0:	00000506 	br	4009fb8 <___vfiprintf_internal_r+0x484>
 4009fa4:	31400084 	addi	r5,r6,2
 4009fa8:	42000204 	addi	r8,r8,8
 4009fac:	200d883a 	mov	r6,r4
 4009fb0:	843ffc04 	addi	r16,r16,-16
 4009fb4:	3c000d0e 	bge	r7,r16,4009fec <___vfiprintf_internal_r+0x4b8>
 4009fb8:	10800404 	addi	r2,r2,16
 4009fbc:	31000044 	addi	r4,r6,1
 4009fc0:	45800015 	stw	r22,0(r8)
 4009fc4:	41c00115 	stw	r7,4(r8)
 4009fc8:	d8801c15 	stw	r2,112(sp)
 4009fcc:	d9001b15 	stw	r4,108(sp)
 4009fd0:	793ff40e 	bge	r15,r4,4009fa4 <__reset+0xfa819fa4>
 4009fd4:	1001b51e 	bne	r2,zero,400a6ac <___vfiprintf_internal_r+0xb78>
 4009fd8:	843ffc04 	addi	r16,r16,-16
 4009fdc:	000d883a 	mov	r6,zero
 4009fe0:	01400044 	movi	r5,1
 4009fe4:	d811883a 	mov	r8,sp
 4009fe8:	3c3ff316 	blt	r7,r16,4009fb8 <__reset+0xfa819fb8>
 4009fec:	8007883a 	mov	r3,r16
 4009ff0:	da402517 	ldw	r9,148(sp)
 4009ff4:	db802817 	ldw	r14,160(sp)
 4009ff8:	dc002917 	ldw	r16,164(sp)
 4009ffc:	da802417 	ldw	r10,144(sp)
 400a000:	1885883a 	add	r2,r3,r2
 400a004:	40c00115 	stw	r3,4(r8)
 400a008:	42800015 	stw	r10,0(r8)
 400a00c:	d8801c15 	stw	r2,112(sp)
 400a010:	d9401b15 	stw	r5,108(sp)
 400a014:	00c001c4 	movi	r3,7
 400a018:	19426016 	blt	r3,r5,400a99c <___vfiprintf_internal_r+0xe68>
 400a01c:	d8c01d87 	ldb	r3,118(sp)
 400a020:	42000204 	addi	r8,r8,8
 400a024:	29000044 	addi	r4,r5,1
 400a028:	1801b31e 	bne	r3,zero,400a6f8 <___vfiprintf_internal_r+0xbc4>
 400a02c:	7001c026 	beq	r14,zero,400a730 <___vfiprintf_internal_r+0xbfc>
 400a030:	d8c01d04 	addi	r3,sp,116
 400a034:	10800084 	addi	r2,r2,2
 400a038:	40c00015 	stw	r3,0(r8)
 400a03c:	00c00084 	movi	r3,2
 400a040:	40c00115 	stw	r3,4(r8)
 400a044:	d8801c15 	stw	r2,112(sp)
 400a048:	d9001b15 	stw	r4,108(sp)
 400a04c:	00c001c4 	movi	r3,7
 400a050:	1902650e 	bge	r3,r4,400a9e8 <___vfiprintf_internal_r+0xeb4>
 400a054:	10029a1e 	bne	r2,zero,400aac0 <___vfiprintf_internal_r+0xf8c>
 400a058:	00c02004 	movi	r3,128
 400a05c:	01000044 	movi	r4,1
 400a060:	000b883a 	mov	r5,zero
 400a064:	d811883a 	mov	r8,sp
 400a068:	e0c1b31e 	bne	fp,r3,400a738 <___vfiprintf_internal_r+0xc04>
 400a06c:	8cb9c83a 	sub	fp,r17,r18
 400a070:	0701b10e 	bge	zero,fp,400a738 <___vfiprintf_internal_r+0xc04>
 400a074:	01c00404 	movi	r7,16
 400a078:	3f03890e 	bge	r7,fp,400aea0 <___vfiprintf_internal_r+0x136c>
 400a07c:	00c10074 	movhi	r3,1025
 400a080:	18d4e104 	addi	r3,r3,21380
 400a084:	d8c02415 	stw	r3,144(sp)
 400a088:	8007883a 	mov	r3,r16
 400a08c:	034001c4 	movi	r13,7
 400a090:	e021883a 	mov	r16,fp
 400a094:	da402515 	stw	r9,148(sp)
 400a098:	1839883a 	mov	fp,r3
 400a09c:	00000506 	br	400a0b4 <___vfiprintf_internal_r+0x580>
 400a0a0:	29800084 	addi	r6,r5,2
 400a0a4:	42000204 	addi	r8,r8,8
 400a0a8:	180b883a 	mov	r5,r3
 400a0ac:	843ffc04 	addi	r16,r16,-16
 400a0b0:	3c000d0e 	bge	r7,r16,400a0e8 <___vfiprintf_internal_r+0x5b4>
 400a0b4:	10800404 	addi	r2,r2,16
 400a0b8:	28c00044 	addi	r3,r5,1
 400a0bc:	45c00015 	stw	r23,0(r8)
 400a0c0:	41c00115 	stw	r7,4(r8)
 400a0c4:	d8801c15 	stw	r2,112(sp)
 400a0c8:	d8c01b15 	stw	r3,108(sp)
 400a0cc:	68fff40e 	bge	r13,r3,400a0a0 <__reset+0xfa81a0a0>
 400a0d0:	1002241e 	bne	r2,zero,400a964 <___vfiprintf_internal_r+0xe30>
 400a0d4:	843ffc04 	addi	r16,r16,-16
 400a0d8:	01800044 	movi	r6,1
 400a0dc:	000b883a 	mov	r5,zero
 400a0e0:	d811883a 	mov	r8,sp
 400a0e4:	3c3ff316 	blt	r7,r16,400a0b4 <__reset+0xfa81a0b4>
 400a0e8:	da402517 	ldw	r9,148(sp)
 400a0ec:	e007883a 	mov	r3,fp
 400a0f0:	8039883a 	mov	fp,r16
 400a0f4:	1821883a 	mov	r16,r3
 400a0f8:	d8c02417 	ldw	r3,144(sp)
 400a0fc:	1705883a 	add	r2,r2,fp
 400a100:	47000115 	stw	fp,4(r8)
 400a104:	40c00015 	stw	r3,0(r8)
 400a108:	d8801c15 	stw	r2,112(sp)
 400a10c:	d9801b15 	stw	r6,108(sp)
 400a110:	00c001c4 	movi	r3,7
 400a114:	19827616 	blt	r3,r6,400aaf0 <___vfiprintf_internal_r+0xfbc>
 400a118:	4cf9c83a 	sub	fp,r9,r19
 400a11c:	42000204 	addi	r8,r8,8
 400a120:	31000044 	addi	r4,r6,1
 400a124:	300b883a 	mov	r5,r6
 400a128:	07018516 	blt	zero,fp,400a740 <___vfiprintf_internal_r+0xc0c>
 400a12c:	9885883a 	add	r2,r19,r2
 400a130:	45400015 	stw	r21,0(r8)
 400a134:	44c00115 	stw	r19,4(r8)
 400a138:	d8801c15 	stw	r2,112(sp)
 400a13c:	d9001b15 	stw	r4,108(sp)
 400a140:	00c001c4 	movi	r3,7
 400a144:	1901dd0e 	bge	r3,r4,400a8bc <___vfiprintf_internal_r+0xd88>
 400a148:	1002401e 	bne	r2,zero,400aa4c <___vfiprintf_internal_r+0xf18>
 400a14c:	d8001b15 	stw	zero,108(sp)
 400a150:	a2c0010c 	andi	r11,r20,4
 400a154:	58000226 	beq	r11,zero,400a160 <___vfiprintf_internal_r+0x62c>
 400a158:	8ca7c83a 	sub	r19,r17,r18
 400a15c:	04c2f216 	blt	zero,r19,400ad28 <___vfiprintf_internal_r+0x11f4>
 400a160:	8c80010e 	bge	r17,r18,400a168 <___vfiprintf_internal_r+0x634>
 400a164:	9023883a 	mov	r17,r18
 400a168:	da802317 	ldw	r10,140(sp)
 400a16c:	5455883a 	add	r10,r10,r17
 400a170:	da802315 	stw	r10,140(sp)
 400a174:	d8001b15 	stw	zero,108(sp)
 400a178:	d811883a 	mov	r8,sp
 400a17c:	003ea206 	br	4009c08 <__reset+0xfa819c08>
 400a180:	a5000814 	ori	r20,r20,32
 400a184:	80c00007 	ldb	r3,0(r16)
 400a188:	003ec906 	br	4009cb0 <__reset+0xfa819cb0>
 400a18c:	80c00007 	ldb	r3,0(r16)
 400a190:	1b030926 	beq	r3,r12,400adb8 <___vfiprintf_internal_r+0x1284>
 400a194:	a5000414 	ori	r20,r20,16
 400a198:	003ec506 	br	4009cb0 <__reset+0xfa819cb0>
 400a19c:	21003fcc 	andi	r4,r4,255
 400a1a0:	20035e1e 	bne	r4,zero,400af1c <___vfiprintf_internal_r+0x13e8>
 400a1a4:	a080080c 	andi	r2,r20,32
 400a1a8:	1002a526 	beq	r2,zero,400ac40 <___vfiprintf_internal_r+0x110c>
 400a1ac:	da802217 	ldw	r10,136(sp)
 400a1b0:	50800017 	ldw	r2,0(r10)
 400a1b4:	da802317 	ldw	r10,140(sp)
 400a1b8:	5007d7fa 	srai	r3,r10,31
 400a1bc:	da802217 	ldw	r10,136(sp)
 400a1c0:	10c00115 	stw	r3,4(r2)
 400a1c4:	52800104 	addi	r10,r10,4
 400a1c8:	da802215 	stw	r10,136(sp)
 400a1cc:	da802317 	ldw	r10,140(sp)
 400a1d0:	12800015 	stw	r10,0(r2)
 400a1d4:	003e8c06 	br	4009c08 <__reset+0xfa819c08>
 400a1d8:	21003fcc 	andi	r4,r4,255
 400a1dc:	2003511e 	bne	r4,zero,400af24 <___vfiprintf_internal_r+0x13f0>
 400a1e0:	a080080c 	andi	r2,r20,32
 400a1e4:	1000a126 	beq	r2,zero,400a46c <___vfiprintf_internal_r+0x938>
 400a1e8:	da802217 	ldw	r10,136(sp)
 400a1ec:	d8001d85 	stb	zero,118(sp)
 400a1f0:	50800204 	addi	r2,r10,8
 400a1f4:	54800017 	ldw	r18,0(r10)
 400a1f8:	54c00117 	ldw	r19,4(r10)
 400a1fc:	4802b416 	blt	r9,zero,400acd0 <___vfiprintf_internal_r+0x119c>
 400a200:	013fdfc4 	movi	r4,-129
 400a204:	94c6b03a 	or	r3,r18,r19
 400a208:	d8802215 	stw	r2,136(sp)
 400a20c:	a128703a 	and	r20,r20,r4
 400a210:	1800a226 	beq	r3,zero,400a49c <___vfiprintf_internal_r+0x968>
 400a214:	0039883a 	mov	fp,zero
 400a218:	dd401a04 	addi	r21,sp,104
 400a21c:	9006d0fa 	srli	r3,r18,3
 400a220:	9808977a 	slli	r4,r19,29
 400a224:	9826d0fa 	srli	r19,r19,3
 400a228:	948001cc 	andi	r18,r18,7
 400a22c:	90800c04 	addi	r2,r18,48
 400a230:	ad7fffc4 	addi	r21,r21,-1
 400a234:	20e4b03a 	or	r18,r4,r3
 400a238:	a8800005 	stb	r2,0(r21)
 400a23c:	94c6b03a 	or	r3,r18,r19
 400a240:	183ff61e 	bne	r3,zero,400a21c <__reset+0xfa81a21c>
 400a244:	a0c0004c 	andi	r3,r20,1
 400a248:	18005926 	beq	r3,zero,400a3b0 <___vfiprintf_internal_r+0x87c>
 400a24c:	10803fcc 	andi	r2,r2,255
 400a250:	1080201c 	xori	r2,r2,128
 400a254:	10bfe004 	addi	r2,r2,-128
 400a258:	00c00c04 	movi	r3,48
 400a25c:	10c05426 	beq	r2,r3,400a3b0 <___vfiprintf_internal_r+0x87c>
 400a260:	da801e17 	ldw	r10,120(sp)
 400a264:	a8bfffc4 	addi	r2,r21,-1
 400a268:	a8ffffc5 	stb	r3,-1(r21)
 400a26c:	50a7c83a 	sub	r19,r10,r2
 400a270:	102b883a 	mov	r21,r2
 400a274:	003f2f06 	br	4009f34 <__reset+0xfa819f34>
 400a278:	21003fcc 	andi	r4,r4,255
 400a27c:	2003421e 	bne	r4,zero,400af88 <___vfiprintf_internal_r+0x1454>
 400a280:	00810074 	movhi	r2,1025
 400a284:	10948004 	addi	r2,r2,20992
 400a288:	d8802615 	stw	r2,152(sp)
 400a28c:	a080080c 	andi	r2,r20,32
 400a290:	1000aa26 	beq	r2,zero,400a53c <___vfiprintf_internal_r+0xa08>
 400a294:	da802217 	ldw	r10,136(sp)
 400a298:	54800017 	ldw	r18,0(r10)
 400a29c:	54c00117 	ldw	r19,4(r10)
 400a2a0:	52800204 	addi	r10,r10,8
 400a2a4:	da802215 	stw	r10,136(sp)
 400a2a8:	a080004c 	andi	r2,r20,1
 400a2ac:	1001d226 	beq	r2,zero,400a9f8 <___vfiprintf_internal_r+0xec4>
 400a2b0:	94c4b03a 	or	r2,r18,r19
 400a2b4:	1002351e 	bne	r2,zero,400ab8c <___vfiprintf_internal_r+0x1058>
 400a2b8:	d8001d85 	stb	zero,118(sp)
 400a2bc:	48022216 	blt	r9,zero,400ab48 <___vfiprintf_internal_r+0x1014>
 400a2c0:	00bfdfc4 	movi	r2,-129
 400a2c4:	a0a8703a 	and	r20,r20,r2
 400a2c8:	003f1506 	br	4009f20 <__reset+0xfa819f20>
 400a2cc:	da802217 	ldw	r10,136(sp)
 400a2d0:	04800044 	movi	r18,1
 400a2d4:	d8001d85 	stb	zero,118(sp)
 400a2d8:	50800017 	ldw	r2,0(r10)
 400a2dc:	52800104 	addi	r10,r10,4
 400a2e0:	da802215 	stw	r10,136(sp)
 400a2e4:	d8801005 	stb	r2,64(sp)
 400a2e8:	9027883a 	mov	r19,r18
 400a2ec:	dd401004 	addi	r21,sp,64
 400a2f0:	0013883a 	mov	r9,zero
 400a2f4:	003f1706 	br	4009f54 <__reset+0xfa819f54>
 400a2f8:	21003fcc 	andi	r4,r4,255
 400a2fc:	2003201e 	bne	r4,zero,400af80 <___vfiprintf_internal_r+0x144c>
 400a300:	a080080c 	andi	r2,r20,32
 400a304:	10004b26 	beq	r2,zero,400a434 <___vfiprintf_internal_r+0x900>
 400a308:	da802217 	ldw	r10,136(sp)
 400a30c:	50800117 	ldw	r2,4(r10)
 400a310:	54800017 	ldw	r18,0(r10)
 400a314:	52800204 	addi	r10,r10,8
 400a318:	da802215 	stw	r10,136(sp)
 400a31c:	1027883a 	mov	r19,r2
 400a320:	10022c16 	blt	r2,zero,400abd4 <___vfiprintf_internal_r+0x10a0>
 400a324:	df001d83 	ldbu	fp,118(sp)
 400a328:	48007216 	blt	r9,zero,400a4f4 <___vfiprintf_internal_r+0x9c0>
 400a32c:	00ffdfc4 	movi	r3,-129
 400a330:	94c4b03a 	or	r2,r18,r19
 400a334:	a0e8703a 	and	r20,r20,r3
 400a338:	1000cc26 	beq	r2,zero,400a66c <___vfiprintf_internal_r+0xb38>
 400a33c:	98021026 	beq	r19,zero,400ab80 <___vfiprintf_internal_r+0x104c>
 400a340:	dc402415 	stw	r17,144(sp)
 400a344:	dc002515 	stw	r16,148(sp)
 400a348:	9823883a 	mov	r17,r19
 400a34c:	9021883a 	mov	r16,r18
 400a350:	dd401a04 	addi	r21,sp,104
 400a354:	4825883a 	mov	r18,r9
 400a358:	4027883a 	mov	r19,r8
 400a35c:	8009883a 	mov	r4,r16
 400a360:	880b883a 	mov	r5,r17
 400a364:	01800284 	movi	r6,10
 400a368:	000f883a 	mov	r7,zero
 400a36c:	400bf140 	call	400bf14 <__umoddi3>
 400a370:	10800c04 	addi	r2,r2,48
 400a374:	ad7fffc4 	addi	r21,r21,-1
 400a378:	8009883a 	mov	r4,r16
 400a37c:	880b883a 	mov	r5,r17
 400a380:	a8800005 	stb	r2,0(r21)
 400a384:	01800284 	movi	r6,10
 400a388:	000f883a 	mov	r7,zero
 400a38c:	400b99c0 	call	400b99c <__udivdi3>
 400a390:	1021883a 	mov	r16,r2
 400a394:	10c4b03a 	or	r2,r2,r3
 400a398:	1823883a 	mov	r17,r3
 400a39c:	103fef1e 	bne	r2,zero,400a35c <__reset+0xfa81a35c>
 400a3a0:	dc402417 	ldw	r17,144(sp)
 400a3a4:	dc002517 	ldw	r16,148(sp)
 400a3a8:	9013883a 	mov	r9,r18
 400a3ac:	9811883a 	mov	r8,r19
 400a3b0:	da801e17 	ldw	r10,120(sp)
 400a3b4:	5567c83a 	sub	r19,r10,r21
 400a3b8:	003ede06 	br	4009f34 <__reset+0xfa819f34>
 400a3bc:	38803fcc 	andi	r2,r7,255
 400a3c0:	1080201c 	xori	r2,r2,128
 400a3c4:	10bfe004 	addi	r2,r2,-128
 400a3c8:	1002371e 	bne	r2,zero,400aca8 <___vfiprintf_internal_r+0x1174>
 400a3cc:	01000044 	movi	r4,1
 400a3d0:	01c00804 	movi	r7,32
 400a3d4:	80c00007 	ldb	r3,0(r16)
 400a3d8:	003e3506 	br	4009cb0 <__reset+0xfa819cb0>
 400a3dc:	a5000054 	ori	r20,r20,1
 400a3e0:	80c00007 	ldb	r3,0(r16)
 400a3e4:	003e3206 	br	4009cb0 <__reset+0xfa819cb0>
 400a3e8:	a5002014 	ori	r20,r20,128
 400a3ec:	80c00007 	ldb	r3,0(r16)
 400a3f0:	003e2f06 	br	4009cb0 <__reset+0xfa819cb0>
 400a3f4:	8015883a 	mov	r10,r16
 400a3f8:	0023883a 	mov	r17,zero
 400a3fc:	18bff404 	addi	r2,r3,-48
 400a400:	50c00007 	ldb	r3,0(r10)
 400a404:	8c4002a4 	muli	r17,r17,10
 400a408:	84000044 	addi	r16,r16,1
 400a40c:	8015883a 	mov	r10,r16
 400a410:	1463883a 	add	r17,r2,r17
 400a414:	18bff404 	addi	r2,r3,-48
 400a418:	30bff92e 	bgeu	r6,r2,400a400 <__reset+0xfa81a400>
 400a41c:	003e2506 	br	4009cb4 <__reset+0xfa819cb4>
 400a420:	21003fcc 	andi	r4,r4,255
 400a424:	2002d41e 	bne	r4,zero,400af78 <___vfiprintf_internal_r+0x1444>
 400a428:	a5000414 	ori	r20,r20,16
 400a42c:	a080080c 	andi	r2,r20,32
 400a430:	103fb51e 	bne	r2,zero,400a308 <__reset+0xfa81a308>
 400a434:	a080040c 	andi	r2,r20,16
 400a438:	1001f826 	beq	r2,zero,400ac1c <___vfiprintf_internal_r+0x10e8>
 400a43c:	da802217 	ldw	r10,136(sp)
 400a440:	54800017 	ldw	r18,0(r10)
 400a444:	52800104 	addi	r10,r10,4
 400a448:	da802215 	stw	r10,136(sp)
 400a44c:	9027d7fa 	srai	r19,r18,31
 400a450:	9805883a 	mov	r2,r19
 400a454:	003fb206 	br	400a320 <__reset+0xfa81a320>
 400a458:	21003fcc 	andi	r4,r4,255
 400a45c:	2002c41e 	bne	r4,zero,400af70 <___vfiprintf_internal_r+0x143c>
 400a460:	a5000414 	ori	r20,r20,16
 400a464:	a080080c 	andi	r2,r20,32
 400a468:	103f5f1e 	bne	r2,zero,400a1e8 <__reset+0xfa81a1e8>
 400a46c:	a080040c 	andi	r2,r20,16
 400a470:	10020f26 	beq	r2,zero,400acb0 <___vfiprintf_internal_r+0x117c>
 400a474:	da802217 	ldw	r10,136(sp)
 400a478:	d8001d85 	stb	zero,118(sp)
 400a47c:	0027883a 	mov	r19,zero
 400a480:	50800104 	addi	r2,r10,4
 400a484:	54800017 	ldw	r18,0(r10)
 400a488:	48021116 	blt	r9,zero,400acd0 <___vfiprintf_internal_r+0x119c>
 400a48c:	00ffdfc4 	movi	r3,-129
 400a490:	d8802215 	stw	r2,136(sp)
 400a494:	a0e8703a 	and	r20,r20,r3
 400a498:	903f5e1e 	bne	r18,zero,400a214 <__reset+0xfa81a214>
 400a49c:	0039883a 	mov	fp,zero
 400a4a0:	4802a626 	beq	r9,zero,400af3c <___vfiprintf_internal_r+0x1408>
 400a4a4:	0025883a 	mov	r18,zero
 400a4a8:	0027883a 	mov	r19,zero
 400a4ac:	003f5a06 	br	400a218 <__reset+0xfa81a218>
 400a4b0:	21003fcc 	andi	r4,r4,255
 400a4b4:	20029f1e 	bne	r4,zero,400af34 <___vfiprintf_internal_r+0x1400>
 400a4b8:	a5000414 	ori	r20,r20,16
 400a4bc:	a080080c 	andi	r2,r20,32
 400a4c0:	10005e1e 	bne	r2,zero,400a63c <___vfiprintf_internal_r+0xb08>
 400a4c4:	a080040c 	andi	r2,r20,16
 400a4c8:	1001a21e 	bne	r2,zero,400ab54 <___vfiprintf_internal_r+0x1020>
 400a4cc:	a080100c 	andi	r2,r20,64
 400a4d0:	d8001d85 	stb	zero,118(sp)
 400a4d4:	da802217 	ldw	r10,136(sp)
 400a4d8:	1002231e 	bne	r2,zero,400ad68 <___vfiprintf_internal_r+0x1234>
 400a4dc:	50800104 	addi	r2,r10,4
 400a4e0:	54800017 	ldw	r18,0(r10)
 400a4e4:	0027883a 	mov	r19,zero
 400a4e8:	4801a00e 	bge	r9,zero,400ab6c <___vfiprintf_internal_r+0x1038>
 400a4ec:	d8802215 	stw	r2,136(sp)
 400a4f0:	0039883a 	mov	fp,zero
 400a4f4:	94c4b03a 	or	r2,r18,r19
 400a4f8:	103f901e 	bne	r2,zero,400a33c <__reset+0xfa81a33c>
 400a4fc:	00800044 	movi	r2,1
 400a500:	10803fcc 	andi	r2,r2,255
 400a504:	00c00044 	movi	r3,1
 400a508:	10c05926 	beq	r2,r3,400a670 <___vfiprintf_internal_r+0xb3c>
 400a50c:	00c00084 	movi	r3,2
 400a510:	10ffe41e 	bne	r2,r3,400a4a4 <__reset+0xfa81a4a4>
 400a514:	0025883a 	mov	r18,zero
 400a518:	0027883a 	mov	r19,zero
 400a51c:	00013d06 	br	400aa14 <___vfiprintf_internal_r+0xee0>
 400a520:	21003fcc 	andi	r4,r4,255
 400a524:	2002811e 	bne	r4,zero,400af2c <___vfiprintf_internal_r+0x13f8>
 400a528:	00810074 	movhi	r2,1025
 400a52c:	10947b04 	addi	r2,r2,20972
 400a530:	d8802615 	stw	r2,152(sp)
 400a534:	a080080c 	andi	r2,r20,32
 400a538:	103f561e 	bne	r2,zero,400a294 <__reset+0xfa81a294>
 400a53c:	a080040c 	andi	r2,r20,16
 400a540:	1001d126 	beq	r2,zero,400ac88 <___vfiprintf_internal_r+0x1154>
 400a544:	da802217 	ldw	r10,136(sp)
 400a548:	0027883a 	mov	r19,zero
 400a54c:	54800017 	ldw	r18,0(r10)
 400a550:	52800104 	addi	r10,r10,4
 400a554:	da802215 	stw	r10,136(sp)
 400a558:	003f5306 	br	400a2a8 <__reset+0xfa81a2a8>
 400a55c:	da802217 	ldw	r10,136(sp)
 400a560:	d8001d85 	stb	zero,118(sp)
 400a564:	55400017 	ldw	r21,0(r10)
 400a568:	50c00104 	addi	r3,r10,4
 400a56c:	a8024226 	beq	r21,zero,400ae78 <___vfiprintf_internal_r+0x1344>
 400a570:	48021816 	blt	r9,zero,400add4 <___vfiprintf_internal_r+0x12a0>
 400a574:	480d883a 	mov	r6,r9
 400a578:	000b883a 	mov	r5,zero
 400a57c:	a809883a 	mov	r4,r21
 400a580:	d8c02a15 	stw	r3,168(sp)
 400a584:	da002b15 	stw	r8,172(sp)
 400a588:	da402c15 	stw	r9,176(sp)
 400a58c:	4007e780 	call	4007e78 <memchr>
 400a590:	d8c02a17 	ldw	r3,168(sp)
 400a594:	da002b17 	ldw	r8,172(sp)
 400a598:	da402c17 	ldw	r9,176(sp)
 400a59c:	10024826 	beq	r2,zero,400aec0 <___vfiprintf_internal_r+0x138c>
 400a5a0:	1567c83a 	sub	r19,r2,r21
 400a5a4:	df001d83 	ldbu	fp,118(sp)
 400a5a8:	d8c02215 	stw	r3,136(sp)
 400a5ac:	0013883a 	mov	r9,zero
 400a5b0:	003e6006 	br	4009f34 <__reset+0xfa819f34>
 400a5b4:	21003fcc 	andi	r4,r4,255
 400a5b8:	203fc026 	beq	r4,zero,400a4bc <__reset+0xfa81a4bc>
 400a5bc:	d9c01d85 	stb	r7,118(sp)
 400a5c0:	003fbe06 	br	400a4bc <__reset+0xfa81a4bc>
 400a5c4:	da802217 	ldw	r10,136(sp)
 400a5c8:	54400017 	ldw	r17,0(r10)
 400a5cc:	50800104 	addi	r2,r10,4
 400a5d0:	883e3b16 	blt	r17,zero,4009ec0 <__reset+0xfa819ec0>
 400a5d4:	d8802215 	stw	r2,136(sp)
 400a5d8:	80c00007 	ldb	r3,0(r16)
 400a5dc:	003db406 	br	4009cb0 <__reset+0xfa819cb0>
 400a5e0:	01000044 	movi	r4,1
 400a5e4:	01c00ac4 	movi	r7,43
 400a5e8:	80c00007 	ldb	r3,0(r16)
 400a5ec:	003db006 	br	4009cb0 <__reset+0xfa819cb0>
 400a5f0:	80c00007 	ldb	r3,0(r16)
 400a5f4:	82800044 	addi	r10,r16,1
 400a5f8:	1b423c26 	beq	r3,r13,400aeec <___vfiprintf_internal_r+0x13b8>
 400a5fc:	18bff404 	addi	r2,r3,-48
 400a600:	0013883a 	mov	r9,zero
 400a604:	30822b36 	bltu	r6,r2,400aeb4 <___vfiprintf_internal_r+0x1380>
 400a608:	50c00007 	ldb	r3,0(r10)
 400a60c:	4a4002a4 	muli	r9,r9,10
 400a610:	54000044 	addi	r16,r10,1
 400a614:	8015883a 	mov	r10,r16
 400a618:	4893883a 	add	r9,r9,r2
 400a61c:	18bff404 	addi	r2,r3,-48
 400a620:	30bff92e 	bgeu	r6,r2,400a608 <__reset+0xfa81a608>
 400a624:	483da30e 	bge	r9,zero,4009cb4 <__reset+0xfa819cb4>
 400a628:	027fffc4 	movi	r9,-1
 400a62c:	003da106 	br	4009cb4 <__reset+0xfa819cb4>
 400a630:	a5001014 	ori	r20,r20,64
 400a634:	80c00007 	ldb	r3,0(r16)
 400a638:	003d9d06 	br	4009cb0 <__reset+0xfa819cb0>
 400a63c:	da802217 	ldw	r10,136(sp)
 400a640:	d8001d85 	stb	zero,118(sp)
 400a644:	50c00204 	addi	r3,r10,8
 400a648:	54800017 	ldw	r18,0(r10)
 400a64c:	54c00117 	ldw	r19,4(r10)
 400a650:	4801ca16 	blt	r9,zero,400ad7c <___vfiprintf_internal_r+0x1248>
 400a654:	013fdfc4 	movi	r4,-129
 400a658:	94c4b03a 	or	r2,r18,r19
 400a65c:	d8c02215 	stw	r3,136(sp)
 400a660:	a128703a 	and	r20,r20,r4
 400a664:	0039883a 	mov	fp,zero
 400a668:	103f341e 	bne	r2,zero,400a33c <__reset+0xfa81a33c>
 400a66c:	483e2e26 	beq	r9,zero,4009f28 <__reset+0xfa819f28>
 400a670:	0025883a 	mov	r18,zero
 400a674:	94800c04 	addi	r18,r18,48
 400a678:	dc8019c5 	stb	r18,103(sp)
 400a67c:	dcc02717 	ldw	r19,156(sp)
 400a680:	dd4019c4 	addi	r21,sp,103
 400a684:	003e2b06 	br	4009f34 <__reset+0xfa819f34>
 400a688:	21003fcc 	andi	r4,r4,255
 400a68c:	2002361e 	bne	r4,zero,400af68 <___vfiprintf_internal_r+0x1434>
 400a690:	1801c126 	beq	r3,zero,400ad98 <___vfiprintf_internal_r+0x1264>
 400a694:	04800044 	movi	r18,1
 400a698:	d8c01005 	stb	r3,64(sp)
 400a69c:	d8001d85 	stb	zero,118(sp)
 400a6a0:	9027883a 	mov	r19,r18
 400a6a4:	dd401004 	addi	r21,sp,64
 400a6a8:	003f1106 	br	400a2f0 <__reset+0xfa81a2f0>
 400a6ac:	d9402117 	ldw	r5,132(sp)
 400a6b0:	d9002017 	ldw	r4,128(sp)
 400a6b4:	d9801a04 	addi	r6,sp,104
 400a6b8:	d9c02b15 	stw	r7,172(sp)
 400a6bc:	dbc02a15 	stw	r15,168(sp)
 400a6c0:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400a6c4:	d9c02b17 	ldw	r7,172(sp)
 400a6c8:	dbc02a17 	ldw	r15,168(sp)
 400a6cc:	10006d1e 	bne	r2,zero,400a884 <___vfiprintf_internal_r+0xd50>
 400a6d0:	d9801b17 	ldw	r6,108(sp)
 400a6d4:	d8801c17 	ldw	r2,112(sp)
 400a6d8:	d811883a 	mov	r8,sp
 400a6dc:	31400044 	addi	r5,r6,1
 400a6e0:	003e3306 	br	4009fb0 <__reset+0xfa819fb0>
 400a6e4:	d9401b17 	ldw	r5,108(sp)
 400a6e8:	d8801c17 	ldw	r2,112(sp)
 400a6ec:	29000044 	addi	r4,r5,1
 400a6f0:	d8c01d87 	ldb	r3,118(sp)
 400a6f4:	183e4d26 	beq	r3,zero,400a02c <__reset+0xfa81a02c>
 400a6f8:	00c00044 	movi	r3,1
 400a6fc:	d9401d84 	addi	r5,sp,118
 400a700:	10c5883a 	add	r2,r2,r3
 400a704:	41400015 	stw	r5,0(r8)
 400a708:	40c00115 	stw	r3,4(r8)
 400a70c:	d8801c15 	stw	r2,112(sp)
 400a710:	d9001b15 	stw	r4,108(sp)
 400a714:	014001c4 	movi	r5,7
 400a718:	2900a90e 	bge	r5,r4,400a9c0 <___vfiprintf_internal_r+0xe8c>
 400a71c:	1000da1e 	bne	r2,zero,400aa88 <___vfiprintf_internal_r+0xf54>
 400a720:	7000ab1e 	bne	r14,zero,400a9d0 <___vfiprintf_internal_r+0xe9c>
 400a724:	000b883a 	mov	r5,zero
 400a728:	1809883a 	mov	r4,r3
 400a72c:	d811883a 	mov	r8,sp
 400a730:	00c02004 	movi	r3,128
 400a734:	e0fe4d26 	beq	fp,r3,400a06c <__reset+0xfa81a06c>
 400a738:	4cf9c83a 	sub	fp,r9,r19
 400a73c:	073e7b0e 	bge	zero,fp,400a12c <__reset+0xfa81a12c>
 400a740:	01c00404 	movi	r7,16
 400a744:	3f01900e 	bge	r7,fp,400ad88 <___vfiprintf_internal_r+0x1254>
 400a748:	00c10074 	movhi	r3,1025
 400a74c:	18d4e104 	addi	r3,r3,21380
 400a750:	d8c02415 	stw	r3,144(sp)
 400a754:	034001c4 	movi	r13,7
 400a758:	00000506 	br	400a770 <___vfiprintf_internal_r+0xc3c>
 400a75c:	29000084 	addi	r4,r5,2
 400a760:	42000204 	addi	r8,r8,8
 400a764:	180b883a 	mov	r5,r3
 400a768:	e73ffc04 	addi	fp,fp,-16
 400a76c:	3f000d0e 	bge	r7,fp,400a7a4 <___vfiprintf_internal_r+0xc70>
 400a770:	10800404 	addi	r2,r2,16
 400a774:	28c00044 	addi	r3,r5,1
 400a778:	45c00015 	stw	r23,0(r8)
 400a77c:	41c00115 	stw	r7,4(r8)
 400a780:	d8801c15 	stw	r2,112(sp)
 400a784:	d8c01b15 	stw	r3,108(sp)
 400a788:	68fff40e 	bge	r13,r3,400a75c <__reset+0xfa81a75c>
 400a78c:	1000101e 	bne	r2,zero,400a7d0 <___vfiprintf_internal_r+0xc9c>
 400a790:	e73ffc04 	addi	fp,fp,-16
 400a794:	01000044 	movi	r4,1
 400a798:	000b883a 	mov	r5,zero
 400a79c:	d811883a 	mov	r8,sp
 400a7a0:	3f3ff316 	blt	r7,fp,400a770 <__reset+0xfa81a770>
 400a7a4:	da802417 	ldw	r10,144(sp)
 400a7a8:	1705883a 	add	r2,r2,fp
 400a7ac:	47000115 	stw	fp,4(r8)
 400a7b0:	42800015 	stw	r10,0(r8)
 400a7b4:	d8801c15 	stw	r2,112(sp)
 400a7b8:	d9001b15 	stw	r4,108(sp)
 400a7bc:	00c001c4 	movi	r3,7
 400a7c0:	19003616 	blt	r3,r4,400a89c <___vfiprintf_internal_r+0xd68>
 400a7c4:	42000204 	addi	r8,r8,8
 400a7c8:	21000044 	addi	r4,r4,1
 400a7cc:	003e5706 	br	400a12c <__reset+0xfa81a12c>
 400a7d0:	d9402117 	ldw	r5,132(sp)
 400a7d4:	d9002017 	ldw	r4,128(sp)
 400a7d8:	d9801a04 	addi	r6,sp,104
 400a7dc:	d9c02b15 	stw	r7,172(sp)
 400a7e0:	db402a15 	stw	r13,168(sp)
 400a7e4:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400a7e8:	d9c02b17 	ldw	r7,172(sp)
 400a7ec:	db402a17 	ldw	r13,168(sp)
 400a7f0:	1000241e 	bne	r2,zero,400a884 <___vfiprintf_internal_r+0xd50>
 400a7f4:	d9401b17 	ldw	r5,108(sp)
 400a7f8:	d8801c17 	ldw	r2,112(sp)
 400a7fc:	d811883a 	mov	r8,sp
 400a800:	29000044 	addi	r4,r5,1
 400a804:	003fd806 	br	400a768 <__reset+0xfa81a768>
 400a808:	d9401b17 	ldw	r5,108(sp)
 400a80c:	00c10074 	movhi	r3,1025
 400a810:	18d4e504 	addi	r3,r3,21396
 400a814:	d8c02415 	stw	r3,144(sp)
 400a818:	29400044 	addi	r5,r5,1
 400a81c:	d8c02417 	ldw	r3,144(sp)
 400a820:	14c5883a 	add	r2,r2,r19
 400a824:	44c00115 	stw	r19,4(r8)
 400a828:	40c00015 	stw	r3,0(r8)
 400a82c:	d8801c15 	stw	r2,112(sp)
 400a830:	d9401b15 	stw	r5,108(sp)
 400a834:	00c001c4 	movi	r3,7
 400a838:	1940070e 	bge	r3,r5,400a858 <___vfiprintf_internal_r+0xd24>
 400a83c:	103e4826 	beq	r2,zero,400a160 <__reset+0xfa81a160>
 400a840:	d9402117 	ldw	r5,132(sp)
 400a844:	d9002017 	ldw	r4,128(sp)
 400a848:	d9801a04 	addi	r6,sp,104
 400a84c:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400a850:	10000c1e 	bne	r2,zero,400a884 <___vfiprintf_internal_r+0xd50>
 400a854:	d8801c17 	ldw	r2,112(sp)
 400a858:	8c80010e 	bge	r17,r18,400a860 <___vfiprintf_internal_r+0xd2c>
 400a85c:	9023883a 	mov	r17,r18
 400a860:	da802317 	ldw	r10,140(sp)
 400a864:	5455883a 	add	r10,r10,r17
 400a868:	da802315 	stw	r10,140(sp)
 400a86c:	103e4126 	beq	r2,zero,400a174 <__reset+0xfa81a174>
 400a870:	d9402117 	ldw	r5,132(sp)
 400a874:	d9002017 	ldw	r4,128(sp)
 400a878:	d9801a04 	addi	r6,sp,104
 400a87c:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400a880:	103e3c26 	beq	r2,zero,400a174 <__reset+0xfa81a174>
 400a884:	dd002117 	ldw	r20,132(sp)
 400a888:	a080030b 	ldhu	r2,12(r20)
 400a88c:	1080100c 	andi	r2,r2,64
 400a890:	1001231e 	bne	r2,zero,400ad20 <___vfiprintf_internal_r+0x11ec>
 400a894:	d8802317 	ldw	r2,140(sp)
 400a898:	003d7b06 	br	4009e88 <__reset+0xfa819e88>
 400a89c:	1000991e 	bne	r2,zero,400ab04 <___vfiprintf_internal_r+0xfd0>
 400a8a0:	00c00044 	movi	r3,1
 400a8a4:	9805883a 	mov	r2,r19
 400a8a8:	dd400015 	stw	r21,0(sp)
 400a8ac:	dcc00115 	stw	r19,4(sp)
 400a8b0:	dcc01c15 	stw	r19,112(sp)
 400a8b4:	d8c01b15 	stw	r3,108(sp)
 400a8b8:	d811883a 	mov	r8,sp
 400a8bc:	42000204 	addi	r8,r8,8
 400a8c0:	a2c0010c 	andi	r11,r20,4
 400a8c4:	583fe426 	beq	r11,zero,400a858 <__reset+0xfa81a858>
 400a8c8:	8ca7c83a 	sub	r19,r17,r18
 400a8cc:	04ffe20e 	bge	zero,r19,400a858 <__reset+0xfa81a858>
 400a8d0:	01c00404 	movi	r7,16
 400a8d4:	3cffcc0e 	bge	r7,r19,400a808 <__reset+0xfa81a808>
 400a8d8:	02810074 	movhi	r10,1025
 400a8dc:	5294e504 	addi	r10,r10,21396
 400a8e0:	d9001b17 	ldw	r4,108(sp)
 400a8e4:	da802415 	stw	r10,144(sp)
 400a8e8:	382b883a 	mov	r21,r7
 400a8ec:	050001c4 	movi	r20,7
 400a8f0:	df002017 	ldw	fp,128(sp)
 400a8f4:	00000506 	br	400a90c <___vfiprintf_internal_r+0xdd8>
 400a8f8:	21400084 	addi	r5,r4,2
 400a8fc:	42000204 	addi	r8,r8,8
 400a900:	1809883a 	mov	r4,r3
 400a904:	9cfffc04 	addi	r19,r19,-16
 400a908:	acffc40e 	bge	r21,r19,400a81c <__reset+0xfa81a81c>
 400a90c:	10800404 	addi	r2,r2,16
 400a910:	20c00044 	addi	r3,r4,1
 400a914:	45800015 	stw	r22,0(r8)
 400a918:	45400115 	stw	r21,4(r8)
 400a91c:	d8801c15 	stw	r2,112(sp)
 400a920:	d8c01b15 	stw	r3,108(sp)
 400a924:	a0fff40e 	bge	r20,r3,400a8f8 <__reset+0xfa81a8f8>
 400a928:	1000041e 	bne	r2,zero,400a93c <___vfiprintf_internal_r+0xe08>
 400a92c:	01400044 	movi	r5,1
 400a930:	0009883a 	mov	r4,zero
 400a934:	d811883a 	mov	r8,sp
 400a938:	003ff206 	br	400a904 <__reset+0xfa81a904>
 400a93c:	d9402117 	ldw	r5,132(sp)
 400a940:	d9801a04 	addi	r6,sp,104
 400a944:	e009883a 	mov	r4,fp
 400a948:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400a94c:	103fcd1e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400a950:	d9001b17 	ldw	r4,108(sp)
 400a954:	d8801c17 	ldw	r2,112(sp)
 400a958:	d811883a 	mov	r8,sp
 400a95c:	21400044 	addi	r5,r4,1
 400a960:	003fe806 	br	400a904 <__reset+0xfa81a904>
 400a964:	d9402117 	ldw	r5,132(sp)
 400a968:	d9002017 	ldw	r4,128(sp)
 400a96c:	d9801a04 	addi	r6,sp,104
 400a970:	d9c02b15 	stw	r7,172(sp)
 400a974:	db402a15 	stw	r13,168(sp)
 400a978:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400a97c:	d9c02b17 	ldw	r7,172(sp)
 400a980:	db402a17 	ldw	r13,168(sp)
 400a984:	103fbf1e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400a988:	d9401b17 	ldw	r5,108(sp)
 400a98c:	d8801c17 	ldw	r2,112(sp)
 400a990:	d811883a 	mov	r8,sp
 400a994:	29800044 	addi	r6,r5,1
 400a998:	003dc406 	br	400a0ac <__reset+0xfa81a0ac>
 400a99c:	1000d21e 	bne	r2,zero,400ace8 <___vfiprintf_internal_r+0x11b4>
 400a9a0:	d8c01d87 	ldb	r3,118(sp)
 400a9a4:	18009526 	beq	r3,zero,400abfc <___vfiprintf_internal_r+0x10c8>
 400a9a8:	00800044 	movi	r2,1
 400a9ac:	d8c01d84 	addi	r3,sp,118
 400a9b0:	1009883a 	mov	r4,r2
 400a9b4:	d8c00015 	stw	r3,0(sp)
 400a9b8:	d8800115 	stw	r2,4(sp)
 400a9bc:	d811883a 	mov	r8,sp
 400a9c0:	200b883a 	mov	r5,r4
 400a9c4:	42000204 	addi	r8,r8,8
 400a9c8:	21000044 	addi	r4,r4,1
 400a9cc:	003d9706 	br	400a02c <__reset+0xfa81a02c>
 400a9d0:	d9001d04 	addi	r4,sp,116
 400a9d4:	00800084 	movi	r2,2
 400a9d8:	d9000015 	stw	r4,0(sp)
 400a9dc:	d8800115 	stw	r2,4(sp)
 400a9e0:	1809883a 	mov	r4,r3
 400a9e4:	d811883a 	mov	r8,sp
 400a9e8:	200b883a 	mov	r5,r4
 400a9ec:	42000204 	addi	r8,r8,8
 400a9f0:	21000044 	addi	r4,r4,1
 400a9f4:	003f4e06 	br	400a730 <__reset+0xfa81a730>
 400a9f8:	d8001d85 	stb	zero,118(sp)
 400a9fc:	48005016 	blt	r9,zero,400ab40 <___vfiprintf_internal_r+0x100c>
 400aa00:	00ffdfc4 	movi	r3,-129
 400aa04:	94c4b03a 	or	r2,r18,r19
 400aa08:	a0e8703a 	and	r20,r20,r3
 400aa0c:	103d4426 	beq	r2,zero,4009f20 <__reset+0xfa819f20>
 400aa10:	0039883a 	mov	fp,zero
 400aa14:	d9002617 	ldw	r4,152(sp)
 400aa18:	dd401a04 	addi	r21,sp,104
 400aa1c:	908003cc 	andi	r2,r18,15
 400aa20:	9806973a 	slli	r3,r19,28
 400aa24:	2085883a 	add	r2,r4,r2
 400aa28:	9024d13a 	srli	r18,r18,4
 400aa2c:	10800003 	ldbu	r2,0(r2)
 400aa30:	9826d13a 	srli	r19,r19,4
 400aa34:	ad7fffc4 	addi	r21,r21,-1
 400aa38:	1ca4b03a 	or	r18,r3,r18
 400aa3c:	a8800005 	stb	r2,0(r21)
 400aa40:	94c4b03a 	or	r2,r18,r19
 400aa44:	103ff51e 	bne	r2,zero,400aa1c <__reset+0xfa81aa1c>
 400aa48:	003e5906 	br	400a3b0 <__reset+0xfa81a3b0>
 400aa4c:	d9402117 	ldw	r5,132(sp)
 400aa50:	d9002017 	ldw	r4,128(sp)
 400aa54:	d9801a04 	addi	r6,sp,104
 400aa58:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400aa5c:	103f891e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400aa60:	d8801c17 	ldw	r2,112(sp)
 400aa64:	d811883a 	mov	r8,sp
 400aa68:	003f9506 	br	400a8c0 <__reset+0xfa81a8c0>
 400aa6c:	d9402117 	ldw	r5,132(sp)
 400aa70:	d9002017 	ldw	r4,128(sp)
 400aa74:	d9801a04 	addi	r6,sp,104
 400aa78:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400aa7c:	103f811e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400aa80:	d811883a 	mov	r8,sp
 400aa84:	003ced06 	br	4009e3c <__reset+0xfa819e3c>
 400aa88:	d9402117 	ldw	r5,132(sp)
 400aa8c:	d9002017 	ldw	r4,128(sp)
 400aa90:	d9801a04 	addi	r6,sp,104
 400aa94:	da402c15 	stw	r9,176(sp)
 400aa98:	db802a15 	stw	r14,168(sp)
 400aa9c:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400aaa0:	da402c17 	ldw	r9,176(sp)
 400aaa4:	db802a17 	ldw	r14,168(sp)
 400aaa8:	103f761e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400aaac:	d9401b17 	ldw	r5,108(sp)
 400aab0:	d8801c17 	ldw	r2,112(sp)
 400aab4:	d811883a 	mov	r8,sp
 400aab8:	29000044 	addi	r4,r5,1
 400aabc:	003d5b06 	br	400a02c <__reset+0xfa81a02c>
 400aac0:	d9402117 	ldw	r5,132(sp)
 400aac4:	d9002017 	ldw	r4,128(sp)
 400aac8:	d9801a04 	addi	r6,sp,104
 400aacc:	da402c15 	stw	r9,176(sp)
 400aad0:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400aad4:	da402c17 	ldw	r9,176(sp)
 400aad8:	103f6a1e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400aadc:	d9401b17 	ldw	r5,108(sp)
 400aae0:	d8801c17 	ldw	r2,112(sp)
 400aae4:	d811883a 	mov	r8,sp
 400aae8:	29000044 	addi	r4,r5,1
 400aaec:	003f1006 	br	400a730 <__reset+0xfa81a730>
 400aaf0:	1000c31e 	bne	r2,zero,400ae00 <___vfiprintf_internal_r+0x12cc>
 400aaf4:	01000044 	movi	r4,1
 400aaf8:	000b883a 	mov	r5,zero
 400aafc:	d811883a 	mov	r8,sp
 400ab00:	003f0d06 	br	400a738 <__reset+0xfa81a738>
 400ab04:	d9402117 	ldw	r5,132(sp)
 400ab08:	d9002017 	ldw	r4,128(sp)
 400ab0c:	d9801a04 	addi	r6,sp,104
 400ab10:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400ab14:	103f5b1e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400ab18:	d9001b17 	ldw	r4,108(sp)
 400ab1c:	d8801c17 	ldw	r2,112(sp)
 400ab20:	d811883a 	mov	r8,sp
 400ab24:	21000044 	addi	r4,r4,1
 400ab28:	003d8006 	br	400a12c <__reset+0xfa81a12c>
 400ab2c:	01010074 	movhi	r4,1025
 400ab30:	21148004 	addi	r4,r4,20992
 400ab34:	d9002615 	stw	r4,152(sp)
 400ab38:	d8c02215 	stw	r3,136(sp)
 400ab3c:	1029883a 	mov	r20,r2
 400ab40:	94c4b03a 	or	r2,r18,r19
 400ab44:	103fb21e 	bne	r2,zero,400aa10 <__reset+0xfa81aa10>
 400ab48:	0039883a 	mov	fp,zero
 400ab4c:	00800084 	movi	r2,2
 400ab50:	003e6b06 	br	400a500 <__reset+0xfa81a500>
 400ab54:	da802217 	ldw	r10,136(sp)
 400ab58:	d8001d85 	stb	zero,118(sp)
 400ab5c:	0027883a 	mov	r19,zero
 400ab60:	50800104 	addi	r2,r10,4
 400ab64:	54800017 	ldw	r18,0(r10)
 400ab68:	483e6016 	blt	r9,zero,400a4ec <__reset+0xfa81a4ec>
 400ab6c:	00ffdfc4 	movi	r3,-129
 400ab70:	d8802215 	stw	r2,136(sp)
 400ab74:	a0e8703a 	and	r20,r20,r3
 400ab78:	0039883a 	mov	fp,zero
 400ab7c:	903ebb26 	beq	r18,zero,400a66c <__reset+0xfa81a66c>
 400ab80:	00800244 	movi	r2,9
 400ab84:	14bdee36 	bltu	r2,r18,400a340 <__reset+0xfa81a340>
 400ab88:	003eba06 	br	400a674 <__reset+0xfa81a674>
 400ab8c:	00800c04 	movi	r2,48
 400ab90:	d8c01d45 	stb	r3,117(sp)
 400ab94:	d8801d05 	stb	r2,116(sp)
 400ab98:	d8001d85 	stb	zero,118(sp)
 400ab9c:	a0c00094 	ori	r3,r20,2
 400aba0:	4800a916 	blt	r9,zero,400ae48 <___vfiprintf_internal_r+0x1314>
 400aba4:	00bfdfc4 	movi	r2,-129
 400aba8:	a096703a 	and	r11,r20,r2
 400abac:	5d000094 	ori	r20,r11,2
 400abb0:	0039883a 	mov	fp,zero
 400abb4:	003f9706 	br	400aa14 <__reset+0xfa81aa14>
 400abb8:	8025883a 	mov	r18,r16
 400abbc:	003c2e06 	br	4009c78 <__reset+0xfa819c78>
 400abc0:	00810074 	movhi	r2,1025
 400abc4:	10948004 	addi	r2,r2,20992
 400abc8:	0039883a 	mov	fp,zero
 400abcc:	d8802615 	stw	r2,152(sp)
 400abd0:	003f9006 	br	400aa14 <__reset+0xfa81aa14>
 400abd4:	04a5c83a 	sub	r18,zero,r18
 400abd8:	07000b44 	movi	fp,45
 400abdc:	9004c03a 	cmpne	r2,r18,zero
 400abe0:	04e7c83a 	sub	r19,zero,r19
 400abe4:	df001d85 	stb	fp,118(sp)
 400abe8:	98a7c83a 	sub	r19,r19,r2
 400abec:	48009f16 	blt	r9,zero,400ae6c <___vfiprintf_internal_r+0x1338>
 400abf0:	00bfdfc4 	movi	r2,-129
 400abf4:	a0a8703a 	and	r20,r20,r2
 400abf8:	003dd006 	br	400a33c <__reset+0xfa81a33c>
 400abfc:	70004c26 	beq	r14,zero,400ad30 <___vfiprintf_internal_r+0x11fc>
 400ac00:	00800084 	movi	r2,2
 400ac04:	d8c01d04 	addi	r3,sp,116
 400ac08:	d8c00015 	stw	r3,0(sp)
 400ac0c:	d8800115 	stw	r2,4(sp)
 400ac10:	01000044 	movi	r4,1
 400ac14:	d811883a 	mov	r8,sp
 400ac18:	003f7306 	br	400a9e8 <__reset+0xfa81a9e8>
 400ac1c:	a080100c 	andi	r2,r20,64
 400ac20:	da802217 	ldw	r10,136(sp)
 400ac24:	103e0626 	beq	r2,zero,400a440 <__reset+0xfa81a440>
 400ac28:	5480000f 	ldh	r18,0(r10)
 400ac2c:	52800104 	addi	r10,r10,4
 400ac30:	da802215 	stw	r10,136(sp)
 400ac34:	9027d7fa 	srai	r19,r18,31
 400ac38:	9805883a 	mov	r2,r19
 400ac3c:	003db806 	br	400a320 <__reset+0xfa81a320>
 400ac40:	a080040c 	andi	r2,r20,16
 400ac44:	1000091e 	bne	r2,zero,400ac6c <___vfiprintf_internal_r+0x1138>
 400ac48:	a2c0100c 	andi	r11,r20,64
 400ac4c:	58000726 	beq	r11,zero,400ac6c <___vfiprintf_internal_r+0x1138>
 400ac50:	da802217 	ldw	r10,136(sp)
 400ac54:	50800017 	ldw	r2,0(r10)
 400ac58:	52800104 	addi	r10,r10,4
 400ac5c:	da802215 	stw	r10,136(sp)
 400ac60:	da802317 	ldw	r10,140(sp)
 400ac64:	1280000d 	sth	r10,0(r2)
 400ac68:	003be706 	br	4009c08 <__reset+0xfa819c08>
 400ac6c:	da802217 	ldw	r10,136(sp)
 400ac70:	50800017 	ldw	r2,0(r10)
 400ac74:	52800104 	addi	r10,r10,4
 400ac78:	da802215 	stw	r10,136(sp)
 400ac7c:	da802317 	ldw	r10,140(sp)
 400ac80:	12800015 	stw	r10,0(r2)
 400ac84:	003be006 	br	4009c08 <__reset+0xfa819c08>
 400ac88:	a080100c 	andi	r2,r20,64
 400ac8c:	da802217 	ldw	r10,136(sp)
 400ac90:	10003026 	beq	r2,zero,400ad54 <___vfiprintf_internal_r+0x1220>
 400ac94:	5480000b 	ldhu	r18,0(r10)
 400ac98:	52800104 	addi	r10,r10,4
 400ac9c:	0027883a 	mov	r19,zero
 400aca0:	da802215 	stw	r10,136(sp)
 400aca4:	003d8006 	br	400a2a8 <__reset+0xfa81a2a8>
 400aca8:	80c00007 	ldb	r3,0(r16)
 400acac:	003c0006 	br	4009cb0 <__reset+0xfa819cb0>
 400acb0:	a080100c 	andi	r2,r20,64
 400acb4:	d8001d85 	stb	zero,118(sp)
 400acb8:	da802217 	ldw	r10,136(sp)
 400acbc:	1000201e 	bne	r2,zero,400ad40 <___vfiprintf_internal_r+0x120c>
 400acc0:	50800104 	addi	r2,r10,4
 400acc4:	54800017 	ldw	r18,0(r10)
 400acc8:	0027883a 	mov	r19,zero
 400accc:	483def0e 	bge	r9,zero,400a48c <__reset+0xfa81a48c>
 400acd0:	94c6b03a 	or	r3,r18,r19
 400acd4:	d8802215 	stw	r2,136(sp)
 400acd8:	183d4e1e 	bne	r3,zero,400a214 <__reset+0xfa81a214>
 400acdc:	0039883a 	mov	fp,zero
 400ace0:	0005883a 	mov	r2,zero
 400ace4:	003e0606 	br	400a500 <__reset+0xfa81a500>
 400ace8:	d9402117 	ldw	r5,132(sp)
 400acec:	d9002017 	ldw	r4,128(sp)
 400acf0:	d9801a04 	addi	r6,sp,104
 400acf4:	da402c15 	stw	r9,176(sp)
 400acf8:	db802a15 	stw	r14,168(sp)
 400acfc:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400ad00:	da402c17 	ldw	r9,176(sp)
 400ad04:	db802a17 	ldw	r14,168(sp)
 400ad08:	103ede1e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400ad0c:	d9401b17 	ldw	r5,108(sp)
 400ad10:	d8801c17 	ldw	r2,112(sp)
 400ad14:	d811883a 	mov	r8,sp
 400ad18:	29000044 	addi	r4,r5,1
 400ad1c:	003e7406 	br	400a6f0 <__reset+0xfa81a6f0>
 400ad20:	00bfffc4 	movi	r2,-1
 400ad24:	003c5806 	br	4009e88 <__reset+0xfa819e88>
 400ad28:	d811883a 	mov	r8,sp
 400ad2c:	003ee806 	br	400a8d0 <__reset+0xfa81a8d0>
 400ad30:	000b883a 	mov	r5,zero
 400ad34:	01000044 	movi	r4,1
 400ad38:	d811883a 	mov	r8,sp
 400ad3c:	003e7c06 	br	400a730 <__reset+0xfa81a730>
 400ad40:	50800104 	addi	r2,r10,4
 400ad44:	5480000b 	ldhu	r18,0(r10)
 400ad48:	0027883a 	mov	r19,zero
 400ad4c:	483dcf0e 	bge	r9,zero,400a48c <__reset+0xfa81a48c>
 400ad50:	003fdf06 	br	400acd0 <__reset+0xfa81acd0>
 400ad54:	54800017 	ldw	r18,0(r10)
 400ad58:	52800104 	addi	r10,r10,4
 400ad5c:	0027883a 	mov	r19,zero
 400ad60:	da802215 	stw	r10,136(sp)
 400ad64:	003d5006 	br	400a2a8 <__reset+0xfa81a2a8>
 400ad68:	50800104 	addi	r2,r10,4
 400ad6c:	5480000b 	ldhu	r18,0(r10)
 400ad70:	0027883a 	mov	r19,zero
 400ad74:	483f7d0e 	bge	r9,zero,400ab6c <__reset+0xfa81ab6c>
 400ad78:	003ddc06 	br	400a4ec <__reset+0xfa81a4ec>
 400ad7c:	d8c02215 	stw	r3,136(sp)
 400ad80:	0039883a 	mov	fp,zero
 400ad84:	003ddb06 	br	400a4f4 <__reset+0xfa81a4f4>
 400ad88:	02810074 	movhi	r10,1025
 400ad8c:	5294e104 	addi	r10,r10,21380
 400ad90:	da802415 	stw	r10,144(sp)
 400ad94:	003e8306 	br	400a7a4 <__reset+0xfa81a7a4>
 400ad98:	d8801c17 	ldw	r2,112(sp)
 400ad9c:	dd002117 	ldw	r20,132(sp)
 400ada0:	103eb926 	beq	r2,zero,400a888 <__reset+0xfa81a888>
 400ada4:	d9002017 	ldw	r4,128(sp)
 400ada8:	d9801a04 	addi	r6,sp,104
 400adac:	a00b883a 	mov	r5,r20
 400adb0:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400adb4:	003eb406 	br	400a888 <__reset+0xfa81a888>
 400adb8:	80c00043 	ldbu	r3,1(r16)
 400adbc:	a5000814 	ori	r20,r20,32
 400adc0:	84000044 	addi	r16,r16,1
 400adc4:	18c03fcc 	andi	r3,r3,255
 400adc8:	18c0201c 	xori	r3,r3,128
 400adcc:	18ffe004 	addi	r3,r3,-128
 400add0:	003bb706 	br	4009cb0 <__reset+0xfa819cb0>
 400add4:	a809883a 	mov	r4,r21
 400add8:	d8c02a15 	stw	r3,168(sp)
 400addc:	da002b15 	stw	r8,172(sp)
 400ade0:	40025d00 	call	40025d0 <strlen>
 400ade4:	d8c02a17 	ldw	r3,168(sp)
 400ade8:	1027883a 	mov	r19,r2
 400adec:	df001d83 	ldbu	fp,118(sp)
 400adf0:	d8c02215 	stw	r3,136(sp)
 400adf4:	0013883a 	mov	r9,zero
 400adf8:	da002b17 	ldw	r8,172(sp)
 400adfc:	003c4d06 	br	4009f34 <__reset+0xfa819f34>
 400ae00:	d9402117 	ldw	r5,132(sp)
 400ae04:	d9002017 	ldw	r4,128(sp)
 400ae08:	d9801a04 	addi	r6,sp,104
 400ae0c:	da402c15 	stw	r9,176(sp)
 400ae10:	4009a200 	call	4009a20 <__sprint_r.part.0>
 400ae14:	da402c17 	ldw	r9,176(sp)
 400ae18:	103e9a1e 	bne	r2,zero,400a884 <__reset+0xfa81a884>
 400ae1c:	d9401b17 	ldw	r5,108(sp)
 400ae20:	d8801c17 	ldw	r2,112(sp)
 400ae24:	d811883a 	mov	r8,sp
 400ae28:	29000044 	addi	r4,r5,1
 400ae2c:	003e4206 	br	400a738 <__reset+0xfa81a738>
 400ae30:	d9401b17 	ldw	r5,108(sp)
 400ae34:	01010074 	movhi	r4,1025
 400ae38:	2114e504 	addi	r4,r4,21396
 400ae3c:	d9002415 	stw	r4,144(sp)
 400ae40:	29400044 	addi	r5,r5,1
 400ae44:	003c6d06 	br	4009ffc <__reset+0xfa819ffc>
 400ae48:	0039883a 	mov	fp,zero
 400ae4c:	00800084 	movi	r2,2
 400ae50:	10803fcc 	andi	r2,r2,255
 400ae54:	01000044 	movi	r4,1
 400ae58:	11001e26 	beq	r2,r4,400aed4 <___vfiprintf_internal_r+0x13a0>
 400ae5c:	01000084 	movi	r4,2
 400ae60:	11001e1e 	bne	r2,r4,400aedc <___vfiprintf_internal_r+0x13a8>
 400ae64:	1829883a 	mov	r20,r3
 400ae68:	003eea06 	br	400aa14 <__reset+0xfa81aa14>
 400ae6c:	a007883a 	mov	r3,r20
 400ae70:	00800044 	movi	r2,1
 400ae74:	003ff606 	br	400ae50 <__reset+0xfa81ae50>
 400ae78:	00800184 	movi	r2,6
 400ae7c:	1240012e 	bgeu	r2,r9,400ae84 <___vfiprintf_internal_r+0x1350>
 400ae80:	1013883a 	mov	r9,r2
 400ae84:	4827883a 	mov	r19,r9
 400ae88:	4825883a 	mov	r18,r9
 400ae8c:	48001516 	blt	r9,zero,400aee4 <___vfiprintf_internal_r+0x13b0>
 400ae90:	05410074 	movhi	r21,1025
 400ae94:	d8c02215 	stw	r3,136(sp)
 400ae98:	ad548504 	addi	r21,r21,21012
 400ae9c:	003d1406 	br	400a2f0 <__reset+0xfa81a2f0>
 400aea0:	02810074 	movhi	r10,1025
 400aea4:	5294e104 	addi	r10,r10,21380
 400aea8:	da802415 	stw	r10,144(sp)
 400aeac:	200d883a 	mov	r6,r4
 400aeb0:	003c9106 	br	400a0f8 <__reset+0xfa81a0f8>
 400aeb4:	5021883a 	mov	r16,r10
 400aeb8:	0013883a 	mov	r9,zero
 400aebc:	003b7d06 	br	4009cb4 <__reset+0xfa819cb4>
 400aec0:	4827883a 	mov	r19,r9
 400aec4:	df001d83 	ldbu	fp,118(sp)
 400aec8:	d8c02215 	stw	r3,136(sp)
 400aecc:	0013883a 	mov	r9,zero
 400aed0:	003c1806 	br	4009f34 <__reset+0xfa819f34>
 400aed4:	1829883a 	mov	r20,r3
 400aed8:	003d1806 	br	400a33c <__reset+0xfa81a33c>
 400aedc:	1829883a 	mov	r20,r3
 400aee0:	003ccd06 	br	400a218 <__reset+0xfa81a218>
 400aee4:	0025883a 	mov	r18,zero
 400aee8:	003fe906 	br	400ae90 <__reset+0xfa81ae90>
 400aeec:	d8802217 	ldw	r2,136(sp)
 400aef0:	80c00043 	ldbu	r3,1(r16)
 400aef4:	5021883a 	mov	r16,r10
 400aef8:	12400017 	ldw	r9,0(r2)
 400aefc:	10800104 	addi	r2,r2,4
 400af00:	d8802215 	stw	r2,136(sp)
 400af04:	483faf0e 	bge	r9,zero,400adc4 <__reset+0xfa81adc4>
 400af08:	18c03fcc 	andi	r3,r3,255
 400af0c:	18c0201c 	xori	r3,r3,128
 400af10:	027fffc4 	movi	r9,-1
 400af14:	18ffe004 	addi	r3,r3,-128
 400af18:	003b6506 	br	4009cb0 <__reset+0xfa819cb0>
 400af1c:	d9c01d85 	stb	r7,118(sp)
 400af20:	003ca006 	br	400a1a4 <__reset+0xfa81a1a4>
 400af24:	d9c01d85 	stb	r7,118(sp)
 400af28:	003cad06 	br	400a1e0 <__reset+0xfa81a1e0>
 400af2c:	d9c01d85 	stb	r7,118(sp)
 400af30:	003d7d06 	br	400a528 <__reset+0xfa81a528>
 400af34:	d9c01d85 	stb	r7,118(sp)
 400af38:	003d5f06 	br	400a4b8 <__reset+0xfa81a4b8>
 400af3c:	a080004c 	andi	r2,r20,1
 400af40:	0039883a 	mov	fp,zero
 400af44:	10000526 	beq	r2,zero,400af5c <___vfiprintf_internal_r+0x1428>
 400af48:	00800c04 	movi	r2,48
 400af4c:	d88019c5 	stb	r2,103(sp)
 400af50:	dcc02717 	ldw	r19,156(sp)
 400af54:	dd4019c4 	addi	r21,sp,103
 400af58:	003bf606 	br	4009f34 <__reset+0xfa819f34>
 400af5c:	0027883a 	mov	r19,zero
 400af60:	dd401a04 	addi	r21,sp,104
 400af64:	003bf306 	br	4009f34 <__reset+0xfa819f34>
 400af68:	d9c01d85 	stb	r7,118(sp)
 400af6c:	003dc806 	br	400a690 <__reset+0xfa81a690>
 400af70:	d9c01d85 	stb	r7,118(sp)
 400af74:	003d3a06 	br	400a460 <__reset+0xfa81a460>
 400af78:	d9c01d85 	stb	r7,118(sp)
 400af7c:	003d2a06 	br	400a428 <__reset+0xfa81a428>
 400af80:	d9c01d85 	stb	r7,118(sp)
 400af84:	003cde06 	br	400a300 <__reset+0xfa81a300>
 400af88:	d9c01d85 	stb	r7,118(sp)
 400af8c:	003cbc06 	br	400a280 <__reset+0xfa81a280>

0400af90 <__vfiprintf_internal>:
 400af90:	00810074 	movhi	r2,1025
 400af94:	109d0604 	addi	r2,r2,29720
 400af98:	300f883a 	mov	r7,r6
 400af9c:	280d883a 	mov	r6,r5
 400afa0:	200b883a 	mov	r5,r4
 400afa4:	11000017 	ldw	r4,0(r2)
 400afa8:	4009b341 	jmpi	4009b34 <___vfiprintf_internal_r>

0400afac <__sbprintf>:
 400afac:	2880030b 	ldhu	r2,12(r5)
 400afb0:	2ac01917 	ldw	r11,100(r5)
 400afb4:	2a80038b 	ldhu	r10,14(r5)
 400afb8:	2a400717 	ldw	r9,28(r5)
 400afbc:	2a000917 	ldw	r8,36(r5)
 400afc0:	defee204 	addi	sp,sp,-1144
 400afc4:	00c10004 	movi	r3,1024
 400afc8:	dc011a15 	stw	r16,1128(sp)
 400afcc:	10bfff4c 	andi	r2,r2,65533
 400afd0:	2821883a 	mov	r16,r5
 400afd4:	d8cb883a 	add	r5,sp,r3
 400afd8:	dc811c15 	stw	r18,1136(sp)
 400afdc:	dc411b15 	stw	r17,1132(sp)
 400afe0:	dfc11d15 	stw	ra,1140(sp)
 400afe4:	2025883a 	mov	r18,r4
 400afe8:	d881030d 	sth	r2,1036(sp)
 400afec:	dac11915 	stw	r11,1124(sp)
 400aff0:	da81038d 	sth	r10,1038(sp)
 400aff4:	da410715 	stw	r9,1052(sp)
 400aff8:	da010915 	stw	r8,1060(sp)
 400affc:	dec10015 	stw	sp,1024(sp)
 400b000:	dec10415 	stw	sp,1040(sp)
 400b004:	d8c10215 	stw	r3,1032(sp)
 400b008:	d8c10515 	stw	r3,1044(sp)
 400b00c:	d8010615 	stw	zero,1048(sp)
 400b010:	4009b340 	call	4009b34 <___vfiprintf_internal_r>
 400b014:	1023883a 	mov	r17,r2
 400b018:	10000416 	blt	r2,zero,400b02c <__sbprintf+0x80>
 400b01c:	d9410004 	addi	r5,sp,1024
 400b020:	9009883a 	mov	r4,r18
 400b024:	40065300 	call	4006530 <_fflush_r>
 400b028:	10000d1e 	bne	r2,zero,400b060 <__sbprintf+0xb4>
 400b02c:	d881030b 	ldhu	r2,1036(sp)
 400b030:	1080100c 	andi	r2,r2,64
 400b034:	10000326 	beq	r2,zero,400b044 <__sbprintf+0x98>
 400b038:	8080030b 	ldhu	r2,12(r16)
 400b03c:	10801014 	ori	r2,r2,64
 400b040:	8080030d 	sth	r2,12(r16)
 400b044:	8805883a 	mov	r2,r17
 400b048:	dfc11d17 	ldw	ra,1140(sp)
 400b04c:	dc811c17 	ldw	r18,1136(sp)
 400b050:	dc411b17 	ldw	r17,1132(sp)
 400b054:	dc011a17 	ldw	r16,1128(sp)
 400b058:	dec11e04 	addi	sp,sp,1144
 400b05c:	f800283a 	ret
 400b060:	047fffc4 	movi	r17,-1
 400b064:	003ff106 	br	400b02c <__reset+0xfa81b02c>

0400b068 <_write_r>:
 400b068:	defffd04 	addi	sp,sp,-12
 400b06c:	2805883a 	mov	r2,r5
 400b070:	dc000015 	stw	r16,0(sp)
 400b074:	04010074 	movhi	r16,1025
 400b078:	dc400115 	stw	r17,4(sp)
 400b07c:	300b883a 	mov	r5,r6
 400b080:	841d2104 	addi	r16,r16,29828
 400b084:	2023883a 	mov	r17,r4
 400b088:	380d883a 	mov	r6,r7
 400b08c:	1009883a 	mov	r4,r2
 400b090:	dfc00215 	stw	ra,8(sp)
 400b094:	80000015 	stw	zero,0(r16)
 400b098:	400f9680 	call	400f968 <write>
 400b09c:	00ffffc4 	movi	r3,-1
 400b0a0:	10c00526 	beq	r2,r3,400b0b8 <_write_r+0x50>
 400b0a4:	dfc00217 	ldw	ra,8(sp)
 400b0a8:	dc400117 	ldw	r17,4(sp)
 400b0ac:	dc000017 	ldw	r16,0(sp)
 400b0b0:	dec00304 	addi	sp,sp,12
 400b0b4:	f800283a 	ret
 400b0b8:	80c00017 	ldw	r3,0(r16)
 400b0bc:	183ff926 	beq	r3,zero,400b0a4 <__reset+0xfa81b0a4>
 400b0c0:	88c00015 	stw	r3,0(r17)
 400b0c4:	003ff706 	br	400b0a4 <__reset+0xfa81b0a4>

0400b0c8 <_close_r>:
 400b0c8:	defffd04 	addi	sp,sp,-12
 400b0cc:	dc000015 	stw	r16,0(sp)
 400b0d0:	04010074 	movhi	r16,1025
 400b0d4:	dc400115 	stw	r17,4(sp)
 400b0d8:	841d2104 	addi	r16,r16,29828
 400b0dc:	2023883a 	mov	r17,r4
 400b0e0:	2809883a 	mov	r4,r5
 400b0e4:	dfc00215 	stw	ra,8(sp)
 400b0e8:	80000015 	stw	zero,0(r16)
 400b0ec:	400edd00 	call	400edd0 <close>
 400b0f0:	00ffffc4 	movi	r3,-1
 400b0f4:	10c00526 	beq	r2,r3,400b10c <_close_r+0x44>
 400b0f8:	dfc00217 	ldw	ra,8(sp)
 400b0fc:	dc400117 	ldw	r17,4(sp)
 400b100:	dc000017 	ldw	r16,0(sp)
 400b104:	dec00304 	addi	sp,sp,12
 400b108:	f800283a 	ret
 400b10c:	80c00017 	ldw	r3,0(r16)
 400b110:	183ff926 	beq	r3,zero,400b0f8 <__reset+0xfa81b0f8>
 400b114:	88c00015 	stw	r3,0(r17)
 400b118:	003ff706 	br	400b0f8 <__reset+0xfa81b0f8>

0400b11c <_calloc_r>:
 400b11c:	298b383a 	mul	r5,r5,r6
 400b120:	defffe04 	addi	sp,sp,-8
 400b124:	dfc00115 	stw	ra,4(sp)
 400b128:	dc000015 	stw	r16,0(sp)
 400b12c:	400766c0 	call	400766c <_malloc_r>
 400b130:	10002926 	beq	r2,zero,400b1d8 <_calloc_r+0xbc>
 400b134:	11bfff17 	ldw	r6,-4(r2)
 400b138:	1021883a 	mov	r16,r2
 400b13c:	00bfff04 	movi	r2,-4
 400b140:	308c703a 	and	r6,r6,r2
 400b144:	00c00904 	movi	r3,36
 400b148:	308d883a 	add	r6,r6,r2
 400b14c:	19801636 	bltu	r3,r6,400b1a8 <_calloc_r+0x8c>
 400b150:	008004c4 	movi	r2,19
 400b154:	11800b2e 	bgeu	r2,r6,400b184 <_calloc_r+0x68>
 400b158:	80000015 	stw	zero,0(r16)
 400b15c:	80000115 	stw	zero,4(r16)
 400b160:	008006c4 	movi	r2,27
 400b164:	11801a2e 	bgeu	r2,r6,400b1d0 <_calloc_r+0xb4>
 400b168:	80000215 	stw	zero,8(r16)
 400b16c:	80000315 	stw	zero,12(r16)
 400b170:	30c0151e 	bne	r6,r3,400b1c8 <_calloc_r+0xac>
 400b174:	80000415 	stw	zero,16(r16)
 400b178:	80800604 	addi	r2,r16,24
 400b17c:	80000515 	stw	zero,20(r16)
 400b180:	00000106 	br	400b188 <_calloc_r+0x6c>
 400b184:	8005883a 	mov	r2,r16
 400b188:	10000015 	stw	zero,0(r2)
 400b18c:	10000115 	stw	zero,4(r2)
 400b190:	10000215 	stw	zero,8(r2)
 400b194:	8005883a 	mov	r2,r16
 400b198:	dfc00117 	ldw	ra,4(sp)
 400b19c:	dc000017 	ldw	r16,0(sp)
 400b1a0:	dec00204 	addi	sp,sp,8
 400b1a4:	f800283a 	ret
 400b1a8:	000b883a 	mov	r5,zero
 400b1ac:	8009883a 	mov	r4,r16
 400b1b0:	40080b80 	call	40080b8 <memset>
 400b1b4:	8005883a 	mov	r2,r16
 400b1b8:	dfc00117 	ldw	ra,4(sp)
 400b1bc:	dc000017 	ldw	r16,0(sp)
 400b1c0:	dec00204 	addi	sp,sp,8
 400b1c4:	f800283a 	ret
 400b1c8:	80800404 	addi	r2,r16,16
 400b1cc:	003fee06 	br	400b188 <__reset+0xfa81b188>
 400b1d0:	80800204 	addi	r2,r16,8
 400b1d4:	003fec06 	br	400b188 <__reset+0xfa81b188>
 400b1d8:	0005883a 	mov	r2,zero
 400b1dc:	003fee06 	br	400b198 <__reset+0xfa81b198>

0400b1e0 <_fclose_r>:
 400b1e0:	28003926 	beq	r5,zero,400b2c8 <_fclose_r+0xe8>
 400b1e4:	defffc04 	addi	sp,sp,-16
 400b1e8:	dc400115 	stw	r17,4(sp)
 400b1ec:	dc000015 	stw	r16,0(sp)
 400b1f0:	dfc00315 	stw	ra,12(sp)
 400b1f4:	dc800215 	stw	r18,8(sp)
 400b1f8:	2023883a 	mov	r17,r4
 400b1fc:	2821883a 	mov	r16,r5
 400b200:	20000226 	beq	r4,zero,400b20c <_fclose_r+0x2c>
 400b204:	20800e17 	ldw	r2,56(r4)
 400b208:	10002726 	beq	r2,zero,400b2a8 <_fclose_r+0xc8>
 400b20c:	8080030f 	ldh	r2,12(r16)
 400b210:	1000071e 	bne	r2,zero,400b230 <_fclose_r+0x50>
 400b214:	0005883a 	mov	r2,zero
 400b218:	dfc00317 	ldw	ra,12(sp)
 400b21c:	dc800217 	ldw	r18,8(sp)
 400b220:	dc400117 	ldw	r17,4(sp)
 400b224:	dc000017 	ldw	r16,0(sp)
 400b228:	dec00404 	addi	sp,sp,16
 400b22c:	f800283a 	ret
 400b230:	800b883a 	mov	r5,r16
 400b234:	8809883a 	mov	r4,r17
 400b238:	40063140 	call	4006314 <__sflush_r>
 400b23c:	1025883a 	mov	r18,r2
 400b240:	80800b17 	ldw	r2,44(r16)
 400b244:	10000426 	beq	r2,zero,400b258 <_fclose_r+0x78>
 400b248:	81400717 	ldw	r5,28(r16)
 400b24c:	8809883a 	mov	r4,r17
 400b250:	103ee83a 	callr	r2
 400b254:	10001616 	blt	r2,zero,400b2b0 <_fclose_r+0xd0>
 400b258:	8080030b 	ldhu	r2,12(r16)
 400b25c:	1080200c 	andi	r2,r2,128
 400b260:	1000151e 	bne	r2,zero,400b2b8 <_fclose_r+0xd8>
 400b264:	81400c17 	ldw	r5,48(r16)
 400b268:	28000526 	beq	r5,zero,400b280 <_fclose_r+0xa0>
 400b26c:	80801004 	addi	r2,r16,64
 400b270:	28800226 	beq	r5,r2,400b27c <_fclose_r+0x9c>
 400b274:	8809883a 	mov	r4,r17
 400b278:	4006a800 	call	4006a80 <_free_r>
 400b27c:	80000c15 	stw	zero,48(r16)
 400b280:	81401117 	ldw	r5,68(r16)
 400b284:	28000326 	beq	r5,zero,400b294 <_fclose_r+0xb4>
 400b288:	8809883a 	mov	r4,r17
 400b28c:	4006a800 	call	4006a80 <_free_r>
 400b290:	80001115 	stw	zero,68(r16)
 400b294:	400691c0 	call	400691c <__sfp_lock_acquire>
 400b298:	8000030d 	sth	zero,12(r16)
 400b29c:	40069200 	call	4006920 <__sfp_lock_release>
 400b2a0:	9005883a 	mov	r2,r18
 400b2a4:	003fdc06 	br	400b218 <__reset+0xfa81b218>
 400b2a8:	400690c0 	call	400690c <__sinit>
 400b2ac:	003fd706 	br	400b20c <__reset+0xfa81b20c>
 400b2b0:	04bfffc4 	movi	r18,-1
 400b2b4:	003fe806 	br	400b258 <__reset+0xfa81b258>
 400b2b8:	81400417 	ldw	r5,16(r16)
 400b2bc:	8809883a 	mov	r4,r17
 400b2c0:	4006a800 	call	4006a80 <_free_r>
 400b2c4:	003fe706 	br	400b264 <__reset+0xfa81b264>
 400b2c8:	0005883a 	mov	r2,zero
 400b2cc:	f800283a 	ret

0400b2d0 <fclose>:
 400b2d0:	00810074 	movhi	r2,1025
 400b2d4:	109d0604 	addi	r2,r2,29720
 400b2d8:	200b883a 	mov	r5,r4
 400b2dc:	11000017 	ldw	r4,0(r2)
 400b2e0:	400b1e01 	jmpi	400b1e0 <_fclose_r>

0400b2e4 <__fputwc>:
 400b2e4:	defff804 	addi	sp,sp,-32
 400b2e8:	dcc00415 	stw	r19,16(sp)
 400b2ec:	dc800315 	stw	r18,12(sp)
 400b2f0:	dc000115 	stw	r16,4(sp)
 400b2f4:	dfc00715 	stw	ra,28(sp)
 400b2f8:	dd400615 	stw	r21,24(sp)
 400b2fc:	dd000515 	stw	r20,20(sp)
 400b300:	dc400215 	stw	r17,8(sp)
 400b304:	2027883a 	mov	r19,r4
 400b308:	2825883a 	mov	r18,r5
 400b30c:	3021883a 	mov	r16,r6
 400b310:	400745c0 	call	400745c <__locale_mb_cur_max>
 400b314:	00c00044 	movi	r3,1
 400b318:	10c03e26 	beq	r2,r3,400b414 <__fputwc+0x130>
 400b31c:	81c01704 	addi	r7,r16,92
 400b320:	900d883a 	mov	r6,r18
 400b324:	d80b883a 	mov	r5,sp
 400b328:	9809883a 	mov	r4,r19
 400b32c:	400b7b40 	call	400b7b4 <_wcrtomb_r>
 400b330:	1029883a 	mov	r20,r2
 400b334:	00bfffc4 	movi	r2,-1
 400b338:	a0802026 	beq	r20,r2,400b3bc <__fputwc+0xd8>
 400b33c:	d9400003 	ldbu	r5,0(sp)
 400b340:	a0001c26 	beq	r20,zero,400b3b4 <__fputwc+0xd0>
 400b344:	0023883a 	mov	r17,zero
 400b348:	05400284 	movi	r21,10
 400b34c:	00000906 	br	400b374 <__fputwc+0x90>
 400b350:	80800017 	ldw	r2,0(r16)
 400b354:	11400005 	stb	r5,0(r2)
 400b358:	80c00017 	ldw	r3,0(r16)
 400b35c:	18c00044 	addi	r3,r3,1
 400b360:	80c00015 	stw	r3,0(r16)
 400b364:	8c400044 	addi	r17,r17,1
 400b368:	dc45883a 	add	r2,sp,r17
 400b36c:	8d00112e 	bgeu	r17,r20,400b3b4 <__fputwc+0xd0>
 400b370:	11400003 	ldbu	r5,0(r2)
 400b374:	80c00217 	ldw	r3,8(r16)
 400b378:	18ffffc4 	addi	r3,r3,-1
 400b37c:	80c00215 	stw	r3,8(r16)
 400b380:	183ff30e 	bge	r3,zero,400b350 <__reset+0xfa81b350>
 400b384:	80800617 	ldw	r2,24(r16)
 400b388:	18801916 	blt	r3,r2,400b3f0 <__fputwc+0x10c>
 400b38c:	80800017 	ldw	r2,0(r16)
 400b390:	11400005 	stb	r5,0(r2)
 400b394:	80800017 	ldw	r2,0(r16)
 400b398:	10c00003 	ldbu	r3,0(r2)
 400b39c:	10800044 	addi	r2,r2,1
 400b3a0:	1d402326 	beq	r3,r21,400b430 <__fputwc+0x14c>
 400b3a4:	80800015 	stw	r2,0(r16)
 400b3a8:	8c400044 	addi	r17,r17,1
 400b3ac:	dc45883a 	add	r2,sp,r17
 400b3b0:	8d3fef36 	bltu	r17,r20,400b370 <__reset+0xfa81b370>
 400b3b4:	9005883a 	mov	r2,r18
 400b3b8:	00000406 	br	400b3cc <__fputwc+0xe8>
 400b3bc:	80c0030b 	ldhu	r3,12(r16)
 400b3c0:	a005883a 	mov	r2,r20
 400b3c4:	18c01014 	ori	r3,r3,64
 400b3c8:	80c0030d 	sth	r3,12(r16)
 400b3cc:	dfc00717 	ldw	ra,28(sp)
 400b3d0:	dd400617 	ldw	r21,24(sp)
 400b3d4:	dd000517 	ldw	r20,20(sp)
 400b3d8:	dcc00417 	ldw	r19,16(sp)
 400b3dc:	dc800317 	ldw	r18,12(sp)
 400b3e0:	dc400217 	ldw	r17,8(sp)
 400b3e4:	dc000117 	ldw	r16,4(sp)
 400b3e8:	dec00804 	addi	sp,sp,32
 400b3ec:	f800283a 	ret
 400b3f0:	800d883a 	mov	r6,r16
 400b3f4:	29403fcc 	andi	r5,r5,255
 400b3f8:	9809883a 	mov	r4,r19
 400b3fc:	400b65c0 	call	400b65c <__swbuf_r>
 400b400:	10bfffe0 	cmpeqi	r2,r2,-1
 400b404:	10803fcc 	andi	r2,r2,255
 400b408:	103fd626 	beq	r2,zero,400b364 <__reset+0xfa81b364>
 400b40c:	00bfffc4 	movi	r2,-1
 400b410:	003fee06 	br	400b3cc <__reset+0xfa81b3cc>
 400b414:	90ffffc4 	addi	r3,r18,-1
 400b418:	01003f84 	movi	r4,254
 400b41c:	20ffbf36 	bltu	r4,r3,400b31c <__reset+0xfa81b31c>
 400b420:	900b883a 	mov	r5,r18
 400b424:	dc800005 	stb	r18,0(sp)
 400b428:	1029883a 	mov	r20,r2
 400b42c:	003fc506 	br	400b344 <__reset+0xfa81b344>
 400b430:	800d883a 	mov	r6,r16
 400b434:	a80b883a 	mov	r5,r21
 400b438:	9809883a 	mov	r4,r19
 400b43c:	400b65c0 	call	400b65c <__swbuf_r>
 400b440:	10bfffe0 	cmpeqi	r2,r2,-1
 400b444:	003fef06 	br	400b404 <__reset+0xfa81b404>

0400b448 <_fputwc_r>:
 400b448:	3080030b 	ldhu	r2,12(r6)
 400b44c:	10c8000c 	andi	r3,r2,8192
 400b450:	1800051e 	bne	r3,zero,400b468 <_fputwc_r+0x20>
 400b454:	30c01917 	ldw	r3,100(r6)
 400b458:	10880014 	ori	r2,r2,8192
 400b45c:	3080030d 	sth	r2,12(r6)
 400b460:	18880014 	ori	r2,r3,8192
 400b464:	30801915 	stw	r2,100(r6)
 400b468:	400b2e41 	jmpi	400b2e4 <__fputwc>

0400b46c <fputwc>:
 400b46c:	00810074 	movhi	r2,1025
 400b470:	defffc04 	addi	sp,sp,-16
 400b474:	109d0604 	addi	r2,r2,29720
 400b478:	dc000115 	stw	r16,4(sp)
 400b47c:	14000017 	ldw	r16,0(r2)
 400b480:	dc400215 	stw	r17,8(sp)
 400b484:	dfc00315 	stw	ra,12(sp)
 400b488:	2023883a 	mov	r17,r4
 400b48c:	80000226 	beq	r16,zero,400b498 <fputwc+0x2c>
 400b490:	80800e17 	ldw	r2,56(r16)
 400b494:	10001026 	beq	r2,zero,400b4d8 <fputwc+0x6c>
 400b498:	2880030b 	ldhu	r2,12(r5)
 400b49c:	10c8000c 	andi	r3,r2,8192
 400b4a0:	1800051e 	bne	r3,zero,400b4b8 <fputwc+0x4c>
 400b4a4:	28c01917 	ldw	r3,100(r5)
 400b4a8:	10880014 	ori	r2,r2,8192
 400b4ac:	2880030d 	sth	r2,12(r5)
 400b4b0:	18880014 	ori	r2,r3,8192
 400b4b4:	28801915 	stw	r2,100(r5)
 400b4b8:	280d883a 	mov	r6,r5
 400b4bc:	8009883a 	mov	r4,r16
 400b4c0:	880b883a 	mov	r5,r17
 400b4c4:	dfc00317 	ldw	ra,12(sp)
 400b4c8:	dc400217 	ldw	r17,8(sp)
 400b4cc:	dc000117 	ldw	r16,4(sp)
 400b4d0:	dec00404 	addi	sp,sp,16
 400b4d4:	400b2e41 	jmpi	400b2e4 <__fputwc>
 400b4d8:	8009883a 	mov	r4,r16
 400b4dc:	d9400015 	stw	r5,0(sp)
 400b4e0:	400690c0 	call	400690c <__sinit>
 400b4e4:	d9400017 	ldw	r5,0(sp)
 400b4e8:	003feb06 	br	400b498 <__reset+0xfa81b498>

0400b4ec <_fstat_r>:
 400b4ec:	defffd04 	addi	sp,sp,-12
 400b4f0:	2805883a 	mov	r2,r5
 400b4f4:	dc000015 	stw	r16,0(sp)
 400b4f8:	04010074 	movhi	r16,1025
 400b4fc:	dc400115 	stw	r17,4(sp)
 400b500:	841d2104 	addi	r16,r16,29828
 400b504:	2023883a 	mov	r17,r4
 400b508:	300b883a 	mov	r5,r6
 400b50c:	1009883a 	mov	r4,r2
 400b510:	dfc00215 	stw	ra,8(sp)
 400b514:	80000015 	stw	zero,0(r16)
 400b518:	400ef080 	call	400ef08 <fstat>
 400b51c:	00ffffc4 	movi	r3,-1
 400b520:	10c00526 	beq	r2,r3,400b538 <_fstat_r+0x4c>
 400b524:	dfc00217 	ldw	ra,8(sp)
 400b528:	dc400117 	ldw	r17,4(sp)
 400b52c:	dc000017 	ldw	r16,0(sp)
 400b530:	dec00304 	addi	sp,sp,12
 400b534:	f800283a 	ret
 400b538:	80c00017 	ldw	r3,0(r16)
 400b53c:	183ff926 	beq	r3,zero,400b524 <__reset+0xfa81b524>
 400b540:	88c00015 	stw	r3,0(r17)
 400b544:	003ff706 	br	400b524 <__reset+0xfa81b524>

0400b548 <_isatty_r>:
 400b548:	defffd04 	addi	sp,sp,-12
 400b54c:	dc000015 	stw	r16,0(sp)
 400b550:	04010074 	movhi	r16,1025
 400b554:	dc400115 	stw	r17,4(sp)
 400b558:	841d2104 	addi	r16,r16,29828
 400b55c:	2023883a 	mov	r17,r4
 400b560:	2809883a 	mov	r4,r5
 400b564:	dfc00215 	stw	ra,8(sp)
 400b568:	80000015 	stw	zero,0(r16)
 400b56c:	400f2940 	call	400f294 <isatty>
 400b570:	00ffffc4 	movi	r3,-1
 400b574:	10c00526 	beq	r2,r3,400b58c <_isatty_r+0x44>
 400b578:	dfc00217 	ldw	ra,8(sp)
 400b57c:	dc400117 	ldw	r17,4(sp)
 400b580:	dc000017 	ldw	r16,0(sp)
 400b584:	dec00304 	addi	sp,sp,12
 400b588:	f800283a 	ret
 400b58c:	80c00017 	ldw	r3,0(r16)
 400b590:	183ff926 	beq	r3,zero,400b578 <__reset+0xfa81b578>
 400b594:	88c00015 	stw	r3,0(r17)
 400b598:	003ff706 	br	400b578 <__reset+0xfa81b578>

0400b59c <_lseek_r>:
 400b59c:	defffd04 	addi	sp,sp,-12
 400b5a0:	2805883a 	mov	r2,r5
 400b5a4:	dc000015 	stw	r16,0(sp)
 400b5a8:	04010074 	movhi	r16,1025
 400b5ac:	dc400115 	stw	r17,4(sp)
 400b5b0:	300b883a 	mov	r5,r6
 400b5b4:	841d2104 	addi	r16,r16,29828
 400b5b8:	2023883a 	mov	r17,r4
 400b5bc:	380d883a 	mov	r6,r7
 400b5c0:	1009883a 	mov	r4,r2
 400b5c4:	dfc00215 	stw	ra,8(sp)
 400b5c8:	80000015 	stw	zero,0(r16)
 400b5cc:	400f3740 	call	400f374 <lseek>
 400b5d0:	00ffffc4 	movi	r3,-1
 400b5d4:	10c00526 	beq	r2,r3,400b5ec <_lseek_r+0x50>
 400b5d8:	dfc00217 	ldw	ra,8(sp)
 400b5dc:	dc400117 	ldw	r17,4(sp)
 400b5e0:	dc000017 	ldw	r16,0(sp)
 400b5e4:	dec00304 	addi	sp,sp,12
 400b5e8:	f800283a 	ret
 400b5ec:	80c00017 	ldw	r3,0(r16)
 400b5f0:	183ff926 	beq	r3,zero,400b5d8 <__reset+0xfa81b5d8>
 400b5f4:	88c00015 	stw	r3,0(r17)
 400b5f8:	003ff706 	br	400b5d8 <__reset+0xfa81b5d8>

0400b5fc <_read_r>:
 400b5fc:	defffd04 	addi	sp,sp,-12
 400b600:	2805883a 	mov	r2,r5
 400b604:	dc000015 	stw	r16,0(sp)
 400b608:	04010074 	movhi	r16,1025
 400b60c:	dc400115 	stw	r17,4(sp)
 400b610:	300b883a 	mov	r5,r6
 400b614:	841d2104 	addi	r16,r16,29828
 400b618:	2023883a 	mov	r17,r4
 400b61c:	380d883a 	mov	r6,r7
 400b620:	1009883a 	mov	r4,r2
 400b624:	dfc00215 	stw	ra,8(sp)
 400b628:	80000015 	stw	zero,0(r16)
 400b62c:	400f5480 	call	400f548 <read>
 400b630:	00ffffc4 	movi	r3,-1
 400b634:	10c00526 	beq	r2,r3,400b64c <_read_r+0x50>
 400b638:	dfc00217 	ldw	ra,8(sp)
 400b63c:	dc400117 	ldw	r17,4(sp)
 400b640:	dc000017 	ldw	r16,0(sp)
 400b644:	dec00304 	addi	sp,sp,12
 400b648:	f800283a 	ret
 400b64c:	80c00017 	ldw	r3,0(r16)
 400b650:	183ff926 	beq	r3,zero,400b638 <__reset+0xfa81b638>
 400b654:	88c00015 	stw	r3,0(r17)
 400b658:	003ff706 	br	400b638 <__reset+0xfa81b638>

0400b65c <__swbuf_r>:
 400b65c:	defffb04 	addi	sp,sp,-20
 400b660:	dcc00315 	stw	r19,12(sp)
 400b664:	dc800215 	stw	r18,8(sp)
 400b668:	dc000015 	stw	r16,0(sp)
 400b66c:	dfc00415 	stw	ra,16(sp)
 400b670:	dc400115 	stw	r17,4(sp)
 400b674:	2025883a 	mov	r18,r4
 400b678:	2827883a 	mov	r19,r5
 400b67c:	3021883a 	mov	r16,r6
 400b680:	20000226 	beq	r4,zero,400b68c <__swbuf_r+0x30>
 400b684:	20800e17 	ldw	r2,56(r4)
 400b688:	10004226 	beq	r2,zero,400b794 <__swbuf_r+0x138>
 400b68c:	80800617 	ldw	r2,24(r16)
 400b690:	8100030b 	ldhu	r4,12(r16)
 400b694:	80800215 	stw	r2,8(r16)
 400b698:	2080020c 	andi	r2,r4,8
 400b69c:	10003626 	beq	r2,zero,400b778 <__swbuf_r+0x11c>
 400b6a0:	80c00417 	ldw	r3,16(r16)
 400b6a4:	18003426 	beq	r3,zero,400b778 <__swbuf_r+0x11c>
 400b6a8:	2088000c 	andi	r2,r4,8192
 400b6ac:	9c403fcc 	andi	r17,r19,255
 400b6b0:	10001a26 	beq	r2,zero,400b71c <__swbuf_r+0xc0>
 400b6b4:	80800017 	ldw	r2,0(r16)
 400b6b8:	81000517 	ldw	r4,20(r16)
 400b6bc:	10c7c83a 	sub	r3,r2,r3
 400b6c0:	1900200e 	bge	r3,r4,400b744 <__swbuf_r+0xe8>
 400b6c4:	18c00044 	addi	r3,r3,1
 400b6c8:	81000217 	ldw	r4,8(r16)
 400b6cc:	11400044 	addi	r5,r2,1
 400b6d0:	81400015 	stw	r5,0(r16)
 400b6d4:	213fffc4 	addi	r4,r4,-1
 400b6d8:	81000215 	stw	r4,8(r16)
 400b6dc:	14c00005 	stb	r19,0(r2)
 400b6e0:	80800517 	ldw	r2,20(r16)
 400b6e4:	10c01e26 	beq	r2,r3,400b760 <__swbuf_r+0x104>
 400b6e8:	8080030b 	ldhu	r2,12(r16)
 400b6ec:	1080004c 	andi	r2,r2,1
 400b6f0:	10000226 	beq	r2,zero,400b6fc <__swbuf_r+0xa0>
 400b6f4:	00800284 	movi	r2,10
 400b6f8:	88801926 	beq	r17,r2,400b760 <__swbuf_r+0x104>
 400b6fc:	8805883a 	mov	r2,r17
 400b700:	dfc00417 	ldw	ra,16(sp)
 400b704:	dcc00317 	ldw	r19,12(sp)
 400b708:	dc800217 	ldw	r18,8(sp)
 400b70c:	dc400117 	ldw	r17,4(sp)
 400b710:	dc000017 	ldw	r16,0(sp)
 400b714:	dec00504 	addi	sp,sp,20
 400b718:	f800283a 	ret
 400b71c:	81401917 	ldw	r5,100(r16)
 400b720:	00b7ffc4 	movi	r2,-8193
 400b724:	21080014 	ori	r4,r4,8192
 400b728:	2884703a 	and	r2,r5,r2
 400b72c:	80801915 	stw	r2,100(r16)
 400b730:	80800017 	ldw	r2,0(r16)
 400b734:	8100030d 	sth	r4,12(r16)
 400b738:	81000517 	ldw	r4,20(r16)
 400b73c:	10c7c83a 	sub	r3,r2,r3
 400b740:	193fe016 	blt	r3,r4,400b6c4 <__reset+0xfa81b6c4>
 400b744:	800b883a 	mov	r5,r16
 400b748:	9009883a 	mov	r4,r18
 400b74c:	40065300 	call	4006530 <_fflush_r>
 400b750:	1000071e 	bne	r2,zero,400b770 <__swbuf_r+0x114>
 400b754:	80800017 	ldw	r2,0(r16)
 400b758:	00c00044 	movi	r3,1
 400b75c:	003fda06 	br	400b6c8 <__reset+0xfa81b6c8>
 400b760:	800b883a 	mov	r5,r16
 400b764:	9009883a 	mov	r4,r18
 400b768:	40065300 	call	4006530 <_fflush_r>
 400b76c:	103fe326 	beq	r2,zero,400b6fc <__reset+0xfa81b6fc>
 400b770:	00bfffc4 	movi	r2,-1
 400b774:	003fe206 	br	400b700 <__reset+0xfa81b700>
 400b778:	800b883a 	mov	r5,r16
 400b77c:	9009883a 	mov	r4,r18
 400b780:	40049380 	call	4004938 <__swsetup_r>
 400b784:	103ffa1e 	bne	r2,zero,400b770 <__reset+0xfa81b770>
 400b788:	8100030b 	ldhu	r4,12(r16)
 400b78c:	80c00417 	ldw	r3,16(r16)
 400b790:	003fc506 	br	400b6a8 <__reset+0xfa81b6a8>
 400b794:	400690c0 	call	400690c <__sinit>
 400b798:	003fbc06 	br	400b68c <__reset+0xfa81b68c>

0400b79c <__swbuf>:
 400b79c:	00810074 	movhi	r2,1025
 400b7a0:	109d0604 	addi	r2,r2,29720
 400b7a4:	280d883a 	mov	r6,r5
 400b7a8:	200b883a 	mov	r5,r4
 400b7ac:	11000017 	ldw	r4,0(r2)
 400b7b0:	400b65c1 	jmpi	400b65c <__swbuf_r>

0400b7b4 <_wcrtomb_r>:
 400b7b4:	defff604 	addi	sp,sp,-40
 400b7b8:	00810074 	movhi	r2,1025
 400b7bc:	dc800815 	stw	r18,32(sp)
 400b7c0:	dc400715 	stw	r17,28(sp)
 400b7c4:	dc000615 	stw	r16,24(sp)
 400b7c8:	109d0a04 	addi	r2,r2,29736
 400b7cc:	dfc00915 	stw	ra,36(sp)
 400b7d0:	2021883a 	mov	r16,r4
 400b7d4:	3823883a 	mov	r17,r7
 400b7d8:	14800017 	ldw	r18,0(r2)
 400b7dc:	28001426 	beq	r5,zero,400b830 <_wcrtomb_r+0x7c>
 400b7e0:	d9400415 	stw	r5,16(sp)
 400b7e4:	d9800515 	stw	r6,20(sp)
 400b7e8:	40074500 	call	4007450 <__locale_charset>
 400b7ec:	d9800517 	ldw	r6,20(sp)
 400b7f0:	d9400417 	ldw	r5,16(sp)
 400b7f4:	100f883a 	mov	r7,r2
 400b7f8:	dc400015 	stw	r17,0(sp)
 400b7fc:	8009883a 	mov	r4,r16
 400b800:	903ee83a 	callr	r18
 400b804:	00ffffc4 	movi	r3,-1
 400b808:	10c0031e 	bne	r2,r3,400b818 <_wcrtomb_r+0x64>
 400b80c:	88000015 	stw	zero,0(r17)
 400b810:	00c02284 	movi	r3,138
 400b814:	80c00015 	stw	r3,0(r16)
 400b818:	dfc00917 	ldw	ra,36(sp)
 400b81c:	dc800817 	ldw	r18,32(sp)
 400b820:	dc400717 	ldw	r17,28(sp)
 400b824:	dc000617 	ldw	r16,24(sp)
 400b828:	dec00a04 	addi	sp,sp,40
 400b82c:	f800283a 	ret
 400b830:	40074500 	call	4007450 <__locale_charset>
 400b834:	100f883a 	mov	r7,r2
 400b838:	dc400015 	stw	r17,0(sp)
 400b83c:	000d883a 	mov	r6,zero
 400b840:	d9400104 	addi	r5,sp,4
 400b844:	8009883a 	mov	r4,r16
 400b848:	903ee83a 	callr	r18
 400b84c:	003fed06 	br	400b804 <__reset+0xfa81b804>

0400b850 <wcrtomb>:
 400b850:	defff604 	addi	sp,sp,-40
 400b854:	00810074 	movhi	r2,1025
 400b858:	dc800615 	stw	r18,24(sp)
 400b85c:	dc400515 	stw	r17,20(sp)
 400b860:	109d0604 	addi	r2,r2,29720
 400b864:	dfc00915 	stw	ra,36(sp)
 400b868:	dd000815 	stw	r20,32(sp)
 400b86c:	dcc00715 	stw	r19,28(sp)
 400b870:	dc000415 	stw	r16,16(sp)
 400b874:	3025883a 	mov	r18,r6
 400b878:	14400017 	ldw	r17,0(r2)
 400b87c:	20001926 	beq	r4,zero,400b8e4 <wcrtomb+0x94>
 400b880:	00810074 	movhi	r2,1025
 400b884:	109d0a04 	addi	r2,r2,29736
 400b888:	15000017 	ldw	r20,0(r2)
 400b88c:	2021883a 	mov	r16,r4
 400b890:	2827883a 	mov	r19,r5
 400b894:	40074500 	call	4007450 <__locale_charset>
 400b898:	100f883a 	mov	r7,r2
 400b89c:	dc800015 	stw	r18,0(sp)
 400b8a0:	980d883a 	mov	r6,r19
 400b8a4:	800b883a 	mov	r5,r16
 400b8a8:	8809883a 	mov	r4,r17
 400b8ac:	a03ee83a 	callr	r20
 400b8b0:	00ffffc4 	movi	r3,-1
 400b8b4:	10c0031e 	bne	r2,r3,400b8c4 <wcrtomb+0x74>
 400b8b8:	90000015 	stw	zero,0(r18)
 400b8bc:	00c02284 	movi	r3,138
 400b8c0:	88c00015 	stw	r3,0(r17)
 400b8c4:	dfc00917 	ldw	ra,36(sp)
 400b8c8:	dd000817 	ldw	r20,32(sp)
 400b8cc:	dcc00717 	ldw	r19,28(sp)
 400b8d0:	dc800617 	ldw	r18,24(sp)
 400b8d4:	dc400517 	ldw	r17,20(sp)
 400b8d8:	dc000417 	ldw	r16,16(sp)
 400b8dc:	dec00a04 	addi	sp,sp,40
 400b8e0:	f800283a 	ret
 400b8e4:	00810074 	movhi	r2,1025
 400b8e8:	109d0a04 	addi	r2,r2,29736
 400b8ec:	14000017 	ldw	r16,0(r2)
 400b8f0:	40074500 	call	4007450 <__locale_charset>
 400b8f4:	100f883a 	mov	r7,r2
 400b8f8:	dc800015 	stw	r18,0(sp)
 400b8fc:	000d883a 	mov	r6,zero
 400b900:	d9400104 	addi	r5,sp,4
 400b904:	8809883a 	mov	r4,r17
 400b908:	803ee83a 	callr	r16
 400b90c:	003fe806 	br	400b8b0 <__reset+0xfa81b8b0>

0400b910 <__ascii_wctomb>:
 400b910:	28000526 	beq	r5,zero,400b928 <__ascii_wctomb+0x18>
 400b914:	00803fc4 	movi	r2,255
 400b918:	11800536 	bltu	r2,r6,400b930 <__ascii_wctomb+0x20>
 400b91c:	29800005 	stb	r6,0(r5)
 400b920:	00800044 	movi	r2,1
 400b924:	f800283a 	ret
 400b928:	0005883a 	mov	r2,zero
 400b92c:	f800283a 	ret
 400b930:	00802284 	movi	r2,138
 400b934:	20800015 	stw	r2,0(r4)
 400b938:	00bfffc4 	movi	r2,-1
 400b93c:	f800283a 	ret

0400b940 <_wctomb_r>:
 400b940:	00810074 	movhi	r2,1025
 400b944:	defff904 	addi	sp,sp,-28
 400b948:	109d0a04 	addi	r2,r2,29736
 400b94c:	dfc00615 	stw	ra,24(sp)
 400b950:	dc400515 	stw	r17,20(sp)
 400b954:	dc000415 	stw	r16,16(sp)
 400b958:	3823883a 	mov	r17,r7
 400b95c:	14000017 	ldw	r16,0(r2)
 400b960:	d9000115 	stw	r4,4(sp)
 400b964:	d9400215 	stw	r5,8(sp)
 400b968:	d9800315 	stw	r6,12(sp)
 400b96c:	40074500 	call	4007450 <__locale_charset>
 400b970:	d9800317 	ldw	r6,12(sp)
 400b974:	d9400217 	ldw	r5,8(sp)
 400b978:	d9000117 	ldw	r4,4(sp)
 400b97c:	100f883a 	mov	r7,r2
 400b980:	dc400015 	stw	r17,0(sp)
 400b984:	803ee83a 	callr	r16
 400b988:	dfc00617 	ldw	ra,24(sp)
 400b98c:	dc400517 	ldw	r17,20(sp)
 400b990:	dc000417 	ldw	r16,16(sp)
 400b994:	dec00704 	addi	sp,sp,28
 400b998:	f800283a 	ret

0400b99c <__udivdi3>:
 400b99c:	defff504 	addi	sp,sp,-44
 400b9a0:	dcc00415 	stw	r19,16(sp)
 400b9a4:	dc000115 	stw	r16,4(sp)
 400b9a8:	dfc00a15 	stw	ra,40(sp)
 400b9ac:	df000915 	stw	fp,36(sp)
 400b9b0:	ddc00815 	stw	r23,32(sp)
 400b9b4:	dd800715 	stw	r22,28(sp)
 400b9b8:	dd400615 	stw	r21,24(sp)
 400b9bc:	dd000515 	stw	r20,20(sp)
 400b9c0:	dc800315 	stw	r18,12(sp)
 400b9c4:	dc400215 	stw	r17,8(sp)
 400b9c8:	2027883a 	mov	r19,r4
 400b9cc:	2821883a 	mov	r16,r5
 400b9d0:	3800411e 	bne	r7,zero,400bad8 <__udivdi3+0x13c>
 400b9d4:	3023883a 	mov	r17,r6
 400b9d8:	2025883a 	mov	r18,r4
 400b9dc:	2980522e 	bgeu	r5,r6,400bb28 <__udivdi3+0x18c>
 400b9e0:	00bfffd4 	movui	r2,65535
 400b9e4:	282d883a 	mov	r22,r5
 400b9e8:	1180a836 	bltu	r2,r6,400bc8c <__udivdi3+0x2f0>
 400b9ec:	00803fc4 	movi	r2,255
 400b9f0:	1185803a 	cmpltu	r2,r2,r6
 400b9f4:	100490fa 	slli	r2,r2,3
 400b9f8:	3086d83a 	srl	r3,r6,r2
 400b9fc:	01010074 	movhi	r4,1025
 400ba00:	2114e904 	addi	r4,r4,21412
 400ba04:	20c7883a 	add	r3,r4,r3
 400ba08:	18c00003 	ldbu	r3,0(r3)
 400ba0c:	1885883a 	add	r2,r3,r2
 400ba10:	00c00804 	movi	r3,32
 400ba14:	1887c83a 	sub	r3,r3,r2
 400ba18:	18000526 	beq	r3,zero,400ba30 <__udivdi3+0x94>
 400ba1c:	80e0983a 	sll	r16,r16,r3
 400ba20:	9884d83a 	srl	r2,r19,r2
 400ba24:	30e2983a 	sll	r17,r6,r3
 400ba28:	98e4983a 	sll	r18,r19,r3
 400ba2c:	142cb03a 	or	r22,r2,r16
 400ba30:	882ad43a 	srli	r21,r17,16
 400ba34:	b009883a 	mov	r4,r22
 400ba38:	8d3fffcc 	andi	r20,r17,65535
 400ba3c:	a80b883a 	mov	r5,r21
 400ba40:	400c5a80 	call	400c5a8 <__umodsi3>
 400ba44:	b009883a 	mov	r4,r22
 400ba48:	a80b883a 	mov	r5,r21
 400ba4c:	1027883a 	mov	r19,r2
 400ba50:	400c5440 	call	400c544 <__udivsi3>
 400ba54:	102d883a 	mov	r22,r2
 400ba58:	9826943a 	slli	r19,r19,16
 400ba5c:	9004d43a 	srli	r2,r18,16
 400ba60:	a5a1383a 	mul	r16,r20,r22
 400ba64:	14c4b03a 	or	r2,r2,r19
 400ba68:	1400052e 	bgeu	r2,r16,400ba80 <__udivdi3+0xe4>
 400ba6c:	1445883a 	add	r2,r2,r17
 400ba70:	b0ffffc4 	addi	r3,r22,-1
 400ba74:	14400136 	bltu	r2,r17,400ba7c <__udivdi3+0xe0>
 400ba78:	14012336 	bltu	r2,r16,400bf08 <__udivdi3+0x56c>
 400ba7c:	182d883a 	mov	r22,r3
 400ba80:	1421c83a 	sub	r16,r2,r16
 400ba84:	a80b883a 	mov	r5,r21
 400ba88:	8009883a 	mov	r4,r16
 400ba8c:	400c5a80 	call	400c5a8 <__umodsi3>
 400ba90:	1027883a 	mov	r19,r2
 400ba94:	a80b883a 	mov	r5,r21
 400ba98:	8009883a 	mov	r4,r16
 400ba9c:	400c5440 	call	400c544 <__udivsi3>
 400baa0:	9826943a 	slli	r19,r19,16
 400baa4:	a0a9383a 	mul	r20,r20,r2
 400baa8:	94bfffcc 	andi	r18,r18,65535
 400baac:	94e4b03a 	or	r18,r18,r19
 400bab0:	9500052e 	bgeu	r18,r20,400bac8 <__udivdi3+0x12c>
 400bab4:	8ca5883a 	add	r18,r17,r18
 400bab8:	10ffffc4 	addi	r3,r2,-1
 400babc:	9440f136 	bltu	r18,r17,400be84 <__udivdi3+0x4e8>
 400bac0:	9500f02e 	bgeu	r18,r20,400be84 <__udivdi3+0x4e8>
 400bac4:	10bfff84 	addi	r2,r2,-2
 400bac8:	b00c943a 	slli	r6,r22,16
 400bacc:	0007883a 	mov	r3,zero
 400bad0:	3084b03a 	or	r2,r6,r2
 400bad4:	00005906 	br	400bc3c <__udivdi3+0x2a0>
 400bad8:	29c05636 	bltu	r5,r7,400bc34 <__udivdi3+0x298>
 400badc:	00bfffd4 	movui	r2,65535
 400bae0:	11c0622e 	bgeu	r2,r7,400bc6c <__udivdi3+0x2d0>
 400bae4:	00804034 	movhi	r2,256
 400bae8:	10bfffc4 	addi	r2,r2,-1
 400baec:	11c0ee36 	bltu	r2,r7,400bea8 <__udivdi3+0x50c>
 400baf0:	00800404 	movi	r2,16
 400baf4:	3886d83a 	srl	r3,r7,r2
 400baf8:	01010074 	movhi	r4,1025
 400bafc:	2114e904 	addi	r4,r4,21412
 400bb00:	20c7883a 	add	r3,r4,r3
 400bb04:	18c00003 	ldbu	r3,0(r3)
 400bb08:	05400804 	movi	r21,32
 400bb0c:	1885883a 	add	r2,r3,r2
 400bb10:	a8abc83a 	sub	r21,r21,r2
 400bb14:	a800621e 	bne	r21,zero,400bca0 <__udivdi3+0x304>
 400bb18:	3c00e936 	bltu	r7,r16,400bec0 <__udivdi3+0x524>
 400bb1c:	9985403a 	cmpgeu	r2,r19,r6
 400bb20:	0007883a 	mov	r3,zero
 400bb24:	00004506 	br	400bc3c <__udivdi3+0x2a0>
 400bb28:	3000041e 	bne	r6,zero,400bb3c <__udivdi3+0x1a0>
 400bb2c:	000b883a 	mov	r5,zero
 400bb30:	01000044 	movi	r4,1
 400bb34:	400c5440 	call	400c544 <__udivsi3>
 400bb38:	1023883a 	mov	r17,r2
 400bb3c:	00bfffd4 	movui	r2,65535
 400bb40:	14404e2e 	bgeu	r2,r17,400bc7c <__udivdi3+0x2e0>
 400bb44:	00804034 	movhi	r2,256
 400bb48:	10bfffc4 	addi	r2,r2,-1
 400bb4c:	1440d836 	bltu	r2,r17,400beb0 <__udivdi3+0x514>
 400bb50:	00800404 	movi	r2,16
 400bb54:	8886d83a 	srl	r3,r17,r2
 400bb58:	01010074 	movhi	r4,1025
 400bb5c:	2114e904 	addi	r4,r4,21412
 400bb60:	20c7883a 	add	r3,r4,r3
 400bb64:	18c00003 	ldbu	r3,0(r3)
 400bb68:	1885883a 	add	r2,r3,r2
 400bb6c:	00c00804 	movi	r3,32
 400bb70:	1887c83a 	sub	r3,r3,r2
 400bb74:	18008f1e 	bne	r3,zero,400bdb4 <__udivdi3+0x418>
 400bb78:	882ad43a 	srli	r21,r17,16
 400bb7c:	8461c83a 	sub	r16,r16,r17
 400bb80:	8d3fffcc 	andi	r20,r17,65535
 400bb84:	00c00044 	movi	r3,1
 400bb88:	8009883a 	mov	r4,r16
 400bb8c:	a80b883a 	mov	r5,r21
 400bb90:	d8c00015 	stw	r3,0(sp)
 400bb94:	400c5a80 	call	400c5a8 <__umodsi3>
 400bb98:	8009883a 	mov	r4,r16
 400bb9c:	a80b883a 	mov	r5,r21
 400bba0:	1027883a 	mov	r19,r2
 400bba4:	400c5440 	call	400c544 <__udivsi3>
 400bba8:	9826943a 	slli	r19,r19,16
 400bbac:	9008d43a 	srli	r4,r18,16
 400bbb0:	1521383a 	mul	r16,r2,r20
 400bbb4:	102d883a 	mov	r22,r2
 400bbb8:	24c8b03a 	or	r4,r4,r19
 400bbbc:	d8c00017 	ldw	r3,0(sp)
 400bbc0:	2400052e 	bgeu	r4,r16,400bbd8 <__udivdi3+0x23c>
 400bbc4:	2449883a 	add	r4,r4,r17
 400bbc8:	b0bfffc4 	addi	r2,r22,-1
 400bbcc:	24400136 	bltu	r4,r17,400bbd4 <__udivdi3+0x238>
 400bbd0:	2400ca36 	bltu	r4,r16,400befc <__udivdi3+0x560>
 400bbd4:	102d883a 	mov	r22,r2
 400bbd8:	2421c83a 	sub	r16,r4,r16
 400bbdc:	a80b883a 	mov	r5,r21
 400bbe0:	8009883a 	mov	r4,r16
 400bbe4:	d8c00015 	stw	r3,0(sp)
 400bbe8:	400c5a80 	call	400c5a8 <__umodsi3>
 400bbec:	1027883a 	mov	r19,r2
 400bbf0:	a80b883a 	mov	r5,r21
 400bbf4:	8009883a 	mov	r4,r16
 400bbf8:	400c5440 	call	400c544 <__udivsi3>
 400bbfc:	9826943a 	slli	r19,r19,16
 400bc00:	1529383a 	mul	r20,r2,r20
 400bc04:	94bfffcc 	andi	r18,r18,65535
 400bc08:	94e4b03a 	or	r18,r18,r19
 400bc0c:	d8c00017 	ldw	r3,0(sp)
 400bc10:	9500052e 	bgeu	r18,r20,400bc28 <__udivdi3+0x28c>
 400bc14:	8ca5883a 	add	r18,r17,r18
 400bc18:	113fffc4 	addi	r4,r2,-1
 400bc1c:	94409736 	bltu	r18,r17,400be7c <__udivdi3+0x4e0>
 400bc20:	9500962e 	bgeu	r18,r20,400be7c <__udivdi3+0x4e0>
 400bc24:	10bfff84 	addi	r2,r2,-2
 400bc28:	b00c943a 	slli	r6,r22,16
 400bc2c:	3084b03a 	or	r2,r6,r2
 400bc30:	00000206 	br	400bc3c <__udivdi3+0x2a0>
 400bc34:	0007883a 	mov	r3,zero
 400bc38:	0005883a 	mov	r2,zero
 400bc3c:	dfc00a17 	ldw	ra,40(sp)
 400bc40:	df000917 	ldw	fp,36(sp)
 400bc44:	ddc00817 	ldw	r23,32(sp)
 400bc48:	dd800717 	ldw	r22,28(sp)
 400bc4c:	dd400617 	ldw	r21,24(sp)
 400bc50:	dd000517 	ldw	r20,20(sp)
 400bc54:	dcc00417 	ldw	r19,16(sp)
 400bc58:	dc800317 	ldw	r18,12(sp)
 400bc5c:	dc400217 	ldw	r17,8(sp)
 400bc60:	dc000117 	ldw	r16,4(sp)
 400bc64:	dec00b04 	addi	sp,sp,44
 400bc68:	f800283a 	ret
 400bc6c:	00803fc4 	movi	r2,255
 400bc70:	11c5803a 	cmpltu	r2,r2,r7
 400bc74:	100490fa 	slli	r2,r2,3
 400bc78:	003f9e06 	br	400baf4 <__reset+0xfa81baf4>
 400bc7c:	00803fc4 	movi	r2,255
 400bc80:	1445803a 	cmpltu	r2,r2,r17
 400bc84:	100490fa 	slli	r2,r2,3
 400bc88:	003fb206 	br	400bb54 <__reset+0xfa81bb54>
 400bc8c:	00804034 	movhi	r2,256
 400bc90:	10bfffc4 	addi	r2,r2,-1
 400bc94:	11808836 	bltu	r2,r6,400beb8 <__udivdi3+0x51c>
 400bc98:	00800404 	movi	r2,16
 400bc9c:	003f5606 	br	400b9f8 <__reset+0xfa81b9f8>
 400bca0:	30aed83a 	srl	r23,r6,r2
 400bca4:	3d4e983a 	sll	r7,r7,r21
 400bca8:	80acd83a 	srl	r22,r16,r2
 400bcac:	9884d83a 	srl	r2,r19,r2
 400bcb0:	3deeb03a 	or	r23,r7,r23
 400bcb4:	b824d43a 	srli	r18,r23,16
 400bcb8:	8560983a 	sll	r16,r16,r21
 400bcbc:	b009883a 	mov	r4,r22
 400bcc0:	900b883a 	mov	r5,r18
 400bcc4:	3568983a 	sll	r20,r6,r21
 400bcc8:	1420b03a 	or	r16,r2,r16
 400bccc:	400c5a80 	call	400c5a8 <__umodsi3>
 400bcd0:	b009883a 	mov	r4,r22
 400bcd4:	900b883a 	mov	r5,r18
 400bcd8:	1023883a 	mov	r17,r2
 400bcdc:	400c5440 	call	400c544 <__udivsi3>
 400bce0:	8808943a 	slli	r4,r17,16
 400bce4:	bf3fffcc 	andi	fp,r23,65535
 400bce8:	8006d43a 	srli	r3,r16,16
 400bcec:	e0a3383a 	mul	r17,fp,r2
 400bcf0:	100d883a 	mov	r6,r2
 400bcf4:	1906b03a 	or	r3,r3,r4
 400bcf8:	1c40042e 	bgeu	r3,r17,400bd0c <__udivdi3+0x370>
 400bcfc:	1dc7883a 	add	r3,r3,r23
 400bd00:	10bfffc4 	addi	r2,r2,-1
 400bd04:	1dc0752e 	bgeu	r3,r23,400bedc <__udivdi3+0x540>
 400bd08:	100d883a 	mov	r6,r2
 400bd0c:	1c63c83a 	sub	r17,r3,r17
 400bd10:	900b883a 	mov	r5,r18
 400bd14:	8809883a 	mov	r4,r17
 400bd18:	d9800015 	stw	r6,0(sp)
 400bd1c:	400c5a80 	call	400c5a8 <__umodsi3>
 400bd20:	102d883a 	mov	r22,r2
 400bd24:	8809883a 	mov	r4,r17
 400bd28:	900b883a 	mov	r5,r18
 400bd2c:	400c5440 	call	400c544 <__udivsi3>
 400bd30:	b02c943a 	slli	r22,r22,16
 400bd34:	e089383a 	mul	r4,fp,r2
 400bd38:	843fffcc 	andi	r16,r16,65535
 400bd3c:	85a0b03a 	or	r16,r16,r22
 400bd40:	d9800017 	ldw	r6,0(sp)
 400bd44:	8100042e 	bgeu	r16,r4,400bd58 <__udivdi3+0x3bc>
 400bd48:	85e1883a 	add	r16,r16,r23
 400bd4c:	10ffffc4 	addi	r3,r2,-1
 400bd50:	85c05e2e 	bgeu	r16,r23,400becc <__udivdi3+0x530>
 400bd54:	1805883a 	mov	r2,r3
 400bd58:	300c943a 	slli	r6,r6,16
 400bd5c:	a17fffcc 	andi	r5,r20,65535
 400bd60:	a028d43a 	srli	r20,r20,16
 400bd64:	3084b03a 	or	r2,r6,r2
 400bd68:	10ffffcc 	andi	r3,r2,65535
 400bd6c:	100cd43a 	srli	r6,r2,16
 400bd70:	194f383a 	mul	r7,r3,r5
 400bd74:	1d07383a 	mul	r3,r3,r20
 400bd78:	314b383a 	mul	r5,r6,r5
 400bd7c:	3810d43a 	srli	r8,r7,16
 400bd80:	8121c83a 	sub	r16,r16,r4
 400bd84:	1947883a 	add	r3,r3,r5
 400bd88:	40c7883a 	add	r3,r8,r3
 400bd8c:	350d383a 	mul	r6,r6,r20
 400bd90:	1940022e 	bgeu	r3,r5,400bd9c <__udivdi3+0x400>
 400bd94:	01000074 	movhi	r4,1
 400bd98:	310d883a 	add	r6,r6,r4
 400bd9c:	1828d43a 	srli	r20,r3,16
 400bda0:	a18d883a 	add	r6,r20,r6
 400bda4:	81803e36 	bltu	r16,r6,400bea0 <__udivdi3+0x504>
 400bda8:	81803826 	beq	r16,r6,400be8c <__udivdi3+0x4f0>
 400bdac:	0007883a 	mov	r3,zero
 400bdb0:	003fa206 	br	400bc3c <__reset+0xfa81bc3c>
 400bdb4:	88e2983a 	sll	r17,r17,r3
 400bdb8:	80a8d83a 	srl	r20,r16,r2
 400bdbc:	80e0983a 	sll	r16,r16,r3
 400bdc0:	882ad43a 	srli	r21,r17,16
 400bdc4:	9884d83a 	srl	r2,r19,r2
 400bdc8:	a009883a 	mov	r4,r20
 400bdcc:	a80b883a 	mov	r5,r21
 400bdd0:	142eb03a 	or	r23,r2,r16
 400bdd4:	98e4983a 	sll	r18,r19,r3
 400bdd8:	400c5a80 	call	400c5a8 <__umodsi3>
 400bddc:	a009883a 	mov	r4,r20
 400bde0:	a80b883a 	mov	r5,r21
 400bde4:	1021883a 	mov	r16,r2
 400bde8:	400c5440 	call	400c544 <__udivsi3>
 400bdec:	1039883a 	mov	fp,r2
 400bdf0:	8d3fffcc 	andi	r20,r17,65535
 400bdf4:	8020943a 	slli	r16,r16,16
 400bdf8:	b804d43a 	srli	r2,r23,16
 400bdfc:	a72d383a 	mul	r22,r20,fp
 400be00:	1404b03a 	or	r2,r2,r16
 400be04:	1580062e 	bgeu	r2,r22,400be20 <__udivdi3+0x484>
 400be08:	1445883a 	add	r2,r2,r17
 400be0c:	e0ffffc4 	addi	r3,fp,-1
 400be10:	14403836 	bltu	r2,r17,400bef4 <__udivdi3+0x558>
 400be14:	1580372e 	bgeu	r2,r22,400bef4 <__udivdi3+0x558>
 400be18:	e73fff84 	addi	fp,fp,-2
 400be1c:	1445883a 	add	r2,r2,r17
 400be20:	15adc83a 	sub	r22,r2,r22
 400be24:	a80b883a 	mov	r5,r21
 400be28:	b009883a 	mov	r4,r22
 400be2c:	400c5a80 	call	400c5a8 <__umodsi3>
 400be30:	1027883a 	mov	r19,r2
 400be34:	b009883a 	mov	r4,r22
 400be38:	a80b883a 	mov	r5,r21
 400be3c:	400c5440 	call	400c544 <__udivsi3>
 400be40:	9826943a 	slli	r19,r19,16
 400be44:	a0a1383a 	mul	r16,r20,r2
 400be48:	b93fffcc 	andi	r4,r23,65535
 400be4c:	24c8b03a 	or	r4,r4,r19
 400be50:	2400062e 	bgeu	r4,r16,400be6c <__udivdi3+0x4d0>
 400be54:	2449883a 	add	r4,r4,r17
 400be58:	10ffffc4 	addi	r3,r2,-1
 400be5c:	24402336 	bltu	r4,r17,400beec <__udivdi3+0x550>
 400be60:	2400222e 	bgeu	r4,r16,400beec <__udivdi3+0x550>
 400be64:	10bfff84 	addi	r2,r2,-2
 400be68:	2449883a 	add	r4,r4,r17
 400be6c:	e038943a 	slli	fp,fp,16
 400be70:	2421c83a 	sub	r16,r4,r16
 400be74:	e086b03a 	or	r3,fp,r2
 400be78:	003f4306 	br	400bb88 <__reset+0xfa81bb88>
 400be7c:	2005883a 	mov	r2,r4
 400be80:	003f6906 	br	400bc28 <__reset+0xfa81bc28>
 400be84:	1805883a 	mov	r2,r3
 400be88:	003f0f06 	br	400bac8 <__reset+0xfa81bac8>
 400be8c:	1806943a 	slli	r3,r3,16
 400be90:	9d66983a 	sll	r19,r19,r21
 400be94:	39ffffcc 	andi	r7,r7,65535
 400be98:	19c7883a 	add	r3,r3,r7
 400be9c:	98ffc32e 	bgeu	r19,r3,400bdac <__reset+0xfa81bdac>
 400bea0:	10bfffc4 	addi	r2,r2,-1
 400bea4:	003fc106 	br	400bdac <__reset+0xfa81bdac>
 400bea8:	00800604 	movi	r2,24
 400beac:	003f1106 	br	400baf4 <__reset+0xfa81baf4>
 400beb0:	00800604 	movi	r2,24
 400beb4:	003f2706 	br	400bb54 <__reset+0xfa81bb54>
 400beb8:	00800604 	movi	r2,24
 400bebc:	003ece06 	br	400b9f8 <__reset+0xfa81b9f8>
 400bec0:	0007883a 	mov	r3,zero
 400bec4:	00800044 	movi	r2,1
 400bec8:	003f5c06 	br	400bc3c <__reset+0xfa81bc3c>
 400becc:	813fa12e 	bgeu	r16,r4,400bd54 <__reset+0xfa81bd54>
 400bed0:	10bfff84 	addi	r2,r2,-2
 400bed4:	85e1883a 	add	r16,r16,r23
 400bed8:	003f9f06 	br	400bd58 <__reset+0xfa81bd58>
 400bedc:	1c7f8a2e 	bgeu	r3,r17,400bd08 <__reset+0xfa81bd08>
 400bee0:	31bfff84 	addi	r6,r6,-2
 400bee4:	1dc7883a 	add	r3,r3,r23
 400bee8:	003f8806 	br	400bd0c <__reset+0xfa81bd0c>
 400beec:	1805883a 	mov	r2,r3
 400bef0:	003fde06 	br	400be6c <__reset+0xfa81be6c>
 400bef4:	1839883a 	mov	fp,r3
 400bef8:	003fc906 	br	400be20 <__reset+0xfa81be20>
 400befc:	b5bfff84 	addi	r22,r22,-2
 400bf00:	2449883a 	add	r4,r4,r17
 400bf04:	003f3406 	br	400bbd8 <__reset+0xfa81bbd8>
 400bf08:	b5bfff84 	addi	r22,r22,-2
 400bf0c:	1445883a 	add	r2,r2,r17
 400bf10:	003edb06 	br	400ba80 <__reset+0xfa81ba80>

0400bf14 <__umoddi3>:
 400bf14:	defff404 	addi	sp,sp,-48
 400bf18:	df000a15 	stw	fp,40(sp)
 400bf1c:	dc400315 	stw	r17,12(sp)
 400bf20:	dc000215 	stw	r16,8(sp)
 400bf24:	dfc00b15 	stw	ra,44(sp)
 400bf28:	ddc00915 	stw	r23,36(sp)
 400bf2c:	dd800815 	stw	r22,32(sp)
 400bf30:	dd400715 	stw	r21,28(sp)
 400bf34:	dd000615 	stw	r20,24(sp)
 400bf38:	dcc00515 	stw	r19,20(sp)
 400bf3c:	dc800415 	stw	r18,16(sp)
 400bf40:	2021883a 	mov	r16,r4
 400bf44:	2823883a 	mov	r17,r5
 400bf48:	2839883a 	mov	fp,r5
 400bf4c:	38003c1e 	bne	r7,zero,400c040 <__umoddi3+0x12c>
 400bf50:	3027883a 	mov	r19,r6
 400bf54:	2029883a 	mov	r20,r4
 400bf58:	2980512e 	bgeu	r5,r6,400c0a0 <__umoddi3+0x18c>
 400bf5c:	00bfffd4 	movui	r2,65535
 400bf60:	11809a36 	bltu	r2,r6,400c1cc <__umoddi3+0x2b8>
 400bf64:	01003fc4 	movi	r4,255
 400bf68:	2189803a 	cmpltu	r4,r4,r6
 400bf6c:	200890fa 	slli	r4,r4,3
 400bf70:	3104d83a 	srl	r2,r6,r4
 400bf74:	00c10074 	movhi	r3,1025
 400bf78:	18d4e904 	addi	r3,r3,21412
 400bf7c:	1885883a 	add	r2,r3,r2
 400bf80:	10c00003 	ldbu	r3,0(r2)
 400bf84:	00800804 	movi	r2,32
 400bf88:	1909883a 	add	r4,r3,r4
 400bf8c:	1125c83a 	sub	r18,r2,r4
 400bf90:	90000526 	beq	r18,zero,400bfa8 <__umoddi3+0x94>
 400bf94:	8ca2983a 	sll	r17,r17,r18
 400bf98:	8108d83a 	srl	r4,r16,r4
 400bf9c:	34a6983a 	sll	r19,r6,r18
 400bfa0:	84a8983a 	sll	r20,r16,r18
 400bfa4:	2478b03a 	or	fp,r4,r17
 400bfa8:	982ed43a 	srli	r23,r19,16
 400bfac:	e009883a 	mov	r4,fp
 400bfb0:	9dbfffcc 	andi	r22,r19,65535
 400bfb4:	b80b883a 	mov	r5,r23
 400bfb8:	400c5a80 	call	400c5a8 <__umodsi3>
 400bfbc:	e009883a 	mov	r4,fp
 400bfc0:	b80b883a 	mov	r5,r23
 400bfc4:	102b883a 	mov	r21,r2
 400bfc8:	400c5440 	call	400c544 <__udivsi3>
 400bfcc:	a806943a 	slli	r3,r21,16
 400bfd0:	a008d43a 	srli	r4,r20,16
 400bfd4:	b085383a 	mul	r2,r22,r2
 400bfd8:	20c8b03a 	or	r4,r4,r3
 400bfdc:	2080032e 	bgeu	r4,r2,400bfec <__umoddi3+0xd8>
 400bfe0:	24c9883a 	add	r4,r4,r19
 400bfe4:	24c00136 	bltu	r4,r19,400bfec <__umoddi3+0xd8>
 400bfe8:	20811036 	bltu	r4,r2,400c42c <__umoddi3+0x518>
 400bfec:	20abc83a 	sub	r21,r4,r2
 400bff0:	b80b883a 	mov	r5,r23
 400bff4:	a809883a 	mov	r4,r21
 400bff8:	400c5a80 	call	400c5a8 <__umodsi3>
 400bffc:	1023883a 	mov	r17,r2
 400c000:	b80b883a 	mov	r5,r23
 400c004:	a809883a 	mov	r4,r21
 400c008:	400c5440 	call	400c544 <__udivsi3>
 400c00c:	8822943a 	slli	r17,r17,16
 400c010:	b085383a 	mul	r2,r22,r2
 400c014:	a0ffffcc 	andi	r3,r20,65535
 400c018:	1c46b03a 	or	r3,r3,r17
 400c01c:	1880042e 	bgeu	r3,r2,400c030 <__umoddi3+0x11c>
 400c020:	1cc7883a 	add	r3,r3,r19
 400c024:	1cc00236 	bltu	r3,r19,400c030 <__umoddi3+0x11c>
 400c028:	1880012e 	bgeu	r3,r2,400c030 <__umoddi3+0x11c>
 400c02c:	1cc7883a 	add	r3,r3,r19
 400c030:	1885c83a 	sub	r2,r3,r2
 400c034:	1484d83a 	srl	r2,r2,r18
 400c038:	0007883a 	mov	r3,zero
 400c03c:	00004f06 	br	400c17c <__umoddi3+0x268>
 400c040:	29c04c36 	bltu	r5,r7,400c174 <__umoddi3+0x260>
 400c044:	00bfffd4 	movui	r2,65535
 400c048:	11c0582e 	bgeu	r2,r7,400c1ac <__umoddi3+0x298>
 400c04c:	00804034 	movhi	r2,256
 400c050:	10bfffc4 	addi	r2,r2,-1
 400c054:	11c0e736 	bltu	r2,r7,400c3f4 <__umoddi3+0x4e0>
 400c058:	01000404 	movi	r4,16
 400c05c:	3904d83a 	srl	r2,r7,r4
 400c060:	00c10074 	movhi	r3,1025
 400c064:	18d4e904 	addi	r3,r3,21412
 400c068:	1885883a 	add	r2,r3,r2
 400c06c:	14c00003 	ldbu	r19,0(r2)
 400c070:	00c00804 	movi	r3,32
 400c074:	9927883a 	add	r19,r19,r4
 400c078:	1ce9c83a 	sub	r20,r3,r19
 400c07c:	a000581e 	bne	r20,zero,400c1e0 <__umoddi3+0x2cc>
 400c080:	3c400136 	bltu	r7,r17,400c088 <__umoddi3+0x174>
 400c084:	8180eb36 	bltu	r16,r6,400c434 <__umoddi3+0x520>
 400c088:	8185c83a 	sub	r2,r16,r6
 400c08c:	89e3c83a 	sub	r17,r17,r7
 400c090:	8089803a 	cmpltu	r4,r16,r2
 400c094:	8939c83a 	sub	fp,r17,r4
 400c098:	e007883a 	mov	r3,fp
 400c09c:	00003706 	br	400c17c <__umoddi3+0x268>
 400c0a0:	3000041e 	bne	r6,zero,400c0b4 <__umoddi3+0x1a0>
 400c0a4:	000b883a 	mov	r5,zero
 400c0a8:	01000044 	movi	r4,1
 400c0ac:	400c5440 	call	400c544 <__udivsi3>
 400c0b0:	1027883a 	mov	r19,r2
 400c0b4:	00bfffd4 	movui	r2,65535
 400c0b8:	14c0402e 	bgeu	r2,r19,400c1bc <__umoddi3+0x2a8>
 400c0bc:	00804034 	movhi	r2,256
 400c0c0:	10bfffc4 	addi	r2,r2,-1
 400c0c4:	14c0cd36 	bltu	r2,r19,400c3fc <__umoddi3+0x4e8>
 400c0c8:	00800404 	movi	r2,16
 400c0cc:	9886d83a 	srl	r3,r19,r2
 400c0d0:	01010074 	movhi	r4,1025
 400c0d4:	2114e904 	addi	r4,r4,21412
 400c0d8:	20c7883a 	add	r3,r4,r3
 400c0dc:	18c00003 	ldbu	r3,0(r3)
 400c0e0:	1887883a 	add	r3,r3,r2
 400c0e4:	00800804 	movi	r2,32
 400c0e8:	10e5c83a 	sub	r18,r2,r3
 400c0ec:	9000901e 	bne	r18,zero,400c330 <__umoddi3+0x41c>
 400c0f0:	982cd43a 	srli	r22,r19,16
 400c0f4:	8ce3c83a 	sub	r17,r17,r19
 400c0f8:	9d7fffcc 	andi	r21,r19,65535
 400c0fc:	b00b883a 	mov	r5,r22
 400c100:	8809883a 	mov	r4,r17
 400c104:	400c5a80 	call	400c5a8 <__umodsi3>
 400c108:	8809883a 	mov	r4,r17
 400c10c:	b00b883a 	mov	r5,r22
 400c110:	1021883a 	mov	r16,r2
 400c114:	400c5440 	call	400c544 <__udivsi3>
 400c118:	8006943a 	slli	r3,r16,16
 400c11c:	a008d43a 	srli	r4,r20,16
 400c120:	1545383a 	mul	r2,r2,r21
 400c124:	20c8b03a 	or	r4,r4,r3
 400c128:	2080042e 	bgeu	r4,r2,400c13c <__umoddi3+0x228>
 400c12c:	24c9883a 	add	r4,r4,r19
 400c130:	24c00236 	bltu	r4,r19,400c13c <__umoddi3+0x228>
 400c134:	2080012e 	bgeu	r4,r2,400c13c <__umoddi3+0x228>
 400c138:	24c9883a 	add	r4,r4,r19
 400c13c:	20a1c83a 	sub	r16,r4,r2
 400c140:	b00b883a 	mov	r5,r22
 400c144:	8009883a 	mov	r4,r16
 400c148:	400c5a80 	call	400c5a8 <__umodsi3>
 400c14c:	1023883a 	mov	r17,r2
 400c150:	b00b883a 	mov	r5,r22
 400c154:	8009883a 	mov	r4,r16
 400c158:	400c5440 	call	400c544 <__udivsi3>
 400c15c:	8822943a 	slli	r17,r17,16
 400c160:	1545383a 	mul	r2,r2,r21
 400c164:	a53fffcc 	andi	r20,r20,65535
 400c168:	a446b03a 	or	r3,r20,r17
 400c16c:	18bfb02e 	bgeu	r3,r2,400c030 <__reset+0xfa81c030>
 400c170:	003fab06 	br	400c020 <__reset+0xfa81c020>
 400c174:	2005883a 	mov	r2,r4
 400c178:	2807883a 	mov	r3,r5
 400c17c:	dfc00b17 	ldw	ra,44(sp)
 400c180:	df000a17 	ldw	fp,40(sp)
 400c184:	ddc00917 	ldw	r23,36(sp)
 400c188:	dd800817 	ldw	r22,32(sp)
 400c18c:	dd400717 	ldw	r21,28(sp)
 400c190:	dd000617 	ldw	r20,24(sp)
 400c194:	dcc00517 	ldw	r19,20(sp)
 400c198:	dc800417 	ldw	r18,16(sp)
 400c19c:	dc400317 	ldw	r17,12(sp)
 400c1a0:	dc000217 	ldw	r16,8(sp)
 400c1a4:	dec00c04 	addi	sp,sp,48
 400c1a8:	f800283a 	ret
 400c1ac:	04c03fc4 	movi	r19,255
 400c1b0:	99c9803a 	cmpltu	r4,r19,r7
 400c1b4:	200890fa 	slli	r4,r4,3
 400c1b8:	003fa806 	br	400c05c <__reset+0xfa81c05c>
 400c1bc:	00803fc4 	movi	r2,255
 400c1c0:	14c5803a 	cmpltu	r2,r2,r19
 400c1c4:	100490fa 	slli	r2,r2,3
 400c1c8:	003fc006 	br	400c0cc <__reset+0xfa81c0cc>
 400c1cc:	00804034 	movhi	r2,256
 400c1d0:	10bfffc4 	addi	r2,r2,-1
 400c1d4:	11808b36 	bltu	r2,r6,400c404 <__umoddi3+0x4f0>
 400c1d8:	01000404 	movi	r4,16
 400c1dc:	003f6406 	br	400bf70 <__reset+0xfa81bf70>
 400c1e0:	34c4d83a 	srl	r2,r6,r19
 400c1e4:	3d0e983a 	sll	r7,r7,r20
 400c1e8:	8cf8d83a 	srl	fp,r17,r19
 400c1ec:	8d10983a 	sll	r8,r17,r20
 400c1f0:	38aab03a 	or	r21,r7,r2
 400c1f4:	a82cd43a 	srli	r22,r21,16
 400c1f8:	84e2d83a 	srl	r17,r16,r19
 400c1fc:	e009883a 	mov	r4,fp
 400c200:	b00b883a 	mov	r5,r22
 400c204:	8a22b03a 	or	r17,r17,r8
 400c208:	3524983a 	sll	r18,r6,r20
 400c20c:	400c5a80 	call	400c5a8 <__umodsi3>
 400c210:	e009883a 	mov	r4,fp
 400c214:	b00b883a 	mov	r5,r22
 400c218:	102f883a 	mov	r23,r2
 400c21c:	400c5440 	call	400c544 <__udivsi3>
 400c220:	100d883a 	mov	r6,r2
 400c224:	b808943a 	slli	r4,r23,16
 400c228:	aa3fffcc 	andi	r8,r21,65535
 400c22c:	8804d43a 	srli	r2,r17,16
 400c230:	41af383a 	mul	r23,r8,r6
 400c234:	8520983a 	sll	r16,r16,r20
 400c238:	1104b03a 	or	r2,r2,r4
 400c23c:	15c0042e 	bgeu	r2,r23,400c250 <__umoddi3+0x33c>
 400c240:	1545883a 	add	r2,r2,r21
 400c244:	30ffffc4 	addi	r3,r6,-1
 400c248:	1540742e 	bgeu	r2,r21,400c41c <__umoddi3+0x508>
 400c24c:	180d883a 	mov	r6,r3
 400c250:	15efc83a 	sub	r23,r2,r23
 400c254:	b00b883a 	mov	r5,r22
 400c258:	b809883a 	mov	r4,r23
 400c25c:	d9800115 	stw	r6,4(sp)
 400c260:	da000015 	stw	r8,0(sp)
 400c264:	400c5a80 	call	400c5a8 <__umodsi3>
 400c268:	b00b883a 	mov	r5,r22
 400c26c:	b809883a 	mov	r4,r23
 400c270:	1039883a 	mov	fp,r2
 400c274:	400c5440 	call	400c544 <__udivsi3>
 400c278:	da000017 	ldw	r8,0(sp)
 400c27c:	e038943a 	slli	fp,fp,16
 400c280:	100b883a 	mov	r5,r2
 400c284:	4089383a 	mul	r4,r8,r2
 400c288:	8a3fffcc 	andi	r8,r17,65535
 400c28c:	4710b03a 	or	r8,r8,fp
 400c290:	d9800117 	ldw	r6,4(sp)
 400c294:	4100042e 	bgeu	r8,r4,400c2a8 <__umoddi3+0x394>
 400c298:	4551883a 	add	r8,r8,r21
 400c29c:	10bfffc4 	addi	r2,r2,-1
 400c2a0:	45405a2e 	bgeu	r8,r21,400c40c <__umoddi3+0x4f8>
 400c2a4:	100b883a 	mov	r5,r2
 400c2a8:	300c943a 	slli	r6,r6,16
 400c2ac:	91ffffcc 	andi	r7,r18,65535
 400c2b0:	9004d43a 	srli	r2,r18,16
 400c2b4:	314cb03a 	or	r6,r6,r5
 400c2b8:	317fffcc 	andi	r5,r6,65535
 400c2bc:	300cd43a 	srli	r6,r6,16
 400c2c0:	29d3383a 	mul	r9,r5,r7
 400c2c4:	288b383a 	mul	r5,r5,r2
 400c2c8:	31cf383a 	mul	r7,r6,r7
 400c2cc:	4806d43a 	srli	r3,r9,16
 400c2d0:	4111c83a 	sub	r8,r8,r4
 400c2d4:	29cb883a 	add	r5,r5,r7
 400c2d8:	194b883a 	add	r5,r3,r5
 400c2dc:	3085383a 	mul	r2,r6,r2
 400c2e0:	29c0022e 	bgeu	r5,r7,400c2ec <__umoddi3+0x3d8>
 400c2e4:	00c00074 	movhi	r3,1
 400c2e8:	10c5883a 	add	r2,r2,r3
 400c2ec:	2808d43a 	srli	r4,r5,16
 400c2f0:	280a943a 	slli	r5,r5,16
 400c2f4:	4a7fffcc 	andi	r9,r9,65535
 400c2f8:	2085883a 	add	r2,r4,r2
 400c2fc:	2a4b883a 	add	r5,r5,r9
 400c300:	40803636 	bltu	r8,r2,400c3dc <__umoddi3+0x4c8>
 400c304:	40804d26 	beq	r8,r2,400c43c <__umoddi3+0x528>
 400c308:	4089c83a 	sub	r4,r8,r2
 400c30c:	280f883a 	mov	r7,r5
 400c310:	81cfc83a 	sub	r7,r16,r7
 400c314:	81c7803a 	cmpltu	r3,r16,r7
 400c318:	20c7c83a 	sub	r3,r4,r3
 400c31c:	1cc4983a 	sll	r2,r3,r19
 400c320:	3d0ed83a 	srl	r7,r7,r20
 400c324:	1d06d83a 	srl	r3,r3,r20
 400c328:	11c4b03a 	or	r2,r2,r7
 400c32c:	003f9306 	br	400c17c <__reset+0xfa81c17c>
 400c330:	9ca6983a 	sll	r19,r19,r18
 400c334:	88e8d83a 	srl	r20,r17,r3
 400c338:	80c4d83a 	srl	r2,r16,r3
 400c33c:	982cd43a 	srli	r22,r19,16
 400c340:	8ca2983a 	sll	r17,r17,r18
 400c344:	a009883a 	mov	r4,r20
 400c348:	b00b883a 	mov	r5,r22
 400c34c:	1478b03a 	or	fp,r2,r17
 400c350:	400c5a80 	call	400c5a8 <__umodsi3>
 400c354:	a009883a 	mov	r4,r20
 400c358:	b00b883a 	mov	r5,r22
 400c35c:	1023883a 	mov	r17,r2
 400c360:	400c5440 	call	400c544 <__udivsi3>
 400c364:	9d7fffcc 	andi	r21,r19,65535
 400c368:	880a943a 	slli	r5,r17,16
 400c36c:	e008d43a 	srli	r4,fp,16
 400c370:	a885383a 	mul	r2,r21,r2
 400c374:	84a8983a 	sll	r20,r16,r18
 400c378:	2148b03a 	or	r4,r4,r5
 400c37c:	2080042e 	bgeu	r4,r2,400c390 <__umoddi3+0x47c>
 400c380:	24c9883a 	add	r4,r4,r19
 400c384:	24c00236 	bltu	r4,r19,400c390 <__umoddi3+0x47c>
 400c388:	2080012e 	bgeu	r4,r2,400c390 <__umoddi3+0x47c>
 400c38c:	24c9883a 	add	r4,r4,r19
 400c390:	20a3c83a 	sub	r17,r4,r2
 400c394:	b00b883a 	mov	r5,r22
 400c398:	8809883a 	mov	r4,r17
 400c39c:	400c5a80 	call	400c5a8 <__umodsi3>
 400c3a0:	102f883a 	mov	r23,r2
 400c3a4:	8809883a 	mov	r4,r17
 400c3a8:	b00b883a 	mov	r5,r22
 400c3ac:	400c5440 	call	400c544 <__udivsi3>
 400c3b0:	b82e943a 	slli	r23,r23,16
 400c3b4:	a885383a 	mul	r2,r21,r2
 400c3b8:	e13fffcc 	andi	r4,fp,65535
 400c3bc:	25c8b03a 	or	r4,r4,r23
 400c3c0:	2080042e 	bgeu	r4,r2,400c3d4 <__umoddi3+0x4c0>
 400c3c4:	24c9883a 	add	r4,r4,r19
 400c3c8:	24c00236 	bltu	r4,r19,400c3d4 <__umoddi3+0x4c0>
 400c3cc:	2080012e 	bgeu	r4,r2,400c3d4 <__umoddi3+0x4c0>
 400c3d0:	24c9883a 	add	r4,r4,r19
 400c3d4:	20a3c83a 	sub	r17,r4,r2
 400c3d8:	003f4806 	br	400c0fc <__reset+0xfa81c0fc>
 400c3dc:	2c8fc83a 	sub	r7,r5,r18
 400c3e0:	1545c83a 	sub	r2,r2,r21
 400c3e4:	29cb803a 	cmpltu	r5,r5,r7
 400c3e8:	1145c83a 	sub	r2,r2,r5
 400c3ec:	4089c83a 	sub	r4,r8,r2
 400c3f0:	003fc706 	br	400c310 <__reset+0xfa81c310>
 400c3f4:	01000604 	movi	r4,24
 400c3f8:	003f1806 	br	400c05c <__reset+0xfa81c05c>
 400c3fc:	00800604 	movi	r2,24
 400c400:	003f3206 	br	400c0cc <__reset+0xfa81c0cc>
 400c404:	01000604 	movi	r4,24
 400c408:	003ed906 	br	400bf70 <__reset+0xfa81bf70>
 400c40c:	413fa52e 	bgeu	r8,r4,400c2a4 <__reset+0xfa81c2a4>
 400c410:	297fff84 	addi	r5,r5,-2
 400c414:	4551883a 	add	r8,r8,r21
 400c418:	003fa306 	br	400c2a8 <__reset+0xfa81c2a8>
 400c41c:	15ff8b2e 	bgeu	r2,r23,400c24c <__reset+0xfa81c24c>
 400c420:	31bfff84 	addi	r6,r6,-2
 400c424:	1545883a 	add	r2,r2,r21
 400c428:	003f8906 	br	400c250 <__reset+0xfa81c250>
 400c42c:	24c9883a 	add	r4,r4,r19
 400c430:	003eee06 	br	400bfec <__reset+0xfa81bfec>
 400c434:	8005883a 	mov	r2,r16
 400c438:	003f1706 	br	400c098 <__reset+0xfa81c098>
 400c43c:	817fe736 	bltu	r16,r5,400c3dc <__reset+0xfa81c3dc>
 400c440:	280f883a 	mov	r7,r5
 400c444:	0009883a 	mov	r4,zero
 400c448:	003fb106 	br	400c310 <__reset+0xfa81c310>

0400c44c <__divsi3>:
 400c44c:	20001b16 	blt	r4,zero,400c4bc <__divsi3+0x70>
 400c450:	000f883a 	mov	r7,zero
 400c454:	28001616 	blt	r5,zero,400c4b0 <__divsi3+0x64>
 400c458:	200d883a 	mov	r6,r4
 400c45c:	29001a2e 	bgeu	r5,r4,400c4c8 <__divsi3+0x7c>
 400c460:	00800804 	movi	r2,32
 400c464:	00c00044 	movi	r3,1
 400c468:	00000106 	br	400c470 <__divsi3+0x24>
 400c46c:	10000d26 	beq	r2,zero,400c4a4 <__divsi3+0x58>
 400c470:	294b883a 	add	r5,r5,r5
 400c474:	10bfffc4 	addi	r2,r2,-1
 400c478:	18c7883a 	add	r3,r3,r3
 400c47c:	293ffb36 	bltu	r5,r4,400c46c <__reset+0xfa81c46c>
 400c480:	0005883a 	mov	r2,zero
 400c484:	18000726 	beq	r3,zero,400c4a4 <__divsi3+0x58>
 400c488:	0005883a 	mov	r2,zero
 400c48c:	31400236 	bltu	r6,r5,400c498 <__divsi3+0x4c>
 400c490:	314dc83a 	sub	r6,r6,r5
 400c494:	10c4b03a 	or	r2,r2,r3
 400c498:	1806d07a 	srli	r3,r3,1
 400c49c:	280ad07a 	srli	r5,r5,1
 400c4a0:	183ffa1e 	bne	r3,zero,400c48c <__reset+0xfa81c48c>
 400c4a4:	38000126 	beq	r7,zero,400c4ac <__divsi3+0x60>
 400c4a8:	0085c83a 	sub	r2,zero,r2
 400c4ac:	f800283a 	ret
 400c4b0:	014bc83a 	sub	r5,zero,r5
 400c4b4:	39c0005c 	xori	r7,r7,1
 400c4b8:	003fe706 	br	400c458 <__reset+0xfa81c458>
 400c4bc:	0109c83a 	sub	r4,zero,r4
 400c4c0:	01c00044 	movi	r7,1
 400c4c4:	003fe306 	br	400c454 <__reset+0xfa81c454>
 400c4c8:	00c00044 	movi	r3,1
 400c4cc:	003fee06 	br	400c488 <__reset+0xfa81c488>

0400c4d0 <__modsi3>:
 400c4d0:	20001716 	blt	r4,zero,400c530 <__modsi3+0x60>
 400c4d4:	000f883a 	mov	r7,zero
 400c4d8:	2005883a 	mov	r2,r4
 400c4dc:	28001216 	blt	r5,zero,400c528 <__modsi3+0x58>
 400c4e0:	2900162e 	bgeu	r5,r4,400c53c <__modsi3+0x6c>
 400c4e4:	01800804 	movi	r6,32
 400c4e8:	00c00044 	movi	r3,1
 400c4ec:	00000106 	br	400c4f4 <__modsi3+0x24>
 400c4f0:	30000a26 	beq	r6,zero,400c51c <__modsi3+0x4c>
 400c4f4:	294b883a 	add	r5,r5,r5
 400c4f8:	31bfffc4 	addi	r6,r6,-1
 400c4fc:	18c7883a 	add	r3,r3,r3
 400c500:	293ffb36 	bltu	r5,r4,400c4f0 <__reset+0xfa81c4f0>
 400c504:	18000526 	beq	r3,zero,400c51c <__modsi3+0x4c>
 400c508:	1806d07a 	srli	r3,r3,1
 400c50c:	11400136 	bltu	r2,r5,400c514 <__modsi3+0x44>
 400c510:	1145c83a 	sub	r2,r2,r5
 400c514:	280ad07a 	srli	r5,r5,1
 400c518:	183ffb1e 	bne	r3,zero,400c508 <__reset+0xfa81c508>
 400c51c:	38000126 	beq	r7,zero,400c524 <__modsi3+0x54>
 400c520:	0085c83a 	sub	r2,zero,r2
 400c524:	f800283a 	ret
 400c528:	014bc83a 	sub	r5,zero,r5
 400c52c:	003fec06 	br	400c4e0 <__reset+0xfa81c4e0>
 400c530:	0109c83a 	sub	r4,zero,r4
 400c534:	01c00044 	movi	r7,1
 400c538:	003fe706 	br	400c4d8 <__reset+0xfa81c4d8>
 400c53c:	00c00044 	movi	r3,1
 400c540:	003ff106 	br	400c508 <__reset+0xfa81c508>

0400c544 <__udivsi3>:
 400c544:	200d883a 	mov	r6,r4
 400c548:	2900152e 	bgeu	r5,r4,400c5a0 <__udivsi3+0x5c>
 400c54c:	28001416 	blt	r5,zero,400c5a0 <__udivsi3+0x5c>
 400c550:	00800804 	movi	r2,32
 400c554:	00c00044 	movi	r3,1
 400c558:	00000206 	br	400c564 <__udivsi3+0x20>
 400c55c:	10000e26 	beq	r2,zero,400c598 <__udivsi3+0x54>
 400c560:	28000516 	blt	r5,zero,400c578 <__udivsi3+0x34>
 400c564:	294b883a 	add	r5,r5,r5
 400c568:	10bfffc4 	addi	r2,r2,-1
 400c56c:	18c7883a 	add	r3,r3,r3
 400c570:	293ffa36 	bltu	r5,r4,400c55c <__reset+0xfa81c55c>
 400c574:	18000826 	beq	r3,zero,400c598 <__udivsi3+0x54>
 400c578:	0005883a 	mov	r2,zero
 400c57c:	31400236 	bltu	r6,r5,400c588 <__udivsi3+0x44>
 400c580:	314dc83a 	sub	r6,r6,r5
 400c584:	10c4b03a 	or	r2,r2,r3
 400c588:	1806d07a 	srli	r3,r3,1
 400c58c:	280ad07a 	srli	r5,r5,1
 400c590:	183ffa1e 	bne	r3,zero,400c57c <__reset+0xfa81c57c>
 400c594:	f800283a 	ret
 400c598:	0005883a 	mov	r2,zero
 400c59c:	f800283a 	ret
 400c5a0:	00c00044 	movi	r3,1
 400c5a4:	003ff406 	br	400c578 <__reset+0xfa81c578>

0400c5a8 <__umodsi3>:
 400c5a8:	2005883a 	mov	r2,r4
 400c5ac:	2900122e 	bgeu	r5,r4,400c5f8 <__umodsi3+0x50>
 400c5b0:	28001116 	blt	r5,zero,400c5f8 <__umodsi3+0x50>
 400c5b4:	01800804 	movi	r6,32
 400c5b8:	00c00044 	movi	r3,1
 400c5bc:	00000206 	br	400c5c8 <__umodsi3+0x20>
 400c5c0:	30000c26 	beq	r6,zero,400c5f4 <__umodsi3+0x4c>
 400c5c4:	28000516 	blt	r5,zero,400c5dc <__umodsi3+0x34>
 400c5c8:	294b883a 	add	r5,r5,r5
 400c5cc:	31bfffc4 	addi	r6,r6,-1
 400c5d0:	18c7883a 	add	r3,r3,r3
 400c5d4:	293ffa36 	bltu	r5,r4,400c5c0 <__reset+0xfa81c5c0>
 400c5d8:	18000626 	beq	r3,zero,400c5f4 <__umodsi3+0x4c>
 400c5dc:	1806d07a 	srli	r3,r3,1
 400c5e0:	11400136 	bltu	r2,r5,400c5e8 <__umodsi3+0x40>
 400c5e4:	1145c83a 	sub	r2,r2,r5
 400c5e8:	280ad07a 	srli	r5,r5,1
 400c5ec:	183ffb1e 	bne	r3,zero,400c5dc <__reset+0xfa81c5dc>
 400c5f0:	f800283a 	ret
 400c5f4:	f800283a 	ret
 400c5f8:	00c00044 	movi	r3,1
 400c5fc:	003ff706 	br	400c5dc <__reset+0xfa81c5dc>

0400c600 <__adddf3>:
 400c600:	02c00434 	movhi	r11,16
 400c604:	5affffc4 	addi	r11,r11,-1
 400c608:	2806d7fa 	srli	r3,r5,31
 400c60c:	2ad4703a 	and	r10,r5,r11
 400c610:	3ad2703a 	and	r9,r7,r11
 400c614:	3804d53a 	srli	r2,r7,20
 400c618:	3018d77a 	srli	r12,r6,29
 400c61c:	280ad53a 	srli	r5,r5,20
 400c620:	501490fa 	slli	r10,r10,3
 400c624:	2010d77a 	srli	r8,r4,29
 400c628:	481290fa 	slli	r9,r9,3
 400c62c:	380ed7fa 	srli	r7,r7,31
 400c630:	defffb04 	addi	sp,sp,-20
 400c634:	dc800215 	stw	r18,8(sp)
 400c638:	dc400115 	stw	r17,4(sp)
 400c63c:	dc000015 	stw	r16,0(sp)
 400c640:	dfc00415 	stw	ra,16(sp)
 400c644:	dcc00315 	stw	r19,12(sp)
 400c648:	1c803fcc 	andi	r18,r3,255
 400c64c:	2c01ffcc 	andi	r16,r5,2047
 400c650:	5210b03a 	or	r8,r10,r8
 400c654:	202290fa 	slli	r17,r4,3
 400c658:	1081ffcc 	andi	r2,r2,2047
 400c65c:	4b12b03a 	or	r9,r9,r12
 400c660:	300c90fa 	slli	r6,r6,3
 400c664:	91c07526 	beq	r18,r7,400c83c <__adddf3+0x23c>
 400c668:	8087c83a 	sub	r3,r16,r2
 400c66c:	00c0ab0e 	bge	zero,r3,400c91c <__adddf3+0x31c>
 400c670:	10002a1e 	bne	r2,zero,400c71c <__adddf3+0x11c>
 400c674:	4984b03a 	or	r2,r9,r6
 400c678:	1000961e 	bne	r2,zero,400c8d4 <__adddf3+0x2d4>
 400c67c:	888001cc 	andi	r2,r17,7
 400c680:	10000726 	beq	r2,zero,400c6a0 <__adddf3+0xa0>
 400c684:	888003cc 	andi	r2,r17,15
 400c688:	00c00104 	movi	r3,4
 400c68c:	10c00426 	beq	r2,r3,400c6a0 <__adddf3+0xa0>
 400c690:	88c7883a 	add	r3,r17,r3
 400c694:	1c63803a 	cmpltu	r17,r3,r17
 400c698:	4451883a 	add	r8,r8,r17
 400c69c:	1823883a 	mov	r17,r3
 400c6a0:	4080202c 	andhi	r2,r8,128
 400c6a4:	10005926 	beq	r2,zero,400c80c <__adddf3+0x20c>
 400c6a8:	84000044 	addi	r16,r16,1
 400c6ac:	0081ffc4 	movi	r2,2047
 400c6b0:	8080ba26 	beq	r16,r2,400c99c <__adddf3+0x39c>
 400c6b4:	00bfe034 	movhi	r2,65408
 400c6b8:	10bfffc4 	addi	r2,r2,-1
 400c6bc:	4090703a 	and	r8,r8,r2
 400c6c0:	4004977a 	slli	r2,r8,29
 400c6c4:	4010927a 	slli	r8,r8,9
 400c6c8:	8822d0fa 	srli	r17,r17,3
 400c6cc:	8401ffcc 	andi	r16,r16,2047
 400c6d0:	4010d33a 	srli	r8,r8,12
 400c6d4:	9007883a 	mov	r3,r18
 400c6d8:	1444b03a 	or	r2,r2,r17
 400c6dc:	8401ffcc 	andi	r16,r16,2047
 400c6e0:	8020953a 	slli	r16,r16,20
 400c6e4:	18c03fcc 	andi	r3,r3,255
 400c6e8:	01000434 	movhi	r4,16
 400c6ec:	213fffc4 	addi	r4,r4,-1
 400c6f0:	180697fa 	slli	r3,r3,31
 400c6f4:	4110703a 	and	r8,r8,r4
 400c6f8:	4410b03a 	or	r8,r8,r16
 400c6fc:	40c6b03a 	or	r3,r8,r3
 400c700:	dfc00417 	ldw	ra,16(sp)
 400c704:	dcc00317 	ldw	r19,12(sp)
 400c708:	dc800217 	ldw	r18,8(sp)
 400c70c:	dc400117 	ldw	r17,4(sp)
 400c710:	dc000017 	ldw	r16,0(sp)
 400c714:	dec00504 	addi	sp,sp,20
 400c718:	f800283a 	ret
 400c71c:	0081ffc4 	movi	r2,2047
 400c720:	80bfd626 	beq	r16,r2,400c67c <__reset+0xfa81c67c>
 400c724:	4a402034 	orhi	r9,r9,128
 400c728:	00800e04 	movi	r2,56
 400c72c:	10c09f16 	blt	r2,r3,400c9ac <__adddf3+0x3ac>
 400c730:	008007c4 	movi	r2,31
 400c734:	10c0c216 	blt	r2,r3,400ca40 <__adddf3+0x440>
 400c738:	00800804 	movi	r2,32
 400c73c:	10c5c83a 	sub	r2,r2,r3
 400c740:	488a983a 	sll	r5,r9,r2
 400c744:	30c8d83a 	srl	r4,r6,r3
 400c748:	3084983a 	sll	r2,r6,r2
 400c74c:	48c6d83a 	srl	r3,r9,r3
 400c750:	290cb03a 	or	r6,r5,r4
 400c754:	1004c03a 	cmpne	r2,r2,zero
 400c758:	308cb03a 	or	r6,r6,r2
 400c75c:	898dc83a 	sub	r6,r17,r6
 400c760:	89a3803a 	cmpltu	r17,r17,r6
 400c764:	40d1c83a 	sub	r8,r8,r3
 400c768:	4451c83a 	sub	r8,r8,r17
 400c76c:	3023883a 	mov	r17,r6
 400c770:	4080202c 	andhi	r2,r8,128
 400c774:	10002326 	beq	r2,zero,400c804 <__adddf3+0x204>
 400c778:	04c02034 	movhi	r19,128
 400c77c:	9cffffc4 	addi	r19,r19,-1
 400c780:	44e6703a 	and	r19,r8,r19
 400c784:	98007626 	beq	r19,zero,400c960 <__adddf3+0x360>
 400c788:	9809883a 	mov	r4,r19
 400c78c:	400ec040 	call	400ec04 <__clzsi2>
 400c790:	10fffe04 	addi	r3,r2,-8
 400c794:	010007c4 	movi	r4,31
 400c798:	20c07716 	blt	r4,r3,400c978 <__adddf3+0x378>
 400c79c:	00800804 	movi	r2,32
 400c7a0:	10c5c83a 	sub	r2,r2,r3
 400c7a4:	8884d83a 	srl	r2,r17,r2
 400c7a8:	98d0983a 	sll	r8,r19,r3
 400c7ac:	88e2983a 	sll	r17,r17,r3
 400c7b0:	1204b03a 	or	r2,r2,r8
 400c7b4:	1c007416 	blt	r3,r16,400c988 <__adddf3+0x388>
 400c7b8:	1c21c83a 	sub	r16,r3,r16
 400c7bc:	82000044 	addi	r8,r16,1
 400c7c0:	00c007c4 	movi	r3,31
 400c7c4:	1a009116 	blt	r3,r8,400ca0c <__adddf3+0x40c>
 400c7c8:	00c00804 	movi	r3,32
 400c7cc:	1a07c83a 	sub	r3,r3,r8
 400c7d0:	8a08d83a 	srl	r4,r17,r8
 400c7d4:	88e2983a 	sll	r17,r17,r3
 400c7d8:	10c6983a 	sll	r3,r2,r3
 400c7dc:	1210d83a 	srl	r8,r2,r8
 400c7e0:	8804c03a 	cmpne	r2,r17,zero
 400c7e4:	1906b03a 	or	r3,r3,r4
 400c7e8:	18a2b03a 	or	r17,r3,r2
 400c7ec:	0021883a 	mov	r16,zero
 400c7f0:	003fa206 	br	400c67c <__reset+0xfa81c67c>
 400c7f4:	1890b03a 	or	r8,r3,r2
 400c7f8:	40017d26 	beq	r8,zero,400cdf0 <__adddf3+0x7f0>
 400c7fc:	1011883a 	mov	r8,r2
 400c800:	1823883a 	mov	r17,r3
 400c804:	888001cc 	andi	r2,r17,7
 400c808:	103f9e1e 	bne	r2,zero,400c684 <__reset+0xfa81c684>
 400c80c:	4004977a 	slli	r2,r8,29
 400c810:	8822d0fa 	srli	r17,r17,3
 400c814:	4010d0fa 	srli	r8,r8,3
 400c818:	9007883a 	mov	r3,r18
 400c81c:	1444b03a 	or	r2,r2,r17
 400c820:	0101ffc4 	movi	r4,2047
 400c824:	81002426 	beq	r16,r4,400c8b8 <__adddf3+0x2b8>
 400c828:	8120703a 	and	r16,r16,r4
 400c82c:	01000434 	movhi	r4,16
 400c830:	213fffc4 	addi	r4,r4,-1
 400c834:	4110703a 	and	r8,r8,r4
 400c838:	003fa806 	br	400c6dc <__reset+0xfa81c6dc>
 400c83c:	8089c83a 	sub	r4,r16,r2
 400c840:	01005e0e 	bge	zero,r4,400c9bc <__adddf3+0x3bc>
 400c844:	10002b26 	beq	r2,zero,400c8f4 <__adddf3+0x2f4>
 400c848:	0081ffc4 	movi	r2,2047
 400c84c:	80bf8b26 	beq	r16,r2,400c67c <__reset+0xfa81c67c>
 400c850:	4a402034 	orhi	r9,r9,128
 400c854:	00800e04 	movi	r2,56
 400c858:	1100a40e 	bge	r2,r4,400caec <__adddf3+0x4ec>
 400c85c:	498cb03a 	or	r6,r9,r6
 400c860:	300ac03a 	cmpne	r5,r6,zero
 400c864:	0013883a 	mov	r9,zero
 400c868:	2c4b883a 	add	r5,r5,r17
 400c86c:	2c63803a 	cmpltu	r17,r5,r17
 400c870:	4a11883a 	add	r8,r9,r8
 400c874:	8a11883a 	add	r8,r17,r8
 400c878:	2823883a 	mov	r17,r5
 400c87c:	4080202c 	andhi	r2,r8,128
 400c880:	103fe026 	beq	r2,zero,400c804 <__reset+0xfa81c804>
 400c884:	84000044 	addi	r16,r16,1
 400c888:	0081ffc4 	movi	r2,2047
 400c88c:	8080d226 	beq	r16,r2,400cbd8 <__adddf3+0x5d8>
 400c890:	00bfe034 	movhi	r2,65408
 400c894:	10bfffc4 	addi	r2,r2,-1
 400c898:	4090703a 	and	r8,r8,r2
 400c89c:	880ad07a 	srli	r5,r17,1
 400c8a0:	400897fa 	slli	r4,r8,31
 400c8a4:	88c0004c 	andi	r3,r17,1
 400c8a8:	28e2b03a 	or	r17,r5,r3
 400c8ac:	4010d07a 	srli	r8,r8,1
 400c8b0:	2462b03a 	or	r17,r4,r17
 400c8b4:	003f7106 	br	400c67c <__reset+0xfa81c67c>
 400c8b8:	4088b03a 	or	r4,r8,r2
 400c8bc:	20014526 	beq	r4,zero,400cdd4 <__adddf3+0x7d4>
 400c8c0:	01000434 	movhi	r4,16
 400c8c4:	42000234 	orhi	r8,r8,8
 400c8c8:	213fffc4 	addi	r4,r4,-1
 400c8cc:	4110703a 	and	r8,r8,r4
 400c8d0:	003f8206 	br	400c6dc <__reset+0xfa81c6dc>
 400c8d4:	18ffffc4 	addi	r3,r3,-1
 400c8d8:	1800491e 	bne	r3,zero,400ca00 <__adddf3+0x400>
 400c8dc:	898bc83a 	sub	r5,r17,r6
 400c8e0:	8963803a 	cmpltu	r17,r17,r5
 400c8e4:	4251c83a 	sub	r8,r8,r9
 400c8e8:	4451c83a 	sub	r8,r8,r17
 400c8ec:	2823883a 	mov	r17,r5
 400c8f0:	003f9f06 	br	400c770 <__reset+0xfa81c770>
 400c8f4:	4984b03a 	or	r2,r9,r6
 400c8f8:	103f6026 	beq	r2,zero,400c67c <__reset+0xfa81c67c>
 400c8fc:	213fffc4 	addi	r4,r4,-1
 400c900:	2000931e 	bne	r4,zero,400cb50 <__adddf3+0x550>
 400c904:	898d883a 	add	r6,r17,r6
 400c908:	3463803a 	cmpltu	r17,r6,r17
 400c90c:	4251883a 	add	r8,r8,r9
 400c910:	8a11883a 	add	r8,r17,r8
 400c914:	3023883a 	mov	r17,r6
 400c918:	003fd806 	br	400c87c <__reset+0xfa81c87c>
 400c91c:	1800541e 	bne	r3,zero,400ca70 <__adddf3+0x470>
 400c920:	80800044 	addi	r2,r16,1
 400c924:	1081ffcc 	andi	r2,r2,2047
 400c928:	00c00044 	movi	r3,1
 400c92c:	1880a00e 	bge	r3,r2,400cbb0 <__adddf3+0x5b0>
 400c930:	8989c83a 	sub	r4,r17,r6
 400c934:	8905803a 	cmpltu	r2,r17,r4
 400c938:	4267c83a 	sub	r19,r8,r9
 400c93c:	98a7c83a 	sub	r19,r19,r2
 400c940:	9880202c 	andhi	r2,r19,128
 400c944:	10006326 	beq	r2,zero,400cad4 <__adddf3+0x4d4>
 400c948:	3463c83a 	sub	r17,r6,r17
 400c94c:	4a07c83a 	sub	r3,r9,r8
 400c950:	344d803a 	cmpltu	r6,r6,r17
 400c954:	19a7c83a 	sub	r19,r3,r6
 400c958:	3825883a 	mov	r18,r7
 400c95c:	983f8a1e 	bne	r19,zero,400c788 <__reset+0xfa81c788>
 400c960:	8809883a 	mov	r4,r17
 400c964:	400ec040 	call	400ec04 <__clzsi2>
 400c968:	10800804 	addi	r2,r2,32
 400c96c:	10fffe04 	addi	r3,r2,-8
 400c970:	010007c4 	movi	r4,31
 400c974:	20ff890e 	bge	r4,r3,400c79c <__reset+0xfa81c79c>
 400c978:	10bff604 	addi	r2,r2,-40
 400c97c:	8884983a 	sll	r2,r17,r2
 400c980:	0023883a 	mov	r17,zero
 400c984:	1c3f8c0e 	bge	r3,r16,400c7b8 <__reset+0xfa81c7b8>
 400c988:	023fe034 	movhi	r8,65408
 400c98c:	423fffc4 	addi	r8,r8,-1
 400c990:	80e1c83a 	sub	r16,r16,r3
 400c994:	1210703a 	and	r8,r2,r8
 400c998:	003f3806 	br	400c67c <__reset+0xfa81c67c>
 400c99c:	9007883a 	mov	r3,r18
 400c9a0:	0011883a 	mov	r8,zero
 400c9a4:	0005883a 	mov	r2,zero
 400c9a8:	003f4c06 	br	400c6dc <__reset+0xfa81c6dc>
 400c9ac:	498cb03a 	or	r6,r9,r6
 400c9b0:	300cc03a 	cmpne	r6,r6,zero
 400c9b4:	0007883a 	mov	r3,zero
 400c9b8:	003f6806 	br	400c75c <__reset+0xfa81c75c>
 400c9bc:	20009c1e 	bne	r4,zero,400cc30 <__adddf3+0x630>
 400c9c0:	80800044 	addi	r2,r16,1
 400c9c4:	1141ffcc 	andi	r5,r2,2047
 400c9c8:	01000044 	movi	r4,1
 400c9cc:	2140670e 	bge	r4,r5,400cb6c <__adddf3+0x56c>
 400c9d0:	0101ffc4 	movi	r4,2047
 400c9d4:	11007f26 	beq	r2,r4,400cbd4 <__adddf3+0x5d4>
 400c9d8:	898d883a 	add	r6,r17,r6
 400c9dc:	4247883a 	add	r3,r8,r9
 400c9e0:	3451803a 	cmpltu	r8,r6,r17
 400c9e4:	40d1883a 	add	r8,r8,r3
 400c9e8:	402297fa 	slli	r17,r8,31
 400c9ec:	300cd07a 	srli	r6,r6,1
 400c9f0:	4010d07a 	srli	r8,r8,1
 400c9f4:	1021883a 	mov	r16,r2
 400c9f8:	89a2b03a 	or	r17,r17,r6
 400c9fc:	003f1f06 	br	400c67c <__reset+0xfa81c67c>
 400ca00:	0081ffc4 	movi	r2,2047
 400ca04:	80bf481e 	bne	r16,r2,400c728 <__reset+0xfa81c728>
 400ca08:	003f1c06 	br	400c67c <__reset+0xfa81c67c>
 400ca0c:	843ff844 	addi	r16,r16,-31
 400ca10:	01000804 	movi	r4,32
 400ca14:	1406d83a 	srl	r3,r2,r16
 400ca18:	41005026 	beq	r8,r4,400cb5c <__adddf3+0x55c>
 400ca1c:	01001004 	movi	r4,64
 400ca20:	2211c83a 	sub	r8,r4,r8
 400ca24:	1204983a 	sll	r2,r2,r8
 400ca28:	88a2b03a 	or	r17,r17,r2
 400ca2c:	8822c03a 	cmpne	r17,r17,zero
 400ca30:	1c62b03a 	or	r17,r3,r17
 400ca34:	0011883a 	mov	r8,zero
 400ca38:	0021883a 	mov	r16,zero
 400ca3c:	003f7106 	br	400c804 <__reset+0xfa81c804>
 400ca40:	193ff804 	addi	r4,r3,-32
 400ca44:	00800804 	movi	r2,32
 400ca48:	4908d83a 	srl	r4,r9,r4
 400ca4c:	18804526 	beq	r3,r2,400cb64 <__adddf3+0x564>
 400ca50:	00801004 	movi	r2,64
 400ca54:	10c5c83a 	sub	r2,r2,r3
 400ca58:	4886983a 	sll	r3,r9,r2
 400ca5c:	198cb03a 	or	r6,r3,r6
 400ca60:	300cc03a 	cmpne	r6,r6,zero
 400ca64:	218cb03a 	or	r6,r4,r6
 400ca68:	0007883a 	mov	r3,zero
 400ca6c:	003f3b06 	br	400c75c <__reset+0xfa81c75c>
 400ca70:	80002a26 	beq	r16,zero,400cb1c <__adddf3+0x51c>
 400ca74:	0101ffc4 	movi	r4,2047
 400ca78:	11006826 	beq	r2,r4,400cc1c <__adddf3+0x61c>
 400ca7c:	00c7c83a 	sub	r3,zero,r3
 400ca80:	42002034 	orhi	r8,r8,128
 400ca84:	01000e04 	movi	r4,56
 400ca88:	20c07c16 	blt	r4,r3,400cc7c <__adddf3+0x67c>
 400ca8c:	010007c4 	movi	r4,31
 400ca90:	20c0da16 	blt	r4,r3,400cdfc <__adddf3+0x7fc>
 400ca94:	01000804 	movi	r4,32
 400ca98:	20c9c83a 	sub	r4,r4,r3
 400ca9c:	4114983a 	sll	r10,r8,r4
 400caa0:	88cad83a 	srl	r5,r17,r3
 400caa4:	8908983a 	sll	r4,r17,r4
 400caa8:	40c6d83a 	srl	r3,r8,r3
 400caac:	5162b03a 	or	r17,r10,r5
 400cab0:	2008c03a 	cmpne	r4,r4,zero
 400cab4:	8922b03a 	or	r17,r17,r4
 400cab8:	3463c83a 	sub	r17,r6,r17
 400cabc:	48c7c83a 	sub	r3,r9,r3
 400cac0:	344d803a 	cmpltu	r6,r6,r17
 400cac4:	1991c83a 	sub	r8,r3,r6
 400cac8:	1021883a 	mov	r16,r2
 400cacc:	3825883a 	mov	r18,r7
 400cad0:	003f2706 	br	400c770 <__reset+0xfa81c770>
 400cad4:	24d0b03a 	or	r8,r4,r19
 400cad8:	40001b1e 	bne	r8,zero,400cb48 <__adddf3+0x548>
 400cadc:	0005883a 	mov	r2,zero
 400cae0:	0007883a 	mov	r3,zero
 400cae4:	0021883a 	mov	r16,zero
 400cae8:	003f4d06 	br	400c820 <__reset+0xfa81c820>
 400caec:	008007c4 	movi	r2,31
 400caf0:	11003c16 	blt	r2,r4,400cbe4 <__adddf3+0x5e4>
 400caf4:	00800804 	movi	r2,32
 400caf8:	1105c83a 	sub	r2,r2,r4
 400cafc:	488e983a 	sll	r7,r9,r2
 400cb00:	310ad83a 	srl	r5,r6,r4
 400cb04:	3084983a 	sll	r2,r6,r2
 400cb08:	4912d83a 	srl	r9,r9,r4
 400cb0c:	394ab03a 	or	r5,r7,r5
 400cb10:	1004c03a 	cmpne	r2,r2,zero
 400cb14:	288ab03a 	or	r5,r5,r2
 400cb18:	003f5306 	br	400c868 <__reset+0xfa81c868>
 400cb1c:	4448b03a 	or	r4,r8,r17
 400cb20:	20003e26 	beq	r4,zero,400cc1c <__adddf3+0x61c>
 400cb24:	00c6303a 	nor	r3,zero,r3
 400cb28:	18003a1e 	bne	r3,zero,400cc14 <__adddf3+0x614>
 400cb2c:	3463c83a 	sub	r17,r6,r17
 400cb30:	4a07c83a 	sub	r3,r9,r8
 400cb34:	344d803a 	cmpltu	r6,r6,r17
 400cb38:	1991c83a 	sub	r8,r3,r6
 400cb3c:	1021883a 	mov	r16,r2
 400cb40:	3825883a 	mov	r18,r7
 400cb44:	003f0a06 	br	400c770 <__reset+0xfa81c770>
 400cb48:	2023883a 	mov	r17,r4
 400cb4c:	003f0d06 	br	400c784 <__reset+0xfa81c784>
 400cb50:	0081ffc4 	movi	r2,2047
 400cb54:	80bf3f1e 	bne	r16,r2,400c854 <__reset+0xfa81c854>
 400cb58:	003ec806 	br	400c67c <__reset+0xfa81c67c>
 400cb5c:	0005883a 	mov	r2,zero
 400cb60:	003fb106 	br	400ca28 <__reset+0xfa81ca28>
 400cb64:	0007883a 	mov	r3,zero
 400cb68:	003fbc06 	br	400ca5c <__reset+0xfa81ca5c>
 400cb6c:	4444b03a 	or	r2,r8,r17
 400cb70:	8000871e 	bne	r16,zero,400cd90 <__adddf3+0x790>
 400cb74:	1000ba26 	beq	r2,zero,400ce60 <__adddf3+0x860>
 400cb78:	4984b03a 	or	r2,r9,r6
 400cb7c:	103ebf26 	beq	r2,zero,400c67c <__reset+0xfa81c67c>
 400cb80:	8985883a 	add	r2,r17,r6
 400cb84:	4247883a 	add	r3,r8,r9
 400cb88:	1451803a 	cmpltu	r8,r2,r17
 400cb8c:	40d1883a 	add	r8,r8,r3
 400cb90:	40c0202c 	andhi	r3,r8,128
 400cb94:	1023883a 	mov	r17,r2
 400cb98:	183f1a26 	beq	r3,zero,400c804 <__reset+0xfa81c804>
 400cb9c:	00bfe034 	movhi	r2,65408
 400cba0:	10bfffc4 	addi	r2,r2,-1
 400cba4:	2021883a 	mov	r16,r4
 400cba8:	4090703a 	and	r8,r8,r2
 400cbac:	003eb306 	br	400c67c <__reset+0xfa81c67c>
 400cbb0:	4444b03a 	or	r2,r8,r17
 400cbb4:	8000291e 	bne	r16,zero,400cc5c <__adddf3+0x65c>
 400cbb8:	10004b1e 	bne	r2,zero,400cce8 <__adddf3+0x6e8>
 400cbbc:	4990b03a 	or	r8,r9,r6
 400cbc0:	40008b26 	beq	r8,zero,400cdf0 <__adddf3+0x7f0>
 400cbc4:	4811883a 	mov	r8,r9
 400cbc8:	3023883a 	mov	r17,r6
 400cbcc:	3825883a 	mov	r18,r7
 400cbd0:	003eaa06 	br	400c67c <__reset+0xfa81c67c>
 400cbd4:	1021883a 	mov	r16,r2
 400cbd8:	0011883a 	mov	r8,zero
 400cbdc:	0005883a 	mov	r2,zero
 400cbe0:	003f0f06 	br	400c820 <__reset+0xfa81c820>
 400cbe4:	217ff804 	addi	r5,r4,-32
 400cbe8:	00800804 	movi	r2,32
 400cbec:	494ad83a 	srl	r5,r9,r5
 400cbf0:	20807d26 	beq	r4,r2,400cde8 <__adddf3+0x7e8>
 400cbf4:	00801004 	movi	r2,64
 400cbf8:	1109c83a 	sub	r4,r2,r4
 400cbfc:	4912983a 	sll	r9,r9,r4
 400cc00:	498cb03a 	or	r6,r9,r6
 400cc04:	300cc03a 	cmpne	r6,r6,zero
 400cc08:	298ab03a 	or	r5,r5,r6
 400cc0c:	0013883a 	mov	r9,zero
 400cc10:	003f1506 	br	400c868 <__reset+0xfa81c868>
 400cc14:	0101ffc4 	movi	r4,2047
 400cc18:	113f9a1e 	bne	r2,r4,400ca84 <__reset+0xfa81ca84>
 400cc1c:	4811883a 	mov	r8,r9
 400cc20:	3023883a 	mov	r17,r6
 400cc24:	1021883a 	mov	r16,r2
 400cc28:	3825883a 	mov	r18,r7
 400cc2c:	003e9306 	br	400c67c <__reset+0xfa81c67c>
 400cc30:	8000161e 	bne	r16,zero,400cc8c <__adddf3+0x68c>
 400cc34:	444ab03a 	or	r5,r8,r17
 400cc38:	28005126 	beq	r5,zero,400cd80 <__adddf3+0x780>
 400cc3c:	0108303a 	nor	r4,zero,r4
 400cc40:	20004d1e 	bne	r4,zero,400cd78 <__adddf3+0x778>
 400cc44:	89a3883a 	add	r17,r17,r6
 400cc48:	4253883a 	add	r9,r8,r9
 400cc4c:	898d803a 	cmpltu	r6,r17,r6
 400cc50:	3251883a 	add	r8,r6,r9
 400cc54:	1021883a 	mov	r16,r2
 400cc58:	003f0806 	br	400c87c <__reset+0xfa81c87c>
 400cc5c:	1000301e 	bne	r2,zero,400cd20 <__adddf3+0x720>
 400cc60:	4984b03a 	or	r2,r9,r6
 400cc64:	10007126 	beq	r2,zero,400ce2c <__adddf3+0x82c>
 400cc68:	4811883a 	mov	r8,r9
 400cc6c:	3023883a 	mov	r17,r6
 400cc70:	3825883a 	mov	r18,r7
 400cc74:	0401ffc4 	movi	r16,2047
 400cc78:	003e8006 	br	400c67c <__reset+0xfa81c67c>
 400cc7c:	4462b03a 	or	r17,r8,r17
 400cc80:	8822c03a 	cmpne	r17,r17,zero
 400cc84:	0007883a 	mov	r3,zero
 400cc88:	003f8b06 	br	400cab8 <__reset+0xfa81cab8>
 400cc8c:	0141ffc4 	movi	r5,2047
 400cc90:	11403b26 	beq	r2,r5,400cd80 <__adddf3+0x780>
 400cc94:	0109c83a 	sub	r4,zero,r4
 400cc98:	42002034 	orhi	r8,r8,128
 400cc9c:	01400e04 	movi	r5,56
 400cca0:	29006716 	blt	r5,r4,400ce40 <__adddf3+0x840>
 400cca4:	014007c4 	movi	r5,31
 400cca8:	29007016 	blt	r5,r4,400ce6c <__adddf3+0x86c>
 400ccac:	01400804 	movi	r5,32
 400ccb0:	290bc83a 	sub	r5,r5,r4
 400ccb4:	4154983a 	sll	r10,r8,r5
 400ccb8:	890ed83a 	srl	r7,r17,r4
 400ccbc:	894a983a 	sll	r5,r17,r5
 400ccc0:	4108d83a 	srl	r4,r8,r4
 400ccc4:	51e2b03a 	or	r17,r10,r7
 400ccc8:	280ac03a 	cmpne	r5,r5,zero
 400cccc:	8962b03a 	or	r17,r17,r5
 400ccd0:	89a3883a 	add	r17,r17,r6
 400ccd4:	2253883a 	add	r9,r4,r9
 400ccd8:	898d803a 	cmpltu	r6,r17,r6
 400ccdc:	3251883a 	add	r8,r6,r9
 400cce0:	1021883a 	mov	r16,r2
 400cce4:	003ee506 	br	400c87c <__reset+0xfa81c87c>
 400cce8:	4984b03a 	or	r2,r9,r6
 400ccec:	103e6326 	beq	r2,zero,400c67c <__reset+0xfa81c67c>
 400ccf0:	8987c83a 	sub	r3,r17,r6
 400ccf4:	88c9803a 	cmpltu	r4,r17,r3
 400ccf8:	4245c83a 	sub	r2,r8,r9
 400ccfc:	1105c83a 	sub	r2,r2,r4
 400cd00:	1100202c 	andhi	r4,r2,128
 400cd04:	203ebb26 	beq	r4,zero,400c7f4 <__reset+0xfa81c7f4>
 400cd08:	3463c83a 	sub	r17,r6,r17
 400cd0c:	4a07c83a 	sub	r3,r9,r8
 400cd10:	344d803a 	cmpltu	r6,r6,r17
 400cd14:	1991c83a 	sub	r8,r3,r6
 400cd18:	3825883a 	mov	r18,r7
 400cd1c:	003e5706 	br	400c67c <__reset+0xfa81c67c>
 400cd20:	4984b03a 	or	r2,r9,r6
 400cd24:	10002e26 	beq	r2,zero,400cde0 <__adddf3+0x7e0>
 400cd28:	4004d0fa 	srli	r2,r8,3
 400cd2c:	8822d0fa 	srli	r17,r17,3
 400cd30:	4010977a 	slli	r8,r8,29
 400cd34:	10c0022c 	andhi	r3,r2,8
 400cd38:	4462b03a 	or	r17,r8,r17
 400cd3c:	18000826 	beq	r3,zero,400cd60 <__adddf3+0x760>
 400cd40:	4808d0fa 	srli	r4,r9,3
 400cd44:	20c0022c 	andhi	r3,r4,8
 400cd48:	1800051e 	bne	r3,zero,400cd60 <__adddf3+0x760>
 400cd4c:	300cd0fa 	srli	r6,r6,3
 400cd50:	4806977a 	slli	r3,r9,29
 400cd54:	2005883a 	mov	r2,r4
 400cd58:	3825883a 	mov	r18,r7
 400cd5c:	19a2b03a 	or	r17,r3,r6
 400cd60:	8810d77a 	srli	r8,r17,29
 400cd64:	100490fa 	slli	r2,r2,3
 400cd68:	882290fa 	slli	r17,r17,3
 400cd6c:	0401ffc4 	movi	r16,2047
 400cd70:	4090b03a 	or	r8,r8,r2
 400cd74:	003e4106 	br	400c67c <__reset+0xfa81c67c>
 400cd78:	0141ffc4 	movi	r5,2047
 400cd7c:	117fc71e 	bne	r2,r5,400cc9c <__reset+0xfa81cc9c>
 400cd80:	4811883a 	mov	r8,r9
 400cd84:	3023883a 	mov	r17,r6
 400cd88:	1021883a 	mov	r16,r2
 400cd8c:	003e3b06 	br	400c67c <__reset+0xfa81c67c>
 400cd90:	10002f26 	beq	r2,zero,400ce50 <__adddf3+0x850>
 400cd94:	4984b03a 	or	r2,r9,r6
 400cd98:	10001126 	beq	r2,zero,400cde0 <__adddf3+0x7e0>
 400cd9c:	4004d0fa 	srli	r2,r8,3
 400cda0:	8822d0fa 	srli	r17,r17,3
 400cda4:	4010977a 	slli	r8,r8,29
 400cda8:	10c0022c 	andhi	r3,r2,8
 400cdac:	4462b03a 	or	r17,r8,r17
 400cdb0:	183feb26 	beq	r3,zero,400cd60 <__reset+0xfa81cd60>
 400cdb4:	4808d0fa 	srli	r4,r9,3
 400cdb8:	20c0022c 	andhi	r3,r4,8
 400cdbc:	183fe81e 	bne	r3,zero,400cd60 <__reset+0xfa81cd60>
 400cdc0:	300cd0fa 	srli	r6,r6,3
 400cdc4:	4806977a 	slli	r3,r9,29
 400cdc8:	2005883a 	mov	r2,r4
 400cdcc:	19a2b03a 	or	r17,r3,r6
 400cdd0:	003fe306 	br	400cd60 <__reset+0xfa81cd60>
 400cdd4:	0011883a 	mov	r8,zero
 400cdd8:	0005883a 	mov	r2,zero
 400cddc:	003e3f06 	br	400c6dc <__reset+0xfa81c6dc>
 400cde0:	0401ffc4 	movi	r16,2047
 400cde4:	003e2506 	br	400c67c <__reset+0xfa81c67c>
 400cde8:	0013883a 	mov	r9,zero
 400cdec:	003f8406 	br	400cc00 <__reset+0xfa81cc00>
 400cdf0:	0005883a 	mov	r2,zero
 400cdf4:	0007883a 	mov	r3,zero
 400cdf8:	003e8906 	br	400c820 <__reset+0xfa81c820>
 400cdfc:	197ff804 	addi	r5,r3,-32
 400ce00:	01000804 	movi	r4,32
 400ce04:	414ad83a 	srl	r5,r8,r5
 400ce08:	19002426 	beq	r3,r4,400ce9c <__adddf3+0x89c>
 400ce0c:	01001004 	movi	r4,64
 400ce10:	20c7c83a 	sub	r3,r4,r3
 400ce14:	40c6983a 	sll	r3,r8,r3
 400ce18:	1c46b03a 	or	r3,r3,r17
 400ce1c:	1806c03a 	cmpne	r3,r3,zero
 400ce20:	28e2b03a 	or	r17,r5,r3
 400ce24:	0007883a 	mov	r3,zero
 400ce28:	003f2306 	br	400cab8 <__reset+0xfa81cab8>
 400ce2c:	0007883a 	mov	r3,zero
 400ce30:	5811883a 	mov	r8,r11
 400ce34:	00bfffc4 	movi	r2,-1
 400ce38:	0401ffc4 	movi	r16,2047
 400ce3c:	003e7806 	br	400c820 <__reset+0xfa81c820>
 400ce40:	4462b03a 	or	r17,r8,r17
 400ce44:	8822c03a 	cmpne	r17,r17,zero
 400ce48:	0009883a 	mov	r4,zero
 400ce4c:	003fa006 	br	400ccd0 <__reset+0xfa81ccd0>
 400ce50:	4811883a 	mov	r8,r9
 400ce54:	3023883a 	mov	r17,r6
 400ce58:	0401ffc4 	movi	r16,2047
 400ce5c:	003e0706 	br	400c67c <__reset+0xfa81c67c>
 400ce60:	4811883a 	mov	r8,r9
 400ce64:	3023883a 	mov	r17,r6
 400ce68:	003e0406 	br	400c67c <__reset+0xfa81c67c>
 400ce6c:	21fff804 	addi	r7,r4,-32
 400ce70:	01400804 	movi	r5,32
 400ce74:	41ced83a 	srl	r7,r8,r7
 400ce78:	21400a26 	beq	r4,r5,400cea4 <__adddf3+0x8a4>
 400ce7c:	01401004 	movi	r5,64
 400ce80:	2909c83a 	sub	r4,r5,r4
 400ce84:	4108983a 	sll	r4,r8,r4
 400ce88:	2448b03a 	or	r4,r4,r17
 400ce8c:	2008c03a 	cmpne	r4,r4,zero
 400ce90:	3922b03a 	or	r17,r7,r4
 400ce94:	0009883a 	mov	r4,zero
 400ce98:	003f8d06 	br	400ccd0 <__reset+0xfa81ccd0>
 400ce9c:	0007883a 	mov	r3,zero
 400cea0:	003fdd06 	br	400ce18 <__reset+0xfa81ce18>
 400cea4:	0009883a 	mov	r4,zero
 400cea8:	003ff706 	br	400ce88 <__reset+0xfa81ce88>

0400ceac <__divdf3>:
 400ceac:	defff204 	addi	sp,sp,-56
 400ceb0:	dd400915 	stw	r21,36(sp)
 400ceb4:	282ad53a 	srli	r21,r5,20
 400ceb8:	dd000815 	stw	r20,32(sp)
 400cebc:	2828d7fa 	srli	r20,r5,31
 400cec0:	dc000415 	stw	r16,16(sp)
 400cec4:	04000434 	movhi	r16,16
 400cec8:	df000c15 	stw	fp,48(sp)
 400cecc:	843fffc4 	addi	r16,r16,-1
 400ced0:	dfc00d15 	stw	ra,52(sp)
 400ced4:	ddc00b15 	stw	r23,44(sp)
 400ced8:	dd800a15 	stw	r22,40(sp)
 400cedc:	dcc00715 	stw	r19,28(sp)
 400cee0:	dc800615 	stw	r18,24(sp)
 400cee4:	dc400515 	stw	r17,20(sp)
 400cee8:	ad41ffcc 	andi	r21,r21,2047
 400ceec:	2c20703a 	and	r16,r5,r16
 400cef0:	a7003fcc 	andi	fp,r20,255
 400cef4:	a8006126 	beq	r21,zero,400d07c <__divdf3+0x1d0>
 400cef8:	0081ffc4 	movi	r2,2047
 400cefc:	2025883a 	mov	r18,r4
 400cf00:	a8803726 	beq	r21,r2,400cfe0 <__divdf3+0x134>
 400cf04:	80800434 	orhi	r2,r16,16
 400cf08:	100490fa 	slli	r2,r2,3
 400cf0c:	2020d77a 	srli	r16,r4,29
 400cf10:	202490fa 	slli	r18,r4,3
 400cf14:	ad7f0044 	addi	r21,r21,-1023
 400cf18:	80a0b03a 	or	r16,r16,r2
 400cf1c:	0027883a 	mov	r19,zero
 400cf20:	0013883a 	mov	r9,zero
 400cf24:	3804d53a 	srli	r2,r7,20
 400cf28:	382cd7fa 	srli	r22,r7,31
 400cf2c:	04400434 	movhi	r17,16
 400cf30:	8c7fffc4 	addi	r17,r17,-1
 400cf34:	1081ffcc 	andi	r2,r2,2047
 400cf38:	3011883a 	mov	r8,r6
 400cf3c:	3c62703a 	and	r17,r7,r17
 400cf40:	b5c03fcc 	andi	r23,r22,255
 400cf44:	10006c26 	beq	r2,zero,400d0f8 <__divdf3+0x24c>
 400cf48:	00c1ffc4 	movi	r3,2047
 400cf4c:	10c06426 	beq	r2,r3,400d0e0 <__divdf3+0x234>
 400cf50:	88c00434 	orhi	r3,r17,16
 400cf54:	180690fa 	slli	r3,r3,3
 400cf58:	3022d77a 	srli	r17,r6,29
 400cf5c:	301090fa 	slli	r8,r6,3
 400cf60:	10bf0044 	addi	r2,r2,-1023
 400cf64:	88e2b03a 	or	r17,r17,r3
 400cf68:	000f883a 	mov	r7,zero
 400cf6c:	a58cf03a 	xor	r6,r20,r22
 400cf70:	3cc8b03a 	or	r4,r7,r19
 400cf74:	a8abc83a 	sub	r21,r21,r2
 400cf78:	008003c4 	movi	r2,15
 400cf7c:	3007883a 	mov	r3,r6
 400cf80:	34c03fcc 	andi	r19,r6,255
 400cf84:	11009036 	bltu	r2,r4,400d1c8 <__divdf3+0x31c>
 400cf88:	200890ba 	slli	r4,r4,2
 400cf8c:	00810074 	movhi	r2,1025
 400cf90:	10b3e804 	addi	r2,r2,-12384
 400cf94:	2089883a 	add	r4,r4,r2
 400cf98:	20800017 	ldw	r2,0(r4)
 400cf9c:	1000683a 	jmp	r2
 400cfa0:	0400d1c8 	cmpgei	r16,zero,839
 400cfa4:	0400d018 	cmpnei	r16,zero,832
 400cfa8:	0400d1b8 	rdprs	r16,zero,838
 400cfac:	0400d00c 	andi	r16,zero,832
 400cfb0:	0400d1b8 	rdprs	r16,zero,838
 400cfb4:	0400d18c 	andi	r16,zero,838
 400cfb8:	0400d1b8 	rdprs	r16,zero,838
 400cfbc:	0400d00c 	andi	r16,zero,832
 400cfc0:	0400d018 	cmpnei	r16,zero,832
 400cfc4:	0400d018 	cmpnei	r16,zero,832
 400cfc8:	0400d18c 	andi	r16,zero,838
 400cfcc:	0400d00c 	andi	r16,zero,832
 400cfd0:	0400cffc 	xorhi	r16,zero,831
 400cfd4:	0400cffc 	xorhi	r16,zero,831
 400cfd8:	0400cffc 	xorhi	r16,zero,831
 400cfdc:	0400d4ac 	andhi	r16,zero,850
 400cfe0:	2404b03a 	or	r2,r4,r16
 400cfe4:	1000661e 	bne	r2,zero,400d180 <__divdf3+0x2d4>
 400cfe8:	04c00204 	movi	r19,8
 400cfec:	0021883a 	mov	r16,zero
 400cff0:	0025883a 	mov	r18,zero
 400cff4:	02400084 	movi	r9,2
 400cff8:	003fca06 	br	400cf24 <__reset+0xfa81cf24>
 400cffc:	8023883a 	mov	r17,r16
 400d000:	9011883a 	mov	r8,r18
 400d004:	e02f883a 	mov	r23,fp
 400d008:	480f883a 	mov	r7,r9
 400d00c:	00800084 	movi	r2,2
 400d010:	3881311e 	bne	r7,r2,400d4d8 <__divdf3+0x62c>
 400d014:	b827883a 	mov	r19,r23
 400d018:	98c0004c 	andi	r3,r19,1
 400d01c:	0081ffc4 	movi	r2,2047
 400d020:	000b883a 	mov	r5,zero
 400d024:	0025883a 	mov	r18,zero
 400d028:	1004953a 	slli	r2,r2,20
 400d02c:	18c03fcc 	andi	r3,r3,255
 400d030:	04400434 	movhi	r17,16
 400d034:	8c7fffc4 	addi	r17,r17,-1
 400d038:	180697fa 	slli	r3,r3,31
 400d03c:	2c4a703a 	and	r5,r5,r17
 400d040:	288ab03a 	or	r5,r5,r2
 400d044:	28c6b03a 	or	r3,r5,r3
 400d048:	9005883a 	mov	r2,r18
 400d04c:	dfc00d17 	ldw	ra,52(sp)
 400d050:	df000c17 	ldw	fp,48(sp)
 400d054:	ddc00b17 	ldw	r23,44(sp)
 400d058:	dd800a17 	ldw	r22,40(sp)
 400d05c:	dd400917 	ldw	r21,36(sp)
 400d060:	dd000817 	ldw	r20,32(sp)
 400d064:	dcc00717 	ldw	r19,28(sp)
 400d068:	dc800617 	ldw	r18,24(sp)
 400d06c:	dc400517 	ldw	r17,20(sp)
 400d070:	dc000417 	ldw	r16,16(sp)
 400d074:	dec00e04 	addi	sp,sp,56
 400d078:	f800283a 	ret
 400d07c:	2404b03a 	or	r2,r4,r16
 400d080:	2027883a 	mov	r19,r4
 400d084:	10003926 	beq	r2,zero,400d16c <__divdf3+0x2c0>
 400d088:	80012e26 	beq	r16,zero,400d544 <__divdf3+0x698>
 400d08c:	8009883a 	mov	r4,r16
 400d090:	d9800315 	stw	r6,12(sp)
 400d094:	d9c00215 	stw	r7,8(sp)
 400d098:	400ec040 	call	400ec04 <__clzsi2>
 400d09c:	d9800317 	ldw	r6,12(sp)
 400d0a0:	d9c00217 	ldw	r7,8(sp)
 400d0a4:	113ffd44 	addi	r4,r2,-11
 400d0a8:	00c00704 	movi	r3,28
 400d0ac:	19012116 	blt	r3,r4,400d534 <__divdf3+0x688>
 400d0b0:	00c00744 	movi	r3,29
 400d0b4:	147ffe04 	addi	r17,r2,-8
 400d0b8:	1907c83a 	sub	r3,r3,r4
 400d0bc:	8460983a 	sll	r16,r16,r17
 400d0c0:	98c6d83a 	srl	r3,r19,r3
 400d0c4:	9c64983a 	sll	r18,r19,r17
 400d0c8:	1c20b03a 	or	r16,r3,r16
 400d0cc:	1080fcc4 	addi	r2,r2,1011
 400d0d0:	00abc83a 	sub	r21,zero,r2
 400d0d4:	0027883a 	mov	r19,zero
 400d0d8:	0013883a 	mov	r9,zero
 400d0dc:	003f9106 	br	400cf24 <__reset+0xfa81cf24>
 400d0e0:	3446b03a 	or	r3,r6,r17
 400d0e4:	18001f1e 	bne	r3,zero,400d164 <__divdf3+0x2b8>
 400d0e8:	0023883a 	mov	r17,zero
 400d0ec:	0011883a 	mov	r8,zero
 400d0f0:	01c00084 	movi	r7,2
 400d0f4:	003f9d06 	br	400cf6c <__reset+0xfa81cf6c>
 400d0f8:	3446b03a 	or	r3,r6,r17
 400d0fc:	18001526 	beq	r3,zero,400d154 <__divdf3+0x2a8>
 400d100:	88011b26 	beq	r17,zero,400d570 <__divdf3+0x6c4>
 400d104:	8809883a 	mov	r4,r17
 400d108:	d9800315 	stw	r6,12(sp)
 400d10c:	da400115 	stw	r9,4(sp)
 400d110:	400ec040 	call	400ec04 <__clzsi2>
 400d114:	d9800317 	ldw	r6,12(sp)
 400d118:	da400117 	ldw	r9,4(sp)
 400d11c:	113ffd44 	addi	r4,r2,-11
 400d120:	00c00704 	movi	r3,28
 400d124:	19010e16 	blt	r3,r4,400d560 <__divdf3+0x6b4>
 400d128:	00c00744 	movi	r3,29
 400d12c:	123ffe04 	addi	r8,r2,-8
 400d130:	1907c83a 	sub	r3,r3,r4
 400d134:	8a22983a 	sll	r17,r17,r8
 400d138:	30c6d83a 	srl	r3,r6,r3
 400d13c:	3210983a 	sll	r8,r6,r8
 400d140:	1c62b03a 	or	r17,r3,r17
 400d144:	1080fcc4 	addi	r2,r2,1011
 400d148:	0085c83a 	sub	r2,zero,r2
 400d14c:	000f883a 	mov	r7,zero
 400d150:	003f8606 	br	400cf6c <__reset+0xfa81cf6c>
 400d154:	0023883a 	mov	r17,zero
 400d158:	0011883a 	mov	r8,zero
 400d15c:	01c00044 	movi	r7,1
 400d160:	003f8206 	br	400cf6c <__reset+0xfa81cf6c>
 400d164:	01c000c4 	movi	r7,3
 400d168:	003f8006 	br	400cf6c <__reset+0xfa81cf6c>
 400d16c:	04c00104 	movi	r19,4
 400d170:	0021883a 	mov	r16,zero
 400d174:	0025883a 	mov	r18,zero
 400d178:	02400044 	movi	r9,1
 400d17c:	003f6906 	br	400cf24 <__reset+0xfa81cf24>
 400d180:	04c00304 	movi	r19,12
 400d184:	024000c4 	movi	r9,3
 400d188:	003f6606 	br	400cf24 <__reset+0xfa81cf24>
 400d18c:	01400434 	movhi	r5,16
 400d190:	0007883a 	mov	r3,zero
 400d194:	297fffc4 	addi	r5,r5,-1
 400d198:	04bfffc4 	movi	r18,-1
 400d19c:	0081ffc4 	movi	r2,2047
 400d1a0:	003fa106 	br	400d028 <__reset+0xfa81d028>
 400d1a4:	00c00044 	movi	r3,1
 400d1a8:	1887c83a 	sub	r3,r3,r2
 400d1ac:	01000e04 	movi	r4,56
 400d1b0:	20c1210e 	bge	r4,r3,400d638 <__divdf3+0x78c>
 400d1b4:	98c0004c 	andi	r3,r19,1
 400d1b8:	0005883a 	mov	r2,zero
 400d1bc:	000b883a 	mov	r5,zero
 400d1c0:	0025883a 	mov	r18,zero
 400d1c4:	003f9806 	br	400d028 <__reset+0xfa81d028>
 400d1c8:	8c00fd36 	bltu	r17,r16,400d5c0 <__divdf3+0x714>
 400d1cc:	8440fb26 	beq	r16,r17,400d5bc <__divdf3+0x710>
 400d1d0:	8007883a 	mov	r3,r16
 400d1d4:	ad7fffc4 	addi	r21,r21,-1
 400d1d8:	0021883a 	mov	r16,zero
 400d1dc:	4004d63a 	srli	r2,r8,24
 400d1e0:	8822923a 	slli	r17,r17,8
 400d1e4:	1809883a 	mov	r4,r3
 400d1e8:	402c923a 	slli	r22,r8,8
 400d1ec:	88b8b03a 	or	fp,r17,r2
 400d1f0:	e028d43a 	srli	r20,fp,16
 400d1f4:	d8c00015 	stw	r3,0(sp)
 400d1f8:	e5ffffcc 	andi	r23,fp,65535
 400d1fc:	a00b883a 	mov	r5,r20
 400d200:	400c5440 	call	400c544 <__udivsi3>
 400d204:	d8c00017 	ldw	r3,0(sp)
 400d208:	a00b883a 	mov	r5,r20
 400d20c:	d8800315 	stw	r2,12(sp)
 400d210:	1809883a 	mov	r4,r3
 400d214:	400c5a80 	call	400c5a8 <__umodsi3>
 400d218:	d9800317 	ldw	r6,12(sp)
 400d21c:	1006943a 	slli	r3,r2,16
 400d220:	9004d43a 	srli	r2,r18,16
 400d224:	b9a3383a 	mul	r17,r23,r6
 400d228:	10c4b03a 	or	r2,r2,r3
 400d22c:	1440062e 	bgeu	r2,r17,400d248 <__divdf3+0x39c>
 400d230:	1705883a 	add	r2,r2,fp
 400d234:	30ffffc4 	addi	r3,r6,-1
 400d238:	1700ee36 	bltu	r2,fp,400d5f4 <__divdf3+0x748>
 400d23c:	1440ed2e 	bgeu	r2,r17,400d5f4 <__divdf3+0x748>
 400d240:	31bfff84 	addi	r6,r6,-2
 400d244:	1705883a 	add	r2,r2,fp
 400d248:	1463c83a 	sub	r17,r2,r17
 400d24c:	a00b883a 	mov	r5,r20
 400d250:	8809883a 	mov	r4,r17
 400d254:	d9800315 	stw	r6,12(sp)
 400d258:	400c5440 	call	400c544 <__udivsi3>
 400d25c:	a00b883a 	mov	r5,r20
 400d260:	8809883a 	mov	r4,r17
 400d264:	d8800215 	stw	r2,8(sp)
 400d268:	400c5a80 	call	400c5a8 <__umodsi3>
 400d26c:	d9c00217 	ldw	r7,8(sp)
 400d270:	1004943a 	slli	r2,r2,16
 400d274:	94bfffcc 	andi	r18,r18,65535
 400d278:	b9d1383a 	mul	r8,r23,r7
 400d27c:	90a4b03a 	or	r18,r18,r2
 400d280:	d9800317 	ldw	r6,12(sp)
 400d284:	9200062e 	bgeu	r18,r8,400d2a0 <__divdf3+0x3f4>
 400d288:	9725883a 	add	r18,r18,fp
 400d28c:	38bfffc4 	addi	r2,r7,-1
 400d290:	9700d636 	bltu	r18,fp,400d5ec <__divdf3+0x740>
 400d294:	9200d52e 	bgeu	r18,r8,400d5ec <__divdf3+0x740>
 400d298:	39ffff84 	addi	r7,r7,-2
 400d29c:	9725883a 	add	r18,r18,fp
 400d2a0:	3004943a 	slli	r2,r6,16
 400d2a4:	b012d43a 	srli	r9,r22,16
 400d2a8:	b1bfffcc 	andi	r6,r22,65535
 400d2ac:	11e2b03a 	or	r17,r2,r7
 400d2b0:	8806d43a 	srli	r3,r17,16
 400d2b4:	893fffcc 	andi	r4,r17,65535
 400d2b8:	218b383a 	mul	r5,r4,r6
 400d2bc:	30c5383a 	mul	r2,r6,r3
 400d2c0:	2249383a 	mul	r4,r4,r9
 400d2c4:	280ed43a 	srli	r7,r5,16
 400d2c8:	9225c83a 	sub	r18,r18,r8
 400d2cc:	2089883a 	add	r4,r4,r2
 400d2d0:	3909883a 	add	r4,r7,r4
 400d2d4:	1a47383a 	mul	r3,r3,r9
 400d2d8:	2080022e 	bgeu	r4,r2,400d2e4 <__divdf3+0x438>
 400d2dc:	00800074 	movhi	r2,1
 400d2e0:	1887883a 	add	r3,r3,r2
 400d2e4:	2004d43a 	srli	r2,r4,16
 400d2e8:	2008943a 	slli	r4,r4,16
 400d2ec:	297fffcc 	andi	r5,r5,65535
 400d2f0:	10c7883a 	add	r3,r2,r3
 400d2f4:	2149883a 	add	r4,r4,r5
 400d2f8:	90c0a536 	bltu	r18,r3,400d590 <__divdf3+0x6e4>
 400d2fc:	90c0bf26 	beq	r18,r3,400d5fc <__divdf3+0x750>
 400d300:	90c7c83a 	sub	r3,r18,r3
 400d304:	810fc83a 	sub	r7,r16,r4
 400d308:	81e5803a 	cmpltu	r18,r16,r7
 400d30c:	1ca5c83a 	sub	r18,r3,r18
 400d310:	e480c126 	beq	fp,r18,400d618 <__divdf3+0x76c>
 400d314:	a00b883a 	mov	r5,r20
 400d318:	9009883a 	mov	r4,r18
 400d31c:	d9800315 	stw	r6,12(sp)
 400d320:	d9c00215 	stw	r7,8(sp)
 400d324:	da400115 	stw	r9,4(sp)
 400d328:	400c5440 	call	400c544 <__udivsi3>
 400d32c:	a00b883a 	mov	r5,r20
 400d330:	9009883a 	mov	r4,r18
 400d334:	d8800015 	stw	r2,0(sp)
 400d338:	400c5a80 	call	400c5a8 <__umodsi3>
 400d33c:	d9c00217 	ldw	r7,8(sp)
 400d340:	da000017 	ldw	r8,0(sp)
 400d344:	1006943a 	slli	r3,r2,16
 400d348:	3804d43a 	srli	r2,r7,16
 400d34c:	ba21383a 	mul	r16,r23,r8
 400d350:	d9800317 	ldw	r6,12(sp)
 400d354:	10c4b03a 	or	r2,r2,r3
 400d358:	da400117 	ldw	r9,4(sp)
 400d35c:	1400062e 	bgeu	r2,r16,400d378 <__divdf3+0x4cc>
 400d360:	1705883a 	add	r2,r2,fp
 400d364:	40ffffc4 	addi	r3,r8,-1
 400d368:	1700ad36 	bltu	r2,fp,400d620 <__divdf3+0x774>
 400d36c:	1400ac2e 	bgeu	r2,r16,400d620 <__divdf3+0x774>
 400d370:	423fff84 	addi	r8,r8,-2
 400d374:	1705883a 	add	r2,r2,fp
 400d378:	1421c83a 	sub	r16,r2,r16
 400d37c:	a00b883a 	mov	r5,r20
 400d380:	8009883a 	mov	r4,r16
 400d384:	d9800315 	stw	r6,12(sp)
 400d388:	d9c00215 	stw	r7,8(sp)
 400d38c:	da000015 	stw	r8,0(sp)
 400d390:	da400115 	stw	r9,4(sp)
 400d394:	400c5440 	call	400c544 <__udivsi3>
 400d398:	8009883a 	mov	r4,r16
 400d39c:	a00b883a 	mov	r5,r20
 400d3a0:	1025883a 	mov	r18,r2
 400d3a4:	400c5a80 	call	400c5a8 <__umodsi3>
 400d3a8:	d9c00217 	ldw	r7,8(sp)
 400d3ac:	1004943a 	slli	r2,r2,16
 400d3b0:	bcaf383a 	mul	r23,r23,r18
 400d3b4:	393fffcc 	andi	r4,r7,65535
 400d3b8:	2088b03a 	or	r4,r4,r2
 400d3bc:	d9800317 	ldw	r6,12(sp)
 400d3c0:	da000017 	ldw	r8,0(sp)
 400d3c4:	da400117 	ldw	r9,4(sp)
 400d3c8:	25c0062e 	bgeu	r4,r23,400d3e4 <__divdf3+0x538>
 400d3cc:	2709883a 	add	r4,r4,fp
 400d3d0:	90bfffc4 	addi	r2,r18,-1
 400d3d4:	27009436 	bltu	r4,fp,400d628 <__divdf3+0x77c>
 400d3d8:	25c0932e 	bgeu	r4,r23,400d628 <__divdf3+0x77c>
 400d3dc:	94bfff84 	addi	r18,r18,-2
 400d3e0:	2709883a 	add	r4,r4,fp
 400d3e4:	4004943a 	slli	r2,r8,16
 400d3e8:	25efc83a 	sub	r23,r4,r23
 400d3ec:	1490b03a 	or	r8,r2,r18
 400d3f0:	4008d43a 	srli	r4,r8,16
 400d3f4:	40ffffcc 	andi	r3,r8,65535
 400d3f8:	30c5383a 	mul	r2,r6,r3
 400d3fc:	1a47383a 	mul	r3,r3,r9
 400d400:	310d383a 	mul	r6,r6,r4
 400d404:	100ad43a 	srli	r5,r2,16
 400d408:	4913383a 	mul	r9,r9,r4
 400d40c:	1987883a 	add	r3,r3,r6
 400d410:	28c7883a 	add	r3,r5,r3
 400d414:	1980022e 	bgeu	r3,r6,400d420 <__divdf3+0x574>
 400d418:	01000074 	movhi	r4,1
 400d41c:	4913883a 	add	r9,r9,r4
 400d420:	1808d43a 	srli	r4,r3,16
 400d424:	1806943a 	slli	r3,r3,16
 400d428:	10bfffcc 	andi	r2,r2,65535
 400d42c:	2253883a 	add	r9,r4,r9
 400d430:	1887883a 	add	r3,r3,r2
 400d434:	ba403836 	bltu	r23,r9,400d518 <__divdf3+0x66c>
 400d438:	ba403626 	beq	r23,r9,400d514 <__divdf3+0x668>
 400d43c:	42000054 	ori	r8,r8,1
 400d440:	a880ffc4 	addi	r2,r21,1023
 400d444:	00bf570e 	bge	zero,r2,400d1a4 <__reset+0xfa81d1a4>
 400d448:	40c001cc 	andi	r3,r8,7
 400d44c:	18000726 	beq	r3,zero,400d46c <__divdf3+0x5c0>
 400d450:	40c003cc 	andi	r3,r8,15
 400d454:	01000104 	movi	r4,4
 400d458:	19000426 	beq	r3,r4,400d46c <__divdf3+0x5c0>
 400d45c:	4107883a 	add	r3,r8,r4
 400d460:	1a11803a 	cmpltu	r8,r3,r8
 400d464:	8a23883a 	add	r17,r17,r8
 400d468:	1811883a 	mov	r8,r3
 400d46c:	88c0402c 	andhi	r3,r17,256
 400d470:	18000426 	beq	r3,zero,400d484 <__divdf3+0x5d8>
 400d474:	00ffc034 	movhi	r3,65280
 400d478:	18ffffc4 	addi	r3,r3,-1
 400d47c:	a8810004 	addi	r2,r21,1024
 400d480:	88e2703a 	and	r17,r17,r3
 400d484:	00c1ff84 	movi	r3,2046
 400d488:	18bee316 	blt	r3,r2,400d018 <__reset+0xfa81d018>
 400d48c:	8824977a 	slli	r18,r17,29
 400d490:	4010d0fa 	srli	r8,r8,3
 400d494:	8822927a 	slli	r17,r17,9
 400d498:	1081ffcc 	andi	r2,r2,2047
 400d49c:	9224b03a 	or	r18,r18,r8
 400d4a0:	880ad33a 	srli	r5,r17,12
 400d4a4:	98c0004c 	andi	r3,r19,1
 400d4a8:	003edf06 	br	400d028 <__reset+0xfa81d028>
 400d4ac:	8080022c 	andhi	r2,r16,8
 400d4b0:	10001226 	beq	r2,zero,400d4fc <__divdf3+0x650>
 400d4b4:	8880022c 	andhi	r2,r17,8
 400d4b8:	1000101e 	bne	r2,zero,400d4fc <__divdf3+0x650>
 400d4bc:	00800434 	movhi	r2,16
 400d4c0:	89400234 	orhi	r5,r17,8
 400d4c4:	10bfffc4 	addi	r2,r2,-1
 400d4c8:	b007883a 	mov	r3,r22
 400d4cc:	288a703a 	and	r5,r5,r2
 400d4d0:	4025883a 	mov	r18,r8
 400d4d4:	003f3106 	br	400d19c <__reset+0xfa81d19c>
 400d4d8:	008000c4 	movi	r2,3
 400d4dc:	3880a626 	beq	r7,r2,400d778 <__divdf3+0x8cc>
 400d4e0:	00800044 	movi	r2,1
 400d4e4:	3880521e 	bne	r7,r2,400d630 <__divdf3+0x784>
 400d4e8:	b807883a 	mov	r3,r23
 400d4ec:	0005883a 	mov	r2,zero
 400d4f0:	000b883a 	mov	r5,zero
 400d4f4:	0025883a 	mov	r18,zero
 400d4f8:	003ecb06 	br	400d028 <__reset+0xfa81d028>
 400d4fc:	00800434 	movhi	r2,16
 400d500:	81400234 	orhi	r5,r16,8
 400d504:	10bfffc4 	addi	r2,r2,-1
 400d508:	a007883a 	mov	r3,r20
 400d50c:	288a703a 	and	r5,r5,r2
 400d510:	003f2206 	br	400d19c <__reset+0xfa81d19c>
 400d514:	183fca26 	beq	r3,zero,400d440 <__reset+0xfa81d440>
 400d518:	e5ef883a 	add	r23,fp,r23
 400d51c:	40bfffc4 	addi	r2,r8,-1
 400d520:	bf00392e 	bgeu	r23,fp,400d608 <__divdf3+0x75c>
 400d524:	1011883a 	mov	r8,r2
 400d528:	ba7fc41e 	bne	r23,r9,400d43c <__reset+0xfa81d43c>
 400d52c:	b0ffc31e 	bne	r22,r3,400d43c <__reset+0xfa81d43c>
 400d530:	003fc306 	br	400d440 <__reset+0xfa81d440>
 400d534:	143ff604 	addi	r16,r2,-40
 400d538:	9c20983a 	sll	r16,r19,r16
 400d53c:	0025883a 	mov	r18,zero
 400d540:	003ee206 	br	400d0cc <__reset+0xfa81d0cc>
 400d544:	d9800315 	stw	r6,12(sp)
 400d548:	d9c00215 	stw	r7,8(sp)
 400d54c:	400ec040 	call	400ec04 <__clzsi2>
 400d550:	10800804 	addi	r2,r2,32
 400d554:	d9c00217 	ldw	r7,8(sp)
 400d558:	d9800317 	ldw	r6,12(sp)
 400d55c:	003ed106 	br	400d0a4 <__reset+0xfa81d0a4>
 400d560:	147ff604 	addi	r17,r2,-40
 400d564:	3462983a 	sll	r17,r6,r17
 400d568:	0011883a 	mov	r8,zero
 400d56c:	003ef506 	br	400d144 <__reset+0xfa81d144>
 400d570:	3009883a 	mov	r4,r6
 400d574:	d9800315 	stw	r6,12(sp)
 400d578:	da400115 	stw	r9,4(sp)
 400d57c:	400ec040 	call	400ec04 <__clzsi2>
 400d580:	10800804 	addi	r2,r2,32
 400d584:	da400117 	ldw	r9,4(sp)
 400d588:	d9800317 	ldw	r6,12(sp)
 400d58c:	003ee306 	br	400d11c <__reset+0xfa81d11c>
 400d590:	85a1883a 	add	r16,r16,r22
 400d594:	8585803a 	cmpltu	r2,r16,r22
 400d598:	1705883a 	add	r2,r2,fp
 400d59c:	14a5883a 	add	r18,r2,r18
 400d5a0:	88bfffc4 	addi	r2,r17,-1
 400d5a4:	e4800c2e 	bgeu	fp,r18,400d5d8 <__divdf3+0x72c>
 400d5a8:	90c03e36 	bltu	r18,r3,400d6a4 <__divdf3+0x7f8>
 400d5ac:	1c806926 	beq	r3,r18,400d754 <__divdf3+0x8a8>
 400d5b0:	90c7c83a 	sub	r3,r18,r3
 400d5b4:	1023883a 	mov	r17,r2
 400d5b8:	003f5206 	br	400d304 <__reset+0xfa81d304>
 400d5bc:	923f0436 	bltu	r18,r8,400d1d0 <__reset+0xfa81d1d0>
 400d5c0:	800897fa 	slli	r4,r16,31
 400d5c4:	9004d07a 	srli	r2,r18,1
 400d5c8:	8006d07a 	srli	r3,r16,1
 400d5cc:	902097fa 	slli	r16,r18,31
 400d5d0:	20a4b03a 	or	r18,r4,r2
 400d5d4:	003f0106 	br	400d1dc <__reset+0xfa81d1dc>
 400d5d8:	e4bff51e 	bne	fp,r18,400d5b0 <__reset+0xfa81d5b0>
 400d5dc:	85bff22e 	bgeu	r16,r22,400d5a8 <__reset+0xfa81d5a8>
 400d5e0:	e0c7c83a 	sub	r3,fp,r3
 400d5e4:	1023883a 	mov	r17,r2
 400d5e8:	003f4606 	br	400d304 <__reset+0xfa81d304>
 400d5ec:	100f883a 	mov	r7,r2
 400d5f0:	003f2b06 	br	400d2a0 <__reset+0xfa81d2a0>
 400d5f4:	180d883a 	mov	r6,r3
 400d5f8:	003f1306 	br	400d248 <__reset+0xfa81d248>
 400d5fc:	813fe436 	bltu	r16,r4,400d590 <__reset+0xfa81d590>
 400d600:	0007883a 	mov	r3,zero
 400d604:	003f3f06 	br	400d304 <__reset+0xfa81d304>
 400d608:	ba402c36 	bltu	r23,r9,400d6bc <__divdf3+0x810>
 400d60c:	4dc05426 	beq	r9,r23,400d760 <__divdf3+0x8b4>
 400d610:	1011883a 	mov	r8,r2
 400d614:	003f8906 	br	400d43c <__reset+0xfa81d43c>
 400d618:	023fffc4 	movi	r8,-1
 400d61c:	003f8806 	br	400d440 <__reset+0xfa81d440>
 400d620:	1811883a 	mov	r8,r3
 400d624:	003f5406 	br	400d378 <__reset+0xfa81d378>
 400d628:	1025883a 	mov	r18,r2
 400d62c:	003f6d06 	br	400d3e4 <__reset+0xfa81d3e4>
 400d630:	b827883a 	mov	r19,r23
 400d634:	003f8206 	br	400d440 <__reset+0xfa81d440>
 400d638:	010007c4 	movi	r4,31
 400d63c:	20c02616 	blt	r4,r3,400d6d8 <__divdf3+0x82c>
 400d640:	00800804 	movi	r2,32
 400d644:	10c5c83a 	sub	r2,r2,r3
 400d648:	888a983a 	sll	r5,r17,r2
 400d64c:	40c8d83a 	srl	r4,r8,r3
 400d650:	4084983a 	sll	r2,r8,r2
 400d654:	88e2d83a 	srl	r17,r17,r3
 400d658:	2906b03a 	or	r3,r5,r4
 400d65c:	1004c03a 	cmpne	r2,r2,zero
 400d660:	1886b03a 	or	r3,r3,r2
 400d664:	188001cc 	andi	r2,r3,7
 400d668:	10000726 	beq	r2,zero,400d688 <__divdf3+0x7dc>
 400d66c:	188003cc 	andi	r2,r3,15
 400d670:	01000104 	movi	r4,4
 400d674:	11000426 	beq	r2,r4,400d688 <__divdf3+0x7dc>
 400d678:	1805883a 	mov	r2,r3
 400d67c:	10c00104 	addi	r3,r2,4
 400d680:	1885803a 	cmpltu	r2,r3,r2
 400d684:	88a3883a 	add	r17,r17,r2
 400d688:	8880202c 	andhi	r2,r17,128
 400d68c:	10002726 	beq	r2,zero,400d72c <__divdf3+0x880>
 400d690:	98c0004c 	andi	r3,r19,1
 400d694:	00800044 	movi	r2,1
 400d698:	000b883a 	mov	r5,zero
 400d69c:	0025883a 	mov	r18,zero
 400d6a0:	003e6106 	br	400d028 <__reset+0xfa81d028>
 400d6a4:	85a1883a 	add	r16,r16,r22
 400d6a8:	8585803a 	cmpltu	r2,r16,r22
 400d6ac:	1705883a 	add	r2,r2,fp
 400d6b0:	14a5883a 	add	r18,r2,r18
 400d6b4:	8c7fff84 	addi	r17,r17,-2
 400d6b8:	003f1106 	br	400d300 <__reset+0xfa81d300>
 400d6bc:	b589883a 	add	r4,r22,r22
 400d6c0:	25ad803a 	cmpltu	r22,r4,r22
 400d6c4:	b739883a 	add	fp,r22,fp
 400d6c8:	40bfff84 	addi	r2,r8,-2
 400d6cc:	bf2f883a 	add	r23,r23,fp
 400d6d0:	202d883a 	mov	r22,r4
 400d6d4:	003f9306 	br	400d524 <__reset+0xfa81d524>
 400d6d8:	013ff844 	movi	r4,-31
 400d6dc:	2085c83a 	sub	r2,r4,r2
 400d6e0:	8888d83a 	srl	r4,r17,r2
 400d6e4:	00800804 	movi	r2,32
 400d6e8:	18802126 	beq	r3,r2,400d770 <__divdf3+0x8c4>
 400d6ec:	00801004 	movi	r2,64
 400d6f0:	10c5c83a 	sub	r2,r2,r3
 400d6f4:	8884983a 	sll	r2,r17,r2
 400d6f8:	1204b03a 	or	r2,r2,r8
 400d6fc:	1004c03a 	cmpne	r2,r2,zero
 400d700:	2084b03a 	or	r2,r4,r2
 400d704:	144001cc 	andi	r17,r2,7
 400d708:	88000d1e 	bne	r17,zero,400d740 <__divdf3+0x894>
 400d70c:	000b883a 	mov	r5,zero
 400d710:	1024d0fa 	srli	r18,r2,3
 400d714:	98c0004c 	andi	r3,r19,1
 400d718:	0005883a 	mov	r2,zero
 400d71c:	9464b03a 	or	r18,r18,r17
 400d720:	003e4106 	br	400d028 <__reset+0xfa81d028>
 400d724:	1007883a 	mov	r3,r2
 400d728:	0023883a 	mov	r17,zero
 400d72c:	880a927a 	slli	r5,r17,9
 400d730:	1805883a 	mov	r2,r3
 400d734:	8822977a 	slli	r17,r17,29
 400d738:	280ad33a 	srli	r5,r5,12
 400d73c:	003ff406 	br	400d710 <__reset+0xfa81d710>
 400d740:	10c003cc 	andi	r3,r2,15
 400d744:	01000104 	movi	r4,4
 400d748:	193ff626 	beq	r3,r4,400d724 <__reset+0xfa81d724>
 400d74c:	0023883a 	mov	r17,zero
 400d750:	003fca06 	br	400d67c <__reset+0xfa81d67c>
 400d754:	813fd336 	bltu	r16,r4,400d6a4 <__reset+0xfa81d6a4>
 400d758:	1023883a 	mov	r17,r2
 400d75c:	003fa806 	br	400d600 <__reset+0xfa81d600>
 400d760:	b0ffd636 	bltu	r22,r3,400d6bc <__reset+0xfa81d6bc>
 400d764:	1011883a 	mov	r8,r2
 400d768:	b0ff341e 	bne	r22,r3,400d43c <__reset+0xfa81d43c>
 400d76c:	003f3406 	br	400d440 <__reset+0xfa81d440>
 400d770:	0005883a 	mov	r2,zero
 400d774:	003fe006 	br	400d6f8 <__reset+0xfa81d6f8>
 400d778:	00800434 	movhi	r2,16
 400d77c:	89400234 	orhi	r5,r17,8
 400d780:	10bfffc4 	addi	r2,r2,-1
 400d784:	b807883a 	mov	r3,r23
 400d788:	288a703a 	and	r5,r5,r2
 400d78c:	4025883a 	mov	r18,r8
 400d790:	003e8206 	br	400d19c <__reset+0xfa81d19c>

0400d794 <__eqdf2>:
 400d794:	2804d53a 	srli	r2,r5,20
 400d798:	3806d53a 	srli	r3,r7,20
 400d79c:	02000434 	movhi	r8,16
 400d7a0:	423fffc4 	addi	r8,r8,-1
 400d7a4:	1081ffcc 	andi	r2,r2,2047
 400d7a8:	0281ffc4 	movi	r10,2047
 400d7ac:	2a12703a 	and	r9,r5,r8
 400d7b0:	18c1ffcc 	andi	r3,r3,2047
 400d7b4:	3a10703a 	and	r8,r7,r8
 400d7b8:	280ad7fa 	srli	r5,r5,31
 400d7bc:	380ed7fa 	srli	r7,r7,31
 400d7c0:	12801026 	beq	r2,r10,400d804 <__eqdf2+0x70>
 400d7c4:	0281ffc4 	movi	r10,2047
 400d7c8:	1a800a26 	beq	r3,r10,400d7f4 <__eqdf2+0x60>
 400d7cc:	10c00226 	beq	r2,r3,400d7d8 <__eqdf2+0x44>
 400d7d0:	00800044 	movi	r2,1
 400d7d4:	f800283a 	ret
 400d7d8:	4a3ffd1e 	bne	r9,r8,400d7d0 <__reset+0xfa81d7d0>
 400d7dc:	21bffc1e 	bne	r4,r6,400d7d0 <__reset+0xfa81d7d0>
 400d7e0:	29c00c26 	beq	r5,r7,400d814 <__eqdf2+0x80>
 400d7e4:	103ffa1e 	bne	r2,zero,400d7d0 <__reset+0xfa81d7d0>
 400d7e8:	2244b03a 	or	r2,r4,r9
 400d7ec:	1004c03a 	cmpne	r2,r2,zero
 400d7f0:	f800283a 	ret
 400d7f4:	3214b03a 	or	r10,r6,r8
 400d7f8:	503ff426 	beq	r10,zero,400d7cc <__reset+0xfa81d7cc>
 400d7fc:	00800044 	movi	r2,1
 400d800:	f800283a 	ret
 400d804:	2254b03a 	or	r10,r4,r9
 400d808:	503fee26 	beq	r10,zero,400d7c4 <__reset+0xfa81d7c4>
 400d80c:	00800044 	movi	r2,1
 400d810:	f800283a 	ret
 400d814:	0005883a 	mov	r2,zero
 400d818:	f800283a 	ret

0400d81c <__gedf2>:
 400d81c:	2804d53a 	srli	r2,r5,20
 400d820:	3806d53a 	srli	r3,r7,20
 400d824:	02000434 	movhi	r8,16
 400d828:	423fffc4 	addi	r8,r8,-1
 400d82c:	1081ffcc 	andi	r2,r2,2047
 400d830:	0241ffc4 	movi	r9,2047
 400d834:	2a14703a 	and	r10,r5,r8
 400d838:	18c1ffcc 	andi	r3,r3,2047
 400d83c:	3a10703a 	and	r8,r7,r8
 400d840:	280ad7fa 	srli	r5,r5,31
 400d844:	380ed7fa 	srli	r7,r7,31
 400d848:	12401d26 	beq	r2,r9,400d8c0 <__gedf2+0xa4>
 400d84c:	0241ffc4 	movi	r9,2047
 400d850:	1a401226 	beq	r3,r9,400d89c <__gedf2+0x80>
 400d854:	1000081e 	bne	r2,zero,400d878 <__gedf2+0x5c>
 400d858:	2296b03a 	or	r11,r4,r10
 400d85c:	5813003a 	cmpeq	r9,r11,zero
 400d860:	1800091e 	bne	r3,zero,400d888 <__gedf2+0x6c>
 400d864:	3218b03a 	or	r12,r6,r8
 400d868:	6000071e 	bne	r12,zero,400d888 <__gedf2+0x6c>
 400d86c:	0005883a 	mov	r2,zero
 400d870:	5800101e 	bne	r11,zero,400d8b4 <__gedf2+0x98>
 400d874:	f800283a 	ret
 400d878:	18000c1e 	bne	r3,zero,400d8ac <__gedf2+0x90>
 400d87c:	3212b03a 	or	r9,r6,r8
 400d880:	48000c26 	beq	r9,zero,400d8b4 <__gedf2+0x98>
 400d884:	0013883a 	mov	r9,zero
 400d888:	39c03fcc 	andi	r7,r7,255
 400d88c:	48000826 	beq	r9,zero,400d8b0 <__gedf2+0x94>
 400d890:	38000926 	beq	r7,zero,400d8b8 <__gedf2+0x9c>
 400d894:	00800044 	movi	r2,1
 400d898:	f800283a 	ret
 400d89c:	3212b03a 	or	r9,r6,r8
 400d8a0:	483fec26 	beq	r9,zero,400d854 <__reset+0xfa81d854>
 400d8a4:	00bfff84 	movi	r2,-2
 400d8a8:	f800283a 	ret
 400d8ac:	39c03fcc 	andi	r7,r7,255
 400d8b0:	29c00626 	beq	r5,r7,400d8cc <__gedf2+0xb0>
 400d8b4:	283ff726 	beq	r5,zero,400d894 <__reset+0xfa81d894>
 400d8b8:	00bfffc4 	movi	r2,-1
 400d8bc:	f800283a 	ret
 400d8c0:	2292b03a 	or	r9,r4,r10
 400d8c4:	483fe126 	beq	r9,zero,400d84c <__reset+0xfa81d84c>
 400d8c8:	003ff606 	br	400d8a4 <__reset+0xfa81d8a4>
 400d8cc:	18bff916 	blt	r3,r2,400d8b4 <__reset+0xfa81d8b4>
 400d8d0:	10c00316 	blt	r2,r3,400d8e0 <__gedf2+0xc4>
 400d8d4:	42bff736 	bltu	r8,r10,400d8b4 <__reset+0xfa81d8b4>
 400d8d8:	52000326 	beq	r10,r8,400d8e8 <__gedf2+0xcc>
 400d8dc:	5200042e 	bgeu	r10,r8,400d8f0 <__gedf2+0xd4>
 400d8e0:	283fec1e 	bne	r5,zero,400d894 <__reset+0xfa81d894>
 400d8e4:	003ff406 	br	400d8b8 <__reset+0xfa81d8b8>
 400d8e8:	313ff236 	bltu	r6,r4,400d8b4 <__reset+0xfa81d8b4>
 400d8ec:	21bffc36 	bltu	r4,r6,400d8e0 <__reset+0xfa81d8e0>
 400d8f0:	0005883a 	mov	r2,zero
 400d8f4:	f800283a 	ret

0400d8f8 <__ledf2>:
 400d8f8:	2804d53a 	srli	r2,r5,20
 400d8fc:	3810d53a 	srli	r8,r7,20
 400d900:	00c00434 	movhi	r3,16
 400d904:	18ffffc4 	addi	r3,r3,-1
 400d908:	1081ffcc 	andi	r2,r2,2047
 400d90c:	0241ffc4 	movi	r9,2047
 400d910:	28d4703a 	and	r10,r5,r3
 400d914:	4201ffcc 	andi	r8,r8,2047
 400d918:	38c6703a 	and	r3,r7,r3
 400d91c:	280ad7fa 	srli	r5,r5,31
 400d920:	380ed7fa 	srli	r7,r7,31
 400d924:	12401f26 	beq	r2,r9,400d9a4 <__ledf2+0xac>
 400d928:	0241ffc4 	movi	r9,2047
 400d92c:	42401426 	beq	r8,r9,400d980 <__ledf2+0x88>
 400d930:	1000091e 	bne	r2,zero,400d958 <__ledf2+0x60>
 400d934:	2296b03a 	or	r11,r4,r10
 400d938:	5813003a 	cmpeq	r9,r11,zero
 400d93c:	29403fcc 	andi	r5,r5,255
 400d940:	40000a1e 	bne	r8,zero,400d96c <__ledf2+0x74>
 400d944:	30d8b03a 	or	r12,r6,r3
 400d948:	6000081e 	bne	r12,zero,400d96c <__ledf2+0x74>
 400d94c:	0005883a 	mov	r2,zero
 400d950:	5800111e 	bne	r11,zero,400d998 <__ledf2+0xa0>
 400d954:	f800283a 	ret
 400d958:	29403fcc 	andi	r5,r5,255
 400d95c:	40000c1e 	bne	r8,zero,400d990 <__ledf2+0x98>
 400d960:	30d2b03a 	or	r9,r6,r3
 400d964:	48000c26 	beq	r9,zero,400d998 <__ledf2+0xa0>
 400d968:	0013883a 	mov	r9,zero
 400d96c:	39c03fcc 	andi	r7,r7,255
 400d970:	48000826 	beq	r9,zero,400d994 <__ledf2+0x9c>
 400d974:	38001126 	beq	r7,zero,400d9bc <__ledf2+0xc4>
 400d978:	00800044 	movi	r2,1
 400d97c:	f800283a 	ret
 400d980:	30d2b03a 	or	r9,r6,r3
 400d984:	483fea26 	beq	r9,zero,400d930 <__reset+0xfa81d930>
 400d988:	00800084 	movi	r2,2
 400d98c:	f800283a 	ret
 400d990:	39c03fcc 	andi	r7,r7,255
 400d994:	39400726 	beq	r7,r5,400d9b4 <__ledf2+0xbc>
 400d998:	2800081e 	bne	r5,zero,400d9bc <__ledf2+0xc4>
 400d99c:	00800044 	movi	r2,1
 400d9a0:	f800283a 	ret
 400d9a4:	2292b03a 	or	r9,r4,r10
 400d9a8:	483fdf26 	beq	r9,zero,400d928 <__reset+0xfa81d928>
 400d9ac:	00800084 	movi	r2,2
 400d9b0:	f800283a 	ret
 400d9b4:	4080030e 	bge	r8,r2,400d9c4 <__ledf2+0xcc>
 400d9b8:	383fef26 	beq	r7,zero,400d978 <__reset+0xfa81d978>
 400d9bc:	00bfffc4 	movi	r2,-1
 400d9c0:	f800283a 	ret
 400d9c4:	123feb16 	blt	r2,r8,400d974 <__reset+0xfa81d974>
 400d9c8:	1abff336 	bltu	r3,r10,400d998 <__reset+0xfa81d998>
 400d9cc:	50c00326 	beq	r10,r3,400d9dc <__ledf2+0xe4>
 400d9d0:	50c0042e 	bgeu	r10,r3,400d9e4 <__ledf2+0xec>
 400d9d4:	283fe81e 	bne	r5,zero,400d978 <__reset+0xfa81d978>
 400d9d8:	003ff806 	br	400d9bc <__reset+0xfa81d9bc>
 400d9dc:	313fee36 	bltu	r6,r4,400d998 <__reset+0xfa81d998>
 400d9e0:	21bffc36 	bltu	r4,r6,400d9d4 <__reset+0xfa81d9d4>
 400d9e4:	0005883a 	mov	r2,zero
 400d9e8:	f800283a 	ret

0400d9ec <__muldf3>:
 400d9ec:	defff304 	addi	sp,sp,-52
 400d9f0:	2804d53a 	srli	r2,r5,20
 400d9f4:	dd800915 	stw	r22,36(sp)
 400d9f8:	282cd7fa 	srli	r22,r5,31
 400d9fc:	dc000315 	stw	r16,12(sp)
 400da00:	04000434 	movhi	r16,16
 400da04:	dd400815 	stw	r21,32(sp)
 400da08:	dc800515 	stw	r18,20(sp)
 400da0c:	843fffc4 	addi	r16,r16,-1
 400da10:	dfc00c15 	stw	ra,48(sp)
 400da14:	df000b15 	stw	fp,44(sp)
 400da18:	ddc00a15 	stw	r23,40(sp)
 400da1c:	dd000715 	stw	r20,28(sp)
 400da20:	dcc00615 	stw	r19,24(sp)
 400da24:	dc400415 	stw	r17,16(sp)
 400da28:	1481ffcc 	andi	r18,r2,2047
 400da2c:	2c20703a 	and	r16,r5,r16
 400da30:	b02b883a 	mov	r21,r22
 400da34:	b2403fcc 	andi	r9,r22,255
 400da38:	90006026 	beq	r18,zero,400dbbc <__muldf3+0x1d0>
 400da3c:	0081ffc4 	movi	r2,2047
 400da40:	2029883a 	mov	r20,r4
 400da44:	90803626 	beq	r18,r2,400db20 <__muldf3+0x134>
 400da48:	80800434 	orhi	r2,r16,16
 400da4c:	100490fa 	slli	r2,r2,3
 400da50:	2020d77a 	srli	r16,r4,29
 400da54:	202890fa 	slli	r20,r4,3
 400da58:	94bf0044 	addi	r18,r18,-1023
 400da5c:	80a0b03a 	or	r16,r16,r2
 400da60:	0027883a 	mov	r19,zero
 400da64:	0039883a 	mov	fp,zero
 400da68:	3804d53a 	srli	r2,r7,20
 400da6c:	382ed7fa 	srli	r23,r7,31
 400da70:	04400434 	movhi	r17,16
 400da74:	8c7fffc4 	addi	r17,r17,-1
 400da78:	1081ffcc 	andi	r2,r2,2047
 400da7c:	3011883a 	mov	r8,r6
 400da80:	3c62703a 	and	r17,r7,r17
 400da84:	ba803fcc 	andi	r10,r23,255
 400da88:	10006d26 	beq	r2,zero,400dc40 <__muldf3+0x254>
 400da8c:	00c1ffc4 	movi	r3,2047
 400da90:	10c06526 	beq	r2,r3,400dc28 <__muldf3+0x23c>
 400da94:	88c00434 	orhi	r3,r17,16
 400da98:	180690fa 	slli	r3,r3,3
 400da9c:	3022d77a 	srli	r17,r6,29
 400daa0:	301090fa 	slli	r8,r6,3
 400daa4:	10bf0044 	addi	r2,r2,-1023
 400daa8:	88e2b03a 	or	r17,r17,r3
 400daac:	000b883a 	mov	r5,zero
 400dab0:	9085883a 	add	r2,r18,r2
 400dab4:	2cc8b03a 	or	r4,r5,r19
 400dab8:	00c003c4 	movi	r3,15
 400dabc:	bdacf03a 	xor	r22,r23,r22
 400dac0:	12c00044 	addi	r11,r2,1
 400dac4:	19009936 	bltu	r3,r4,400dd2c <__muldf3+0x340>
 400dac8:	200890ba 	slli	r4,r4,2
 400dacc:	00c10074 	movhi	r3,1025
 400dad0:	18f6b804 	addi	r3,r3,-9504
 400dad4:	20c9883a 	add	r4,r4,r3
 400dad8:	20c00017 	ldw	r3,0(r4)
 400dadc:	1800683a 	jmp	r3
 400dae0:	0400dd2c 	andhi	r16,zero,884
 400dae4:	0400db40 	call	400db4 <__alt_mem_dram_cntrl-0x3bff24c>
 400dae8:	0400db40 	call	400db4 <__alt_mem_dram_cntrl-0x3bff24c>
 400daec:	0400db3c 	xorhi	r16,zero,876
 400daf0:	0400dd08 	cmpgei	r16,zero,884
 400daf4:	0400dd08 	cmpgei	r16,zero,884
 400daf8:	0400dcf0 	cmpltui	r16,zero,883
 400dafc:	0400db3c 	xorhi	r16,zero,876
 400db00:	0400dd08 	cmpgei	r16,zero,884
 400db04:	0400dcf0 	cmpltui	r16,zero,883
 400db08:	0400dd08 	cmpgei	r16,zero,884
 400db0c:	0400db3c 	xorhi	r16,zero,876
 400db10:	0400dd18 	cmpnei	r16,zero,884
 400db14:	0400dd18 	cmpnei	r16,zero,884
 400db18:	0400dd18 	cmpnei	r16,zero,884
 400db1c:	0400df34 	movhi	r16,892
 400db20:	2404b03a 	or	r2,r4,r16
 400db24:	10006f1e 	bne	r2,zero,400dce4 <__muldf3+0x2f8>
 400db28:	04c00204 	movi	r19,8
 400db2c:	0021883a 	mov	r16,zero
 400db30:	0029883a 	mov	r20,zero
 400db34:	07000084 	movi	fp,2
 400db38:	003fcb06 	br	400da68 <__reset+0xfa81da68>
 400db3c:	502d883a 	mov	r22,r10
 400db40:	00800084 	movi	r2,2
 400db44:	28805726 	beq	r5,r2,400dca4 <__muldf3+0x2b8>
 400db48:	008000c4 	movi	r2,3
 400db4c:	28816626 	beq	r5,r2,400e0e8 <__muldf3+0x6fc>
 400db50:	00800044 	movi	r2,1
 400db54:	2881411e 	bne	r5,r2,400e05c <__muldf3+0x670>
 400db58:	b02b883a 	mov	r21,r22
 400db5c:	0005883a 	mov	r2,zero
 400db60:	000b883a 	mov	r5,zero
 400db64:	0029883a 	mov	r20,zero
 400db68:	1004953a 	slli	r2,r2,20
 400db6c:	a8c03fcc 	andi	r3,r21,255
 400db70:	04400434 	movhi	r17,16
 400db74:	8c7fffc4 	addi	r17,r17,-1
 400db78:	180697fa 	slli	r3,r3,31
 400db7c:	2c4a703a 	and	r5,r5,r17
 400db80:	288ab03a 	or	r5,r5,r2
 400db84:	28c6b03a 	or	r3,r5,r3
 400db88:	a005883a 	mov	r2,r20
 400db8c:	dfc00c17 	ldw	ra,48(sp)
 400db90:	df000b17 	ldw	fp,44(sp)
 400db94:	ddc00a17 	ldw	r23,40(sp)
 400db98:	dd800917 	ldw	r22,36(sp)
 400db9c:	dd400817 	ldw	r21,32(sp)
 400dba0:	dd000717 	ldw	r20,28(sp)
 400dba4:	dcc00617 	ldw	r19,24(sp)
 400dba8:	dc800517 	ldw	r18,20(sp)
 400dbac:	dc400417 	ldw	r17,16(sp)
 400dbb0:	dc000317 	ldw	r16,12(sp)
 400dbb4:	dec00d04 	addi	sp,sp,52
 400dbb8:	f800283a 	ret
 400dbbc:	2404b03a 	or	r2,r4,r16
 400dbc0:	2027883a 	mov	r19,r4
 400dbc4:	10004226 	beq	r2,zero,400dcd0 <__muldf3+0x2e4>
 400dbc8:	8000fc26 	beq	r16,zero,400dfbc <__muldf3+0x5d0>
 400dbcc:	8009883a 	mov	r4,r16
 400dbd0:	d9800215 	stw	r6,8(sp)
 400dbd4:	d9c00015 	stw	r7,0(sp)
 400dbd8:	da400115 	stw	r9,4(sp)
 400dbdc:	400ec040 	call	400ec04 <__clzsi2>
 400dbe0:	d9800217 	ldw	r6,8(sp)
 400dbe4:	d9c00017 	ldw	r7,0(sp)
 400dbe8:	da400117 	ldw	r9,4(sp)
 400dbec:	113ffd44 	addi	r4,r2,-11
 400dbf0:	00c00704 	movi	r3,28
 400dbf4:	1900ed16 	blt	r3,r4,400dfac <__muldf3+0x5c0>
 400dbf8:	00c00744 	movi	r3,29
 400dbfc:	147ffe04 	addi	r17,r2,-8
 400dc00:	1907c83a 	sub	r3,r3,r4
 400dc04:	8460983a 	sll	r16,r16,r17
 400dc08:	98c6d83a 	srl	r3,r19,r3
 400dc0c:	9c68983a 	sll	r20,r19,r17
 400dc10:	1c20b03a 	or	r16,r3,r16
 400dc14:	1080fcc4 	addi	r2,r2,1011
 400dc18:	00a5c83a 	sub	r18,zero,r2
 400dc1c:	0027883a 	mov	r19,zero
 400dc20:	0039883a 	mov	fp,zero
 400dc24:	003f9006 	br	400da68 <__reset+0xfa81da68>
 400dc28:	3446b03a 	or	r3,r6,r17
 400dc2c:	1800261e 	bne	r3,zero,400dcc8 <__muldf3+0x2dc>
 400dc30:	0023883a 	mov	r17,zero
 400dc34:	0011883a 	mov	r8,zero
 400dc38:	01400084 	movi	r5,2
 400dc3c:	003f9c06 	br	400dab0 <__reset+0xfa81dab0>
 400dc40:	3446b03a 	or	r3,r6,r17
 400dc44:	18001c26 	beq	r3,zero,400dcb8 <__muldf3+0x2cc>
 400dc48:	8800ce26 	beq	r17,zero,400df84 <__muldf3+0x598>
 400dc4c:	8809883a 	mov	r4,r17
 400dc50:	d9800215 	stw	r6,8(sp)
 400dc54:	da400115 	stw	r9,4(sp)
 400dc58:	da800015 	stw	r10,0(sp)
 400dc5c:	400ec040 	call	400ec04 <__clzsi2>
 400dc60:	d9800217 	ldw	r6,8(sp)
 400dc64:	da400117 	ldw	r9,4(sp)
 400dc68:	da800017 	ldw	r10,0(sp)
 400dc6c:	113ffd44 	addi	r4,r2,-11
 400dc70:	00c00704 	movi	r3,28
 400dc74:	1900bf16 	blt	r3,r4,400df74 <__muldf3+0x588>
 400dc78:	00c00744 	movi	r3,29
 400dc7c:	123ffe04 	addi	r8,r2,-8
 400dc80:	1907c83a 	sub	r3,r3,r4
 400dc84:	8a22983a 	sll	r17,r17,r8
 400dc88:	30c6d83a 	srl	r3,r6,r3
 400dc8c:	3210983a 	sll	r8,r6,r8
 400dc90:	1c62b03a 	or	r17,r3,r17
 400dc94:	1080fcc4 	addi	r2,r2,1011
 400dc98:	0085c83a 	sub	r2,zero,r2
 400dc9c:	000b883a 	mov	r5,zero
 400dca0:	003f8306 	br	400dab0 <__reset+0xfa81dab0>
 400dca4:	b02b883a 	mov	r21,r22
 400dca8:	0081ffc4 	movi	r2,2047
 400dcac:	000b883a 	mov	r5,zero
 400dcb0:	0029883a 	mov	r20,zero
 400dcb4:	003fac06 	br	400db68 <__reset+0xfa81db68>
 400dcb8:	0023883a 	mov	r17,zero
 400dcbc:	0011883a 	mov	r8,zero
 400dcc0:	01400044 	movi	r5,1
 400dcc4:	003f7a06 	br	400dab0 <__reset+0xfa81dab0>
 400dcc8:	014000c4 	movi	r5,3
 400dccc:	003f7806 	br	400dab0 <__reset+0xfa81dab0>
 400dcd0:	04c00104 	movi	r19,4
 400dcd4:	0021883a 	mov	r16,zero
 400dcd8:	0029883a 	mov	r20,zero
 400dcdc:	07000044 	movi	fp,1
 400dce0:	003f6106 	br	400da68 <__reset+0xfa81da68>
 400dce4:	04c00304 	movi	r19,12
 400dce8:	070000c4 	movi	fp,3
 400dcec:	003f5e06 	br	400da68 <__reset+0xfa81da68>
 400dcf0:	01400434 	movhi	r5,16
 400dcf4:	002b883a 	mov	r21,zero
 400dcf8:	297fffc4 	addi	r5,r5,-1
 400dcfc:	053fffc4 	movi	r20,-1
 400dd00:	0081ffc4 	movi	r2,2047
 400dd04:	003f9806 	br	400db68 <__reset+0xfa81db68>
 400dd08:	8023883a 	mov	r17,r16
 400dd0c:	a011883a 	mov	r8,r20
 400dd10:	e00b883a 	mov	r5,fp
 400dd14:	003f8a06 	br	400db40 <__reset+0xfa81db40>
 400dd18:	8023883a 	mov	r17,r16
 400dd1c:	a011883a 	mov	r8,r20
 400dd20:	482d883a 	mov	r22,r9
 400dd24:	e00b883a 	mov	r5,fp
 400dd28:	003f8506 	br	400db40 <__reset+0xfa81db40>
 400dd2c:	a00ad43a 	srli	r5,r20,16
 400dd30:	401ad43a 	srli	r13,r8,16
 400dd34:	a53fffcc 	andi	r20,r20,65535
 400dd38:	423fffcc 	andi	r8,r8,65535
 400dd3c:	4519383a 	mul	r12,r8,r20
 400dd40:	4147383a 	mul	r3,r8,r5
 400dd44:	6d09383a 	mul	r4,r13,r20
 400dd48:	600cd43a 	srli	r6,r12,16
 400dd4c:	2b5d383a 	mul	r14,r5,r13
 400dd50:	20c9883a 	add	r4,r4,r3
 400dd54:	310d883a 	add	r6,r6,r4
 400dd58:	30c0022e 	bgeu	r6,r3,400dd64 <__muldf3+0x378>
 400dd5c:	00c00074 	movhi	r3,1
 400dd60:	70dd883a 	add	r14,r14,r3
 400dd64:	8826d43a 	srli	r19,r17,16
 400dd68:	8bffffcc 	andi	r15,r17,65535
 400dd6c:	7d23383a 	mul	r17,r15,r20
 400dd70:	7949383a 	mul	r4,r15,r5
 400dd74:	9d29383a 	mul	r20,r19,r20
 400dd78:	8814d43a 	srli	r10,r17,16
 400dd7c:	3012943a 	slli	r9,r6,16
 400dd80:	a129883a 	add	r20,r20,r4
 400dd84:	633fffcc 	andi	r12,r12,65535
 400dd88:	5515883a 	add	r10,r10,r20
 400dd8c:	3006d43a 	srli	r3,r6,16
 400dd90:	4b13883a 	add	r9,r9,r12
 400dd94:	2ccb383a 	mul	r5,r5,r19
 400dd98:	5100022e 	bgeu	r10,r4,400dda4 <__muldf3+0x3b8>
 400dd9c:	01000074 	movhi	r4,1
 400dda0:	290b883a 	add	r5,r5,r4
 400dda4:	802ad43a 	srli	r21,r16,16
 400dda8:	843fffcc 	andi	r16,r16,65535
 400ddac:	440d383a 	mul	r6,r8,r16
 400ddb0:	4565383a 	mul	r18,r8,r21
 400ddb4:	8349383a 	mul	r4,r16,r13
 400ddb8:	500e943a 	slli	r7,r10,16
 400ddbc:	3010d43a 	srli	r8,r6,16
 400ddc0:	5028d43a 	srli	r20,r10,16
 400ddc4:	2489883a 	add	r4,r4,r18
 400ddc8:	8abfffcc 	andi	r10,r17,65535
 400ddcc:	3a95883a 	add	r10,r7,r10
 400ddd0:	4119883a 	add	r12,r8,r4
 400ddd4:	a169883a 	add	r20,r20,r5
 400ddd8:	1a87883a 	add	r3,r3,r10
 400dddc:	6d5b383a 	mul	r13,r13,r21
 400dde0:	6480022e 	bgeu	r12,r18,400ddec <__muldf3+0x400>
 400dde4:	01000074 	movhi	r4,1
 400dde8:	691b883a 	add	r13,r13,r4
 400ddec:	7c25383a 	mul	r18,r15,r16
 400ddf0:	7d4b383a 	mul	r5,r15,r21
 400ddf4:	84cf383a 	mul	r7,r16,r19
 400ddf8:	901ed43a 	srli	r15,r18,16
 400ddfc:	6008d43a 	srli	r4,r12,16
 400de00:	6010943a 	slli	r8,r12,16
 400de04:	394f883a 	add	r7,r7,r5
 400de08:	333fffcc 	andi	r12,r6,65535
 400de0c:	79df883a 	add	r15,r15,r7
 400de10:	235b883a 	add	r13,r4,r13
 400de14:	9d63383a 	mul	r17,r19,r21
 400de18:	4309883a 	add	r4,r8,r12
 400de1c:	7940022e 	bgeu	r15,r5,400de28 <__muldf3+0x43c>
 400de20:	01400074 	movhi	r5,1
 400de24:	8963883a 	add	r17,r17,r5
 400de28:	780a943a 	slli	r5,r15,16
 400de2c:	91bfffcc 	andi	r6,r18,65535
 400de30:	70c7883a 	add	r3,r14,r3
 400de34:	298d883a 	add	r6,r5,r6
 400de38:	1a8f803a 	cmpltu	r7,r3,r10
 400de3c:	350b883a 	add	r5,r6,r20
 400de40:	20c7883a 	add	r3,r4,r3
 400de44:	3955883a 	add	r10,r7,r5
 400de48:	1909803a 	cmpltu	r4,r3,r4
 400de4c:	6a91883a 	add	r8,r13,r10
 400de50:	780cd43a 	srli	r6,r15,16
 400de54:	2219883a 	add	r12,r4,r8
 400de58:	2d0b803a 	cmpltu	r5,r5,r20
 400de5c:	51cf803a 	cmpltu	r7,r10,r7
 400de60:	29ceb03a 	or	r7,r5,r7
 400de64:	4351803a 	cmpltu	r8,r8,r13
 400de68:	610b803a 	cmpltu	r5,r12,r4
 400de6c:	4148b03a 	or	r4,r8,r5
 400de70:	398f883a 	add	r7,r7,r6
 400de74:	3909883a 	add	r4,r7,r4
 400de78:	1810927a 	slli	r8,r3,9
 400de7c:	2449883a 	add	r4,r4,r17
 400de80:	2008927a 	slli	r4,r4,9
 400de84:	6022d5fa 	srli	r17,r12,23
 400de88:	1806d5fa 	srli	r3,r3,23
 400de8c:	4252b03a 	or	r9,r8,r9
 400de90:	600a927a 	slli	r5,r12,9
 400de94:	4810c03a 	cmpne	r8,r9,zero
 400de98:	2462b03a 	or	r17,r4,r17
 400de9c:	40c6b03a 	or	r3,r8,r3
 400dea0:	8900402c 	andhi	r4,r17,256
 400dea4:	1950b03a 	or	r8,r3,r5
 400dea8:	20000726 	beq	r4,zero,400dec8 <__muldf3+0x4dc>
 400deac:	4006d07a 	srli	r3,r8,1
 400deb0:	880497fa 	slli	r2,r17,31
 400deb4:	4200004c 	andi	r8,r8,1
 400deb8:	8822d07a 	srli	r17,r17,1
 400debc:	1a10b03a 	or	r8,r3,r8
 400dec0:	1210b03a 	or	r8,r2,r8
 400dec4:	5805883a 	mov	r2,r11
 400dec8:	1140ffc4 	addi	r5,r2,1023
 400decc:	0140440e 	bge	zero,r5,400dfe0 <__muldf3+0x5f4>
 400ded0:	40c001cc 	andi	r3,r8,7
 400ded4:	18000726 	beq	r3,zero,400def4 <__muldf3+0x508>
 400ded8:	40c003cc 	andi	r3,r8,15
 400dedc:	01000104 	movi	r4,4
 400dee0:	19000426 	beq	r3,r4,400def4 <__muldf3+0x508>
 400dee4:	4107883a 	add	r3,r8,r4
 400dee8:	1a11803a 	cmpltu	r8,r3,r8
 400deec:	8a23883a 	add	r17,r17,r8
 400def0:	1811883a 	mov	r8,r3
 400def4:	88c0402c 	andhi	r3,r17,256
 400def8:	18000426 	beq	r3,zero,400df0c <__muldf3+0x520>
 400defc:	11410004 	addi	r5,r2,1024
 400df00:	00bfc034 	movhi	r2,65280
 400df04:	10bfffc4 	addi	r2,r2,-1
 400df08:	88a2703a 	and	r17,r17,r2
 400df0c:	0081ff84 	movi	r2,2046
 400df10:	117f6416 	blt	r2,r5,400dca4 <__reset+0xfa81dca4>
 400df14:	8828977a 	slli	r20,r17,29
 400df18:	4010d0fa 	srli	r8,r8,3
 400df1c:	8822927a 	slli	r17,r17,9
 400df20:	2881ffcc 	andi	r2,r5,2047
 400df24:	a228b03a 	or	r20,r20,r8
 400df28:	880ad33a 	srli	r5,r17,12
 400df2c:	b02b883a 	mov	r21,r22
 400df30:	003f0d06 	br	400db68 <__reset+0xfa81db68>
 400df34:	8080022c 	andhi	r2,r16,8
 400df38:	10000926 	beq	r2,zero,400df60 <__muldf3+0x574>
 400df3c:	8880022c 	andhi	r2,r17,8
 400df40:	1000071e 	bne	r2,zero,400df60 <__muldf3+0x574>
 400df44:	00800434 	movhi	r2,16
 400df48:	89400234 	orhi	r5,r17,8
 400df4c:	10bfffc4 	addi	r2,r2,-1
 400df50:	b82b883a 	mov	r21,r23
 400df54:	288a703a 	and	r5,r5,r2
 400df58:	4029883a 	mov	r20,r8
 400df5c:	003f6806 	br	400dd00 <__reset+0xfa81dd00>
 400df60:	00800434 	movhi	r2,16
 400df64:	81400234 	orhi	r5,r16,8
 400df68:	10bfffc4 	addi	r2,r2,-1
 400df6c:	288a703a 	and	r5,r5,r2
 400df70:	003f6306 	br	400dd00 <__reset+0xfa81dd00>
 400df74:	147ff604 	addi	r17,r2,-40
 400df78:	3462983a 	sll	r17,r6,r17
 400df7c:	0011883a 	mov	r8,zero
 400df80:	003f4406 	br	400dc94 <__reset+0xfa81dc94>
 400df84:	3009883a 	mov	r4,r6
 400df88:	d9800215 	stw	r6,8(sp)
 400df8c:	da400115 	stw	r9,4(sp)
 400df90:	da800015 	stw	r10,0(sp)
 400df94:	400ec040 	call	400ec04 <__clzsi2>
 400df98:	10800804 	addi	r2,r2,32
 400df9c:	da800017 	ldw	r10,0(sp)
 400dfa0:	da400117 	ldw	r9,4(sp)
 400dfa4:	d9800217 	ldw	r6,8(sp)
 400dfa8:	003f3006 	br	400dc6c <__reset+0xfa81dc6c>
 400dfac:	143ff604 	addi	r16,r2,-40
 400dfb0:	9c20983a 	sll	r16,r19,r16
 400dfb4:	0029883a 	mov	r20,zero
 400dfb8:	003f1606 	br	400dc14 <__reset+0xfa81dc14>
 400dfbc:	d9800215 	stw	r6,8(sp)
 400dfc0:	d9c00015 	stw	r7,0(sp)
 400dfc4:	da400115 	stw	r9,4(sp)
 400dfc8:	400ec040 	call	400ec04 <__clzsi2>
 400dfcc:	10800804 	addi	r2,r2,32
 400dfd0:	da400117 	ldw	r9,4(sp)
 400dfd4:	d9c00017 	ldw	r7,0(sp)
 400dfd8:	d9800217 	ldw	r6,8(sp)
 400dfdc:	003f0306 	br	400dbec <__reset+0xfa81dbec>
 400dfe0:	00c00044 	movi	r3,1
 400dfe4:	1947c83a 	sub	r3,r3,r5
 400dfe8:	00800e04 	movi	r2,56
 400dfec:	10feda16 	blt	r2,r3,400db58 <__reset+0xfa81db58>
 400dff0:	008007c4 	movi	r2,31
 400dff4:	10c01b16 	blt	r2,r3,400e064 <__muldf3+0x678>
 400dff8:	00800804 	movi	r2,32
 400dffc:	10c5c83a 	sub	r2,r2,r3
 400e000:	888a983a 	sll	r5,r17,r2
 400e004:	40c8d83a 	srl	r4,r8,r3
 400e008:	4084983a 	sll	r2,r8,r2
 400e00c:	88e2d83a 	srl	r17,r17,r3
 400e010:	2906b03a 	or	r3,r5,r4
 400e014:	1004c03a 	cmpne	r2,r2,zero
 400e018:	1886b03a 	or	r3,r3,r2
 400e01c:	188001cc 	andi	r2,r3,7
 400e020:	10000726 	beq	r2,zero,400e040 <__muldf3+0x654>
 400e024:	188003cc 	andi	r2,r3,15
 400e028:	01000104 	movi	r4,4
 400e02c:	11000426 	beq	r2,r4,400e040 <__muldf3+0x654>
 400e030:	1805883a 	mov	r2,r3
 400e034:	10c00104 	addi	r3,r2,4
 400e038:	1885803a 	cmpltu	r2,r3,r2
 400e03c:	88a3883a 	add	r17,r17,r2
 400e040:	8880202c 	andhi	r2,r17,128
 400e044:	10001c26 	beq	r2,zero,400e0b8 <__muldf3+0x6cc>
 400e048:	b02b883a 	mov	r21,r22
 400e04c:	00800044 	movi	r2,1
 400e050:	000b883a 	mov	r5,zero
 400e054:	0029883a 	mov	r20,zero
 400e058:	003ec306 	br	400db68 <__reset+0xfa81db68>
 400e05c:	5805883a 	mov	r2,r11
 400e060:	003f9906 	br	400dec8 <__reset+0xfa81dec8>
 400e064:	00bff844 	movi	r2,-31
 400e068:	1145c83a 	sub	r2,r2,r5
 400e06c:	8888d83a 	srl	r4,r17,r2
 400e070:	00800804 	movi	r2,32
 400e074:	18801a26 	beq	r3,r2,400e0e0 <__muldf3+0x6f4>
 400e078:	00801004 	movi	r2,64
 400e07c:	10c5c83a 	sub	r2,r2,r3
 400e080:	8884983a 	sll	r2,r17,r2
 400e084:	1204b03a 	or	r2,r2,r8
 400e088:	1004c03a 	cmpne	r2,r2,zero
 400e08c:	2084b03a 	or	r2,r4,r2
 400e090:	144001cc 	andi	r17,r2,7
 400e094:	88000d1e 	bne	r17,zero,400e0cc <__muldf3+0x6e0>
 400e098:	000b883a 	mov	r5,zero
 400e09c:	1028d0fa 	srli	r20,r2,3
 400e0a0:	b02b883a 	mov	r21,r22
 400e0a4:	0005883a 	mov	r2,zero
 400e0a8:	a468b03a 	or	r20,r20,r17
 400e0ac:	003eae06 	br	400db68 <__reset+0xfa81db68>
 400e0b0:	1007883a 	mov	r3,r2
 400e0b4:	0023883a 	mov	r17,zero
 400e0b8:	880a927a 	slli	r5,r17,9
 400e0bc:	1805883a 	mov	r2,r3
 400e0c0:	8822977a 	slli	r17,r17,29
 400e0c4:	280ad33a 	srli	r5,r5,12
 400e0c8:	003ff406 	br	400e09c <__reset+0xfa81e09c>
 400e0cc:	10c003cc 	andi	r3,r2,15
 400e0d0:	01000104 	movi	r4,4
 400e0d4:	193ff626 	beq	r3,r4,400e0b0 <__reset+0xfa81e0b0>
 400e0d8:	0023883a 	mov	r17,zero
 400e0dc:	003fd506 	br	400e034 <__reset+0xfa81e034>
 400e0e0:	0005883a 	mov	r2,zero
 400e0e4:	003fe706 	br	400e084 <__reset+0xfa81e084>
 400e0e8:	00800434 	movhi	r2,16
 400e0ec:	89400234 	orhi	r5,r17,8
 400e0f0:	10bfffc4 	addi	r2,r2,-1
 400e0f4:	b02b883a 	mov	r21,r22
 400e0f8:	288a703a 	and	r5,r5,r2
 400e0fc:	4029883a 	mov	r20,r8
 400e100:	003eff06 	br	400dd00 <__reset+0xfa81dd00>

0400e104 <__subdf3>:
 400e104:	02000434 	movhi	r8,16
 400e108:	423fffc4 	addi	r8,r8,-1
 400e10c:	defffb04 	addi	sp,sp,-20
 400e110:	2a14703a 	and	r10,r5,r8
 400e114:	3812d53a 	srli	r9,r7,20
 400e118:	3a10703a 	and	r8,r7,r8
 400e11c:	2006d77a 	srli	r3,r4,29
 400e120:	3004d77a 	srli	r2,r6,29
 400e124:	dc000015 	stw	r16,0(sp)
 400e128:	501490fa 	slli	r10,r10,3
 400e12c:	2820d53a 	srli	r16,r5,20
 400e130:	401090fa 	slli	r8,r8,3
 400e134:	dc800215 	stw	r18,8(sp)
 400e138:	dc400115 	stw	r17,4(sp)
 400e13c:	dfc00415 	stw	ra,16(sp)
 400e140:	202290fa 	slli	r17,r4,3
 400e144:	dcc00315 	stw	r19,12(sp)
 400e148:	4a41ffcc 	andi	r9,r9,2047
 400e14c:	0101ffc4 	movi	r4,2047
 400e150:	2824d7fa 	srli	r18,r5,31
 400e154:	8401ffcc 	andi	r16,r16,2047
 400e158:	50c6b03a 	or	r3,r10,r3
 400e15c:	380ed7fa 	srli	r7,r7,31
 400e160:	408ab03a 	or	r5,r8,r2
 400e164:	300c90fa 	slli	r6,r6,3
 400e168:	49009626 	beq	r9,r4,400e3c4 <__subdf3+0x2c0>
 400e16c:	39c0005c 	xori	r7,r7,1
 400e170:	8245c83a 	sub	r2,r16,r9
 400e174:	3c807426 	beq	r7,r18,400e348 <__subdf3+0x244>
 400e178:	0080af0e 	bge	zero,r2,400e438 <__subdf3+0x334>
 400e17c:	48002a1e 	bne	r9,zero,400e228 <__subdf3+0x124>
 400e180:	2988b03a 	or	r4,r5,r6
 400e184:	20009a1e 	bne	r4,zero,400e3f0 <__subdf3+0x2ec>
 400e188:	888001cc 	andi	r2,r17,7
 400e18c:	10000726 	beq	r2,zero,400e1ac <__subdf3+0xa8>
 400e190:	888003cc 	andi	r2,r17,15
 400e194:	01000104 	movi	r4,4
 400e198:	11000426 	beq	r2,r4,400e1ac <__subdf3+0xa8>
 400e19c:	890b883a 	add	r5,r17,r4
 400e1a0:	2c63803a 	cmpltu	r17,r5,r17
 400e1a4:	1c47883a 	add	r3,r3,r17
 400e1a8:	2823883a 	mov	r17,r5
 400e1ac:	1880202c 	andhi	r2,r3,128
 400e1b0:	10005926 	beq	r2,zero,400e318 <__subdf3+0x214>
 400e1b4:	84000044 	addi	r16,r16,1
 400e1b8:	0081ffc4 	movi	r2,2047
 400e1bc:	8080be26 	beq	r16,r2,400e4b8 <__subdf3+0x3b4>
 400e1c0:	017fe034 	movhi	r5,65408
 400e1c4:	297fffc4 	addi	r5,r5,-1
 400e1c8:	1946703a 	and	r3,r3,r5
 400e1cc:	1804977a 	slli	r2,r3,29
 400e1d0:	1806927a 	slli	r3,r3,9
 400e1d4:	8822d0fa 	srli	r17,r17,3
 400e1d8:	8401ffcc 	andi	r16,r16,2047
 400e1dc:	180ad33a 	srli	r5,r3,12
 400e1e0:	9100004c 	andi	r4,r18,1
 400e1e4:	1444b03a 	or	r2,r2,r17
 400e1e8:	80c1ffcc 	andi	r3,r16,2047
 400e1ec:	1820953a 	slli	r16,r3,20
 400e1f0:	20c03fcc 	andi	r3,r4,255
 400e1f4:	180897fa 	slli	r4,r3,31
 400e1f8:	00c00434 	movhi	r3,16
 400e1fc:	18ffffc4 	addi	r3,r3,-1
 400e200:	28c6703a 	and	r3,r5,r3
 400e204:	1c06b03a 	or	r3,r3,r16
 400e208:	1906b03a 	or	r3,r3,r4
 400e20c:	dfc00417 	ldw	ra,16(sp)
 400e210:	dcc00317 	ldw	r19,12(sp)
 400e214:	dc800217 	ldw	r18,8(sp)
 400e218:	dc400117 	ldw	r17,4(sp)
 400e21c:	dc000017 	ldw	r16,0(sp)
 400e220:	dec00504 	addi	sp,sp,20
 400e224:	f800283a 	ret
 400e228:	0101ffc4 	movi	r4,2047
 400e22c:	813fd626 	beq	r16,r4,400e188 <__reset+0xfa81e188>
 400e230:	29402034 	orhi	r5,r5,128
 400e234:	01000e04 	movi	r4,56
 400e238:	2080a316 	blt	r4,r2,400e4c8 <__subdf3+0x3c4>
 400e23c:	010007c4 	movi	r4,31
 400e240:	2080c616 	blt	r4,r2,400e55c <__subdf3+0x458>
 400e244:	01000804 	movi	r4,32
 400e248:	2089c83a 	sub	r4,r4,r2
 400e24c:	2910983a 	sll	r8,r5,r4
 400e250:	308ed83a 	srl	r7,r6,r2
 400e254:	3108983a 	sll	r4,r6,r4
 400e258:	2884d83a 	srl	r2,r5,r2
 400e25c:	41ccb03a 	or	r6,r8,r7
 400e260:	2008c03a 	cmpne	r4,r4,zero
 400e264:	310cb03a 	or	r6,r6,r4
 400e268:	898dc83a 	sub	r6,r17,r6
 400e26c:	89a3803a 	cmpltu	r17,r17,r6
 400e270:	1887c83a 	sub	r3,r3,r2
 400e274:	1c47c83a 	sub	r3,r3,r17
 400e278:	3023883a 	mov	r17,r6
 400e27c:	1880202c 	andhi	r2,r3,128
 400e280:	10002326 	beq	r2,zero,400e310 <__subdf3+0x20c>
 400e284:	04c02034 	movhi	r19,128
 400e288:	9cffffc4 	addi	r19,r19,-1
 400e28c:	1ce6703a 	and	r19,r3,r19
 400e290:	98007a26 	beq	r19,zero,400e47c <__subdf3+0x378>
 400e294:	9809883a 	mov	r4,r19
 400e298:	400ec040 	call	400ec04 <__clzsi2>
 400e29c:	113ffe04 	addi	r4,r2,-8
 400e2a0:	00c007c4 	movi	r3,31
 400e2a4:	19007b16 	blt	r3,r4,400e494 <__subdf3+0x390>
 400e2a8:	00800804 	movi	r2,32
 400e2ac:	1105c83a 	sub	r2,r2,r4
 400e2b0:	8884d83a 	srl	r2,r17,r2
 400e2b4:	9906983a 	sll	r3,r19,r4
 400e2b8:	8922983a 	sll	r17,r17,r4
 400e2bc:	10c4b03a 	or	r2,r2,r3
 400e2c0:	24007816 	blt	r4,r16,400e4a4 <__subdf3+0x3a0>
 400e2c4:	2421c83a 	sub	r16,r4,r16
 400e2c8:	80c00044 	addi	r3,r16,1
 400e2cc:	010007c4 	movi	r4,31
 400e2d0:	20c09516 	blt	r4,r3,400e528 <__subdf3+0x424>
 400e2d4:	01400804 	movi	r5,32
 400e2d8:	28cbc83a 	sub	r5,r5,r3
 400e2dc:	88c8d83a 	srl	r4,r17,r3
 400e2e0:	8962983a 	sll	r17,r17,r5
 400e2e4:	114a983a 	sll	r5,r2,r5
 400e2e8:	10c6d83a 	srl	r3,r2,r3
 400e2ec:	8804c03a 	cmpne	r2,r17,zero
 400e2f0:	290ab03a 	or	r5,r5,r4
 400e2f4:	28a2b03a 	or	r17,r5,r2
 400e2f8:	0021883a 	mov	r16,zero
 400e2fc:	003fa206 	br	400e188 <__reset+0xfa81e188>
 400e300:	2090b03a 	or	r8,r4,r2
 400e304:	40018e26 	beq	r8,zero,400e940 <__subdf3+0x83c>
 400e308:	1007883a 	mov	r3,r2
 400e30c:	2023883a 	mov	r17,r4
 400e310:	888001cc 	andi	r2,r17,7
 400e314:	103f9e1e 	bne	r2,zero,400e190 <__reset+0xfa81e190>
 400e318:	1804977a 	slli	r2,r3,29
 400e31c:	8822d0fa 	srli	r17,r17,3
 400e320:	1810d0fa 	srli	r8,r3,3
 400e324:	9100004c 	andi	r4,r18,1
 400e328:	1444b03a 	or	r2,r2,r17
 400e32c:	00c1ffc4 	movi	r3,2047
 400e330:	80c02826 	beq	r16,r3,400e3d4 <__subdf3+0x2d0>
 400e334:	01400434 	movhi	r5,16
 400e338:	297fffc4 	addi	r5,r5,-1
 400e33c:	80e0703a 	and	r16,r16,r3
 400e340:	414a703a 	and	r5,r8,r5
 400e344:	003fa806 	br	400e1e8 <__reset+0xfa81e1e8>
 400e348:	0080630e 	bge	zero,r2,400e4d8 <__subdf3+0x3d4>
 400e34c:	48003026 	beq	r9,zero,400e410 <__subdf3+0x30c>
 400e350:	0101ffc4 	movi	r4,2047
 400e354:	813f8c26 	beq	r16,r4,400e188 <__reset+0xfa81e188>
 400e358:	29402034 	orhi	r5,r5,128
 400e35c:	01000e04 	movi	r4,56
 400e360:	2080a90e 	bge	r4,r2,400e608 <__subdf3+0x504>
 400e364:	298cb03a 	or	r6,r5,r6
 400e368:	3012c03a 	cmpne	r9,r6,zero
 400e36c:	0005883a 	mov	r2,zero
 400e370:	4c53883a 	add	r9,r9,r17
 400e374:	4c63803a 	cmpltu	r17,r9,r17
 400e378:	10c7883a 	add	r3,r2,r3
 400e37c:	88c7883a 	add	r3,r17,r3
 400e380:	4823883a 	mov	r17,r9
 400e384:	1880202c 	andhi	r2,r3,128
 400e388:	1000d026 	beq	r2,zero,400e6cc <__subdf3+0x5c8>
 400e38c:	84000044 	addi	r16,r16,1
 400e390:	0081ffc4 	movi	r2,2047
 400e394:	8080fe26 	beq	r16,r2,400e790 <__subdf3+0x68c>
 400e398:	00bfe034 	movhi	r2,65408
 400e39c:	10bfffc4 	addi	r2,r2,-1
 400e3a0:	1886703a 	and	r3,r3,r2
 400e3a4:	880ad07a 	srli	r5,r17,1
 400e3a8:	180497fa 	slli	r2,r3,31
 400e3ac:	8900004c 	andi	r4,r17,1
 400e3b0:	2922b03a 	or	r17,r5,r4
 400e3b4:	1806d07a 	srli	r3,r3,1
 400e3b8:	1462b03a 	or	r17,r2,r17
 400e3bc:	3825883a 	mov	r18,r7
 400e3c0:	003f7106 	br	400e188 <__reset+0xfa81e188>
 400e3c4:	2984b03a 	or	r2,r5,r6
 400e3c8:	103f6826 	beq	r2,zero,400e16c <__reset+0xfa81e16c>
 400e3cc:	39c03fcc 	andi	r7,r7,255
 400e3d0:	003f6706 	br	400e170 <__reset+0xfa81e170>
 400e3d4:	4086b03a 	or	r3,r8,r2
 400e3d8:	18015226 	beq	r3,zero,400e924 <__subdf3+0x820>
 400e3dc:	00c00434 	movhi	r3,16
 400e3e0:	41400234 	orhi	r5,r8,8
 400e3e4:	18ffffc4 	addi	r3,r3,-1
 400e3e8:	28ca703a 	and	r5,r5,r3
 400e3ec:	003f7e06 	br	400e1e8 <__reset+0xfa81e1e8>
 400e3f0:	10bfffc4 	addi	r2,r2,-1
 400e3f4:	1000491e 	bne	r2,zero,400e51c <__subdf3+0x418>
 400e3f8:	898fc83a 	sub	r7,r17,r6
 400e3fc:	89e3803a 	cmpltu	r17,r17,r7
 400e400:	1947c83a 	sub	r3,r3,r5
 400e404:	1c47c83a 	sub	r3,r3,r17
 400e408:	3823883a 	mov	r17,r7
 400e40c:	003f9b06 	br	400e27c <__reset+0xfa81e27c>
 400e410:	2988b03a 	or	r4,r5,r6
 400e414:	203f5c26 	beq	r4,zero,400e188 <__reset+0xfa81e188>
 400e418:	10bfffc4 	addi	r2,r2,-1
 400e41c:	1000931e 	bne	r2,zero,400e66c <__subdf3+0x568>
 400e420:	898d883a 	add	r6,r17,r6
 400e424:	3463803a 	cmpltu	r17,r6,r17
 400e428:	1947883a 	add	r3,r3,r5
 400e42c:	88c7883a 	add	r3,r17,r3
 400e430:	3023883a 	mov	r17,r6
 400e434:	003fd306 	br	400e384 <__reset+0xfa81e384>
 400e438:	1000541e 	bne	r2,zero,400e58c <__subdf3+0x488>
 400e43c:	80800044 	addi	r2,r16,1
 400e440:	1081ffcc 	andi	r2,r2,2047
 400e444:	01000044 	movi	r4,1
 400e448:	2080a20e 	bge	r4,r2,400e6d4 <__subdf3+0x5d0>
 400e44c:	8989c83a 	sub	r4,r17,r6
 400e450:	8905803a 	cmpltu	r2,r17,r4
 400e454:	1967c83a 	sub	r19,r3,r5
 400e458:	98a7c83a 	sub	r19,r19,r2
 400e45c:	9880202c 	andhi	r2,r19,128
 400e460:	10006326 	beq	r2,zero,400e5f0 <__subdf3+0x4ec>
 400e464:	3463c83a 	sub	r17,r6,r17
 400e468:	28c7c83a 	sub	r3,r5,r3
 400e46c:	344d803a 	cmpltu	r6,r6,r17
 400e470:	19a7c83a 	sub	r19,r3,r6
 400e474:	3825883a 	mov	r18,r7
 400e478:	983f861e 	bne	r19,zero,400e294 <__reset+0xfa81e294>
 400e47c:	8809883a 	mov	r4,r17
 400e480:	400ec040 	call	400ec04 <__clzsi2>
 400e484:	10800804 	addi	r2,r2,32
 400e488:	113ffe04 	addi	r4,r2,-8
 400e48c:	00c007c4 	movi	r3,31
 400e490:	193f850e 	bge	r3,r4,400e2a8 <__reset+0xfa81e2a8>
 400e494:	10bff604 	addi	r2,r2,-40
 400e498:	8884983a 	sll	r2,r17,r2
 400e49c:	0023883a 	mov	r17,zero
 400e4a0:	243f880e 	bge	r4,r16,400e2c4 <__reset+0xfa81e2c4>
 400e4a4:	00ffe034 	movhi	r3,65408
 400e4a8:	18ffffc4 	addi	r3,r3,-1
 400e4ac:	8121c83a 	sub	r16,r16,r4
 400e4b0:	10c6703a 	and	r3,r2,r3
 400e4b4:	003f3406 	br	400e188 <__reset+0xfa81e188>
 400e4b8:	9100004c 	andi	r4,r18,1
 400e4bc:	000b883a 	mov	r5,zero
 400e4c0:	0005883a 	mov	r2,zero
 400e4c4:	003f4806 	br	400e1e8 <__reset+0xfa81e1e8>
 400e4c8:	298cb03a 	or	r6,r5,r6
 400e4cc:	300cc03a 	cmpne	r6,r6,zero
 400e4d0:	0005883a 	mov	r2,zero
 400e4d4:	003f6406 	br	400e268 <__reset+0xfa81e268>
 400e4d8:	10009a1e 	bne	r2,zero,400e744 <__subdf3+0x640>
 400e4dc:	82400044 	addi	r9,r16,1
 400e4e0:	4881ffcc 	andi	r2,r9,2047
 400e4e4:	02800044 	movi	r10,1
 400e4e8:	5080670e 	bge	r10,r2,400e688 <__subdf3+0x584>
 400e4ec:	0081ffc4 	movi	r2,2047
 400e4f0:	4880af26 	beq	r9,r2,400e7b0 <__subdf3+0x6ac>
 400e4f4:	898d883a 	add	r6,r17,r6
 400e4f8:	1945883a 	add	r2,r3,r5
 400e4fc:	3447803a 	cmpltu	r3,r6,r17
 400e500:	1887883a 	add	r3,r3,r2
 400e504:	182297fa 	slli	r17,r3,31
 400e508:	300cd07a 	srli	r6,r6,1
 400e50c:	1806d07a 	srli	r3,r3,1
 400e510:	4821883a 	mov	r16,r9
 400e514:	89a2b03a 	or	r17,r17,r6
 400e518:	003f1b06 	br	400e188 <__reset+0xfa81e188>
 400e51c:	0101ffc4 	movi	r4,2047
 400e520:	813f441e 	bne	r16,r4,400e234 <__reset+0xfa81e234>
 400e524:	003f1806 	br	400e188 <__reset+0xfa81e188>
 400e528:	843ff844 	addi	r16,r16,-31
 400e52c:	01400804 	movi	r5,32
 400e530:	1408d83a 	srl	r4,r2,r16
 400e534:	19405026 	beq	r3,r5,400e678 <__subdf3+0x574>
 400e538:	01401004 	movi	r5,64
 400e53c:	28c7c83a 	sub	r3,r5,r3
 400e540:	10c4983a 	sll	r2,r2,r3
 400e544:	88a2b03a 	or	r17,r17,r2
 400e548:	8822c03a 	cmpne	r17,r17,zero
 400e54c:	2462b03a 	or	r17,r4,r17
 400e550:	0007883a 	mov	r3,zero
 400e554:	0021883a 	mov	r16,zero
 400e558:	003f6d06 	br	400e310 <__reset+0xfa81e310>
 400e55c:	11fff804 	addi	r7,r2,-32
 400e560:	01000804 	movi	r4,32
 400e564:	29ced83a 	srl	r7,r5,r7
 400e568:	11004526 	beq	r2,r4,400e680 <__subdf3+0x57c>
 400e56c:	01001004 	movi	r4,64
 400e570:	2089c83a 	sub	r4,r4,r2
 400e574:	2904983a 	sll	r2,r5,r4
 400e578:	118cb03a 	or	r6,r2,r6
 400e57c:	300cc03a 	cmpne	r6,r6,zero
 400e580:	398cb03a 	or	r6,r7,r6
 400e584:	0005883a 	mov	r2,zero
 400e588:	003f3706 	br	400e268 <__reset+0xfa81e268>
 400e58c:	80002a26 	beq	r16,zero,400e638 <__subdf3+0x534>
 400e590:	0101ffc4 	movi	r4,2047
 400e594:	49006626 	beq	r9,r4,400e730 <__subdf3+0x62c>
 400e598:	0085c83a 	sub	r2,zero,r2
 400e59c:	18c02034 	orhi	r3,r3,128
 400e5a0:	01000e04 	movi	r4,56
 400e5a4:	20807e16 	blt	r4,r2,400e7a0 <__subdf3+0x69c>
 400e5a8:	010007c4 	movi	r4,31
 400e5ac:	2080e716 	blt	r4,r2,400e94c <__subdf3+0x848>
 400e5b0:	01000804 	movi	r4,32
 400e5b4:	2089c83a 	sub	r4,r4,r2
 400e5b8:	1914983a 	sll	r10,r3,r4
 400e5bc:	8890d83a 	srl	r8,r17,r2
 400e5c0:	8908983a 	sll	r4,r17,r4
 400e5c4:	1884d83a 	srl	r2,r3,r2
 400e5c8:	5222b03a 	or	r17,r10,r8
 400e5cc:	2006c03a 	cmpne	r3,r4,zero
 400e5d0:	88e2b03a 	or	r17,r17,r3
 400e5d4:	3463c83a 	sub	r17,r6,r17
 400e5d8:	2885c83a 	sub	r2,r5,r2
 400e5dc:	344d803a 	cmpltu	r6,r6,r17
 400e5e0:	1187c83a 	sub	r3,r2,r6
 400e5e4:	4821883a 	mov	r16,r9
 400e5e8:	3825883a 	mov	r18,r7
 400e5ec:	003f2306 	br	400e27c <__reset+0xfa81e27c>
 400e5f0:	24d0b03a 	or	r8,r4,r19
 400e5f4:	40001b1e 	bne	r8,zero,400e664 <__subdf3+0x560>
 400e5f8:	0005883a 	mov	r2,zero
 400e5fc:	0009883a 	mov	r4,zero
 400e600:	0021883a 	mov	r16,zero
 400e604:	003f4906 	br	400e32c <__reset+0xfa81e32c>
 400e608:	010007c4 	movi	r4,31
 400e60c:	20803a16 	blt	r4,r2,400e6f8 <__subdf3+0x5f4>
 400e610:	01000804 	movi	r4,32
 400e614:	2089c83a 	sub	r4,r4,r2
 400e618:	2912983a 	sll	r9,r5,r4
 400e61c:	3090d83a 	srl	r8,r6,r2
 400e620:	3108983a 	sll	r4,r6,r4
 400e624:	2884d83a 	srl	r2,r5,r2
 400e628:	4a12b03a 	or	r9,r9,r8
 400e62c:	2008c03a 	cmpne	r4,r4,zero
 400e630:	4912b03a 	or	r9,r9,r4
 400e634:	003f4e06 	br	400e370 <__reset+0xfa81e370>
 400e638:	1c48b03a 	or	r4,r3,r17
 400e63c:	20003c26 	beq	r4,zero,400e730 <__subdf3+0x62c>
 400e640:	0084303a 	nor	r2,zero,r2
 400e644:	1000381e 	bne	r2,zero,400e728 <__subdf3+0x624>
 400e648:	3463c83a 	sub	r17,r6,r17
 400e64c:	28c5c83a 	sub	r2,r5,r3
 400e650:	344d803a 	cmpltu	r6,r6,r17
 400e654:	1187c83a 	sub	r3,r2,r6
 400e658:	4821883a 	mov	r16,r9
 400e65c:	3825883a 	mov	r18,r7
 400e660:	003f0606 	br	400e27c <__reset+0xfa81e27c>
 400e664:	2023883a 	mov	r17,r4
 400e668:	003f0906 	br	400e290 <__reset+0xfa81e290>
 400e66c:	0101ffc4 	movi	r4,2047
 400e670:	813f3a1e 	bne	r16,r4,400e35c <__reset+0xfa81e35c>
 400e674:	003ec406 	br	400e188 <__reset+0xfa81e188>
 400e678:	0005883a 	mov	r2,zero
 400e67c:	003fb106 	br	400e544 <__reset+0xfa81e544>
 400e680:	0005883a 	mov	r2,zero
 400e684:	003fbc06 	br	400e578 <__reset+0xfa81e578>
 400e688:	1c44b03a 	or	r2,r3,r17
 400e68c:	80008e1e 	bne	r16,zero,400e8c8 <__subdf3+0x7c4>
 400e690:	1000c826 	beq	r2,zero,400e9b4 <__subdf3+0x8b0>
 400e694:	2984b03a 	or	r2,r5,r6
 400e698:	103ebb26 	beq	r2,zero,400e188 <__reset+0xfa81e188>
 400e69c:	8989883a 	add	r4,r17,r6
 400e6a0:	1945883a 	add	r2,r3,r5
 400e6a4:	2447803a 	cmpltu	r3,r4,r17
 400e6a8:	1887883a 	add	r3,r3,r2
 400e6ac:	1880202c 	andhi	r2,r3,128
 400e6b0:	2023883a 	mov	r17,r4
 400e6b4:	103f1626 	beq	r2,zero,400e310 <__reset+0xfa81e310>
 400e6b8:	00bfe034 	movhi	r2,65408
 400e6bc:	10bfffc4 	addi	r2,r2,-1
 400e6c0:	5021883a 	mov	r16,r10
 400e6c4:	1886703a 	and	r3,r3,r2
 400e6c8:	003eaf06 	br	400e188 <__reset+0xfa81e188>
 400e6cc:	3825883a 	mov	r18,r7
 400e6d0:	003f0f06 	br	400e310 <__reset+0xfa81e310>
 400e6d4:	1c44b03a 	or	r2,r3,r17
 400e6d8:	8000251e 	bne	r16,zero,400e770 <__subdf3+0x66c>
 400e6dc:	1000661e 	bne	r2,zero,400e878 <__subdf3+0x774>
 400e6e0:	2990b03a 	or	r8,r5,r6
 400e6e4:	40009626 	beq	r8,zero,400e940 <__subdf3+0x83c>
 400e6e8:	2807883a 	mov	r3,r5
 400e6ec:	3023883a 	mov	r17,r6
 400e6f0:	3825883a 	mov	r18,r7
 400e6f4:	003ea406 	br	400e188 <__reset+0xfa81e188>
 400e6f8:	127ff804 	addi	r9,r2,-32
 400e6fc:	01000804 	movi	r4,32
 400e700:	2a52d83a 	srl	r9,r5,r9
 400e704:	11008c26 	beq	r2,r4,400e938 <__subdf3+0x834>
 400e708:	01001004 	movi	r4,64
 400e70c:	2085c83a 	sub	r2,r4,r2
 400e710:	2884983a 	sll	r2,r5,r2
 400e714:	118cb03a 	or	r6,r2,r6
 400e718:	300cc03a 	cmpne	r6,r6,zero
 400e71c:	4992b03a 	or	r9,r9,r6
 400e720:	0005883a 	mov	r2,zero
 400e724:	003f1206 	br	400e370 <__reset+0xfa81e370>
 400e728:	0101ffc4 	movi	r4,2047
 400e72c:	493f9c1e 	bne	r9,r4,400e5a0 <__reset+0xfa81e5a0>
 400e730:	2807883a 	mov	r3,r5
 400e734:	3023883a 	mov	r17,r6
 400e738:	4821883a 	mov	r16,r9
 400e73c:	3825883a 	mov	r18,r7
 400e740:	003e9106 	br	400e188 <__reset+0xfa81e188>
 400e744:	80001f1e 	bne	r16,zero,400e7c4 <__subdf3+0x6c0>
 400e748:	1c48b03a 	or	r4,r3,r17
 400e74c:	20005a26 	beq	r4,zero,400e8b8 <__subdf3+0x7b4>
 400e750:	0084303a 	nor	r2,zero,r2
 400e754:	1000561e 	bne	r2,zero,400e8b0 <__subdf3+0x7ac>
 400e758:	89a3883a 	add	r17,r17,r6
 400e75c:	1945883a 	add	r2,r3,r5
 400e760:	898d803a 	cmpltu	r6,r17,r6
 400e764:	3087883a 	add	r3,r6,r2
 400e768:	4821883a 	mov	r16,r9
 400e76c:	003f0506 	br	400e384 <__reset+0xfa81e384>
 400e770:	10002b1e 	bne	r2,zero,400e820 <__subdf3+0x71c>
 400e774:	2984b03a 	or	r2,r5,r6
 400e778:	10008026 	beq	r2,zero,400e97c <__subdf3+0x878>
 400e77c:	2807883a 	mov	r3,r5
 400e780:	3023883a 	mov	r17,r6
 400e784:	3825883a 	mov	r18,r7
 400e788:	0401ffc4 	movi	r16,2047
 400e78c:	003e7e06 	br	400e188 <__reset+0xfa81e188>
 400e790:	3809883a 	mov	r4,r7
 400e794:	0011883a 	mov	r8,zero
 400e798:	0005883a 	mov	r2,zero
 400e79c:	003ee306 	br	400e32c <__reset+0xfa81e32c>
 400e7a0:	1c62b03a 	or	r17,r3,r17
 400e7a4:	8822c03a 	cmpne	r17,r17,zero
 400e7a8:	0005883a 	mov	r2,zero
 400e7ac:	003f8906 	br	400e5d4 <__reset+0xfa81e5d4>
 400e7b0:	3809883a 	mov	r4,r7
 400e7b4:	4821883a 	mov	r16,r9
 400e7b8:	0011883a 	mov	r8,zero
 400e7bc:	0005883a 	mov	r2,zero
 400e7c0:	003eda06 	br	400e32c <__reset+0xfa81e32c>
 400e7c4:	0101ffc4 	movi	r4,2047
 400e7c8:	49003b26 	beq	r9,r4,400e8b8 <__subdf3+0x7b4>
 400e7cc:	0085c83a 	sub	r2,zero,r2
 400e7d0:	18c02034 	orhi	r3,r3,128
 400e7d4:	01000e04 	movi	r4,56
 400e7d8:	20806e16 	blt	r4,r2,400e994 <__subdf3+0x890>
 400e7dc:	010007c4 	movi	r4,31
 400e7e0:	20807716 	blt	r4,r2,400e9c0 <__subdf3+0x8bc>
 400e7e4:	01000804 	movi	r4,32
 400e7e8:	2089c83a 	sub	r4,r4,r2
 400e7ec:	1914983a 	sll	r10,r3,r4
 400e7f0:	8890d83a 	srl	r8,r17,r2
 400e7f4:	8908983a 	sll	r4,r17,r4
 400e7f8:	1884d83a 	srl	r2,r3,r2
 400e7fc:	5222b03a 	or	r17,r10,r8
 400e800:	2006c03a 	cmpne	r3,r4,zero
 400e804:	88e2b03a 	or	r17,r17,r3
 400e808:	89a3883a 	add	r17,r17,r6
 400e80c:	1145883a 	add	r2,r2,r5
 400e810:	898d803a 	cmpltu	r6,r17,r6
 400e814:	3087883a 	add	r3,r6,r2
 400e818:	4821883a 	mov	r16,r9
 400e81c:	003ed906 	br	400e384 <__reset+0xfa81e384>
 400e820:	2984b03a 	or	r2,r5,r6
 400e824:	10004226 	beq	r2,zero,400e930 <__subdf3+0x82c>
 400e828:	1808d0fa 	srli	r4,r3,3
 400e82c:	8822d0fa 	srli	r17,r17,3
 400e830:	1806977a 	slli	r3,r3,29
 400e834:	2080022c 	andhi	r2,r4,8
 400e838:	1c62b03a 	or	r17,r3,r17
 400e83c:	10000826 	beq	r2,zero,400e860 <__subdf3+0x75c>
 400e840:	2812d0fa 	srli	r9,r5,3
 400e844:	4880022c 	andhi	r2,r9,8
 400e848:	1000051e 	bne	r2,zero,400e860 <__subdf3+0x75c>
 400e84c:	300cd0fa 	srli	r6,r6,3
 400e850:	2804977a 	slli	r2,r5,29
 400e854:	4809883a 	mov	r4,r9
 400e858:	3825883a 	mov	r18,r7
 400e85c:	11a2b03a 	or	r17,r2,r6
 400e860:	8806d77a 	srli	r3,r17,29
 400e864:	200890fa 	slli	r4,r4,3
 400e868:	882290fa 	slli	r17,r17,3
 400e86c:	0401ffc4 	movi	r16,2047
 400e870:	1906b03a 	or	r3,r3,r4
 400e874:	003e4406 	br	400e188 <__reset+0xfa81e188>
 400e878:	2984b03a 	or	r2,r5,r6
 400e87c:	103e4226 	beq	r2,zero,400e188 <__reset+0xfa81e188>
 400e880:	8989c83a 	sub	r4,r17,r6
 400e884:	8911803a 	cmpltu	r8,r17,r4
 400e888:	1945c83a 	sub	r2,r3,r5
 400e88c:	1205c83a 	sub	r2,r2,r8
 400e890:	1200202c 	andhi	r8,r2,128
 400e894:	403e9a26 	beq	r8,zero,400e300 <__reset+0xfa81e300>
 400e898:	3463c83a 	sub	r17,r6,r17
 400e89c:	28c5c83a 	sub	r2,r5,r3
 400e8a0:	344d803a 	cmpltu	r6,r6,r17
 400e8a4:	1187c83a 	sub	r3,r2,r6
 400e8a8:	3825883a 	mov	r18,r7
 400e8ac:	003e3606 	br	400e188 <__reset+0xfa81e188>
 400e8b0:	0101ffc4 	movi	r4,2047
 400e8b4:	493fc71e 	bne	r9,r4,400e7d4 <__reset+0xfa81e7d4>
 400e8b8:	2807883a 	mov	r3,r5
 400e8bc:	3023883a 	mov	r17,r6
 400e8c0:	4821883a 	mov	r16,r9
 400e8c4:	003e3006 	br	400e188 <__reset+0xfa81e188>
 400e8c8:	10003626 	beq	r2,zero,400e9a4 <__subdf3+0x8a0>
 400e8cc:	2984b03a 	or	r2,r5,r6
 400e8d0:	10001726 	beq	r2,zero,400e930 <__subdf3+0x82c>
 400e8d4:	1808d0fa 	srli	r4,r3,3
 400e8d8:	8822d0fa 	srli	r17,r17,3
 400e8dc:	1806977a 	slli	r3,r3,29
 400e8e0:	2080022c 	andhi	r2,r4,8
 400e8e4:	1c62b03a 	or	r17,r3,r17
 400e8e8:	10000726 	beq	r2,zero,400e908 <__subdf3+0x804>
 400e8ec:	2812d0fa 	srli	r9,r5,3
 400e8f0:	4880022c 	andhi	r2,r9,8
 400e8f4:	1000041e 	bne	r2,zero,400e908 <__subdf3+0x804>
 400e8f8:	300cd0fa 	srli	r6,r6,3
 400e8fc:	2804977a 	slli	r2,r5,29
 400e900:	4809883a 	mov	r4,r9
 400e904:	11a2b03a 	or	r17,r2,r6
 400e908:	8806d77a 	srli	r3,r17,29
 400e90c:	200890fa 	slli	r4,r4,3
 400e910:	882290fa 	slli	r17,r17,3
 400e914:	3825883a 	mov	r18,r7
 400e918:	1906b03a 	or	r3,r3,r4
 400e91c:	0401ffc4 	movi	r16,2047
 400e920:	003e1906 	br	400e188 <__reset+0xfa81e188>
 400e924:	000b883a 	mov	r5,zero
 400e928:	0005883a 	mov	r2,zero
 400e92c:	003e2e06 	br	400e1e8 <__reset+0xfa81e1e8>
 400e930:	0401ffc4 	movi	r16,2047
 400e934:	003e1406 	br	400e188 <__reset+0xfa81e188>
 400e938:	0005883a 	mov	r2,zero
 400e93c:	003f7506 	br	400e714 <__reset+0xfa81e714>
 400e940:	0005883a 	mov	r2,zero
 400e944:	0009883a 	mov	r4,zero
 400e948:	003e7806 	br	400e32c <__reset+0xfa81e32c>
 400e94c:	123ff804 	addi	r8,r2,-32
 400e950:	01000804 	movi	r4,32
 400e954:	1a10d83a 	srl	r8,r3,r8
 400e958:	11002526 	beq	r2,r4,400e9f0 <__subdf3+0x8ec>
 400e95c:	01001004 	movi	r4,64
 400e960:	2085c83a 	sub	r2,r4,r2
 400e964:	1884983a 	sll	r2,r3,r2
 400e968:	1444b03a 	or	r2,r2,r17
 400e96c:	1004c03a 	cmpne	r2,r2,zero
 400e970:	40a2b03a 	or	r17,r8,r2
 400e974:	0005883a 	mov	r2,zero
 400e978:	003f1606 	br	400e5d4 <__reset+0xfa81e5d4>
 400e97c:	02000434 	movhi	r8,16
 400e980:	0009883a 	mov	r4,zero
 400e984:	423fffc4 	addi	r8,r8,-1
 400e988:	00bfffc4 	movi	r2,-1
 400e98c:	0401ffc4 	movi	r16,2047
 400e990:	003e6606 	br	400e32c <__reset+0xfa81e32c>
 400e994:	1c62b03a 	or	r17,r3,r17
 400e998:	8822c03a 	cmpne	r17,r17,zero
 400e99c:	0005883a 	mov	r2,zero
 400e9a0:	003f9906 	br	400e808 <__reset+0xfa81e808>
 400e9a4:	2807883a 	mov	r3,r5
 400e9a8:	3023883a 	mov	r17,r6
 400e9ac:	0401ffc4 	movi	r16,2047
 400e9b0:	003df506 	br	400e188 <__reset+0xfa81e188>
 400e9b4:	2807883a 	mov	r3,r5
 400e9b8:	3023883a 	mov	r17,r6
 400e9bc:	003df206 	br	400e188 <__reset+0xfa81e188>
 400e9c0:	123ff804 	addi	r8,r2,-32
 400e9c4:	01000804 	movi	r4,32
 400e9c8:	1a10d83a 	srl	r8,r3,r8
 400e9cc:	11000a26 	beq	r2,r4,400e9f8 <__subdf3+0x8f4>
 400e9d0:	01001004 	movi	r4,64
 400e9d4:	2085c83a 	sub	r2,r4,r2
 400e9d8:	1884983a 	sll	r2,r3,r2
 400e9dc:	1444b03a 	or	r2,r2,r17
 400e9e0:	1004c03a 	cmpne	r2,r2,zero
 400e9e4:	40a2b03a 	or	r17,r8,r2
 400e9e8:	0005883a 	mov	r2,zero
 400e9ec:	003f8606 	br	400e808 <__reset+0xfa81e808>
 400e9f0:	0005883a 	mov	r2,zero
 400e9f4:	003fdc06 	br	400e968 <__reset+0xfa81e968>
 400e9f8:	0005883a 	mov	r2,zero
 400e9fc:	003ff706 	br	400e9dc <__reset+0xfa81e9dc>

0400ea00 <__fixdfsi>:
 400ea00:	280cd53a 	srli	r6,r5,20
 400ea04:	00c00434 	movhi	r3,16
 400ea08:	18ffffc4 	addi	r3,r3,-1
 400ea0c:	3181ffcc 	andi	r6,r6,2047
 400ea10:	01c0ff84 	movi	r7,1022
 400ea14:	28c6703a 	and	r3,r5,r3
 400ea18:	280ad7fa 	srli	r5,r5,31
 400ea1c:	3980120e 	bge	r7,r6,400ea68 <__fixdfsi+0x68>
 400ea20:	00810744 	movi	r2,1053
 400ea24:	11800c16 	blt	r2,r6,400ea58 <__fixdfsi+0x58>
 400ea28:	00810cc4 	movi	r2,1075
 400ea2c:	1185c83a 	sub	r2,r2,r6
 400ea30:	01c007c4 	movi	r7,31
 400ea34:	18c00434 	orhi	r3,r3,16
 400ea38:	38800d16 	blt	r7,r2,400ea70 <__fixdfsi+0x70>
 400ea3c:	31befb44 	addi	r6,r6,-1043
 400ea40:	2084d83a 	srl	r2,r4,r2
 400ea44:	1986983a 	sll	r3,r3,r6
 400ea48:	1884b03a 	or	r2,r3,r2
 400ea4c:	28000726 	beq	r5,zero,400ea6c <__fixdfsi+0x6c>
 400ea50:	0085c83a 	sub	r2,zero,r2
 400ea54:	f800283a 	ret
 400ea58:	00a00034 	movhi	r2,32768
 400ea5c:	10bfffc4 	addi	r2,r2,-1
 400ea60:	2885883a 	add	r2,r5,r2
 400ea64:	f800283a 	ret
 400ea68:	0005883a 	mov	r2,zero
 400ea6c:	f800283a 	ret
 400ea70:	008104c4 	movi	r2,1043
 400ea74:	1185c83a 	sub	r2,r2,r6
 400ea78:	1884d83a 	srl	r2,r3,r2
 400ea7c:	003ff306 	br	400ea4c <__reset+0xfa81ea4c>

0400ea80 <__floatsidf>:
 400ea80:	defffd04 	addi	sp,sp,-12
 400ea84:	dfc00215 	stw	ra,8(sp)
 400ea88:	dc400115 	stw	r17,4(sp)
 400ea8c:	dc000015 	stw	r16,0(sp)
 400ea90:	20002b26 	beq	r4,zero,400eb40 <__floatsidf+0xc0>
 400ea94:	2023883a 	mov	r17,r4
 400ea98:	2020d7fa 	srli	r16,r4,31
 400ea9c:	20002d16 	blt	r4,zero,400eb54 <__floatsidf+0xd4>
 400eaa0:	8809883a 	mov	r4,r17
 400eaa4:	400ec040 	call	400ec04 <__clzsi2>
 400eaa8:	01410784 	movi	r5,1054
 400eaac:	288bc83a 	sub	r5,r5,r2
 400eab0:	01010cc4 	movi	r4,1075
 400eab4:	2149c83a 	sub	r4,r4,r5
 400eab8:	00c007c4 	movi	r3,31
 400eabc:	1900160e 	bge	r3,r4,400eb18 <__floatsidf+0x98>
 400eac0:	00c104c4 	movi	r3,1043
 400eac4:	1947c83a 	sub	r3,r3,r5
 400eac8:	88c6983a 	sll	r3,r17,r3
 400eacc:	00800434 	movhi	r2,16
 400ead0:	10bfffc4 	addi	r2,r2,-1
 400ead4:	1886703a 	and	r3,r3,r2
 400ead8:	2941ffcc 	andi	r5,r5,2047
 400eadc:	800d883a 	mov	r6,r16
 400eae0:	0005883a 	mov	r2,zero
 400eae4:	280a953a 	slli	r5,r5,20
 400eae8:	31803fcc 	andi	r6,r6,255
 400eaec:	01000434 	movhi	r4,16
 400eaf0:	300c97fa 	slli	r6,r6,31
 400eaf4:	213fffc4 	addi	r4,r4,-1
 400eaf8:	1906703a 	and	r3,r3,r4
 400eafc:	1946b03a 	or	r3,r3,r5
 400eb00:	1986b03a 	or	r3,r3,r6
 400eb04:	dfc00217 	ldw	ra,8(sp)
 400eb08:	dc400117 	ldw	r17,4(sp)
 400eb0c:	dc000017 	ldw	r16,0(sp)
 400eb10:	dec00304 	addi	sp,sp,12
 400eb14:	f800283a 	ret
 400eb18:	00c002c4 	movi	r3,11
 400eb1c:	1887c83a 	sub	r3,r3,r2
 400eb20:	88c6d83a 	srl	r3,r17,r3
 400eb24:	8904983a 	sll	r2,r17,r4
 400eb28:	01000434 	movhi	r4,16
 400eb2c:	213fffc4 	addi	r4,r4,-1
 400eb30:	2941ffcc 	andi	r5,r5,2047
 400eb34:	1906703a 	and	r3,r3,r4
 400eb38:	800d883a 	mov	r6,r16
 400eb3c:	003fe906 	br	400eae4 <__reset+0xfa81eae4>
 400eb40:	000d883a 	mov	r6,zero
 400eb44:	000b883a 	mov	r5,zero
 400eb48:	0007883a 	mov	r3,zero
 400eb4c:	0005883a 	mov	r2,zero
 400eb50:	003fe406 	br	400eae4 <__reset+0xfa81eae4>
 400eb54:	0123c83a 	sub	r17,zero,r4
 400eb58:	003fd106 	br	400eaa0 <__reset+0xfa81eaa0>

0400eb5c <__floatunsidf>:
 400eb5c:	defffe04 	addi	sp,sp,-8
 400eb60:	dc000015 	stw	r16,0(sp)
 400eb64:	dfc00115 	stw	ra,4(sp)
 400eb68:	2021883a 	mov	r16,r4
 400eb6c:	20002226 	beq	r4,zero,400ebf8 <__floatunsidf+0x9c>
 400eb70:	400ec040 	call	400ec04 <__clzsi2>
 400eb74:	01010784 	movi	r4,1054
 400eb78:	2089c83a 	sub	r4,r4,r2
 400eb7c:	01810cc4 	movi	r6,1075
 400eb80:	310dc83a 	sub	r6,r6,r4
 400eb84:	00c007c4 	movi	r3,31
 400eb88:	1980120e 	bge	r3,r6,400ebd4 <__floatunsidf+0x78>
 400eb8c:	00c104c4 	movi	r3,1043
 400eb90:	1907c83a 	sub	r3,r3,r4
 400eb94:	80ca983a 	sll	r5,r16,r3
 400eb98:	00800434 	movhi	r2,16
 400eb9c:	10bfffc4 	addi	r2,r2,-1
 400eba0:	2101ffcc 	andi	r4,r4,2047
 400eba4:	0021883a 	mov	r16,zero
 400eba8:	288a703a 	and	r5,r5,r2
 400ebac:	2008953a 	slli	r4,r4,20
 400ebb0:	00c00434 	movhi	r3,16
 400ebb4:	18ffffc4 	addi	r3,r3,-1
 400ebb8:	28c6703a 	and	r3,r5,r3
 400ebbc:	8005883a 	mov	r2,r16
 400ebc0:	1906b03a 	or	r3,r3,r4
 400ebc4:	dfc00117 	ldw	ra,4(sp)
 400ebc8:	dc000017 	ldw	r16,0(sp)
 400ebcc:	dec00204 	addi	sp,sp,8
 400ebd0:	f800283a 	ret
 400ebd4:	00c002c4 	movi	r3,11
 400ebd8:	188bc83a 	sub	r5,r3,r2
 400ebdc:	814ad83a 	srl	r5,r16,r5
 400ebe0:	00c00434 	movhi	r3,16
 400ebe4:	18ffffc4 	addi	r3,r3,-1
 400ebe8:	81a0983a 	sll	r16,r16,r6
 400ebec:	2101ffcc 	andi	r4,r4,2047
 400ebf0:	28ca703a 	and	r5,r5,r3
 400ebf4:	003fed06 	br	400ebac <__reset+0xfa81ebac>
 400ebf8:	0009883a 	mov	r4,zero
 400ebfc:	000b883a 	mov	r5,zero
 400ec00:	003fea06 	br	400ebac <__reset+0xfa81ebac>

0400ec04 <__clzsi2>:
 400ec04:	00bfffd4 	movui	r2,65535
 400ec08:	11000536 	bltu	r2,r4,400ec20 <__clzsi2+0x1c>
 400ec0c:	00803fc4 	movi	r2,255
 400ec10:	11000f36 	bltu	r2,r4,400ec50 <__clzsi2+0x4c>
 400ec14:	00800804 	movi	r2,32
 400ec18:	0007883a 	mov	r3,zero
 400ec1c:	00000506 	br	400ec34 <__clzsi2+0x30>
 400ec20:	00804034 	movhi	r2,256
 400ec24:	10bfffc4 	addi	r2,r2,-1
 400ec28:	11000c2e 	bgeu	r2,r4,400ec5c <__clzsi2+0x58>
 400ec2c:	00800204 	movi	r2,8
 400ec30:	00c00604 	movi	r3,24
 400ec34:	20c8d83a 	srl	r4,r4,r3
 400ec38:	00c10074 	movhi	r3,1025
 400ec3c:	18d4e904 	addi	r3,r3,21412
 400ec40:	1909883a 	add	r4,r3,r4
 400ec44:	20c00003 	ldbu	r3,0(r4)
 400ec48:	10c5c83a 	sub	r2,r2,r3
 400ec4c:	f800283a 	ret
 400ec50:	00800604 	movi	r2,24
 400ec54:	00c00204 	movi	r3,8
 400ec58:	003ff606 	br	400ec34 <__reset+0xfa81ec34>
 400ec5c:	00800404 	movi	r2,16
 400ec60:	1007883a 	mov	r3,r2
 400ec64:	003ff306 	br	400ec34 <__reset+0xfa81ec34>

0400ec68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400ec68:	defff504 	addi	sp,sp,-44
 400ec6c:	df000a15 	stw	fp,40(sp)
 400ec70:	df000a04 	addi	fp,sp,40
 400ec74:	e13ffc15 	stw	r4,-16(fp)
 400ec78:	e17ffd15 	stw	r5,-12(fp)
 400ec7c:	e1bffe15 	stw	r6,-8(fp)
 400ec80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400ec84:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400ec88:	d0a02317 	ldw	r2,-32628(gp)
  
  if (alt_ticks_per_second ())
 400ec8c:	10003c26 	beq	r2,zero,400ed80 <alt_alarm_start+0x118>
  {
    if (alarm)
 400ec90:	e0bffc17 	ldw	r2,-16(fp)
 400ec94:	10003826 	beq	r2,zero,400ed78 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400ec98:	e0bffc17 	ldw	r2,-16(fp)
 400ec9c:	e0fffe17 	ldw	r3,-8(fp)
 400eca0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400eca4:	e0bffc17 	ldw	r2,-16(fp)
 400eca8:	e0ffff17 	ldw	r3,-4(fp)
 400ecac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ecb0:	0005303a 	rdctl	r2,status
 400ecb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ecb8:	e0fff917 	ldw	r3,-28(fp)
 400ecbc:	00bfff84 	movi	r2,-2
 400ecc0:	1884703a 	and	r2,r3,r2
 400ecc4:	1001703a 	wrctl	status,r2
  
  return context;
 400ecc8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400eccc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400ecd0:	d0a02417 	ldw	r2,-32624(gp)
      
      current_nticks = alt_nticks();
 400ecd4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400ecd8:	e0fffd17 	ldw	r3,-12(fp)
 400ecdc:	e0bff617 	ldw	r2,-40(fp)
 400ece0:	1885883a 	add	r2,r3,r2
 400ece4:	10c00044 	addi	r3,r2,1
 400ece8:	e0bffc17 	ldw	r2,-16(fp)
 400ecec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400ecf0:	e0bffc17 	ldw	r2,-16(fp)
 400ecf4:	10c00217 	ldw	r3,8(r2)
 400ecf8:	e0bff617 	ldw	r2,-40(fp)
 400ecfc:	1880042e 	bgeu	r3,r2,400ed10 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400ed00:	e0bffc17 	ldw	r2,-16(fp)
 400ed04:	00c00044 	movi	r3,1
 400ed08:	10c00405 	stb	r3,16(r2)
 400ed0c:	00000206 	br	400ed18 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400ed10:	e0bffc17 	ldw	r2,-16(fp)
 400ed14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400ed18:	e0bffc17 	ldw	r2,-16(fp)
 400ed1c:	d0e01004 	addi	r3,gp,-32704
 400ed20:	e0fffa15 	stw	r3,-24(fp)
 400ed24:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400ed28:	e0bffb17 	ldw	r2,-20(fp)
 400ed2c:	e0fffa17 	ldw	r3,-24(fp)
 400ed30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400ed34:	e0bffa17 	ldw	r2,-24(fp)
 400ed38:	10c00017 	ldw	r3,0(r2)
 400ed3c:	e0bffb17 	ldw	r2,-20(fp)
 400ed40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400ed44:	e0bffa17 	ldw	r2,-24(fp)
 400ed48:	10800017 	ldw	r2,0(r2)
 400ed4c:	e0fffb17 	ldw	r3,-20(fp)
 400ed50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400ed54:	e0bffa17 	ldw	r2,-24(fp)
 400ed58:	e0fffb17 	ldw	r3,-20(fp)
 400ed5c:	10c00015 	stw	r3,0(r2)
 400ed60:	e0bff817 	ldw	r2,-32(fp)
 400ed64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ed68:	e0bff717 	ldw	r2,-36(fp)
 400ed6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400ed70:	0005883a 	mov	r2,zero
 400ed74:	00000306 	br	400ed84 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400ed78:	00bffa84 	movi	r2,-22
 400ed7c:	00000106 	br	400ed84 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400ed80:	00bfde84 	movi	r2,-134
  }
}
 400ed84:	e037883a 	mov	sp,fp
 400ed88:	df000017 	ldw	fp,0(sp)
 400ed8c:	dec00104 	addi	sp,sp,4
 400ed90:	f800283a 	ret

0400ed94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ed94:	defffe04 	addi	sp,sp,-8
 400ed98:	dfc00115 	stw	ra,4(sp)
 400ed9c:	df000015 	stw	fp,0(sp)
 400eda0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400eda4:	d0a00d17 	ldw	r2,-32716(gp)
 400eda8:	10000326 	beq	r2,zero,400edb8 <alt_get_errno+0x24>
 400edac:	d0a00d17 	ldw	r2,-32716(gp)
 400edb0:	103ee83a 	callr	r2
 400edb4:	00000106 	br	400edbc <alt_get_errno+0x28>
 400edb8:	d0a01e04 	addi	r2,gp,-32648
}
 400edbc:	e037883a 	mov	sp,fp
 400edc0:	dfc00117 	ldw	ra,4(sp)
 400edc4:	df000017 	ldw	fp,0(sp)
 400edc8:	dec00204 	addi	sp,sp,8
 400edcc:	f800283a 	ret

0400edd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400edd0:	defffb04 	addi	sp,sp,-20
 400edd4:	dfc00415 	stw	ra,16(sp)
 400edd8:	df000315 	stw	fp,12(sp)
 400eddc:	df000304 	addi	fp,sp,12
 400ede0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400ede4:	e0bfff17 	ldw	r2,-4(fp)
 400ede8:	10000616 	blt	r2,zero,400ee04 <close+0x34>
 400edec:	e0bfff17 	ldw	r2,-4(fp)
 400edf0:	10c00324 	muli	r3,r2,12
 400edf4:	00810074 	movhi	r2,1025
 400edf8:	10984804 	addi	r2,r2,24864
 400edfc:	1885883a 	add	r2,r3,r2
 400ee00:	00000106 	br	400ee08 <close+0x38>
 400ee04:	0005883a 	mov	r2,zero
 400ee08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400ee0c:	e0bffd17 	ldw	r2,-12(fp)
 400ee10:	10001926 	beq	r2,zero,400ee78 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400ee14:	e0bffd17 	ldw	r2,-12(fp)
 400ee18:	10800017 	ldw	r2,0(r2)
 400ee1c:	10800417 	ldw	r2,16(r2)
 400ee20:	10000626 	beq	r2,zero,400ee3c <close+0x6c>
 400ee24:	e0bffd17 	ldw	r2,-12(fp)
 400ee28:	10800017 	ldw	r2,0(r2)
 400ee2c:	10800417 	ldw	r2,16(r2)
 400ee30:	e13ffd17 	ldw	r4,-12(fp)
 400ee34:	103ee83a 	callr	r2
 400ee38:	00000106 	br	400ee40 <close+0x70>
 400ee3c:	0005883a 	mov	r2,zero
 400ee40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400ee44:	e13fff17 	ldw	r4,-4(fp)
 400ee48:	400f6440 	call	400f644 <alt_release_fd>
    if (rval < 0)
 400ee4c:	e0bffe17 	ldw	r2,-8(fp)
 400ee50:	1000070e 	bge	r2,zero,400ee70 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400ee54:	400ed940 	call	400ed94 <alt_get_errno>
 400ee58:	1007883a 	mov	r3,r2
 400ee5c:	e0bffe17 	ldw	r2,-8(fp)
 400ee60:	0085c83a 	sub	r2,zero,r2
 400ee64:	18800015 	stw	r2,0(r3)
      return -1;
 400ee68:	00bfffc4 	movi	r2,-1
 400ee6c:	00000706 	br	400ee8c <close+0xbc>
    }
    return 0;
 400ee70:	0005883a 	mov	r2,zero
 400ee74:	00000506 	br	400ee8c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ee78:	400ed940 	call	400ed94 <alt_get_errno>
 400ee7c:	1007883a 	mov	r3,r2
 400ee80:	00801444 	movi	r2,81
 400ee84:	18800015 	stw	r2,0(r3)
    return -1;
 400ee88:	00bfffc4 	movi	r2,-1
  }
}
 400ee8c:	e037883a 	mov	sp,fp
 400ee90:	dfc00117 	ldw	ra,4(sp)
 400ee94:	df000017 	ldw	fp,0(sp)
 400ee98:	dec00204 	addi	sp,sp,8
 400ee9c:	f800283a 	ret

0400eea0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400eea0:	defffc04 	addi	sp,sp,-16
 400eea4:	df000315 	stw	fp,12(sp)
 400eea8:	df000304 	addi	fp,sp,12
 400eeac:	e13ffd15 	stw	r4,-12(fp)
 400eeb0:	e17ffe15 	stw	r5,-8(fp)
 400eeb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400eeb8:	e0bfff17 	ldw	r2,-4(fp)
}
 400eebc:	e037883a 	mov	sp,fp
 400eec0:	df000017 	ldw	fp,0(sp)
 400eec4:	dec00104 	addi	sp,sp,4
 400eec8:	f800283a 	ret

0400eecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eecc:	defffe04 	addi	sp,sp,-8
 400eed0:	dfc00115 	stw	ra,4(sp)
 400eed4:	df000015 	stw	fp,0(sp)
 400eed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400eedc:	d0a00d17 	ldw	r2,-32716(gp)
 400eee0:	10000326 	beq	r2,zero,400eef0 <alt_get_errno+0x24>
 400eee4:	d0a00d17 	ldw	r2,-32716(gp)
 400eee8:	103ee83a 	callr	r2
 400eeec:	00000106 	br	400eef4 <alt_get_errno+0x28>
 400eef0:	d0a01e04 	addi	r2,gp,-32648
}
 400eef4:	e037883a 	mov	sp,fp
 400eef8:	dfc00117 	ldw	ra,4(sp)
 400eefc:	df000017 	ldw	fp,0(sp)
 400ef00:	dec00204 	addi	sp,sp,8
 400ef04:	f800283a 	ret

0400ef08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400ef08:	defffb04 	addi	sp,sp,-20
 400ef0c:	dfc00415 	stw	ra,16(sp)
 400ef10:	df000315 	stw	fp,12(sp)
 400ef14:	df000304 	addi	fp,sp,12
 400ef18:	e13ffe15 	stw	r4,-8(fp)
 400ef1c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ef20:	e0bffe17 	ldw	r2,-8(fp)
 400ef24:	10000616 	blt	r2,zero,400ef40 <fstat+0x38>
 400ef28:	e0bffe17 	ldw	r2,-8(fp)
 400ef2c:	10c00324 	muli	r3,r2,12
 400ef30:	00810074 	movhi	r2,1025
 400ef34:	10984804 	addi	r2,r2,24864
 400ef38:	1885883a 	add	r2,r3,r2
 400ef3c:	00000106 	br	400ef44 <fstat+0x3c>
 400ef40:	0005883a 	mov	r2,zero
 400ef44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400ef48:	e0bffd17 	ldw	r2,-12(fp)
 400ef4c:	10001026 	beq	r2,zero,400ef90 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400ef50:	e0bffd17 	ldw	r2,-12(fp)
 400ef54:	10800017 	ldw	r2,0(r2)
 400ef58:	10800817 	ldw	r2,32(r2)
 400ef5c:	10000726 	beq	r2,zero,400ef7c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400ef60:	e0bffd17 	ldw	r2,-12(fp)
 400ef64:	10800017 	ldw	r2,0(r2)
 400ef68:	10800817 	ldw	r2,32(r2)
 400ef6c:	e17fff17 	ldw	r5,-4(fp)
 400ef70:	e13ffd17 	ldw	r4,-12(fp)
 400ef74:	103ee83a 	callr	r2
 400ef78:	00000a06 	br	400efa4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400ef7c:	e0bfff17 	ldw	r2,-4(fp)
 400ef80:	00c80004 	movi	r3,8192
 400ef84:	10c00115 	stw	r3,4(r2)
      return 0;
 400ef88:	0005883a 	mov	r2,zero
 400ef8c:	00000506 	br	400efa4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ef90:	400eecc0 	call	400eecc <alt_get_errno>
 400ef94:	1007883a 	mov	r3,r2
 400ef98:	00801444 	movi	r2,81
 400ef9c:	18800015 	stw	r2,0(r3)
    return -1;
 400efa0:	00bfffc4 	movi	r2,-1
  }
}
 400efa4:	e037883a 	mov	sp,fp
 400efa8:	dfc00117 	ldw	ra,4(sp)
 400efac:	df000017 	ldw	fp,0(sp)
 400efb0:	dec00204 	addi	sp,sp,8
 400efb4:	f800283a 	ret

0400efb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400efb8:	defff904 	addi	sp,sp,-28
 400efbc:	dfc00615 	stw	ra,24(sp)
 400efc0:	df000515 	stw	fp,20(sp)
 400efc4:	df000504 	addi	fp,sp,20
 400efc8:	e13ffc15 	stw	r4,-16(fp)
 400efcc:	e17ffd15 	stw	r5,-12(fp)
 400efd0:	e1bffe15 	stw	r6,-8(fp)
 400efd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400efd8:	e0800217 	ldw	r2,8(fp)
 400efdc:	d8800015 	stw	r2,0(sp)
 400efe0:	e1ffff17 	ldw	r7,-4(fp)
 400efe4:	e1bffe17 	ldw	r6,-8(fp)
 400efe8:	e17ffd17 	ldw	r5,-12(fp)
 400efec:	e13ffc17 	ldw	r4,-16(fp)
 400eff0:	400f1680 	call	400f168 <alt_iic_isr_register>
}  
 400eff4:	e037883a 	mov	sp,fp
 400eff8:	dfc00117 	ldw	ra,4(sp)
 400effc:	df000017 	ldw	fp,0(sp)
 400f000:	dec00204 	addi	sp,sp,8
 400f004:	f800283a 	ret

0400f008 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400f008:	defff904 	addi	sp,sp,-28
 400f00c:	df000615 	stw	fp,24(sp)
 400f010:	df000604 	addi	fp,sp,24
 400f014:	e13ffe15 	stw	r4,-8(fp)
 400f018:	e17fff15 	stw	r5,-4(fp)
 400f01c:	e0bfff17 	ldw	r2,-4(fp)
 400f020:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f024:	0005303a 	rdctl	r2,status
 400f028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f02c:	e0fffb17 	ldw	r3,-20(fp)
 400f030:	00bfff84 	movi	r2,-2
 400f034:	1884703a 	and	r2,r3,r2
 400f038:	1001703a 	wrctl	status,r2
  
  return context;
 400f03c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f040:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400f044:	00c00044 	movi	r3,1
 400f048:	e0bffa17 	ldw	r2,-24(fp)
 400f04c:	1884983a 	sll	r2,r3,r2
 400f050:	1007883a 	mov	r3,r2
 400f054:	d0a01f17 	ldw	r2,-32644(gp)
 400f058:	1884b03a 	or	r2,r3,r2
 400f05c:	d0a01f15 	stw	r2,-32644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f060:	d0a01f17 	ldw	r2,-32644(gp)
 400f064:	100170fa 	wrctl	ienable,r2
 400f068:	e0bffc17 	ldw	r2,-16(fp)
 400f06c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f070:	e0bffd17 	ldw	r2,-12(fp)
 400f074:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f078:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400f07c:	0001883a 	nop
}
 400f080:	e037883a 	mov	sp,fp
 400f084:	df000017 	ldw	fp,0(sp)
 400f088:	dec00104 	addi	sp,sp,4
 400f08c:	f800283a 	ret

0400f090 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400f090:	defff904 	addi	sp,sp,-28
 400f094:	df000615 	stw	fp,24(sp)
 400f098:	df000604 	addi	fp,sp,24
 400f09c:	e13ffe15 	stw	r4,-8(fp)
 400f0a0:	e17fff15 	stw	r5,-4(fp)
 400f0a4:	e0bfff17 	ldw	r2,-4(fp)
 400f0a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f0ac:	0005303a 	rdctl	r2,status
 400f0b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f0b4:	e0fffb17 	ldw	r3,-20(fp)
 400f0b8:	00bfff84 	movi	r2,-2
 400f0bc:	1884703a 	and	r2,r3,r2
 400f0c0:	1001703a 	wrctl	status,r2
  
  return context;
 400f0c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f0c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400f0cc:	00c00044 	movi	r3,1
 400f0d0:	e0bffa17 	ldw	r2,-24(fp)
 400f0d4:	1884983a 	sll	r2,r3,r2
 400f0d8:	0084303a 	nor	r2,zero,r2
 400f0dc:	1007883a 	mov	r3,r2
 400f0e0:	d0a01f17 	ldw	r2,-32644(gp)
 400f0e4:	1884703a 	and	r2,r3,r2
 400f0e8:	d0a01f15 	stw	r2,-32644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f0ec:	d0a01f17 	ldw	r2,-32644(gp)
 400f0f0:	100170fa 	wrctl	ienable,r2
 400f0f4:	e0bffc17 	ldw	r2,-16(fp)
 400f0f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f0fc:	e0bffd17 	ldw	r2,-12(fp)
 400f100:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f104:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400f108:	0001883a 	nop
}
 400f10c:	e037883a 	mov	sp,fp
 400f110:	df000017 	ldw	fp,0(sp)
 400f114:	dec00104 	addi	sp,sp,4
 400f118:	f800283a 	ret

0400f11c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400f11c:	defffc04 	addi	sp,sp,-16
 400f120:	df000315 	stw	fp,12(sp)
 400f124:	df000304 	addi	fp,sp,12
 400f128:	e13ffe15 	stw	r4,-8(fp)
 400f12c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400f130:	000530fa 	rdctl	r2,ienable
 400f134:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400f138:	00c00044 	movi	r3,1
 400f13c:	e0bfff17 	ldw	r2,-4(fp)
 400f140:	1884983a 	sll	r2,r3,r2
 400f144:	1007883a 	mov	r3,r2
 400f148:	e0bffd17 	ldw	r2,-12(fp)
 400f14c:	1884703a 	and	r2,r3,r2
 400f150:	1004c03a 	cmpne	r2,r2,zero
 400f154:	10803fcc 	andi	r2,r2,255
}
 400f158:	e037883a 	mov	sp,fp
 400f15c:	df000017 	ldw	fp,0(sp)
 400f160:	dec00104 	addi	sp,sp,4
 400f164:	f800283a 	ret

0400f168 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400f168:	defff504 	addi	sp,sp,-44
 400f16c:	dfc00a15 	stw	ra,40(sp)
 400f170:	df000915 	stw	fp,36(sp)
 400f174:	df000904 	addi	fp,sp,36
 400f178:	e13ffc15 	stw	r4,-16(fp)
 400f17c:	e17ffd15 	stw	r5,-12(fp)
 400f180:	e1bffe15 	stw	r6,-8(fp)
 400f184:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400f188:	00bffa84 	movi	r2,-22
 400f18c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400f190:	e0bffd17 	ldw	r2,-12(fp)
 400f194:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400f198:	e0bff817 	ldw	r2,-32(fp)
 400f19c:	10800808 	cmpgei	r2,r2,32
 400f1a0:	1000271e 	bne	r2,zero,400f240 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f1a4:	0005303a 	rdctl	r2,status
 400f1a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f1ac:	e0fffb17 	ldw	r3,-20(fp)
 400f1b0:	00bfff84 	movi	r2,-2
 400f1b4:	1884703a 	and	r2,r3,r2
 400f1b8:	1001703a 	wrctl	status,r2
  
  return context;
 400f1bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400f1c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400f1c4:	00810074 	movhi	r2,1025
 400f1c8:	109d3f04 	addi	r2,r2,29948
 400f1cc:	e0fff817 	ldw	r3,-32(fp)
 400f1d0:	180690fa 	slli	r3,r3,3
 400f1d4:	10c5883a 	add	r2,r2,r3
 400f1d8:	e0fffe17 	ldw	r3,-8(fp)
 400f1dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400f1e0:	00810074 	movhi	r2,1025
 400f1e4:	109d3f04 	addi	r2,r2,29948
 400f1e8:	e0fff817 	ldw	r3,-32(fp)
 400f1ec:	180690fa 	slli	r3,r3,3
 400f1f0:	10c5883a 	add	r2,r2,r3
 400f1f4:	10800104 	addi	r2,r2,4
 400f1f8:	e0ffff17 	ldw	r3,-4(fp)
 400f1fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400f200:	e0bffe17 	ldw	r2,-8(fp)
 400f204:	10000526 	beq	r2,zero,400f21c <alt_iic_isr_register+0xb4>
 400f208:	e0bff817 	ldw	r2,-32(fp)
 400f20c:	100b883a 	mov	r5,r2
 400f210:	e13ffc17 	ldw	r4,-16(fp)
 400f214:	400f0080 	call	400f008 <alt_ic_irq_enable>
 400f218:	00000406 	br	400f22c <alt_iic_isr_register+0xc4>
 400f21c:	e0bff817 	ldw	r2,-32(fp)
 400f220:	100b883a 	mov	r5,r2
 400f224:	e13ffc17 	ldw	r4,-16(fp)
 400f228:	400f0900 	call	400f090 <alt_ic_irq_disable>
 400f22c:	e0bff715 	stw	r2,-36(fp)
 400f230:	e0bffa17 	ldw	r2,-24(fp)
 400f234:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f238:	e0bff917 	ldw	r2,-28(fp)
 400f23c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400f240:	e0bff717 	ldw	r2,-36(fp)
}
 400f244:	e037883a 	mov	sp,fp
 400f248:	dfc00117 	ldw	ra,4(sp)
 400f24c:	df000017 	ldw	fp,0(sp)
 400f250:	dec00204 	addi	sp,sp,8
 400f254:	f800283a 	ret

0400f258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f258:	defffe04 	addi	sp,sp,-8
 400f25c:	dfc00115 	stw	ra,4(sp)
 400f260:	df000015 	stw	fp,0(sp)
 400f264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f268:	d0a00d17 	ldw	r2,-32716(gp)
 400f26c:	10000326 	beq	r2,zero,400f27c <alt_get_errno+0x24>
 400f270:	d0a00d17 	ldw	r2,-32716(gp)
 400f274:	103ee83a 	callr	r2
 400f278:	00000106 	br	400f280 <alt_get_errno+0x28>
 400f27c:	d0a01e04 	addi	r2,gp,-32648
}
 400f280:	e037883a 	mov	sp,fp
 400f284:	dfc00117 	ldw	ra,4(sp)
 400f288:	df000017 	ldw	fp,0(sp)
 400f28c:	dec00204 	addi	sp,sp,8
 400f290:	f800283a 	ret

0400f294 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400f294:	deffed04 	addi	sp,sp,-76
 400f298:	dfc01215 	stw	ra,72(sp)
 400f29c:	df001115 	stw	fp,68(sp)
 400f2a0:	df001104 	addi	fp,sp,68
 400f2a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f2a8:	e0bfff17 	ldw	r2,-4(fp)
 400f2ac:	10000616 	blt	r2,zero,400f2c8 <isatty+0x34>
 400f2b0:	e0bfff17 	ldw	r2,-4(fp)
 400f2b4:	10c00324 	muli	r3,r2,12
 400f2b8:	00810074 	movhi	r2,1025
 400f2bc:	10984804 	addi	r2,r2,24864
 400f2c0:	1885883a 	add	r2,r3,r2
 400f2c4:	00000106 	br	400f2cc <isatty+0x38>
 400f2c8:	0005883a 	mov	r2,zero
 400f2cc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400f2d0:	e0bfef17 	ldw	r2,-68(fp)
 400f2d4:	10000e26 	beq	r2,zero,400f310 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400f2d8:	e0bfef17 	ldw	r2,-68(fp)
 400f2dc:	10800017 	ldw	r2,0(r2)
 400f2e0:	10800817 	ldw	r2,32(r2)
 400f2e4:	1000021e 	bne	r2,zero,400f2f0 <isatty+0x5c>
    {
      return 1;
 400f2e8:	00800044 	movi	r2,1
 400f2ec:	00000d06 	br	400f324 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400f2f0:	e0bff004 	addi	r2,fp,-64
 400f2f4:	100b883a 	mov	r5,r2
 400f2f8:	e13fff17 	ldw	r4,-4(fp)
 400f2fc:	400ef080 	call	400ef08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400f300:	e0bff117 	ldw	r2,-60(fp)
 400f304:	10880020 	cmpeqi	r2,r2,8192
 400f308:	10803fcc 	andi	r2,r2,255
 400f30c:	00000506 	br	400f324 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400f310:	400f2580 	call	400f258 <alt_get_errno>
 400f314:	1007883a 	mov	r3,r2
 400f318:	00801444 	movi	r2,81
 400f31c:	18800015 	stw	r2,0(r3)
    return 0;
 400f320:	0005883a 	mov	r2,zero
  }
}
 400f324:	e037883a 	mov	sp,fp
 400f328:	dfc00117 	ldw	ra,4(sp)
 400f32c:	df000017 	ldw	fp,0(sp)
 400f330:	dec00204 	addi	sp,sp,8
 400f334:	f800283a 	ret

0400f338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f338:	defffe04 	addi	sp,sp,-8
 400f33c:	dfc00115 	stw	ra,4(sp)
 400f340:	df000015 	stw	fp,0(sp)
 400f344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f348:	d0a00d17 	ldw	r2,-32716(gp)
 400f34c:	10000326 	beq	r2,zero,400f35c <alt_get_errno+0x24>
 400f350:	d0a00d17 	ldw	r2,-32716(gp)
 400f354:	103ee83a 	callr	r2
 400f358:	00000106 	br	400f360 <alt_get_errno+0x28>
 400f35c:	d0a01e04 	addi	r2,gp,-32648
}
 400f360:	e037883a 	mov	sp,fp
 400f364:	dfc00117 	ldw	ra,4(sp)
 400f368:	df000017 	ldw	fp,0(sp)
 400f36c:	dec00204 	addi	sp,sp,8
 400f370:	f800283a 	ret

0400f374 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400f374:	defff904 	addi	sp,sp,-28
 400f378:	dfc00615 	stw	ra,24(sp)
 400f37c:	df000515 	stw	fp,20(sp)
 400f380:	df000504 	addi	fp,sp,20
 400f384:	e13ffd15 	stw	r4,-12(fp)
 400f388:	e17ffe15 	stw	r5,-8(fp)
 400f38c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400f390:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f394:	e0bffd17 	ldw	r2,-12(fp)
 400f398:	10000616 	blt	r2,zero,400f3b4 <lseek+0x40>
 400f39c:	e0bffd17 	ldw	r2,-12(fp)
 400f3a0:	10c00324 	muli	r3,r2,12
 400f3a4:	00810074 	movhi	r2,1025
 400f3a8:	10984804 	addi	r2,r2,24864
 400f3ac:	1885883a 	add	r2,r3,r2
 400f3b0:	00000106 	br	400f3b8 <lseek+0x44>
 400f3b4:	0005883a 	mov	r2,zero
 400f3b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400f3bc:	e0bffc17 	ldw	r2,-16(fp)
 400f3c0:	10001026 	beq	r2,zero,400f404 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400f3c4:	e0bffc17 	ldw	r2,-16(fp)
 400f3c8:	10800017 	ldw	r2,0(r2)
 400f3cc:	10800717 	ldw	r2,28(r2)
 400f3d0:	10000926 	beq	r2,zero,400f3f8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400f3d4:	e0bffc17 	ldw	r2,-16(fp)
 400f3d8:	10800017 	ldw	r2,0(r2)
 400f3dc:	10800717 	ldw	r2,28(r2)
 400f3e0:	e1bfff17 	ldw	r6,-4(fp)
 400f3e4:	e17ffe17 	ldw	r5,-8(fp)
 400f3e8:	e13ffc17 	ldw	r4,-16(fp)
 400f3ec:	103ee83a 	callr	r2
 400f3f0:	e0bffb15 	stw	r2,-20(fp)
 400f3f4:	00000506 	br	400f40c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400f3f8:	00bfde84 	movi	r2,-134
 400f3fc:	e0bffb15 	stw	r2,-20(fp)
 400f400:	00000206 	br	400f40c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400f404:	00bfebc4 	movi	r2,-81
 400f408:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400f40c:	e0bffb17 	ldw	r2,-20(fp)
 400f410:	1000070e 	bge	r2,zero,400f430 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400f414:	400f3380 	call	400f338 <alt_get_errno>
 400f418:	1007883a 	mov	r3,r2
 400f41c:	e0bffb17 	ldw	r2,-20(fp)
 400f420:	0085c83a 	sub	r2,zero,r2
 400f424:	18800015 	stw	r2,0(r3)
    rc = -1;
 400f428:	00bfffc4 	movi	r2,-1
 400f42c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400f430:	e0bffb17 	ldw	r2,-20(fp)
}
 400f434:	e037883a 	mov	sp,fp
 400f438:	dfc00117 	ldw	ra,4(sp)
 400f43c:	df000017 	ldw	fp,0(sp)
 400f440:	dec00204 	addi	sp,sp,8
 400f444:	f800283a 	ret

0400f448 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400f448:	defffd04 	addi	sp,sp,-12
 400f44c:	dfc00215 	stw	ra,8(sp)
 400f450:	df000115 	stw	fp,4(sp)
 400f454:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400f458:	0009883a 	mov	r4,zero
 400f45c:	400fa940 	call	400fa94 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400f460:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400f464:	400facc0 	call	400facc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400f468:	01810074 	movhi	r6,1025
 400f46c:	31952c04 	addi	r6,r6,21680
 400f470:	01410074 	movhi	r5,1025
 400f474:	29552c04 	addi	r5,r5,21680
 400f478:	01010074 	movhi	r4,1025
 400f47c:	21152c04 	addi	r4,r4,21680
 400f480:	4012eb40 	call	4012eb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400f484:	4012b480 	call	4012b48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400f488:	01010074 	movhi	r4,1025
 400f48c:	210aea04 	addi	r4,r4,11176
 400f490:	40133540 	call	4013354 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400f494:	d0a02017 	ldw	r2,-32640(gp)
 400f498:	d0e02117 	ldw	r3,-32636(gp)
 400f49c:	d1202217 	ldw	r4,-32632(gp)
 400f4a0:	200d883a 	mov	r6,r4
 400f4a4:	180b883a 	mov	r5,r3
 400f4a8:	1009883a 	mov	r4,r2
 400f4ac:	40018c40 	call	40018c4 <main>
 400f4b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400f4b4:	01000044 	movi	r4,1
 400f4b8:	400edd00 	call	400edd0 <close>
  exit (result);
 400f4bc:	e13fff17 	ldw	r4,-4(fp)
 400f4c0:	40133680 	call	4013368 <exit>

0400f4c4 <__malloc_lock>:
 400f4c4:	defffe04 	addi	sp,sp,-8
 400f4c8:	df000115 	stw	fp,4(sp)
 400f4cc:	df000104 	addi	fp,sp,4
 400f4d0:	e13fff15 	stw	r4,-4(fp)
 400f4d4:	0001883a 	nop
 400f4d8:	e037883a 	mov	sp,fp
 400f4dc:	df000017 	ldw	fp,0(sp)
 400f4e0:	dec00104 	addi	sp,sp,4
 400f4e4:	f800283a 	ret

0400f4e8 <__malloc_unlock>:
 400f4e8:	defffe04 	addi	sp,sp,-8
 400f4ec:	df000115 	stw	fp,4(sp)
 400f4f0:	df000104 	addi	fp,sp,4
 400f4f4:	e13fff15 	stw	r4,-4(fp)
 400f4f8:	0001883a 	nop
 400f4fc:	e037883a 	mov	sp,fp
 400f500:	df000017 	ldw	fp,0(sp)
 400f504:	dec00104 	addi	sp,sp,4
 400f508:	f800283a 	ret

0400f50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f50c:	defffe04 	addi	sp,sp,-8
 400f510:	dfc00115 	stw	ra,4(sp)
 400f514:	df000015 	stw	fp,0(sp)
 400f518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f51c:	d0a00d17 	ldw	r2,-32716(gp)
 400f520:	10000326 	beq	r2,zero,400f530 <alt_get_errno+0x24>
 400f524:	d0a00d17 	ldw	r2,-32716(gp)
 400f528:	103ee83a 	callr	r2
 400f52c:	00000106 	br	400f534 <alt_get_errno+0x28>
 400f530:	d0a01e04 	addi	r2,gp,-32648
}
 400f534:	e037883a 	mov	sp,fp
 400f538:	dfc00117 	ldw	ra,4(sp)
 400f53c:	df000017 	ldw	fp,0(sp)
 400f540:	dec00204 	addi	sp,sp,8
 400f544:	f800283a 	ret

0400f548 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400f548:	defff904 	addi	sp,sp,-28
 400f54c:	dfc00615 	stw	ra,24(sp)
 400f550:	df000515 	stw	fp,20(sp)
 400f554:	df000504 	addi	fp,sp,20
 400f558:	e13ffd15 	stw	r4,-12(fp)
 400f55c:	e17ffe15 	stw	r5,-8(fp)
 400f560:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f564:	e0bffd17 	ldw	r2,-12(fp)
 400f568:	10000616 	blt	r2,zero,400f584 <read+0x3c>
 400f56c:	e0bffd17 	ldw	r2,-12(fp)
 400f570:	10c00324 	muli	r3,r2,12
 400f574:	00810074 	movhi	r2,1025
 400f578:	10984804 	addi	r2,r2,24864
 400f57c:	1885883a 	add	r2,r3,r2
 400f580:	00000106 	br	400f588 <read+0x40>
 400f584:	0005883a 	mov	r2,zero
 400f588:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f58c:	e0bffb17 	ldw	r2,-20(fp)
 400f590:	10002226 	beq	r2,zero,400f61c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f594:	e0bffb17 	ldw	r2,-20(fp)
 400f598:	10800217 	ldw	r2,8(r2)
 400f59c:	108000cc 	andi	r2,r2,3
 400f5a0:	10800060 	cmpeqi	r2,r2,1
 400f5a4:	1000181e 	bne	r2,zero,400f608 <read+0xc0>
        (fd->dev->read))
 400f5a8:	e0bffb17 	ldw	r2,-20(fp)
 400f5ac:	10800017 	ldw	r2,0(r2)
 400f5b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f5b4:	10001426 	beq	r2,zero,400f608 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400f5b8:	e0bffb17 	ldw	r2,-20(fp)
 400f5bc:	10800017 	ldw	r2,0(r2)
 400f5c0:	10800517 	ldw	r2,20(r2)
 400f5c4:	e0ffff17 	ldw	r3,-4(fp)
 400f5c8:	180d883a 	mov	r6,r3
 400f5cc:	e17ffe17 	ldw	r5,-8(fp)
 400f5d0:	e13ffb17 	ldw	r4,-20(fp)
 400f5d4:	103ee83a 	callr	r2
 400f5d8:	e0bffc15 	stw	r2,-16(fp)
 400f5dc:	e0bffc17 	ldw	r2,-16(fp)
 400f5e0:	1000070e 	bge	r2,zero,400f600 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400f5e4:	400f50c0 	call	400f50c <alt_get_errno>
 400f5e8:	1007883a 	mov	r3,r2
 400f5ec:	e0bffc17 	ldw	r2,-16(fp)
 400f5f0:	0085c83a 	sub	r2,zero,r2
 400f5f4:	18800015 	stw	r2,0(r3)
          return -1;
 400f5f8:	00bfffc4 	movi	r2,-1
 400f5fc:	00000c06 	br	400f630 <read+0xe8>
        }
        return rval;
 400f600:	e0bffc17 	ldw	r2,-16(fp)
 400f604:	00000a06 	br	400f630 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400f608:	400f50c0 	call	400f50c <alt_get_errno>
 400f60c:	1007883a 	mov	r3,r2
 400f610:	00800344 	movi	r2,13
 400f614:	18800015 	stw	r2,0(r3)
 400f618:	00000406 	br	400f62c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400f61c:	400f50c0 	call	400f50c <alt_get_errno>
 400f620:	1007883a 	mov	r3,r2
 400f624:	00801444 	movi	r2,81
 400f628:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400f62c:	00bfffc4 	movi	r2,-1
}
 400f630:	e037883a 	mov	sp,fp
 400f634:	dfc00117 	ldw	ra,4(sp)
 400f638:	df000017 	ldw	fp,0(sp)
 400f63c:	dec00204 	addi	sp,sp,8
 400f640:	f800283a 	ret

0400f644 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400f644:	defffe04 	addi	sp,sp,-8
 400f648:	df000115 	stw	fp,4(sp)
 400f64c:	df000104 	addi	fp,sp,4
 400f650:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400f654:	e0bfff17 	ldw	r2,-4(fp)
 400f658:	108000d0 	cmplti	r2,r2,3
 400f65c:	10000d1e 	bne	r2,zero,400f694 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400f660:	00810074 	movhi	r2,1025
 400f664:	10984804 	addi	r2,r2,24864
 400f668:	e0ffff17 	ldw	r3,-4(fp)
 400f66c:	18c00324 	muli	r3,r3,12
 400f670:	10c5883a 	add	r2,r2,r3
 400f674:	10800204 	addi	r2,r2,8
 400f678:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400f67c:	00810074 	movhi	r2,1025
 400f680:	10984804 	addi	r2,r2,24864
 400f684:	e0ffff17 	ldw	r3,-4(fp)
 400f688:	18c00324 	muli	r3,r3,12
 400f68c:	10c5883a 	add	r2,r2,r3
 400f690:	10000015 	stw	zero,0(r2)
  }
}
 400f694:	0001883a 	nop
 400f698:	e037883a 	mov	sp,fp
 400f69c:	df000017 	ldw	fp,0(sp)
 400f6a0:	dec00104 	addi	sp,sp,4
 400f6a4:	f800283a 	ret

0400f6a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400f6a8:	defff904 	addi	sp,sp,-28
 400f6ac:	df000615 	stw	fp,24(sp)
 400f6b0:	df000604 	addi	fp,sp,24
 400f6b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f6b8:	0005303a 	rdctl	r2,status
 400f6bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f6c0:	e0fffe17 	ldw	r3,-8(fp)
 400f6c4:	00bfff84 	movi	r2,-2
 400f6c8:	1884703a 	and	r2,r3,r2
 400f6cc:	1001703a 	wrctl	status,r2
  
  return context;
 400f6d0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400f6d4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400f6d8:	d0a00f17 	ldw	r2,-32708(gp)
 400f6dc:	10c000c4 	addi	r3,r2,3
 400f6e0:	00bfff04 	movi	r2,-4
 400f6e4:	1884703a 	and	r2,r3,r2
 400f6e8:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400f6ec:	d0e00f17 	ldw	r3,-32708(gp)
 400f6f0:	e0bfff17 	ldw	r2,-4(fp)
 400f6f4:	1887883a 	add	r3,r3,r2
 400f6f8:	00820034 	movhi	r2,2048
 400f6fc:	10800004 	addi	r2,r2,0
 400f700:	10c0062e 	bgeu	r2,r3,400f71c <sbrk+0x74>
 400f704:	e0bffb17 	ldw	r2,-20(fp)
 400f708:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f70c:	e0bffa17 	ldw	r2,-24(fp)
 400f710:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400f714:	00bfffc4 	movi	r2,-1
 400f718:	00000b06 	br	400f748 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400f71c:	d0a00f17 	ldw	r2,-32708(gp)
 400f720:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400f724:	d0e00f17 	ldw	r3,-32708(gp)
 400f728:	e0bfff17 	ldw	r2,-4(fp)
 400f72c:	1885883a 	add	r2,r3,r2
 400f730:	d0a00f15 	stw	r2,-32708(gp)
 400f734:	e0bffb17 	ldw	r2,-20(fp)
 400f738:	e0bffc15 	stw	r2,-16(fp)
 400f73c:	e0bffc17 	ldw	r2,-16(fp)
 400f740:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400f744:	e0bffd17 	ldw	r2,-12(fp)
} 
 400f748:	e037883a 	mov	sp,fp
 400f74c:	df000017 	ldw	fp,0(sp)
 400f750:	dec00104 	addi	sp,sp,4
 400f754:	f800283a 	ret

0400f758 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400f758:	defffa04 	addi	sp,sp,-24
 400f75c:	df000515 	stw	fp,20(sp)
 400f760:	df000504 	addi	fp,sp,20
 400f764:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f768:	0005303a 	rdctl	r2,status
 400f76c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f770:	e0fffc17 	ldw	r3,-16(fp)
 400f774:	00bfff84 	movi	r2,-2
 400f778:	1884703a 	and	r2,r3,r2
 400f77c:	1001703a 	wrctl	status,r2
  
  return context;
 400f780:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400f784:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400f788:	e0bfff17 	ldw	r2,-4(fp)
 400f78c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400f790:	e0bffd17 	ldw	r2,-12(fp)
 400f794:	10800017 	ldw	r2,0(r2)
 400f798:	e0fffd17 	ldw	r3,-12(fp)
 400f79c:	18c00117 	ldw	r3,4(r3)
 400f7a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400f7a4:	e0bffd17 	ldw	r2,-12(fp)
 400f7a8:	10800117 	ldw	r2,4(r2)
 400f7ac:	e0fffd17 	ldw	r3,-12(fp)
 400f7b0:	18c00017 	ldw	r3,0(r3)
 400f7b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400f7b8:	e0bffd17 	ldw	r2,-12(fp)
 400f7bc:	e0fffd17 	ldw	r3,-12(fp)
 400f7c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400f7c4:	e0bffd17 	ldw	r2,-12(fp)
 400f7c8:	e0fffd17 	ldw	r3,-12(fp)
 400f7cc:	10c00015 	stw	r3,0(r2)
 400f7d0:	e0bffb17 	ldw	r2,-20(fp)
 400f7d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f7d8:	e0bffe17 	ldw	r2,-8(fp)
 400f7dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400f7e0:	0001883a 	nop
 400f7e4:	e037883a 	mov	sp,fp
 400f7e8:	df000017 	ldw	fp,0(sp)
 400f7ec:	dec00104 	addi	sp,sp,4
 400f7f0:	f800283a 	ret

0400f7f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400f7f4:	defffb04 	addi	sp,sp,-20
 400f7f8:	dfc00415 	stw	ra,16(sp)
 400f7fc:	df000315 	stw	fp,12(sp)
 400f800:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400f804:	d0a01017 	ldw	r2,-32704(gp)
 400f808:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400f80c:	d0a02417 	ldw	r2,-32624(gp)
 400f810:	10800044 	addi	r2,r2,1
 400f814:	d0a02415 	stw	r2,-32624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f818:	00002e06 	br	400f8d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400f81c:	e0bffd17 	ldw	r2,-12(fp)
 400f820:	10800017 	ldw	r2,0(r2)
 400f824:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400f828:	e0bffd17 	ldw	r2,-12(fp)
 400f82c:	10800403 	ldbu	r2,16(r2)
 400f830:	10803fcc 	andi	r2,r2,255
 400f834:	10000426 	beq	r2,zero,400f848 <alt_tick+0x54>
 400f838:	d0a02417 	ldw	r2,-32624(gp)
 400f83c:	1000021e 	bne	r2,zero,400f848 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400f840:	e0bffd17 	ldw	r2,-12(fp)
 400f844:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400f848:	e0bffd17 	ldw	r2,-12(fp)
 400f84c:	10800217 	ldw	r2,8(r2)
 400f850:	d0e02417 	ldw	r3,-32624(gp)
 400f854:	18801d36 	bltu	r3,r2,400f8cc <alt_tick+0xd8>
 400f858:	e0bffd17 	ldw	r2,-12(fp)
 400f85c:	10800403 	ldbu	r2,16(r2)
 400f860:	10803fcc 	andi	r2,r2,255
 400f864:	1000191e 	bne	r2,zero,400f8cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400f868:	e0bffd17 	ldw	r2,-12(fp)
 400f86c:	10800317 	ldw	r2,12(r2)
 400f870:	e0fffd17 	ldw	r3,-12(fp)
 400f874:	18c00517 	ldw	r3,20(r3)
 400f878:	1809883a 	mov	r4,r3
 400f87c:	103ee83a 	callr	r2
 400f880:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400f884:	e0bfff17 	ldw	r2,-4(fp)
 400f888:	1000031e 	bne	r2,zero,400f898 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400f88c:	e13ffd17 	ldw	r4,-12(fp)
 400f890:	400f7580 	call	400f758 <alt_alarm_stop>
 400f894:	00000d06 	br	400f8cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400f898:	e0bffd17 	ldw	r2,-12(fp)
 400f89c:	10c00217 	ldw	r3,8(r2)
 400f8a0:	e0bfff17 	ldw	r2,-4(fp)
 400f8a4:	1887883a 	add	r3,r3,r2
 400f8a8:	e0bffd17 	ldw	r2,-12(fp)
 400f8ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400f8b0:	e0bffd17 	ldw	r2,-12(fp)
 400f8b4:	10c00217 	ldw	r3,8(r2)
 400f8b8:	d0a02417 	ldw	r2,-32624(gp)
 400f8bc:	1880032e 	bgeu	r3,r2,400f8cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400f8c0:	e0bffd17 	ldw	r2,-12(fp)
 400f8c4:	00c00044 	movi	r3,1
 400f8c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400f8cc:	e0bffe17 	ldw	r2,-8(fp)
 400f8d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f8d4:	e0fffd17 	ldw	r3,-12(fp)
 400f8d8:	d0a01004 	addi	r2,gp,-32704
 400f8dc:	18bfcf1e 	bne	r3,r2,400f81c <__reset+0xfa81f81c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400f8e0:	0001883a 	nop
}
 400f8e4:	0001883a 	nop
 400f8e8:	e037883a 	mov	sp,fp
 400f8ec:	dfc00117 	ldw	ra,4(sp)
 400f8f0:	df000017 	ldw	fp,0(sp)
 400f8f4:	dec00204 	addi	sp,sp,8
 400f8f8:	f800283a 	ret

0400f8fc <usleep>:
 400f8fc:	defffd04 	addi	sp,sp,-12
 400f900:	dfc00215 	stw	ra,8(sp)
 400f904:	df000115 	stw	fp,4(sp)
 400f908:	df000104 	addi	fp,sp,4
 400f90c:	e13fff15 	stw	r4,-4(fp)
 400f910:	e13fff17 	ldw	r4,-4(fp)
 400f914:	40129400 	call	4012940 <alt_busy_sleep>
 400f918:	e037883a 	mov	sp,fp
 400f91c:	dfc00117 	ldw	ra,4(sp)
 400f920:	df000017 	ldw	fp,0(sp)
 400f924:	dec00204 	addi	sp,sp,8
 400f928:	f800283a 	ret

0400f92c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f92c:	defffe04 	addi	sp,sp,-8
 400f930:	dfc00115 	stw	ra,4(sp)
 400f934:	df000015 	stw	fp,0(sp)
 400f938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f93c:	d0a00d17 	ldw	r2,-32716(gp)
 400f940:	10000326 	beq	r2,zero,400f950 <alt_get_errno+0x24>
 400f944:	d0a00d17 	ldw	r2,-32716(gp)
 400f948:	103ee83a 	callr	r2
 400f94c:	00000106 	br	400f954 <alt_get_errno+0x28>
 400f950:	d0a01e04 	addi	r2,gp,-32648
}
 400f954:	e037883a 	mov	sp,fp
 400f958:	dfc00117 	ldw	ra,4(sp)
 400f95c:	df000017 	ldw	fp,0(sp)
 400f960:	dec00204 	addi	sp,sp,8
 400f964:	f800283a 	ret

0400f968 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400f968:	defff904 	addi	sp,sp,-28
 400f96c:	dfc00615 	stw	ra,24(sp)
 400f970:	df000515 	stw	fp,20(sp)
 400f974:	df000504 	addi	fp,sp,20
 400f978:	e13ffd15 	stw	r4,-12(fp)
 400f97c:	e17ffe15 	stw	r5,-8(fp)
 400f980:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f984:	e0bffd17 	ldw	r2,-12(fp)
 400f988:	10000616 	blt	r2,zero,400f9a4 <write+0x3c>
 400f98c:	e0bffd17 	ldw	r2,-12(fp)
 400f990:	10c00324 	muli	r3,r2,12
 400f994:	00810074 	movhi	r2,1025
 400f998:	10984804 	addi	r2,r2,24864
 400f99c:	1885883a 	add	r2,r3,r2
 400f9a0:	00000106 	br	400f9a8 <write+0x40>
 400f9a4:	0005883a 	mov	r2,zero
 400f9a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f9ac:	e0bffb17 	ldw	r2,-20(fp)
 400f9b0:	10002126 	beq	r2,zero,400fa38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400f9b4:	e0bffb17 	ldw	r2,-20(fp)
 400f9b8:	10800217 	ldw	r2,8(r2)
 400f9bc:	108000cc 	andi	r2,r2,3
 400f9c0:	10001826 	beq	r2,zero,400fa24 <write+0xbc>
 400f9c4:	e0bffb17 	ldw	r2,-20(fp)
 400f9c8:	10800017 	ldw	r2,0(r2)
 400f9cc:	10800617 	ldw	r2,24(r2)
 400f9d0:	10001426 	beq	r2,zero,400fa24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400f9d4:	e0bffb17 	ldw	r2,-20(fp)
 400f9d8:	10800017 	ldw	r2,0(r2)
 400f9dc:	10800617 	ldw	r2,24(r2)
 400f9e0:	e0ffff17 	ldw	r3,-4(fp)
 400f9e4:	180d883a 	mov	r6,r3
 400f9e8:	e17ffe17 	ldw	r5,-8(fp)
 400f9ec:	e13ffb17 	ldw	r4,-20(fp)
 400f9f0:	103ee83a 	callr	r2
 400f9f4:	e0bffc15 	stw	r2,-16(fp)
 400f9f8:	e0bffc17 	ldw	r2,-16(fp)
 400f9fc:	1000070e 	bge	r2,zero,400fa1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400fa00:	400f92c0 	call	400f92c <alt_get_errno>
 400fa04:	1007883a 	mov	r3,r2
 400fa08:	e0bffc17 	ldw	r2,-16(fp)
 400fa0c:	0085c83a 	sub	r2,zero,r2
 400fa10:	18800015 	stw	r2,0(r3)
        return -1;
 400fa14:	00bfffc4 	movi	r2,-1
 400fa18:	00000c06 	br	400fa4c <write+0xe4>
      }
      return rval;
 400fa1c:	e0bffc17 	ldw	r2,-16(fp)
 400fa20:	00000a06 	br	400fa4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400fa24:	400f92c0 	call	400f92c <alt_get_errno>
 400fa28:	1007883a 	mov	r3,r2
 400fa2c:	00800344 	movi	r2,13
 400fa30:	18800015 	stw	r2,0(r3)
 400fa34:	00000406 	br	400fa48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400fa38:	400f92c0 	call	400f92c <alt_get_errno>
 400fa3c:	1007883a 	mov	r3,r2
 400fa40:	00801444 	movi	r2,81
 400fa44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400fa48:	00bfffc4 	movi	r2,-1
}
 400fa4c:	e037883a 	mov	sp,fp
 400fa50:	dfc00117 	ldw	ra,4(sp)
 400fa54:	df000017 	ldw	fp,0(sp)
 400fa58:	dec00204 	addi	sp,sp,8
 400fa5c:	f800283a 	ret

0400fa60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400fa60:	defffd04 	addi	sp,sp,-12
 400fa64:	dfc00215 	stw	ra,8(sp)
 400fa68:	df000115 	stw	fp,4(sp)
 400fa6c:	df000104 	addi	fp,sp,4
 400fa70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400fa74:	d1600a04 	addi	r5,gp,-32728
 400fa78:	e13fff17 	ldw	r4,-4(fp)
 400fa7c:	4012aa40 	call	4012aa4 <alt_dev_llist_insert>
}
 400fa80:	e037883a 	mov	sp,fp
 400fa84:	dfc00117 	ldw	ra,4(sp)
 400fa88:	df000017 	ldw	fp,0(sp)
 400fa8c:	dec00204 	addi	sp,sp,8
 400fa90:	f800283a 	ret

0400fa94 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400fa94:	defffd04 	addi	sp,sp,-12
 400fa98:	dfc00215 	stw	ra,8(sp)
 400fa9c:	df000115 	stw	fp,4(sp)
 400faa0:	df000104 	addi	fp,sp,4
 400faa4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400faa8:	40131840 	call	4013184 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400faac:	00800044 	movi	r2,1
 400fab0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400fab4:	0001883a 	nop
 400fab8:	e037883a 	mov	sp,fp
 400fabc:	dfc00117 	ldw	ra,4(sp)
 400fac0:	df000017 	ldw	fp,0(sp)
 400fac4:	dec00204 	addi	sp,sp,8
 400fac8:	f800283a 	ret

0400facc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400facc:	defffe04 	addi	sp,sp,-8
 400fad0:	dfc00115 	stw	ra,4(sp)
 400fad4:	df000015 	stw	fp,0(sp)
 400fad8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 400fadc:	01c0fa04 	movi	r7,1000
 400fae0:	01800044 	movi	r6,1
 400fae4:	000b883a 	mov	r5,zero
 400fae8:	01028034 	movhi	r4,2560
 400faec:	21041004 	addi	r4,r4,4160
 400faf0:	40116dc0 	call	40116dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 400faf4:	000d883a 	mov	r6,zero
 400faf8:	000b883a 	mov	r5,zero
 400fafc:	01010074 	movhi	r4,1025
 400fb00:	2118b204 	addi	r4,r4,25288
 400fb04:	4010b640 	call	4010b64 <altera_avalon_jtag_uart_init>
 400fb08:	01010074 	movhi	r4,1025
 400fb0c:	2118a804 	addi	r4,r4,25248
 400fb10:	400fa600 	call	400fa60 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 400fb14:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 400fb18:	0001883a 	nop
    ALTERA_EPCQ_CONTROLLER_INIT ( EPCS_CNTL, epcs_cntl);
 400fb1c:	01010074 	movhi	r4,1025
 400fb20:	211cc004 	addi	r4,r4,29440
 400fb24:	4011ed00 	call	4011ed0 <altera_epcq_controller_init>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 400fb28:	01010074 	movhi	r4,1025
 400fb2c:	211cf704 	addi	r4,r4,29660
 400fb30:	400fa600 	call	400fa60 <alt_dev_reg>
    LT24_CONTROLLER_INIT ( LCD_CONTROLLER, LCD_Controller);
 400fb34:	0001883a 	nop
    PITCH_GENERATION_INIT ( PITCH_GENERATION_0, pitch_generation_0);
 400fb38:	0001883a 	nop
    VOLUME_GENERATION_INIT ( VOLUME_GENERATION_0, volume_generation_0);
 400fb3c:	0001883a 	nop
}
 400fb40:	0001883a 	nop
 400fb44:	e037883a 	mov	sp,fp
 400fb48:	dfc00117 	ldw	ra,4(sp)
 400fb4c:	df000017 	ldw	fp,0(sp)
 400fb50:	dec00204 	addi	sp,sp,8
 400fb54:	f800283a 	ret

0400fb58 <Delay_Ms>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms(alt_u16 count_ms)
{
 400fb58:	defffd04 	addi	sp,sp,-12
 400fb5c:	dfc00215 	stw	ra,8(sp)
 400fb60:	df000115 	stw	fp,4(sp)
 400fb64:	df000104 	addi	fp,sp,4
 400fb68:	2005883a 	mov	r2,r4
 400fb6c:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 400fb70:	00000206 	br	400fb7c <Delay_Ms+0x24>
    {
        usleep(1000);
 400fb74:	0100fa04 	movi	r4,1000
 400fb78:	400f8fc0 	call	400f8fc <usleep>
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 400fb7c:	e0bfff0b 	ldhu	r2,-4(fp)
 400fb80:	10ffffc4 	addi	r3,r2,-1
 400fb84:	e0ffff0d 	sth	r3,-4(fp)
 400fb88:	10bfffcc 	andi	r2,r2,65535
 400fb8c:	103ff91e 	bne	r2,zero,400fb74 <__reset+0xfa81fb74>
    {
        usleep(1000);
    }
}
 400fb90:	0001883a 	nop
 400fb94:	e037883a 	mov	sp,fp
 400fb98:	dfc00117 	ldw	ra,4(sp)
 400fb9c:	df000017 	ldw	fp,0(sp)
 400fba0:	dec00204 	addi	sp,sp,8
 400fba4:	f800283a 	ret

0400fba8 <LCD_SetCursor>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 400fba8:	defffd04 	addi	sp,sp,-12
 400fbac:	df000215 	stw	fp,8(sp)
 400fbb0:	df000204 	addi	fp,sp,8
 400fbb4:	2007883a 	mov	r3,r4
 400fbb8:	2805883a 	mov	r2,r5
 400fbbc:	e0fffe0d 	sth	r3,-8(fp)
 400fbc0:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 400fbc4:	00c00a84 	movi	r3,42
 400fbc8:	00828034 	movhi	r2,2560
 400fbcc:	10843404 	addi	r2,r2,4304
 400fbd0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xpos>>8);
 400fbd4:	e0bffe0b 	ldhu	r2,-8(fp)
 400fbd8:	1004d23a 	srli	r2,r2,8
 400fbdc:	10ffffcc 	andi	r3,r2,65535
 400fbe0:	00828034 	movhi	r2,2560
 400fbe4:	10843504 	addi	r2,r2,4308
 400fbe8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xpos&0XFF);
 400fbec:	e0bffe0b 	ldhu	r2,-8(fp)
 400fbf0:	10c03fcc 	andi	r3,r2,255
 400fbf4:	00828034 	movhi	r2,2560
 400fbf8:	10843504 	addi	r2,r2,4308
 400fbfc:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 400fc00:	00c00ac4 	movi	r3,43
 400fc04:	00828034 	movhi	r2,2560
 400fc08:	10843404 	addi	r2,r2,4304
 400fc0c:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Ypos>>8);
 400fc10:	e0bfff0b 	ldhu	r2,-4(fp)
 400fc14:	1004d23a 	srli	r2,r2,8
 400fc18:	10ffffcc 	andi	r3,r2,65535
 400fc1c:	00828034 	movhi	r2,2560
 400fc20:	10843504 	addi	r2,r2,4308
 400fc24:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Ypos&0XFF);
 400fc28:	e0bfff0b 	ldhu	r2,-4(fp)
 400fc2c:	10c03fcc 	andi	r3,r2,255
 400fc30:	00828034 	movhi	r2,2560
 400fc34:	10843504 	addi	r2,r2,4308
 400fc38:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400fc3c:	00c00b04 	movi	r3,44
 400fc40:	00828034 	movhi	r2,2560
 400fc44:	10843404 	addi	r2,r2,4304
 400fc48:	10c00035 	stwio	r3,0(r2)

}
 400fc4c:	0001883a 	nop
 400fc50:	e037883a 	mov	sp,fp
 400fc54:	df000017 	ldw	fp,0(sp)
 400fc58:	dec00104 	addi	sp,sp,4
 400fc5c:	f800283a 	ret

0400fc60 <LCD_SetRect>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_SetRect(alt_u16 Xposstart, alt_u16 Yposstart,alt_u16 Xposend, alt_u16 Yposend)
{
 400fc60:	defffb04 	addi	sp,sp,-20
 400fc64:	df000415 	stw	fp,16(sp)
 400fc68:	df000404 	addi	fp,sp,16
 400fc6c:	2011883a 	mov	r8,r4
 400fc70:	2809883a 	mov	r4,r5
 400fc74:	3007883a 	mov	r3,r6
 400fc78:	3805883a 	mov	r2,r7
 400fc7c:	e23ffc0d 	sth	r8,-16(fp)
 400fc80:	e13ffd0d 	sth	r4,-12(fp)
 400fc84:	e0fffe0d 	sth	r3,-8(fp)
 400fc88:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 400fc8c:	00c00a84 	movi	r3,42
 400fc90:	00828034 	movhi	r2,2560
 400fc94:	10843404 	addi	r2,r2,4304
 400fc98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposstart>>8);
 400fc9c:	e0bffc0b 	ldhu	r2,-16(fp)
 400fca0:	1004d23a 	srli	r2,r2,8
 400fca4:	10ffffcc 	andi	r3,r2,65535
 400fca8:	00828034 	movhi	r2,2560
 400fcac:	10843504 	addi	r2,r2,4308
 400fcb0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposstart&0XFF);
 400fcb4:	e0bffc0b 	ldhu	r2,-16(fp)
 400fcb8:	10c03fcc 	andi	r3,r2,255
 400fcbc:	00828034 	movhi	r2,2560
 400fcc0:	10843504 	addi	r2,r2,4308
 400fcc4:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposend>>8);
 400fcc8:	e0bffe0b 	ldhu	r2,-8(fp)
 400fccc:	1004d23a 	srli	r2,r2,8
 400fcd0:	10ffffcc 	andi	r3,r2,65535
 400fcd4:	00828034 	movhi	r2,2560
 400fcd8:	10843504 	addi	r2,r2,4308
 400fcdc:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposend&0XFF);
 400fce0:	e0bffe0b 	ldhu	r2,-8(fp)
 400fce4:	10c03fcc 	andi	r3,r2,255
 400fce8:	00828034 	movhi	r2,2560
 400fcec:	10843504 	addi	r2,r2,4308
 400fcf0:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 400fcf4:	00c00ac4 	movi	r3,43
 400fcf8:	00828034 	movhi	r2,2560
 400fcfc:	10843404 	addi	r2,r2,4304
 400fd00:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposstart>>8);
 400fd04:	e0bffd0b 	ldhu	r2,-12(fp)
 400fd08:	1004d23a 	srli	r2,r2,8
 400fd0c:	10ffffcc 	andi	r3,r2,65535
 400fd10:	00828034 	movhi	r2,2560
 400fd14:	10843504 	addi	r2,r2,4308
 400fd18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposstart&0XFF);
 400fd1c:	e0bffd0b 	ldhu	r2,-12(fp)
 400fd20:	10c03fcc 	andi	r3,r2,255
 400fd24:	00828034 	movhi	r2,2560
 400fd28:	10843504 	addi	r2,r2,4308
 400fd2c:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposend>>8);
 400fd30:	e0bfff0b 	ldhu	r2,-4(fp)
 400fd34:	1004d23a 	srli	r2,r2,8
 400fd38:	10ffffcc 	andi	r3,r2,65535
 400fd3c:	00828034 	movhi	r2,2560
 400fd40:	10843504 	addi	r2,r2,4308
 400fd44:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposend&0XFF);
 400fd48:	e0bfff0b 	ldhu	r2,-4(fp)
 400fd4c:	10c03fcc 	andi	r3,r2,255
 400fd50:	00828034 	movhi	r2,2560
 400fd54:	10843504 	addi	r2,r2,4308
 400fd58:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400fd5c:	00c00b04 	movi	r3,44
 400fd60:	00828034 	movhi	r2,2560
 400fd64:	10843404 	addi	r2,r2,4304
 400fd68:	10c00035 	stwio	r3,0(r2)

}
 400fd6c:	0001883a 	nop
 400fd70:	e037883a 	mov	sp,fp
 400fd74:	df000017 	ldw	fp,0(sp)
 400fd78:	dec00104 	addi	sp,sp,4
 400fd7c:	f800283a 	ret

0400fd80 <LCD_Clear>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_Clear(alt_u16 Color)
{
 400fd80:	defffc04 	addi	sp,sp,-16
 400fd84:	dfc00315 	stw	ra,12(sp)
 400fd88:	df000215 	stw	fp,8(sp)
 400fd8c:	df000204 	addi	fp,sp,8
 400fd90:	2005883a 	mov	r2,r4
 400fd94:	e0bfff0d 	sth	r2,-4(fp)
		alt_u32 index=0;
 400fd98:	e03ffe15 	stw	zero,-8(fp)
		LCD_SetRect(0,0,240,320);
 400fd9c:	01c05004 	movi	r7,320
 400fda0:	01803c04 	movi	r6,240
 400fda4:	000b883a 	mov	r5,zero
 400fda8:	0009883a 	mov	r4,zero
 400fdac:	400fc600 	call	400fc60 <LCD_SetRect>
        //LCD_SetCursor(0x0000,0x0000);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400fdb0:	00c00b04 	movi	r3,44
 400fdb4:	00828034 	movhi	r2,2560
 400fdb8:	10843404 	addi	r2,r2,4304
 400fdbc:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)//76800
 400fdc0:	e03ffe15 	stw	zero,-8(fp)
 400fdc4:	00000706 	br	400fde4 <LCD_Clear+0x64>
        {
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Color);
 400fdc8:	e0ffff0b 	ldhu	r3,-4(fp)
 400fdcc:	00828034 	movhi	r2,2560
 400fdd0:	10843504 	addi	r2,r2,4308
 400fdd4:	10c00035 	stwio	r3,0(r2)
{
		alt_u32 index=0;
		LCD_SetRect(0,0,240,320);
        //LCD_SetCursor(0x0000,0x0000);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
        for(index=0;index<76800;index++)//76800
 400fdd8:	e0bffe17 	ldw	r2,-8(fp)
 400fddc:	10800044 	addi	r2,r2,1
 400fde0:	e0bffe15 	stw	r2,-8(fp)
 400fde4:	e0fffe17 	ldw	r3,-8(fp)
 400fde8:	00800074 	movhi	r2,1
 400fdec:	108affc4 	addi	r2,r2,11263
 400fdf0:	10fff52e 	bgeu	r2,r3,400fdc8 <__reset+0xfa81fdc8>
        {
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Color);
        }
}
 400fdf4:	0001883a 	nop
 400fdf8:	e037883a 	mov	sp,fp
 400fdfc:	dfc00117 	ldw	ra,4(sp)
 400fe00:	df000017 	ldw	fp,0(sp)
 400fe04:	dec00204 	addi	sp,sp,8
 400fe08:	f800283a 	ret

0400fe0c <LCD_DrawPoint>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 400fe0c:	defffb04 	addi	sp,sp,-20
 400fe10:	dfc00415 	stw	ra,16(sp)
 400fe14:	df000315 	stw	fp,12(sp)
 400fe18:	df000304 	addi	fp,sp,12
 400fe1c:	2807883a 	mov	r3,r5
 400fe20:	3005883a 	mov	r2,r6
 400fe24:	e13ffd0d 	sth	r4,-12(fp)
 400fe28:	e0fffe0d 	sth	r3,-8(fp)
 400fe2c:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 400fe30:	e0bffd0b 	ldhu	r2,-12(fp)
 400fe34:	e0fffe0b 	ldhu	r3,-8(fp)
 400fe38:	180b883a 	mov	r5,r3
 400fe3c:	1009883a 	mov	r4,r2
 400fe40:	400fba80 	call	400fba8 <LCD_SetCursor>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400fe44:	00c00b04 	movi	r3,44
 400fe48:	00828034 	movhi	r2,2560
 400fe4c:	10843404 	addi	r2,r2,4304
 400fe50:	10c00035 	stwio	r3,0(r2)
        IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
 400fe54:	e0ffff0b 	ldhu	r3,-4(fp)
 400fe58:	00828034 	movhi	r2,2560
 400fe5c:	10843504 	addi	r2,r2,4308
 400fe60:	10c00035 	stwio	r3,0(r2)
}
 400fe64:	0001883a 	nop
 400fe68:	e037883a 	mov	sp,fp
 400fe6c:	dfc00117 	ldw	ra,4(sp)
 400fe70:	df000017 	ldw	fp,0(sp)
 400fe74:	dec00204 	addi	sp,sp,8
 400fe78:	f800283a 	ret

0400fe7c <LCD_DrawRect>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_DrawRect(alt_u16 xs,alt_u16 ys,alt_u16 xe,alt_u16 ye,alt_u16 color )
{
 400fe7c:	defff804 	addi	sp,sp,-32
 400fe80:	dfc00715 	stw	ra,28(sp)
 400fe84:	df000615 	stw	fp,24(sp)
 400fe88:	df000604 	addi	fp,sp,24
 400fe8c:	2011883a 	mov	r8,r4
 400fe90:	3009883a 	mov	r4,r6
 400fe94:	3807883a 	mov	r3,r7
 400fe98:	e0800217 	ldw	r2,8(fp)
 400fe9c:	e23ffb0d 	sth	r8,-20(fp)
 400fea0:	e17ffc0d 	sth	r5,-16(fp)
 400fea4:	e13ffd0d 	sth	r4,-12(fp)
 400fea8:	e0fffe0d 	sth	r3,-8(fp)
 400feac:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetRect(xs,ys,xe,ye);
 400feb0:	e0bffb0b 	ldhu	r2,-20(fp)
 400feb4:	e0fffc0b 	ldhu	r3,-16(fp)
 400feb8:	e13ffd0b 	ldhu	r4,-12(fp)
 400febc:	e17ffe0b 	ldhu	r5,-8(fp)
 400fec0:	280f883a 	mov	r7,r5
 400fec4:	200d883a 	mov	r6,r4
 400fec8:	180b883a 	mov	r5,r3
 400fecc:	1009883a 	mov	r4,r2
 400fed0:	400fc600 	call	400fc60 <LCD_SetRect>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400fed4:	00c00b04 	movi	r3,44
 400fed8:	00828034 	movhi	r2,2560
 400fedc:	10843404 	addi	r2,r2,4304
 400fee0:	10c00035 	stwio	r3,0(r2)
        for(int i = 0; i < (xe-xs+2)*(ye-ys+2);i++){
 400fee4:	e03ffa15 	stw	zero,-24(fp)
 400fee8:	00000706 	br	400ff08 <LCD_DrawRect+0x8c>
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
 400feec:	e0ffff0b 	ldhu	r3,-4(fp)
 400fef0:	00828034 	movhi	r2,2560
 400fef4:	10843504 	addi	r2,r2,4308
 400fef8:	10c00035 	stwio	r3,0(r2)

void LCD_DrawRect(alt_u16 xs,alt_u16 ys,alt_u16 xe,alt_u16 ye,alt_u16 color )
{
        LCD_SetRect(xs,ys,xe,ye);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
        for(int i = 0; i < (xe-xs+2)*(ye-ys+2);i++){
 400fefc:	e0bffa17 	ldw	r2,-24(fp)
 400ff00:	10800044 	addi	r2,r2,1
 400ff04:	e0bffa15 	stw	r2,-24(fp)
 400ff08:	e0fffd0b 	ldhu	r3,-12(fp)
 400ff0c:	e0bffb0b 	ldhu	r2,-20(fp)
 400ff10:	1885c83a 	sub	r2,r3,r2
 400ff14:	10c00084 	addi	r3,r2,2
 400ff18:	e13ffe0b 	ldhu	r4,-8(fp)
 400ff1c:	e0bffc0b 	ldhu	r2,-16(fp)
 400ff20:	2085c83a 	sub	r2,r4,r2
 400ff24:	10800084 	addi	r2,r2,2
 400ff28:	1885383a 	mul	r2,r3,r2
 400ff2c:	e0fffa17 	ldw	r3,-24(fp)
 400ff30:	18bfee16 	blt	r3,r2,400feec <__reset+0xfa81feec>
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
        }

}
 400ff34:	0001883a 	nop
 400ff38:	e037883a 	mov	sp,fp
 400ff3c:	dfc00117 	ldw	ra,4(sp)
 400ff40:	df000017 	ldw	fp,0(sp)
 400ff44:	dec00204 	addi	sp,sp,8
 400ff48:	f800283a 	ret

0400ff4c <vid_set_pixel>:


void vid_set_pixel(int horiz, int vert, unsigned int color)
{
 400ff4c:	defffa04 	addi	sp,sp,-24
 400ff50:	dfc00515 	stw	ra,20(sp)
 400ff54:	df000415 	stw	fp,16(sp)
 400ff58:	df000404 	addi	fp,sp,16
 400ff5c:	e13ffd15 	stw	r4,-12(fp)
 400ff60:	e17ffe15 	stw	r5,-8(fp)
 400ff64:	e1bfff15 	stw	r6,-4(fp)

	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 400ff68:	e0bfff17 	ldw	r2,-4(fp)
 400ff6c:	10803fcc 	andi	r2,r2,255
 400ff70:	1004d0fa 	srli	r2,r2,3
 400ff74:	e0bffc0d 	sth	r2,-16(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 400ff78:	e0bfff17 	ldw	r2,-4(fp)
 400ff7c:	10bf000c 	andi	r2,r2,64512
 400ff80:	1004d17a 	srli	r2,r2,5
 400ff84:	1007883a 	mov	r3,r2
 400ff88:	e0bffc0b 	ldhu	r2,-16(fp)
 400ff8c:	1884b03a 	or	r2,r3,r2
 400ff90:	e0bffc0d 	sth	r2,-16(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 400ff94:	e0bfff17 	ldw	r2,-4(fp)
 400ff98:	10803e2c 	andhi	r2,r2,248
 400ff9c:	1004d23a 	srli	r2,r2,8
 400ffa0:	1007883a 	mov	r3,r2
 400ffa4:	e0bffc0b 	ldhu	r2,-16(fp)
 400ffa8:	1884b03a 	or	r2,r3,r2
 400ffac:	e0bffc0d 	sth	r2,-16(fp)
	LCD_DrawPoint(horiz, vert, color16);
 400ffb0:	e0bffd17 	ldw	r2,-12(fp)
 400ffb4:	10ffffcc 	andi	r3,r2,65535
 400ffb8:	e0bffe17 	ldw	r2,-8(fp)
 400ffbc:	10bfffcc 	andi	r2,r2,65535
 400ffc0:	e13ffc0b 	ldhu	r4,-16(fp)
 400ffc4:	200d883a 	mov	r6,r4
 400ffc8:	100b883a 	mov	r5,r2
 400ffcc:	1809883a 	mov	r4,r3
 400ffd0:	400fe0c0 	call	400fe0c <LCD_DrawPoint>
}
 400ffd4:	0001883a 	nop
 400ffd8:	e037883a 	mov	sp,fp
 400ffdc:	dfc00117 	ldw	ra,4(sp)
 400ffe0:	df000017 	ldw	fp,0(sp)
 400ffe4:	dec00204 	addi	sp,sp,8
 400ffe8:	f800283a 	ret

0400ffec <LCD_Init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_Init()
{
 400ffec:	defffe04 	addi	sp,sp,-8
 400fff0:	dfc00115 	stw	ra,4(sp)
 400fff4:	df000015 	stw	fp,0(sp)
 400fff8:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;

	IOWR_LT24_AVALON_Set_LCD_RST(LCD_RESET_N_BASE); //	Set_LCD_RST;
 400fffc:	00c00044 	movi	r3,1
 4010000:	00828034 	movhi	r2,2560
 4010004:	10842804 	addi	r2,r2,4256
 4010008:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 401000c:	01000044 	movi	r4,1
 4010010:	400fb580 	call	400fb58 <Delay_Ms>
	IOWR_LT24_AVALON_Clr_LCD_RST(LCD_RESET_N_BASE);
 4010014:	0007883a 	mov	r3,zero
 4010018:	00828034 	movhi	r2,2560
 401001c:	10842804 	addi	r2,r2,4256
 4010020:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 4010024:	01000284 	movi	r4,10
 4010028:	400fb580 	call	400fb58 <Delay_Ms>
	IOWR_LT24_AVALON_Set_LCD_RST(LCD_RESET_N_BASE); //	Set_LCD_RST;
 401002c:	00c00044 	movi	r3,1
 4010030:	00828034 	movhi	r2,2560
 4010034:	10842804 	addi	r2,r2,4256
 4010038:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 401003c:	01001e04 	movi	r4,120
 4010040:	400fb580 	call	400fb58 <Delay_Ms>
//	Clr_LCD_CS;


	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0011);//Exit Sleep
 4010044:	00c00444 	movi	r3,17
 4010048:	00828034 	movhi	r2,2560
 401004c:	10843404 	addi	r2,r2,4304
 4010050:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00CF);//Power control B
 4010054:	00c033c4 	movi	r3,207
 4010058:	00828034 	movhi	r2,2560
 401005c:	10843404 	addi	r2,r2,4304
 4010060:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010064:	0007883a 	mov	r3,zero
 4010068:	00828034 	movhi	r2,2560
 401006c:	10843504 	addi	r2,r2,4308
 4010070:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0081);
 4010074:	00c02044 	movi	r3,129
 4010078:	00828034 	movhi	r2,2560
 401007c:	10843504 	addi	r2,r2,4308
 4010080:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00c0);
 4010084:	00c03004 	movi	r3,192
 4010088:	00828034 	movhi	r2,2560
 401008c:	10843504 	addi	r2,r2,4308
 4010090:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00ED); //Power on sequence control
 4010094:	00c03b44 	movi	r3,237
 4010098:	00828034 	movhi	r2,2560
 401009c:	10843404 	addi	r2,r2,4304
 40100a0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0064);
 40100a4:	00c01904 	movi	r3,100
 40100a8:	00828034 	movhi	r2,2560
 40100ac:	10843504 	addi	r2,r2,4308
 40100b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0003);
 40100b4:	00c000c4 	movi	r3,3
 40100b8:	00828034 	movhi	r2,2560
 40100bc:	10843504 	addi	r2,r2,4308
 40100c0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X0012);
 40100c4:	00c00484 	movi	r3,18
 40100c8:	00828034 	movhi	r2,2560
 40100cc:	10843504 	addi	r2,r2,4308
 40100d0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X0081);
 40100d4:	00c02044 	movi	r3,129
 40100d8:	00828034 	movhi	r2,2560
 40100dc:	10843504 	addi	r2,r2,4308
 40100e0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00E8); // driver timing control A
 40100e4:	00c03a04 	movi	r3,232
 40100e8:	00828034 	movhi	r2,2560
 40100ec:	10843404 	addi	r2,r2,4304
 40100f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0085);
 40100f4:	00c02144 	movi	r3,133
 40100f8:	00828034 	movhi	r2,2560
 40100fc:	10843504 	addi	r2,r2,4308
 4010100:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 4010104:	00c00044 	movi	r3,1
 4010108:	00828034 	movhi	r2,2560
 401010c:	10843504 	addi	r2,r2,4308
 4010110:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00798);
 4010114:	00c1e604 	movi	r3,1944
 4010118:	00828034 	movhi	r2,2560
 401011c:	10843504 	addi	r2,r2,4308
 4010120:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00CB);	//Power control A
 4010124:	00c032c4 	movi	r3,203
 4010128:	00828034 	movhi	r2,2560
 401012c:	10843404 	addi	r2,r2,4304
 4010130:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0039);
 4010134:	00c00e44 	movi	r3,57
 4010138:	00828034 	movhi	r2,2560
 401013c:	10843504 	addi	r2,r2,4308
 4010140:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x002C);
 4010144:	00c00b04 	movi	r3,44
 4010148:	00828034 	movhi	r2,2560
 401014c:	10843504 	addi	r2,r2,4308
 4010150:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010154:	0007883a 	mov	r3,zero
 4010158:	00828034 	movhi	r2,2560
 401015c:	10843504 	addi	r2,r2,4308
 4010160:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0034);
 4010164:	00c00d04 	movi	r3,52
 4010168:	00828034 	movhi	r2,2560
 401016c:	10843504 	addi	r2,r2,4308
 4010170:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0002);
 4010174:	00c00084 	movi	r3,2
 4010178:	00828034 	movhi	r2,2560
 401017c:	10843504 	addi	r2,r2,4308
 4010180:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00F7); //Pump ratio
 4010184:	00c03dc4 	movi	r3,247
 4010188:	00828034 	movhi	r2,2560
 401018c:	10843404 	addi	r2,r2,4304
 4010190:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0020);
 4010194:	00c00804 	movi	r3,32
 4010198:	00828034 	movhi	r2,2560
 401019c:	10843504 	addi	r2,r2,4308
 40101a0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00EA); // driver timing control B
 40101a4:	00c03a84 	movi	r3,234
 40101a8:	00828034 	movhi	r2,2560
 40101ac:	10843404 	addi	r2,r2,4304
 40101b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40101b4:	0007883a 	mov	r3,zero
 40101b8:	00828034 	movhi	r2,2560
 40101bc:	10843504 	addi	r2,r2,4308
 40101c0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40101c4:	0007883a 	mov	r3,zero
 40101c8:	00828034 	movhi	r2,2560
 40101cc:	10843504 	addi	r2,r2,4308
 40101d0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00B1); //Frame Rate Control
 40101d4:	00c02c44 	movi	r3,177
 40101d8:	00828034 	movhi	r2,2560
 40101dc:	10843404 	addi	r2,r2,4304
 40101e0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40101e4:	0007883a 	mov	r3,zero
 40101e8:	00828034 	movhi	r2,2560
 40101ec:	10843504 	addi	r2,r2,4308
 40101f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x001b);
 40101f4:	00c006c4 	movi	r3,27
 40101f8:	00828034 	movhi	r2,2560
 40101fc:	10843504 	addi	r2,r2,4308
 4010200:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00B6); //Display Function Control
 4010204:	00c02d84 	movi	r3,182
 4010208:	00828034 	movhi	r2,2560
 401020c:	10843404 	addi	r2,r2,4304
 4010210:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000A);
 4010214:	00c00284 	movi	r3,10
 4010218:	00828034 	movhi	r2,2560
 401021c:	10843504 	addi	r2,r2,4308
 4010220:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00A2);
 4010224:	00c02884 	movi	r3,162
 4010228:	00828034 	movhi	r2,2560
 401022c:	10843504 	addi	r2,r2,4308
 4010230:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C0); //Power control
 4010234:	00c03004 	movi	r3,192
 4010238:	00828034 	movhi	r2,2560
 401023c:	10843404 	addi	r2,r2,4304
 4010240:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0005);  //VRH[5:0]
 4010244:	00c00144 	movi	r3,5
 4010248:	00828034 	movhi	r2,2560
 401024c:	10843504 	addi	r2,r2,4308
 4010250:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C1); //Power control
 4010254:	00c03044 	movi	r3,193
 4010258:	00828034 	movhi	r2,2560
 401025c:	10843404 	addi	r2,r2,4304
 4010260:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0011);  //SAP[2:0];BT[3:0]
 4010264:	00c00444 	movi	r3,17
 4010268:	00828034 	movhi	r2,2560
 401026c:	10843504 	addi	r2,r2,4308
 4010270:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C5); //VCM control
 4010274:	00c03144 	movi	r3,197
 4010278:	00828034 	movhi	r2,2560
 401027c:	10843404 	addi	r2,r2,4304
 4010280:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0045);  //3F
 4010284:	00c01144 	movi	r3,69
 4010288:	00828034 	movhi	r2,2560
 401028c:	10843504 	addi	r2,r2,4308
 4010290:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0045);  //3C
 4010294:	00c01144 	movi	r3,69
 4010298:	00828034 	movhi	r2,2560
 401029c:	10843504 	addi	r2,r2,4308
 40102a0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C7); //VCM control2
 40102a4:	00c031c4 	movi	r3,199
 40102a8:	00828034 	movhi	r2,2560
 40102ac:	10843404 	addi	r2,r2,4304
 40102b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00a2);
 40102b4:	00c02884 	movi	r3,162
 40102b8:	00828034 	movhi	r2,2560
 40102bc:	10843504 	addi	r2,r2,4308
 40102c0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0036); // Memory Access Control
 40102c4:	00c00d84 	movi	r3,54
 40102c8:	00828034 	movhi	r2,2560
 40102cc:	10843404 	addi	r2,r2,4304
 40102d0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);//48
 40102d4:	00c00204 	movi	r3,8
 40102d8:	00828034 	movhi	r2,2560
 40102dc:	10843504 	addi	r2,r2,4308
 40102e0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00F2);  // 3Gamma Function Disable
 40102e4:	00c03c84 	movi	r3,242
 40102e8:	00828034 	movhi	r2,2560
 40102ec:	10843404 	addi	r2,r2,4304
 40102f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40102f4:	0007883a 	mov	r3,zero
 40102f8:	00828034 	movhi	r2,2560
 40102fc:	10843504 	addi	r2,r2,4308
 4010300:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0026);  //Gamma curve selected
 4010304:	00c00984 	movi	r3,38
 4010308:	00828034 	movhi	r2,2560
 401030c:	10843404 	addi	r2,r2,4304
 4010310:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 4010314:	00c00044 	movi	r3,1
 4010318:	00828034 	movhi	r2,2560
 401031c:	10843504 	addi	r2,r2,4308
 4010320:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00E0);  //Set Gamma
 4010324:	00c03804 	movi	r3,224
 4010328:	00828034 	movhi	r2,2560
 401032c:	10843404 	addi	r2,r2,4304
 4010330:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000F);
 4010334:	00c003c4 	movi	r3,15
 4010338:	00828034 	movhi	r2,2560
 401033c:	10843504 	addi	r2,r2,4308
 4010340:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0026);
 4010344:	00c00984 	movi	r3,38
 4010348:	00828034 	movhi	r2,2560
 401034c:	10843504 	addi	r2,r2,4308
 4010350:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0024);
 4010354:	00c00904 	movi	r3,36
 4010358:	00828034 	movhi	r2,2560
 401035c:	10843504 	addi	r2,r2,4308
 4010360:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000b);
 4010364:	00c002c4 	movi	r3,11
 4010368:	00828034 	movhi	r2,2560
 401036c:	10843504 	addi	r2,r2,4308
 4010370:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000E);
 4010374:	00c00384 	movi	r3,14
 4010378:	00828034 	movhi	r2,2560
 401037c:	10843504 	addi	r2,r2,4308
 4010380:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);
 4010384:	00c00204 	movi	r3,8
 4010388:	00828034 	movhi	r2,2560
 401038c:	10843504 	addi	r2,r2,4308
 4010390:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x004b);
 4010394:	00c012c4 	movi	r3,75
 4010398:	00828034 	movhi	r2,2560
 401039c:	10843504 	addi	r2,r2,4308
 40103a0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00a8);
 40103a4:	00c02a04 	movi	r3,168
 40103a8:	00828034 	movhi	r2,2560
 40103ac:	10843504 	addi	r2,r2,4308
 40103b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x003b);
 40103b4:	00c00ec4 	movi	r3,59
 40103b8:	00828034 	movhi	r2,2560
 40103bc:	10843504 	addi	r2,r2,4308
 40103c0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000a);
 40103c4:	00c00284 	movi	r3,10
 40103c8:	00828034 	movhi	r2,2560
 40103cc:	10843504 	addi	r2,r2,4308
 40103d0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0014);
 40103d4:	00c00504 	movi	r3,20
 40103d8:	00828034 	movhi	r2,2560
 40103dc:	10843504 	addi	r2,r2,4308
 40103e0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0006);
 40103e4:	00c00184 	movi	r3,6
 40103e8:	00828034 	movhi	r2,2560
 40103ec:	10843504 	addi	r2,r2,4308
 40103f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0010);
 40103f4:	00c00404 	movi	r3,16
 40103f8:	00828034 	movhi	r2,2560
 40103fc:	10843504 	addi	r2,r2,4308
 4010400:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0009);
 4010404:	00c00244 	movi	r3,9
 4010408:	00828034 	movhi	r2,2560
 401040c:	10843504 	addi	r2,r2,4308
 4010410:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010414:	0007883a 	mov	r3,zero
 4010418:	00828034 	movhi	r2,2560
 401041c:	10843504 	addi	r2,r2,4308
 4010420:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0X00E1);  //Set Gamma
 4010424:	00c03844 	movi	r3,225
 4010428:	00828034 	movhi	r2,2560
 401042c:	10843404 	addi	r2,r2,4304
 4010430:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010434:	0007883a 	mov	r3,zero
 4010438:	00828034 	movhi	r2,2560
 401043c:	10843504 	addi	r2,r2,4308
 4010440:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x001c);
 4010444:	00c00704 	movi	r3,28
 4010448:	00828034 	movhi	r2,2560
 401044c:	10843504 	addi	r2,r2,4308
 4010450:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0020);
 4010454:	00c00804 	movi	r3,32
 4010458:	00828034 	movhi	r2,2560
 401045c:	10843504 	addi	r2,r2,4308
 4010460:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0004);
 4010464:	00c00104 	movi	r3,4
 4010468:	00828034 	movhi	r2,2560
 401046c:	10843504 	addi	r2,r2,4308
 4010470:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0010);
 4010474:	00c00404 	movi	r3,16
 4010478:	00828034 	movhi	r2,2560
 401047c:	10843504 	addi	r2,r2,4308
 4010480:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);
 4010484:	00c00204 	movi	r3,8
 4010488:	00828034 	movhi	r2,2560
 401048c:	10843504 	addi	r2,r2,4308
 4010490:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0034);
 4010494:	00c00d04 	movi	r3,52
 4010498:	00828034 	movhi	r2,2560
 401049c:	10843504 	addi	r2,r2,4308
 40104a0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0047);
 40104a4:	00c011c4 	movi	r3,71
 40104a8:	00828034 	movhi	r2,2560
 40104ac:	10843504 	addi	r2,r2,4308
 40104b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0044);
 40104b4:	00c01104 	movi	r3,68
 40104b8:	00828034 	movhi	r2,2560
 40104bc:	10843504 	addi	r2,r2,4308
 40104c0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0005);
 40104c4:	00c00144 	movi	r3,5
 40104c8:	00828034 	movhi	r2,2560
 40104cc:	10843504 	addi	r2,r2,4308
 40104d0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000b);
 40104d4:	00c002c4 	movi	r3,11
 40104d8:	00828034 	movhi	r2,2560
 40104dc:	10843504 	addi	r2,r2,4308
 40104e0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0009);
 40104e4:	00c00244 	movi	r3,9
 40104e8:	00828034 	movhi	r2,2560
 40104ec:	10843504 	addi	r2,r2,4308
 40104f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x002f);
 40104f4:	00c00bc4 	movi	r3,47
 40104f8:	00828034 	movhi	r2,2560
 40104fc:	10843504 	addi	r2,r2,4308
 4010500:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0036);
 4010504:	00c00d84 	movi	r3,54
 4010508:	00828034 	movhi	r2,2560
 401050c:	10843504 	addi	r2,r2,4308
 4010510:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000f);
 4010514:	00c003c4 	movi	r3,15
 4010518:	00828034 	movhi	r2,2560
 401051c:	10843504 	addi	r2,r2,4308
 4010520:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A); //colum address set
 4010524:	00c00a84 	movi	r3,42
 4010528:	00828034 	movhi	r2,2560
 401052c:	10843404 	addi	r2,r2,4304
 4010530:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010534:	0007883a 	mov	r3,zero
 4010538:	00828034 	movhi	r2,2560
 401053c:	10843504 	addi	r2,r2,4308
 4010540:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010544:	0007883a 	mov	r3,zero
 4010548:	00828034 	movhi	r2,2560
 401054c:	10843504 	addi	r2,r2,4308
 4010550:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010554:	0007883a 	mov	r3,zero
 4010558:	00828034 	movhi	r2,2560
 401055c:	10843504 	addi	r2,r2,4308
 4010560:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00ef);
 4010564:	00c03bc4 	movi	r3,239
 4010568:	00828034 	movhi	r2,2560
 401056c:	10843504 	addi	r2,r2,4308
 4010570:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 4010574:	00c00ac4 	movi	r3,43
 4010578:	00828034 	movhi	r2,2560
 401057c:	10843404 	addi	r2,r2,4304
 4010580:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010584:	0007883a 	mov	r3,zero
 4010588:	00828034 	movhi	r2,2560
 401058c:	10843504 	addi	r2,r2,4308
 4010590:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010594:	0007883a 	mov	r3,zero
 4010598:	00828034 	movhi	r2,2560
 401059c:	10843504 	addi	r2,r2,4308
 40105a0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 40105a4:	00c00044 	movi	r3,1
 40105a8:	00828034 	movhi	r2,2560
 40105ac:	10843504 	addi	r2,r2,4308
 40105b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x003f);
 40105b4:	00c00fc4 	movi	r3,63
 40105b8:	00828034 	movhi	r2,2560
 40105bc:	10843504 	addi	r2,r2,4308
 40105c0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x003A);
 40105c4:	00c00e84 	movi	r3,58
 40105c8:	00828034 	movhi	r2,2560
 40105cc:	10843404 	addi	r2,r2,4304
 40105d0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0055);
 40105d4:	00c01544 	movi	r3,85
 40105d8:	00828034 	movhi	r2,2560
 40105dc:	10843504 	addi	r2,r2,4308
 40105e0:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00f6);
 40105e4:	00c03d84 	movi	r3,246
 40105e8:	00828034 	movhi	r2,2560
 40105ec:	10843404 	addi	r2,r2,4304
 40105f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 40105f4:	00c00044 	movi	r3,1
 40105f8:	00828034 	movhi	r2,2560
 40105fc:	10843504 	addi	r2,r2,4308
 4010600:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0030);
 4010604:	00c00c04 	movi	r3,48
 4010608:	00828034 	movhi	r2,2560
 401060c:	10843504 	addi	r2,r2,4308
 4010610:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010614:	0007883a 	mov	r3,zero
 4010618:	00828034 	movhi	r2,2560
 401061c:	10843504 	addi	r2,r2,4308
 4010620:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0029);  //display on
 4010624:	00c00a44 	movi	r3,41
 4010628:	00828034 	movhi	r2,2560
 401062c:	10843404 	addi	r2,r2,4304
 4010630:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002c);  // 0x2C
 4010634:	00c00b04 	movi	r3,44
 4010638:	00828034 	movhi	r2,2560
 401063c:	10843404 	addi	r2,r2,4304
 4010640:	10c00035 	stwio	r3,0(r2)


}
 4010644:	0001883a 	nop
 4010648:	e037883a 	mov	sp,fp
 401064c:	dfc00117 	ldw	ra,4(sp)
 4010650:	df000017 	ldw	fp,0(sp)
 4010654:	dec00204 	addi	sp,sp,8
 4010658:	f800283a 	ret

0401065c <set_glissando_delay>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void set_glissando_delay(alt_u8 delay)
{
 401065c:	defffe04 	addi	sp,sp,-8
 4010660:	df000115 	stw	fp,4(sp)
 4010664:	df000104 	addi	fp,sp,4
 4010668:	2005883a 	mov	r2,r4
 401066c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_PITCH_GENERATION_AVALON_PITCH_WR_DELAY(PITCH_GENERATION_0_BASE,(alt_u32)delay);
 4010670:	e0ffff03 	ldbu	r3,-4(fp)
 4010674:	00828034 	movhi	r2,2560
 4010678:	10841e04 	addi	r2,r2,4216
 401067c:	10c00035 	stwio	r3,0(r2)
}
 4010680:	0001883a 	nop
 4010684:	e037883a 	mov	sp,fp
 4010688:	df000017 	ldw	fp,0(sp)
 401068c:	dec00104 	addi	sp,sp,4
 4010690:	f800283a 	ret

04010694 <set_cntrl_reg>:


void set_cntrl_reg(alt_u8 cntrl_reg)
{
 4010694:	defffe04 	addi	sp,sp,-8
 4010698:	df000115 	stw	fp,4(sp)
 401069c:	df000104 	addi	fp,sp,4
 40106a0:	2005883a 	mov	r2,r4
 40106a4:	e0bfff05 	stb	r2,-4(fp)
	IOWR_PITCH_GENERATION_AVALON_PITCH_WR_CNTRL(PITCH_GENERATION_0_BASE,(alt_u32)cntrl_reg);
 40106a8:	e0ffff03 	ldbu	r3,-4(fp)
 40106ac:	00828034 	movhi	r2,2560
 40106b0:	10841c04 	addi	r2,r2,4208
 40106b4:	10c00035 	stwio	r3,0(r2)
}
 40106b8:	0001883a 	nop
 40106bc:	e037883a 	mov	sp,fp
 40106c0:	df000017 	ldw	fp,0(sp)
 40106c4:	dec00104 	addi	sp,sp,4
 40106c8:	f800283a 	ret

040106cc <set_calibration_pitch>:

void set_calibration_pitch(alt_u8 cntrl_reg_pitch)
{
 40106cc:	defffe04 	addi	sp,sp,-8
 40106d0:	df000115 	stw	fp,4(sp)
 40106d4:	df000104 	addi	fp,sp,4
 40106d8:	2005883a 	mov	r2,r4
 40106dc:	e0bfff05 	stb	r2,-4(fp)
	IOWR_PITCH_GENERATION_AVALON_PITCH_WR_CNTRL(PITCH_GENERATION_0_BASE,(alt_u32) cntrl_reg_pitch);
 40106e0:	e0ffff03 	ldbu	r3,-4(fp)
 40106e4:	00828034 	movhi	r2,2560
 40106e8:	10841c04 	addi	r2,r2,4208
 40106ec:	10c00035 	stwio	r3,0(r2)
}
 40106f0:	0001883a 	nop
 40106f4:	e037883a 	mov	sp,fp
 40106f8:	df000017 	ldw	fp,0(sp)
 40106fc:	dec00104 	addi	sp,sp,4
 4010700:	f800283a 	ret

04010704 <done_calibration_pitch>:

alt_u32 done_calibration_pitch(void)
{
 4010704:	deffff04 	addi	sp,sp,-4
 4010708:	df000015 	stw	fp,0(sp)
 401070c:	d839883a 	mov	fp,sp
	return IORD_PITCH_GENERATION_AVALON_PITCH_RD_CNTRL(PITCH_GENERATION_0_BASE) & 2;
 4010710:	00828034 	movhi	r2,2560
 4010714:	10841c04 	addi	r2,r2,4208
 4010718:	10800037 	ldwio	r2,0(r2)
 401071c:	1080008c 	andi	r2,r2,2
}
 4010720:	e037883a 	mov	sp,fp
 4010724:	df000017 	ldw	fp,0(sp)
 4010728:	dec00104 	addi	sp,sp,4
 401072c:	f800283a 	ret

04010730 <read_freq_pitch>:


alt_u32 read_freq_pitch(void)
{
 4010730:	deffff04 	addi	sp,sp,-4
 4010734:	df000015 	stw	fp,0(sp)
 4010738:	d839883a 	mov	fp,sp
	return IORD_PITCH_GENERATION_AVALON_PITCH_RD_freq(PITCH_GENERATION_0_BASE);
 401073c:	00828034 	movhi	r2,2560
 4010740:	10841d04 	addi	r2,r2,4212
 4010744:	10800037 	ldwio	r2,0(r2)
}
 4010748:	e037883a 	mov	sp,fp
 401074c:	df000017 	ldw	fp,0(sp)
 4010750:	dec00104 	addi	sp,sp,4
 4010754:	f800283a 	ret

04010758 <read_delay_gli>:

alt_u32 read_delay_gli(void)
{
 4010758:	deffff04 	addi	sp,sp,-4
 401075c:	df000015 	stw	fp,0(sp)
 4010760:	d839883a 	mov	fp,sp
	return IORD_PITCH_GENERATION_AVALON_PITCH_RD_gli_delay(PITCH_GENERATION_0_BASE);
 4010764:	00828034 	movhi	r2,2560
 4010768:	10841e04 	addi	r2,r2,4216
 401076c:	10800037 	ldwio	r2,0(r2)
}
 4010770:	e037883a 	mov	sp,fp
 4010774:	df000017 	ldw	fp,0(sp)
 4010778:	dec00104 	addi	sp,sp,4
 401077c:	f800283a 	ret

04010780 <get_pixel_pitch_accuracy>:
alt_16 get_pixel_pitch_accuracy(alt_u8 penta_on_off, alt_u32 tmp)
{
 4010780:	deff2704 	addi	sp,sp,-868
 4010784:	dfc0d815 	stw	ra,864(sp)
 4010788:	df00d715 	stw	fp,860(sp)
 401078c:	df00d704 	addi	fp,sp,860
 4010790:	2005883a 	mov	r2,r4
 4010794:	e17fff15 	stw	r5,-4(fp)
 4010798:	e0bffe05 	stb	r2,-8(fp)
	alt_32 freq_diff_calc = 0;
 401079c:	e03f2915 	stw	zero,-860(fp)
    alt_32  freq;
	alt_32	index;
	freq = (alt_32)(tmp & 0xFFFF);
 40107a0:	e0bfff17 	ldw	r2,-4(fp)
 40107a4:	10bfffcc 	andi	r2,r2,65535
 40107a8:	e0bf2a15 	stw	r2,-856(fp)
	index = (alt_32)((tmp & 0xFC000000)>>26);
 40107ac:	e0bfff17 	ldw	r2,-4(fp)
 40107b0:	1004d6ba 	srli	r2,r2,26
 40107b4:	e0bf2b15 	stw	r2,-852(fp)
	alt_32 freq_diff [49][2] = {
 40107b8:	00810074 	movhi	r2,1025
 40107bc:	10954004 	addi	r2,r2,21760
 40107c0:	e0ff2c04 	addi	r3,fp,-848
 40107c4:	1009883a 	mov	r4,r2
 40107c8:	00806204 	movi	r2,392
 40107cc:	100d883a 	mov	r6,r2
 40107d0:	200b883a 	mov	r5,r4
 40107d4:	1809883a 	mov	r4,r3
 40107d8:	40023480 	call	4002348 <memcpy>
			{1603, 1650},
			{1699, 1748},
			{1799, 1853},
			{1906, 1963}
	};
	alt_32 freq_int [49] = {
 40107dc:	00810074 	movhi	r2,1025
 40107e0:	1095a204 	addi	r2,r2,22152
 40107e4:	e0ff8e04 	addi	r3,fp,-456
 40107e8:	1009883a 	mov	r4,r2
 40107ec:	00803104 	movi	r2,196
 40107f0:	100d883a 	mov	r6,r2
 40107f4:	200b883a 	mov	r5,r4
 40107f8:	1809883a 	mov	r4,r3
 40107fc:	40023480 	call	4002348 <memcpy>
								4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902, 8372, 8870, 9397, 9956, 10548, 11175, 11840, 12544, 13290, 14080, 14917, 15804, 16744, 17740, 18795, 19912, 21096, 22351, 23680, 25088, 26579, 28160, 29834, 31609, 33488, 35479, 37589, 39824, 42192, 44701, 47359, 50175, 53159, 56320, 59669, 63217, 66976
	};

	alt_32 freq_penta [] = {
 4010800:	00810074 	movhi	r2,1025
 4010804:	1095d304 	addi	r2,r2,22348
 4010808:	e0ffbf04 	addi	r3,fp,-260
 401080c:	1009883a 	mov	r4,r2
 4010810:	00801504 	movi	r2,84
 4010814:	100d883a 	mov	r6,r2
 4010818:	200b883a 	mov	r5,r4
 401081c:	1809883a 	mov	r4,r3
 4010820:	40023480 	call	4002348 <memcpy>
								4435, 4978, 5920, 6645, 7459, 8870, 9956, 11840, 13290, 14917, 17740, 19912, 23680, 26579, 29834, 35479, 39824, 47359, 53159, 59669, 70959
	};

	alt_32 freq_diff_penta [21][2] = {
 4010824:	00810074 	movhi	r2,1025
 4010828:	1095e804 	addi	r2,r2,22432
 401082c:	e0ffd404 	addi	r3,fp,-176
 4010830:	1009883a 	mov	r4,r2
 4010834:	00802a04 	movi	r2,168
 4010838:	100d883a 	mov	r6,r2
 401083c:	200b883a 	mov	r5,r4
 4010840:	1809883a 	mov	r4,r3
 4010844:	40023480 	call	4002348 <memcpy>
											{3349, 5400},
											{5889, 4219}

	};

	if (penta_on_off ==1 ){
 4010848:	e0bffe03 	ldbu	r2,-8(fp)
 401084c:	10800058 	cmpnei	r2,r2,1
 4010850:	1000201e 	bne	r2,zero,40108d4 <get_pixel_pitch_accuracy+0x154>
		freq_diff_calc = freq - freq_penta[index];
 4010854:	e0bf2b17 	ldw	r2,-852(fp)
 4010858:	1085883a 	add	r2,r2,r2
 401085c:	1085883a 	add	r2,r2,r2
 4010860:	e0ff2904 	addi	r3,fp,-860
 4010864:	1885883a 	add	r2,r3,r2
 4010868:	10809604 	addi	r2,r2,600
 401086c:	10800017 	ldw	r2,0(r2)
 4010870:	e0ff2a17 	ldw	r3,-856(fp)
 4010874:	1885c83a 	sub	r2,r3,r2
 4010878:	e0bf2915 	stw	r2,-860(fp)
			if(freq_diff_calc < 0){
 401087c:	e0bf2917 	ldw	r2,-860(fp)
 4010880:	10000a0e 	bge	r2,zero,40108ac <get_pixel_pitch_accuracy+0x12c>
				return ((150*freq_diff_calc)/freq_diff_penta[index][0]);
 4010884:	e0bf2917 	ldw	r2,-860(fp)
 4010888:	10c025a4 	muli	r3,r2,150
 401088c:	e0bf2b17 	ldw	r2,-852(fp)
 4010890:	100490fa 	slli	r2,r2,3
 4010894:	e13f2904 	addi	r4,fp,-860
 4010898:	2085883a 	add	r2,r4,r2
 401089c:	1080ab04 	addi	r2,r2,684
 40108a0:	10800017 	ldw	r2,0(r2)
 40108a4:	1885283a 	div	r2,r3,r2
 40108a8:	00002906 	br	4010950 <get_pixel_pitch_accuracy+0x1d0>
			}else{
				return ((150*freq_diff_calc)/freq_diff_penta[index][1]);
 40108ac:	e0bf2917 	ldw	r2,-860(fp)
 40108b0:	10c025a4 	muli	r3,r2,150
 40108b4:	e0bf2b17 	ldw	r2,-852(fp)
 40108b8:	100490fa 	slli	r2,r2,3
 40108bc:	e13f2904 	addi	r4,fp,-860
 40108c0:	2085883a 	add	r2,r4,r2
 40108c4:	1080ac04 	addi	r2,r2,688
 40108c8:	10800017 	ldw	r2,0(r2)
 40108cc:	1885283a 	div	r2,r3,r2
 40108d0:	00001f06 	br	4010950 <get_pixel_pitch_accuracy+0x1d0>
			}
	}else{
		freq_diff_calc = freq - freq_int[index];
 40108d4:	e0bf2b17 	ldw	r2,-852(fp)
 40108d8:	1085883a 	add	r2,r2,r2
 40108dc:	1085883a 	add	r2,r2,r2
 40108e0:	e0ff2904 	addi	r3,fp,-860
 40108e4:	1885883a 	add	r2,r3,r2
 40108e8:	10806504 	addi	r2,r2,404
 40108ec:	10800017 	ldw	r2,0(r2)
 40108f0:	e0ff2a17 	ldw	r3,-856(fp)
 40108f4:	1885c83a 	sub	r2,r3,r2
 40108f8:	e0bf2915 	stw	r2,-860(fp)
			if(freq_diff_calc < 0){
 40108fc:	e0bf2917 	ldw	r2,-860(fp)
 4010900:	10000a0e 	bge	r2,zero,401092c <get_pixel_pitch_accuracy+0x1ac>
				return ((150*freq_diff_calc)/freq_diff[index][0]);
 4010904:	e0bf2917 	ldw	r2,-860(fp)
 4010908:	10c025a4 	muli	r3,r2,150
 401090c:	e0bf2b17 	ldw	r2,-852(fp)
 4010910:	100490fa 	slli	r2,r2,3
 4010914:	e13f2904 	addi	r4,fp,-860
 4010918:	2085883a 	add	r2,r4,r2
 401091c:	10800304 	addi	r2,r2,12
 4010920:	10800017 	ldw	r2,0(r2)
 4010924:	1885283a 	div	r2,r3,r2
 4010928:	00000906 	br	4010950 <get_pixel_pitch_accuracy+0x1d0>
			}else{
				return ((150*freq_diff_calc)/freq_diff[index][1]);
 401092c:	e0bf2917 	ldw	r2,-860(fp)
 4010930:	10c025a4 	muli	r3,r2,150
 4010934:	e0bf2b17 	ldw	r2,-852(fp)
 4010938:	100490fa 	slli	r2,r2,3
 401093c:	e13f2904 	addi	r4,fp,-860
 4010940:	2085883a 	add	r2,r4,r2
 4010944:	10800404 	addi	r2,r2,16
 4010948:	10800017 	ldw	r2,0(r2)
 401094c:	1885283a 	div	r2,r3,r2
			}
	}

}
 4010950:	e037883a 	mov	sp,fp
 4010954:	dfc00117 	ldw	ra,4(sp)
 4010958:	df000017 	ldw	fp,0(sp)
 401095c:	dec00204 	addi	sp,sp,8
 4010960:	f800283a 	ret

04010964 <set_calibration_vol_gen>:
 * Return  : none
 *--------------------------------------------------*/


void set_calibration_vol_gen(alt_u8 cntrl_reg_vol)
{
 4010964:	defffe04 	addi	sp,sp,-8
 4010968:	df000115 	stw	fp,4(sp)
 401096c:	df000104 	addi	fp,sp,4
 4010970:	2005883a 	mov	r2,r4
 4010974:	e0bfff05 	stb	r2,-4(fp)
	IOWR_VOLUME_GENERATION_AVALON_VOL_WR_CNTRL(VOLUME_GENERATION_0_BASE,(alt_u32) cntrl_reg_vol);
 4010978:	e0ffff03 	ldbu	r3,-4(fp)
 401097c:	00828034 	movhi	r2,2560
 4010980:	10841804 	addi	r2,r2,4192
 4010984:	10c00035 	stwio	r3,0(r2)
}
 4010988:	0001883a 	nop
 401098c:	e037883a 	mov	sp,fp
 4010990:	df000017 	ldw	fp,0(sp)
 4010994:	dec00104 	addi	sp,sp,4
 4010998:	f800283a 	ret

0401099c <done_calibration_vol_gen>:

alt_u32 done_calibration_vol_gen(void)
{
 401099c:	deffff04 	addi	sp,sp,-4
 40109a0:	df000015 	stw	fp,0(sp)
 40109a4:	d839883a 	mov	fp,sp
	return IORD_VOLUME_GENERATION_AVALON_VOL_RD_CNTRL(VOLUME_GENERATION_0_BASE) & 2;
 40109a8:	00828034 	movhi	r2,2560
 40109ac:	10841804 	addi	r2,r2,4192
 40109b0:	10800037 	ldwio	r2,0(r2)
 40109b4:	1080008c 	andi	r2,r2,2
}
 40109b8:	e037883a 	mov	sp,fp
 40109bc:	df000017 	ldw	fp,0(sp)
 40109c0:	dec00104 	addi	sp,sp,4
 40109c4:	f800283a 	ret

040109c8 <set_vol_gen>:

void set_vol_gen(alt_u8 vol_bar)
{
 40109c8:	defffe04 	addi	sp,sp,-8
 40109cc:	df000115 	stw	fp,4(sp)
 40109d0:	df000104 	addi	fp,sp,4
 40109d4:	2005883a 	mov	r2,r4
 40109d8:	e0bfff05 	stb	r2,-4(fp)
	IOWR_VOLUME_GENERATION_AVALON_VOL_WR_CNTRL(VOLUME_GENERATION_0_BASE,(alt_u32)vol_bar);
 40109dc:	e0ffff03 	ldbu	r3,-4(fp)
 40109e0:	00828034 	movhi	r2,2560
 40109e4:	10841804 	addi	r2,r2,4192
 40109e8:	10c00035 	stwio	r3,0(r2)
}
 40109ec:	0001883a 	nop
 40109f0:	e037883a 	mov	sp,fp
 40109f4:	df000017 	ldw	fp,0(sp)
 40109f8:	dec00104 	addi	sp,sp,4
 40109fc:	f800283a 	ret

04010a00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4010a00:	defffa04 	addi	sp,sp,-24
 4010a04:	dfc00515 	stw	ra,20(sp)
 4010a08:	df000415 	stw	fp,16(sp)
 4010a0c:	df000404 	addi	fp,sp,16
 4010a10:	e13ffd15 	stw	r4,-12(fp)
 4010a14:	e17ffe15 	stw	r5,-8(fp)
 4010a18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010a1c:	e0bffd17 	ldw	r2,-12(fp)
 4010a20:	10800017 	ldw	r2,0(r2)
 4010a24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4010a28:	e0bffc17 	ldw	r2,-16(fp)
 4010a2c:	10c00a04 	addi	r3,r2,40
 4010a30:	e0bffd17 	ldw	r2,-12(fp)
 4010a34:	10800217 	ldw	r2,8(r2)
 4010a38:	100f883a 	mov	r7,r2
 4010a3c:	e1bfff17 	ldw	r6,-4(fp)
 4010a40:	e17ffe17 	ldw	r5,-8(fp)
 4010a44:	1809883a 	mov	r4,r3
 4010a48:	40110280 	call	4011028 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4010a4c:	e037883a 	mov	sp,fp
 4010a50:	dfc00117 	ldw	ra,4(sp)
 4010a54:	df000017 	ldw	fp,0(sp)
 4010a58:	dec00204 	addi	sp,sp,8
 4010a5c:	f800283a 	ret

04010a60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4010a60:	defffa04 	addi	sp,sp,-24
 4010a64:	dfc00515 	stw	ra,20(sp)
 4010a68:	df000415 	stw	fp,16(sp)
 4010a6c:	df000404 	addi	fp,sp,16
 4010a70:	e13ffd15 	stw	r4,-12(fp)
 4010a74:	e17ffe15 	stw	r5,-8(fp)
 4010a78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010a7c:	e0bffd17 	ldw	r2,-12(fp)
 4010a80:	10800017 	ldw	r2,0(r2)
 4010a84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4010a88:	e0bffc17 	ldw	r2,-16(fp)
 4010a8c:	10c00a04 	addi	r3,r2,40
 4010a90:	e0bffd17 	ldw	r2,-12(fp)
 4010a94:	10800217 	ldw	r2,8(r2)
 4010a98:	100f883a 	mov	r7,r2
 4010a9c:	e1bfff17 	ldw	r6,-4(fp)
 4010aa0:	e17ffe17 	ldw	r5,-8(fp)
 4010aa4:	1809883a 	mov	r4,r3
 4010aa8:	40112440 	call	4011244 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4010aac:	e037883a 	mov	sp,fp
 4010ab0:	dfc00117 	ldw	ra,4(sp)
 4010ab4:	df000017 	ldw	fp,0(sp)
 4010ab8:	dec00204 	addi	sp,sp,8
 4010abc:	f800283a 	ret

04010ac0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4010ac0:	defffc04 	addi	sp,sp,-16
 4010ac4:	dfc00315 	stw	ra,12(sp)
 4010ac8:	df000215 	stw	fp,8(sp)
 4010acc:	df000204 	addi	fp,sp,8
 4010ad0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010ad4:	e0bfff17 	ldw	r2,-4(fp)
 4010ad8:	10800017 	ldw	r2,0(r2)
 4010adc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4010ae0:	e0bffe17 	ldw	r2,-8(fp)
 4010ae4:	10c00a04 	addi	r3,r2,40
 4010ae8:	e0bfff17 	ldw	r2,-4(fp)
 4010aec:	10800217 	ldw	r2,8(r2)
 4010af0:	100b883a 	mov	r5,r2
 4010af4:	1809883a 	mov	r4,r3
 4010af8:	4010ed00 	call	4010ed0 <altera_avalon_jtag_uart_close>
}
 4010afc:	e037883a 	mov	sp,fp
 4010b00:	dfc00117 	ldw	ra,4(sp)
 4010b04:	df000017 	ldw	fp,0(sp)
 4010b08:	dec00204 	addi	sp,sp,8
 4010b0c:	f800283a 	ret

04010b10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4010b10:	defffa04 	addi	sp,sp,-24
 4010b14:	dfc00515 	stw	ra,20(sp)
 4010b18:	df000415 	stw	fp,16(sp)
 4010b1c:	df000404 	addi	fp,sp,16
 4010b20:	e13ffd15 	stw	r4,-12(fp)
 4010b24:	e17ffe15 	stw	r5,-8(fp)
 4010b28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4010b2c:	e0bffd17 	ldw	r2,-12(fp)
 4010b30:	10800017 	ldw	r2,0(r2)
 4010b34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4010b38:	e0bffc17 	ldw	r2,-16(fp)
 4010b3c:	10800a04 	addi	r2,r2,40
 4010b40:	e1bfff17 	ldw	r6,-4(fp)
 4010b44:	e17ffe17 	ldw	r5,-8(fp)
 4010b48:	1009883a 	mov	r4,r2
 4010b4c:	4010f380 	call	4010f38 <altera_avalon_jtag_uart_ioctl>
}
 4010b50:	e037883a 	mov	sp,fp
 4010b54:	dfc00117 	ldw	ra,4(sp)
 4010b58:	df000017 	ldw	fp,0(sp)
 4010b5c:	dec00204 	addi	sp,sp,8
 4010b60:	f800283a 	ret

04010b64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4010b64:	defffa04 	addi	sp,sp,-24
 4010b68:	dfc00515 	stw	ra,20(sp)
 4010b6c:	df000415 	stw	fp,16(sp)
 4010b70:	df000404 	addi	fp,sp,16
 4010b74:	e13ffd15 	stw	r4,-12(fp)
 4010b78:	e17ffe15 	stw	r5,-8(fp)
 4010b7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4010b80:	e0bffd17 	ldw	r2,-12(fp)
 4010b84:	00c00044 	movi	r3,1
 4010b88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4010b8c:	e0bffd17 	ldw	r2,-12(fp)
 4010b90:	10800017 	ldw	r2,0(r2)
 4010b94:	10800104 	addi	r2,r2,4
 4010b98:	1007883a 	mov	r3,r2
 4010b9c:	e0bffd17 	ldw	r2,-12(fp)
 4010ba0:	10800817 	ldw	r2,32(r2)
 4010ba4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4010ba8:	e0bffe17 	ldw	r2,-8(fp)
 4010bac:	e0ffff17 	ldw	r3,-4(fp)
 4010bb0:	d8000015 	stw	zero,0(sp)
 4010bb4:	e1fffd17 	ldw	r7,-12(fp)
 4010bb8:	01810074 	movhi	r6,1025
 4010bbc:	31830904 	addi	r6,r6,3108
 4010bc0:	180b883a 	mov	r5,r3
 4010bc4:	1009883a 	mov	r4,r2
 4010bc8:	400efb80 	call	400efb8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4010bcc:	e0bffd17 	ldw	r2,-12(fp)
 4010bd0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4010bd4:	e0bffd17 	ldw	r2,-12(fp)
 4010bd8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010bdc:	d0e02317 	ldw	r3,-32628(gp)
 4010be0:	e1fffd17 	ldw	r7,-12(fp)
 4010be4:	01810074 	movhi	r6,1025
 4010be8:	31838c04 	addi	r6,r6,3632
 4010bec:	180b883a 	mov	r5,r3
 4010bf0:	1009883a 	mov	r4,r2
 4010bf4:	400ec680 	call	400ec68 <alt_alarm_start>
 4010bf8:	1000040e 	bge	r2,zero,4010c0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4010bfc:	e0fffd17 	ldw	r3,-12(fp)
 4010c00:	00a00034 	movhi	r2,32768
 4010c04:	10bfffc4 	addi	r2,r2,-1
 4010c08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4010c0c:	0001883a 	nop
 4010c10:	e037883a 	mov	sp,fp
 4010c14:	dfc00117 	ldw	ra,4(sp)
 4010c18:	df000017 	ldw	fp,0(sp)
 4010c1c:	dec00204 	addi	sp,sp,8
 4010c20:	f800283a 	ret

04010c24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4010c24:	defff804 	addi	sp,sp,-32
 4010c28:	df000715 	stw	fp,28(sp)
 4010c2c:	df000704 	addi	fp,sp,28
 4010c30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4010c34:	e0bfff17 	ldw	r2,-4(fp)
 4010c38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4010c3c:	e0bffb17 	ldw	r2,-20(fp)
 4010c40:	10800017 	ldw	r2,0(r2)
 4010c44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010c48:	e0bffc17 	ldw	r2,-16(fp)
 4010c4c:	10800104 	addi	r2,r2,4
 4010c50:	10800037 	ldwio	r2,0(r2)
 4010c54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4010c58:	e0bffd17 	ldw	r2,-12(fp)
 4010c5c:	1080c00c 	andi	r2,r2,768
 4010c60:	10006d26 	beq	r2,zero,4010e18 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4010c64:	e0bffd17 	ldw	r2,-12(fp)
 4010c68:	1080400c 	andi	r2,r2,256
 4010c6c:	10003526 	beq	r2,zero,4010d44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4010c70:	00800074 	movhi	r2,1
 4010c74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010c78:	e0bffb17 	ldw	r2,-20(fp)
 4010c7c:	10800a17 	ldw	r2,40(r2)
 4010c80:	10800044 	addi	r2,r2,1
 4010c84:	1081ffcc 	andi	r2,r2,2047
 4010c88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4010c8c:	e0bffb17 	ldw	r2,-20(fp)
 4010c90:	10c00b17 	ldw	r3,44(r2)
 4010c94:	e0bffe17 	ldw	r2,-8(fp)
 4010c98:	18801526 	beq	r3,r2,4010cf0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4010c9c:	e0bffc17 	ldw	r2,-16(fp)
 4010ca0:	10800037 	ldwio	r2,0(r2)
 4010ca4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4010ca8:	e0bff917 	ldw	r2,-28(fp)
 4010cac:	10a0000c 	andi	r2,r2,32768
 4010cb0:	10001126 	beq	r2,zero,4010cf8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4010cb4:	e0bffb17 	ldw	r2,-20(fp)
 4010cb8:	10800a17 	ldw	r2,40(r2)
 4010cbc:	e0fff917 	ldw	r3,-28(fp)
 4010cc0:	1809883a 	mov	r4,r3
 4010cc4:	e0fffb17 	ldw	r3,-20(fp)
 4010cc8:	1885883a 	add	r2,r3,r2
 4010ccc:	10800e04 	addi	r2,r2,56
 4010cd0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010cd4:	e0bffb17 	ldw	r2,-20(fp)
 4010cd8:	10800a17 	ldw	r2,40(r2)
 4010cdc:	10800044 	addi	r2,r2,1
 4010ce0:	10c1ffcc 	andi	r3,r2,2047
 4010ce4:	e0bffb17 	ldw	r2,-20(fp)
 4010ce8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4010cec:	003fe206 	br	4010c78 <__reset+0xfa820c78>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4010cf0:	0001883a 	nop
 4010cf4:	00000106 	br	4010cfc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4010cf8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4010cfc:	e0bff917 	ldw	r2,-28(fp)
 4010d00:	10bfffec 	andhi	r2,r2,65535
 4010d04:	10000f26 	beq	r2,zero,4010d44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4010d08:	e0bffb17 	ldw	r2,-20(fp)
 4010d0c:	10c00817 	ldw	r3,32(r2)
 4010d10:	00bfff84 	movi	r2,-2
 4010d14:	1886703a 	and	r3,r3,r2
 4010d18:	e0bffb17 	ldw	r2,-20(fp)
 4010d1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4010d20:	e0bffc17 	ldw	r2,-16(fp)
 4010d24:	10800104 	addi	r2,r2,4
 4010d28:	1007883a 	mov	r3,r2
 4010d2c:	e0bffb17 	ldw	r2,-20(fp)
 4010d30:	10800817 	ldw	r2,32(r2)
 4010d34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010d38:	e0bffc17 	ldw	r2,-16(fp)
 4010d3c:	10800104 	addi	r2,r2,4
 4010d40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4010d44:	e0bffd17 	ldw	r2,-12(fp)
 4010d48:	1080800c 	andi	r2,r2,512
 4010d4c:	103fbe26 	beq	r2,zero,4010c48 <__reset+0xfa820c48>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4010d50:	e0bffd17 	ldw	r2,-12(fp)
 4010d54:	1004d43a 	srli	r2,r2,16
 4010d58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4010d5c:	00001406 	br	4010db0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4010d60:	e0bffc17 	ldw	r2,-16(fp)
 4010d64:	e0fffb17 	ldw	r3,-20(fp)
 4010d68:	18c00d17 	ldw	r3,52(r3)
 4010d6c:	e13ffb17 	ldw	r4,-20(fp)
 4010d70:	20c7883a 	add	r3,r4,r3
 4010d74:	18c20e04 	addi	r3,r3,2104
 4010d78:	18c00003 	ldbu	r3,0(r3)
 4010d7c:	18c03fcc 	andi	r3,r3,255
 4010d80:	18c0201c 	xori	r3,r3,128
 4010d84:	18ffe004 	addi	r3,r3,-128
 4010d88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010d8c:	e0bffb17 	ldw	r2,-20(fp)
 4010d90:	10800d17 	ldw	r2,52(r2)
 4010d94:	10800044 	addi	r2,r2,1
 4010d98:	10c1ffcc 	andi	r3,r2,2047
 4010d9c:	e0bffb17 	ldw	r2,-20(fp)
 4010da0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4010da4:	e0bffa17 	ldw	r2,-24(fp)
 4010da8:	10bfffc4 	addi	r2,r2,-1
 4010dac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4010db0:	e0bffa17 	ldw	r2,-24(fp)
 4010db4:	10000526 	beq	r2,zero,4010dcc <altera_avalon_jtag_uart_irq+0x1a8>
 4010db8:	e0bffb17 	ldw	r2,-20(fp)
 4010dbc:	10c00d17 	ldw	r3,52(r2)
 4010dc0:	e0bffb17 	ldw	r2,-20(fp)
 4010dc4:	10800c17 	ldw	r2,48(r2)
 4010dc8:	18bfe51e 	bne	r3,r2,4010d60 <__reset+0xfa820d60>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4010dcc:	e0bffa17 	ldw	r2,-24(fp)
 4010dd0:	103f9d26 	beq	r2,zero,4010c48 <__reset+0xfa820c48>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4010dd4:	e0bffb17 	ldw	r2,-20(fp)
 4010dd8:	10c00817 	ldw	r3,32(r2)
 4010ddc:	00bfff44 	movi	r2,-3
 4010de0:	1886703a 	and	r3,r3,r2
 4010de4:	e0bffb17 	ldw	r2,-20(fp)
 4010de8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4010dec:	e0bffb17 	ldw	r2,-20(fp)
 4010df0:	10800017 	ldw	r2,0(r2)
 4010df4:	10800104 	addi	r2,r2,4
 4010df8:	1007883a 	mov	r3,r2
 4010dfc:	e0bffb17 	ldw	r2,-20(fp)
 4010e00:	10800817 	ldw	r2,32(r2)
 4010e04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010e08:	e0bffc17 	ldw	r2,-16(fp)
 4010e0c:	10800104 	addi	r2,r2,4
 4010e10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4010e14:	003f8c06 	br	4010c48 <__reset+0xfa820c48>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4010e18:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4010e1c:	0001883a 	nop
 4010e20:	e037883a 	mov	sp,fp
 4010e24:	df000017 	ldw	fp,0(sp)
 4010e28:	dec00104 	addi	sp,sp,4
 4010e2c:	f800283a 	ret

04010e30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4010e30:	defff804 	addi	sp,sp,-32
 4010e34:	df000715 	stw	fp,28(sp)
 4010e38:	df000704 	addi	fp,sp,28
 4010e3c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4010e40:	e0bffb17 	ldw	r2,-20(fp)
 4010e44:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4010e48:	e0bff917 	ldw	r2,-28(fp)
 4010e4c:	10800017 	ldw	r2,0(r2)
 4010e50:	10800104 	addi	r2,r2,4
 4010e54:	10800037 	ldwio	r2,0(r2)
 4010e58:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4010e5c:	e0bffa17 	ldw	r2,-24(fp)
 4010e60:	1081000c 	andi	r2,r2,1024
 4010e64:	10000b26 	beq	r2,zero,4010e94 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4010e68:	e0bff917 	ldw	r2,-28(fp)
 4010e6c:	10800017 	ldw	r2,0(r2)
 4010e70:	10800104 	addi	r2,r2,4
 4010e74:	1007883a 	mov	r3,r2
 4010e78:	e0bff917 	ldw	r2,-28(fp)
 4010e7c:	10800817 	ldw	r2,32(r2)
 4010e80:	10810014 	ori	r2,r2,1024
 4010e84:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4010e88:	e0bff917 	ldw	r2,-28(fp)
 4010e8c:	10000915 	stw	zero,36(r2)
 4010e90:	00000a06 	br	4010ebc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4010e94:	e0bff917 	ldw	r2,-28(fp)
 4010e98:	10c00917 	ldw	r3,36(r2)
 4010e9c:	00a00034 	movhi	r2,32768
 4010ea0:	10bfff04 	addi	r2,r2,-4
 4010ea4:	10c00536 	bltu	r2,r3,4010ebc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4010ea8:	e0bff917 	ldw	r2,-28(fp)
 4010eac:	10800917 	ldw	r2,36(r2)
 4010eb0:	10c00044 	addi	r3,r2,1
 4010eb4:	e0bff917 	ldw	r2,-28(fp)
 4010eb8:	10c00915 	stw	r3,36(r2)
 4010ebc:	d0a02317 	ldw	r2,-32628(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4010ec0:	e037883a 	mov	sp,fp
 4010ec4:	df000017 	ldw	fp,0(sp)
 4010ec8:	dec00104 	addi	sp,sp,4
 4010ecc:	f800283a 	ret

04010ed0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4010ed0:	defffd04 	addi	sp,sp,-12
 4010ed4:	df000215 	stw	fp,8(sp)
 4010ed8:	df000204 	addi	fp,sp,8
 4010edc:	e13ffe15 	stw	r4,-8(fp)
 4010ee0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010ee4:	00000506 	br	4010efc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4010ee8:	e0bfff17 	ldw	r2,-4(fp)
 4010eec:	1090000c 	andi	r2,r2,16384
 4010ef0:	10000226 	beq	r2,zero,4010efc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4010ef4:	00bffd44 	movi	r2,-11
 4010ef8:	00000b06 	br	4010f28 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010efc:	e0bffe17 	ldw	r2,-8(fp)
 4010f00:	10c00d17 	ldw	r3,52(r2)
 4010f04:	e0bffe17 	ldw	r2,-8(fp)
 4010f08:	10800c17 	ldw	r2,48(r2)
 4010f0c:	18800526 	beq	r3,r2,4010f24 <altera_avalon_jtag_uart_close+0x54>
 4010f10:	e0bffe17 	ldw	r2,-8(fp)
 4010f14:	10c00917 	ldw	r3,36(r2)
 4010f18:	e0bffe17 	ldw	r2,-8(fp)
 4010f1c:	10800117 	ldw	r2,4(r2)
 4010f20:	18bff136 	bltu	r3,r2,4010ee8 <__reset+0xfa820ee8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4010f24:	0005883a 	mov	r2,zero
}
 4010f28:	e037883a 	mov	sp,fp
 4010f2c:	df000017 	ldw	fp,0(sp)
 4010f30:	dec00104 	addi	sp,sp,4
 4010f34:	f800283a 	ret

04010f38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4010f38:	defffa04 	addi	sp,sp,-24
 4010f3c:	df000515 	stw	fp,20(sp)
 4010f40:	df000504 	addi	fp,sp,20
 4010f44:	e13ffd15 	stw	r4,-12(fp)
 4010f48:	e17ffe15 	stw	r5,-8(fp)
 4010f4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4010f50:	00bff9c4 	movi	r2,-25
 4010f54:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4010f58:	e0bffe17 	ldw	r2,-8(fp)
 4010f5c:	10da8060 	cmpeqi	r3,r2,27137
 4010f60:	1800031e 	bne	r3,zero,4010f70 <altera_avalon_jtag_uart_ioctl+0x38>
 4010f64:	109a80a0 	cmpeqi	r2,r2,27138
 4010f68:	1000181e 	bne	r2,zero,4010fcc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4010f6c:	00002906 	br	4011014 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4010f70:	e0bffd17 	ldw	r2,-12(fp)
 4010f74:	10c00117 	ldw	r3,4(r2)
 4010f78:	00a00034 	movhi	r2,32768
 4010f7c:	10bfffc4 	addi	r2,r2,-1
 4010f80:	18802126 	beq	r3,r2,4011008 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4010f84:	e0bfff17 	ldw	r2,-4(fp)
 4010f88:	10800017 	ldw	r2,0(r2)
 4010f8c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4010f90:	e0bffc17 	ldw	r2,-16(fp)
 4010f94:	10800090 	cmplti	r2,r2,2
 4010f98:	1000061e 	bne	r2,zero,4010fb4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010f9c:	e0fffc17 	ldw	r3,-16(fp)
 4010fa0:	00a00034 	movhi	r2,32768
 4010fa4:	10bfffc4 	addi	r2,r2,-1
 4010fa8:	18800226 	beq	r3,r2,4010fb4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010fac:	e0bffc17 	ldw	r2,-16(fp)
 4010fb0:	00000206 	br	4010fbc <altera_avalon_jtag_uart_ioctl+0x84>
 4010fb4:	00a00034 	movhi	r2,32768
 4010fb8:	10bfff84 	addi	r2,r2,-2
 4010fbc:	e0fffd17 	ldw	r3,-12(fp)
 4010fc0:	18800115 	stw	r2,4(r3)
      rc = 0;
 4010fc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4010fc8:	00000f06 	br	4011008 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4010fcc:	e0bffd17 	ldw	r2,-12(fp)
 4010fd0:	10c00117 	ldw	r3,4(r2)
 4010fd4:	00a00034 	movhi	r2,32768
 4010fd8:	10bfffc4 	addi	r2,r2,-1
 4010fdc:	18800c26 	beq	r3,r2,4011010 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4010fe0:	e0bffd17 	ldw	r2,-12(fp)
 4010fe4:	10c00917 	ldw	r3,36(r2)
 4010fe8:	e0bffd17 	ldw	r2,-12(fp)
 4010fec:	10800117 	ldw	r2,4(r2)
 4010ff0:	1885803a 	cmpltu	r2,r3,r2
 4010ff4:	10c03fcc 	andi	r3,r2,255
 4010ff8:	e0bfff17 	ldw	r2,-4(fp)
 4010ffc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4011000:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4011004:	00000206 	br	4011010 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4011008:	0001883a 	nop
 401100c:	00000106 	br	4011014 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4011010:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4011014:	e0bffb17 	ldw	r2,-20(fp)
}
 4011018:	e037883a 	mov	sp,fp
 401101c:	df000017 	ldw	fp,0(sp)
 4011020:	dec00104 	addi	sp,sp,4
 4011024:	f800283a 	ret

04011028 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4011028:	defff304 	addi	sp,sp,-52
 401102c:	dfc00c15 	stw	ra,48(sp)
 4011030:	df000b15 	stw	fp,44(sp)
 4011034:	df000b04 	addi	fp,sp,44
 4011038:	e13ffc15 	stw	r4,-16(fp)
 401103c:	e17ffd15 	stw	r5,-12(fp)
 4011040:	e1bffe15 	stw	r6,-8(fp)
 4011044:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4011048:	e0bffd17 	ldw	r2,-12(fp)
 401104c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4011050:	00004706 	br	4011170 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4011054:	e0bffc17 	ldw	r2,-16(fp)
 4011058:	10800a17 	ldw	r2,40(r2)
 401105c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4011060:	e0bffc17 	ldw	r2,-16(fp)
 4011064:	10800b17 	ldw	r2,44(r2)
 4011068:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401106c:	e0fff717 	ldw	r3,-36(fp)
 4011070:	e0bff817 	ldw	r2,-32(fp)
 4011074:	18800536 	bltu	r3,r2,401108c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4011078:	e0fff717 	ldw	r3,-36(fp)
 401107c:	e0bff817 	ldw	r2,-32(fp)
 4011080:	1885c83a 	sub	r2,r3,r2
 4011084:	e0bff615 	stw	r2,-40(fp)
 4011088:	00000406 	br	401109c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401108c:	00c20004 	movi	r3,2048
 4011090:	e0bff817 	ldw	r2,-32(fp)
 4011094:	1885c83a 	sub	r2,r3,r2
 4011098:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401109c:	e0bff617 	ldw	r2,-40(fp)
 40110a0:	10001e26 	beq	r2,zero,401111c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40110a4:	e0fffe17 	ldw	r3,-8(fp)
 40110a8:	e0bff617 	ldw	r2,-40(fp)
 40110ac:	1880022e 	bgeu	r3,r2,40110b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40110b0:	e0bffe17 	ldw	r2,-8(fp)
 40110b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40110b8:	e0bffc17 	ldw	r2,-16(fp)
 40110bc:	10c00e04 	addi	r3,r2,56
 40110c0:	e0bff817 	ldw	r2,-32(fp)
 40110c4:	1885883a 	add	r2,r3,r2
 40110c8:	e1bff617 	ldw	r6,-40(fp)
 40110cc:	100b883a 	mov	r5,r2
 40110d0:	e13ff517 	ldw	r4,-44(fp)
 40110d4:	40023480 	call	4002348 <memcpy>
      ptr   += n;
 40110d8:	e0fff517 	ldw	r3,-44(fp)
 40110dc:	e0bff617 	ldw	r2,-40(fp)
 40110e0:	1885883a 	add	r2,r3,r2
 40110e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40110e8:	e0fffe17 	ldw	r3,-8(fp)
 40110ec:	e0bff617 	ldw	r2,-40(fp)
 40110f0:	1885c83a 	sub	r2,r3,r2
 40110f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40110f8:	e0fff817 	ldw	r3,-32(fp)
 40110fc:	e0bff617 	ldw	r2,-40(fp)
 4011100:	1885883a 	add	r2,r3,r2
 4011104:	10c1ffcc 	andi	r3,r2,2047
 4011108:	e0bffc17 	ldw	r2,-16(fp)
 401110c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4011110:	e0bffe17 	ldw	r2,-8(fp)
 4011114:	00bfcf16 	blt	zero,r2,4011054 <__reset+0xfa821054>
 4011118:	00000106 	br	4011120 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401111c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4011120:	e0fff517 	ldw	r3,-44(fp)
 4011124:	e0bffd17 	ldw	r2,-12(fp)
 4011128:	1880141e 	bne	r3,r2,401117c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401112c:	e0bfff17 	ldw	r2,-4(fp)
 4011130:	1090000c 	andi	r2,r2,16384
 4011134:	1000131e 	bne	r2,zero,4011184 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4011138:	0001883a 	nop
 401113c:	e0bffc17 	ldw	r2,-16(fp)
 4011140:	10c00a17 	ldw	r3,40(r2)
 4011144:	e0bff717 	ldw	r2,-36(fp)
 4011148:	1880051e 	bne	r3,r2,4011160 <altera_avalon_jtag_uart_read+0x138>
 401114c:	e0bffc17 	ldw	r2,-16(fp)
 4011150:	10c00917 	ldw	r3,36(r2)
 4011154:	e0bffc17 	ldw	r2,-16(fp)
 4011158:	10800117 	ldw	r2,4(r2)
 401115c:	18bff736 	bltu	r3,r2,401113c <__reset+0xfa82113c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4011160:	e0bffc17 	ldw	r2,-16(fp)
 4011164:	10c00a17 	ldw	r3,40(r2)
 4011168:	e0bff717 	ldw	r2,-36(fp)
 401116c:	18800726 	beq	r3,r2,401118c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4011170:	e0bffe17 	ldw	r2,-8(fp)
 4011174:	00bfb716 	blt	zero,r2,4011054 <__reset+0xfa821054>
 4011178:	00000506 	br	4011190 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401117c:	0001883a 	nop
 4011180:	00000306 	br	4011190 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4011184:	0001883a 	nop
 4011188:	00000106 	br	4011190 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401118c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4011190:	e0fff517 	ldw	r3,-44(fp)
 4011194:	e0bffd17 	ldw	r2,-12(fp)
 4011198:	18801826 	beq	r3,r2,40111fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401119c:	0005303a 	rdctl	r2,status
 40111a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40111a4:	e0fffb17 	ldw	r3,-20(fp)
 40111a8:	00bfff84 	movi	r2,-2
 40111ac:	1884703a 	and	r2,r3,r2
 40111b0:	1001703a 	wrctl	status,r2
  
  return context;
 40111b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40111b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40111bc:	e0bffc17 	ldw	r2,-16(fp)
 40111c0:	10800817 	ldw	r2,32(r2)
 40111c4:	10c00054 	ori	r3,r2,1
 40111c8:	e0bffc17 	ldw	r2,-16(fp)
 40111cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40111d0:	e0bffc17 	ldw	r2,-16(fp)
 40111d4:	10800017 	ldw	r2,0(r2)
 40111d8:	10800104 	addi	r2,r2,4
 40111dc:	1007883a 	mov	r3,r2
 40111e0:	e0bffc17 	ldw	r2,-16(fp)
 40111e4:	10800817 	ldw	r2,32(r2)
 40111e8:	18800035 	stwio	r2,0(r3)
 40111ec:	e0bffa17 	ldw	r2,-24(fp)
 40111f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40111f4:	e0bff917 	ldw	r2,-28(fp)
 40111f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40111fc:	e0fff517 	ldw	r3,-44(fp)
 4011200:	e0bffd17 	ldw	r2,-12(fp)
 4011204:	18800426 	beq	r3,r2,4011218 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4011208:	e0fff517 	ldw	r3,-44(fp)
 401120c:	e0bffd17 	ldw	r2,-12(fp)
 4011210:	1885c83a 	sub	r2,r3,r2
 4011214:	00000606 	br	4011230 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4011218:	e0bfff17 	ldw	r2,-4(fp)
 401121c:	1090000c 	andi	r2,r2,16384
 4011220:	10000226 	beq	r2,zero,401122c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4011224:	00bffd44 	movi	r2,-11
 4011228:	00000106 	br	4011230 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401122c:	00bffec4 	movi	r2,-5
}
 4011230:	e037883a 	mov	sp,fp
 4011234:	dfc00117 	ldw	ra,4(sp)
 4011238:	df000017 	ldw	fp,0(sp)
 401123c:	dec00204 	addi	sp,sp,8
 4011240:	f800283a 	ret

04011244 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4011244:	defff304 	addi	sp,sp,-52
 4011248:	dfc00c15 	stw	ra,48(sp)
 401124c:	df000b15 	stw	fp,44(sp)
 4011250:	df000b04 	addi	fp,sp,44
 4011254:	e13ffc15 	stw	r4,-16(fp)
 4011258:	e17ffd15 	stw	r5,-12(fp)
 401125c:	e1bffe15 	stw	r6,-8(fp)
 4011260:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4011264:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4011268:	e0bffd17 	ldw	r2,-12(fp)
 401126c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4011270:	00003706 	br	4011350 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4011274:	e0bffc17 	ldw	r2,-16(fp)
 4011278:	10800c17 	ldw	r2,48(r2)
 401127c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4011280:	e0bffc17 	ldw	r2,-16(fp)
 4011284:	10800d17 	ldw	r2,52(r2)
 4011288:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401128c:	e0fff917 	ldw	r3,-28(fp)
 4011290:	e0bff517 	ldw	r2,-44(fp)
 4011294:	1880062e 	bgeu	r3,r2,40112b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4011298:	e0fff517 	ldw	r3,-44(fp)
 401129c:	e0bff917 	ldw	r2,-28(fp)
 40112a0:	1885c83a 	sub	r2,r3,r2
 40112a4:	10bfffc4 	addi	r2,r2,-1
 40112a8:	e0bff615 	stw	r2,-40(fp)
 40112ac:	00000b06 	br	40112dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40112b0:	e0bff517 	ldw	r2,-44(fp)
 40112b4:	10000526 	beq	r2,zero,40112cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40112b8:	00c20004 	movi	r3,2048
 40112bc:	e0bff917 	ldw	r2,-28(fp)
 40112c0:	1885c83a 	sub	r2,r3,r2
 40112c4:	e0bff615 	stw	r2,-40(fp)
 40112c8:	00000406 	br	40112dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40112cc:	00c1ffc4 	movi	r3,2047
 40112d0:	e0bff917 	ldw	r2,-28(fp)
 40112d4:	1885c83a 	sub	r2,r3,r2
 40112d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40112dc:	e0bff617 	ldw	r2,-40(fp)
 40112e0:	10001e26 	beq	r2,zero,401135c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40112e4:	e0fffe17 	ldw	r3,-8(fp)
 40112e8:	e0bff617 	ldw	r2,-40(fp)
 40112ec:	1880022e 	bgeu	r3,r2,40112f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40112f0:	e0bffe17 	ldw	r2,-8(fp)
 40112f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40112f8:	e0bffc17 	ldw	r2,-16(fp)
 40112fc:	10c20e04 	addi	r3,r2,2104
 4011300:	e0bff917 	ldw	r2,-28(fp)
 4011304:	1885883a 	add	r2,r3,r2
 4011308:	e1bff617 	ldw	r6,-40(fp)
 401130c:	e17ffd17 	ldw	r5,-12(fp)
 4011310:	1009883a 	mov	r4,r2
 4011314:	40023480 	call	4002348 <memcpy>
      ptr   += n;
 4011318:	e0fffd17 	ldw	r3,-12(fp)
 401131c:	e0bff617 	ldw	r2,-40(fp)
 4011320:	1885883a 	add	r2,r3,r2
 4011324:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4011328:	e0fffe17 	ldw	r3,-8(fp)
 401132c:	e0bff617 	ldw	r2,-40(fp)
 4011330:	1885c83a 	sub	r2,r3,r2
 4011334:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011338:	e0fff917 	ldw	r3,-28(fp)
 401133c:	e0bff617 	ldw	r2,-40(fp)
 4011340:	1885883a 	add	r2,r3,r2
 4011344:	10c1ffcc 	andi	r3,r2,2047
 4011348:	e0bffc17 	ldw	r2,-16(fp)
 401134c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4011350:	e0bffe17 	ldw	r2,-8(fp)
 4011354:	00bfc716 	blt	zero,r2,4011274 <__reset+0xfa821274>
 4011358:	00000106 	br	4011360 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401135c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011360:	0005303a 	rdctl	r2,status
 4011364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011368:	e0fffb17 	ldw	r3,-20(fp)
 401136c:	00bfff84 	movi	r2,-2
 4011370:	1884703a 	and	r2,r3,r2
 4011374:	1001703a 	wrctl	status,r2
  
  return context;
 4011378:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401137c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4011380:	e0bffc17 	ldw	r2,-16(fp)
 4011384:	10800817 	ldw	r2,32(r2)
 4011388:	10c00094 	ori	r3,r2,2
 401138c:	e0bffc17 	ldw	r2,-16(fp)
 4011390:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4011394:	e0bffc17 	ldw	r2,-16(fp)
 4011398:	10800017 	ldw	r2,0(r2)
 401139c:	10800104 	addi	r2,r2,4
 40113a0:	1007883a 	mov	r3,r2
 40113a4:	e0bffc17 	ldw	r2,-16(fp)
 40113a8:	10800817 	ldw	r2,32(r2)
 40113ac:	18800035 	stwio	r2,0(r3)
 40113b0:	e0bffa17 	ldw	r2,-24(fp)
 40113b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40113b8:	e0bff817 	ldw	r2,-32(fp)
 40113bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40113c0:	e0bffe17 	ldw	r2,-8(fp)
 40113c4:	0080100e 	bge	zero,r2,4011408 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40113c8:	e0bfff17 	ldw	r2,-4(fp)
 40113cc:	1090000c 	andi	r2,r2,16384
 40113d0:	1000101e 	bne	r2,zero,4011414 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40113d4:	0001883a 	nop
 40113d8:	e0bffc17 	ldw	r2,-16(fp)
 40113dc:	10c00d17 	ldw	r3,52(r2)
 40113e0:	e0bff517 	ldw	r2,-44(fp)
 40113e4:	1880051e 	bne	r3,r2,40113fc <altera_avalon_jtag_uart_write+0x1b8>
 40113e8:	e0bffc17 	ldw	r2,-16(fp)
 40113ec:	10c00917 	ldw	r3,36(r2)
 40113f0:	e0bffc17 	ldw	r2,-16(fp)
 40113f4:	10800117 	ldw	r2,4(r2)
 40113f8:	18bff736 	bltu	r3,r2,40113d8 <__reset+0xfa8213d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40113fc:	e0bffc17 	ldw	r2,-16(fp)
 4011400:	10800917 	ldw	r2,36(r2)
 4011404:	1000051e 	bne	r2,zero,401141c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4011408:	e0bffe17 	ldw	r2,-8(fp)
 401140c:	00bfd016 	blt	zero,r2,4011350 <__reset+0xfa821350>
 4011410:	00000306 	br	4011420 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4011414:	0001883a 	nop
 4011418:	00000106 	br	4011420 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401141c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4011420:	e0fffd17 	ldw	r3,-12(fp)
 4011424:	e0bff717 	ldw	r2,-36(fp)
 4011428:	18800426 	beq	r3,r2,401143c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401142c:	e0fffd17 	ldw	r3,-12(fp)
 4011430:	e0bff717 	ldw	r2,-36(fp)
 4011434:	1885c83a 	sub	r2,r3,r2
 4011438:	00000606 	br	4011454 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401143c:	e0bfff17 	ldw	r2,-4(fp)
 4011440:	1090000c 	andi	r2,r2,16384
 4011444:	10000226 	beq	r2,zero,4011450 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4011448:	00bffd44 	movi	r2,-11
 401144c:	00000106 	br	4011454 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4011450:	00bffec4 	movi	r2,-5
}
 4011454:	e037883a 	mov	sp,fp
 4011458:	dfc00117 	ldw	ra,4(sp)
 401145c:	df000017 	ldw	fp,0(sp)
 4011460:	dec00204 	addi	sp,sp,8
 4011464:	f800283a 	ret

04011468 <alt_avalon_spi_command>:
 4011468:	defff404 	addi	sp,sp,-48
 401146c:	df000b15 	stw	fp,44(sp)
 4011470:	df000b04 	addi	fp,sp,44
 4011474:	e13ffc15 	stw	r4,-16(fp)
 4011478:	e17ffd15 	stw	r5,-12(fp)
 401147c:	e1bffe15 	stw	r6,-8(fp)
 4011480:	e1ffff15 	stw	r7,-4(fp)
 4011484:	e0ffff17 	ldw	r3,-4(fp)
 4011488:	e0bffe17 	ldw	r2,-8(fp)
 401148c:	1885883a 	add	r2,r3,r2
 4011490:	e0bff815 	stw	r2,-32(fp)
 4011494:	e0c00217 	ldw	r3,8(fp)
 4011498:	e0800117 	ldw	r2,4(fp)
 401149c:	1885883a 	add	r2,r3,r2
 40114a0:	e0bff915 	stw	r2,-28(fp)
 40114a4:	e0800117 	ldw	r2,4(fp)
 40114a8:	e0bff515 	stw	r2,-44(fp)
 40114ac:	e0bffe17 	ldw	r2,-8(fp)
 40114b0:	e0bff615 	stw	r2,-40(fp)
 40114b4:	00800044 	movi	r2,1
 40114b8:	e0bff715 	stw	r2,-36(fp)
 40114bc:	e0bffc17 	ldw	r2,-16(fp)
 40114c0:	10800504 	addi	r2,r2,20
 40114c4:	1009883a 	mov	r4,r2
 40114c8:	00c00044 	movi	r3,1
 40114cc:	e0bffd17 	ldw	r2,-12(fp)
 40114d0:	1884983a 	sll	r2,r3,r2
 40114d4:	20800035 	stwio	r2,0(r4)
 40114d8:	e0800317 	ldw	r2,12(fp)
 40114dc:	1080008c 	andi	r2,r2,2
 40114e0:	1000051e 	bne	r2,zero,40114f8 <alt_avalon_spi_command+0x90>
 40114e4:	e0bffc17 	ldw	r2,-16(fp)
 40114e8:	10800304 	addi	r2,r2,12
 40114ec:	1007883a 	mov	r3,r2
 40114f0:	00810004 	movi	r2,1024
 40114f4:	18800035 	stwio	r2,0(r3)
 40114f8:	e0bffc17 	ldw	r2,-16(fp)
 40114fc:	10800037 	ldwio	r2,0(r2)
 4011500:	e0bffc17 	ldw	r2,-16(fp)
 4011504:	10800204 	addi	r2,r2,8
 4011508:	10800037 	ldwio	r2,0(r2)
 401150c:	e0bffa15 	stw	r2,-24(fp)
 4011510:	e0bffa17 	ldw	r2,-24(fp)
 4011514:	1080100c 	andi	r2,r2,64
 4011518:	10000226 	beq	r2,zero,4011524 <alt_avalon_spi_command+0xbc>
 401151c:	e0bff717 	ldw	r2,-36(fp)
 4011520:	1000031e 	bne	r2,zero,4011530 <alt_avalon_spi_command+0xc8>
 4011524:	e0bffa17 	ldw	r2,-24(fp)
 4011528:	1080200c 	andi	r2,r2,128
 401152c:	103ff426 	beq	r2,zero,4011500 <__reset+0xfa821500>
 4011530:	e0bffa17 	ldw	r2,-24(fp)
 4011534:	1080100c 	andi	r2,r2,64
 4011538:	10001e26 	beq	r2,zero,40115b4 <alt_avalon_spi_command+0x14c>
 401153c:	e0bff717 	ldw	r2,-36(fp)
 4011540:	00801c0e 	bge	zero,r2,40115b4 <alt_avalon_spi_command+0x14c>
 4011544:	e0bff717 	ldw	r2,-36(fp)
 4011548:	10bfffc4 	addi	r2,r2,-1
 401154c:	e0bff715 	stw	r2,-36(fp)
 4011550:	e0ffff17 	ldw	r3,-4(fp)
 4011554:	e0bff817 	ldw	r2,-32(fp)
 4011558:	18800a2e 	bgeu	r3,r2,4011584 <alt_avalon_spi_command+0x11c>
 401155c:	e0bffc17 	ldw	r2,-16(fp)
 4011560:	10800104 	addi	r2,r2,4
 4011564:	1009883a 	mov	r4,r2
 4011568:	e0bfff17 	ldw	r2,-4(fp)
 401156c:	10c00044 	addi	r3,r2,1
 4011570:	e0ffff15 	stw	r3,-4(fp)
 4011574:	10800003 	ldbu	r2,0(r2)
 4011578:	10803fcc 	andi	r2,r2,255
 401157c:	20800035 	stwio	r2,0(r4)
 4011580:	00000c06 	br	40115b4 <alt_avalon_spi_command+0x14c>
 4011584:	e0bff517 	ldw	r2,-44(fp)
 4011588:	10000826 	beq	r2,zero,40115ac <alt_avalon_spi_command+0x144>
 401158c:	e0bff517 	ldw	r2,-44(fp)
 4011590:	10bfffc4 	addi	r2,r2,-1
 4011594:	e0bff515 	stw	r2,-44(fp)
 4011598:	e0bffc17 	ldw	r2,-16(fp)
 401159c:	10800104 	addi	r2,r2,4
 40115a0:	0007883a 	mov	r3,zero
 40115a4:	10c00035 	stwio	r3,0(r2)
 40115a8:	00000206 	br	40115b4 <alt_avalon_spi_command+0x14c>
 40115ac:	00bf0004 	movi	r2,-1024
 40115b0:	e0bff715 	stw	r2,-36(fp)
 40115b4:	e0bffa17 	ldw	r2,-24(fp)
 40115b8:	1080200c 	andi	r2,r2,128
 40115bc:	103fd026 	beq	r2,zero,4011500 <__reset+0xfa821500>
 40115c0:	e0bffc17 	ldw	r2,-16(fp)
 40115c4:	10800037 	ldwio	r2,0(r2)
 40115c8:	e0bffb15 	stw	r2,-20(fp)
 40115cc:	e0bff617 	ldw	r2,-40(fp)
 40115d0:	10000426 	beq	r2,zero,40115e4 <alt_avalon_spi_command+0x17c>
 40115d4:	e0bff617 	ldw	r2,-40(fp)
 40115d8:	10bfffc4 	addi	r2,r2,-1
 40115dc:	e0bff615 	stw	r2,-40(fp)
 40115e0:	00000506 	br	40115f8 <alt_avalon_spi_command+0x190>
 40115e4:	e0800217 	ldw	r2,8(fp)
 40115e8:	10c00044 	addi	r3,r2,1
 40115ec:	e0c00215 	stw	r3,8(fp)
 40115f0:	e0fffb17 	ldw	r3,-20(fp)
 40115f4:	10c00005 	stb	r3,0(r2)
 40115f8:	e0bff717 	ldw	r2,-36(fp)
 40115fc:	10800044 	addi	r2,r2,1
 4011600:	e0bff715 	stw	r2,-36(fp)
 4011604:	e0bff617 	ldw	r2,-40(fp)
 4011608:	103fbd1e 	bne	r2,zero,4011500 <__reset+0xfa821500>
 401160c:	e0c00217 	ldw	r3,8(fp)
 4011610:	e0bff917 	ldw	r2,-28(fp)
 4011614:	18bfba1e 	bne	r3,r2,4011500 <__reset+0xfa821500>
 4011618:	e0bffc17 	ldw	r2,-16(fp)
 401161c:	10800204 	addi	r2,r2,8
 4011620:	10800037 	ldwio	r2,0(r2)
 4011624:	e0bffa15 	stw	r2,-24(fp)
 4011628:	e0bffa17 	ldw	r2,-24(fp)
 401162c:	1080080c 	andi	r2,r2,32
 4011630:	103ff926 	beq	r2,zero,4011618 <__reset+0xfa821618>
 4011634:	e0800317 	ldw	r2,12(fp)
 4011638:	1080004c 	andi	r2,r2,1
 401163c:	1000041e 	bne	r2,zero,4011650 <alt_avalon_spi_command+0x1e8>
 4011640:	e0bffc17 	ldw	r2,-16(fp)
 4011644:	10800304 	addi	r2,r2,12
 4011648:	0007883a 	mov	r3,zero
 401164c:	10c00035 	stwio	r3,0(r2)
 4011650:	e0800117 	ldw	r2,4(fp)
 4011654:	e037883a 	mov	sp,fp
 4011658:	df000017 	ldw	fp,0(sp)
 401165c:	dec00104 	addi	sp,sp,4
 4011660:	f800283a 	ret

04011664 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4011664:	defffa04 	addi	sp,sp,-24
 4011668:	dfc00515 	stw	ra,20(sp)
 401166c:	df000415 	stw	fp,16(sp)
 4011670:	df000404 	addi	fp,sp,16
 4011674:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4011678:	0007883a 	mov	r3,zero
 401167c:	e0bfff17 	ldw	r2,-4(fp)
 4011680:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4011684:	e0bfff17 	ldw	r2,-4(fp)
 4011688:	10800104 	addi	r2,r2,4
 401168c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011690:	0005303a 	rdctl	r2,status
 4011694:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011698:	e0fffd17 	ldw	r3,-12(fp)
 401169c:	00bfff84 	movi	r2,-2
 40116a0:	1884703a 	and	r2,r3,r2
 40116a4:	1001703a 	wrctl	status,r2
  
  return context;
 40116a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40116ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40116b0:	400f7f40 	call	400f7f4 <alt_tick>
 40116b4:	e0bffc17 	ldw	r2,-16(fp)
 40116b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40116bc:	e0bffe17 	ldw	r2,-8(fp)
 40116c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40116c4:	0001883a 	nop
 40116c8:	e037883a 	mov	sp,fp
 40116cc:	dfc00117 	ldw	ra,4(sp)
 40116d0:	df000017 	ldw	fp,0(sp)
 40116d4:	dec00204 	addi	sp,sp,8
 40116d8:	f800283a 	ret

040116dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40116dc:	defff804 	addi	sp,sp,-32
 40116e0:	dfc00715 	stw	ra,28(sp)
 40116e4:	df000615 	stw	fp,24(sp)
 40116e8:	df000604 	addi	fp,sp,24
 40116ec:	e13ffc15 	stw	r4,-16(fp)
 40116f0:	e17ffd15 	stw	r5,-12(fp)
 40116f4:	e1bffe15 	stw	r6,-8(fp)
 40116f8:	e1ffff15 	stw	r7,-4(fp)
 40116fc:	e0bfff17 	ldw	r2,-4(fp)
 4011700:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4011704:	d0a02317 	ldw	r2,-32628(gp)
 4011708:	1000021e 	bne	r2,zero,4011714 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401170c:	e0bffb17 	ldw	r2,-20(fp)
 4011710:	d0a02315 	stw	r2,-32628(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4011714:	e0bffc17 	ldw	r2,-16(fp)
 4011718:	10800104 	addi	r2,r2,4
 401171c:	00c001c4 	movi	r3,7
 4011720:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4011724:	d8000015 	stw	zero,0(sp)
 4011728:	e1fffc17 	ldw	r7,-16(fp)
 401172c:	01810074 	movhi	r6,1025
 4011730:	31859904 	addi	r6,r6,5732
 4011734:	e17ffe17 	ldw	r5,-8(fp)
 4011738:	e13ffd17 	ldw	r4,-12(fp)
 401173c:	400efb80 	call	400efb8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4011740:	0001883a 	nop
 4011744:	e037883a 	mov	sp,fp
 4011748:	dfc00117 	ldw	ra,4(sp)
 401174c:	df000017 	ldw	fp,0(sp)
 4011750:	dec00204 	addi	sp,sp,8
 4011754:	f800283a 	ret

04011758 <alt_flash_device_register>:
 4011758:	defffd04 	addi	sp,sp,-12
 401175c:	dfc00215 	stw	ra,8(sp)
 4011760:	df000115 	stw	fp,4(sp)
 4011764:	df000104 	addi	fp,sp,4
 4011768:	e13fff15 	stw	r4,-4(fp)
 401176c:	d1601204 	addi	r5,gp,-32696
 4011770:	e13fff17 	ldw	r4,-4(fp)
 4011774:	4012aa40 	call	4012aa4 <alt_dev_llist_insert>
 4011778:	e037883a 	mov	sp,fp
 401177c:	dfc00117 	ldw	ra,4(sp)
 4011780:	df000017 	ldw	fp,0(sp)
 4011784:	dec00204 	addi	sp,sp,8
 4011788:	f800283a 	ret

0401178c <alt_epcq_controller_lock>:
 401178c:	defff804 	addi	sp,sp,-32
 4011790:	dfc00715 	stw	ra,28(sp)
 4011794:	df000615 	stw	fp,24(sp)
 4011798:	df000604 	addi	fp,sp,24
 401179c:	e13ffe15 	stw	r4,-8(fp)
 40117a0:	e17fff15 	stw	r5,-4(fp)
 40117a4:	e03ffa15 	stw	zero,-24(fp)
 40117a8:	e03ffb15 	stw	zero,-20(fp)
 40117ac:	e03ffc15 	stw	zero,-16(fp)
 40117b0:	e03ffd15 	stw	zero,-12(fp)
 40117b4:	e0bffe17 	ldw	r2,-8(fp)
 40117b8:	1000021e 	bne	r2,zero,40117c4 <alt_epcq_controller_lock+0x38>
 40117bc:	00bffa84 	movi	r2,-22
 40117c0:	00003106 	br	4011888 <alt_epcq_controller_lock+0xfc>
 40117c4:	e0bffe17 	ldw	r2,-8(fp)
 40117c8:	e0bffb15 	stw	r2,-20(fp)
 40117cc:	e0bfff17 	ldw	r2,-4(fp)
 40117d0:	1004923a 	slli	r2,r2,8
 40117d4:	e0bffa15 	stw	r2,-24(fp)
 40117d8:	e0bffa17 	ldw	r2,-24(fp)
 40117dc:	108000d4 	ori	r2,r2,3
 40117e0:	e0bffa15 	stw	r2,-24(fp)
 40117e4:	e0bffb17 	ldw	r2,-20(fp)
 40117e8:	10803017 	ldw	r2,192(r2)
 40117ec:	10800304 	addi	r2,r2,12
 40117f0:	1007883a 	mov	r3,r2
 40117f4:	e0bffa17 	ldw	r2,-24(fp)
 40117f8:	18800035 	stwio	r2,0(r3)
 40117fc:	e13ffb17 	ldw	r4,-20(fp)
 4011800:	40121bc0 	call	40121bc <alt_epcq_poll_for_write_in_progress>
 4011804:	e0bffd15 	stw	r2,-12(fp)
 4011808:	e0bffd17 	ldw	r2,-12(fp)
 401180c:	10000226 	beq	r2,zero,4011818 <alt_epcq_controller_lock+0x8c>
 4011810:	e0bffd17 	ldw	r2,-12(fp)
 4011814:	00001c06 	br	4011888 <alt_epcq_controller_lock+0xfc>
 4011818:	e0bffb17 	ldw	r2,-20(fp)
 401181c:	10803017 	ldw	r2,192(r2)
 4011820:	10800037 	ldwio	r2,0(r2)
 4011824:	e0bffd15 	stw	r2,-12(fp)
 4011828:	e0bffd17 	ldw	r2,-12(fp)
 401182c:	1005d0ba 	srai	r2,r2,2
 4011830:	108001cc 	andi	r2,r2,7
 4011834:	e0fffc17 	ldw	r3,-16(fp)
 4011838:	1884b03a 	or	r2,r3,r2
 401183c:	e0bffc15 	stw	r2,-16(fp)
 4011840:	e0bffd17 	ldw	r2,-12(fp)
 4011844:	1005d0fa 	srai	r2,r2,3
 4011848:	1080020c 	andi	r2,r2,8
 401184c:	e0fffc17 	ldw	r3,-16(fp)
 4011850:	1884b03a 	or	r2,r3,r2
 4011854:	e0bffc15 	stw	r2,-16(fp)
 4011858:	e0bffd17 	ldw	r2,-12(fp)
 401185c:	1005d07a 	srai	r2,r2,1
 4011860:	1080040c 	andi	r2,r2,16
 4011864:	e0fffc17 	ldw	r3,-16(fp)
 4011868:	1884b03a 	or	r2,r3,r2
 401186c:	e0bffc15 	stw	r2,-16(fp)
 4011870:	e0fffc17 	ldw	r3,-16(fp)
 4011874:	e0bfff17 	ldw	r2,-4(fp)
 4011878:	18800226 	beq	r3,r2,4011884 <alt_epcq_controller_lock+0xf8>
 401187c:	00bff484 	movi	r2,-46
 4011880:	00000106 	br	4011888 <alt_epcq_controller_lock+0xfc>
 4011884:	0005883a 	mov	r2,zero
 4011888:	e037883a 	mov	sp,fp
 401188c:	dfc00117 	ldw	ra,4(sp)
 4011890:	df000017 	ldw	fp,0(sp)
 4011894:	dec00204 	addi	sp,sp,8
 4011898:	f800283a 	ret

0401189c <alt_epcq_controller_get_info>:
 401189c:	defffb04 	addi	sp,sp,-20
 40118a0:	df000415 	stw	fp,16(sp)
 40118a4:	df000404 	addi	fp,sp,16
 40118a8:	e13ffd15 	stw	r4,-12(fp)
 40118ac:	e17ffe15 	stw	r5,-8(fp)
 40118b0:	e1bfff15 	stw	r6,-4(fp)
 40118b4:	e03ffc15 	stw	zero,-16(fp)
 40118b8:	e0bffd17 	ldw	r2,-12(fp)
 40118bc:	10000426 	beq	r2,zero,40118d0 <alt_epcq_controller_get_info+0x34>
 40118c0:	e0bffe17 	ldw	r2,-8(fp)
 40118c4:	10000226 	beq	r2,zero,40118d0 <alt_epcq_controller_get_info+0x34>
 40118c8:	e0bfff17 	ldw	r2,-4(fp)
 40118cc:	1000021e 	bne	r2,zero,40118d8 <alt_epcq_controller_get_info+0x3c>
 40118d0:	00bffa84 	movi	r2,-22
 40118d4:	00001006 	br	4011918 <alt_epcq_controller_get_info+0x7c>
 40118d8:	e0bffd17 	ldw	r2,-12(fp)
 40118dc:	e0bffc15 	stw	r2,-16(fp)
 40118e0:	e0bffc17 	ldw	r2,-16(fp)
 40118e4:	10c00c17 	ldw	r3,48(r2)
 40118e8:	e0bfff17 	ldw	r2,-4(fp)
 40118ec:	10c00015 	stw	r3,0(r2)
 40118f0:	e0bffc17 	ldw	r2,-16(fp)
 40118f4:	10800c17 	ldw	r2,48(r2)
 40118f8:	1000021e 	bne	r2,zero,4011904 <alt_epcq_controller_get_info+0x68>
 40118fc:	00bffec4 	movi	r2,-5
 4011900:	00000506 	br	4011918 <alt_epcq_controller_get_info+0x7c>
 4011904:	e0bffc17 	ldw	r2,-16(fp)
 4011908:	10c00d04 	addi	r3,r2,52
 401190c:	e0bffe17 	ldw	r2,-8(fp)
 4011910:	10c00015 	stw	r3,0(r2)
 4011914:	0005883a 	mov	r2,zero
 4011918:	e037883a 	mov	sp,fp
 401191c:	df000017 	ldw	fp,0(sp)
 4011920:	dec00104 	addi	sp,sp,4
 4011924:	f800283a 	ret

04011928 <alt_epcq_controller_erase_block>:
 4011928:	defff904 	addi	sp,sp,-28
 401192c:	df000615 	stw	fp,24(sp)
 4011930:	df000604 	addi	fp,sp,24
 4011934:	e13ffe15 	stw	r4,-8(fp)
 4011938:	e17fff15 	stw	r5,-4(fp)
 401193c:	e03ffa15 	stw	zero,-24(fp)
 4011940:	e03ffb15 	stw	zero,-20(fp)
 4011944:	e03ffc15 	stw	zero,-16(fp)
 4011948:	e03ffd15 	stw	zero,-12(fp)
 401194c:	e0bffe17 	ldw	r2,-8(fp)
 4011950:	1000021e 	bne	r2,zero,401195c <alt_epcq_controller_erase_block+0x34>
 4011954:	00bffa84 	movi	r2,-22
 4011958:	00003306 	br	4011a28 <alt_epcq_controller_erase_block+0x100>
 401195c:	e0bffe17 	ldw	r2,-8(fp)
 4011960:	e0bffc15 	stw	r2,-16(fp)
 4011964:	e0bfff17 	ldw	r2,-4(fp)
 4011968:	10000a16 	blt	r2,zero,4011994 <alt_epcq_controller_erase_block+0x6c>
 401196c:	e0bffc17 	ldw	r2,-16(fp)
 4011970:	10803117 	ldw	r2,196(r2)
 4011974:	e0ffff17 	ldw	r3,-4(fp)
 4011978:	1880062e 	bgeu	r3,r2,4011994 <alt_epcq_controller_erase_block+0x6c>
 401197c:	e0bffc17 	ldw	r2,-16(fp)
 4011980:	10803417 	ldw	r2,208(r2)
 4011984:	10ffffc4 	addi	r3,r2,-1
 4011988:	e0bfff17 	ldw	r2,-4(fp)
 401198c:	1884703a 	and	r2,r3,r2
 4011990:	10000226 	beq	r2,zero,401199c <alt_epcq_controller_erase_block+0x74>
 4011994:	00bffa84 	movi	r2,-22
 4011998:	00002306 	br	4011a28 <alt_epcq_controller_erase_block+0x100>
 401199c:	e0ffff17 	ldw	r3,-4(fp)
 40119a0:	e0bffc17 	ldw	r2,-16(fp)
 40119a4:	10803417 	ldw	r2,208(r2)
 40119a8:	1885203a 	divu	r2,r3,r2
 40119ac:	e0bffd15 	stw	r2,-12(fp)
 40119b0:	e0bffd17 	ldw	r2,-12(fp)
 40119b4:	1006923a 	slli	r3,r2,8
 40119b8:	00804034 	movhi	r2,256
 40119bc:	10bfc004 	addi	r2,r2,-256
 40119c0:	1884703a 	and	r2,r3,r2
 40119c4:	e0bffb15 	stw	r2,-20(fp)
 40119c8:	e0bffb17 	ldw	r2,-20(fp)
 40119cc:	10800094 	ori	r2,r2,2
 40119d0:	e0bffb15 	stw	r2,-20(fp)
 40119d4:	e0bffc17 	ldw	r2,-16(fp)
 40119d8:	10803017 	ldw	r2,192(r2)
 40119dc:	10800304 	addi	r2,r2,12
 40119e0:	1007883a 	mov	r3,r2
 40119e4:	e0bffb17 	ldw	r2,-20(fp)
 40119e8:	18800035 	stwio	r2,0(r3)
 40119ec:	e0bffc17 	ldw	r2,-16(fp)
 40119f0:	10803017 	ldw	r2,192(r2)
 40119f4:	10800404 	addi	r2,r2,16
 40119f8:	10800037 	ldwio	r2,0(r2)
 40119fc:	1080004c 	andi	r2,r2,1
 4011a00:	10000826 	beq	r2,zero,4011a24 <alt_epcq_controller_erase_block+0xfc>
 4011a04:	e0bffc17 	ldw	r2,-16(fp)
 4011a08:	10803017 	ldw	r2,192(r2)
 4011a0c:	10800404 	addi	r2,r2,16
 4011a10:	1007883a 	mov	r3,r2
 4011a14:	00800044 	movi	r2,1
 4011a18:	18800035 	stwio	r2,0(r3)
 4011a1c:	00bffec4 	movi	r2,-5
 4011a20:	00000106 	br	4011a28 <alt_epcq_controller_erase_block+0x100>
 4011a24:	e0bffa17 	ldw	r2,-24(fp)
 4011a28:	e037883a 	mov	sp,fp
 4011a2c:	df000017 	ldw	fp,0(sp)
 4011a30:	dec00104 	addi	sp,sp,4
 4011a34:	f800283a 	ret

04011a38 <alt_epcq_controller_write_block>:
 4011a38:	defff304 	addi	sp,sp,-52
 4011a3c:	dfc00c15 	stw	ra,48(sp)
 4011a40:	df000b15 	stw	fp,44(sp)
 4011a44:	df000b04 	addi	fp,sp,44
 4011a48:	e13ffc15 	stw	r4,-16(fp)
 4011a4c:	e17ffd15 	stw	r5,-12(fp)
 4011a50:	e1bffe15 	stw	r6,-8(fp)
 4011a54:	e1ffff15 	stw	r7,-4(fp)
 4011a58:	e03ff515 	stw	zero,-44(fp)
 4011a5c:	e0800217 	ldw	r2,8(fp)
 4011a60:	e0bff615 	stw	r2,-40(fp)
 4011a64:	e0bffe17 	ldw	r2,-8(fp)
 4011a68:	e0bff715 	stw	r2,-36(fp)
 4011a6c:	e0bffc17 	ldw	r2,-16(fp)
 4011a70:	e0bffa15 	stw	r2,-24(fp)
 4011a74:	e0bffd17 	ldw	r2,-12(fp)
 4011a78:	10001e16 	blt	r2,zero,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011a7c:	e0bffe17 	ldw	r2,-8(fp)
 4011a80:	10001c16 	blt	r2,zero,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011a84:	e0bffc17 	ldw	r2,-16(fp)
 4011a88:	10001a26 	beq	r2,zero,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011a8c:	e0bfff17 	ldw	r2,-4(fp)
 4011a90:	10001826 	beq	r2,zero,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011a94:	e0bffa17 	ldw	r2,-24(fp)
 4011a98:	10803117 	ldw	r2,196(r2)
 4011a9c:	e0fffe17 	ldw	r3,-8(fp)
 4011aa0:	1880142e 	bgeu	r3,r2,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011aa4:	e0bffa17 	ldw	r2,-24(fp)
 4011aa8:	10803117 	ldw	r2,196(r2)
 4011aac:	e0fffd17 	ldw	r3,-12(fp)
 4011ab0:	1880102e 	bgeu	r3,r2,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011ab4:	e0bffa17 	ldw	r2,-24(fp)
 4011ab8:	10803417 	ldw	r2,208(r2)
 4011abc:	e13ffe17 	ldw	r4,-8(fp)
 4011ac0:	e0fffd17 	ldw	r3,-12(fp)
 4011ac4:	20c7c83a 	sub	r3,r4,r3
 4011ac8:	10c7c83a 	sub	r3,r2,r3
 4011acc:	e0800217 	ldw	r2,8(fp)
 4011ad0:	18800836 	bltu	r3,r2,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011ad4:	e0800217 	ldw	r2,8(fp)
 4011ad8:	10000616 	blt	r2,zero,4011af4 <alt_epcq_controller_write_block+0xbc>
 4011adc:	e0bffa17 	ldw	r2,-24(fp)
 4011ae0:	10803417 	ldw	r2,208(r2)
 4011ae4:	10ffffc4 	addi	r3,r2,-1
 4011ae8:	e0bffd17 	ldw	r2,-12(fp)
 4011aec:	1884703a 	and	r2,r3,r2
 4011af0:	10004c26 	beq	r2,zero,4011c24 <alt_epcq_controller_write_block+0x1ec>
 4011af4:	00bffa84 	movi	r2,-22
 4011af8:	00004d06 	br	4011c30 <alt_epcq_controller_write_block+0x1f8>
 4011afc:	00bfffc4 	movi	r2,-1
 4011b00:	e0bffb15 	stw	r2,-20(fp)
 4011b04:	e03ff815 	stw	zero,-32(fp)
 4011b08:	00800104 	movi	r2,4
 4011b0c:	e0bff915 	stw	r2,-28(fp)
 4011b10:	e0bff717 	ldw	r2,-36(fp)
 4011b14:	108000cc 	andi	r2,r2,3
 4011b18:	10001526 	beq	r2,zero,4011b70 <alt_epcq_controller_write_block+0x138>
 4011b1c:	e0bff717 	ldw	r2,-36(fp)
 4011b20:	108000cc 	andi	r2,r2,3
 4011b24:	e0bff815 	stw	r2,-32(fp)
 4011b28:	e0fff917 	ldw	r3,-28(fp)
 4011b2c:	e0bff817 	ldw	r2,-32(fp)
 4011b30:	1885c83a 	sub	r2,r3,r2
 4011b34:	e0bff915 	stw	r2,-28(fp)
 4011b38:	e0bff917 	ldw	r2,-28(fp)
 4011b3c:	e0fff617 	ldw	r3,-40(fp)
 4011b40:	1880022e 	bgeu	r3,r2,4011b4c <alt_epcq_controller_write_block+0x114>
 4011b44:	e0bff617 	ldw	r2,-40(fp)
 4011b48:	e0bff915 	stw	r2,-28(fp)
 4011b4c:	e0fff717 	ldw	r3,-36(fp)
 4011b50:	e0bff817 	ldw	r2,-32(fp)
 4011b54:	1885c83a 	sub	r2,r3,r2
 4011b58:	e0bff715 	stw	r2,-36(fp)
 4011b5c:	e0bff717 	ldw	r2,-36(fp)
 4011b60:	108000cc 	andi	r2,r2,3
 4011b64:	10000726 	beq	r2,zero,4011b84 <alt_epcq_controller_write_block+0x14c>
 4011b68:	00bffa84 	movi	r2,-22
 4011b6c:	00003006 	br	4011c30 <alt_epcq_controller_write_block+0x1f8>
 4011b70:	e0bff917 	ldw	r2,-28(fp)
 4011b74:	e0fff617 	ldw	r3,-40(fp)
 4011b78:	1880022e 	bgeu	r3,r2,4011b84 <alt_epcq_controller_write_block+0x14c>
 4011b7c:	e0bff617 	ldw	r2,-40(fp)
 4011b80:	e0bff915 	stw	r2,-28(fp)
 4011b84:	e0fffb04 	addi	r3,fp,-20
 4011b88:	e0bff817 	ldw	r2,-32(fp)
 4011b8c:	1889883a 	add	r4,r3,r2
 4011b90:	e0ffff17 	ldw	r3,-4(fp)
 4011b94:	e0bff517 	ldw	r2,-44(fp)
 4011b98:	1885883a 	add	r2,r3,r2
 4011b9c:	e1bff917 	ldw	r6,-28(fp)
 4011ba0:	100b883a 	mov	r5,r2
 4011ba4:	40023480 	call	4002348 <memcpy>
 4011ba8:	e0fff517 	ldw	r3,-44(fp)
 4011bac:	e0bff917 	ldw	r2,-28(fp)
 4011bb0:	1885883a 	add	r2,r3,r2
 4011bb4:	e0bff515 	stw	r2,-44(fp)
 4011bb8:	e0fff617 	ldw	r3,-40(fp)
 4011bbc:	e0bff917 	ldw	r2,-28(fp)
 4011bc0:	1885c83a 	sub	r2,r3,r2
 4011bc4:	e0bff615 	stw	r2,-40(fp)
 4011bc8:	e0bffa17 	ldw	r2,-24(fp)
 4011bcc:	10c02e17 	ldw	r3,184(r2)
 4011bd0:	e0bff717 	ldw	r2,-36(fp)
 4011bd4:	1885883a 	add	r2,r3,r2
 4011bd8:	e0fffb17 	ldw	r3,-20(fp)
 4011bdc:	10c00035 	stwio	r3,0(r2)
 4011be0:	e0bffa17 	ldw	r2,-24(fp)
 4011be4:	10803017 	ldw	r2,192(r2)
 4011be8:	10800404 	addi	r2,r2,16
 4011bec:	10800037 	ldwio	r2,0(r2)
 4011bf0:	1080008c 	andi	r2,r2,2
 4011bf4:	10000826 	beq	r2,zero,4011c18 <alt_epcq_controller_write_block+0x1e0>
 4011bf8:	e0bffa17 	ldw	r2,-24(fp)
 4011bfc:	10803017 	ldw	r2,192(r2)
 4011c00:	10800404 	addi	r2,r2,16
 4011c04:	1007883a 	mov	r3,r2
 4011c08:	00800084 	movi	r2,2
 4011c0c:	18800035 	stwio	r2,0(r3)
 4011c10:	00bffec4 	movi	r2,-5
 4011c14:	00000606 	br	4011c30 <alt_epcq_controller_write_block+0x1f8>
 4011c18:	e0bff717 	ldw	r2,-36(fp)
 4011c1c:	10800104 	addi	r2,r2,4
 4011c20:	e0bff715 	stw	r2,-36(fp)
 4011c24:	e0bff617 	ldw	r2,-40(fp)
 4011c28:	103fb41e 	bne	r2,zero,4011afc <__reset+0xfa821afc>
 4011c2c:	0005883a 	mov	r2,zero
 4011c30:	e037883a 	mov	sp,fp
 4011c34:	dfc00117 	ldw	ra,4(sp)
 4011c38:	df000017 	ldw	fp,0(sp)
 4011c3c:	dec00204 	addi	sp,sp,8
 4011c40:	f800283a 	ret

04011c44 <alt_epcq_controller_write>:
 4011c44:	defff004 	addi	sp,sp,-64
 4011c48:	dfc00f15 	stw	ra,60(sp)
 4011c4c:	df000e15 	stw	fp,56(sp)
 4011c50:	df000e04 	addi	fp,sp,56
 4011c54:	e13ffc15 	stw	r4,-16(fp)
 4011c58:	e17ffd15 	stw	r5,-12(fp)
 4011c5c:	e1bffe15 	stw	r6,-8(fp)
 4011c60:	e1ffff15 	stw	r7,-4(fp)
 4011c64:	e03ff315 	stw	zero,-52(fp)
 4011c68:	e03ff915 	stw	zero,-28(fp)
 4011c6c:	e0bffd17 	ldw	r2,-12(fp)
 4011c70:	e0bff415 	stw	r2,-48(fp)
 4011c74:	e0bfff17 	ldw	r2,-4(fp)
 4011c78:	e0bff515 	stw	r2,-44(fp)
 4011c7c:	e03ff615 	stw	zero,-40(fp)
 4011c80:	e03ff715 	stw	zero,-36(fp)
 4011c84:	e0bffc17 	ldw	r2,-16(fp)
 4011c88:	10000226 	beq	r2,zero,4011c94 <alt_epcq_controller_write+0x50>
 4011c8c:	e0bffe17 	ldw	r2,-8(fp)
 4011c90:	1000021e 	bne	r2,zero,4011c9c <alt_epcq_controller_write+0x58>
 4011c94:	00bffa84 	movi	r2,-22
 4011c98:	00005d06 	br	4011e10 <alt_epcq_controller_write+0x1cc>
 4011c9c:	e0bffc17 	ldw	r2,-16(fp)
 4011ca0:	e0bff915 	stw	r2,-28(fp)
 4011ca4:	e0bffd17 	ldw	r2,-12(fp)
 4011ca8:	e0ffff17 	ldw	r3,-4(fp)
 4011cac:	180d883a 	mov	r6,r3
 4011cb0:	100b883a 	mov	r5,r2
 4011cb4:	e13ff917 	ldw	r4,-28(fp)
 4011cb8:	40121200 	call	4012120 <alt_epcq_validate_read_write_arguments>
 4011cbc:	e0bff315 	stw	r2,-52(fp)
 4011cc0:	e0bff317 	ldw	r2,-52(fp)
 4011cc4:	10000226 	beq	r2,zero,4011cd0 <alt_epcq_controller_write+0x8c>
 4011cc8:	e0bff317 	ldw	r2,-52(fp)
 4011ccc:	00005006 	br	4011e10 <alt_epcq_controller_write+0x1cc>
 4011cd0:	e0fffd17 	ldw	r3,-12(fp)
 4011cd4:	e0bff917 	ldw	r2,-28(fp)
 4011cd8:	10803417 	ldw	r2,208(r2)
 4011cdc:	1885203a 	divu	r2,r3,r2
 4011ce0:	e0bff715 	stw	r2,-36(fp)
 4011ce4:	00004306 	br	4011df4 <alt_epcq_controller_write+0x1b0>
 4011ce8:	e03ffa15 	stw	zero,-24(fp)
 4011cec:	e03ff815 	stw	zero,-32(fp)
 4011cf0:	e03ffb15 	stw	zero,-20(fp)
 4011cf4:	e0bff517 	ldw	r2,-44(fp)
 4011cf8:	10004326 	beq	r2,zero,4011e08 <alt_epcq_controller_write+0x1c4>
 4011cfc:	e0bff917 	ldw	r2,-28(fp)
 4011d00:	10803417 	ldw	r2,208(r2)
 4011d04:	0087c83a 	sub	r3,zero,r2
 4011d08:	e0bff417 	ldw	r2,-48(fp)
 4011d0c:	1884703a 	and	r2,r3,r2
 4011d10:	e0bffa15 	stw	r2,-24(fp)
 4011d14:	e0fffa17 	ldw	r3,-24(fp)
 4011d18:	e0bff417 	ldw	r2,-48(fp)
 4011d1c:	18800426 	beq	r3,r2,4011d30 <alt_epcq_controller_write+0xec>
 4011d20:	e0fff417 	ldw	r3,-48(fp)
 4011d24:	e0bffa17 	ldw	r2,-24(fp)
 4011d28:	1885c83a 	sub	r2,r3,r2
 4011d2c:	e0bff815 	stw	r2,-32(fp)
 4011d30:	e0bffa17 	ldw	r2,-24(fp)
 4011d34:	100b883a 	mov	r5,r2
 4011d38:	e13ffc17 	ldw	r4,-16(fp)
 4011d3c:	40119280 	call	4011928 <alt_epcq_controller_erase_block>
 4011d40:	e0bff315 	stw	r2,-52(fp)
 4011d44:	e0bff317 	ldw	r2,-52(fp)
 4011d48:	10000226 	beq	r2,zero,4011d54 <alt_epcq_controller_write+0x110>
 4011d4c:	e0bff317 	ldw	r2,-52(fp)
 4011d50:	00002f06 	br	4011e10 <alt_epcq_controller_write+0x1cc>
 4011d54:	e0bff917 	ldw	r2,-28(fp)
 4011d58:	10c03417 	ldw	r3,208(r2)
 4011d5c:	e0bff817 	ldw	r2,-32(fp)
 4011d60:	1885c83a 	sub	r2,r3,r2
 4011d64:	e0fff517 	ldw	r3,-44(fp)
 4011d68:	1880012e 	bgeu	r3,r2,4011d70 <alt_epcq_controller_write+0x12c>
 4011d6c:	1805883a 	mov	r2,r3
 4011d70:	e0bffb15 	stw	r2,-20(fp)
 4011d74:	e13ffa17 	ldw	r4,-24(fp)
 4011d78:	e17ff417 	ldw	r5,-48(fp)
 4011d7c:	e0fffe17 	ldw	r3,-8(fp)
 4011d80:	e0bff617 	ldw	r2,-40(fp)
 4011d84:	1887883a 	add	r3,r3,r2
 4011d88:	e0bffb17 	ldw	r2,-20(fp)
 4011d8c:	d8800015 	stw	r2,0(sp)
 4011d90:	180f883a 	mov	r7,r3
 4011d94:	280d883a 	mov	r6,r5
 4011d98:	200b883a 	mov	r5,r4
 4011d9c:	e13ffc17 	ldw	r4,-16(fp)
 4011da0:	4011a380 	call	4011a38 <alt_epcq_controller_write_block>
 4011da4:	e0bff315 	stw	r2,-52(fp)
 4011da8:	e0bff317 	ldw	r2,-52(fp)
 4011dac:	10000226 	beq	r2,zero,4011db8 <alt_epcq_controller_write+0x174>
 4011db0:	e0bff317 	ldw	r2,-52(fp)
 4011db4:	00001606 	br	4011e10 <alt_epcq_controller_write+0x1cc>
 4011db8:	e0fff517 	ldw	r3,-44(fp)
 4011dbc:	e0bffb17 	ldw	r2,-20(fp)
 4011dc0:	1885c83a 	sub	r2,r3,r2
 4011dc4:	e0bff515 	stw	r2,-44(fp)
 4011dc8:	e0fff617 	ldw	r3,-40(fp)
 4011dcc:	e0bffb17 	ldw	r2,-20(fp)
 4011dd0:	1885883a 	add	r2,r3,r2
 4011dd4:	e0bff615 	stw	r2,-40(fp)
 4011dd8:	e0fff417 	ldw	r3,-48(fp)
 4011ddc:	e0bffb17 	ldw	r2,-20(fp)
 4011de0:	1885883a 	add	r2,r3,r2
 4011de4:	e0bff415 	stw	r2,-48(fp)
 4011de8:	e0bff717 	ldw	r2,-36(fp)
 4011dec:	10800044 	addi	r2,r2,1
 4011df0:	e0bff715 	stw	r2,-36(fp)
 4011df4:	e0bff917 	ldw	r2,-28(fp)
 4011df8:	10803317 	ldw	r2,204(r2)
 4011dfc:	e0fff717 	ldw	r3,-36(fp)
 4011e00:	18bfb936 	bltu	r3,r2,4011ce8 <__reset+0xfa821ce8>
 4011e04:	00000106 	br	4011e0c <alt_epcq_controller_write+0x1c8>
 4011e08:	0001883a 	nop
 4011e0c:	e0bff317 	ldw	r2,-52(fp)
 4011e10:	e037883a 	mov	sp,fp
 4011e14:	dfc00117 	ldw	ra,4(sp)
 4011e18:	df000017 	ldw	fp,0(sp)
 4011e1c:	dec00204 	addi	sp,sp,8
 4011e20:	f800283a 	ret

04011e24 <alt_epcq_controller_read>:
 4011e24:	defff804 	addi	sp,sp,-32
 4011e28:	dfc00715 	stw	ra,28(sp)
 4011e2c:	df000615 	stw	fp,24(sp)
 4011e30:	df000604 	addi	fp,sp,24
 4011e34:	e13ffc15 	stw	r4,-16(fp)
 4011e38:	e17ffd15 	stw	r5,-12(fp)
 4011e3c:	e1bffe15 	stw	r6,-8(fp)
 4011e40:	e1ffff15 	stw	r7,-4(fp)
 4011e44:	e03ffa15 	stw	zero,-24(fp)
 4011e48:	e03ffb15 	stw	zero,-20(fp)
 4011e4c:	e0bffc17 	ldw	r2,-16(fp)
 4011e50:	10000226 	beq	r2,zero,4011e5c <alt_epcq_controller_read+0x38>
 4011e54:	e0bffe17 	ldw	r2,-8(fp)
 4011e58:	1000021e 	bne	r2,zero,4011e64 <alt_epcq_controller_read+0x40>
 4011e5c:	00bffa84 	movi	r2,-22
 4011e60:	00001606 	br	4011ebc <alt_epcq_controller_read+0x98>
 4011e64:	e0bffc17 	ldw	r2,-16(fp)
 4011e68:	e0bffb15 	stw	r2,-20(fp)
 4011e6c:	e0bffd17 	ldw	r2,-12(fp)
 4011e70:	e0ffff17 	ldw	r3,-4(fp)
 4011e74:	180d883a 	mov	r6,r3
 4011e78:	100b883a 	mov	r5,r2
 4011e7c:	e13ffb17 	ldw	r4,-20(fp)
 4011e80:	40121200 	call	4012120 <alt_epcq_validate_read_write_arguments>
 4011e84:	e0bffa15 	stw	r2,-24(fp)
 4011e88:	e0bffa17 	ldw	r2,-24(fp)
 4011e8c:	10000a1e 	bne	r2,zero,4011eb8 <alt_epcq_controller_read+0x94>
 4011e90:	e0bffb17 	ldw	r2,-20(fp)
 4011e94:	10c02e17 	ldw	r3,184(r2)
 4011e98:	e0bffd17 	ldw	r2,-12(fp)
 4011e9c:	1885883a 	add	r2,r3,r2
 4011ea0:	1007883a 	mov	r3,r2
 4011ea4:	e0bfff17 	ldw	r2,-4(fp)
 4011ea8:	100d883a 	mov	r6,r2
 4011eac:	180b883a 	mov	r5,r3
 4011eb0:	e13ffe17 	ldw	r4,-8(fp)
 4011eb4:	40023480 	call	4002348 <memcpy>
 4011eb8:	e0bffa17 	ldw	r2,-24(fp)
 4011ebc:	e037883a 	mov	sp,fp
 4011ec0:	dfc00117 	ldw	ra,4(sp)
 4011ec4:	df000017 	ldw	fp,0(sp)
 4011ec8:	dec00204 	addi	sp,sp,8
 4011ecc:	f800283a 	ret

04011ed0 <altera_epcq_controller_init>:
 4011ed0:	defffa04 	addi	sp,sp,-24
 4011ed4:	dfc00515 	stw	ra,20(sp)
 4011ed8:	df000415 	stw	fp,16(sp)
 4011edc:	df000404 	addi	fp,sp,16
 4011ee0:	e13fff15 	stw	r4,-4(fp)
 4011ee4:	e03ffc15 	stw	zero,-16(fp)
 4011ee8:	e03ffe15 	stw	zero,-8(fp)
 4011eec:	e03ffd15 	stw	zero,-12(fp)
 4011ef0:	e0bfff17 	ldw	r2,-4(fp)
 4011ef4:	1000021e 	bne	r2,zero,4011f00 <altera_epcq_controller_init+0x30>
 4011ef8:	00bffa84 	movi	r2,-22
 4011efc:	00008306 	br	401210c <altera_epcq_controller_init+0x23c>
 4011f00:	e0bfff17 	ldw	r2,-4(fp)
 4011f04:	10803017 	ldw	r2,192(r2)
 4011f08:	1000021e 	bne	r2,zero,4011f14 <altera_epcq_controller_init+0x44>
 4011f0c:	00bffb44 	movi	r2,-19
 4011f10:	00007e06 	br	401210c <altera_epcq_controller_init+0x23c>
 4011f14:	e0bfff17 	ldw	r2,-4(fp)
 4011f18:	10803217 	ldw	r2,200(r2)
 4011f1c:	1000361e 	bne	r2,zero,4011ff8 <altera_epcq_controller_init+0x128>
 4011f20:	e0bfff17 	ldw	r2,-4(fp)
 4011f24:	10803017 	ldw	r2,192(r2)
 4011f28:	10800204 	addi	r2,r2,8
 4011f2c:	10800037 	ldwio	r2,0(r2)
 4011f30:	e0bffc15 	stw	r2,-16(fp)
 4011f34:	e0bffc17 	ldw	r2,-16(fp)
 4011f38:	10803fcc 	andi	r2,r2,255
 4011f3c:	e0bffc15 	stw	r2,-16(fp)
 4011f40:	e0bffc17 	ldw	r2,-16(fp)
 4011f44:	10bffac4 	addi	r2,r2,-21
 4011f48:	10c00368 	cmpgeui	r3,r2,13
 4011f4c:	1800281e 	bne	r3,zero,4011ff0 <altera_epcq_controller_init+0x120>
 4011f50:	100690ba 	slli	r3,r2,2
 4011f54:	00810074 	movhi	r2,1025
 4011f58:	1087da04 	addi	r2,r2,8040
 4011f5c:	1885883a 	add	r2,r3,r2
 4011f60:	10800017 	ldw	r2,0(r2)
 4011f64:	1000683a 	jmp	r2
 4011f68:	04011f9c 	xori	r16,zero,1150
 4011f6c:	04011fa8 	cmpgeui	r16,zero,1150
 4011f70:	04011fb4 	movhi	r16,1150
 4011f74:	04011fc0 	call	4011fc <__alt_mem_dram_cntrl-0x3bfee04>
 4011f78:	04011fcc 	andi	r16,zero,1151
 4011f7c:	04011ff0 	cmpltui	r16,zero,1151
 4011f80:	04011ff0 	cmpltui	r16,zero,1151
 4011f84:	04011ff0 	cmpltui	r16,zero,1151
 4011f88:	04011ff0 	cmpltui	r16,zero,1151
 4011f8c:	04011ff0 	cmpltui	r16,zero,1151
 4011f90:	04011ff0 	cmpltui	r16,zero,1151
 4011f94:	04011fd8 	cmpnei	r16,zero,1151
 4011f98:	04011fe4 	muli	r16,zero,1151
 4011f9c:	00800804 	movi	r2,32
 4011fa0:	e0bffd15 	stw	r2,-12(fp)
 4011fa4:	00002e06 	br	4012060 <altera_epcq_controller_init+0x190>
 4011fa8:	00801004 	movi	r2,64
 4011fac:	e0bffd15 	stw	r2,-12(fp)
 4011fb0:	00002b06 	br	4012060 <altera_epcq_controller_init+0x190>
 4011fb4:	00802004 	movi	r2,128
 4011fb8:	e0bffd15 	stw	r2,-12(fp)
 4011fbc:	00002806 	br	4012060 <altera_epcq_controller_init+0x190>
 4011fc0:	00804004 	movi	r2,256
 4011fc4:	e0bffd15 	stw	r2,-12(fp)
 4011fc8:	00002506 	br	4012060 <altera_epcq_controller_init+0x190>
 4011fcc:	00808004 	movi	r2,512
 4011fd0:	e0bffd15 	stw	r2,-12(fp)
 4011fd4:	00002206 	br	4012060 <altera_epcq_controller_init+0x190>
 4011fd8:	00810004 	movi	r2,1024
 4011fdc:	e0bffd15 	stw	r2,-12(fp)
 4011fe0:	00001f06 	br	4012060 <altera_epcq_controller_init+0x190>
 4011fe4:	00820004 	movi	r2,2048
 4011fe8:	e0bffd15 	stw	r2,-12(fp)
 4011fec:	00001c06 	br	4012060 <altera_epcq_controller_init+0x190>
 4011ff0:	00bffb44 	movi	r2,-19
 4011ff4:	00004506 	br	401210c <altera_epcq_controller_init+0x23c>
 4011ff8:	e0bfff17 	ldw	r2,-4(fp)
 4011ffc:	10803017 	ldw	r2,192(r2)
 4012000:	10800104 	addi	r2,r2,4
 4012004:	10800037 	ldwio	r2,0(r2)
 4012008:	e0bffc15 	stw	r2,-16(fp)
 401200c:	e0bffc17 	ldw	r2,-16(fp)
 4012010:	10803fcc 	andi	r2,r2,255
 4012014:	e0bffc15 	stw	r2,-16(fp)
 4012018:	e0bffc17 	ldw	r2,-16(fp)
 401201c:	10c005a0 	cmpeqi	r3,r2,22
 4012020:	1800071e 	bne	r3,zero,4012040 <altera_epcq_controller_init+0x170>
 4012024:	10c00620 	cmpeqi	r3,r2,24
 4012028:	1800081e 	bne	r3,zero,401204c <altera_epcq_controller_init+0x17c>
 401202c:	10800520 	cmpeqi	r2,r2,20
 4012030:	10000926 	beq	r2,zero,4012058 <altera_epcq_controller_init+0x188>
 4012034:	00800804 	movi	r2,32
 4012038:	e0bffd15 	stw	r2,-12(fp)
 401203c:	00000806 	br	4012060 <altera_epcq_controller_init+0x190>
 4012040:	00802004 	movi	r2,128
 4012044:	e0bffd15 	stw	r2,-12(fp)
 4012048:	00000506 	br	4012060 <altera_epcq_controller_init+0x190>
 401204c:	00804004 	movi	r2,256
 4012050:	e0bffd15 	stw	r2,-12(fp)
 4012054:	00000206 	br	4012060 <altera_epcq_controller_init+0x190>
 4012058:	00bffb44 	movi	r2,-19
 401205c:	00002b06 	br	401210c <altera_epcq_controller_init+0x23c>
 4012060:	e0bfff17 	ldw	r2,-4(fp)
 4012064:	10c03417 	ldw	r3,208(r2)
 4012068:	e0bffd17 	ldw	r2,-12(fp)
 401206c:	1885383a 	mul	r2,r3,r2
 4012070:	e0bffe15 	stw	r2,-8(fp)
 4012074:	e0bfff17 	ldw	r2,-4(fp)
 4012078:	10c03117 	ldw	r3,196(r2)
 401207c:	e0bffe17 	ldw	r2,-8(fp)
 4012080:	1880041e 	bne	r3,r2,4012094 <altera_epcq_controller_init+0x1c4>
 4012084:	e0bfff17 	ldw	r2,-4(fp)
 4012088:	10c03317 	ldw	r3,204(r2)
 401208c:	e0bffd17 	ldw	r2,-12(fp)
 4012090:	18800426 	beq	r3,r2,40120a4 <altera_epcq_controller_init+0x1d4>
 4012094:	e0bfff17 	ldw	r2,-4(fp)
 4012098:	10000c15 	stw	zero,48(r2)
 401209c:	00bffb44 	movi	r2,-19
 40120a0:	00001a06 	br	401210c <altera_epcq_controller_init+0x23c>
 40120a4:	e0bfff17 	ldw	r2,-4(fp)
 40120a8:	e0fffc17 	ldw	r3,-16(fp)
 40120ac:	10c03615 	stw	r3,216(r2)
 40120b0:	e0bfff17 	ldw	r2,-4(fp)
 40120b4:	e0fffd17 	ldw	r3,-12(fp)
 40120b8:	10c03315 	stw	r3,204(r2)
 40120bc:	e0bfff17 	ldw	r2,-4(fp)
 40120c0:	00c00044 	movi	r3,1
 40120c4:	10c00c15 	stw	r3,48(r2)
 40120c8:	e0bfff17 	ldw	r2,-4(fp)
 40120cc:	10000d15 	stw	zero,52(r2)
 40120d0:	e0fffe17 	ldw	r3,-8(fp)
 40120d4:	e0bfff17 	ldw	r2,-4(fp)
 40120d8:	10c00e15 	stw	r3,56(r2)
 40120dc:	e0fffd17 	ldw	r3,-12(fp)
 40120e0:	e0bfff17 	ldw	r2,-4(fp)
 40120e4:	10c00f15 	stw	r3,60(r2)
 40120e8:	e0bfff17 	ldw	r2,-4(fp)
 40120ec:	10803417 	ldw	r2,208(r2)
 40120f0:	1007883a 	mov	r3,r2
 40120f4:	e0bfff17 	ldw	r2,-4(fp)
 40120f8:	10c01015 	stw	r3,64(r2)
 40120fc:	e0bfff17 	ldw	r2,-4(fp)
 4012100:	1009883a 	mov	r4,r2
 4012104:	40117580 	call	4011758 <alt_flash_device_register>
 4012108:	0005883a 	mov	r2,zero
 401210c:	e037883a 	mov	sp,fp
 4012110:	dfc00117 	ldw	ra,4(sp)
 4012114:	df000017 	ldw	fp,0(sp)
 4012118:	dec00204 	addi	sp,sp,8
 401211c:	f800283a 	ret

04012120 <alt_epcq_validate_read_write_arguments>:
 4012120:	defff904 	addi	sp,sp,-28
 4012124:	df000615 	stw	fp,24(sp)
 4012128:	df000604 	addi	fp,sp,24
 401212c:	e13ffd15 	stw	r4,-12(fp)
 4012130:	e17ffe15 	stw	r5,-8(fp)
 4012134:	e1bfff15 	stw	r6,-4(fp)
 4012138:	e03ffa15 	stw	zero,-24(fp)
 401213c:	e03ffb15 	stw	zero,-20(fp)
 4012140:	e03ffc15 	stw	zero,-16(fp)
 4012144:	e0bffd17 	ldw	r2,-12(fp)
 4012148:	1000021e 	bne	r2,zero,4012154 <alt_epcq_validate_read_write_arguments+0x34>
 401214c:	00bffa84 	movi	r2,-22
 4012150:	00001606 	br	40121ac <alt_epcq_validate_read_write_arguments+0x8c>
 4012154:	e0bffd17 	ldw	r2,-12(fp)
 4012158:	e0bffa15 	stw	r2,-24(fp)
 401215c:	e0bffa17 	ldw	r2,-24(fp)
 4012160:	10c02e17 	ldw	r3,184(r2)
 4012164:	e0bffe17 	ldw	r2,-8(fp)
 4012168:	1885883a 	add	r2,r3,r2
 401216c:	e0bffb15 	stw	r2,-20(fp)
 4012170:	e0fffb17 	ldw	r3,-20(fp)
 4012174:	e0bfff17 	ldw	r2,-4(fp)
 4012178:	1885883a 	add	r2,r3,r2
 401217c:	e0bffc15 	stw	r2,-16(fp)
 4012180:	e0bffa17 	ldw	r2,-24(fp)
 4012184:	10802f17 	ldw	r2,188(r2)
 4012188:	e0fffb17 	ldw	r3,-20(fp)
 401218c:	1880042e 	bgeu	r3,r2,40121a0 <alt_epcq_validate_read_write_arguments+0x80>
 4012190:	e0bffa17 	ldw	r2,-24(fp)
 4012194:	10c02f17 	ldw	r3,188(r2)
 4012198:	e0bffc17 	ldw	r2,-16(fp)
 401219c:	1880022e 	bgeu	r3,r2,40121a8 <alt_epcq_validate_read_write_arguments+0x88>
 40121a0:	00bffa84 	movi	r2,-22
 40121a4:	00000106 	br	40121ac <alt_epcq_validate_read_write_arguments+0x8c>
 40121a8:	0005883a 	mov	r2,zero
 40121ac:	e037883a 	mov	sp,fp
 40121b0:	df000017 	ldw	fp,0(sp)
 40121b4:	dec00104 	addi	sp,sp,4
 40121b8:	f800283a 	ret

040121bc <alt_epcq_poll_for_write_in_progress>:
 40121bc:	defffb04 	addi	sp,sp,-20
 40121c0:	dfc00415 	stw	ra,16(sp)
 40121c4:	df000315 	stw	fp,12(sp)
 40121c8:	df000304 	addi	fp,sp,12
 40121cc:	e13fff15 	stw	r4,-4(fp)
 40121d0:	008002f4 	movhi	r2,11
 40121d4:	10ab9804 	addi	r2,r2,-20896
 40121d8:	e0bffe15 	stw	r2,-8(fp)
 40121dc:	e03ffd0d 	sth	zero,-12(fp)
 40121e0:	e0bfff17 	ldw	r2,-4(fp)
 40121e4:	10000c1e 	bne	r2,zero,4012218 <alt_epcq_poll_for_write_in_progress+0x5c>
 40121e8:	00bffa84 	movi	r2,-22
 40121ec:	00001006 	br	4012230 <alt_epcq_poll_for_write_in_progress+0x74>
 40121f0:	01000044 	movi	r4,1
 40121f4:	40129400 	call	4012940 <alt_busy_sleep>
 40121f8:	e0fffd0b 	ldhu	r3,-12(fp)
 40121fc:	e0bffe17 	ldw	r2,-8(fp)
 4012200:	18800236 	bltu	r3,r2,401220c <alt_epcq_poll_for_write_in_progress+0x50>
 4012204:	00bff084 	movi	r2,-62
 4012208:	00000906 	br	4012230 <alt_epcq_poll_for_write_in_progress+0x74>
 401220c:	e0bffd0b 	ldhu	r2,-12(fp)
 4012210:	10800044 	addi	r2,r2,1
 4012214:	e0bffd0d 	sth	r2,-12(fp)
 4012218:	e0bfff17 	ldw	r2,-4(fp)
 401221c:	10803017 	ldw	r2,192(r2)
 4012220:	10800037 	ldwio	r2,0(r2)
 4012224:	1080004c 	andi	r2,r2,1
 4012228:	103ff11e 	bne	r2,zero,40121f0 <__reset+0xfa8221f0>
 401222c:	0005883a 	mov	r2,zero
 4012230:	e037883a 	mov	sp,fp
 4012234:	dfc00117 	ldw	ra,4(sp)
 4012238:	df000017 	ldw	fp,0(sp)
 401223c:	dec00204 	addi	sp,sp,8
 4012240:	f800283a 	ret

04012244 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 4012244:	defffc04 	addi	sp,sp,-16
 4012248:	dfc00315 	stw	ra,12(sp)
 401224c:	df000215 	stw	fp,8(sp)
 4012250:	df000204 	addi	fp,sp,8
 4012254:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 4012258:	d1600a04 	addi	r5,gp,-32728
 401225c:	e13fff17 	ldw	r4,-4(fp)
 4012260:	4012c080 	call	4012c08 <alt_find_dev>
 4012264:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 4012268:	e0bffe17 	ldw	r2,-8(fp)
 401226c:	10800a17 	ldw	r2,40(r2)
 4012270:	10800104 	addi	r2,r2,4
 4012274:	10800037 	ldwio	r2,0(r2)
 4012278:	10803fec 	andhi	r2,r2,255
 401227c:	1005d43a 	srai	r2,r2,16
 4012280:	1007883a 	mov	r3,r2
 4012284:	e0bffe17 	ldw	r2,-8(fp)
 4012288:	10c00b15 	stw	r3,44(r2)

  return dev;
 401228c:	e0bffe17 	ldw	r2,-8(fp)
}
 4012290:	e037883a 	mov	sp,fp
 4012294:	dfc00117 	ldw	ra,4(sp)
 4012298:	df000017 	ldw	fp,0(sp)
 401229c:	dec00204 	addi	sp,sp,8
 40122a0:	f800283a 	ret

040122a4 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 40122a4:	defffc04 	addi	sp,sp,-16
 40122a8:	df000315 	stw	fp,12(sp)
 40122ac:	df000304 	addi	fp,sp,12
 40122b0:	e13ffd15 	stw	r4,-12(fp)
 40122b4:	e17ffe15 	stw	r5,-8(fp)
 40122b8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 40122bc:	e0bffd17 	ldw	r2,-12(fp)
 40122c0:	10800a17 	ldw	r2,40(r2)
 40122c4:	10800204 	addi	r2,r2,8
 40122c8:	1007883a 	mov	r3,r2
 40122cc:	e0bffe17 	ldw	r2,-8(fp)
 40122d0:	10803fcc 	andi	r2,r2,255
 40122d4:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 40122d8:	e0bffd17 	ldw	r2,-12(fp)
 40122dc:	10800a17 	ldw	r2,40(r2)
 40122e0:	10800304 	addi	r2,r2,12
 40122e4:	1007883a 	mov	r3,r2
 40122e8:	e0bfff17 	ldw	r2,-4(fp)
 40122ec:	10bfffcc 	andi	r2,r2,65535
 40122f0:	18800035 	stwio	r2,0(r3)

	return 0;
 40122f4:	0005883a 	mov	r2,zero
}
 40122f8:	e037883a 	mov	sp,fp
 40122fc:	df000017 	ldw	fp,0(sp)
 4012300:	dec00104 	addi	sp,sp,4
 4012304:	f800283a 	ret

04012308 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 4012308:	defffb04 	addi	sp,sp,-20
 401230c:	dfc00415 	stw	ra,16(sp)
 4012310:	df000315 	stw	fp,12(sp)
 4012314:	df000304 	addi	fp,sp,12
 4012318:	e13ffd15 	stw	r4,-12(fp)
 401231c:	e17ffe15 	stw	r5,-8(fp)
 4012320:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 4012324:	e0bffd17 	ldw	r2,-12(fp)
 4012328:	10800a17 	ldw	r2,40(r2)
 401232c:	10800204 	addi	r2,r2,8
 4012330:	1007883a 	mov	r3,r2
 4012334:	e0bffe17 	ldw	r2,-8(fp)
 4012338:	10803fcc 	andi	r2,r2,255
 401233c:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 4012340:	e0bffd17 	ldw	r2,-12(fp)
 4012344:	10800a17 	ldw	r2,40(r2)
 4012348:	10800304 	addi	r2,r2,12
 401234c:	10800037 	ldwio	r2,0(r2)
 4012350:	1007883a 	mov	r3,r2
 4012354:	e0bfff17 	ldw	r2,-4(fp)
 4012358:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 401235c:	e13ffd17 	ldw	r4,-12(fp)
 4012360:	401242c0 	call	401242c <alt_up_av_config_read_acknowledge>
 4012364:	10000226 	beq	r2,zero,4012370 <alt_up_av_config_read_data+0x68>
		return -1;
 4012368:	00bfffc4 	movi	r2,-1
 401236c:	00000106 	br	4012374 <alt_up_av_config_read_data+0x6c>

	return 0;
 4012370:	0005883a 	mov	r2,zero
}
 4012374:	e037883a 	mov	sp,fp
 4012378:	dfc00117 	ldw	ra,4(sp)
 401237c:	df000017 	ldw	fp,0(sp)
 4012380:	dec00204 	addi	sp,sp,8
 4012384:	f800283a 	ret

04012388 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 4012388:	defffe04 	addi	sp,sp,-8
 401238c:	df000115 	stw	fp,4(sp)
 4012390:	df000104 	addi	fp,sp,4
 4012394:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 4012398:	e0bfff17 	ldw	r2,-4(fp)
 401239c:	10800a17 	ldw	r2,40(r2)
 40123a0:	1007883a 	mov	r3,r2
 40123a4:	00800044 	movi	r2,1
 40123a8:	18800025 	stbio	r2,0(r3)
	return 0;
 40123ac:	0005883a 	mov	r2,zero
}
 40123b0:	e037883a 	mov	sp,fp
 40123b4:	df000017 	ldw	fp,0(sp)
 40123b8:	dec00104 	addi	sp,sp,4
 40123bc:	f800283a 	ret

040123c0 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 40123c0:	defffe04 	addi	sp,sp,-8
 40123c4:	df000115 	stw	fp,4(sp)
 40123c8:	df000104 	addi	fp,sp,4
 40123cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 40123d0:	e0bfff17 	ldw	r2,-4(fp)
 40123d4:	10800a17 	ldw	r2,40(r2)
 40123d8:	1007883a 	mov	r3,r2
 40123dc:	00800084 	movi	r2,2
 40123e0:	18800025 	stbio	r2,0(r3)
	return 0;
 40123e4:	0005883a 	mov	r2,zero
}
 40123e8:	e037883a 	mov	sp,fp
 40123ec:	df000017 	ldw	fp,0(sp)
 40123f0:	dec00104 	addi	sp,sp,4
 40123f4:	f800283a 	ret

040123f8 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 40123f8:	defffe04 	addi	sp,sp,-8
 40123fc:	df000115 	stw	fp,4(sp)
 4012400:	df000104 	addi	fp,sp,4
 4012404:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 4012408:	e0bfff17 	ldw	r2,-4(fp)
 401240c:	10800a17 	ldw	r2,40(r2)
 4012410:	0007883a 	mov	r3,zero
 4012414:	10c00025 	stbio	r3,0(r2)
	return 0;
 4012418:	0005883a 	mov	r2,zero
}
 401241c:	e037883a 	mov	sp,fp
 4012420:	df000017 	ldw	fp,0(sp)
 4012424:	dec00104 	addi	sp,sp,4
 4012428:	f800283a 	ret

0401242c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 401242c:	defffe04 	addi	sp,sp,-8
 4012430:	df000115 	stw	fp,4(sp)
 4012434:	df000104 	addi	fp,sp,4
 4012438:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 401243c:	e0bfff17 	ldw	r2,-4(fp)
 4012440:	10800a17 	ldw	r2,40(r2)
 4012444:	10800104 	addi	r2,r2,4
 4012448:	10800037 	ldwio	r2,0(r2)
 401244c:	1080008c 	andi	r2,r2,2
 4012450:	1005d07a 	srai	r2,r2,1
 4012454:	10000626 	beq	r2,zero,4012470 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 4012458:	e0bfff17 	ldw	r2,-4(fp)
 401245c:	10800a17 	ldw	r2,40(r2)
 4012460:	10800104 	addi	r2,r2,4
 4012464:	10800037 	ldwio	r2,0(r2)
 4012468:	1080004c 	andi	r2,r2,1
 401246c:	00000106 	br	4012474 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 4012470:	00bfffc4 	movi	r2,-1
}
 4012474:	e037883a 	mov	sp,fp
 4012478:	df000017 	ldw	fp,0(sp)
 401247c:	dec00104 	addi	sp,sp,4
 4012480:	f800283a 	ret

04012484 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 4012484:	defffe04 	addi	sp,sp,-8
 4012488:	df000115 	stw	fp,4(sp)
 401248c:	df000104 	addi	fp,sp,4
 4012490:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 4012494:	e0bfff17 	ldw	r2,-4(fp)
 4012498:	10800a17 	ldw	r2,40(r2)
 401249c:	10800104 	addi	r2,r2,4
 40124a0:	10800037 	ldwio	r2,0(r2)
 40124a4:	1080008c 	andi	r2,r2,2
 40124a8:	1005d07a 	srai	r2,r2,1
}
 40124ac:	e037883a 	mov	sp,fp
 40124b0:	df000017 	ldw	fp,0(sp)
 40124b4:	dec00104 	addi	sp,sp,4
 40124b8:	f800283a 	ret

040124bc <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 40124bc:	defffa04 	addi	sp,sp,-24
 40124c0:	dfc00515 	stw	ra,20(sp)
 40124c4:	df000415 	stw	fp,16(sp)
 40124c8:	df000404 	addi	fp,sp,16
 40124cc:	e13ffd15 	stw	r4,-12(fp)
 40124d0:	e17ffe15 	stw	r5,-8(fp)
 40124d4:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 40124d8:	e0bffd17 	ldw	r2,-12(fp)
 40124dc:	10800b17 	ldw	r2,44(r2)
 40124e0:	10800060 	cmpeqi	r2,r2,1
 40124e4:	10000e1e 	bne	r2,zero,4012520 <alt_up_av_config_write_audio_cfg_register+0x64>
 40124e8:	e0bffd17 	ldw	r2,-12(fp)
 40124ec:	10800b17 	ldw	r2,44(r2)
 40124f0:	108000a0 	cmpeqi	r2,r2,2
 40124f4:	10000a1e 	bne	r2,zero,4012520 <alt_up_av_config_write_audio_cfg_register+0x64>
 40124f8:	e0bffd17 	ldw	r2,-12(fp)
 40124fc:	10800b17 	ldw	r2,44(r2)
 4012500:	108000e0 	cmpeqi	r2,r2,3
 4012504:	1000061e 	bne	r2,zero,4012520 <alt_up_av_config_write_audio_cfg_register+0x64>
 4012508:	e0bffd17 	ldw	r2,-12(fp)
 401250c:	10800b17 	ldw	r2,44(r2)
 4012510:	10800120 	cmpeqi	r2,r2,4
 4012514:	1000021e 	bne	r2,zero,4012520 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 4012518:	00bffa84 	movi	r2,-22
 401251c:	00000b06 	br	401254c <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 4012520:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 4012524:	e0bffd17 	ldw	r2,-12(fp)
 4012528:	10800a17 	ldw	r2,40(r2)
 401252c:	10800084 	addi	r2,r2,2
 4012530:	1007883a 	mov	r3,r2
 4012534:	e0bffc17 	ldw	r2,-16(fp)
 4012538:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 401253c:	e1bfff17 	ldw	r6,-4(fp)
 4012540:	e17ffe17 	ldw	r5,-8(fp)
 4012544:	e13ffd17 	ldw	r4,-12(fp)
 4012548:	40122a40 	call	40122a4 <alt_up_av_config_write_data>
}
 401254c:	e037883a 	mov	sp,fp
 4012550:	dfc00117 	ldw	ra,4(sp)
 4012554:	df000017 	ldw	fp,0(sp)
 4012558:	dec00204 	addi	sp,sp,8
 401255c:	f800283a 	ret

04012560 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 4012560:	defffa04 	addi	sp,sp,-24
 4012564:	dfc00515 	stw	ra,20(sp)
 4012568:	df000415 	stw	fp,16(sp)
 401256c:	df000404 	addi	fp,sp,16
 4012570:	e13ffc15 	stw	r4,-16(fp)
 4012574:	e17ffd15 	stw	r5,-12(fp)
 4012578:	e1bffe15 	stw	r6,-8(fp)
 401257c:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4012580:	e0bffc17 	ldw	r2,-16(fp)
 4012584:	10800b17 	ldw	r2,44(r2)
 4012588:	108000a0 	cmpeqi	r2,r2,2
 401258c:	10000a1e 	bne	r2,zero,40125b8 <alt_up_av_config_read_video_cfg_register+0x58>
 4012590:	e0bffc17 	ldw	r2,-16(fp)
 4012594:	10800b17 	ldw	r2,44(r2)
 4012598:	108000e0 	cmpeqi	r2,r2,3
 401259c:	1000061e 	bne	r2,zero,40125b8 <alt_up_av_config_read_video_cfg_register+0x58>
 40125a0:	e0bffc17 	ldw	r2,-16(fp)
 40125a4:	10800b17 	ldw	r2,44(r2)
 40125a8:	10800120 	cmpeqi	r2,r2,4
 40125ac:	1000021e 	bne	r2,zero,40125b8 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 40125b0:	00bffa84 	movi	r2,-22
 40125b4:	00001f06 	br	4012634 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 40125b8:	e0bffc17 	ldw	r2,-16(fp)
 40125bc:	10800b17 	ldw	r2,44(r2)
 40125c0:	108000a0 	cmpeqi	r2,r2,2
 40125c4:	1000041e 	bne	r2,zero,40125d8 <alt_up_av_config_read_video_cfg_register+0x78>
 40125c8:	e0bffc17 	ldw	r2,-16(fp)
 40125cc:	10800b17 	ldw	r2,44(r2)
 40125d0:	10800118 	cmpnei	r2,r2,4
 40125d4:	1000051e 	bne	r2,zero,40125ec <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 40125d8:	e0bfff17 	ldw	r2,-4(fp)
 40125dc:	10800060 	cmpeqi	r2,r2,1
 40125e0:	10000a1e 	bne	r2,zero,401260c <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 40125e4:	00bffa84 	movi	r2,-22
 40125e8:	00001206 	br	4012634 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 40125ec:	e0bfff17 	ldw	r2,-4(fp)
 40125f0:	10800060 	cmpeqi	r2,r2,1
 40125f4:	1000051e 	bne	r2,zero,401260c <alt_up_av_config_read_video_cfg_register+0xac>
 40125f8:	e0bfff17 	ldw	r2,-4(fp)
 40125fc:	108000a0 	cmpeqi	r2,r2,2
 4012600:	1000021e 	bne	r2,zero,401260c <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 4012604:	00bffa84 	movi	r2,-22
 4012608:	00000a06 	br	4012634 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 401260c:	e0bffc17 	ldw	r2,-16(fp)
 4012610:	10800a17 	ldw	r2,40(r2)
 4012614:	10800084 	addi	r2,r2,2
 4012618:	1007883a 	mov	r3,r2
 401261c:	e0bfff17 	ldw	r2,-4(fp)
 4012620:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 4012624:	e1bffe17 	ldw	r6,-8(fp)
 4012628:	e17ffd17 	ldw	r5,-12(fp)
 401262c:	e13ffc17 	ldw	r4,-16(fp)
 4012630:	40123080 	call	4012308 <alt_up_av_config_read_data>
}
 4012634:	e037883a 	mov	sp,fp
 4012638:	dfc00117 	ldw	ra,4(sp)
 401263c:	df000017 	ldw	fp,0(sp)
 4012640:	dec00204 	addi	sp,sp,8
 4012644:	f800283a 	ret

04012648 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 4012648:	defffa04 	addi	sp,sp,-24
 401264c:	dfc00515 	stw	ra,20(sp)
 4012650:	df000415 	stw	fp,16(sp)
 4012654:	df000404 	addi	fp,sp,16
 4012658:	e13ffc15 	stw	r4,-16(fp)
 401265c:	e17ffd15 	stw	r5,-12(fp)
 4012660:	e1bffe15 	stw	r6,-8(fp)
 4012664:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4012668:	e0bffc17 	ldw	r2,-16(fp)
 401266c:	10800b17 	ldw	r2,44(r2)
 4012670:	108000a0 	cmpeqi	r2,r2,2
 4012674:	10000a1e 	bne	r2,zero,40126a0 <alt_up_av_config_write_video_cfg_register+0x58>
 4012678:	e0bffc17 	ldw	r2,-16(fp)
 401267c:	10800b17 	ldw	r2,44(r2)
 4012680:	108000e0 	cmpeqi	r2,r2,3
 4012684:	1000061e 	bne	r2,zero,40126a0 <alt_up_av_config_write_video_cfg_register+0x58>
 4012688:	e0bffc17 	ldw	r2,-16(fp)
 401268c:	10800b17 	ldw	r2,44(r2)
 4012690:	10800120 	cmpeqi	r2,r2,4
 4012694:	1000021e 	bne	r2,zero,40126a0 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 4012698:	00bffa84 	movi	r2,-22
 401269c:	00001f06 	br	401271c <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 40126a0:	e0bffc17 	ldw	r2,-16(fp)
 40126a4:	10800b17 	ldw	r2,44(r2)
 40126a8:	108000a0 	cmpeqi	r2,r2,2
 40126ac:	1000041e 	bne	r2,zero,40126c0 <alt_up_av_config_write_video_cfg_register+0x78>
 40126b0:	e0bffc17 	ldw	r2,-16(fp)
 40126b4:	10800b17 	ldw	r2,44(r2)
 40126b8:	10800118 	cmpnei	r2,r2,4
 40126bc:	1000051e 	bne	r2,zero,40126d4 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 40126c0:	e0bfff17 	ldw	r2,-4(fp)
 40126c4:	10800060 	cmpeqi	r2,r2,1
 40126c8:	10000a1e 	bne	r2,zero,40126f4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 40126cc:	00bffa84 	movi	r2,-22
 40126d0:	00001206 	br	401271c <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 40126d4:	e0bfff17 	ldw	r2,-4(fp)
 40126d8:	10800060 	cmpeqi	r2,r2,1
 40126dc:	1000051e 	bne	r2,zero,40126f4 <alt_up_av_config_write_video_cfg_register+0xac>
 40126e0:	e0bfff17 	ldw	r2,-4(fp)
 40126e4:	108000a0 	cmpeqi	r2,r2,2
 40126e8:	1000021e 	bne	r2,zero,40126f4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 40126ec:	00bffa84 	movi	r2,-22
 40126f0:	00000a06 	br	401271c <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 40126f4:	e0bffc17 	ldw	r2,-16(fp)
 40126f8:	10800a17 	ldw	r2,40(r2)
 40126fc:	10800084 	addi	r2,r2,2
 4012700:	1007883a 	mov	r3,r2
 4012704:	e0bfff17 	ldw	r2,-4(fp)
 4012708:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 401270c:	e1bffe17 	ldw	r6,-8(fp)
 4012710:	e17ffd17 	ldw	r5,-12(fp)
 4012714:	e13ffc17 	ldw	r4,-16(fp)
 4012718:	40122a40 	call	40122a4 <alt_up_av_config_write_data>
}
 401271c:	e037883a 	mov	sp,fp
 4012720:	dfc00117 	ldw	ra,4(sp)
 4012724:	df000017 	ldw	fp,0(sp)
 4012728:	dec00204 	addi	sp,sp,8
 401272c:	f800283a 	ret

04012730 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 4012730:	defffb04 	addi	sp,sp,-20
 4012734:	dfc00415 	stw	ra,16(sp)
 4012738:	df000315 	stw	fp,12(sp)
 401273c:	df000304 	addi	fp,sp,12
 4012740:	e13ffd15 	stw	r4,-12(fp)
 4012744:	e17ffe15 	stw	r5,-8(fp)
 4012748:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 401274c:	e0bffd17 	ldw	r2,-12(fp)
 4012750:	10800b17 	ldw	r2,44(r2)
 4012754:	10800220 	cmpeqi	r2,r2,8
 4012758:	1000021e 	bne	r2,zero,4012764 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 401275c:	00bffa84 	movi	r2,-22
 4012760:	00000406 	br	4012774 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 4012764:	e1bfff17 	ldw	r6,-4(fp)
 4012768:	e17ffe17 	ldw	r5,-8(fp)
 401276c:	e13ffd17 	ldw	r4,-12(fp)
 4012770:	40123080 	call	4012308 <alt_up_av_config_read_data>
}
 4012774:	e037883a 	mov	sp,fp
 4012778:	dfc00117 	ldw	ra,4(sp)
 401277c:	df000017 	ldw	fp,0(sp)
 4012780:	dec00204 	addi	sp,sp,8
 4012784:	f800283a 	ret

04012788 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4012788:	defffb04 	addi	sp,sp,-20
 401278c:	dfc00415 	stw	ra,16(sp)
 4012790:	df000315 	stw	fp,12(sp)
 4012794:	df000304 	addi	fp,sp,12
 4012798:	e13ffd15 	stw	r4,-12(fp)
 401279c:	e17ffe15 	stw	r5,-8(fp)
 40127a0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 40127a4:	e0bffd17 	ldw	r2,-12(fp)
 40127a8:	10800b17 	ldw	r2,44(r2)
 40127ac:	10800220 	cmpeqi	r2,r2,8
 40127b0:	1000021e 	bne	r2,zero,40127bc <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 40127b4:	00bffa84 	movi	r2,-22
 40127b8:	00000406 	br	40127cc <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 40127bc:	e1bfff17 	ldw	r6,-4(fp)
 40127c0:	e17ffe17 	ldw	r5,-8(fp)
 40127c4:	e13ffd17 	ldw	r4,-12(fp)
 40127c8:	40122a40 	call	40122a4 <alt_up_av_config_write_data>
}
 40127cc:	e037883a 	mov	sp,fp
 40127d0:	dfc00117 	ldw	ra,4(sp)
 40127d4:	df000017 	ldw	fp,0(sp)
 40127d8:	dec00204 	addi	sp,sp,8
 40127dc:	f800283a 	ret

040127e0 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 40127e0:	defffb04 	addi	sp,sp,-20
 40127e4:	dfc00415 	stw	ra,16(sp)
 40127e8:	df000315 	stw	fp,12(sp)
 40127ec:	df000304 	addi	fp,sp,12
 40127f0:	e13ffd15 	stw	r4,-12(fp)
 40127f4:	e17ffe15 	stw	r5,-8(fp)
 40127f8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 40127fc:	e0bffd17 	ldw	r2,-12(fp)
 4012800:	10800b17 	ldw	r2,44(r2)
 4012804:	10800260 	cmpeqi	r2,r2,9
 4012808:	1000021e 	bne	r2,zero,4012814 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 401280c:	00bffa84 	movi	r2,-22
 4012810:	00000406 	br	4012824 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 4012814:	e1bfff17 	ldw	r6,-4(fp)
 4012818:	e17ffe17 	ldw	r5,-8(fp)
 401281c:	e13ffd17 	ldw	r4,-12(fp)
 4012820:	40123080 	call	4012308 <alt_up_av_config_read_data>
}
 4012824:	e037883a 	mov	sp,fp
 4012828:	dfc00117 	ldw	ra,4(sp)
 401282c:	df000017 	ldw	fp,0(sp)
 4012830:	dec00204 	addi	sp,sp,8
 4012834:	f800283a 	ret

04012838 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4012838:	defffb04 	addi	sp,sp,-20
 401283c:	dfc00415 	stw	ra,16(sp)
 4012840:	df000315 	stw	fp,12(sp)
 4012844:	df000304 	addi	fp,sp,12
 4012848:	e13ffd15 	stw	r4,-12(fp)
 401284c:	e17ffe15 	stw	r5,-8(fp)
 4012850:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 4012854:	e0bffd17 	ldw	r2,-12(fp)
 4012858:	10800b17 	ldw	r2,44(r2)
 401285c:	10800260 	cmpeqi	r2,r2,9
 4012860:	1000021e 	bne	r2,zero,401286c <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 4012864:	00bffa84 	movi	r2,-22
 4012868:	00000406 	br	401287c <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 401286c:	e1bfff17 	ldw	r6,-4(fp)
 4012870:	e17ffe17 	ldw	r5,-8(fp)
 4012874:	e13ffd17 	ldw	r4,-12(fp)
 4012878:	40122a40 	call	40122a4 <alt_up_av_config_write_data>
}
 401287c:	e037883a 	mov	sp,fp
 4012880:	dfc00117 	ldw	ra,4(sp)
 4012884:	df000017 	ldw	fp,0(sp)
 4012888:	dec00204 	addi	sp,sp,8
 401288c:	f800283a 	ret

04012890 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 4012890:	defffb04 	addi	sp,sp,-20
 4012894:	dfc00415 	stw	ra,16(sp)
 4012898:	df000315 	stw	fp,12(sp)
 401289c:	df000304 	addi	fp,sp,12
 40128a0:	e13ffd15 	stw	r4,-12(fp)
 40128a4:	e17ffe15 	stw	r5,-8(fp)
 40128a8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 40128ac:	e0bffd17 	ldw	r2,-12(fp)
 40128b0:	10800b17 	ldw	r2,44(r2)
 40128b4:	108002a0 	cmpeqi	r2,r2,10
 40128b8:	1000021e 	bne	r2,zero,40128c4 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 40128bc:	00bffa84 	movi	r2,-22
 40128c0:	00000406 	br	40128d4 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 40128c4:	e1bfff17 	ldw	r6,-4(fp)
 40128c8:	e17ffe17 	ldw	r5,-8(fp)
 40128cc:	e13ffd17 	ldw	r4,-12(fp)
 40128d0:	40123080 	call	4012308 <alt_up_av_config_read_data>
}
 40128d4:	e037883a 	mov	sp,fp
 40128d8:	dfc00117 	ldw	ra,4(sp)
 40128dc:	df000017 	ldw	fp,0(sp)
 40128e0:	dec00204 	addi	sp,sp,8
 40128e4:	f800283a 	ret

040128e8 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 40128e8:	defffb04 	addi	sp,sp,-20
 40128ec:	dfc00415 	stw	ra,16(sp)
 40128f0:	df000315 	stw	fp,12(sp)
 40128f4:	df000304 	addi	fp,sp,12
 40128f8:	e13ffd15 	stw	r4,-12(fp)
 40128fc:	e17ffe15 	stw	r5,-8(fp)
 4012900:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 4012904:	e0bffd17 	ldw	r2,-12(fp)
 4012908:	10800b17 	ldw	r2,44(r2)
 401290c:	108002a0 	cmpeqi	r2,r2,10
 4012910:	1000021e 	bne	r2,zero,401291c <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 4012914:	00bffa84 	movi	r2,-22
 4012918:	00000406 	br	401292c <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 401291c:	e1bfff17 	ldw	r6,-4(fp)
 4012920:	e17ffe17 	ldw	r5,-8(fp)
 4012924:	e13ffd17 	ldw	r4,-12(fp)
 4012928:	40122a40 	call	40122a4 <alt_up_av_config_write_data>
}
 401292c:	e037883a 	mov	sp,fp
 4012930:	dfc00117 	ldw	ra,4(sp)
 4012934:	df000017 	ldw	fp,0(sp)
 4012938:	dec00204 	addi	sp,sp,8
 401293c:	f800283a 	ret

04012940 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4012940:	defffb04 	addi	sp,sp,-20
 4012944:	df000415 	stw	fp,16(sp)
 4012948:	df000404 	addi	fp,sp,16
 401294c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4012950:	008000c4 	movi	r2,3
 4012954:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4012958:	e0fffd17 	ldw	r3,-12(fp)
 401295c:	008003f4 	movhi	r2,15
 4012960:	10909004 	addi	r2,r2,16960
 4012964:	1887383a 	mul	r3,r3,r2
 4012968:	0080bef4 	movhi	r2,763
 401296c:	10bc2004 	addi	r2,r2,-3968
 4012970:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4012974:	00a00034 	movhi	r2,32768
 4012978:	10bfffc4 	addi	r2,r2,-1
 401297c:	10c5203a 	divu	r2,r2,r3
 4012980:	e0ffff17 	ldw	r3,-4(fp)
 4012984:	1885203a 	divu	r2,r3,r2
 4012988:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401298c:	e0bffe17 	ldw	r2,-8(fp)
 4012990:	10002526 	beq	r2,zero,4012a28 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 4012994:	e03ffc15 	stw	zero,-16(fp)
 4012998:	00001406 	br	40129ec <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401299c:	00a00034 	movhi	r2,32768
 40129a0:	10bfffc4 	addi	r2,r2,-1
 40129a4:	10bfffc4 	addi	r2,r2,-1
 40129a8:	103ffe1e 	bne	r2,zero,40129a4 <__reset+0xfa8229a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40129ac:	e0fffd17 	ldw	r3,-12(fp)
 40129b0:	008003f4 	movhi	r2,15
 40129b4:	10909004 	addi	r2,r2,16960
 40129b8:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40129bc:	0080bef4 	movhi	r2,763
 40129c0:	10bc2004 	addi	r2,r2,-3968
 40129c4:	10c7203a 	divu	r3,r2,r3
 40129c8:	00a00034 	movhi	r2,32768
 40129cc:	10bfffc4 	addi	r2,r2,-1
 40129d0:	10c5203a 	divu	r2,r2,r3
 40129d4:	e0ffff17 	ldw	r3,-4(fp)
 40129d8:	1885c83a 	sub	r2,r3,r2
 40129dc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40129e0:	e0bffc17 	ldw	r2,-16(fp)
 40129e4:	10800044 	addi	r2,r2,1
 40129e8:	e0bffc15 	stw	r2,-16(fp)
 40129ec:	e0fffc17 	ldw	r3,-16(fp)
 40129f0:	e0bffe17 	ldw	r2,-8(fp)
 40129f4:	18bfe916 	blt	r3,r2,401299c <__reset+0xfa82299c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40129f8:	e0fffd17 	ldw	r3,-12(fp)
 40129fc:	008003f4 	movhi	r2,15
 4012a00:	10909004 	addi	r2,r2,16960
 4012a04:	1887383a 	mul	r3,r3,r2
 4012a08:	0080bef4 	movhi	r2,763
 4012a0c:	10bc2004 	addi	r2,r2,-3968
 4012a10:	10c7203a 	divu	r3,r2,r3
 4012a14:	e0bfff17 	ldw	r2,-4(fp)
 4012a18:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012a1c:	10bfffc4 	addi	r2,r2,-1
 4012a20:	103ffe1e 	bne	r2,zero,4012a1c <__reset+0xfa822a1c>
 4012a24:	00000b06 	br	4012a54 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4012a28:	e0fffd17 	ldw	r3,-12(fp)
 4012a2c:	008003f4 	movhi	r2,15
 4012a30:	10909004 	addi	r2,r2,16960
 4012a34:	1887383a 	mul	r3,r3,r2
 4012a38:	0080bef4 	movhi	r2,763
 4012a3c:	10bc2004 	addi	r2,r2,-3968
 4012a40:	10c7203a 	divu	r3,r2,r3
 4012a44:	e0bfff17 	ldw	r2,-4(fp)
 4012a48:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012a4c:	10bfffc4 	addi	r2,r2,-1
 4012a50:	00bffe16 	blt	zero,r2,4012a4c <__reset+0xfa822a4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4012a54:	0005883a 	mov	r2,zero
}
 4012a58:	e037883a 	mov	sp,fp
 4012a5c:	df000017 	ldw	fp,0(sp)
 4012a60:	dec00104 	addi	sp,sp,4
 4012a64:	f800283a 	ret

04012a68 <alt_get_errno>:
 4012a68:	defffe04 	addi	sp,sp,-8
 4012a6c:	dfc00115 	stw	ra,4(sp)
 4012a70:	df000015 	stw	fp,0(sp)
 4012a74:	d839883a 	mov	fp,sp
 4012a78:	d0a00d17 	ldw	r2,-32716(gp)
 4012a7c:	10000326 	beq	r2,zero,4012a8c <alt_get_errno+0x24>
 4012a80:	d0a00d17 	ldw	r2,-32716(gp)
 4012a84:	103ee83a 	callr	r2
 4012a88:	00000106 	br	4012a90 <alt_get_errno+0x28>
 4012a8c:	d0a01e04 	addi	r2,gp,-32648
 4012a90:	e037883a 	mov	sp,fp
 4012a94:	dfc00117 	ldw	ra,4(sp)
 4012a98:	df000017 	ldw	fp,0(sp)
 4012a9c:	dec00204 	addi	sp,sp,8
 4012aa0:	f800283a 	ret

04012aa4 <alt_dev_llist_insert>:
 4012aa4:	defffa04 	addi	sp,sp,-24
 4012aa8:	dfc00515 	stw	ra,20(sp)
 4012aac:	df000415 	stw	fp,16(sp)
 4012ab0:	df000404 	addi	fp,sp,16
 4012ab4:	e13ffe15 	stw	r4,-8(fp)
 4012ab8:	e17fff15 	stw	r5,-4(fp)
 4012abc:	e0bffe17 	ldw	r2,-8(fp)
 4012ac0:	10000326 	beq	r2,zero,4012ad0 <alt_dev_llist_insert+0x2c>
 4012ac4:	e0bffe17 	ldw	r2,-8(fp)
 4012ac8:	10800217 	ldw	r2,8(r2)
 4012acc:	1000061e 	bne	r2,zero,4012ae8 <alt_dev_llist_insert+0x44>
 4012ad0:	4012a680 	call	4012a68 <alt_get_errno>
 4012ad4:	1007883a 	mov	r3,r2
 4012ad8:	00800584 	movi	r2,22
 4012adc:	18800015 	stw	r2,0(r3)
 4012ae0:	00bffa84 	movi	r2,-22
 4012ae4:	00001306 	br	4012b34 <alt_dev_llist_insert+0x90>
 4012ae8:	e0bffe17 	ldw	r2,-8(fp)
 4012aec:	e0ffff17 	ldw	r3,-4(fp)
 4012af0:	e0fffc15 	stw	r3,-16(fp)
 4012af4:	e0bffd15 	stw	r2,-12(fp)
 4012af8:	e0bffd17 	ldw	r2,-12(fp)
 4012afc:	e0fffc17 	ldw	r3,-16(fp)
 4012b00:	10c00115 	stw	r3,4(r2)
 4012b04:	e0bffc17 	ldw	r2,-16(fp)
 4012b08:	10c00017 	ldw	r3,0(r2)
 4012b0c:	e0bffd17 	ldw	r2,-12(fp)
 4012b10:	10c00015 	stw	r3,0(r2)
 4012b14:	e0bffc17 	ldw	r2,-16(fp)
 4012b18:	10800017 	ldw	r2,0(r2)
 4012b1c:	e0fffd17 	ldw	r3,-12(fp)
 4012b20:	10c00115 	stw	r3,4(r2)
 4012b24:	e0bffc17 	ldw	r2,-16(fp)
 4012b28:	e0fffd17 	ldw	r3,-12(fp)
 4012b2c:	10c00015 	stw	r3,0(r2)
 4012b30:	0005883a 	mov	r2,zero
 4012b34:	e037883a 	mov	sp,fp
 4012b38:	dfc00117 	ldw	ra,4(sp)
 4012b3c:	df000017 	ldw	fp,0(sp)
 4012b40:	dec00204 	addi	sp,sp,8
 4012b44:	f800283a 	ret

04012b48 <_do_ctors>:
 4012b48:	defffd04 	addi	sp,sp,-12
 4012b4c:	dfc00215 	stw	ra,8(sp)
 4012b50:	df000115 	stw	fp,4(sp)
 4012b54:	df000104 	addi	fp,sp,4
 4012b58:	00810074 	movhi	r2,1025
 4012b5c:	108db904 	addi	r2,r2,14052
 4012b60:	e0bfff15 	stw	r2,-4(fp)
 4012b64:	00000606 	br	4012b80 <_do_ctors+0x38>
 4012b68:	e0bfff17 	ldw	r2,-4(fp)
 4012b6c:	10800017 	ldw	r2,0(r2)
 4012b70:	103ee83a 	callr	r2
 4012b74:	e0bfff17 	ldw	r2,-4(fp)
 4012b78:	10bfff04 	addi	r2,r2,-4
 4012b7c:	e0bfff15 	stw	r2,-4(fp)
 4012b80:	e0ffff17 	ldw	r3,-4(fp)
 4012b84:	00810074 	movhi	r2,1025
 4012b88:	108dba04 	addi	r2,r2,14056
 4012b8c:	18bff62e 	bgeu	r3,r2,4012b68 <__reset+0xfa822b68>
 4012b90:	0001883a 	nop
 4012b94:	e037883a 	mov	sp,fp
 4012b98:	dfc00117 	ldw	ra,4(sp)
 4012b9c:	df000017 	ldw	fp,0(sp)
 4012ba0:	dec00204 	addi	sp,sp,8
 4012ba4:	f800283a 	ret

04012ba8 <_do_dtors>:
 4012ba8:	defffd04 	addi	sp,sp,-12
 4012bac:	dfc00215 	stw	ra,8(sp)
 4012bb0:	df000115 	stw	fp,4(sp)
 4012bb4:	df000104 	addi	fp,sp,4
 4012bb8:	00810074 	movhi	r2,1025
 4012bbc:	108db904 	addi	r2,r2,14052
 4012bc0:	e0bfff15 	stw	r2,-4(fp)
 4012bc4:	00000606 	br	4012be0 <_do_dtors+0x38>
 4012bc8:	e0bfff17 	ldw	r2,-4(fp)
 4012bcc:	10800017 	ldw	r2,0(r2)
 4012bd0:	103ee83a 	callr	r2
 4012bd4:	e0bfff17 	ldw	r2,-4(fp)
 4012bd8:	10bfff04 	addi	r2,r2,-4
 4012bdc:	e0bfff15 	stw	r2,-4(fp)
 4012be0:	e0ffff17 	ldw	r3,-4(fp)
 4012be4:	00810074 	movhi	r2,1025
 4012be8:	108dba04 	addi	r2,r2,14056
 4012bec:	18bff62e 	bgeu	r3,r2,4012bc8 <__reset+0xfa822bc8>
 4012bf0:	0001883a 	nop
 4012bf4:	e037883a 	mov	sp,fp
 4012bf8:	dfc00117 	ldw	ra,4(sp)
 4012bfc:	df000017 	ldw	fp,0(sp)
 4012c00:	dec00204 	addi	sp,sp,8
 4012c04:	f800283a 	ret

04012c08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4012c08:	defffa04 	addi	sp,sp,-24
 4012c0c:	dfc00515 	stw	ra,20(sp)
 4012c10:	df000415 	stw	fp,16(sp)
 4012c14:	df000404 	addi	fp,sp,16
 4012c18:	e13ffe15 	stw	r4,-8(fp)
 4012c1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4012c20:	e0bfff17 	ldw	r2,-4(fp)
 4012c24:	10800017 	ldw	r2,0(r2)
 4012c28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4012c2c:	e13ffe17 	ldw	r4,-8(fp)
 4012c30:	40025d00 	call	40025d0 <strlen>
 4012c34:	10800044 	addi	r2,r2,1
 4012c38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4012c3c:	00000d06 	br	4012c74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4012c40:	e0bffc17 	ldw	r2,-16(fp)
 4012c44:	10800217 	ldw	r2,8(r2)
 4012c48:	e0fffd17 	ldw	r3,-12(fp)
 4012c4c:	180d883a 	mov	r6,r3
 4012c50:	e17ffe17 	ldw	r5,-8(fp)
 4012c54:	1009883a 	mov	r4,r2
 4012c58:	40133a00 	call	40133a0 <memcmp>
 4012c5c:	1000021e 	bne	r2,zero,4012c68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4012c60:	e0bffc17 	ldw	r2,-16(fp)
 4012c64:	00000706 	br	4012c84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4012c68:	e0bffc17 	ldw	r2,-16(fp)
 4012c6c:	10800017 	ldw	r2,0(r2)
 4012c70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4012c74:	e0fffc17 	ldw	r3,-16(fp)
 4012c78:	e0bfff17 	ldw	r2,-4(fp)
 4012c7c:	18bff01e 	bne	r3,r2,4012c40 <__reset+0xfa822c40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4012c80:	0005883a 	mov	r2,zero
}
 4012c84:	e037883a 	mov	sp,fp
 4012c88:	dfc00117 	ldw	ra,4(sp)
 4012c8c:	df000017 	ldw	fp,0(sp)
 4012c90:	dec00204 	addi	sp,sp,8
 4012c94:	f800283a 	ret

04012c98 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4012c98:	defffc04 	addi	sp,sp,-16
 4012c9c:	dfc00315 	stw	ra,12(sp)
 4012ca0:	df000215 	stw	fp,8(sp)
 4012ca4:	df000204 	addi	fp,sp,8
 4012ca8:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4012cac:	d1601204 	addi	r5,gp,-32696
 4012cb0:	e13fff17 	ldw	r4,-4(fp)
 4012cb4:	4012c080 	call	4012c08 <alt_find_dev>
 4012cb8:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 4012cbc:	e0bffe17 	ldw	r2,-8(fp)
 4012cc0:	10000926 	beq	r2,zero,4012ce8 <alt_flash_open_dev+0x50>
 4012cc4:	e0bffe17 	ldw	r2,-8(fp)
 4012cc8:	10800317 	ldw	r2,12(r2)
 4012ccc:	10000626 	beq	r2,zero,4012ce8 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 4012cd0:	e0bffe17 	ldw	r2,-8(fp)
 4012cd4:	10800317 	ldw	r2,12(r2)
 4012cd8:	e17fff17 	ldw	r5,-4(fp)
 4012cdc:	e13ffe17 	ldw	r4,-8(fp)
 4012ce0:	103ee83a 	callr	r2
 4012ce4:	00000106 	br	4012cec <alt_flash_open_dev+0x54>
  }

  return dev;
 4012ce8:	e0bffe17 	ldw	r2,-8(fp)
}
 4012cec:	e037883a 	mov	sp,fp
 4012cf0:	dfc00117 	ldw	ra,4(sp)
 4012cf4:	df000017 	ldw	fp,0(sp)
 4012cf8:	dec00204 	addi	sp,sp,8
 4012cfc:	f800283a 	ret

04012d00 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 4012d00:	defffd04 	addi	sp,sp,-12
 4012d04:	dfc00215 	stw	ra,8(sp)
 4012d08:	df000115 	stw	fp,4(sp)
 4012d0c:	df000104 	addi	fp,sp,4
 4012d10:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4012d14:	e0bfff17 	ldw	r2,-4(fp)
 4012d18:	10000826 	beq	r2,zero,4012d3c <alt_flash_close_dev+0x3c>
 4012d1c:	e0bfff17 	ldw	r2,-4(fp)
 4012d20:	10800417 	ldw	r2,16(r2)
 4012d24:	10000526 	beq	r2,zero,4012d3c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 4012d28:	e0bfff17 	ldw	r2,-4(fp)
 4012d2c:	10800417 	ldw	r2,16(r2)
 4012d30:	e13fff17 	ldw	r4,-4(fp)
 4012d34:	103ee83a 	callr	r2
  }
  return;
 4012d38:	0001883a 	nop
 4012d3c:	0001883a 	nop
}
 4012d40:	e037883a 	mov	sp,fp
 4012d44:	dfc00117 	ldw	ra,4(sp)
 4012d48:	df000017 	ldw	fp,0(sp)
 4012d4c:	dec00204 	addi	sp,sp,8
 4012d50:	f800283a 	ret

04012d54 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4012d54:	defffe04 	addi	sp,sp,-8
 4012d58:	df000115 	stw	fp,4(sp)
 4012d5c:	df000104 	addi	fp,sp,4
 4012d60:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4012d64:	e0bfff17 	ldw	r2,-4(fp)
 4012d68:	10bffe84 	addi	r2,r2,-6
 4012d6c:	10c00428 	cmpgeui	r3,r2,16
 4012d70:	18001a1e 	bne	r3,zero,4012ddc <alt_exception_cause_generated_bad_addr+0x88>
 4012d74:	100690ba 	slli	r3,r2,2
 4012d78:	00810074 	movhi	r2,1025
 4012d7c:	108b6304 	addi	r2,r2,11660
 4012d80:	1885883a 	add	r2,r3,r2
 4012d84:	10800017 	ldw	r2,0(r2)
 4012d88:	1000683a 	jmp	r2
 4012d8c:	04012dcc 	andi	r16,zero,1207
 4012d90:	04012dcc 	andi	r16,zero,1207
 4012d94:	04012ddc 	xori	r16,zero,1207
 4012d98:	04012ddc 	xori	r16,zero,1207
 4012d9c:	04012ddc 	xori	r16,zero,1207
 4012da0:	04012dcc 	andi	r16,zero,1207
 4012da4:	04012dd4 	movui	r16,1207
 4012da8:	04012ddc 	xori	r16,zero,1207
 4012dac:	04012dcc 	andi	r16,zero,1207
 4012db0:	04012dcc 	andi	r16,zero,1207
 4012db4:	04012ddc 	xori	r16,zero,1207
 4012db8:	04012dcc 	andi	r16,zero,1207
 4012dbc:	04012dd4 	movui	r16,1207
 4012dc0:	04012ddc 	xori	r16,zero,1207
 4012dc4:	04012ddc 	xori	r16,zero,1207
 4012dc8:	04012dcc 	andi	r16,zero,1207
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4012dcc:	00800044 	movi	r2,1
 4012dd0:	00000306 	br	4012de0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4012dd4:	0005883a 	mov	r2,zero
 4012dd8:	00000106 	br	4012de0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4012ddc:	0005883a 	mov	r2,zero
  }
}
 4012de0:	e037883a 	mov	sp,fp
 4012de4:	df000017 	ldw	fp,0(sp)
 4012de8:	dec00104 	addi	sp,sp,4
 4012dec:	f800283a 	ret

04012df0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4012df0:	defff904 	addi	sp,sp,-28
 4012df4:	dfc00615 	stw	ra,24(sp)
 4012df8:	df000515 	stw	fp,20(sp)
 4012dfc:	df000504 	addi	fp,sp,20
 4012e00:	e13ffc15 	stw	r4,-16(fp)
 4012e04:	e17ffd15 	stw	r5,-12(fp)
 4012e08:	e1bffe15 	stw	r6,-8(fp)
 4012e0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4012e10:	e1bfff17 	ldw	r6,-4(fp)
 4012e14:	e17ffe17 	ldw	r5,-8(fp)
 4012e18:	e13ffd17 	ldw	r4,-12(fp)
 4012e1c:	40130300 	call	4013030 <open>
 4012e20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4012e24:	e0bffb17 	ldw	r2,-20(fp)
 4012e28:	10001c16 	blt	r2,zero,4012e9c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4012e2c:	00810074 	movhi	r2,1025
 4012e30:	10984804 	addi	r2,r2,24864
 4012e34:	e0fffb17 	ldw	r3,-20(fp)
 4012e38:	18c00324 	muli	r3,r3,12
 4012e3c:	10c5883a 	add	r2,r2,r3
 4012e40:	10c00017 	ldw	r3,0(r2)
 4012e44:	e0bffc17 	ldw	r2,-16(fp)
 4012e48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4012e4c:	00810074 	movhi	r2,1025
 4012e50:	10984804 	addi	r2,r2,24864
 4012e54:	e0fffb17 	ldw	r3,-20(fp)
 4012e58:	18c00324 	muli	r3,r3,12
 4012e5c:	10c5883a 	add	r2,r2,r3
 4012e60:	10800104 	addi	r2,r2,4
 4012e64:	10c00017 	ldw	r3,0(r2)
 4012e68:	e0bffc17 	ldw	r2,-16(fp)
 4012e6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4012e70:	00810074 	movhi	r2,1025
 4012e74:	10984804 	addi	r2,r2,24864
 4012e78:	e0fffb17 	ldw	r3,-20(fp)
 4012e7c:	18c00324 	muli	r3,r3,12
 4012e80:	10c5883a 	add	r2,r2,r3
 4012e84:	10800204 	addi	r2,r2,8
 4012e88:	10c00017 	ldw	r3,0(r2)
 4012e8c:	e0bffc17 	ldw	r2,-16(fp)
 4012e90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4012e94:	e13ffb17 	ldw	r4,-20(fp)
 4012e98:	400f6440 	call	400f644 <alt_release_fd>
  }
} 
 4012e9c:	0001883a 	nop
 4012ea0:	e037883a 	mov	sp,fp
 4012ea4:	dfc00117 	ldw	ra,4(sp)
 4012ea8:	df000017 	ldw	fp,0(sp)
 4012eac:	dec00204 	addi	sp,sp,8
 4012eb0:	f800283a 	ret

04012eb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4012eb4:	defffb04 	addi	sp,sp,-20
 4012eb8:	dfc00415 	stw	ra,16(sp)
 4012ebc:	df000315 	stw	fp,12(sp)
 4012ec0:	df000304 	addi	fp,sp,12
 4012ec4:	e13ffd15 	stw	r4,-12(fp)
 4012ec8:	e17ffe15 	stw	r5,-8(fp)
 4012ecc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4012ed0:	01c07fc4 	movi	r7,511
 4012ed4:	01800044 	movi	r6,1
 4012ed8:	e17ffd17 	ldw	r5,-12(fp)
 4012edc:	01010074 	movhi	r4,1025
 4012ee0:	21184b04 	addi	r4,r4,24876
 4012ee4:	4012df00 	call	4012df0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4012ee8:	01c07fc4 	movi	r7,511
 4012eec:	000d883a 	mov	r6,zero
 4012ef0:	e17ffe17 	ldw	r5,-8(fp)
 4012ef4:	01010074 	movhi	r4,1025
 4012ef8:	21184804 	addi	r4,r4,24864
 4012efc:	4012df00 	call	4012df0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4012f00:	01c07fc4 	movi	r7,511
 4012f04:	01800044 	movi	r6,1
 4012f08:	e17fff17 	ldw	r5,-4(fp)
 4012f0c:	01010074 	movhi	r4,1025
 4012f10:	21184e04 	addi	r4,r4,24888
 4012f14:	4012df00 	call	4012df0 <alt_open_fd>
}  
 4012f18:	0001883a 	nop
 4012f1c:	e037883a 	mov	sp,fp
 4012f20:	dfc00117 	ldw	ra,4(sp)
 4012f24:	df000017 	ldw	fp,0(sp)
 4012f28:	dec00204 	addi	sp,sp,8
 4012f2c:	f800283a 	ret

04012f30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012f30:	defffe04 	addi	sp,sp,-8
 4012f34:	dfc00115 	stw	ra,4(sp)
 4012f38:	df000015 	stw	fp,0(sp)
 4012f3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012f40:	d0a00d17 	ldw	r2,-32716(gp)
 4012f44:	10000326 	beq	r2,zero,4012f54 <alt_get_errno+0x24>
 4012f48:	d0a00d17 	ldw	r2,-32716(gp)
 4012f4c:	103ee83a 	callr	r2
 4012f50:	00000106 	br	4012f58 <alt_get_errno+0x28>
 4012f54:	d0a01e04 	addi	r2,gp,-32648
}
 4012f58:	e037883a 	mov	sp,fp
 4012f5c:	dfc00117 	ldw	ra,4(sp)
 4012f60:	df000017 	ldw	fp,0(sp)
 4012f64:	dec00204 	addi	sp,sp,8
 4012f68:	f800283a 	ret

04012f6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4012f6c:	defffd04 	addi	sp,sp,-12
 4012f70:	df000215 	stw	fp,8(sp)
 4012f74:	df000204 	addi	fp,sp,8
 4012f78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4012f7c:	e0bfff17 	ldw	r2,-4(fp)
 4012f80:	10800217 	ldw	r2,8(r2)
 4012f84:	10d00034 	orhi	r3,r2,16384
 4012f88:	e0bfff17 	ldw	r2,-4(fp)
 4012f8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4012f90:	e03ffe15 	stw	zero,-8(fp)
 4012f94:	00001d06 	br	401300c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012f98:	00810074 	movhi	r2,1025
 4012f9c:	10984804 	addi	r2,r2,24864
 4012fa0:	e0fffe17 	ldw	r3,-8(fp)
 4012fa4:	18c00324 	muli	r3,r3,12
 4012fa8:	10c5883a 	add	r2,r2,r3
 4012fac:	10c00017 	ldw	r3,0(r2)
 4012fb0:	e0bfff17 	ldw	r2,-4(fp)
 4012fb4:	10800017 	ldw	r2,0(r2)
 4012fb8:	1880111e 	bne	r3,r2,4013000 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012fbc:	00810074 	movhi	r2,1025
 4012fc0:	10984804 	addi	r2,r2,24864
 4012fc4:	e0fffe17 	ldw	r3,-8(fp)
 4012fc8:	18c00324 	muli	r3,r3,12
 4012fcc:	10c5883a 	add	r2,r2,r3
 4012fd0:	10800204 	addi	r2,r2,8
 4012fd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012fd8:	1000090e 	bge	r2,zero,4013000 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4012fdc:	e0bffe17 	ldw	r2,-8(fp)
 4012fe0:	10c00324 	muli	r3,r2,12
 4012fe4:	00810074 	movhi	r2,1025
 4012fe8:	10984804 	addi	r2,r2,24864
 4012fec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012ff0:	e0bfff17 	ldw	r2,-4(fp)
 4012ff4:	18800226 	beq	r3,r2,4013000 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4012ff8:	00bffcc4 	movi	r2,-13
 4012ffc:	00000806 	br	4013020 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4013000:	e0bffe17 	ldw	r2,-8(fp)
 4013004:	10800044 	addi	r2,r2,1
 4013008:	e0bffe15 	stw	r2,-8(fp)
 401300c:	d0a00c17 	ldw	r2,-32720(gp)
 4013010:	1007883a 	mov	r3,r2
 4013014:	e0bffe17 	ldw	r2,-8(fp)
 4013018:	18bfdf2e 	bgeu	r3,r2,4012f98 <__reset+0xfa822f98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401301c:	0005883a 	mov	r2,zero
}
 4013020:	e037883a 	mov	sp,fp
 4013024:	df000017 	ldw	fp,0(sp)
 4013028:	dec00104 	addi	sp,sp,4
 401302c:	f800283a 	ret

04013030 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4013030:	defff604 	addi	sp,sp,-40
 4013034:	dfc00915 	stw	ra,36(sp)
 4013038:	df000815 	stw	fp,32(sp)
 401303c:	df000804 	addi	fp,sp,32
 4013040:	e13ffd15 	stw	r4,-12(fp)
 4013044:	e17ffe15 	stw	r5,-8(fp)
 4013048:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401304c:	00bfffc4 	movi	r2,-1
 4013050:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4013054:	00bffb44 	movi	r2,-19
 4013058:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401305c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4013060:	d1600a04 	addi	r5,gp,-32728
 4013064:	e13ffd17 	ldw	r4,-12(fp)
 4013068:	4012c080 	call	4012c08 <alt_find_dev>
 401306c:	e0bff815 	stw	r2,-32(fp)
 4013070:	e0bff817 	ldw	r2,-32(fp)
 4013074:	1000051e 	bne	r2,zero,401308c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4013078:	e13ffd17 	ldw	r4,-12(fp)
 401307c:	40131a80 	call	40131a8 <alt_find_file>
 4013080:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4013084:	00800044 	movi	r2,1
 4013088:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401308c:	e0bff817 	ldw	r2,-32(fp)
 4013090:	10002926 	beq	r2,zero,4013138 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4013094:	e13ff817 	ldw	r4,-32(fp)
 4013098:	40132b00 	call	40132b0 <alt_get_fd>
 401309c:	e0bff915 	stw	r2,-28(fp)
 40130a0:	e0bff917 	ldw	r2,-28(fp)
 40130a4:	1000030e 	bge	r2,zero,40130b4 <open+0x84>
    {
      status = index;
 40130a8:	e0bff917 	ldw	r2,-28(fp)
 40130ac:	e0bffa15 	stw	r2,-24(fp)
 40130b0:	00002306 	br	4013140 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 40130b4:	e0bff917 	ldw	r2,-28(fp)
 40130b8:	10c00324 	muli	r3,r2,12
 40130bc:	00810074 	movhi	r2,1025
 40130c0:	10984804 	addi	r2,r2,24864
 40130c4:	1885883a 	add	r2,r3,r2
 40130c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40130cc:	e0fffe17 	ldw	r3,-8(fp)
 40130d0:	00900034 	movhi	r2,16384
 40130d4:	10bfffc4 	addi	r2,r2,-1
 40130d8:	1886703a 	and	r3,r3,r2
 40130dc:	e0bffc17 	ldw	r2,-16(fp)
 40130e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40130e4:	e0bffb17 	ldw	r2,-20(fp)
 40130e8:	1000051e 	bne	r2,zero,4013100 <open+0xd0>
 40130ec:	e13ffc17 	ldw	r4,-16(fp)
 40130f0:	4012f6c0 	call	4012f6c <alt_file_locked>
 40130f4:	e0bffa15 	stw	r2,-24(fp)
 40130f8:	e0bffa17 	ldw	r2,-24(fp)
 40130fc:	10001016 	blt	r2,zero,4013140 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4013100:	e0bff817 	ldw	r2,-32(fp)
 4013104:	10800317 	ldw	r2,12(r2)
 4013108:	10000826 	beq	r2,zero,401312c <open+0xfc>
 401310c:	e0bff817 	ldw	r2,-32(fp)
 4013110:	10800317 	ldw	r2,12(r2)
 4013114:	e1ffff17 	ldw	r7,-4(fp)
 4013118:	e1bffe17 	ldw	r6,-8(fp)
 401311c:	e17ffd17 	ldw	r5,-12(fp)
 4013120:	e13ffc17 	ldw	r4,-16(fp)
 4013124:	103ee83a 	callr	r2
 4013128:	00000106 	br	4013130 <open+0x100>
 401312c:	0005883a 	mov	r2,zero
 4013130:	e0bffa15 	stw	r2,-24(fp)
 4013134:	00000206 	br	4013140 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4013138:	00bffb44 	movi	r2,-19
 401313c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4013140:	e0bffa17 	ldw	r2,-24(fp)
 4013144:	1000090e 	bge	r2,zero,401316c <open+0x13c>
  {
    alt_release_fd (index);  
 4013148:	e13ff917 	ldw	r4,-28(fp)
 401314c:	400f6440 	call	400f644 <alt_release_fd>
    ALT_ERRNO = -status;
 4013150:	4012f300 	call	4012f30 <alt_get_errno>
 4013154:	1007883a 	mov	r3,r2
 4013158:	e0bffa17 	ldw	r2,-24(fp)
 401315c:	0085c83a 	sub	r2,zero,r2
 4013160:	18800015 	stw	r2,0(r3)
    return -1;
 4013164:	00bfffc4 	movi	r2,-1
 4013168:	00000106 	br	4013170 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401316c:	e0bff917 	ldw	r2,-28(fp)
}
 4013170:	e037883a 	mov	sp,fp
 4013174:	dfc00117 	ldw	ra,4(sp)
 4013178:	df000017 	ldw	fp,0(sp)
 401317c:	dec00204 	addi	sp,sp,8
 4013180:	f800283a 	ret

04013184 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4013184:	deffff04 	addi	sp,sp,-4
 4013188:	df000015 	stw	fp,0(sp)
 401318c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4013190:	000170fa 	wrctl	ienable,zero
}
 4013194:	0001883a 	nop
 4013198:	e037883a 	mov	sp,fp
 401319c:	df000017 	ldw	fp,0(sp)
 40131a0:	dec00104 	addi	sp,sp,4
 40131a4:	f800283a 	ret

040131a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40131a8:	defffb04 	addi	sp,sp,-20
 40131ac:	dfc00415 	stw	ra,16(sp)
 40131b0:	df000315 	stw	fp,12(sp)
 40131b4:	df000304 	addi	fp,sp,12
 40131b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40131bc:	d0a00817 	ldw	r2,-32736(gp)
 40131c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40131c4:	00003106 	br	401328c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40131c8:	e0bffd17 	ldw	r2,-12(fp)
 40131cc:	10800217 	ldw	r2,8(r2)
 40131d0:	1009883a 	mov	r4,r2
 40131d4:	40025d00 	call	40025d0 <strlen>
 40131d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40131dc:	e0bffd17 	ldw	r2,-12(fp)
 40131e0:	10c00217 	ldw	r3,8(r2)
 40131e4:	e0bffe17 	ldw	r2,-8(fp)
 40131e8:	10bfffc4 	addi	r2,r2,-1
 40131ec:	1885883a 	add	r2,r3,r2
 40131f0:	10800003 	ldbu	r2,0(r2)
 40131f4:	10803fcc 	andi	r2,r2,255
 40131f8:	1080201c 	xori	r2,r2,128
 40131fc:	10bfe004 	addi	r2,r2,-128
 4013200:	10800bd8 	cmpnei	r2,r2,47
 4013204:	1000031e 	bne	r2,zero,4013214 <alt_find_file+0x6c>
    {
      len -= 1;
 4013208:	e0bffe17 	ldw	r2,-8(fp)
 401320c:	10bfffc4 	addi	r2,r2,-1
 4013210:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4013214:	e0bffe17 	ldw	r2,-8(fp)
 4013218:	e0ffff17 	ldw	r3,-4(fp)
 401321c:	1885883a 	add	r2,r3,r2
 4013220:	10800003 	ldbu	r2,0(r2)
 4013224:	10803fcc 	andi	r2,r2,255
 4013228:	1080201c 	xori	r2,r2,128
 401322c:	10bfe004 	addi	r2,r2,-128
 4013230:	10800be0 	cmpeqi	r2,r2,47
 4013234:	1000081e 	bne	r2,zero,4013258 <alt_find_file+0xb0>
 4013238:	e0bffe17 	ldw	r2,-8(fp)
 401323c:	e0ffff17 	ldw	r3,-4(fp)
 4013240:	1885883a 	add	r2,r3,r2
 4013244:	10800003 	ldbu	r2,0(r2)
 4013248:	10803fcc 	andi	r2,r2,255
 401324c:	1080201c 	xori	r2,r2,128
 4013250:	10bfe004 	addi	r2,r2,-128
 4013254:	10000a1e 	bne	r2,zero,4013280 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4013258:	e0bffd17 	ldw	r2,-12(fp)
 401325c:	10800217 	ldw	r2,8(r2)
 4013260:	e0fffe17 	ldw	r3,-8(fp)
 4013264:	180d883a 	mov	r6,r3
 4013268:	e17fff17 	ldw	r5,-4(fp)
 401326c:	1009883a 	mov	r4,r2
 4013270:	40133a00 	call	40133a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4013274:	1000021e 	bne	r2,zero,4013280 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4013278:	e0bffd17 	ldw	r2,-12(fp)
 401327c:	00000706 	br	401329c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4013280:	e0bffd17 	ldw	r2,-12(fp)
 4013284:	10800017 	ldw	r2,0(r2)
 4013288:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401328c:	e0fffd17 	ldw	r3,-12(fp)
 4013290:	d0a00804 	addi	r2,gp,-32736
 4013294:	18bfcc1e 	bne	r3,r2,40131c8 <__reset+0xfa8231c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4013298:	0005883a 	mov	r2,zero
}
 401329c:	e037883a 	mov	sp,fp
 40132a0:	dfc00117 	ldw	ra,4(sp)
 40132a4:	df000017 	ldw	fp,0(sp)
 40132a8:	dec00204 	addi	sp,sp,8
 40132ac:	f800283a 	ret

040132b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40132b0:	defffc04 	addi	sp,sp,-16
 40132b4:	df000315 	stw	fp,12(sp)
 40132b8:	df000304 	addi	fp,sp,12
 40132bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40132c0:	00bffa04 	movi	r2,-24
 40132c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40132c8:	e03ffd15 	stw	zero,-12(fp)
 40132cc:	00001906 	br	4013334 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40132d0:	00810074 	movhi	r2,1025
 40132d4:	10984804 	addi	r2,r2,24864
 40132d8:	e0fffd17 	ldw	r3,-12(fp)
 40132dc:	18c00324 	muli	r3,r3,12
 40132e0:	10c5883a 	add	r2,r2,r3
 40132e4:	10800017 	ldw	r2,0(r2)
 40132e8:	10000f1e 	bne	r2,zero,4013328 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 40132ec:	00810074 	movhi	r2,1025
 40132f0:	10984804 	addi	r2,r2,24864
 40132f4:	e0fffd17 	ldw	r3,-12(fp)
 40132f8:	18c00324 	muli	r3,r3,12
 40132fc:	10c5883a 	add	r2,r2,r3
 4013300:	e0ffff17 	ldw	r3,-4(fp)
 4013304:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4013308:	d0e00c17 	ldw	r3,-32720(gp)
 401330c:	e0bffd17 	ldw	r2,-12(fp)
 4013310:	1880020e 	bge	r3,r2,401331c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4013314:	e0bffd17 	ldw	r2,-12(fp)
 4013318:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 401331c:	e0bffd17 	ldw	r2,-12(fp)
 4013320:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4013324:	00000606 	br	4013340 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4013328:	e0bffd17 	ldw	r2,-12(fp)
 401332c:	10800044 	addi	r2,r2,1
 4013330:	e0bffd15 	stw	r2,-12(fp)
 4013334:	e0bffd17 	ldw	r2,-12(fp)
 4013338:	10800810 	cmplti	r2,r2,32
 401333c:	103fe41e 	bne	r2,zero,40132d0 <__reset+0xfa8232d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4013340:	e0bffe17 	ldw	r2,-8(fp)
}
 4013344:	e037883a 	mov	sp,fp
 4013348:	df000017 	ldw	fp,0(sp)
 401334c:	dec00104 	addi	sp,sp,4
 4013350:	f800283a 	ret

04013354 <atexit>:
 4013354:	200b883a 	mov	r5,r4
 4013358:	000f883a 	mov	r7,zero
 401335c:	000d883a 	mov	r6,zero
 4013360:	0009883a 	mov	r4,zero
 4013364:	401341c1 	jmpi	401341c <__register_exitproc>

04013368 <exit>:
 4013368:	defffe04 	addi	sp,sp,-8
 401336c:	000b883a 	mov	r5,zero
 4013370:	dc000015 	stw	r16,0(sp)
 4013374:	dfc00115 	stw	ra,4(sp)
 4013378:	2021883a 	mov	r16,r4
 401337c:	40135340 	call	4013534 <__call_exitprocs>
 4013380:	00810074 	movhi	r2,1025
 4013384:	109d0504 	addi	r2,r2,29716
 4013388:	11000017 	ldw	r4,0(r2)
 401338c:	20800f17 	ldw	r2,60(r4)
 4013390:	10000126 	beq	r2,zero,4013398 <exit+0x30>
 4013394:	103ee83a 	callr	r2
 4013398:	8009883a 	mov	r4,r16
 401339c:	40136b40 	call	40136b4 <_exit>

040133a0 <memcmp>:
 40133a0:	01c000c4 	movi	r7,3
 40133a4:	3980192e 	bgeu	r7,r6,401340c <memcmp+0x6c>
 40133a8:	2144b03a 	or	r2,r4,r5
 40133ac:	11c4703a 	and	r2,r2,r7
 40133b0:	10000f26 	beq	r2,zero,40133f0 <memcmp+0x50>
 40133b4:	20800003 	ldbu	r2,0(r4)
 40133b8:	28c00003 	ldbu	r3,0(r5)
 40133bc:	10c0151e 	bne	r2,r3,4013414 <memcmp+0x74>
 40133c0:	31bfff84 	addi	r6,r6,-2
 40133c4:	01ffffc4 	movi	r7,-1
 40133c8:	00000406 	br	40133dc <memcmp+0x3c>
 40133cc:	20800003 	ldbu	r2,0(r4)
 40133d0:	28c00003 	ldbu	r3,0(r5)
 40133d4:	31bfffc4 	addi	r6,r6,-1
 40133d8:	10c00e1e 	bne	r2,r3,4013414 <memcmp+0x74>
 40133dc:	21000044 	addi	r4,r4,1
 40133e0:	29400044 	addi	r5,r5,1
 40133e4:	31fff91e 	bne	r6,r7,40133cc <__reset+0xfa8233cc>
 40133e8:	0005883a 	mov	r2,zero
 40133ec:	f800283a 	ret
 40133f0:	20c00017 	ldw	r3,0(r4)
 40133f4:	28800017 	ldw	r2,0(r5)
 40133f8:	18bfee1e 	bne	r3,r2,40133b4 <__reset+0xfa8233b4>
 40133fc:	31bfff04 	addi	r6,r6,-4
 4013400:	21000104 	addi	r4,r4,4
 4013404:	29400104 	addi	r5,r5,4
 4013408:	39bff936 	bltu	r7,r6,40133f0 <__reset+0xfa8233f0>
 401340c:	303fe91e 	bne	r6,zero,40133b4 <__reset+0xfa8233b4>
 4013410:	003ff506 	br	40133e8 <__reset+0xfa8233e8>
 4013414:	10c5c83a 	sub	r2,r2,r3
 4013418:	f800283a 	ret

0401341c <__register_exitproc>:
 401341c:	defffa04 	addi	sp,sp,-24
 4013420:	dc000315 	stw	r16,12(sp)
 4013424:	04010074 	movhi	r16,1025
 4013428:	841d0504 	addi	r16,r16,29716
 401342c:	80c00017 	ldw	r3,0(r16)
 4013430:	dc400415 	stw	r17,16(sp)
 4013434:	dfc00515 	stw	ra,20(sp)
 4013438:	18805217 	ldw	r2,328(r3)
 401343c:	2023883a 	mov	r17,r4
 4013440:	10003726 	beq	r2,zero,4013520 <__register_exitproc+0x104>
 4013444:	10c00117 	ldw	r3,4(r2)
 4013448:	010007c4 	movi	r4,31
 401344c:	20c00e16 	blt	r4,r3,4013488 <__register_exitproc+0x6c>
 4013450:	1a000044 	addi	r8,r3,1
 4013454:	8800221e 	bne	r17,zero,40134e0 <__register_exitproc+0xc4>
 4013458:	18c00084 	addi	r3,r3,2
 401345c:	18c7883a 	add	r3,r3,r3
 4013460:	18c7883a 	add	r3,r3,r3
 4013464:	12000115 	stw	r8,4(r2)
 4013468:	10c7883a 	add	r3,r2,r3
 401346c:	19400015 	stw	r5,0(r3)
 4013470:	0005883a 	mov	r2,zero
 4013474:	dfc00517 	ldw	ra,20(sp)
 4013478:	dc400417 	ldw	r17,16(sp)
 401347c:	dc000317 	ldw	r16,12(sp)
 4013480:	dec00604 	addi	sp,sp,24
 4013484:	f800283a 	ret
 4013488:	00800034 	movhi	r2,0
 401348c:	10800004 	addi	r2,r2,0
 4013490:	10002626 	beq	r2,zero,401352c <__register_exitproc+0x110>
 4013494:	01006404 	movi	r4,400
 4013498:	d9400015 	stw	r5,0(sp)
 401349c:	d9800115 	stw	r6,4(sp)
 40134a0:	d9c00215 	stw	r7,8(sp)
 40134a4:	00000000 	call	0 <__alt_mem_dram_cntrl-0x4000000>
 40134a8:	d9400017 	ldw	r5,0(sp)
 40134ac:	d9800117 	ldw	r6,4(sp)
 40134b0:	d9c00217 	ldw	r7,8(sp)
 40134b4:	10001d26 	beq	r2,zero,401352c <__register_exitproc+0x110>
 40134b8:	81000017 	ldw	r4,0(r16)
 40134bc:	10000115 	stw	zero,4(r2)
 40134c0:	02000044 	movi	r8,1
 40134c4:	22405217 	ldw	r9,328(r4)
 40134c8:	0007883a 	mov	r3,zero
 40134cc:	12400015 	stw	r9,0(r2)
 40134d0:	20805215 	stw	r2,328(r4)
 40134d4:	10006215 	stw	zero,392(r2)
 40134d8:	10006315 	stw	zero,396(r2)
 40134dc:	883fde26 	beq	r17,zero,4013458 <__reset+0xfa823458>
 40134e0:	18c9883a 	add	r4,r3,r3
 40134e4:	2109883a 	add	r4,r4,r4
 40134e8:	1109883a 	add	r4,r2,r4
 40134ec:	21802215 	stw	r6,136(r4)
 40134f0:	01800044 	movi	r6,1
 40134f4:	12406217 	ldw	r9,392(r2)
 40134f8:	30cc983a 	sll	r6,r6,r3
 40134fc:	4992b03a 	or	r9,r9,r6
 4013500:	12406215 	stw	r9,392(r2)
 4013504:	21c04215 	stw	r7,264(r4)
 4013508:	01000084 	movi	r4,2
 401350c:	893fd21e 	bne	r17,r4,4013458 <__reset+0xfa823458>
 4013510:	11006317 	ldw	r4,396(r2)
 4013514:	218cb03a 	or	r6,r4,r6
 4013518:	11806315 	stw	r6,396(r2)
 401351c:	003fce06 	br	4013458 <__reset+0xfa823458>
 4013520:	18805304 	addi	r2,r3,332
 4013524:	18805215 	stw	r2,328(r3)
 4013528:	003fc606 	br	4013444 <__reset+0xfa823444>
 401352c:	00bfffc4 	movi	r2,-1
 4013530:	003fd006 	br	4013474 <__reset+0xfa823474>

04013534 <__call_exitprocs>:
 4013534:	defff504 	addi	sp,sp,-44
 4013538:	df000915 	stw	fp,36(sp)
 401353c:	dd400615 	stw	r21,24(sp)
 4013540:	dc800315 	stw	r18,12(sp)
 4013544:	dfc00a15 	stw	ra,40(sp)
 4013548:	ddc00815 	stw	r23,32(sp)
 401354c:	dd800715 	stw	r22,28(sp)
 4013550:	dd000515 	stw	r20,20(sp)
 4013554:	dcc00415 	stw	r19,16(sp)
 4013558:	dc400215 	stw	r17,8(sp)
 401355c:	dc000115 	stw	r16,4(sp)
 4013560:	d9000015 	stw	r4,0(sp)
 4013564:	2839883a 	mov	fp,r5
 4013568:	04800044 	movi	r18,1
 401356c:	057fffc4 	movi	r21,-1
 4013570:	00810074 	movhi	r2,1025
 4013574:	109d0504 	addi	r2,r2,29716
 4013578:	12000017 	ldw	r8,0(r2)
 401357c:	45005217 	ldw	r20,328(r8)
 4013580:	44c05204 	addi	r19,r8,328
 4013584:	a0001c26 	beq	r20,zero,40135f8 <__call_exitprocs+0xc4>
 4013588:	a0800117 	ldw	r2,4(r20)
 401358c:	15ffffc4 	addi	r23,r2,-1
 4013590:	b8000d16 	blt	r23,zero,40135c8 <__call_exitprocs+0x94>
 4013594:	14000044 	addi	r16,r2,1
 4013598:	8421883a 	add	r16,r16,r16
 401359c:	8421883a 	add	r16,r16,r16
 40135a0:	84402004 	addi	r17,r16,128
 40135a4:	a463883a 	add	r17,r20,r17
 40135a8:	a421883a 	add	r16,r20,r16
 40135ac:	e0001e26 	beq	fp,zero,4013628 <__call_exitprocs+0xf4>
 40135b0:	80804017 	ldw	r2,256(r16)
 40135b4:	e0801c26 	beq	fp,r2,4013628 <__call_exitprocs+0xf4>
 40135b8:	bdffffc4 	addi	r23,r23,-1
 40135bc:	843fff04 	addi	r16,r16,-4
 40135c0:	8c7fff04 	addi	r17,r17,-4
 40135c4:	bd7ff91e 	bne	r23,r21,40135ac <__reset+0xfa8235ac>
 40135c8:	00800034 	movhi	r2,0
 40135cc:	10800004 	addi	r2,r2,0
 40135d0:	10000926 	beq	r2,zero,40135f8 <__call_exitprocs+0xc4>
 40135d4:	a0800117 	ldw	r2,4(r20)
 40135d8:	1000301e 	bne	r2,zero,401369c <__call_exitprocs+0x168>
 40135dc:	a0800017 	ldw	r2,0(r20)
 40135e0:	10003226 	beq	r2,zero,40136ac <__call_exitprocs+0x178>
 40135e4:	a009883a 	mov	r4,r20
 40135e8:	98800015 	stw	r2,0(r19)
 40135ec:	00000000 	call	0 <__alt_mem_dram_cntrl-0x4000000>
 40135f0:	9d000017 	ldw	r20,0(r19)
 40135f4:	a03fe41e 	bne	r20,zero,4013588 <__reset+0xfa823588>
 40135f8:	dfc00a17 	ldw	ra,40(sp)
 40135fc:	df000917 	ldw	fp,36(sp)
 4013600:	ddc00817 	ldw	r23,32(sp)
 4013604:	dd800717 	ldw	r22,28(sp)
 4013608:	dd400617 	ldw	r21,24(sp)
 401360c:	dd000517 	ldw	r20,20(sp)
 4013610:	dcc00417 	ldw	r19,16(sp)
 4013614:	dc800317 	ldw	r18,12(sp)
 4013618:	dc400217 	ldw	r17,8(sp)
 401361c:	dc000117 	ldw	r16,4(sp)
 4013620:	dec00b04 	addi	sp,sp,44
 4013624:	f800283a 	ret
 4013628:	a0800117 	ldw	r2,4(r20)
 401362c:	80c00017 	ldw	r3,0(r16)
 4013630:	10bfffc4 	addi	r2,r2,-1
 4013634:	15c01426 	beq	r2,r23,4013688 <__call_exitprocs+0x154>
 4013638:	80000015 	stw	zero,0(r16)
 401363c:	183fde26 	beq	r3,zero,40135b8 <__reset+0xfa8235b8>
 4013640:	95c8983a 	sll	r4,r18,r23
 4013644:	a0806217 	ldw	r2,392(r20)
 4013648:	a5800117 	ldw	r22,4(r20)
 401364c:	2084703a 	and	r2,r4,r2
 4013650:	10000b26 	beq	r2,zero,4013680 <__call_exitprocs+0x14c>
 4013654:	a0806317 	ldw	r2,396(r20)
 4013658:	2088703a 	and	r4,r4,r2
 401365c:	20000c1e 	bne	r4,zero,4013690 <__call_exitprocs+0x15c>
 4013660:	89400017 	ldw	r5,0(r17)
 4013664:	d9000017 	ldw	r4,0(sp)
 4013668:	183ee83a 	callr	r3
 401366c:	a0800117 	ldw	r2,4(r20)
 4013670:	15bfbf1e 	bne	r2,r22,4013570 <__reset+0xfa823570>
 4013674:	98800017 	ldw	r2,0(r19)
 4013678:	153fcf26 	beq	r2,r20,40135b8 <__reset+0xfa8235b8>
 401367c:	003fbc06 	br	4013570 <__reset+0xfa823570>
 4013680:	183ee83a 	callr	r3
 4013684:	003ff906 	br	401366c <__reset+0xfa82366c>
 4013688:	a5c00115 	stw	r23,4(r20)
 401368c:	003feb06 	br	401363c <__reset+0xfa82363c>
 4013690:	89000017 	ldw	r4,0(r17)
 4013694:	183ee83a 	callr	r3
 4013698:	003ff406 	br	401366c <__reset+0xfa82366c>
 401369c:	a0800017 	ldw	r2,0(r20)
 40136a0:	a027883a 	mov	r19,r20
 40136a4:	1029883a 	mov	r20,r2
 40136a8:	003fb606 	br	4013584 <__reset+0xfa823584>
 40136ac:	0005883a 	mov	r2,zero
 40136b0:	003ffb06 	br	40136a0 <__reset+0xfa8236a0>

040136b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40136b4:	defffd04 	addi	sp,sp,-12
 40136b8:	df000215 	stw	fp,8(sp)
 40136bc:	df000204 	addi	fp,sp,8
 40136c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40136c4:	0001883a 	nop
 40136c8:	e0bfff17 	ldw	r2,-4(fp)
 40136cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40136d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40136d4:	10000226 	beq	r2,zero,40136e0 <_exit+0x2c>
    ALT_SIM_FAIL();
 40136d8:	002af070 	cmpltui	zero,zero,43969
 40136dc:	00000106 	br	40136e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40136e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40136e4:	003fff06 	br	40136e4 <__reset+0xfa8236e4>
