
Software_LCD_Touch.elf:     file format elf32-littlenios2
Software_LCD_Touch.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0003306c memsz 0x0003306c flags r-x
    LOAD off    0x0003408c vaddr 0x0403308c paddr 0x0403632c align 2**12
         filesz 0x000032a0 memsz 0x000032a0 flags rw-
    LOAD off    0x000375cc vaddr 0x040395cc paddr 0x040395cc align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013074  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001fdd4  040132b8  040132b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000032a0  0403308c  0403632c  0003408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  040395cc  040395cc  000375cc  2**2
                  ALLOC, SMALL_DATA
  6 .dram_ctrl    00000000  04039750  04039750  0003732c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0003732c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010c8  00000000  00000000  00037350  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027198  00000000  00000000  00038418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009ce5  00000000  00000000  0005f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c4bb  00000000  00000000  00069295  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b70  00000000  00000000  00075750  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000051fd  00000000  00000000  000782c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  0007d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00094d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00094d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009bd72  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009bd75  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009bd78  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009bd79  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009bd7a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009bd7e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009bd82  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009bd86  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009bd8f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009bd98  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0009bda1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000042  00000000  00000000  0009bda7  2**0
                  CONTENTS, READONLY
 29 .jdi          00004849  00000000  00000000  0009bde9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00082218  00000000  00000000  000a0632  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
040132b8 l    d  .rodata	00000000 .rodata
0403308c l    d  .rwdata	00000000 .rwdata
040395cc l    d  .bss	00000000 .bss
04039750 l    d  .dram_ctrl	00000000 .dram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Software_LCD_Touch_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 audio.c
00000000 l    df *ABS*	00000000 arial_24.c
00000000 l    df *ABS*	00000000 bahnschriftCondensed_22.c
00000000 l    df *ABS*	00000000 bahnschriftCondensed_24.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 gui.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
04018ecf l     O .rodata	000000b6 tahomabold_20_33
04018f85 l     O .rodata	00000104 tahomabold_20_34
04019089 l     O .rodata	000001a0 tahomabold_20_35
04019229 l     O .rodata	00000152 tahomabold_20_36
0401937b l     O .rodata	00000270 tahomabold_20_37
040195eb l     O .rodata	000001ba tahomabold_20_38
040197a5 l     O .rodata	0000009c tahomabold_20_39
04019841 l     O .rodata	000000ea tahomabold_20_40
0401992b l     O .rodata	000000ea tahomabold_20_41
04019a15 l     O .rodata	00000152 tahomabold_20_42
04019b67 l     O .rodata	000001a0 tahomabold_20_43
04019d07 l     O .rodata	0000009c tahomabold_20_44
04019da3 l     O .rodata	000000ea tahomabold_20_45
04019e8d l     O .rodata	0000009c tahomabold_20_46
04019f29 l     O .rodata	00000138 tahomabold_20_47
0401a061 l     O .rodata	00000152 tahomabold_20_48
0401a1b3 l     O .rodata	00000152 tahomabold_20_49
0401a305 l     O .rodata	00000152 tahomabold_20_50
0401a457 l     O .rodata	00000152 tahomabold_20_51
0401a5a9 l     O .rodata	00000152 tahomabold_20_52
0401a6fb l     O .rodata	00000152 tahomabold_20_53
0401a84d l     O .rodata	00000152 tahomabold_20_54
0401a99f l     O .rodata	00000152 tahomabold_20_55
0401aaf1 l     O .rodata	00000152 tahomabold_20_56
0401ac43 l     O .rodata	00000152 tahomabold_20_57
0401ad95 l     O .rodata	000000b6 tahomabold_20_58
0401ae4b l     O .rodata	000000b6 tahomabold_20_59
0401af01 l     O .rodata	000001a0 tahomabold_20_60
0401b0a1 l     O .rodata	000001a0 tahomabold_20_61
0401b241 l     O .rodata	000001a0 tahomabold_20_62
0401b3e1 l     O .rodata	0000011e tahomabold_20_63
0401b4ff l     O .rodata	000001d4 tahomabold_20_64
0401b6d3 l     O .rodata	0000016c tahomabold_20_65
0401b83f l     O .rodata	0000016c tahomabold_20_66
0401b9ab l     O .rodata	00000152 tahomabold_20_67
0401bafd l     O .rodata	00000186 tahomabold_20_68
0401bc83 l     O .rodata	00000138 tahomabold_20_69
0401bdbb l     O .rodata	00000138 tahomabold_20_70
0401bef3 l     O .rodata	00000186 tahomabold_20_71
0401c079 l     O .rodata	00000186 tahomabold_20_72
0401c1ff l     O .rodata	00000104 tahomabold_20_73
0401c303 l     O .rodata	00000104 tahomabold_20_74
0401c407 l     O .rodata	0000016c tahomabold_20_75
0401c573 l     O .rodata	0000011e tahomabold_20_76
0401c691 l     O .rodata	000001d4 tahomabold_20_77
0401c865 l     O .rodata	00000186 tahomabold_20_78
0401c9eb l     O .rodata	00000186 tahomabold_20_79
0401cb71 l     O .rodata	00000152 tahomabold_20_80
0401ccc3 l     O .rodata	00000186 tahomabold_20_81
0401ce49 l     O .rodata	00000186 tahomabold_20_82
0401cfcf l     O .rodata	00000152 tahomabold_20_83
0401d121 l     O .rodata	00000138 tahomabold_20_84
0401d259 l     O .rodata	00000186 tahomabold_20_85
0401d3df l     O .rodata	0000016c tahomabold_20_86
0401d54b l     O .rodata	00000222 tahomabold_20_87
0401d76d l     O .rodata	0000016c tahomabold_20_88
0401d8d9 l     O .rodata	0000016c tahomabold_20_89
0401da45 l     O .rodata	00000138 tahomabold_20_90
0401db7d l     O .rodata	000000ea tahomabold_20_91
0401dc67 l     O .rodata	00000138 tahomabold_20_92
0401dd9f l     O .rodata	000000ea tahomabold_20_93
0401de89 l     O .rodata	000001a0 tahomabold_20_94
0401e029 l     O .rodata	00000152 tahomabold_20_95
0401e17b l     O .rodata	0000011e tahomabold_20_96
0401e299 l     O .rodata	00000138 tahomabold_20_97
0401e3d1 l     O .rodata	00000152 tahomabold_20_98
0401e523 l     O .rodata	0000011e tahomabold_20_99
0401e641 l     O .rodata	00000152 tahomabold_20_100
0401e793 l     O .rodata	00000138 tahomabold_20_101
0401e8cb l     O .rodata	000000d0 tahomabold_20_102
0401e99b l     O .rodata	00000152 tahomabold_20_103
0401eaed l     O .rodata	00000152 tahomabold_20_104
0401ec3f l     O .rodata	0000009c tahomabold_20_105
0401ecdb l     O .rodata	000000ea tahomabold_20_106
0401edc5 l     O .rodata	00000138 tahomabold_20_107
0401eefd l     O .rodata	0000009c tahomabold_20_108
0401ef99 l     O .rodata	000001ee tahomabold_20_109
0401f187 l     O .rodata	00000152 tahomabold_20_110
0401f2d9 l     O .rodata	00000138 tahomabold_20_111
0401f411 l     O .rodata	00000152 tahomabold_20_112
0401f563 l     O .rodata	00000152 tahomabold_20_113
0401f6b5 l     O .rodata	000000ea tahomabold_20_114
0401f79f l     O .rodata	00000104 tahomabold_20_115
0401f8a3 l     O .rodata	000000d0 tahomabold_20_116
0401f973 l     O .rodata	00000152 tahomabold_20_117
0401fac5 l     O .rodata	00000138 tahomabold_20_118
0401fbfd l     O .rodata	000001d4 tahomabold_20_119
0401fdd1 l     O .rodata	00000138 tahomabold_20_120
0401ff09 l     O .rodata	00000138 tahomabold_20_121
04020041 l     O .rodata	0000011e tahomabold_20_122
0402015f l     O .rodata	00000138 tahomabold_20_123
04020297 l     O .rodata	00000152 tahomabold_20_124
040203e9 l     O .rodata	00000138 tahomabold_20_125
04020521 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
040206c1 l     O .rodata	000001b8 tahomabold_32_33
04020879 l     O .rodata	00000280 tahomabold_32_34
04020af9 l     O .rodata	00000410 tahomabold_32_35
04020f09 l     O .rodata	00000320 tahomabold_32_36
04021229 l     O .rodata	000005f0 tahomabold_32_37
04021819 l     O .rodata	00000410 tahomabold_32_38
04021c29 l     O .rodata	00000168 tahomabold_32_39
04021d91 l     O .rodata	00000258 tahomabold_32_40
04021fe9 l     O .rodata	00000258 tahomabold_32_41
04022241 l     O .rodata	00000320 tahomabold_32_42
04022561 l     O .rodata	00000410 tahomabold_32_43
04022971 l     O .rodata	00000190 tahomabold_32_44
04022b01 l     O .rodata	00000230 tahomabold_32_45
04022d31 l     O .rodata	00000190 tahomabold_32_46
04022ec1 l     O .rodata	000002d0 tahomabold_32_47
04023191 l     O .rodata	00000320 tahomabold_32_48
040234b1 l     O .rodata	00000320 tahomabold_32_49
040237d1 l     O .rodata	00000320 tahomabold_32_50
04023af1 l     O .rodata	00000320 tahomabold_32_51
04023e11 l     O .rodata	00000320 tahomabold_32_52
04024131 l     O .rodata	00000320 tahomabold_32_53
04024451 l     O .rodata	00000320 tahomabold_32_54
04024771 l     O .rodata	00000320 tahomabold_32_55
04024a91 l     O .rodata	00000320 tahomabold_32_56
04024db1 l     O .rodata	00000320 tahomabold_32_57
040250d1 l     O .rodata	000001e0 tahomabold_32_58
040252b1 l     O .rodata	000001e0 tahomabold_32_59
04025491 l     O .rodata	00000410 tahomabold_32_60
040258a1 l     O .rodata	00000410 tahomabold_32_61
04025cb1 l     O .rodata	00000410 tahomabold_32_62
040260c1 l     O .rodata	000002d0 tahomabold_32_63
04026391 l     O .rodata	00000488 tahomabold_32_64
04026819 l     O .rodata	00000370 tahomabold_32_65
04026b89 l     O .rodata	00000370 tahomabold_32_66
04026ef9 l     O .rodata	00000348 tahomabold_32_67
04027241 l     O .rodata	000003c0 tahomabold_32_68
04027601 l     O .rodata	00000320 tahomabold_32_69
04027921 l     O .rodata	000002f8 tahomabold_32_70
04027c19 l     O .rodata	000003c0 tahomabold_32_71
04027fd9 l     O .rodata	000003c0 tahomabold_32_72
04028399 l     O .rodata	00000258 tahomabold_32_73
040285f1 l     O .rodata	00000280 tahomabold_32_74
04028871 l     O .rodata	00000398 tahomabold_32_75
04028c09 l     O .rodata	000002d0 tahomabold_32_76
04028ed9 l     O .rodata	00000488 tahomabold_32_77
04029361 l     O .rodata	000003e8 tahomabold_32_78
04029749 l     O .rodata	000003e8 tahomabold_32_79
04029b31 l     O .rodata	00000348 tahomabold_32_80
04029e79 l     O .rodata	000003e8 tahomabold_32_81
0402a261 l     O .rodata	000003c0 tahomabold_32_82
0402a621 l     O .rodata	00000320 tahomabold_32_83
0402a941 l     O .rodata	00000320 tahomabold_32_84
0402ac61 l     O .rodata	000003c0 tahomabold_32_85
0402b021 l     O .rodata	00000370 tahomabold_32_86
0402b391 l     O .rodata	00000528 tahomabold_32_87
0402b8b9 l     O .rodata	00000370 tahomabold_32_88
0402bc29 l     O .rodata	00000370 tahomabold_32_89
0402bf99 l     O .rodata	00000320 tahomabold_32_90
0402c2b9 l     O .rodata	00000258 tahomabold_32_91
0402c511 l     O .rodata	000002d0 tahomabold_32_92
0402c7e1 l     O .rodata	00000258 tahomabold_32_93
0402ca39 l     O .rodata	00000410 tahomabold_32_94
0402ce49 l     O .rodata	00000320 tahomabold_32_95
0402d169 l     O .rodata	000002a8 tahomabold_32_96
0402d411 l     O .rodata	000002f8 tahomabold_32_97
0402d709 l     O .rodata	00000320 tahomabold_32_98
0402da29 l     O .rodata	000002a8 tahomabold_32_99
0402dcd1 l     O .rodata	00000320 tahomabold_32_100
0402dff1 l     O .rodata	000002f8 tahomabold_32_101
0402e2e9 l     O .rodata	00000230 tahomabold_32_102
0402e519 l     O .rodata	00000320 tahomabold_32_103
0402e839 l     O .rodata	00000320 tahomabold_32_104
0402eb59 l     O .rodata	00000190 tahomabold_32_105
0402ece9 l     O .rodata	00000208 tahomabold_32_106
0402eef1 l     O .rodata	000002f8 tahomabold_32_107
0402f1e9 l     O .rodata	00000190 tahomabold_32_108
0402f379 l     O .rodata	000004d8 tahomabold_32_109
0402f851 l     O .rodata	00000320 tahomabold_32_110
0402fb71 l     O .rodata	00000320 tahomabold_32_111
0402fe91 l     O .rodata	00000320 tahomabold_32_112
040301b1 l     O .rodata	00000320 tahomabold_32_113
040304d1 l     O .rodata	00000230 tahomabold_32_114
04030701 l     O .rodata	00000280 tahomabold_32_115
04030981 l     O .rodata	00000208 tahomabold_32_116
04030b89 l     O .rodata	00000320 tahomabold_32_117
04030ea9 l     O .rodata	000002f8 tahomabold_32_118
040311a1 l     O .rodata	00000460 tahomabold_32_119
04031601 l     O .rodata	000002f8 tahomabold_32_120
040318f9 l     O .rodata	000002d0 tahomabold_32_121
04031bc9 l     O .rodata	000002a8 tahomabold_32_122
04031e71 l     O .rodata	00000320 tahomabold_32_123
04032191 l     O .rodata	00000320 tahomabold_32_124
040324b1 l     O .rodata	00000320 tahomabold_32_125
040327d1 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 touch_isr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04032dba l     O .rodata	00000010 zeroes.4404
04005010 l     F .text	000000bc __sbprintf
04032dca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04005220 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04006d50 l     F .text	00000008 __fp_unlock
04006d64 l     F .text	0000019c __sinit.part.1
04006f00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0403480c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04034c50 l     O .rwdata	00000020 lc_ctype_charset
04034c30 l     O .rwdata	00000020 lc_message_charset
04034c70 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04032dfc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400a2fc l     F .text	000000fc __sprint_r.part.0
04032f30 l     O .rodata	00000010 blanks.4348
04032f20 l     O .rodata	00000010 zeroes.4349
0400b888 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0400f4bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400f5c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400f5f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400f980 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400fa60 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400fb4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400fd20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04036320 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04010140 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04010274 l     F .text	00000034 alt_dev_reg
04035258 l     O .rwdata	00001060 jtag_uart
040362b8 l     O .rwdata	00000030 audio_and_video_config_0
00000000 l    df *ABS*	00000000 LT24_Controller.c
00000000 l    df *ABS*	00000000 Pitch_dummy.c
00000000 l    df *ABS*	00000000 Volume_dummy.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04011260 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401146c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04011ca0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04012630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04012930 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04012a70 l     F .text	0000003c alt_get_errno
04012aac l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0403960c g     O .bss	00000004 alt_instruction_exception_handler
04011ed8 g     F .text	00000038 alt_up_av_config_reset
04009940 g     F .text	00000074 _mprec_log10
04012330 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
04009a2c g     F .text	0000008c __any_on
0400be24 g     F .text	00000054 _isatty_r
04032e08 g     O .rodata	00000028 __mprec_tinytens
04010614 g     F .text	00000070 LCD_DrawPoint
04011f48 g     F .text	00000034 alt_up_av_config_disable_interrupt
0400fc5c g     F .text	0000007c alt_main
04002c90 g     F .text	000000c0 _puts_r
04039650 g     O .bss	00000100 alt_irq
0400be78 g     F .text	00000060 _lseek_r
0403632c g       *ABS*	00000000 __flash_rwdata_start
04010fec g     F .text	00000028 read_freq_vol
0400debc g     F .text	00000088 .hidden __eqdf2
04017542 g     O .rodata	0000017c arial_22ptDescriptors
04039750 g       *ABS*	00000000 __alt_heap_start
0401200c g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
04002c54 g     F .text	0000003c printf
0400c090 g     F .text	0000009c _wcrtomb_r
0400a1bc g     F .text	0000005c __sseek
040070a0 g     F .text	00000010 __sinit
0400bf38 g     F .text	00000140 __swbuf_r
04007b68 g     F .text	0000007c _setlocale_r
04006f08 g     F .text	00000068 __sfmoreglue
0400fcfc g     F .text	00000024 __malloc_unlock
04000fe0 g     F .text	000000d8 draw_glissando_on_off
04010f30 g     F .text	00000028 read_freq_pitch
040362ea g     O .rwdata	00000001 pen_IRS_enable
0400078c g     F .text	000000b0 draw_line
04001448 g     F .text	00000264 vid_print_string_alpha
04008838 g     F .text	0000015c memmove
04007088 g     F .text	00000018 _cleanup
04008abc g     F .text	000000a8 _Balloc
040395d4 g     O .bss	00000004 ton_delay
0400df44 g     F .text	000000dc .hidden __gtdf2
04012cc4 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
040362e9 g     O .rwdata	00000001 CommandGetY
04000020 g       *ABS*	00000000 __flash_exceptions_start
04010588 g     F .text	0000008c LCD_Clear
0400bdc8 g     F .text	0000005c _fstat_r
040395f0 g     O .bss	00000004 errno
0400a138 g     F .text	00000008 __seofread
040395fc g     O .bss	00000004 alt_argv
0403e2e8 g       *ABS*	00000000 _gp
04010110 g     F .text	00000030 usleep
040029e4 g     F .text	00000068 touch_init
040016ac g     F .text	00000148 seperate_color_channels
040350d8 g     O .rwdata	00000180 alt_fd_list
040127d0 g     F .text	00000090 alt_find_dev
040086f0 g     F .text	00000148 memcpy
04006d58 g     F .text	0000000c _cleanup_r
0400f1a8 g     F .text	000000dc .hidden __floatsidf
040129f4 g     F .text	0000007c alt_io_redirect
0400e020 g     F .text	000000f4 .hidden __ltdf2
040132b8 g       *ABS*	00000000 __DTOR_END__
04002d50 g     F .text	00000014 puts
04012894 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400a01c g     F .text	00000074 __fpclassifyd
0400989c g     F .text	000000a4 __ratio
0400b86c g     F .text	0000001c __vfiprintf_internal
04000a88 g     F .text	0000010c draw_main_screen
04011664 g     F .text	0000021c altera_avalon_jtag_uart_read
04002c24 g     F .text	00000030 _printf_r
04002b68 g     F .text	00000064 .hidden __udivsi3
0400f9bc g     F .text	000000a4 isatty
04032e58 g     O .rodata	000000c8 __mprec_tens
04007be4 g     F .text	0000000c __locale_charset
04000290 g     F .text	00000114 codec_wm8731_init
04012e94 g     F .text	00000090 alt_icache_flush
040395ec g     O .bss	00000004 __malloc_top_pad
04011e58 g     F .text	00000080 alt_up_av_config_read_data
040362f4 g     O .rwdata	00000004 __mb_cur_max
04007c14 g     F .text	0000000c _localeconv_r
04008ec8 g     F .text	0000003c __i2b
04007524 g     F .text	000004bc __sfvwrite_r
0400a090 g     F .text	00000054 _sbrk_r
0400bed8 g     F .text	00000060 _read_r
04036314 g     O .rwdata	00000004 alt_max_fd
0400babc g     F .text	000000f0 _fclose_r
04006d20 g     F .text	00000030 fflush
040395e8 g     O .bss	00000004 __malloc_max_sbrked_mem
04033c4c g     O .rwdata	00000bc0 tahomabold_32
0400cd28 g     F .text	000008ac .hidden __adddf3
04009644 g     F .text	0000010c __b2d
04010f58 g     F .text	00000030 set_calibration_vol
0400c7f0 g     F .text	00000538 .hidden __umoddi3
0400fb88 g     F .text	000000d4 lseek
040362ec g     O .rwdata	00000004 _global_impure_ptr
04011014 g     F .text	00000028 read_cntrl_vol
04009ab8 g     F .text	00000564 _realloc_r
04039750 g       *ABS*	00000000 __bss_end
0400f890 g     F .text	000000f0 alt_iic_isr_register
04010008 g     F .text	00000108 alt_tick
0400c278 g     F .text	00000578 .hidden __udivdi3
0400bd24 g     F .text	00000024 _fputwc_r
04032e30 g     O .rodata	00000028 __mprec_bigtens
04008cac g     F .text	00000104 __s2b
0400f284 g     F .text	000000a8 .hidden __floatunsidf
04009384 g     F .text	00000060 __mcmp
040070c0 g     F .text	00000018 __fp_lock_all
0400f844 g     F .text	0000004c alt_ic_irq_enabled
0401605e g     O .rodata	000014e4 arial_22ptBitmaps
0400ff6c g     F .text	0000009c alt_alarm_stop
040395f4 g     O .bss	00000004 alt_irq_active
040176be g     O .rodata	00001780 bahnschriftCondensed_24ptBitmaps
040000fc g     F .exceptions	000000d4 alt_irq_handler
040350b0 g     O .rwdata	00000028 alt_dev_null
04010e64 g     F .text	00000038 set_glissando_delay
04000b94 g     F .text	00000088 draw_calibrating_screen
040125e8 g     F .text	00000048 alt_dcache_flush_all
04008db0 g     F .text	00000068 __hi0bits
04010f88 g     F .text	0000002c done_calibration_vol
04010f04 g     F .text	0000002c done_calibration_pitch
0400f128 g     F .text	00000080 .hidden __fixdfsi
0403632c g       *ABS*	00000000 __ram_rwdata_end
0403630c g     O .rwdata	00000008 alt_dev_list
0401017c g     F .text	000000f8 write
04000514 g     F .text	00000278 draw_sloped_line
0403308c g       *ABS*	00000000 __ram_rodata_end
0400f630 g     F .text	000000b0 fstat
0400e020 g     F .text	000000f4 .hidden __ledf2
040090fc g     F .text	00000140 __pow5mult
0400a410 g     F .text	0000145c ___vfiprintf_internal_r
040395e0 g     O .bss	00000004 __nlocale_changed
04002bcc g     F .text	00000058 .hidden __umodsi3
04010468 g     F .text	00000120 LCD_SetRect
040026d4 g     F .text	00000310 touch_isr
04010fb4 g     F .text	00000038 set_vol
04039750 g       *ABS*	00000000 end
040111a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04001eb4 g     F .text	000001f0 vid_print_char
040003a4 g     F .text	00000094 set_vol_test
040132b8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04011d18 g     F .text	0000007c alt_avalon_timer_sc_init
0400f32c g     F .text	00000064 .hidden __clzsi2
04011880 g     F .text	00000224 altera_avalon_jtag_uart_write
040070b0 g     F .text	00000004 __sfp_lock_acquire
0400860c g     F .text	000000e4 memchr
04002dfc g     F .text	000021f8 ___vfprintf_internal_r
04007214 g     F .text	00000310 _free_r
04007bf0 g     F .text	00000010 __locale_mb_cur_max
040103b0 g     F .text	000000b8 LCD_SetCursor
04013104 g     F .text	00000180 __call_exitprocs
040395dc g     O .bss	00000004 __mlocale_changed
04000e2c g     F .text	000000a8 draw_update_volume_bar
04000ed4 g     F .text	0000010c draw_help_screen
040362f8 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04039604 g     O .bss	00000004 _alt_tick_rate
04001210 g     F .text	000000a8 draw_update_glissando_delay
0400923c g     F .text	00000148 __lshift
04011df4 g     F .text	00000064 alt_up_av_config_write_data
04011aa4 g     F .text	000001fc alt_avalon_spi_command
04039608 g     O .bss	00000004 _alt_nticks
0400fd5c g     F .text	000000fc read
040102e0 g     F .text	00000080 alt_sys_init
04012fec g     F .text	00000118 __register_exitproc
04012438 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
04008f04 g     F .text	000001f8 __multiply
0401150c g     F .text	00000068 altera_avalon_jtag_uart_close
040362e8 g     O .rwdata	00000001 CommandGetX
0403308c g       *ABS*	00000000 __ram_rwdata_start
040132b8 g       *ABS*	00000000 __ram_rodata_start
04039610 g     O .bss	00000028 __malloc_current_mallinfo
04010e9c g     F .text	00000038 set_glissando
04009750 g     F .text	0000014c __d2b
04039638 g     O .bss	00000018 my_alarm
0401103c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04012df0 g     F .text	000000a4 alt_get_fd
04012490 g     F .text	00000158 alt_busy_sleep
0400b9a4 g     F .text	00000054 _close_r
04001924 g     F .text	0000022c alpha_blending
040010b8 g     F .text	00000158 draw_glissando_set
04012f70 g     F .text	0000007c memcmp
040110fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04039750 g       *ABS*	00000000 __alt_stack_base
0401114c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040008f4 g     F .text	00000194 draw_box
040050cc g     F .text	00000154 __swsetup_r
040395cc g     O .bss	00000004 i2c_dev
0400d5d4 g     F .text	000008e8 .hidden __divdf3
04006f70 g     F .text	00000118 __sfp
040099b4 g     F .text	00000078 __copybits
04034ca8 g     O .rwdata	00000408 __malloc_av_
040070bc g     F .text	00000004 __sinit_lock_release
0400e114 g     F .text	00000718 .hidden __muldf3
04000438 g     F .text	00000050 Delay_Ms_1
0400a0e4 g     F .text	00000054 __sread
04012ce8 g     F .text	00000108 alt_find_file
0401266c g     F .text	000000a4 alt_dev_llist_insert
0400fcd8 g     F .text	00000024 __malloc_lock
0400febc g     F .text	000000b0 sbrk
04006cc4 g     F .text	0000005c _fflush_r
0400b9f8 g     F .text	000000c4 _calloc_r
040395cc g       *ABS*	00000000 __bss_start
040107f4 g     F .text	00000670 LCD_Init
04008994 g     F .text	00000128 memset
040020e8 g     F .text	000005ec main
04039600 g     O .bss	00000004 alt_envp
040395e4 g     O .bss	00000004 __malloc_max_total_mem
0401109c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400c078 g     F .text	00000018 __swbuf
0403308c g     O .rwdata	00000bc0 tahomabold_20
0400a218 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04001b50 g     F .text	00000220 vid_print_char_alpha
0400bbac g     F .text	00000014 fclose
04000cf0 g     F .text	0000013c draw_volume_screen
04005420 g     F .text	00001688 _dtoa_r
04007e00 g     F .text	0000080c _malloc_r
0400c1ec g     F .text	00000030 __ascii_wctomb
0400083c g     F .text	000000b8 paint_block
04036318 g     O .rwdata	00000004 alt_errno
040079e0 g     F .text	000000c4 _fwalk
04010360 g     F .text	00000050 Delay_Ms
04002a70 g     F .text	00000084 .hidden __divsi3
040070f0 g     F .text	00000124 _malloc_trim_r
040132b8 g       *ABS*	00000000 __CTOR_END__
0400a220 g     F .text	000000dc strcmp
040020a4 g     F .text	00000044 alarm_callback
040132b8 g       *ABS*	00000000 __flash_rodata_start
040132b8 g       *ABS*	00000000 __DTOR_LIST__
04000000 g       *ABS*	00000000 __alt_mem_dram_ctrl
0400debc g     F .text	00000088 .hidden __nedf2
04011d94 g     F .text	00000060 alt_up_av_config_open_dev
040102a8 g     F .text	00000038 alt_irq_init
0400fe58 g     F .text	00000064 alt_release_fd
04032f40 g     O .rodata	00000100 .hidden __clz_tab
040012b8 g     F .text	000000f0 draw_display_ton
040395d8 g     O .bss	00000004 _PathLocale
04012f24 g     F .text	00000014 atexit
0400b944 g     F .text	00000060 _write_r
04011fd4 g     F .text	00000038 alt_up_av_config_read_ready
04007c20 g     F .text	00000018 setlocale
040362f0 g     O .rwdata	00000004 _impure_ptr
040395f8 g     O .bss	00000004 alt_argc
04006aa8 g     F .text	0000021c __sflush_r
04012770 g     F .text	00000060 _do_dtors
04007c0c g     F .text	00000008 __locale_cjk_lang
04000488 g     F .text	0000008c draw_horiz_line
04000020 g       .exceptions	00000000 alt_irq_entry
040095e0 g     F .text	00000064 __ulp
040070d8 g     F .text	00000018 __fp_unlock_all
040395d0 g     O .bss	00000001 cnt_ton
04036304 g     O .rwdata	00000008 alt_fs_list
04001d70 g     F .text	00000144 vid_print_string
04000020 g       *ABS*	00000000 __ram_exceptions_start
04007c38 g     F .text	0000000c localeconv
04011f10 g     F .text	00000038 alt_up_av_config_enable_interrupt
0400f6e0 g     F .text	00000050 alt_ic_isr_register
04000c1c g     F .text	000000d4 draw_calibrating_screen_done
04011f7c g     F .text	00000058 alt_up_av_config_read_acknowledge
040122d8 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
0403632c g       *ABS*	00000000 _edata
04039750 g       *ABS*	00000000 _end
0400bbc0 g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
04011574 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002a4c g     F .text	00000024 get_xy
0400f7b8 g     F .text	0000008c alt_ic_irq_disable
0400a140 g     F .text	0000007c __swrite
040362fc g     O .rwdata	00000004 __malloc_trim_threshold
04007c00 g     F .text	0000000c __locale_msgcharset
04012f38 g     F .text	00000038 exit
04010684 g     F .text	000000d0 LCD_DrawRect
04007aa4 g     F .text	000000c4 _fwalk_reent
040093e4 g     F .text	000001fc __mdiff
040123e0 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
04002af4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040070b4 g     F .text	00000004 __sfp_lock_release
04010754 g     F .text	000000a0 vid_set_pixel
04013284 g     F .text	00000034 _exit
0400f390 g     F .text	0000012c alt_alarm_start
040132d6 g     O .rodata	00002d88 arial_24ptBitmaps
04007c44 g     F .text	000001bc __smakebuf_r
04002d64 g     F .text	00000098 strlen
04012b70 g     F .text	00000154 open
0400df44 g     F .text	000000dc .hidden __gedf2
040120b0 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
04036300 g     O .rwdata	00000004 __wctomb
04010ed4 g     F .text	00000030 set_calibration_pitch
0400a3f8 g     F .text	00000018 __sprint_r
04012860 g     F .text	00000034 alt_icache_flush_all
0403631c g     O .rwdata	00000004 alt_priority_mask
0400f730 g     F .text	00000088 alt_ic_irq_enable
04004ff4 g     F .text	0000001c __vfprintf_internal
04012388 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
0400c21c g     F .text	0000005c _wctomb_r
0400e82c g     F .text	000008fc .hidden __subdf3
04008e18 g     F .text	000000b0 __lo0bits
04036324 g     O .rwdata	00000008 alt_alarm_list
04012710 g     F .text	00000060 _do_ctors
040013a8 g     F .text	000000a0 draw_display_ton_update
040017f4 g     F .text	00000130 merge_color_channels
0400c12c g     F .text	000000c0 wcrtomb
0400f4f8 g     F .text	000000d0 close
0400fac8 g     F .text	00000084 alt_load
04012198 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
0400bd48 g     F .text	00000080 fputwc
040070b8 g     F .text	00000004 __sinit_lock_acquire
04008b8c g     F .text	00000120 __multadd
04008b64 g     F .text	00000028 _Bfree
04012280 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_dram_ctrl-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810134 	movhi	r2,1028
 4000140:	10a59404 	addi	r2,r2,-27056
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810134 	movhi	r2,1028
 4000158:	10a59404 	addi	r2,r2,-27056
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0acc917 	ldw	r2,-19676(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0acc917 	ldw	r2,-19676(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4000260:	d6b8ba14 	ori	gp,gp,58088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4000268:	10a57314 	ori	r2,r2,38348

    movhi r3, %hi(__bss_end)
 400026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4000270:	18e5d414 	ori	r3,r3,38736

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	400fac80 	call	400fac8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	400fc5c0 	call	400fc5c <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <codec_wm8731_init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void codec_wm8731_init(void)
{
 4000290:	defffe04 	addi	sp,sp,-8
 4000294:	dfc00115 	stw	ra,4(sp)
 4000298:	df000015 	stw	fp,0(sp)
 400029c:	d839883a 	mov	fp,sp
	i2c_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");//Opens the Audio/Video Configuration device specified by name
 40002a0:	01010074 	movhi	r4,1025
 40002a4:	210cae04 	addi	r4,r4,12984
 40002a8:	4011d940 	call	4011d94 <alt_up_av_config_open_dev>
 40002ac:	d0acb915 	stw	r2,-19740(gp)
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x0F,0x000); //Reset
 40002b0:	d0acb917 	ldw	r2,-19740(gp)
 40002b4:	000d883a 	mov	r6,zero
 40002b8:	014003c4 	movi	r5,15
 40002bc:	1009883a 	mov	r4,r2
 40002c0:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x00,0x01A); //Left Line In Enable Mute 80
 40002c4:	d0acb917 	ldw	r2,-19740(gp)
 40002c8:	01800684 	movi	r6,26
 40002cc:	000b883a 	mov	r5,zero
 40002d0:	1009883a 	mov	r4,r2
 40002d4:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x01,0x01A); //Right Line In Enable Mute
 40002d8:	d0acb917 	ldw	r2,-19740(gp)
 40002dc:	01800684 	movi	r6,26
 40002e0:	01400044 	movi	r5,1
 40002e4:	1009883a 	mov	r4,r2
 40002e8:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x02,0x079); //Left Headphone Out Mute and Enable Simultaneous Load of LHPVOL[6:0] and LZCEN to RHPVOL[6:0] and RZCEN
 40002ec:	d0acb917 	ldw	r2,-19740(gp)
 40002f0:	01801e44 	movi	r6,121
 40002f4:	01400084 	movi	r5,2
 40002f8:	1009883a 	mov	r4,r2
 40002fc:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x03,0x079); //Left Headphone Out Mute and Enable Simultaneous Load of LHPVOL[6:0] and LZCEN to RHPVOL[6:0] and RZCEN
 4000300:	d0acb917 	ldw	r2,-19740(gp)
 4000304:	01801e44 	movi	r6,121
 4000308:	014000c4 	movi	r5,3
 400030c:	1009883a 	mov	r4,r2
 4000310:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x04,0x010); //Analogue Audio Path Control DAC select
 4000314:	d0acb917 	ldw	r2,-19740(gp)
 4000318:	01800404 	movi	r6,16
 400031c:	01400104 	movi	r5,4
 4000320:	1009883a 	mov	r4,r2
 4000324:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x05,0x007);//DAC Path Control enable high pass filter, 48kHz
 4000328:	d0acb917 	ldw	r2,-19740(gp)
 400032c:	018001c4 	movi	r6,7
 4000330:	01400144 	movi	r5,5
 4000334:	1009883a 	mov	r4,r2
 4000338:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x06,0x000); //Power Down Control enable Power Down for line input, mic input & ADC
 400033c:	d0acb917 	ldw	r2,-19740(gp)
 4000340:	000d883a 	mov	r6,zero
 4000344:	01400184 	movi	r5,6
 4000348:	1009883a 	mov	r4,r2
 400034c:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x07,0x079); //Digital Audio Interface Format Left Justified,  Right Channel DAC Data Left, enable Master Mode
 4000350:	d0acb917 	ldw	r2,-19740(gp)
 4000354:	01801e44 	movi	r6,121
 4000358:	014001c4 	movi	r5,7
 400035c:	1009883a 	mov	r4,r2
 4000360:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x08,0x001); //Sampling Control USB Mode 250fs
 4000364:	d0acb917 	ldw	r2,-19740(gp)
 4000368:	01800044 	movi	r6,1
 400036c:	01400204 	movi	r5,8
 4000370:	1009883a 	mov	r4,r2
 4000374:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x09,0x001); //activat DIGITAL AUDIO INTERFACE
 4000378:	d0acb917 	ldw	r2,-19740(gp)
 400037c:	01800044 	movi	r6,1
 4000380:	01400244 	movi	r5,9
 4000384:	1009883a 	mov	r4,r2
 4000388:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
}
 400038c:	0001883a 	nop
 4000390:	e037883a 	mov	sp,fp
 4000394:	dfc00117 	ldw	ra,4(sp)
 4000398:	df000017 	ldw	fp,0(sp)
 400039c:	dec00204 	addi	sp,sp,8
 40003a0:	f800283a 	ret

040003a4 <set_vol_test>:

void set_vol_test(alt_u8 vol_bar)
{
 40003a4:	defffa04 	addi	sp,sp,-24
 40003a8:	dfc00515 	stw	ra,20(sp)
 40003ac:	df000415 	stw	fp,16(sp)
 40003b0:	df000404 	addi	fp,sp,16
 40003b4:	2005883a 	mov	r2,r4
 40003b8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 vol [10]={47,48,70,92,114,121,140,160,180,200};
 40003bc:	00800bc4 	movi	r2,47
 40003c0:	e0bffc05 	stb	r2,-16(fp)
 40003c4:	00800c04 	movi	r2,48
 40003c8:	e0bffc45 	stb	r2,-15(fp)
 40003cc:	00801184 	movi	r2,70
 40003d0:	e0bffc85 	stb	r2,-14(fp)
 40003d4:	00801704 	movi	r2,92
 40003d8:	e0bffcc5 	stb	r2,-13(fp)
 40003dc:	00801c84 	movi	r2,114
 40003e0:	e0bffd05 	stb	r2,-12(fp)
 40003e4:	00801e44 	movi	r2,121
 40003e8:	e0bffd45 	stb	r2,-11(fp)
 40003ec:	00bfe304 	movi	r2,-116
 40003f0:	e0bffd85 	stb	r2,-10(fp)
 40003f4:	00bfe804 	movi	r2,-96
 40003f8:	e0bffdc5 	stb	r2,-9(fp)
 40003fc:	00bfed04 	movi	r2,-76
 4000400:	e0bffe05 	stb	r2,-8(fp)
 4000404:	00bff204 	movi	r2,-56
 4000408:	e0bffe45 	stb	r2,-7(fp)
	alt_up_av_config_write_audio_cfg_register(i2c_dev,0x02,0x07F);
 400040c:	d0acb917 	ldw	r2,-19740(gp)
 4000410:	01801fc4 	movi	r6,127
 4000414:	01400084 	movi	r5,2
 4000418:	1009883a 	mov	r4,r2
 400041c:	401200c0 	call	401200c <alt_up_av_config_write_audio_cfg_register>
	//alt_up_av_config_write_audio_cfg_register(i2c_dev,0x02,vol[vol_bar]|256);

}
 4000420:	0001883a 	nop
 4000424:	e037883a 	mov	sp,fp
 4000428:	dfc00117 	ldw	ra,4(sp)
 400042c:	df000017 	ldw	fp,0(sp)
 4000430:	dec00204 	addi	sp,sp,8
 4000434:	f800283a 	ret

04000438 <Delay_Ms_1>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms_1(alt_u16 count_ms)
{
 4000438:	defffd04 	addi	sp,sp,-12
 400043c:	dfc00215 	stw	ra,8(sp)
 4000440:	df000115 	stw	fp,4(sp)
 4000444:	df000104 	addi	fp,sp,4
 4000448:	2005883a 	mov	r2,r4
 400044c:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 4000450:	00000206 	br	400045c <Delay_Ms_1+0x24>
    {
        usleep(1000);
 4000454:	0100fa04 	movi	r4,1000
 4000458:	40101100 	call	4010110 <usleep>
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms_1(alt_u16 count_ms)
{
    while(count_ms--)
 400045c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000460:	10ffffc4 	addi	r3,r2,-1
 4000464:	e0ffff0d 	sth	r3,-4(fp)
 4000468:	10bfffcc 	andi	r2,r2,65535
 400046c:	103ff91e 	bne	r2,zero,4000454 <__alt_data_end+0xfc000454>
    {
        usleep(1000);
    }
}
 4000470:	0001883a 	nop
 4000474:	e037883a 	mov	sp,fp
 4000478:	dfc00117 	ldw	ra,4(sp)
 400047c:	df000017 	ldw	fp,0(sp)
 4000480:	dec00204 	addi	sp,sp,8
 4000484:	f800283a 	ret

04000488 <draw_horiz_line>:
 * Purpose : Drawing horizontal line
 * Return  : none
 *--------------------------------------------------*/

void draw_horiz_line (alt_u16 Hstart, alt_u16 Hend, alt_u16 V, alt_u16 color)
{
 4000488:	defff904 	addi	sp,sp,-28
 400048c:	dfc00615 	stw	ra,24(sp)
 4000490:	df000515 	stw	fp,20(sp)
 4000494:	df000504 	addi	fp,sp,20
 4000498:	2011883a 	mov	r8,r4
 400049c:	2809883a 	mov	r4,r5
 40004a0:	3007883a 	mov	r3,r6
 40004a4:	3805883a 	mov	r2,r7
 40004a8:	e23ffc0d 	sth	r8,-16(fp)
 40004ac:	e13ffd0d 	sth	r4,-12(fp)
 40004b0:	e0fffe0d 	sth	r3,-8(fp)
 40004b4:	e0bfff0d 	sth	r2,-4(fp)
	int x;
	for(x=Hstart;x<Hend;x++){
 40004b8:	e0bffc0b 	ldhu	r2,-16(fp)
 40004bc:	e0bffb15 	stw	r2,-20(fp)
 40004c0:	00000b06 	br	40004f0 <draw_horiz_line+0x68>

		LCD_DrawPoint(x, V, color);
 40004c4:	e0bffb17 	ldw	r2,-20(fp)
 40004c8:	10bfffcc 	andi	r2,r2,65535
 40004cc:	e0fffe0b 	ldhu	r3,-8(fp)
 40004d0:	e13fff0b 	ldhu	r4,-4(fp)
 40004d4:	200d883a 	mov	r6,r4
 40004d8:	180b883a 	mov	r5,r3
 40004dc:	1009883a 	mov	r4,r2
 40004e0:	40106140 	call	4010614 <LCD_DrawPoint>
 *--------------------------------------------------*/

void draw_horiz_line (alt_u16 Hstart, alt_u16 Hend, alt_u16 V, alt_u16 color)
{
	int x;
	for(x=Hstart;x<Hend;x++){
 40004e4:	e0bffb17 	ldw	r2,-20(fp)
 40004e8:	10800044 	addi	r2,r2,1
 40004ec:	e0bffb15 	stw	r2,-20(fp)
 40004f0:	e0bffd0b 	ldhu	r2,-12(fp)
 40004f4:	e0fffb17 	ldw	r3,-20(fp)
 40004f8:	18bff216 	blt	r3,r2,40004c4 <__alt_data_end+0xfc0004c4>

		LCD_DrawPoint(x, V, color);
	}
}
 40004fc:	0001883a 	nop
 4000500:	e037883a 	mov	sp,fp
 4000504:	dfc00117 	ldw	ra,4(sp)
 4000508:	df000017 	ldw	fp,0(sp)
 400050c:	dec00204 	addi	sp,sp,8
 4000510:	f800283a 	ret

04000514 <draw_sloped_line>:
                           alt_u16 vert_start,
                           alt_u16 horiz_end,
                           alt_u16 vert_end,
                           alt_u16 width,
                           alt_u16 color)
{
 4000514:	deffee04 	addi	sp,sp,-72
 4000518:	dfc01115 	stw	ra,68(sp)
 400051c:	df001015 	stw	fp,64(sp)
 4000520:	df001004 	addi	fp,sp,64
 4000524:	2013883a 	mov	r9,r4
 4000528:	2811883a 	mov	r8,r5
 400052c:	300b883a 	mov	r5,r6
 4000530:	3809883a 	mov	r4,r7
 4000534:	e0c00217 	ldw	r3,8(fp)
 4000538:	e0800317 	ldw	r2,12(fp)
 400053c:	e27ffa0d 	sth	r9,-24(fp)
 4000540:	e23ffb0d 	sth	r8,-20(fp)
 4000544:	e17ffc0d 	sth	r5,-16(fp)
 4000548:	e13ffd0d 	sth	r4,-12(fp)
 400054c:	e0fffe0d 	sth	r3,-8(fp)
 4000550:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4000554:	e0fffc0b 	ldhu	r3,-16(fp)
 4000558:	e0bffa0b 	ldhu	r2,-24(fp)
 400055c:	1885c83a 	sub	r2,r3,r2
 4000560:	1000010e 	bge	r2,zero,4000568 <draw_sloped_line+0x54>
 4000564:	0085c83a 	sub	r2,zero,r2
 4000568:	e0bff015 	stw	r2,-64(fp)
  int vert_delta = abs(vert_end-vert_start);
 400056c:	e0fffd0b 	ldhu	r3,-12(fp)
 4000570:	e0bffb0b 	ldhu	r2,-20(fp)
 4000574:	1885c83a 	sub	r2,r3,r2
 4000578:	1000010e 	bge	r2,zero,4000580 <draw_sloped_line+0x6c>
 400057c:	0085c83a 	sub	r2,zero,r2
 4000580:	e0bff115 	stw	r2,-60(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 4000584:	e0bffa0b 	ldhu	r2,-24(fp)
 4000588:	e0fffc0b 	ldhu	r3,-16(fp)
 400058c:	1880032e 	bgeu	r3,r2,400059c <draw_sloped_line+0x88>
 4000590:	00bfffc4 	movi	r2,-1
 4000594:	e0bff215 	stw	r2,-56(fp)
 4000598:	00000206 	br	40005a4 <draw_sloped_line+0x90>
 400059c:	00800044 	movi	r2,1
 40005a0:	e0bff215 	stw	r2,-56(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 40005a4:	e0bffb0b 	ldhu	r2,-20(fp)
 40005a8:	e0fffd0b 	ldhu	r3,-12(fp)
 40005ac:	1880032e 	bgeu	r3,r2,40005bc <draw_sloped_line+0xa8>
 40005b0:	00bfffc4 	movi	r2,-1
 40005b4:	e0bff315 	stw	r2,-52(fp)
 40005b8:	00000206 	br	40005c4 <draw_sloped_line+0xb0>
 40005bc:	00800044 	movi	r2,1
 40005c0:	e0bff315 	stw	r2,-52(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 40005c4:	e0fff017 	ldw	r3,-64(fp)
 40005c8:	e0bff117 	ldw	r2,-60(fp)
 40005cc:	18803516 	blt	r3,r2,40006a4 <draw_sloped_line+0x190>
    int dPr   = vert_delta<<1;
 40005d0:	e0bff117 	ldw	r2,-60(fp)
 40005d4:	1085883a 	add	r2,r2,r2
 40005d8:	e0bff615 	stw	r2,-40(fp)
    int dPru  = dPr - (horiz_delta<<1);
 40005dc:	e0bff017 	ldw	r2,-64(fp)
 40005e0:	1085883a 	add	r2,r2,r2
 40005e4:	1007883a 	mov	r3,r2
 40005e8:	e0bff617 	ldw	r2,-40(fp)
 40005ec:	10c5c83a 	sub	r2,r2,r3
 40005f0:	e0bff715 	stw	r2,-36(fp)
    int P     = dPr - horiz_delta;
 40005f4:	e0fff617 	ldw	r3,-40(fp)
 40005f8:	e0bff017 	ldw	r2,-64(fp)
 40005fc:	1885c83a 	sub	r2,r3,r2
 4000600:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4000604:	00002406 	br	4000698 <draw_sloped_line+0x184>
      // plot the pixel
    	LCD_DrawPoint(horiz_start, vert_start, color);
 4000608:	e0bffa0b 	ldhu	r2,-24(fp)
 400060c:	e0fffb0b 	ldhu	r3,-20(fp)
 4000610:	e13fff0b 	ldhu	r4,-4(fp)
 4000614:	200d883a 	mov	r6,r4
 4000618:	180b883a 	mov	r5,r3
 400061c:	1009883a 	mov	r4,r2
 4000620:	40106140 	call	4010614 <LCD_DrawPoint>
      // If we're moving both up and right
      if (P > 0) {
 4000624:	e0bff417 	ldw	r2,-48(fp)
 4000628:	00800f0e 	bge	zero,r2,4000668 <draw_sloped_line+0x154>
        horiz_start+=horiz_incr;
 400062c:	e0bff217 	ldw	r2,-56(fp)
 4000630:	1007883a 	mov	r3,r2
 4000634:	e0bffa0b 	ldhu	r2,-24(fp)
 4000638:	1885883a 	add	r2,r3,r2
 400063c:	e0bffa0d 	sth	r2,-24(fp)
        vert_start+=vert_incr;
 4000640:	e0bff317 	ldw	r2,-52(fp)
 4000644:	1007883a 	mov	r3,r2
 4000648:	e0bffb0b 	ldhu	r2,-20(fp)
 400064c:	1885883a 	add	r2,r3,r2
 4000650:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPru;
 4000654:	e0fff417 	ldw	r3,-48(fp)
 4000658:	e0bff717 	ldw	r2,-36(fp)
 400065c:	1885883a 	add	r2,r3,r2
 4000660:	e0bff415 	stw	r2,-48(fp)
 4000664:	00000906 	br	400068c <draw_sloped_line+0x178>
      } else {
        horiz_start+=horiz_incr;
 4000668:	e0bff217 	ldw	r2,-56(fp)
 400066c:	1007883a 	mov	r3,r2
 4000670:	e0bffa0b 	ldhu	r2,-24(fp)
 4000674:	1885883a 	add	r2,r3,r2
 4000678:	e0bffa0d 	sth	r2,-24(fp)
        P+=dPr;
 400067c:	e0fff417 	ldw	r3,-48(fp)
 4000680:	e0bff617 	ldw	r2,-40(fp)
 4000684:	1885883a 	add	r2,r3,r2
 4000688:	e0bff415 	stw	r2,-48(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 400068c:	e0bff017 	ldw	r2,-64(fp)
 4000690:	10bfffc4 	addi	r2,r2,-1
 4000694:	e0bff015 	stw	r2,-64(fp)
 4000698:	e0bff017 	ldw	r2,-64(fp)
 400069c:	103fda0e 	bge	r2,zero,4000608 <__alt_data_end+0xfc000608>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 40006a0:	00003406 	br	4000774 <draw_sloped_line+0x260>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 40006a4:	e0bff017 	ldw	r2,-64(fp)
 40006a8:	1085883a 	add	r2,r2,r2
 40006ac:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (vert_delta<<1);
 40006b0:	e0bff117 	ldw	r2,-60(fp)
 40006b4:	1085883a 	add	r2,r2,r2
 40006b8:	1007883a 	mov	r3,r2
 40006bc:	e0bff817 	ldw	r2,-32(fp)
 40006c0:	10c5c83a 	sub	r2,r2,r3
 40006c4:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - vert_delta;
 40006c8:	e0fff817 	ldw	r3,-32(fp)
 40006cc:	e0bff117 	ldw	r2,-60(fp)
 40006d0:	1885c83a 	sub	r2,r3,r2
 40006d4:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 40006d8:	00002406 	br	400076c <draw_sloped_line+0x258>
      // plot the pixel
    	LCD_DrawPoint(horiz_start, vert_start, color);
 40006dc:	e0bffa0b 	ldhu	r2,-24(fp)
 40006e0:	e0fffb0b 	ldhu	r3,-20(fp)
 40006e4:	e13fff0b 	ldhu	r4,-4(fp)
 40006e8:	200d883a 	mov	r6,r4
 40006ec:	180b883a 	mov	r5,r3
 40006f0:	1009883a 	mov	r4,r2
 40006f4:	40106140 	call	4010614 <LCD_DrawPoint>
      // If we're moving both up and right
      if (P > 0) {
 40006f8:	e0bff517 	ldw	r2,-44(fp)
 40006fc:	00800f0e 	bge	zero,r2,400073c <draw_sloped_line+0x228>
        horiz_start+=horiz_incr;
 4000700:	e0bff217 	ldw	r2,-56(fp)
 4000704:	1007883a 	mov	r3,r2
 4000708:	e0bffa0b 	ldhu	r2,-24(fp)
 400070c:	1885883a 	add	r2,r3,r2
 4000710:	e0bffa0d 	sth	r2,-24(fp)
        vert_start+=vert_incr;
 4000714:	e0bff317 	ldw	r2,-52(fp)
 4000718:	1007883a 	mov	r3,r2
 400071c:	e0bffb0b 	ldhu	r2,-20(fp)
 4000720:	1885883a 	add	r2,r3,r2
 4000724:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPru;
 4000728:	e0fff517 	ldw	r3,-44(fp)
 400072c:	e0bff917 	ldw	r2,-28(fp)
 4000730:	1885883a 	add	r2,r3,r2
 4000734:	e0bff515 	stw	r2,-44(fp)
 4000738:	00000906 	br	4000760 <draw_sloped_line+0x24c>
      } else {
        vert_start+=vert_incr;
 400073c:	e0bff317 	ldw	r2,-52(fp)
 4000740:	1007883a 	mov	r3,r2
 4000744:	e0bffb0b 	ldhu	r2,-20(fp)
 4000748:	1885883a 	add	r2,r3,r2
 400074c:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 4000750:	e0fff517 	ldw	r3,-44(fp)
 4000754:	e0bff817 	ldw	r2,-32(fp)
 4000758:	1885883a 	add	r2,r3,r2
 400075c:	e0bff515 	stw	r2,-44(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4000760:	e0bff117 	ldw	r2,-60(fp)
 4000764:	10bfffc4 	addi	r2,r2,-1
 4000768:	e0bff115 	stw	r2,-60(fp)
 400076c:	e0bff117 	ldw	r2,-60(fp)
 4000770:	103fda0e 	bge	r2,zero,40006dc <__alt_data_end+0xfc0006dc>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 4000774:	0001883a 	nop
 4000778:	e037883a 	mov	sp,fp
 400077c:	dfc00117 	ldw	ra,4(sp)
 4000780:	df000017 	ldw	fp,0(sp)
 4000784:	dec00204 	addi	sp,sp,8
 4000788:	f800283a 	ret

0400078c <draw_line>:
 * Return  : none
 *--------------------------------------------------*/


void draw_line(alt_u16 horiz_start, alt_u16 vert_start, alt_u16 horiz_end, alt_u16 vert_end, alt_u16 width, alt_u16 color)
{
 400078c:	defff604 	addi	sp,sp,-40
 4000790:	dfc00915 	stw	ra,36(sp)
 4000794:	df000815 	stw	fp,32(sp)
 4000798:	df000804 	addi	fp,sp,32
 400079c:	2013883a 	mov	r9,r4
 40007a0:	2811883a 	mov	r8,r5
 40007a4:	300b883a 	mov	r5,r6
 40007a8:	3809883a 	mov	r4,r7
 40007ac:	e0c00217 	ldw	r3,8(fp)
 40007b0:	e0800317 	ldw	r2,12(fp)
 40007b4:	e27ffa0d 	sth	r9,-24(fp)
 40007b8:	e23ffb0d 	sth	r8,-20(fp)
 40007bc:	e17ffc0d 	sth	r5,-16(fp)
 40007c0:	e13ffd0d 	sth	r4,-12(fp)
 40007c4:	e0fffe0d 	sth	r3,-8(fp)
 40007c8:	e0bfff0d 	sth	r2,-4(fp)

  if( vert_start == vert_end )
 40007cc:	e0fffb0b 	ldhu	r3,-20(fp)
 40007d0:	e0bffd0b 	ldhu	r2,-12(fp)
 40007d4:	18800a1e 	bne	r3,r2,4000800 <draw_line+0x74>
  {

    draw_horiz_line( horiz_start,
 40007d8:	e0bffa0b 	ldhu	r2,-24(fp)
 40007dc:	e0fffc0b 	ldhu	r3,-16(fp)
 40007e0:	e13ffb0b 	ldhu	r4,-20(fp)
 40007e4:	e17fff0b 	ldhu	r5,-4(fp)
 40007e8:	280f883a 	mov	r7,r5
 40007ec:	200d883a 	mov	r6,r4
 40007f0:	180b883a 	mov	r5,r3
 40007f4:	1009883a 	mov	r4,r2
 40007f8:	40004880 	call	4000488 <draw_horiz_line>
                          vert_end,
                          width,
                          color);

  }
}
 40007fc:	00000906 	br	4000824 <draw_line+0x98>
                         vert_start,
                         color);
  }
  else
  {
    draw_sloped_line( horiz_start,
 4000800:	e13ffa0b 	ldhu	r4,-24(fp)
 4000804:	e17ffb0b 	ldhu	r5,-20(fp)
 4000808:	e1bffc0b 	ldhu	r6,-16(fp)
 400080c:	e1fffd0b 	ldhu	r7,-12(fp)
 4000810:	e0bffe0b 	ldhu	r2,-8(fp)
 4000814:	e0ffff0b 	ldhu	r3,-4(fp)
 4000818:	d8c00115 	stw	r3,4(sp)
 400081c:	d8800015 	stw	r2,0(sp)
 4000820:	40005140 	call	4000514 <draw_sloped_line>
                          vert_end,
                          width,
                          color);

  }
}
 4000824:	0001883a 	nop
 4000828:	e037883a 	mov	sp,fp
 400082c:	dfc00117 	ldw	ra,4(sp)
 4000830:	df000017 	ldw	fp,0(sp)
 4000834:	dec00204 	addi	sp,sp,8
 4000838:	f800283a 	ret

0400083c <paint_block>:
 * Purpose : Draws a block and fills it in
 * Return  : none
 *--------------------------------------------------*/

void paint_block (alt_u16 Hstart,alt_u16 Vstart, alt_u16 Hend, alt_u16 Vend, alt_u16 color)
{
 400083c:	defff704 	addi	sp,sp,-36
 4000840:	dfc00815 	stw	ra,32(sp)
 4000844:	df000715 	stw	fp,28(sp)
 4000848:	df000704 	addi	fp,sp,28
 400084c:	2011883a 	mov	r8,r4
 4000850:	3009883a 	mov	r4,r6
 4000854:	3807883a 	mov	r3,r7
 4000858:	e0800217 	ldw	r2,8(fp)
 400085c:	e23ffb0d 	sth	r8,-20(fp)
 4000860:	e17ffc0d 	sth	r5,-16(fp)
 4000864:	e13ffd0d 	sth	r4,-12(fp)
 4000868:	e0fffe0d 	sth	r3,-8(fp)
 400086c:	e0bfff0d 	sth	r2,-4(fp)
	int x,y;
	for(y=Vstart;y<Vend;y++){
 4000870:	e0bffc0b 	ldhu	r2,-16(fp)
 4000874:	e0bffa15 	stw	r2,-24(fp)
 4000878:	00001506 	br	40008d0 <paint_block+0x94>
		for(x=Hstart;x<Hend;x++){
 400087c:	e0bffb0b 	ldhu	r2,-20(fp)
 4000880:	e0bff915 	stw	r2,-28(fp)
 4000884:	00000c06 	br	40008b8 <paint_block+0x7c>
			LCD_DrawPoint(x, y, color);
 4000888:	e0bff917 	ldw	r2,-28(fp)
 400088c:	10ffffcc 	andi	r3,r2,65535
 4000890:	e0bffa17 	ldw	r2,-24(fp)
 4000894:	10bfffcc 	andi	r2,r2,65535
 4000898:	e13fff0b 	ldhu	r4,-4(fp)
 400089c:	200d883a 	mov	r6,r4
 40008a0:	100b883a 	mov	r5,r2
 40008a4:	1809883a 	mov	r4,r3
 40008a8:	40106140 	call	4010614 <LCD_DrawPoint>

void paint_block (alt_u16 Hstart,alt_u16 Vstart, alt_u16 Hend, alt_u16 Vend, alt_u16 color)
{
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 40008ac:	e0bff917 	ldw	r2,-28(fp)
 40008b0:	10800044 	addi	r2,r2,1
 40008b4:	e0bff915 	stw	r2,-28(fp)
 40008b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40008bc:	e0fff917 	ldw	r3,-28(fp)
 40008c0:	18bff116 	blt	r3,r2,4000888 <__alt_data_end+0xfc000888>
 *--------------------------------------------------*/

void paint_block (alt_u16 Hstart,alt_u16 Vstart, alt_u16 Hend, alt_u16 Vend, alt_u16 color)
{
	int x,y;
	for(y=Vstart;y<Vend;y++){
 40008c4:	e0bffa17 	ldw	r2,-24(fp)
 40008c8:	10800044 	addi	r2,r2,1
 40008cc:	e0bffa15 	stw	r2,-24(fp)
 40008d0:	e0bffe0b 	ldhu	r2,-8(fp)
 40008d4:	e0fffa17 	ldw	r3,-24(fp)
 40008d8:	18bfe816 	blt	r3,r2,400087c <__alt_data_end+0xfc00087c>
		for(x=Hstart;x<Hend;x++){
			LCD_DrawPoint(x, y, color);
		}
	}
}
 40008dc:	0001883a 	nop
 40008e0:	e037883a 	mov	sp,fp
 40008e4:	dfc00117 	ldw	ra,4(sp)
 40008e8:	df000017 	ldw	fp,0(sp)
 40008ec:	dec00204 	addi	sp,sp,8
 40008f0:	f800283a 	ret

040008f4 <draw_box>:
 * Function: drow_box
 * Purpose : A filled or empty box can be drawn
 * Return  : none
 *--------------------------------------------------*/
int draw_box (alt_u16 horiz_start, alt_u16 vert_start, alt_u16 horiz_end, alt_u16 vert_end, alt_u16 color, int fill)
{
 40008f4:	defff704 	addi	sp,sp,-36
 40008f8:	dfc00815 	stw	ra,32(sp)
 40008fc:	df000715 	stw	fp,28(sp)
 4000900:	df000704 	addi	fp,sp,28
 4000904:	2011883a 	mov	r8,r4
 4000908:	3009883a 	mov	r4,r6
 400090c:	3807883a 	mov	r3,r7
 4000910:	e0800217 	ldw	r2,8(fp)
 4000914:	e23ffb0d 	sth	r8,-20(fp)
 4000918:	e17ffc0d 	sth	r5,-16(fp)
 400091c:	e13ffd0d 	sth	r4,-12(fp)
 4000920:	e0fffe0d 	sth	r3,-8(fp)
 4000924:	e0bfff0d 	sth	r2,-4(fp)

  // If we want to fill in our box
  if (fill) {
 4000928:	e0800317 	ldw	r2,12(fp)
 400092c:	10000c26 	beq	r2,zero,4000960 <draw_box+0x6c>
     paint_block (horiz_start, vert_start, horiz_end, vert_end, color);
 4000930:	e0fffb0b 	ldhu	r3,-20(fp)
 4000934:	e13ffc0b 	ldhu	r4,-16(fp)
 4000938:	e17ffd0b 	ldhu	r5,-12(fp)
 400093c:	e1bffe0b 	ldhu	r6,-8(fp)
 4000940:	e0bfff0b 	ldhu	r2,-4(fp)
 4000944:	d8800015 	stw	r2,0(sp)
 4000948:	300f883a 	mov	r7,r6
 400094c:	280d883a 	mov	r6,r5
 4000950:	200b883a 	mov	r5,r4
 4000954:	1809883a 	mov	r4,r3
 4000958:	400083c0 	call	400083c <paint_block>
 400095c:	00004406 	br	4000a70 <draw_box+0x17c>
  // If we're not filling in the box, just draw four lines.
  } else {
    draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color);
 4000960:	e0fffb0b 	ldhu	r3,-20(fp)
 4000964:	e13ffc0b 	ldhu	r4,-16(fp)
 4000968:	e17ffb0b 	ldhu	r5,-20(fp)
 400096c:	e0bffe0b 	ldhu	r2,-8(fp)
 4000970:	10bfffc4 	addi	r2,r2,-1
 4000974:	11bfffcc 	andi	r6,r2,65535
 4000978:	e0bfff0b 	ldhu	r2,-4(fp)
 400097c:	d8800115 	stw	r2,4(sp)
 4000980:	00800044 	movi	r2,1
 4000984:	d8800015 	stw	r2,0(sp)
 4000988:	300f883a 	mov	r7,r6
 400098c:	280d883a 	mov	r6,r5
 4000990:	200b883a 	mov	r5,r4
 4000994:	1809883a 	mov	r4,r3
 4000998:	400078c0 	call	400078c <draw_line>
    draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color);
 400099c:	e0bffd0b 	ldhu	r2,-12(fp)
 40009a0:	10bfffc4 	addi	r2,r2,-1
 40009a4:	10ffffcc 	andi	r3,r2,65535
 40009a8:	e13ffc0b 	ldhu	r4,-16(fp)
 40009ac:	e0bffd0b 	ldhu	r2,-12(fp)
 40009b0:	10bfffc4 	addi	r2,r2,-1
 40009b4:	117fffcc 	andi	r5,r2,65535
 40009b8:	e0bffe0b 	ldhu	r2,-8(fp)
 40009bc:	10bfffc4 	addi	r2,r2,-1
 40009c0:	11bfffcc 	andi	r6,r2,65535
 40009c4:	e0bfff0b 	ldhu	r2,-4(fp)
 40009c8:	d8800115 	stw	r2,4(sp)
 40009cc:	00800044 	movi	r2,1
 40009d0:	d8800015 	stw	r2,0(sp)
 40009d4:	300f883a 	mov	r7,r6
 40009d8:	280d883a 	mov	r6,r5
 40009dc:	200b883a 	mov	r5,r4
 40009e0:	1809883a 	mov	r4,r3
 40009e4:	400078c0 	call	400078c <draw_line>
    draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color);
 40009e8:	e0fffb0b 	ldhu	r3,-20(fp)
 40009ec:	e13ffc0b 	ldhu	r4,-16(fp)
 40009f0:	e0bffd0b 	ldhu	r2,-12(fp)
 40009f4:	10bfffc4 	addi	r2,r2,-1
 40009f8:	117fffcc 	andi	r5,r2,65535
 40009fc:	e1bffc0b 	ldhu	r6,-16(fp)
 4000a00:	e0bfff0b 	ldhu	r2,-4(fp)
 4000a04:	d8800115 	stw	r2,4(sp)
 4000a08:	00800044 	movi	r2,1
 4000a0c:	d8800015 	stw	r2,0(sp)
 4000a10:	300f883a 	mov	r7,r6
 4000a14:	280d883a 	mov	r6,r5
 4000a18:	200b883a 	mov	r5,r4
 4000a1c:	1809883a 	mov	r4,r3
 4000a20:	400078c0 	call	400078c <draw_line>
    draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color);
 4000a24:	e0fffb0b 	ldhu	r3,-20(fp)
 4000a28:	e0bffe0b 	ldhu	r2,-8(fp)
 4000a2c:	10bfffc4 	addi	r2,r2,-1
 4000a30:	113fffcc 	andi	r4,r2,65535
 4000a34:	e0bffd0b 	ldhu	r2,-12(fp)
 4000a38:	10bfffc4 	addi	r2,r2,-1
 4000a3c:	117fffcc 	andi	r5,r2,65535
 4000a40:	e0bffe0b 	ldhu	r2,-8(fp)
 4000a44:	10bfffc4 	addi	r2,r2,-1
 4000a48:	11bfffcc 	andi	r6,r2,65535
 4000a4c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000a50:	d8800115 	stw	r2,4(sp)
 4000a54:	00800044 	movi	r2,1
 4000a58:	d8800015 	stw	r2,0(sp)
 4000a5c:	300f883a 	mov	r7,r6
 4000a60:	280d883a 	mov	r6,r5
 4000a64:	200b883a 	mov	r5,r4
 4000a68:	1809883a 	mov	r4,r3
 4000a6c:	400078c0 	call	400078c <draw_line>
  }

  return (0);
 4000a70:	0005883a 	mov	r2,zero
}
 4000a74:	e037883a 	mov	sp,fp
 4000a78:	dfc00117 	ldw	ra,4(sp)
 4000a7c:	df000017 	ldw	fp,0(sp)
 4000a80:	dec00204 	addi	sp,sp,8
 4000a84:	f800283a 	ret

04000a88 <draw_main_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_main_screen(void)
{
 4000a88:	defffc04 	addi	sp,sp,-16
 4000a8c:	dfc00315 	stw	ra,12(sp)
 4000a90:	df000215 	stw	fp,8(sp)
 4000a94:	df000204 	addi	fp,sp,8
	LCD_DrawRect(15,10,75,310,GREY);
 4000a98:	00af6f54 	movui	r2,48573
 4000a9c:	d8800015 	stw	r2,0(sp)
 4000aa0:	01c04d84 	movi	r7,310
 4000aa4:	018012c4 	movi	r6,75
 4000aa8:	01400284 	movi	r5,10
 4000aac:	010003c4 	movi	r4,15
 4000ab0:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(80,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Kalibrieren");
 4000ab4:	008100b4 	movhi	r2,1026
 4000ab8:	10a39004 	addi	r2,r2,-29120
 4000abc:	d8800115 	stw	r2,4(sp)
 4000ac0:	00810074 	movhi	r2,1025
 4000ac4:	109d5084 	addi	r2,r2,30018
 4000ac8:	d8800015 	stw	r2,0(sp)
 4000acc:	01c10074 	movhi	r7,1025
 4000ad0:	39d81784 	addi	r7,r7,24670
 4000ad4:	000d883a 	mov	r6,zero
 4000ad8:	01400884 	movi	r5,34
 4000adc:	01001404 	movi	r4,80
 4000ae0:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(90,10,150,310,GREY);
 4000ae4:	00af6f54 	movui	r2,48573
 4000ae8:	d8800015 	stw	r2,0(sp)
 4000aec:	01c04d84 	movi	r7,310
 4000af0:	01802584 	movi	r6,150
 4000af4:	01400284 	movi	r5,10
 4000af8:	01001684 	movi	r4,90
 4000afc:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(80,109,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Volume");
 4000b00:	008100b4 	movhi	r2,1026
 4000b04:	10a39304 	addi	r2,r2,-29108
 4000b08:	d8800115 	stw	r2,4(sp)
 4000b0c:	00810074 	movhi	r2,1025
 4000b10:	109d5084 	addi	r2,r2,30018
 4000b14:	d8800015 	stw	r2,0(sp)
 4000b18:	01c10074 	movhi	r7,1025
 4000b1c:	39d81784 	addi	r7,r7,24670
 4000b20:	000d883a 	mov	r6,zero
 4000b24:	01401b44 	movi	r5,109
 4000b28:	01001404 	movi	r4,80
 4000b2c:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(165,10,225,310,GREY);
 4000b30:	00af6f54 	movui	r2,48573
 4000b34:	d8800015 	stw	r2,0(sp)
 4000b38:	01c04d84 	movi	r7,310
 4000b3c:	01803844 	movi	r6,225
 4000b40:	01400284 	movi	r5,10
 4000b44:	01002944 	movi	r4,165
 4000b48:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(80,184,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Hilfseffekt");
 4000b4c:	008100b4 	movhi	r2,1026
 4000b50:	10a39504 	addi	r2,r2,-29100
 4000b54:	d8800115 	stw	r2,4(sp)
 4000b58:	00810074 	movhi	r2,1025
 4000b5c:	109d5084 	addi	r2,r2,30018
 4000b60:	d8800015 	stw	r2,0(sp)
 4000b64:	01c10074 	movhi	r7,1025
 4000b68:	39d81784 	addi	r7,r7,24670
 4000b6c:	000d883a 	mov	r6,zero
 4000b70:	01402e04 	movi	r5,184
 4000b74:	01001404 	movi	r4,80
 4000b78:	4001d700 	call	4001d70 <vid_print_string>
}
 4000b7c:	0001883a 	nop
 4000b80:	e037883a 	mov	sp,fp
 4000b84:	dfc00117 	ldw	ra,4(sp)
 4000b88:	df000017 	ldw	fp,0(sp)
 4000b8c:	dec00204 	addi	sp,sp,8
 4000b90:	f800283a 	ret

04000b94 <draw_calibrating_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_calibrating_screen(void)
{
 4000b94:	defffc04 	addi	sp,sp,-16
 4000b98:	dfc00315 	stw	ra,12(sp)
 4000b9c:	df000215 	stw	fp,8(sp)
 4000ba0:	df000204 	addi	fp,sp,8
	vid_print_string(80,50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"calibrating");
 4000ba4:	008100b4 	movhi	r2,1026
 4000ba8:	10a39804 	addi	r2,r2,-29088
 4000bac:	d8800115 	stw	r2,4(sp)
 4000bb0:	00810074 	movhi	r2,1025
 4000bb4:	109d5084 	addi	r2,r2,30018
 4000bb8:	d8800015 	stw	r2,0(sp)
 4000bbc:	01c10074 	movhi	r7,1025
 4000bc0:	39d81784 	addi	r7,r7,24670
 4000bc4:	000d883a 	mov	r6,zero
 4000bc8:	01400c84 	movi	r5,50
 4000bcc:	01001404 	movi	r4,80
 4000bd0:	4001d700 	call	4001d70 <vid_print_string>
	vid_print_string(150,100,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"...");
 4000bd4:	008100b4 	movhi	r2,1026
 4000bd8:	10a39b04 	addi	r2,r2,-29076
 4000bdc:	d8800115 	stw	r2,4(sp)
 4000be0:	00810074 	movhi	r2,1025
 4000be4:	109d5084 	addi	r2,r2,30018
 4000be8:	d8800015 	stw	r2,0(sp)
 4000bec:	01c10074 	movhi	r7,1025
 4000bf0:	39d81784 	addi	r7,r7,24670
 4000bf4:	000d883a 	mov	r6,zero
 4000bf8:	01401904 	movi	r5,100
 4000bfc:	01002584 	movi	r4,150
 4000c00:	4001d700 	call	4001d70 <vid_print_string>
}
 4000c04:	0001883a 	nop
 4000c08:	e037883a 	mov	sp,fp
 4000c0c:	dfc00117 	ldw	ra,4(sp)
 4000c10:	df000017 	ldw	fp,0(sp)
 4000c14:	dec00204 	addi	sp,sp,8
 4000c18:	f800283a 	ret

04000c1c <draw_calibrating_screen_done>:

void draw_calibrating_screen_done(void)
{
 4000c1c:	defffc04 	addi	sp,sp,-16
 4000c20:	dfc00315 	stw	ra,12(sp)
 4000c24:	df000215 	stw	fp,8(sp)
 4000c28:	df000204 	addi	fp,sp,8
	vid_print_string(80,50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"calibrating");
 4000c2c:	008100b4 	movhi	r2,1026
 4000c30:	10a39804 	addi	r2,r2,-29088
 4000c34:	d8800115 	stw	r2,4(sp)
 4000c38:	00810074 	movhi	r2,1025
 4000c3c:	109d5084 	addi	r2,r2,30018
 4000c40:	d8800015 	stw	r2,0(sp)
 4000c44:	01c10074 	movhi	r7,1025
 4000c48:	39d81784 	addi	r7,r7,24670
 4000c4c:	000d883a 	mov	r6,zero
 4000c50:	01400c84 	movi	r5,50
 4000c54:	01001404 	movi	r4,80
 4000c58:	4001d700 	call	4001d70 <vid_print_string>
	vid_print_string(150,100,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"done");
 4000c5c:	008100b4 	movhi	r2,1026
 4000c60:	10a39c04 	addi	r2,r2,-29072
 4000c64:	d8800115 	stw	r2,4(sp)
 4000c68:	00810074 	movhi	r2,1025
 4000c6c:	109d5084 	addi	r2,r2,30018
 4000c70:	d8800015 	stw	r2,0(sp)
 4000c74:	01c10074 	movhi	r7,1025
 4000c78:	39d81784 	addi	r7,r7,24670
 4000c7c:	000d883a 	mov	r6,zero
 4000c80:	01401904 	movi	r5,100
 4000c84:	01002584 	movi	r4,150
 4000c88:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(170,10,230,110,GREY);
 4000c8c:	00af6f54 	movui	r2,48573
 4000c90:	d8800015 	stw	r2,0(sp)
 4000c94:	01c01b84 	movi	r7,110
 4000c98:	01803984 	movi	r6,230
 4000c9c:	01400284 	movi	r5,10
 4000ca0:	01002a84 	movi	r4,170
 4000ca4:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(244,189,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4000ca8:	008100b4 	movhi	r2,1026
 4000cac:	10a39e04 	addi	r2,r2,-29064
 4000cb0:	d8800115 	stw	r2,4(sp)
 4000cb4:	00810074 	movhi	r2,1025
 4000cb8:	109d5084 	addi	r2,r2,30018
 4000cbc:	d8800015 	stw	r2,0(sp)
 4000cc0:	01c10074 	movhi	r7,1025
 4000cc4:	39d81784 	addi	r7,r7,24670
 4000cc8:	000d883a 	mov	r6,zero
 4000ccc:	01402f44 	movi	r5,189
 4000cd0:	01003d04 	movi	r4,244
 4000cd4:	4001d700 	call	4001d70 <vid_print_string>
}
 4000cd8:	0001883a 	nop
 4000cdc:	e037883a 	mov	sp,fp
 4000ce0:	dfc00117 	ldw	ra,4(sp)
 4000ce4:	df000017 	ldw	fp,0(sp)
 4000ce8:	dec00204 	addi	sp,sp,8
 4000cec:	f800283a 	ret

04000cf0 <draw_volume_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_volume_screen(void)
{
 4000cf0:	defffc04 	addi	sp,sp,-16
 4000cf4:	dfc00315 	stw	ra,12(sp)
 4000cf8:	df000215 	stw	fp,8(sp)
 4000cfc:	df000204 	addi	fp,sp,8
	vid_print_string(10,25,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Volume");
 4000d00:	008100b4 	movhi	r2,1026
 4000d04:	10a39304 	addi	r2,r2,-29108
 4000d08:	d8800115 	stw	r2,4(sp)
 4000d0c:	00810074 	movhi	r2,1025
 4000d10:	109d5084 	addi	r2,r2,30018
 4000d14:	d8800015 	stw	r2,0(sp)
 4000d18:	01c10074 	movhi	r7,1025
 4000d1c:	39d81784 	addi	r7,r7,24670
 4000d20:	000d883a 	mov	r6,zero
 4000d24:	01400644 	movi	r5,25
 4000d28:	01000284 	movi	r4,10
 4000d2c:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(55,10,115,90,GREY);
 4000d30:	00af6f54 	movui	r2,48573
 4000d34:	d8800015 	stw	r2,0(sp)
 4000d38:	01c01684 	movi	r7,90
 4000d3c:	01801cc4 	movi	r6,115
 4000d40:	01400284 	movi	r5,10
 4000d44:	01000dc4 	movi	r4,55
 4000d48:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(260,60,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"_");
 4000d4c:	008100b4 	movhi	r2,1026
 4000d50:	10a39f04 	addi	r2,r2,-29060
 4000d54:	d8800115 	stw	r2,4(sp)
 4000d58:	00810074 	movhi	r2,1025
 4000d5c:	109d5084 	addi	r2,r2,30018
 4000d60:	d8800015 	stw	r2,0(sp)
 4000d64:	01c10074 	movhi	r7,1025
 4000d68:	39d81784 	addi	r7,r7,24670
 4000d6c:	000d883a 	mov	r6,zero
 4000d70:	01400f04 	movi	r5,60
 4000d74:	01004104 	movi	r4,260
 4000d78:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(55,100,115,180,GREY);
 4000d7c:	00af6f54 	movui	r2,48573
 4000d80:	d8800015 	stw	r2,0(sp)
 4000d84:	01c02d04 	movi	r7,180
 4000d88:	01801cc4 	movi	r6,115
 4000d8c:	01401904 	movi	r5,100
 4000d90:	01000dc4 	movi	r4,55
 4000d94:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(175,74,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"+");
 4000d98:	008100b4 	movhi	r2,1026
 4000d9c:	10a3a004 	addi	r2,r2,-29056
 4000da0:	d8800115 	stw	r2,4(sp)
 4000da4:	00810074 	movhi	r2,1025
 4000da8:	109d5084 	addi	r2,r2,30018
 4000dac:	d8800015 	stw	r2,0(sp)
 4000db0:	01c10074 	movhi	r7,1025
 4000db4:	39d81784 	addi	r7,r7,24670
 4000db8:	000d883a 	mov	r6,zero
 4000dbc:	01401284 	movi	r5,74
 4000dc0:	01002bc4 	movi	r4,175
 4000dc4:	4001d700 	call	4001d70 <vid_print_string>

	LCD_DrawRect(170,10,230,110,GREY);
 4000dc8:	00af6f54 	movui	r2,48573
 4000dcc:	d8800015 	stw	r2,0(sp)
 4000dd0:	01c01b84 	movi	r7,110
 4000dd4:	01803984 	movi	r6,230
 4000dd8:	01400284 	movi	r5,10
 4000ddc:	01002a84 	movi	r4,170
 4000de0:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(244,189,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4000de4:	008100b4 	movhi	r2,1026
 4000de8:	10a39e04 	addi	r2,r2,-29064
 4000dec:	d8800115 	stw	r2,4(sp)
 4000df0:	00810074 	movhi	r2,1025
 4000df4:	109d5084 	addi	r2,r2,30018
 4000df8:	d8800015 	stw	r2,0(sp)
 4000dfc:	01c10074 	movhi	r7,1025
 4000e00:	39d81784 	addi	r7,r7,24670
 4000e04:	000d883a 	mov	r6,zero
 4000e08:	01402f44 	movi	r5,189
 4000e0c:	01003d04 	movi	r4,244
 4000e10:	4001d700 	call	4001d70 <vid_print_string>
}
 4000e14:	0001883a 	nop
 4000e18:	e037883a 	mov	sp,fp
 4000e1c:	dfc00117 	ldw	ra,4(sp)
 4000e20:	df000017 	ldw	fp,0(sp)
 4000e24:	dec00204 	addi	sp,sp,8
 4000e28:	f800283a 	ret

04000e2c <draw_update_volume_bar>:

void draw_update_volume_bar(alt_u8 vol_bar)
{
 4000e2c:	defffb04 	addi	sp,sp,-20
 4000e30:	dfc00415 	stw	ra,16(sp)
 4000e34:	df000315 	stw	fp,12(sp)
 4000e38:	df000304 	addi	fp,sp,12
 4000e3c:	2005883a 	mov	r2,r4
 4000e40:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 i;
	LCD_DrawRect(55,195,115,310,GREY_SOFT);
 4000e44:	00b33314 	movui	r2,52428
 4000e48:	d8800015 	stw	r2,0(sp)
 4000e4c:	01c04d84 	movi	r7,310
 4000e50:	01801cc4 	movi	r6,115
 4000e54:	014030c4 	movi	r5,195
 4000e58:	01000dc4 	movi	r4,55
 4000e5c:	40106840 	call	4010684 <LCD_DrawRect>
	for(i = 0; i < vol_bar; i++){
 4000e60:	e03ffe05 	stb	zero,-8(fp)
 4000e64:	00001206 	br	4000eb0 <draw_update_volume_bar+0x84>
		LCD_DrawRect(60,(299-i*6-i*5),110,(299-i*6-i*5+6),GREEN);
 4000e68:	e0bffe03 	ldbu	r2,-8(fp)
 4000e6c:	10bffd64 	muli	r2,r2,-11
 4000e70:	10804ac4 	addi	r2,r2,299
 4000e74:	10ffffcc 	andi	r3,r2,65535
 4000e78:	e0bffe03 	ldbu	r2,-8(fp)
 4000e7c:	10bffd64 	muli	r2,r2,-11
 4000e80:	10804c44 	addi	r2,r2,305
 4000e84:	113fffcc 	andi	r4,r2,65535
 4000e88:	0081f804 	movi	r2,2016
 4000e8c:	d8800015 	stw	r2,0(sp)
 4000e90:	200f883a 	mov	r7,r4
 4000e94:	01801b84 	movi	r6,110
 4000e98:	180b883a 	mov	r5,r3
 4000e9c:	01000f04 	movi	r4,60
 4000ea0:	40106840 	call	4010684 <LCD_DrawRect>

void draw_update_volume_bar(alt_u8 vol_bar)
{
	alt_u8 i;
	LCD_DrawRect(55,195,115,310,GREY_SOFT);
	for(i = 0; i < vol_bar; i++){
 4000ea4:	e0bffe03 	ldbu	r2,-8(fp)
 4000ea8:	10800044 	addi	r2,r2,1
 4000eac:	e0bffe05 	stb	r2,-8(fp)
 4000eb0:	e0fffe03 	ldbu	r3,-8(fp)
 4000eb4:	e0bfff03 	ldbu	r2,-4(fp)
 4000eb8:	18bfeb36 	bltu	r3,r2,4000e68 <__alt_data_end+0xfc000e68>
		LCD_DrawRect(60,(299-i*6-i*5),110,(299-i*6-i*5+6),GREEN);
	}
}
 4000ebc:	0001883a 	nop
 4000ec0:	e037883a 	mov	sp,fp
 4000ec4:	dfc00117 	ldw	ra,4(sp)
 4000ec8:	df000017 	ldw	fp,0(sp)
 4000ecc:	dec00204 	addi	sp,sp,8
 4000ed0:	f800283a 	ret

04000ed4 <draw_help_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_help_screen(void)
{
 4000ed4:	defffc04 	addi	sp,sp,-16
 4000ed8:	dfc00315 	stw	ra,12(sp)
 4000edc:	df000215 	stw	fp,8(sp)
 4000ee0:	df000204 	addi	fp,sp,8

	LCD_DrawRect(15,10,75,90,GREY);
 4000ee4:	00af6f54 	movui	r2,48573
 4000ee8:	d8800015 	stw	r2,0(sp)
 4000eec:	01c01684 	movi	r7,90
 4000ef0:	018012c4 	movi	r6,75
 4000ef4:	01400284 	movi	r5,10
 4000ef8:	010003c4 	movi	r4,15
 4000efc:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(235,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Set");
 4000f00:	008100b4 	movhi	r2,1026
 4000f04:	10a3a104 	addi	r2,r2,-29052
 4000f08:	d8800115 	stw	r2,4(sp)
 4000f0c:	00810074 	movhi	r2,1025
 4000f10:	109d5084 	addi	r2,r2,30018
 4000f14:	d8800015 	stw	r2,0(sp)
 4000f18:	01c10074 	movhi	r7,1025
 4000f1c:	39d81784 	addi	r7,r7,24670
 4000f20:	000d883a 	mov	r6,zero
 4000f24:	01400884 	movi	r5,34
 4000f28:	01003ac4 	movi	r4,235
 4000f2c:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(90,110,150,310,GREY);
 4000f30:	00af6f54 	movui	r2,48573
 4000f34:	d8800015 	stw	r2,0(sp)
 4000f38:	01c04d84 	movi	r7,310
 4000f3c:	01802584 	movi	r6,150
 4000f40:	01401b84 	movi	r5,110
 4000f44:	01001684 	movi	r4,90
 4000f48:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(15,109,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Anzeige Ton");
 4000f4c:	008100b4 	movhi	r2,1026
 4000f50:	10a3a204 	addi	r2,r2,-29048
 4000f54:	d8800115 	stw	r2,4(sp)
 4000f58:	00810074 	movhi	r2,1025
 4000f5c:	109d5084 	addi	r2,r2,30018
 4000f60:	d8800015 	stw	r2,0(sp)
 4000f64:	01c10074 	movhi	r7,1025
 4000f68:	39d81784 	addi	r7,r7,24670
 4000f6c:	000d883a 	mov	r6,zero
 4000f70:	01401b44 	movi	r5,109
 4000f74:	010003c4 	movi	r4,15
 4000f78:	4001d700 	call	4001d70 <vid_print_string>

	LCD_DrawRect(170,10,230,110,GREY);
 4000f7c:	00af6f54 	movui	r2,48573
 4000f80:	d8800015 	stw	r2,0(sp)
 4000f84:	01c01b84 	movi	r7,110
 4000f88:	01803984 	movi	r6,230
 4000f8c:	01400284 	movi	r5,10
 4000f90:	01002a84 	movi	r4,170
 4000f94:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(244,189,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4000f98:	008100b4 	movhi	r2,1026
 4000f9c:	10a39e04 	addi	r2,r2,-29064
 4000fa0:	d8800115 	stw	r2,4(sp)
 4000fa4:	00810074 	movhi	r2,1025
 4000fa8:	109d5084 	addi	r2,r2,30018
 4000fac:	d8800015 	stw	r2,0(sp)
 4000fb0:	01c10074 	movhi	r7,1025
 4000fb4:	39d81784 	addi	r7,r7,24670
 4000fb8:	000d883a 	mov	r6,zero
 4000fbc:	01402f44 	movi	r5,189
 4000fc0:	01003d04 	movi	r4,244
 4000fc4:	4001d700 	call	4001d70 <vid_print_string>

}
 4000fc8:	0001883a 	nop
 4000fcc:	e037883a 	mov	sp,fp
 4000fd0:	dfc00117 	ldw	ra,4(sp)
 4000fd4:	df000017 	ldw	fp,0(sp)
 4000fd8:	dec00204 	addi	sp,sp,8
 4000fdc:	f800283a 	ret

04000fe0 <draw_glissando_on_off>:

void draw_glissando_on_off(alt_u8 on_off){
 4000fe0:	defffb04 	addi	sp,sp,-20
 4000fe4:	dfc00415 	stw	ra,16(sp)
 4000fe8:	df000315 	stw	fp,12(sp)
 4000fec:	df000304 	addi	fp,sp,12
 4000ff0:	2005883a 	mov	r2,r4
 4000ff4:	e0bfff05 	stb	r2,-4(fp)
	if(on_off == 1){
 4000ff8:	e0bfff03 	ldbu	r2,-4(fp)
 4000ffc:	10800058 	cmpnei	r2,r2,1
 4001000:	1000141e 	bne	r2,zero,4001054 <draw_glissando_on_off+0x74>
		LCD_DrawRect(15,110,75,310,GREEN);
 4001004:	0081f804 	movi	r2,2016
 4001008:	d8800015 	stw	r2,0(sp)
 400100c:	01c04d84 	movi	r7,310
 4001010:	018012c4 	movi	r6,75
 4001014:	01401b84 	movi	r5,110
 4001018:	010003c4 	movi	r4,15
 400101c:	40106840 	call	4010684 <LCD_DrawRect>
		vid_print_string(15,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando on");
 4001020:	008100b4 	movhi	r2,1026
 4001024:	10a3a504 	addi	r2,r2,-29036
 4001028:	d8800115 	stw	r2,4(sp)
 400102c:	00810074 	movhi	r2,1025
 4001030:	109d5084 	addi	r2,r2,30018
 4001034:	d8800015 	stw	r2,0(sp)
 4001038:	01c10074 	movhi	r7,1025
 400103c:	39d81784 	addi	r7,r7,24670
 4001040:	000d883a 	mov	r6,zero
 4001044:	01400884 	movi	r5,34
 4001048:	010003c4 	movi	r4,15
 400104c:	4001d700 	call	4001d70 <vid_print_string>
	}else{
		LCD_DrawRect(15,110,75,310,GREY);
		vid_print_string(15,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando off");
	}
}
 4001050:	00001306 	br	40010a0 <draw_glissando_on_off+0xc0>
void draw_glissando_on_off(alt_u8 on_off){
	if(on_off == 1){
		LCD_DrawRect(15,110,75,310,GREEN);
		vid_print_string(15,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando on");
	}else{
		LCD_DrawRect(15,110,75,310,GREY);
 4001054:	00af6f54 	movui	r2,48573
 4001058:	d8800015 	stw	r2,0(sp)
 400105c:	01c04d84 	movi	r7,310
 4001060:	018012c4 	movi	r6,75
 4001064:	01401b84 	movi	r5,110
 4001068:	010003c4 	movi	r4,15
 400106c:	40106840 	call	4010684 <LCD_DrawRect>
		vid_print_string(15,34,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Glissando off");
 4001070:	008100b4 	movhi	r2,1026
 4001074:	10a3a904 	addi	r2,r2,-29020
 4001078:	d8800115 	stw	r2,4(sp)
 400107c:	00810074 	movhi	r2,1025
 4001080:	109d5084 	addi	r2,r2,30018
 4001084:	d8800015 	stw	r2,0(sp)
 4001088:	01c10074 	movhi	r7,1025
 400108c:	39d81784 	addi	r7,r7,24670
 4001090:	000d883a 	mov	r6,zero
 4001094:	01400884 	movi	r5,34
 4001098:	010003c4 	movi	r4,15
 400109c:	4001d700 	call	4001d70 <vid_print_string>
	}
}
 40010a0:	0001883a 	nop
 40010a4:	e037883a 	mov	sp,fp
 40010a8:	dfc00117 	ldw	ra,4(sp)
 40010ac:	df000017 	ldw	fp,0(sp)
 40010b0:	dec00204 	addi	sp,sp,8
 40010b4:	f800283a 	ret

040010b8 <draw_glissando_set>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_glissando_set(void)
{
 40010b8:	defffc04 	addi	sp,sp,-16
 40010bc:	dfc00315 	stw	ra,12(sp)
 40010c0:	df000215 	stw	fp,8(sp)
 40010c4:	df000204 	addi	fp,sp,8
	vid_print_string(10,25,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Delay");
 40010c8:	008100b4 	movhi	r2,1026
 40010cc:	10a3ad04 	addi	r2,r2,-29004
 40010d0:	d8800115 	stw	r2,4(sp)
 40010d4:	00810074 	movhi	r2,1025
 40010d8:	109d5084 	addi	r2,r2,30018
 40010dc:	d8800015 	stw	r2,0(sp)
 40010e0:	01c10074 	movhi	r7,1025
 40010e4:	39d81784 	addi	r7,r7,24670
 40010e8:	000d883a 	mov	r6,zero
 40010ec:	01400644 	movi	r5,25
 40010f0:	01000284 	movi	r4,10
 40010f4:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(55,195,115,310,GREY_SOFT);
 40010f8:	00b33314 	movui	r2,52428
 40010fc:	d8800015 	stw	r2,0(sp)
 4001100:	01c04d84 	movi	r7,310
 4001104:	01801cc4 	movi	r6,115
 4001108:	014030c4 	movi	r5,195
 400110c:	01000dc4 	movi	r4,55
 4001110:	40106840 	call	4010684 <LCD_DrawRect>
	LCD_DrawRect(55,10,115,90,GREY);
 4001114:	00af6f54 	movui	r2,48573
 4001118:	d8800015 	stw	r2,0(sp)
 400111c:	01c01684 	movi	r7,90
 4001120:	01801cc4 	movi	r6,115
 4001124:	01400284 	movi	r5,10
 4001128:	01000dc4 	movi	r4,55
 400112c:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(260,60,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"_");
 4001130:	008100b4 	movhi	r2,1026
 4001134:	10a39f04 	addi	r2,r2,-29060
 4001138:	d8800115 	stw	r2,4(sp)
 400113c:	00810074 	movhi	r2,1025
 4001140:	109d5084 	addi	r2,r2,30018
 4001144:	d8800015 	stw	r2,0(sp)
 4001148:	01c10074 	movhi	r7,1025
 400114c:	39d81784 	addi	r7,r7,24670
 4001150:	000d883a 	mov	r6,zero
 4001154:	01400f04 	movi	r5,60
 4001158:	01004104 	movi	r4,260
 400115c:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(55,100,115,180,GREY);
 4001160:	00af6f54 	movui	r2,48573
 4001164:	d8800015 	stw	r2,0(sp)
 4001168:	01c02d04 	movi	r7,180
 400116c:	01801cc4 	movi	r6,115
 4001170:	01401904 	movi	r5,100
 4001174:	01000dc4 	movi	r4,55
 4001178:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(175,74,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"+");
 400117c:	008100b4 	movhi	r2,1026
 4001180:	10a3a004 	addi	r2,r2,-29056
 4001184:	d8800115 	stw	r2,4(sp)
 4001188:	00810074 	movhi	r2,1025
 400118c:	109d5084 	addi	r2,r2,30018
 4001190:	d8800015 	stw	r2,0(sp)
 4001194:	01c10074 	movhi	r7,1025
 4001198:	39d81784 	addi	r7,r7,24670
 400119c:	000d883a 	mov	r6,zero
 40011a0:	01401284 	movi	r5,74
 40011a4:	01002bc4 	movi	r4,175
 40011a8:	4001d700 	call	4001d70 <vid_print_string>

	LCD_DrawRect(170,10,230,110,GREY);
 40011ac:	00af6f54 	movui	r2,48573
 40011b0:	d8800015 	stw	r2,0(sp)
 40011b4:	01c01b84 	movi	r7,110
 40011b8:	01803984 	movi	r6,230
 40011bc:	01400284 	movi	r5,10
 40011c0:	01002a84 	movi	r4,170
 40011c4:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(244,189,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 40011c8:	008100b4 	movhi	r2,1026
 40011cc:	10a39e04 	addi	r2,r2,-29064
 40011d0:	d8800115 	stw	r2,4(sp)
 40011d4:	00810074 	movhi	r2,1025
 40011d8:	109d5084 	addi	r2,r2,30018
 40011dc:	d8800015 	stw	r2,0(sp)
 40011e0:	01c10074 	movhi	r7,1025
 40011e4:	39d81784 	addi	r7,r7,24670
 40011e8:	000d883a 	mov	r6,zero
 40011ec:	01402f44 	movi	r5,189
 40011f0:	01003d04 	movi	r4,244
 40011f4:	4001d700 	call	4001d70 <vid_print_string>
}
 40011f8:	0001883a 	nop
 40011fc:	e037883a 	mov	sp,fp
 4001200:	dfc00117 	ldw	ra,4(sp)
 4001204:	df000017 	ldw	fp,0(sp)
 4001208:	dec00204 	addi	sp,sp,8
 400120c:	f800283a 	ret

04001210 <draw_update_glissando_delay>:

void draw_update_glissando_delay(alt_u8 gli_delay)
{
 4001210:	defffb04 	addi	sp,sp,-20
 4001214:	dfc00415 	stw	ra,16(sp)
 4001218:	df000315 	stw	fp,12(sp)
 400121c:	df000304 	addi	fp,sp,12
 4001220:	2005883a 	mov	r2,r4
 4001224:	e0bfff05 	stb	r2,-4(fp)
	char gli_delay_str[3];
	sprintf(gli_delay_str,"%d ms",gli_delay);
	vid_print_string(15,74,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,gli_delay_str);
	*/
	alt_u8 i;
	LCD_DrawRect(55,195,115,310,GREY_SOFT);
 4001228:	00b33314 	movui	r2,52428
 400122c:	d8800015 	stw	r2,0(sp)
 4001230:	01c04d84 	movi	r7,310
 4001234:	01801cc4 	movi	r6,115
 4001238:	014030c4 	movi	r5,195
 400123c:	01000dc4 	movi	r4,55
 4001240:	40106840 	call	4010684 <LCD_DrawRect>
	for(i = 0; i < gli_delay; i++){
 4001244:	e03ffe05 	stb	zero,-8(fp)
 4001248:	00001206 	br	4001294 <draw_update_glissando_delay+0x84>
		LCD_DrawRect(60,(299-i*6-i*5),110,(299-i*6-i*5+6),GREEN);
 400124c:	e0bffe03 	ldbu	r2,-8(fp)
 4001250:	10bffd64 	muli	r2,r2,-11
 4001254:	10804ac4 	addi	r2,r2,299
 4001258:	10ffffcc 	andi	r3,r2,65535
 400125c:	e0bffe03 	ldbu	r2,-8(fp)
 4001260:	10bffd64 	muli	r2,r2,-11
 4001264:	10804c44 	addi	r2,r2,305
 4001268:	113fffcc 	andi	r4,r2,65535
 400126c:	0081f804 	movi	r2,2016
 4001270:	d8800015 	stw	r2,0(sp)
 4001274:	200f883a 	mov	r7,r4
 4001278:	01801b84 	movi	r6,110
 400127c:	180b883a 	mov	r5,r3
 4001280:	01000f04 	movi	r4,60
 4001284:	40106840 	call	4010684 <LCD_DrawRect>
	sprintf(gli_delay_str,"%d ms",gli_delay);
	vid_print_string(15,74,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,gli_delay_str);
	*/
	alt_u8 i;
	LCD_DrawRect(55,195,115,310,GREY_SOFT);
	for(i = 0; i < gli_delay; i++){
 4001288:	e0bffe03 	ldbu	r2,-8(fp)
 400128c:	10800044 	addi	r2,r2,1
 4001290:	e0bffe05 	stb	r2,-8(fp)
 4001294:	e0fffe03 	ldbu	r3,-8(fp)
 4001298:	e0bfff03 	ldbu	r2,-4(fp)
 400129c:	18bfeb36 	bltu	r3,r2,400124c <__alt_data_end+0xfc00124c>
		LCD_DrawRect(60,(299-i*6-i*5),110,(299-i*6-i*5+6),GREEN);
	}
}
 40012a0:	0001883a 	nop
 40012a4:	e037883a 	mov	sp,fp
 40012a8:	dfc00117 	ldw	ra,4(sp)
 40012ac:	df000017 	ldw	fp,0(sp)
 40012b0:	dec00204 	addi	sp,sp,8
 40012b4:	f800283a 	ret

040012b8 <draw_display_ton>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_display_ton(void)
{
 40012b8:	defffc04 	addi	sp,sp,-16
 40012bc:	dfc00315 	stw	ra,12(sp)
 40012c0:	df000215 	stw	fp,8(sp)
 40012c4:	df000204 	addi	fp,sp,8
	LCD_DrawRect(153,10,155,310,BLACK);
 40012c8:	d8000015 	stw	zero,0(sp)
 40012cc:	01c04d84 	movi	r7,310
 40012d0:	018026c4 	movi	r6,155
 40012d4:	01400284 	movi	r5,10
 40012d8:	01002644 	movi	r4,153
 40012dc:	40106840 	call	4010684 <LCD_DrawRect>
	LCD_DrawRect(60,159,155,161,BLACK);
 40012e0:	d8000015 	stw	zero,0(sp)
 40012e4:	01c02844 	movi	r7,161
 40012e8:	018026c4 	movi	r6,155
 40012ec:	014027c4 	movi	r5,159
 40012f0:	01000f04 	movi	r4,60
 40012f4:	40106840 	call	4010684 <LCD_DrawRect>
	LCD_DrawRect(10,130,60,180,WHITE);
 40012f8:	00bfffd4 	movui	r2,65535
 40012fc:	d8800015 	stw	r2,0(sp)
 4001300:	01c02d04 	movi	r7,180
 4001304:	01800f04 	movi	r6,60
 4001308:	01402084 	movi	r5,130
 400130c:	01000284 	movi	r4,10
 4001310:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(149,38,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"C#");
 4001314:	008100b4 	movhi	r2,1026
 4001318:	10a3af04 	addi	r2,r2,-28996
 400131c:	d8800115 	stw	r2,4(sp)
 4001320:	00810074 	movhi	r2,1025
 4001324:	109d5084 	addi	r2,r2,30018
 4001328:	d8800015 	stw	r2,0(sp)
 400132c:	01c10074 	movhi	r7,1025
 4001330:	39d81784 	addi	r7,r7,24670
 4001334:	000d883a 	mov	r6,zero
 4001338:	01400984 	movi	r5,38
 400133c:	01002544 	movi	r4,149
 4001340:	4001d700 	call	4001d70 <vid_print_string>
	LCD_DrawRect(170,10,230,110,GREY);
 4001344:	00af6f54 	movui	r2,48573
 4001348:	d8800015 	stw	r2,0(sp)
 400134c:	01c01b84 	movi	r7,110
 4001350:	01803984 	movi	r6,230
 4001354:	01400284 	movi	r5,10
 4001358:	01002a84 	movi	r4,170
 400135c:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(244,189,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"@");
 4001360:	008100b4 	movhi	r2,1026
 4001364:	10a39e04 	addi	r2,r2,-29064
 4001368:	d8800115 	stw	r2,4(sp)
 400136c:	00810074 	movhi	r2,1025
 4001370:	109d5084 	addi	r2,r2,30018
 4001374:	d8800015 	stw	r2,0(sp)
 4001378:	01c10074 	movhi	r7,1025
 400137c:	39d81784 	addi	r7,r7,24670
 4001380:	000d883a 	mov	r6,zero
 4001384:	01402f44 	movi	r5,189
 4001388:	01003d04 	movi	r4,244
 400138c:	4001d700 	call	4001d70 <vid_print_string>
}
 4001390:	0001883a 	nop
 4001394:	e037883a 	mov	sp,fp
 4001398:	dfc00117 	ldw	ra,4(sp)
 400139c:	df000017 	ldw	fp,0(sp)
 40013a0:	dec00204 	addi	sp,sp,8
 40013a4:	f800283a 	ret

040013a8 <draw_display_ton_update>:
void draw_display_ton_update(void)
{
 40013a8:	defffc04 	addi	sp,sp,-16
 40013ac:	dfc00315 	stw	ra,12(sp)
 40013b0:	df000215 	stw	fp,8(sp)
 40013b4:	df000204 	addi	fp,sp,8
	//char gli_delay_str[3];
	//sprintf(gli_delay_str,"%d ms",cnt_ton);
	LCD_DrawRect(10,130,60,180,WHITE);
 40013b8:	00bfffd4 	movui	r2,65535
 40013bc:	d8800015 	stw	r2,0(sp)
 40013c0:	01c02d04 	movi	r7,180
 40013c4:	01800f04 	movi	r6,60
 40013c8:	01402084 	movi	r5,130
 40013cc:	01000284 	movi	r4,10
 40013d0:	40106840 	call	4010684 <LCD_DrawRect>
	vid_print_string(149,38,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"AH");
 40013d4:	008100b4 	movhi	r2,1026
 40013d8:	10a3b004 	addi	r2,r2,-28992
 40013dc:	d8800115 	stw	r2,4(sp)
 40013e0:	00810074 	movhi	r2,1025
 40013e4:	109d5084 	addi	r2,r2,30018
 40013e8:	d8800015 	stw	r2,0(sp)
 40013ec:	01c10074 	movhi	r7,1025
 40013f0:	39d81784 	addi	r7,r7,24670
 40013f4:	000d883a 	mov	r6,zero
 40013f8:	01400984 	movi	r5,38
 40013fc:	01002544 	movi	r4,149
 4001400:	4001d700 	call	4001d70 <vid_print_string>
	cnt_ton ++;
 4001404:	d0acba03 	ldbu	r2,-19736(gp)
 4001408:	10800044 	addi	r2,r2,1
 400140c:	d0acba05 	stb	r2,-19736(gp)
	if(cnt_ton>=6){
 4001410:	d0acba03 	ldbu	r2,-19736(gp)
 4001414:	10803fcc 	andi	r2,r2,255
 4001418:	108001b0 	cmpltui	r2,r2,6
 400141c:	1000011e 	bne	r2,zero,4001424 <draw_display_ton_update+0x7c>
		cnt_ton = 0;
 4001420:	d02cba05 	stb	zero,-19736(gp)
	}
	printf ("ton update\n");
 4001424:	010100b4 	movhi	r4,1026
 4001428:	2123b104 	addi	r4,r4,-28988
 400142c:	4002d500 	call	4002d50 <puts>
}
 4001430:	0001883a 	nop
 4001434:	e037883a 	mov	sp,fp
 4001438:	dfc00117 	ldw	ra,4(sp)
 400143c:	df000017 	ldw	fp,0(sp)
 4001440:	dec00204 	addi	sp,sp,8
 4001444:	f800283a 	ret

04001448 <vid_print_string_alpha>:




int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 4001448:	defff404 	addi	sp,sp,-48
 400144c:	dfc00b15 	stw	ra,44(sp)
 4001450:	df000a15 	stw	fp,40(sp)
 4001454:	df000a04 	addi	fp,sp,40
 4001458:	e13ffc15 	stw	r4,-16(fp)
 400145c:	e17ffd15 	stw	r5,-12(fp)
 4001460:	e1bffe15 	stw	r6,-8(fp)
 4001464:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4001468:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 400146c:	e0bffc17 	ldw	r2,-16(fp)
 4001470:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001474:	00007f06 	br	4001674 <vid_print_string_alpha+0x22c>
    //Handle newline char here.
    if (string[i] == '\n') {
 4001478:	e0bff917 	ldw	r2,-28(fp)
 400147c:	e0c00417 	ldw	r3,16(fp)
 4001480:	1885883a 	add	r2,r3,r2
 4001484:	10800003 	ldbu	r2,0(r2)
 4001488:	10803fcc 	andi	r2,r2,255
 400148c:	1080201c 	xori	r2,r2,128
 4001490:	10bfe004 	addi	r2,r2,-128
 4001494:	10800298 	cmpnei	r2,r2,10
 4001498:	10000c1e 	bne	r2,zero,40014cc <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 400149c:	e0bffb17 	ldw	r2,-20(fp)
 40014a0:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 40014a4:	e0800217 	ldw	r2,8(fp)
 40014a8:	1082d804 	addi	r2,r2,2912
 40014ac:	10c00517 	ldw	r3,20(r2)
 40014b0:	e0bffd17 	ldw	r2,-12(fp)
 40014b4:	1885883a 	add	r2,r3,r2
 40014b8:	e0bffd15 	stw	r2,-12(fp)
      i++;
 40014bc:	e0bff917 	ldw	r2,-28(fp)
 40014c0:	10800044 	addi	r2,r2,1
 40014c4:	e0bff915 	stw	r2,-28(fp)
      continue;
 40014c8:	00006a06 	br	4001674 <vid_print_string_alpha+0x22c>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 40014cc:	e0bff917 	ldw	r2,-28(fp)
 40014d0:	e0c00417 	ldw	r3,16(fp)
 40014d4:	1885883a 	add	r2,r3,r2
 40014d8:	10800003 	ldbu	r2,0(r2)
 40014dc:	10803fcc 	andi	r2,r2,255
 40014e0:	1080201c 	xori	r2,r2,128
 40014e4:	10bfe004 	addi	r2,r2,-128
 40014e8:	10800818 	cmpnei	r2,r2,32
 40014ec:	1000151e 	bne	r2,zero,4001544 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 40014f0:	e0bfff17 	ldw	r2,-4(fp)
 40014f4:	10bfffe0 	cmpeqi	r2,r2,-1
 40014f8:	10000b1e 	bne	r2,zero,4001528 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 40014fc:	e0800317 	ldw	r2,12(fp)
 4001500:	d8800215 	stw	r2,8(sp)
 4001504:	e0800217 	ldw	r2,8(fp)
 4001508:	d8800115 	stw	r2,4(sp)
 400150c:	e0bfff17 	ldw	r2,-4(fp)
 4001510:	d8800015 	stw	r2,0(sp)
 4001514:	01c00b44 	movi	r7,45
 4001518:	e1bfff17 	ldw	r6,-4(fp)
 400151c:	e17ffd17 	ldw	r5,-12(fp)
 4001520:	e13ffc17 	ldw	r4,-16(fp)
 4001524:	4001b500 	call	4001b50 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4001528:	e0800217 	ldw	r2,8(fp)
 400152c:	10806004 	addi	r2,r2,384
 4001530:	10c00417 	ldw	r3,16(r2)
 4001534:	e0bffc17 	ldw	r2,-16(fp)
 4001538:	1885883a 	add	r2,r3,r2
 400153c:	e0bffc15 	stw	r2,-16(fp)
 4001540:	00004906 	br	4001668 <vid_print_string_alpha+0x220>
    }
    else if(string[i] == '\t')  // this is a tab
 4001544:	e0bff917 	ldw	r2,-28(fp)
 4001548:	e0c00417 	ldw	r3,16(fp)
 400154c:	1885883a 	add	r2,r3,r2
 4001550:	10800003 	ldbu	r2,0(r2)
 4001554:	10803fcc 	andi	r2,r2,255
 4001558:	1080201c 	xori	r2,r2,128
 400155c:	10bfe004 	addi	r2,r2,-128
 4001560:	10800258 	cmpnei	r2,r2,9
 4001564:	10001d1e 	bne	r2,zero,40015dc <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4001568:	e03ffa15 	stw	zero,-24(fp)
 400156c:	00001706 	br	40015cc <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4001570:	e0bfff17 	ldw	r2,-4(fp)
 4001574:	10bfffe0 	cmpeqi	r2,r2,-1
 4001578:	10000b1e 	bne	r2,zero,40015a8 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 400157c:	e0800317 	ldw	r2,12(fp)
 4001580:	d8800215 	stw	r2,8(sp)
 4001584:	e0800217 	ldw	r2,8(fp)
 4001588:	d8800115 	stw	r2,4(sp)
 400158c:	e0bfff17 	ldw	r2,-4(fp)
 4001590:	d8800015 	stw	r2,0(sp)
 4001594:	01c00b44 	movi	r7,45
 4001598:	e1bfff17 	ldw	r6,-4(fp)
 400159c:	e17ffd17 	ldw	r5,-12(fp)
 40015a0:	e13ffc17 	ldw	r4,-16(fp)
 40015a4:	4001b500 	call	4001b50 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 40015a8:	e0800217 	ldw	r2,8(fp)
 40015ac:	10806004 	addi	r2,r2,384
 40015b0:	10c00417 	ldw	r3,16(r2)
 40015b4:	e0bffc17 	ldw	r2,-16(fp)
 40015b8:	1885883a 	add	r2,r3,r2
 40015bc:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 40015c0:	e0bffa17 	ldw	r2,-24(fp)
 40015c4:	10800044 	addi	r2,r2,1
 40015c8:	e0bffa15 	stw	r2,-24(fp)
 40015cc:	e0bffa17 	ldw	r2,-24(fp)
 40015d0:	10800090 	cmplti	r2,r2,2
 40015d4:	103fe61e 	bne	r2,zero,4001570 <__alt_data_end+0xfc001570>
 40015d8:	00002306 	br	4001668 <vid_print_string_alpha+0x220>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 40015dc:	e0bff917 	ldw	r2,-28(fp)
 40015e0:	e0c00417 	ldw	r3,16(fp)
 40015e4:	1885883a 	add	r2,r3,r2
 40015e8:	10800003 	ldbu	r2,0(r2)
 40015ec:	10c03fcc 	andi	r3,r2,255
 40015f0:	18c0201c 	xori	r3,r3,128
 40015f4:	18ffe004 	addi	r3,r3,-128
 40015f8:	e0800317 	ldw	r2,12(fp)
 40015fc:	d8800215 	stw	r2,8(sp)
 4001600:	e0800217 	ldw	r2,8(fp)
 4001604:	d8800115 	stw	r2,4(sp)
 4001608:	e0bfff17 	ldw	r2,-4(fp)
 400160c:	d8800015 	stw	r2,0(sp)
 4001610:	180f883a 	mov	r7,r3
 4001614:	e1bffe17 	ldw	r6,-8(fp)
 4001618:	e17ffd17 	ldw	r5,-12(fp)
 400161c:	e13ffc17 	ldw	r4,-16(fp)
 4001620:	4001b500 	call	4001b50 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 4001624:	e0bff917 	ldw	r2,-28(fp)
 4001628:	e0c00417 	ldw	r3,16(fp)
 400162c:	1885883a 	add	r2,r3,r2
 4001630:	10800003 	ldbu	r2,0(r2)
 4001634:	10c03fcc 	andi	r3,r2,255
 4001638:	18c0201c 	xori	r3,r3,128
 400163c:	18ffe004 	addi	r3,r3,-128
 4001640:	00820034 	movhi	r2,2048
 4001644:	10bff7c4 	addi	r2,r2,-33
 4001648:	1885883a 	add	r2,r3,r2
 400164c:	1004917a 	slli	r2,r2,5
 4001650:	e0c00217 	ldw	r3,8(fp)
 4001654:	1885883a 	add	r2,r3,r2
 4001658:	10c00417 	ldw	r3,16(r2)
 400165c:	e0bffc17 	ldw	r2,-16(fp)
 4001660:	1885883a 	add	r2,r3,r2
 4001664:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4001668:	e0bff917 	ldw	r2,-28(fp)
 400166c:	10800044 	addi	r2,r2,1
 4001670:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001674:	e0bff917 	ldw	r2,-28(fp)
 4001678:	e0c00417 	ldw	r3,16(fp)
 400167c:	1885883a 	add	r2,r3,r2
 4001680:	10800003 	ldbu	r2,0(r2)
 4001684:	10803fcc 	andi	r2,r2,255
 4001688:	1080201c 	xori	r2,r2,128
 400168c:	10bfe004 	addi	r2,r2,-128
 4001690:	103f791e 	bne	r2,zero,4001478 <__alt_data_end+0xfc001478>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4001694:	0005883a 	mov	r2,zero
}
 4001698:	e037883a 	mov	sp,fp
 400169c:	dfc00117 	ldw	ra,4(sp)
 40016a0:	df000017 	ldw	fp,0(sp)
 40016a4:	dec00204 	addi	sp,sp,8
 40016a8:	f800283a 	ret

040016ac <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 40016ac:	defff904 	addi	sp,sp,-28
 40016b0:	df000615 	stw	fp,24(sp)
 40016b4:	df000604 	addi	fp,sp,24
 40016b8:	e13ffc15 	stw	r4,-16(fp)
 40016bc:	e17ffd15 	stw	r5,-12(fp)
 40016c0:	e1bffe15 	stw	r6,-8(fp)
 40016c4:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 40016c8:	e03ffb0d 	sth	zero,-20(fp)

  if (color_depth == 16)  // R(5):G(6):B(5)
 40016cc:	e0bffc17 	ldw	r2,-16(fp)
 40016d0:	10800418 	cmpnei	r2,r2,16
 40016d4:	1000221e 	bne	r2,zero,4001760 <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 40016d8:	e0bffd17 	ldw	r2,-12(fp)
 40016dc:	10c00044 	addi	r3,r2,1
 40016e0:	e0fffd15 	stw	r3,-12(fp)
 40016e4:	10800003 	ldbu	r2,0(r2)
 40016e8:	10803fcc 	andi	r2,r2,255
 40016ec:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 40016f0:	e0bffd17 	ldw	r2,-12(fp)
 40016f4:	10800003 	ldbu	r2,0(r2)
 40016f8:	10803fcc 	andi	r2,r2,255
 40016fc:	1004923a 	slli	r2,r2,8
 4001700:	1007883a 	mov	r3,r2
 4001704:	e0bffb0b 	ldhu	r2,-20(fp)
 4001708:	1885883a 	add	r2,r3,r2
 400170c:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F;
 4001710:	e0bffb0b 	ldhu	r2,-20(fp)
 4001714:	108007cc 	andi	r2,r2,31
 4001718:	1007883a 	mov	r3,r2
 400171c:	e0800117 	ldw	r2,4(fp)
 4001720:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 4001724:	e0bffb0b 	ldhu	r2,-20(fp)
 4001728:	1004d17a 	srli	r2,r2,5
 400172c:	10800fcc 	andi	r2,r2,63
 4001730:	1007883a 	mov	r3,r2
 4001734:	e0bfff17 	ldw	r2,-4(fp)
 4001738:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 400173c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001740:	1004d2fa 	srli	r2,r2,11
 4001744:	108007cc 	andi	r2,r2,31
 4001748:	1007883a 	mov	r3,r2
 400174c:	e0bffe17 	ldw	r2,-8(fp)
 4001750:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4001754:	00800044 	movi	r2,1
 4001758:	e0bffa15 	stw	r2,-24(fp)
 400175c:	00002006 	br	40017e0 <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4001760:	e0bffc17 	ldw	r2,-16(fp)
 4001764:	10800620 	cmpeqi	r2,r2,24
 4001768:	1000031e 	bne	r2,zero,4001778 <seperate_color_channels+0xcc>
 400176c:	e0bffc17 	ldw	r2,-16(fp)
 4001770:	10800818 	cmpnei	r2,r2,32
 4001774:	1000131e 	bne	r2,zero,40017c4 <seperate_color_channels+0x118>
  {
    *blue = *color++;
 4001778:	e0bffd17 	ldw	r2,-12(fp)
 400177c:	10c00044 	addi	r3,r2,1
 4001780:	e0fffd15 	stw	r3,-12(fp)
 4001784:	10c00003 	ldbu	r3,0(r2)
 4001788:	e0800117 	ldw	r2,4(fp)
 400178c:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 4001790:	e0bffd17 	ldw	r2,-12(fp)
 4001794:	10c00044 	addi	r3,r2,1
 4001798:	e0fffd15 	stw	r3,-12(fp)
 400179c:	10c00003 	ldbu	r3,0(r2)
 40017a0:	e0bfff17 	ldw	r2,-4(fp)
 40017a4:	10c00005 	stb	r3,0(r2)
    *red = *color;
 40017a8:	e0bffd17 	ldw	r2,-12(fp)
 40017ac:	10c00003 	ldbu	r3,0(r2)
 40017b0:	e0bffe17 	ldw	r2,-8(fp)
 40017b4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40017b8:	00800044 	movi	r2,1
 40017bc:	e0bffa15 	stw	r2,-24(fp)
 40017c0:	00000706 	br	40017e0 <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 40017c4:	e0bffe17 	ldw	r2,-8(fp)
 40017c8:	10000005 	stb	zero,0(r2)
    *green = 0;
 40017cc:	e0bfff17 	ldw	r2,-4(fp)
 40017d0:	10000005 	stb	zero,0(r2)
    *blue = 0;
 40017d4:	e0800117 	ldw	r2,4(fp)
 40017d8:	10000005 	stb	zero,0(r2)
    return_value = 0;
 40017dc:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 40017e0:	e0bffa17 	ldw	r2,-24(fp)
}
 40017e4:	e037883a 	mov	sp,fp
 40017e8:	df000017 	ldw	fp,0(sp)
 40017ec:	dec00104 	addi	sp,sp,4
 40017f0:	f800283a 	ret

040017f4 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 40017f4:	defff904 	addi	sp,sp,-28
 40017f8:	df000615 	stw	fp,24(sp)
 40017fc:	df000604 	addi	fp,sp,24
 4001800:	e13ffc15 	stw	r4,-16(fp)
 4001804:	2809883a 	mov	r4,r5
 4001808:	3007883a 	mov	r3,r6
 400180c:	3805883a 	mov	r2,r7
 4001810:	e13ffd05 	stb	r4,-12(fp)
 4001814:	e0fffe05 	stb	r3,-8(fp)
 4001818:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;

  if (color_depth == 16)  // R(5):G(6):B(5)
 400181c:	e0bffc17 	ldw	r2,-16(fp)
 4001820:	10800418 	cmpnei	r2,r2,16
 4001824:	1000191e 	bne	r2,zero,400188c <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4001828:	e0bfff03 	ldbu	r2,-4(fp)
 400182c:	108007cc 	andi	r2,r2,31
 4001830:	1007883a 	mov	r3,r2
 4001834:	e0bffe03 	ldbu	r2,-8(fp)
 4001838:	10800fcc 	andi	r2,r2,63
 400183c:	1004917a 	slli	r2,r2,5
 4001840:	1884b03a 	or	r2,r3,r2
 4001844:	1007883a 	mov	r3,r2
 4001848:	e0bffd03 	ldbu	r2,-12(fp)
 400184c:	100492fa 	slli	r2,r2,11
 4001850:	1884b03a 	or	r2,r3,r2
 4001854:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 4001858:	e0800117 	ldw	r2,4(fp)
 400185c:	10c00044 	addi	r3,r2,1
 4001860:	e0c00115 	stw	r3,4(fp)
 4001864:	e0fffb0b 	ldhu	r3,-20(fp)
 4001868:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 400186c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001870:	1004d23a 	srli	r2,r2,8
 4001874:	1007883a 	mov	r3,r2
 4001878:	e0800117 	ldw	r2,4(fp)
 400187c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4001880:	00800044 	movi	r2,1
 4001884:	e0bffa15 	stw	r2,-24(fp)
 4001888:	00002106 	br	4001910 <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 400188c:	e0bffc17 	ldw	r2,-16(fp)
 4001890:	10800620 	cmpeqi	r2,r2,24
 4001894:	1000031e 	bne	r2,zero,40018a4 <merge_color_channels+0xb0>
 4001898:	e0bffc17 	ldw	r2,-16(fp)
 400189c:	10800818 	cmpnei	r2,r2,32
 40018a0:	1000101e 	bne	r2,zero,40018e4 <merge_color_channels+0xf0>
  {
    *color++ = blue;
 40018a4:	e0800117 	ldw	r2,4(fp)
 40018a8:	10c00044 	addi	r3,r2,1
 40018ac:	e0c00115 	stw	r3,4(fp)
 40018b0:	e0ffff03 	ldbu	r3,-4(fp)
 40018b4:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 40018b8:	e0800117 	ldw	r2,4(fp)
 40018bc:	10c00044 	addi	r3,r2,1
 40018c0:	e0c00115 	stw	r3,4(fp)
 40018c4:	e0fffe03 	ldbu	r3,-8(fp)
 40018c8:	10c00005 	stb	r3,0(r2)
    *color = red;
 40018cc:	e0800117 	ldw	r2,4(fp)
 40018d0:	e0fffd03 	ldbu	r3,-12(fp)
 40018d4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40018d8:	00800044 	movi	r2,1
 40018dc:	e0bffa15 	stw	r2,-24(fp)
 40018e0:	00000b06 	br	4001910 <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 40018e4:	e0800117 	ldw	r2,4(fp)
 40018e8:	10c00044 	addi	r3,r2,1
 40018ec:	e0c00115 	stw	r3,4(fp)
 40018f0:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 40018f4:	e0800117 	ldw	r2,4(fp)
 40018f8:	10c00044 	addi	r3,r2,1
 40018fc:	e0c00115 	stw	r3,4(fp)
 4001900:	10000005 	stb	zero,0(r2)
    *color = 0;
 4001904:	e0800117 	ldw	r2,4(fp)
 4001908:	10000005 	stb	zero,0(r2)
    return_value = 0;
 400190c:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 4001910:	e0bffa17 	ldw	r2,-24(fp)
}
 4001914:	e037883a 	mov	sp,fp
 4001918:	df000017 	ldw	fp,0(sp)
 400191c:	dec00104 	addi	sp,sp,4
 4001920:	f800283a 	ret

04001924 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4001924:	defff404 	addi	sp,sp,-48
 4001928:	dfc00b15 	stw	ra,44(sp)
 400192c:	df000a15 	stw	fp,40(sp)
 4001930:	df000a04 	addi	fp,sp,40
 4001934:	e13ffc15 	stw	r4,-16(fp)
 4001938:	e17ffd15 	stw	r5,-12(fp)
 400193c:	e1bffe15 	stw	r6,-8(fp)
 4001940:	3805883a 	mov	r2,r7
 4001944:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped

  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4001948:	e0bffe17 	ldw	r2,-8(fp)
 400194c:	10bfffe0 	cmpeqi	r2,r2,-1
 4001950:	10000c1e 	bne	r2,zero,4001984 <alpha_blending+0x60>
  {
    //read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4001954:	e0800517 	ldw	r2,20(fp)
 4001958:	10c00017 	ldw	r3,0(r2)
 400195c:	e1bffb44 	addi	r6,fp,-19
 4001960:	e17ffb04 	addi	r5,fp,-20
 4001964:	e13ffe04 	addi	r4,fp,-8
 4001968:	e0bffb84 	addi	r2,fp,-18
 400196c:	d8800015 	stw	r2,0(sp)
 4001970:	300f883a 	mov	r7,r6
 4001974:	280d883a 	mov	r6,r5
 4001978:	200b883a 	mov	r5,r4
 400197c:	1809883a 	mov	r4,r3
 4001980:	40016ac0 	call	40016ac <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4001984:	e0800217 	ldw	r2,8(fp)
 4001988:	10800003 	ldbu	r2,0(r2)
 400198c:	10c03fcc 	andi	r3,r2,255
 4001990:	e0bfff03 	ldbu	r2,-4(fp)
 4001994:	1887383a 	mul	r3,r3,r2
 4001998:	e0bffb03 	ldbu	r2,-20(fp)
 400199c:	11003fcc 	andi	r4,r2,255
 40019a0:	e0bfff03 	ldbu	r2,-4(fp)
 40019a4:	01403fc4 	movi	r5,255
 40019a8:	2885c83a 	sub	r2,r5,r2
 40019ac:	2085383a 	mul	r2,r4,r2
 40019b0:	1885883a 	add	r2,r3,r2
 40019b4:	01403fc4 	movi	r5,255
 40019b8:	1009883a 	mov	r4,r2
 40019bc:	4002a700 	call	4002a70 <__divsi3>
 40019c0:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 40019c4:	e0800317 	ldw	r2,12(fp)
 40019c8:	10800003 	ldbu	r2,0(r2)
 40019cc:	10c03fcc 	andi	r3,r2,255
 40019d0:	e0bfff03 	ldbu	r2,-4(fp)
 40019d4:	1887383a 	mul	r3,r3,r2
 40019d8:	e0bffb43 	ldbu	r2,-19(fp)
 40019dc:	11003fcc 	andi	r4,r2,255
 40019e0:	e0bfff03 	ldbu	r2,-4(fp)
 40019e4:	01403fc4 	movi	r5,255
 40019e8:	2885c83a 	sub	r2,r5,r2
 40019ec:	2085383a 	mul	r2,r4,r2
 40019f0:	1885883a 	add	r2,r3,r2
 40019f4:	01403fc4 	movi	r5,255
 40019f8:	1009883a 	mov	r4,r2
 40019fc:	4002a700 	call	4002a70 <__divsi3>
 4001a00:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4001a04:	e0800417 	ldw	r2,16(fp)
 4001a08:	10800003 	ldbu	r2,0(r2)
 4001a0c:	10c03fcc 	andi	r3,r2,255
 4001a10:	e0bfff03 	ldbu	r2,-4(fp)
 4001a14:	1887383a 	mul	r3,r3,r2
 4001a18:	e0bffb83 	ldbu	r2,-18(fp)
 4001a1c:	11003fcc 	andi	r4,r2,255
 4001a20:	e0bfff03 	ldbu	r2,-4(fp)
 4001a24:	01403fc4 	movi	r5,255
 4001a28:	2885c83a 	sub	r2,r5,r2
 4001a2c:	2085383a 	mul	r2,r4,r2
 4001a30:	1885883a 	add	r2,r3,r2
 4001a34:	01403fc4 	movi	r5,255
 4001a38:	1009883a 	mov	r4,r2
 4001a3c:	4002a700 	call	4002a70 <__divsi3>
 4001a40:	e0bffa15 	stw	r2,-24(fp)


  if(display->color_depth == 16)
 4001a44:	e0800517 	ldw	r2,20(fp)
 4001a48:	10800017 	ldw	r2,0(r2)
 4001a4c:	10800418 	cmpnei	r2,r2,16
 4001a50:	1000181e 	bne	r2,zero,4001ab4 <alpha_blending+0x190>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4001a54:	e0bff817 	ldw	r2,-32(fp)
 4001a58:	10c00830 	cmpltui	r3,r2,32
 4001a5c:	1800011e 	bne	r3,zero,4001a64 <alpha_blending+0x140>
 4001a60:	008007c4 	movi	r2,31
 4001a64:	1007883a 	mov	r3,r2
 4001a68:	e0800217 	ldw	r2,8(fp)
 4001a6c:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4001a70:	e0bff917 	ldw	r2,-28(fp)
 4001a74:	10c01030 	cmpltui	r3,r2,64
 4001a78:	1800011e 	bne	r3,zero,4001a80 <alpha_blending+0x15c>
 4001a7c:	00800fc4 	movi	r2,63
 4001a80:	1007883a 	mov	r3,r2
 4001a84:	e0800317 	ldw	r2,12(fp)
 4001a88:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue;
 4001a8c:	e0bffa17 	ldw	r2,-24(fp)
 4001a90:	10c00830 	cmpltui	r3,r2,32
 4001a94:	1800011e 	bne	r3,zero,4001a9c <alpha_blending+0x178>
 4001a98:	008007c4 	movi	r2,31
 4001a9c:	1007883a 	mov	r3,r2
 4001aa0:	e0800417 	ldw	r2,16(fp)
 4001aa4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4001aa8:	00800044 	movi	r2,1
 4001aac:	e0bff715 	stw	r2,-36(fp)
 4001ab0:	00002106 	br	4001b38 <alpha_blending+0x214>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4001ab4:	e0800517 	ldw	r2,20(fp)
 4001ab8:	10800017 	ldw	r2,0(r2)
 4001abc:	10800620 	cmpeqi	r2,r2,24
 4001ac0:	1000041e 	bne	r2,zero,4001ad4 <alpha_blending+0x1b0>
 4001ac4:	e0800517 	ldw	r2,20(fp)
 4001ac8:	10800017 	ldw	r2,0(r2)
 4001acc:	10800818 	cmpnei	r2,r2,32
 4001ad0:	1000181e 	bne	r2,zero,4001b34 <alpha_blending+0x210>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4001ad4:	e0bff817 	ldw	r2,-32(fp)
 4001ad8:	10c04030 	cmpltui	r3,r2,256
 4001adc:	1800011e 	bne	r3,zero,4001ae4 <alpha_blending+0x1c0>
 4001ae0:	00803fc4 	movi	r2,255
 4001ae4:	1007883a 	mov	r3,r2
 4001ae8:	e0800217 	ldw	r2,8(fp)
 4001aec:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4001af0:	e0bff917 	ldw	r2,-28(fp)
 4001af4:	10c04030 	cmpltui	r3,r2,256
 4001af8:	1800011e 	bne	r3,zero,4001b00 <alpha_blending+0x1dc>
 4001afc:	00803fc4 	movi	r2,255
 4001b00:	1007883a 	mov	r3,r2
 4001b04:	e0800317 	ldw	r2,12(fp)
 4001b08:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue;
 4001b0c:	e0bffa17 	ldw	r2,-24(fp)
 4001b10:	10c04030 	cmpltui	r3,r2,256
 4001b14:	1800011e 	bne	r3,zero,4001b1c <alpha_blending+0x1f8>
 4001b18:	00803fc4 	movi	r2,255
 4001b1c:	1007883a 	mov	r3,r2
 4001b20:	e0800417 	ldw	r2,16(fp)
 4001b24:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4001b28:	00800044 	movi	r2,1
 4001b2c:	e0bff715 	stw	r2,-36(fp)
 4001b30:	00000106 	br	4001b38 <alpha_blending+0x214>
  }
  else
  {
    return_value = 0;
 4001b34:	e03ff715 	stw	zero,-36(fp)
  }

  return return_value;
 4001b38:	e0bff717 	ldw	r2,-36(fp)
}
 4001b3c:	e037883a 	mov	sp,fp
 4001b40:	dfc00117 	ldw	ra,4(sp)
 4001b44:	df000017 	ldw	fp,0(sp)
 4001b48:	dec00204 	addi	sp,sp,8
 4001b4c:	f800283a 	ret

04001b50 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4001b50:	defff004 	addi	sp,sp,-64
 4001b54:	dfc00f15 	stw	ra,60(sp)
 4001b58:	df000e15 	stw	fp,56(sp)
 4001b5c:	df000e04 	addi	fp,sp,56
 4001b60:	e13ffc15 	stw	r4,-16(fp)
 4001b64:	e17ffd15 	stw	r5,-12(fp)
 4001b68:	e1bffe15 	stw	r6,-8(fp)
 4001b6c:	3805883a 	mov	r2,r7
 4001b70:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4001b74:	e0ffff07 	ldb	r3,-4(fp)
 4001b78:	00820034 	movhi	r2,2048
 4001b7c:	10bff7c4 	addi	r2,r2,-33
 4001b80:	1885883a 	add	r2,r3,r2
 4001b84:	1004917a 	slli	r2,r2,5
 4001b88:	e0c00317 	ldw	r3,12(fp)
 4001b8c:	1885883a 	add	r2,r3,r2
 4001b90:	10800617 	ldw	r2,24(r2)
 4001b94:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 4001b98:	e0800417 	ldw	r2,16(fp)
 4001b9c:	10c00017 	ldw	r3,0(r2)
 4001ba0:	e1bff984 	addi	r6,fp,-26
 4001ba4:	e17ff904 	addi	r5,fp,-28
 4001ba8:	e13ffe04 	addi	r4,fp,-8
 4001bac:	e0bff944 	addi	r2,fp,-27
 4001bb0:	d8800015 	stw	r2,0(sp)
 4001bb4:	300f883a 	mov	r7,r6
 4001bb8:	280d883a 	mov	r6,r5
 4001bbc:	200b883a 	mov	r5,r4
 4001bc0:	1809883a 	mov	r4,r3
 4001bc4:	40016ac0 	call	40016ac <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4001bc8:	e03ff615 	stw	zero,-40(fp)
 4001bcc:	00005806 	br	4001d30 <vid_print_char_alpha+0x1e0>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4001bd0:	e03ff715 	stw	zero,-36(fp)
 4001bd4:	00004906 	br	4001cfc <vid_print_char_alpha+0x1ac>


      if (alpha == 0x00){
 4001bd8:	e0bff817 	ldw	r2,-32(fp)
 4001bdc:	1000031e 	bne	r2,zero,4001bec <vid_print_char_alpha+0x9c>
    	  new_color = background_color;
 4001be0:	e0800217 	ldw	r2,8(fp)
 4001be4:	e0bffb15 	stw	r2,-20(fp)
 4001be8:	00003206 	br	4001cb4 <vid_print_char_alpha+0x164>
      }
      else if (alpha == 0xFF){
 4001bec:	e0bff817 	ldw	r2,-32(fp)
 4001bf0:	10803fd8 	cmpnei	r2,r2,255
 4001bf4:	1000031e 	bne	r2,zero,4001c04 <vid_print_char_alpha+0xb4>
         new_color = color;
 4001bf8:	e0bffe17 	ldw	r2,-8(fp)
 4001bfc:	e0bffb15 	stw	r2,-20(fp)
 4001c00:	00002c06 	br	4001cb4 <vid_print_char_alpha+0x164>
      }
      else{
          red = original_red;
 4001c04:	e0bff903 	ldbu	r2,-28(fp)
 4001c08:	e0bff9c5 	stb	r2,-25(fp)
          green = original_green;
 4001c0c:	e0bff983 	ldbu	r2,-26(fp)
 4001c10:	e0bffa05 	stb	r2,-24(fp)
          blue = original_blue;
 4001c14:	e0bff943 	ldbu	r2,-27(fp)
 4001c18:	e0bffa45 	stb	r2,-23(fp)
          // send in the font alpha channel and the colour channels for the blending to occur
          alpha_blending ((vert_offset + i), (SCREEN_HEIGHT-horiz_offset - j), background_color, *alpha, &red, &green, &blue, display);
 4001c1c:	e0fffd17 	ldw	r3,-12(fp)
 4001c20:	e0bff617 	ldw	r2,-40(fp)
 4001c24:	1889883a 	add	r4,r3,r2
 4001c28:	00c05004 	movi	r3,320
 4001c2c:	e0bffc17 	ldw	r2,-16(fp)
 4001c30:	1887c83a 	sub	r3,r3,r2
 4001c34:	e0bff717 	ldw	r2,-36(fp)
 4001c38:	1887c83a 	sub	r3,r3,r2
 4001c3c:	e0bff817 	ldw	r2,-32(fp)
 4001c40:	10800003 	ldbu	r2,0(r2)
 4001c44:	11403fcc 	andi	r5,r2,255
 4001c48:	e0800417 	ldw	r2,16(fp)
 4001c4c:	d8800315 	stw	r2,12(sp)
 4001c50:	e0bffa44 	addi	r2,fp,-23
 4001c54:	d8800215 	stw	r2,8(sp)
 4001c58:	e0bffa04 	addi	r2,fp,-24
 4001c5c:	d8800115 	stw	r2,4(sp)
 4001c60:	e0bff9c4 	addi	r2,fp,-25
 4001c64:	d8800015 	stw	r2,0(sp)
 4001c68:	280f883a 	mov	r7,r5
 4001c6c:	e1800217 	ldw	r6,8(fp)
 4001c70:	180b883a 	mov	r5,r3
 4001c74:	40019240 	call	4001924 <alpha_blending>

          // take the blended pixel and merge the color channels back into a single pixel value
          merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 4001c78:	e0800417 	ldw	r2,16(fp)
 4001c7c:	10c00017 	ldw	r3,0(r2)
 4001c80:	e0bff9c3 	ldbu	r2,-25(fp)
 4001c84:	11003fcc 	andi	r4,r2,255
 4001c88:	e0bffa03 	ldbu	r2,-24(fp)
 4001c8c:	11403fcc 	andi	r5,r2,255
 4001c90:	e0bffa43 	ldbu	r2,-23(fp)
 4001c94:	11803fcc 	andi	r6,r2,255
 4001c98:	e0bffb04 	addi	r2,fp,-20
 4001c9c:	d8800015 	stw	r2,0(sp)
 4001ca0:	300f883a 	mov	r7,r6
 4001ca4:	280d883a 	mov	r6,r5
 4001ca8:	200b883a 	mov	r5,r4
 4001cac:	1809883a 	mov	r4,r3
 4001cb0:	40017f40 	call	40017f4 <merge_color_channels>
      }
      // write the new pixel value out to memory overwriting the current background
      vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j), new_color);
 4001cb4:	e0fffd17 	ldw	r3,-12(fp)
 4001cb8:	e0bff617 	ldw	r2,-40(fp)
 4001cbc:	1889883a 	add	r4,r3,r2
 4001cc0:	00c05004 	movi	r3,320
 4001cc4:	e0bffc17 	ldw	r2,-16(fp)
 4001cc8:	1887c83a 	sub	r3,r3,r2
 4001ccc:	e0bff717 	ldw	r2,-36(fp)
 4001cd0:	1885c83a 	sub	r2,r3,r2
 4001cd4:	e0fffb17 	ldw	r3,-20(fp)
 4001cd8:	180d883a 	mov	r6,r3
 4001cdc:	100b883a 	mov	r5,r2
 4001ce0:	40107540 	call	4010754 <vid_set_pixel>
      //vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color);

      alpha++;
 4001ce4:	e0bff817 	ldw	r2,-32(fp)
 4001ce8:	10800044 	addi	r2,r2,1
 4001cec:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4001cf0:	e0bff717 	ldw	r2,-36(fp)
 4001cf4:	10800044 	addi	r2,r2,1
 4001cf8:	e0bff715 	stw	r2,-36(fp)
 4001cfc:	e0ffff07 	ldb	r3,-4(fp)
 4001d00:	00820034 	movhi	r2,2048
 4001d04:	10bff7c4 	addi	r2,r2,-33
 4001d08:	1885883a 	add	r2,r3,r2
 4001d0c:	1004917a 	slli	r2,r2,5
 4001d10:	e0c00317 	ldw	r3,12(fp)
 4001d14:	1885883a 	add	r2,r3,r2
 4001d18:	10800417 	ldw	r2,16(r2)
 4001d1c:	e0fff717 	ldw	r3,-36(fp)
 4001d20:	18bfad36 	bltu	r3,r2,4001bd8 <__alt_data_end+0xfc001bd8>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4001d24:	e0bff617 	ldw	r2,-40(fp)
 4001d28:	10800044 	addi	r2,r2,1
 4001d2c:	e0bff615 	stw	r2,-40(fp)
 4001d30:	e0ffff07 	ldb	r3,-4(fp)
 4001d34:	00820034 	movhi	r2,2048
 4001d38:	10bff7c4 	addi	r2,r2,-33
 4001d3c:	1885883a 	add	r2,r3,r2
 4001d40:	1004917a 	slli	r2,r2,5
 4001d44:	e0c00317 	ldw	r3,12(fp)
 4001d48:	1885883a 	add	r2,r3,r2
 4001d4c:	10800517 	ldw	r2,20(r2)
 4001d50:	e0fff617 	ldw	r3,-40(fp)
 4001d54:	18bf9e36 	bltu	r3,r2,4001bd0 <__alt_data_end+0xfc001bd0>

      alpha++;
    }
  }

  return(0);
 4001d58:	0005883a 	mov	r2,zero
}
 4001d5c:	e037883a 	mov	sp,fp
 4001d60:	dfc00117 	ldw	ra,4(sp)
 4001d64:	df000017 	ldw	fp,0(sp)
 4001d68:	dec00204 	addi	sp,sp,8
 4001d6c:	f800283a 	ret

04001d70 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, const alt_u8 *font, const alt_u16 (*font_descriptor)[2], char string[])
{
 4001d70:	defff604 	addi	sp,sp,-40
 4001d74:	dfc00915 	stw	ra,36(sp)
 4001d78:	df000815 	stw	fp,32(sp)
 4001d7c:	df000804 	addi	fp,sp,32
 4001d80:	e13ffc15 	stw	r4,-16(fp)
 4001d84:	e17ffd15 	stw	r5,-12(fp)
 4001d88:	e1bffe15 	stw	r6,-8(fp)
 4001d8c:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4001d90:	e03ffa15 	stw	zero,-24(fp)
  //int original_horiz_offset;

  //original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001d94:	00003906 	br	4001e7c <vid_print_string+0x10c>
    //Handle newline char here.
    if (string[i] == ' ') {
 4001d98:	e0bffa17 	ldw	r2,-24(fp)
 4001d9c:	e0c00317 	ldw	r3,12(fp)
 4001da0:	1885883a 	add	r2,r3,r2
 4001da4:	10800003 	ldbu	r2,0(r2)
 4001da8:	10803fcc 	andi	r2,r2,255
 4001dac:	1080201c 	xori	r2,r2,128
 4001db0:	10bfe004 	addi	r2,r2,-128
 4001db4:	10800818 	cmpnei	r2,r2,32
 4001db8:	1000071e 	bne	r2,zero,4001dd8 <vid_print_string+0x68>
      horiz_offset += 10 ;
 4001dbc:	e0bffc17 	ldw	r2,-16(fp)
 4001dc0:	10800284 	addi	r2,r2,10
 4001dc4:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4001dc8:	e0bffa17 	ldw	r2,-24(fp)
 4001dcc:	10800044 	addi	r2,r2,1
 4001dd0:	e0bffa15 	stw	r2,-24(fp)
      continue;
 4001dd4:	00002906 	br	4001e7c <vid_print_string+0x10c>
    }
    // Lay down that character and increment our offsets.
    temp_char = (string[i] - 0x21);
 4001dd8:	e0bffa17 	ldw	r2,-24(fp)
 4001ddc:	e0c00317 	ldw	r3,12(fp)
 4001de0:	1885883a 	add	r2,r3,r2
 4001de4:	10800003 	ldbu	r2,0(r2)
 4001de8:	10803fcc 	andi	r2,r2,255
 4001dec:	1080201c 	xori	r2,r2,128
 4001df0:	10bfe004 	addi	r2,r2,-128
 4001df4:	10bff7c4 	addi	r2,r2,-33
 4001df8:	e0bffb0d 	sth	r2,-20(fp)
    bit_num_char = *(*(font_descriptor + temp_char));
 4001dfc:	e0bffb0b 	ldhu	r2,-20(fp)
 4001e00:	1085883a 	add	r2,r2,r2
 4001e04:	1085883a 	add	r2,r2,r2
 4001e08:	1007883a 	mov	r3,r2
 4001e0c:	e0800217 	ldw	r2,8(fp)
 4001e10:	10c5883a 	add	r2,r2,r3
 4001e14:	1080000b 	ldhu	r2,0(r2)
 4001e18:	e0bffb8d 	sth	r2,-18(fp)
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, font_descriptor);
 4001e1c:	e0bffa17 	ldw	r2,-24(fp)
 4001e20:	e0c00317 	ldw	r3,12(fp)
 4001e24:	1885883a 	add	r2,r3,r2
 4001e28:	10800003 	ldbu	r2,0(r2)
 4001e2c:	10c03fcc 	andi	r3,r2,255
 4001e30:	18c0201c 	xori	r3,r3,128
 4001e34:	18ffe004 	addi	r3,r3,-128
 4001e38:	e0800217 	ldw	r2,8(fp)
 4001e3c:	d8800115 	stw	r2,4(sp)
 4001e40:	e0bfff17 	ldw	r2,-4(fp)
 4001e44:	d8800015 	stw	r2,0(sp)
 4001e48:	180f883a 	mov	r7,r3
 4001e4c:	e1bffe17 	ldw	r6,-8(fp)
 4001e50:	e17ffd17 	ldw	r5,-12(fp)
 4001e54:	e13ffc17 	ldw	r4,-16(fp)
 4001e58:	4001eb40 	call	4001eb4 <vid_print_char>
    horiz_offset += 4 + (int)bit_num_char;
 4001e5c:	e0bffb8b 	ldhu	r2,-18(fp)
 4001e60:	10800104 	addi	r2,r2,4
 4001e64:	e0fffc17 	ldw	r3,-16(fp)
 4001e68:	1885883a 	add	r2,r3,r2
 4001e6c:	e0bffc15 	stw	r2,-16(fp)
    i++;
 4001e70:	e0bffa17 	ldw	r2,-24(fp)
 4001e74:	10800044 	addi	r2,r2,1
 4001e78:	e0bffa15 	stw	r2,-24(fp)
  //int original_horiz_offset;

  //original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001e7c:	e0bffa17 	ldw	r2,-24(fp)
 4001e80:	e0c00317 	ldw	r3,12(fp)
 4001e84:	1885883a 	add	r2,r3,r2
 4001e88:	10800003 	ldbu	r2,0(r2)
 4001e8c:	10803fcc 	andi	r2,r2,255
 4001e90:	1080201c 	xori	r2,r2,128
 4001e94:	10bfe004 	addi	r2,r2,-128
 4001e98:	103fbf1e 	bne	r2,zero,4001d98 <__alt_data_end+0xfc001d98>
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, font_descriptor);
    horiz_offset += 4 + (int)bit_num_char;
    i++;

  }
  return (0);
 4001e9c:	0005883a 	mov	r2,zero
}
 4001ea0:	e037883a 	mov	sp,fp
 4001ea4:	dfc00117 	ldw	ra,4(sp)
 4001ea8:	df000017 	ldw	fp,0(sp)
 4001eac:	dec00204 	addi	sp,sp,8
 4001eb0:	f800283a 	ret

04001eb4 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, const alt_u8 *font, const alt_u16 (*font_descriptor)[2])
{
 4001eb4:	defff204 	addi	sp,sp,-56
 4001eb8:	dfc00d15 	stw	ra,52(sp)
 4001ebc:	df000c15 	stw	fp,48(sp)
 4001ec0:	df000c04 	addi	fp,sp,48
 4001ec4:	e13ffc15 	stw	r4,-16(fp)
 4001ec8:	e17ffd15 	stw	r5,-12(fp)
 4001ecc:	e1bffe15 	stw	r6,-8(fp)
 4001ed0:	3805883a 	mov	r2,r7
 4001ed4:	e0bfff05 	stb	r2,-4(fp)
  alt_u16 row_offset;
  alt_u16 bit_num_char;
  alt_u16 bit_num_char_temp;
  alt_u8 byte_offset;
  // Convert the ASCII value to an array offset
  temp_char = (character - 0x21);
 4001ed8:	e0bfff07 	ldb	r2,-4(fp)
 4001edc:	10bff7c4 	addi	r2,r2,-33
 4001ee0:	e0bff915 	stw	r2,-28(fp)
  row_offset = *(*(font_descriptor + temp_char)+ 1);
 4001ee4:	e0bff917 	ldw	r2,-28(fp)
 4001ee8:	1085883a 	add	r2,r2,r2
 4001eec:	1085883a 	add	r2,r2,r2
 4001ef0:	10800084 	addi	r2,r2,2
 4001ef4:	e0c00317 	ldw	r3,12(fp)
 4001ef8:	1885883a 	add	r2,r3,r2
 4001efc:	1080000b 	ldhu	r2,0(r2)
 4001f00:	e0bffa0d 	sth	r2,-24(fp)
  bit_num_char = *(*(font_descriptor + temp_char));
 4001f04:	e0bff917 	ldw	r2,-28(fp)
 4001f08:	1085883a 	add	r2,r2,r2
 4001f0c:	1085883a 	add	r2,r2,r2
 4001f10:	1007883a 	mov	r3,r2
 4001f14:	e0800317 	ldw	r2,12(fp)
 4001f18:	10c5883a 	add	r2,r2,r3
 4001f1c:	1080000b 	ldhu	r2,0(r2)
 4001f20:	e0bffa8d 	sth	r2,-22(fp)
  if(bit_num_char <=8){
 4001f24:	e0bffa8b 	ldhu	r2,-22(fp)
 4001f28:	10800268 	cmpgeui	r2,r2,9
 4001f2c:	1000031e 	bne	r2,zero,4001f3c <vid_print_char+0x88>
	  byte_offset = 1;
 4001f30:	00800044 	movi	r2,1
 4001f34:	e0bff885 	stb	r2,-30(fp)
 4001f38:	00000e06 	br	4001f74 <vid_print_char+0xc0>
  }else if(bit_num_char <= 16){
 4001f3c:	e0bffa8b 	ldhu	r2,-22(fp)
 4001f40:	10800468 	cmpgeui	r2,r2,17
 4001f44:	1000031e 	bne	r2,zero,4001f54 <vid_print_char+0xa0>
	  byte_offset = 2;
 4001f48:	00800084 	movi	r2,2
 4001f4c:	e0bff885 	stb	r2,-30(fp)
 4001f50:	00000806 	br	4001f74 <vid_print_char+0xc0>
  }else if(bit_num_char <=24){
 4001f54:	e0bffa8b 	ldhu	r2,-22(fp)
 4001f58:	10800668 	cmpgeui	r2,r2,25
 4001f5c:	1000031e 	bne	r2,zero,4001f6c <vid_print_char+0xb8>
	  byte_offset = 3;
 4001f60:	008000c4 	movi	r2,3
 4001f64:	e0bff885 	stb	r2,-30(fp)
 4001f68:	00000206 	br	4001f74 <vid_print_char+0xc0>
  }else{
	  byte_offset = 4;
 4001f6c:	00800104 	movi	r2,4
 4001f70:	e0bff885 	stb	r2,-30(fp)
  }

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
 4001f74:	e03ff415 	stw	zero,-48(fp)
 4001f78:	00004106 	br	4002080 <vid_print_char+0x1cc>
      char_row = font + (row_offset) + i*byte_offset;//i*4 arial
 4001f7c:	e0bffa0b 	ldhu	r2,-24(fp)
 4001f80:	e13ff883 	ldbu	r4,-30(fp)
 4001f84:	e0fff417 	ldw	r3,-48(fp)
 4001f88:	20c7383a 	mul	r3,r4,r3
 4001f8c:	10c5883a 	add	r2,r2,r3
 4001f90:	e0c00217 	ldw	r3,8(fp)
 4001f94:	1885883a 	add	r2,r3,r2
 4001f98:	e0bffb15 	stw	r2,-20(fp)
      bit_num_char_temp = bit_num_char;
 4001f9c:	e0bffa8b 	ldhu	r2,-22(fp)
 4001fa0:	e0bff80d 	sth	r2,-32(fp)
    for(k = 0; k < byte_offset; k++){//4 arila
 4001fa4:	e03ff615 	stw	zero,-40(fp)
 4001fa8:	00002f06 	br	4002068 <vid_print_char+0x1b4>
    	if(bit_num_char_temp > 8){
 4001fac:	e0bff80b 	ldhu	r2,-32(fp)
 4001fb0:	10800270 	cmpltui	r2,r2,9
 4001fb4:	1000061e 	bne	r2,zero,4001fd0 <vid_print_char+0x11c>
    		j_end = 8;
 4001fb8:	00800204 	movi	r2,8
 4001fbc:	e0bff715 	stw	r2,-36(fp)
    		bit_num_char_temp= bit_num_char_temp - 8;
 4001fc0:	e0bff80b 	ldhu	r2,-32(fp)
 4001fc4:	10bffe04 	addi	r2,r2,-8
 4001fc8:	e0bff80d 	sth	r2,-32(fp)
 4001fcc:	00000206 	br	4001fd8 <vid_print_char+0x124>
    	}else{
    		j_end = bit_num_char_temp;
 4001fd0:	e0bff80b 	ldhu	r2,-32(fp)
 4001fd4:	e0bff715 	stw	r2,-36(fp)
    	}
    	for (j = 0; j < j_end; j++) {
 4001fd8:	e03ff515 	stw	zero,-44(fp)
 4001fdc:	00001c06 	br	4002050 <vid_print_char+0x19c>
    		//If the font table says the pixel in this location is on for this character, then set it.
    		if (*(char_row+k) & (((alt_u8)0x80) >> j)) {
 4001fe0:	e0bff617 	ldw	r2,-40(fp)
 4001fe4:	e0fffb17 	ldw	r3,-20(fp)
 4001fe8:	1885883a 	add	r2,r3,r2
 4001fec:	10800003 	ldbu	r2,0(r2)
 4001ff0:	10c03fcc 	andi	r3,r2,255
 4001ff4:	01002004 	movi	r4,128
 4001ff8:	e0bff517 	ldw	r2,-44(fp)
 4001ffc:	2085d83a 	sra	r2,r4,r2
 4002000:	1884703a 	and	r2,r3,r2
 4002004:	10000f26 	beq	r2,zero,4002044 <vid_print_char+0x190>
    			//vid_set_pixel((horiz_offset + j + k*8), (vert_offset + i), color); // plot the pixel
    			vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j -k*8), color);
 4002008:	e0fffd17 	ldw	r3,-12(fp)
 400200c:	e0bff417 	ldw	r2,-48(fp)
 4002010:	1889883a 	add	r4,r3,r2
 4002014:	00c05004 	movi	r3,320
 4002018:	e0bffc17 	ldw	r2,-16(fp)
 400201c:	1887c83a 	sub	r3,r3,r2
 4002020:	e0bff517 	ldw	r2,-44(fp)
 4002024:	1887c83a 	sub	r3,r3,r2
 4002028:	e0bff617 	ldw	r2,-40(fp)
 400202c:	100490fa 	slli	r2,r2,3
 4002030:	1885c83a 	sub	r2,r3,r2
 4002034:	e0fffe17 	ldw	r3,-8(fp)
 4002038:	180d883a 	mov	r6,r3
 400203c:	100b883a 	mov	r5,r2
 4002040:	40107540 	call	4010754 <vid_set_pixel>
    		j_end = 8;
    		bit_num_char_temp= bit_num_char_temp - 8;
    	}else{
    		j_end = bit_num_char_temp;
    	}
    	for (j = 0; j < j_end; j++) {
 4002044:	e0bff517 	ldw	r2,-44(fp)
 4002048:	10800044 	addi	r2,r2,1
 400204c:	e0bff515 	stw	r2,-44(fp)
 4002050:	e0fff517 	ldw	r3,-44(fp)
 4002054:	e0bff717 	ldw	r2,-36(fp)
 4002058:	18bfe116 	blt	r3,r2,4001fe0 <__alt_data_end+0xfc001fe0>

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
      char_row = font + (row_offset) + i*byte_offset;//i*4 arial
      bit_num_char_temp = bit_num_char;
    for(k = 0; k < byte_offset; k++){//4 arila
 400205c:	e0bff617 	ldw	r2,-40(fp)
 4002060:	10800044 	addi	r2,r2,1
 4002064:	e0bff615 	stw	r2,-40(fp)
 4002068:	e0bff883 	ldbu	r2,-30(fp)
 400206c:	e0fff617 	ldw	r3,-40(fp)
 4002070:	18bfce16 	blt	r3,r2,4001fac <__alt_data_end+0xfc001fac>
  }else{
	  byte_offset = 4;
  }

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
 4002074:	e0bff417 	ldw	r2,-48(fp)
 4002078:	10800044 	addi	r2,r2,1
 400207c:	e0bff415 	stw	r2,-48(fp)
 4002080:	e0bff417 	ldw	r2,-48(fp)
 4002084:	10800710 	cmplti	r2,r2,28
 4002088:	103fbc1e 	bne	r2,zero,4001f7c <__alt_data_end+0xfc001f7c>
    			vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j -k*8), color);
    		}
    	}
    }
  }
  return(0);
 400208c:	0005883a 	mov	r2,zero
}
 4002090:	e037883a 	mov	sp,fp
 4002094:	dfc00117 	ldw	ra,4(sp)
 4002098:	df000017 	ldw	fp,0(sp)
 400209c:	dec00204 	addi	sp,sp,8
 40020a0:	f800283a 	ret

040020a4 <alarm_callback>:
	  alt_u32 next_active_time;
  }XY;

//  callback function for alarm
 alt_u32 alarm_callback (void* context)
  {
 40020a4:	defffd04 	addi	sp,sp,-12
 40020a8:	dfc00215 	stw	ra,8(sp)
 40020ac:	df000115 	stw	fp,4(sp)
 40020b0:	df000104 	addi	fp,sp,4
 40020b4:	e13fff15 	stw	r4,-4(fp)
  	//Set alarm flag
  	printf ("ALARM!!!\n");
 40020b8:	010100f4 	movhi	r4,1027
 40020bc:	210af904 	addi	r4,r4,11236
 40020c0:	4002d500 	call	4002d50 <puts>
  	draw_display_ton_update();
 40020c4:	40013a80 	call	40013a8 <draw_display_ton_update>

  	return context = 1000;
 40020c8:	0080fa04 	movi	r2,1000
 40020cc:	e0bfff15 	stw	r2,-4(fp)
 40020d0:	0080fa04 	movi	r2,1000
  }
 40020d4:	e037883a 	mov	sp,fp
 40020d8:	dfc00117 	ldw	ra,4(sp)
 40020dc:	df000017 	ldw	fp,0(sp)
 40020e0:	dec00204 	addi	sp,sp,8
 40020e4:	f800283a 	ret

040020e8 <main>:
int main()
{
 40020e8:	defff704 	addi	sp,sp,-36
 40020ec:	dfc00815 	stw	ra,32(sp)
 40020f0:	df000715 	stw	fp,28(sp)
 40020f4:	df000704 	addi	fp,sp,28
  //initialization
  XY xy;
  xy.x_coord = 0;
 40020f8:	e03ffd0d 	sth	zero,-12(fp)
  xy.y_coord = 0;
 40020fc:	e03ffd8d 	sth	zero,-10(fp)
  xy.enable_xy = 0;
 4002100:	e03ffe05 	stb	zero,-8(fp)
  xy.next_active_time= 0;
 4002104:	e03fff15 	stw	zero,-4(fp)
  alt_u8 cali_enable = 1;
 4002108:	00800044 	movi	r2,1
 400210c:	e0bff905 	stb	r2,-28(fp)
  alt_u8 vol_bar = 0;
 4002110:	e03ff945 	stb	zero,-27(fp)
  alt_u8 glissando_on_off = 0;
 4002114:	e03ff985 	stb	zero,-26(fp)
  alt_u8  glissando_delay = 1;
 4002118:	00800044 	movi	r2,1
 400211c:	e0bff9c5 	stb	r2,-25(fp)
  touch_init(&xy);
 4002120:	e0bffd04 	addi	r2,fp,-12
 4002124:	1009883a 	mov	r4,r2
 4002128:	40029e40 	call	40029e4 <touch_init>
  LCD_Init();
 400212c:	40107f40 	call	40107f4 <LCD_Init>
  LCD_Clear(WHITE);
 4002130:	013fffd4 	movui	r4,65535
 4002134:	40105880 	call	4010588 <LCD_Clear>
  codec_wm8731_init();
 4002138:	40002900 	call	4000290 <codec_wm8731_init>
  printf("Hello from Nios II!\n");
 400213c:	010100f4 	movhi	r4,1027
 4002140:	210afc04 	addi	r4,r4,11248
 4002144:	4002d500 	call	4002d50 <puts>


  alt_u16 xs, ys ,xe, ye;
  int count = 0;
 4002148:	e03ffb15 	stw	zero,-20(fp)
  int enable = 0;
 400214c:	e03ffc15 	stw	zero,-16(fp)

 state state = ST_main;
 4002150:	e03ffa15 	stw	zero,-24(fp)
 draw_main_screen();
 4002154:	4000a880 	call	4000a88 <draw_main_screen>

while(1){


if(xy.enable_xy == 1){
 4002158:	e0bffe03 	ldbu	r2,-8(fp)
 400215c:	10803fcc 	andi	r2,r2,255
 4002160:	10800058 	cmpnei	r2,r2,1
 4002164:	103ffc1e 	bne	r2,zero,4002158 <__alt_data_end+0xfc002158>
 xy.enable_xy = 0;
 4002168:	e03ffe05 	stb	zero,-8(fp)

  switch(state){
 400216c:	e0bffa17 	ldw	r2,-24(fp)
 4002170:	108001a8 	cmpgeui	r2,r2,6
 4002174:	103ff81e 	bne	r2,zero,4002158 <__alt_data_end+0xfc002158>
 4002178:	e0bffa17 	ldw	r2,-24(fp)
 400217c:	100690ba 	slli	r3,r2,2
 4002180:	00810034 	movhi	r2,1024
 4002184:	10886504 	addi	r2,r2,8596
 4002188:	1885883a 	add	r2,r3,r2
 400218c:	10800017 	ldw	r2,0(r2)
 4002190:	1000683a 	jmp	r2
 4002194:	040021ac 	andhi	r16,zero,134
 4002198:	040023e4 	muli	r16,zero,143
 400219c:	040022c0 	call	40022c <__alt_mem_dram_ctrl-0x3bffdd4>
 40021a0:	04002428 	cmpgeui	r16,zero,144
 40021a4:	0400254c 	andi	r16,zero,149
 40021a8:	0400265c 	xori	r16,zero,153
  	  case ST_main:
  			if(xy.y_coord<=1400){
 40021ac:	e0bffd8b 	ldhu	r2,-10(fp)
 40021b0:	10bfffcc 	andi	r2,r2,65535
 40021b4:	10815e68 	cmpgeui	r2,r2,1401
 40021b8:	1000241e 	bne	r2,zero,400224c <main+0x164>
  				state = ST_cali;
 40021bc:	00800044 	movi	r2,1
 40021c0:	e0bffa15 	stw	r2,-24(fp)
  			    LCD_Clear(WHITE);
 40021c4:	013fffd4 	movui	r4,65535
 40021c8:	40105880 	call	4010588 <LCD_Clear>
  				draw_calibrating_screen();
 40021cc:	4000b940 	call	4000b94 <draw_calibrating_screen>
  				cali_enable = 1;
 40021d0:	00800044 	movi	r2,1
 40021d4:	e0bff905 	stb	r2,-28(fp)
  				printf("cntrl Register nach Maskierung pitch %d\n", done_calibration_pitch());
 40021d8:	4010f040 	call	4010f04 <done_calibration_pitch>
 40021dc:	100b883a 	mov	r5,r2
 40021e0:	010100f4 	movhi	r4,1027
 40021e4:	210b0104 	addi	r4,r4,11268
 40021e8:	4002c540 	call	4002c54 <printf>
  		  		printf("cntrl Register nach Maskierung vol %d\n", done_calibration_vol());
 40021ec:	4010f880 	call	4010f88 <done_calibration_vol>
 40021f0:	100b883a 	mov	r5,r2
 40021f4:	010100f4 	movhi	r4,1027
 40021f8:	210b0c04 	addi	r4,r4,11312
 40021fc:	4002c540 	call	4002c54 <printf>
  				set_calibration_pitch();
 4002200:	4010ed40 	call	4010ed4 <set_calibration_pitch>
  				set_calibration_vol();
 4002204:	4010f580 	call	4010f58 <set_calibration_vol>
  				printf("cntrl Register nach Maskierung pitch %d\n", done_calibration_pitch());
 4002208:	4010f040 	call	4010f04 <done_calibration_pitch>
 400220c:	100b883a 	mov	r5,r2
 4002210:	010100f4 	movhi	r4,1027
 4002214:	210b0104 	addi	r4,r4,11268
 4002218:	4002c540 	call	4002c54 <printf>
  				printf("cntrl Register nach Maskierung vol %d\n", done_calibration_vol());
 400221c:	4010f880 	call	4010f88 <done_calibration_vol>
 4002220:	100b883a 	mov	r5,r2
 4002224:	010100f4 	movhi	r4,1027
 4002228:	210b0c04 	addi	r4,r4,11312
 400222c:	4002c540 	call	4002c54 <printf>
  				usleep(1000000);
 4002230:	010003f4 	movhi	r4,15
 4002234:	21109004 	addi	r4,r4,16960
 4002238:	40101100 	call	4010110 <usleep>

  	  			LCD_Clear(WHITE);
 400223c:	013fffd4 	movui	r4,65535
 4002240:	40105880 	call	4010588 <LCD_Clear>
  	  			draw_calibrating_screen_done();
 4002244:	4000c1c0 	call	4000c1c <draw_calibrating_screen_done>
  				state = ST_play_help;
  				LCD_Clear(WHITE);
  				draw_help_screen();
  				draw_glissando_on_off(glissando_on_off);
  			}
  		break;
 4002248:	00011806 	br	40026ac <main+0x5c4>
  				usleep(1000000);

  	  			LCD_Clear(WHITE);
  	  			draw_calibrating_screen_done();
  			}
  			else if (xy.y_coord<=2800){
 400224c:	e0bffd8b 	ldhu	r2,-10(fp)
 4002250:	10bfffcc 	andi	r2,r2,65535
 4002254:	1082bc68 	cmpgeui	r2,r2,2801
 4002258:	10000c1e 	bne	r2,zero,400228c <main+0x1a4>
  				state = ST_volume;
 400225c:	00800084 	movi	r2,2
 4002260:	e0bffa15 	stw	r2,-24(fp)
  				printf("wm8731 init \n");
 4002264:	010100f4 	movhi	r4,1027
 4002268:	210b1604 	addi	r4,r4,11352
 400226c:	4002d500 	call	4002d50 <puts>
  				LCD_Clear(WHITE);
 4002270:	013fffd4 	movui	r4,65535
 4002274:	40105880 	call	4010588 <LCD_Clear>
  				draw_volume_screen();
 4002278:	4000cf00 	call	4000cf0 <draw_volume_screen>
  				draw_update_volume_bar(vol_bar);
 400227c:	e0bff943 	ldbu	r2,-27(fp)
 4002280:	1009883a 	mov	r4,r2
 4002284:	4000e2c0 	call	4000e2c <draw_update_volume_bar>
  				state = ST_play_help;
  				LCD_Clear(WHITE);
  				draw_help_screen();
  				draw_glissando_on_off(glissando_on_off);
  			}
  		break;
 4002288:	00010806 	br	40026ac <main+0x5c4>
  				printf("wm8731 init \n");
  				LCD_Clear(WHITE);
  				draw_volume_screen();
  				draw_update_volume_bar(vol_bar);
  			}
  			else if (xy.y_coord>2800){
 400228c:	e0bffd8b 	ldhu	r2,-10(fp)
 4002290:	10bfffcc 	andi	r2,r2,65535
 4002294:	1082bc70 	cmpltui	r2,r2,2801
 4002298:	1001041e 	bne	r2,zero,40026ac <main+0x5c4>
  				state = ST_play_help;
 400229c:	008000c4 	movi	r2,3
 40022a0:	e0bffa15 	stw	r2,-24(fp)
  				LCD_Clear(WHITE);
 40022a4:	013fffd4 	movui	r4,65535
 40022a8:	40105880 	call	4010588 <LCD_Clear>
  				draw_help_screen();
 40022ac:	4000ed40 	call	4000ed4 <draw_help_screen>
  				draw_glissando_on_off(glissando_on_off);
 40022b0:	e0bff983 	ldbu	r2,-26(fp)
 40022b4:	1009883a 	mov	r4,r2
 40022b8:	4000fe00 	call	4000fe0 <draw_glissando_on_off>
  			}
  		break;
 40022bc:	0000fb06 	br	40026ac <main+0x5c4>

  	  case ST_volume:
  		if((xy.y_coord >= 2800) && (xy.x_coord<=1100)){
 40022c0:	e0bffd8b 	ldhu	r2,-10(fp)
 40022c4:	10bfffcc 	andi	r2,r2,65535
 40022c8:	1082bc30 	cmpltui	r2,r2,2800
 40022cc:	1000091e 	bne	r2,zero,40022f4 <main+0x20c>
 40022d0:	e0bffd0b 	ldhu	r2,-12(fp)
 40022d4:	10bfffcc 	andi	r2,r2,65535
 40022d8:	10811368 	cmpgeui	r2,r2,1101
 40022dc:	1000051e 	bne	r2,zero,40022f4 <main+0x20c>
  			state = ST_main;
 40022e0:	e03ffa15 	stw	zero,-24(fp)
  		  	LCD_Clear(WHITE);
 40022e4:	013fffd4 	movui	r4,65535
 40022e8:	40105880 	call	4010588 <LCD_Clear>
  		  	draw_main_screen();
 40022ec:	4000a880 	call	4000a88 <draw_main_screen>
 40022f0:	00003606 	br	40023cc <main+0x2e4>
  		}else if((xy.y_coord <= 2050) && (xy.x_coord<=700)){
 40022f4:	e0bffd8b 	ldhu	r2,-10(fp)
 40022f8:	10bfffcc 	andi	r2,r2,65535
 40022fc:	108200e8 	cmpgeui	r2,r2,2051
 4002300:	1000171e 	bne	r2,zero,4002360 <main+0x278>
 4002304:	e0bffd0b 	ldhu	r2,-12(fp)
 4002308:	10bfffcc 	andi	r2,r2,65535
 400230c:	1080af68 	cmpgeui	r2,r2,701
 4002310:	1000131e 	bne	r2,zero,4002360 <main+0x278>
  			if(vol_bar <= 0){
 4002314:	e0bff943 	ldbu	r2,-27(fp)
 4002318:	1000021e 	bne	r2,zero,4002324 <main+0x23c>
  			  vol_bar = 1;
 400231c:	00800044 	movi	r2,1
 4002320:	e0bff945 	stb	r2,-27(fp)
  			}
  			vol_bar --;
 4002324:	e0bff943 	ldbu	r2,-27(fp)
 4002328:	10bfffc4 	addi	r2,r2,-1
 400232c:	e0bff945 	stb	r2,-27(fp)
  			set_vol_test(vol_bar);
 4002330:	e0bff943 	ldbu	r2,-27(fp)
 4002334:	1009883a 	mov	r4,r2
 4002338:	40003a40 	call	40003a4 <set_vol_test>
  			draw_update_volume_bar(vol_bar);
 400233c:	e0bff943 	ldbu	r2,-27(fp)
 4002340:	1009883a 	mov	r4,r2
 4002344:	4000e2c0 	call	4000e2c <draw_update_volume_bar>
  			printf("cntrl Register volume %d\n", read_cntrl_vol());
 4002348:	40110140 	call	4011014 <read_cntrl_vol>
 400234c:	100b883a 	mov	r5,r2
 4002350:	010100f4 	movhi	r4,1027
 4002354:	210b1a04 	addi	r4,r4,11368
 4002358:	4002c540 	call	4002c54 <printf>
 400235c:	00001b06 	br	40023cc <main+0x2e4>
  		}else if((xy.y_coord <= 2050) && (xy.x_coord>=1300)){
 4002360:	e0bffd8b 	ldhu	r2,-10(fp)
 4002364:	10bfffcc 	andi	r2,r2,65535
 4002368:	108200e8 	cmpgeui	r2,r2,2051
 400236c:	1000171e 	bne	r2,zero,40023cc <main+0x2e4>
 4002370:	e0bffd0b 	ldhu	r2,-12(fp)
 4002374:	10bfffcc 	andi	r2,r2,65535
 4002378:	10814530 	cmpltui	r2,r2,1300
 400237c:	1000131e 	bne	r2,zero,40023cc <main+0x2e4>
  			vol_bar ++;
 4002380:	e0bff943 	ldbu	r2,-27(fp)
 4002384:	10800044 	addi	r2,r2,1
 4002388:	e0bff945 	stb	r2,-27(fp)
  			if(vol_bar >= 10){
 400238c:	e0bff943 	ldbu	r2,-27(fp)
 4002390:	108002b0 	cmpltui	r2,r2,10
 4002394:	1000021e 	bne	r2,zero,40023a0 <main+0x2b8>
  				vol_bar = 10;
 4002398:	00800284 	movi	r2,10
 400239c:	e0bff945 	stb	r2,-27(fp)
  			}
  			set_vol_test(vol_bar);
 40023a0:	e0bff943 	ldbu	r2,-27(fp)
 40023a4:	1009883a 	mov	r4,r2
 40023a8:	40003a40 	call	40003a4 <set_vol_test>
  			printf("cntrl Register volume %d\n", read_cntrl_vol());
 40023ac:	40110140 	call	4011014 <read_cntrl_vol>
 40023b0:	100b883a 	mov	r5,r2
 40023b4:	010100f4 	movhi	r4,1027
 40023b8:	210b1a04 	addi	r4,r4,11368
 40023bc:	4002c540 	call	4002c54 <printf>
  			draw_update_volume_bar(vol_bar);
 40023c0:	e0bff943 	ldbu	r2,-27(fp)
 40023c4:	1009883a 	mov	r4,r2
 40023c8:	4000e2c0 	call	4000e2c <draw_update_volume_bar>
  		}
  		printf("Frequenz volume %d\n", read_freq_vol());
 40023cc:	4010fec0 	call	4010fec <read_freq_vol>
 40023d0:	100b883a 	mov	r5,r2
 40023d4:	010100f4 	movhi	r4,1027
 40023d8:	210b2104 	addi	r4,r4,11396
 40023dc:	4002c540 	call	4002c54 <printf>

  	  	break;
 40023e0:	0000bb06 	br	40026d0 <main+0x5e8>

  	  case ST_cali:
  		if(cali_enable == 1){
 40023e4:	e0bff903 	ldbu	r2,-28(fp)
 40023e8:	10800058 	cmpnei	r2,r2,1
 40023ec:	1000b11e 	bne	r2,zero,40026b4 <main+0x5cc>
  			if((xy.y_coord >= 2800) && (xy.x_coord<=1100)){
 40023f0:	e0bffd8b 	ldhu	r2,-10(fp)
 40023f4:	10bfffcc 	andi	r2,r2,65535
 40023f8:	1082bc30 	cmpltui	r2,r2,2800
 40023fc:	1000ad1e 	bne	r2,zero,40026b4 <main+0x5cc>
 4002400:	e0bffd0b 	ldhu	r2,-12(fp)
 4002404:	10bfffcc 	andi	r2,r2,65535
 4002408:	10811368 	cmpgeui	r2,r2,1101
 400240c:	1000a91e 	bne	r2,zero,40026b4 <main+0x5cc>
  				cali_enable = 0;
 4002410:	e03ff905 	stb	zero,-28(fp)
  				state = ST_main;
 4002414:	e03ffa15 	stw	zero,-24(fp)
  				LCD_Clear(WHITE);
 4002418:	013fffd4 	movui	r4,65535
 400241c:	40105880 	call	4010588 <LCD_Clear>
  				draw_main_screen();
 4002420:	4000a880 	call	4000a88 <draw_main_screen>
  			}
  		}
  		break;
 4002424:	0000a306 	br	40026b4 <main+0x5cc>

  	  case ST_play_help:
  		if((xy.y_coord >= 2800) && (xy.x_coord<=1100)){
 4002428:	e0bffd8b 	ldhu	r2,-10(fp)
 400242c:	10bfffcc 	andi	r2,r2,65535
 4002430:	1082bc30 	cmpltui	r2,r2,2800
 4002434:	1000091e 	bne	r2,zero,400245c <main+0x374>
 4002438:	e0bffd0b 	ldhu	r2,-12(fp)
 400243c:	10bfffcc 	andi	r2,r2,65535
 4002440:	10811368 	cmpgeui	r2,r2,1101
 4002444:	1000051e 	bne	r2,zero,400245c <main+0x374>
  			state = ST_main;
 4002448:	e03ffa15 	stw	zero,-24(fp)
  			LCD_Clear(WHITE);
 400244c:	013fffd4 	movui	r4,65535
 4002450:	40105880 	call	4010588 <LCD_Clear>
  			draw_main_screen();
 4002454:	4000a880 	call	4000a88 <draw_main_screen>
 4002458:	00003b06 	br	4002548 <main+0x460>
  		}else if((xy.y_coord <= 1200) && (xy.x_coord>=1300)){
 400245c:	e0bffd8b 	ldhu	r2,-10(fp)
 4002460:	10bfffcc 	andi	r2,r2,65535
 4002464:	10812c68 	cmpgeui	r2,r2,1201
 4002468:	10000d1e 	bne	r2,zero,40024a0 <main+0x3b8>
 400246c:	e0bffd0b 	ldhu	r2,-12(fp)
 4002470:	10bfffcc 	andi	r2,r2,65535
 4002474:	10814530 	cmpltui	r2,r2,1300
 4002478:	1000091e 	bne	r2,zero,40024a0 <main+0x3b8>
  			draw_glissando_on_off(glissando_on_off ^ 0x01);
 400247c:	e0bff983 	ldbu	r2,-26(fp)
 4002480:	1080005c 	xori	r2,r2,1
 4002484:	10803fcc 	andi	r2,r2,255
 4002488:	1009883a 	mov	r4,r2
 400248c:	4000fe00 	call	4000fe0 <draw_glissando_on_off>
  			glissando_on_off = glissando_on_off ^ 0x01;
 4002490:	e0bff983 	ldbu	r2,-26(fp)
 4002494:	1080005c 	xori	r2,r2,1
 4002498:	e0bff985 	stb	r2,-26(fp)
 400249c:	00002a06 	br	4002548 <main+0x460>
  		}else if((xy.y_coord <= 1200) && (xy.x_coord<=1300)){
 40024a0:	e0bffd8b 	ldhu	r2,-10(fp)
 40024a4:	10bfffcc 	andi	r2,r2,65535
 40024a8:	10812c68 	cmpgeui	r2,r2,1201
 40024ac:	10000d1e 	bne	r2,zero,40024e4 <main+0x3fc>
 40024b0:	e0bffd0b 	ldhu	r2,-12(fp)
 40024b4:	10bfffcc 	andi	r2,r2,65535
 40024b8:	10814568 	cmpgeui	r2,r2,1301
 40024bc:	1000091e 	bne	r2,zero,40024e4 <main+0x3fc>
  			state = ST_glissando_set;
 40024c0:	00800104 	movi	r2,4
 40024c4:	e0bffa15 	stw	r2,-24(fp)
  			LCD_Clear(WHITE);
 40024c8:	013fffd4 	movui	r4,65535
 40024cc:	40105880 	call	4010588 <LCD_Clear>
  			draw_glissando_set();
 40024d0:	40010b80 	call	40010b8 <draw_glissando_set>
  			draw_update_glissando_delay(glissando_delay);
 40024d4:	e0bff9c3 	ldbu	r2,-25(fp)
 40024d8:	1009883a 	mov	r4,r2
 40024dc:	40012100 	call	4001210 <draw_update_glissando_delay>
 40024e0:	00001906 	br	4002548 <main+0x460>
  		}else if((xy.y_coord >= 1200) && (xy.x_coord>=1300)){
 40024e4:	e0bffd8b 	ldhu	r2,-10(fp)
 40024e8:	10bfffcc 	andi	r2,r2,65535
 40024ec:	10812c30 	cmpltui	r2,r2,1200
 40024f0:	1000721e 	bne	r2,zero,40026bc <main+0x5d4>
 40024f4:	e0bffd0b 	ldhu	r2,-12(fp)
 40024f8:	10bfffcc 	andi	r2,r2,65535
 40024fc:	10814530 	cmpltui	r2,r2,1300
 4002500:	10006e1e 	bne	r2,zero,40026bc <main+0x5d4>
  			state = ST_display_ton;
 4002504:	00800144 	movi	r2,5
 4002508:	e0bffa15 	stw	r2,-24(fp)
  			//Configure alarm for 1 seconds
  			if (alt_alarm_start(&my_alarm,1000, alarm_callback, NULL) < 0){
 400250c:	000f883a 	mov	r7,zero
 4002510:	01810034 	movhi	r6,1024
 4002514:	31882904 	addi	r6,r6,8356
 4002518:	0140fa04 	movi	r5,1000
 400251c:	01010134 	movhi	r4,1028
 4002520:	21258e04 	addi	r4,r4,-27080
 4002524:	400f3900 	call	400f390 <alt_alarm_start>
 4002528:	1000030e 	bge	r2,zero,4002538 <main+0x450>
  				printf ("No System Clock Available\n");
 400252c:	010100f4 	movhi	r4,1027
 4002530:	210b2604 	addi	r4,r4,11416
 4002534:	4002d500 	call	4002d50 <puts>
  			}
  			LCD_Clear(WHITE);
 4002538:	013fffd4 	movui	r4,65535
 400253c:	40105880 	call	4010588 <LCD_Clear>
  			draw_display_ton();
 4002540:	40012b80 	call	40012b8 <draw_display_ton>
  		}
  	  	break;
 4002544:	00005d06 	br	40026bc <main+0x5d4>
 4002548:	00005c06 	br	40026bc <main+0x5d4>

  	  case ST_glissando_set:
  		if((xy.y_coord >= 2800) && (xy.x_coord<=1100)){
 400254c:	e0bffd8b 	ldhu	r2,-10(fp)
 4002550:	10bfffcc 	andi	r2,r2,65535
 4002554:	1082bc30 	cmpltui	r2,r2,2800
 4002558:	10000d1e 	bne	r2,zero,4002590 <main+0x4a8>
 400255c:	e0bffd0b 	ldhu	r2,-12(fp)
 4002560:	10bfffcc 	andi	r2,r2,65535
 4002564:	10811368 	cmpgeui	r2,r2,1101
 4002568:	1000091e 	bne	r2,zero,4002590 <main+0x4a8>
  			state = ST_play_help;
 400256c:	008000c4 	movi	r2,3
 4002570:	e0bffa15 	stw	r2,-24(fp)
  			LCD_Clear(WHITE);
 4002574:	013fffd4 	movui	r4,65535
 4002578:	40105880 	call	4010588 <LCD_Clear>
  			draw_help_screen();
 400257c:	4000ed40 	call	4000ed4 <draw_help_screen>
  			draw_glissando_on_off(glissando_on_off);
 4002580:	e0bff983 	ldbu	r2,-26(fp)
 4002584:	1009883a 	mov	r4,r2
 4002588:	4000fe00 	call	4000fe0 <draw_glissando_on_off>
 400258c:	00003206 	br	4002658 <main+0x570>
  		}else if((xy.y_coord <= 2050) && (xy.x_coord<=700)){
 4002590:	e0bffd8b 	ldhu	r2,-10(fp)
 4002594:	10bfffcc 	andi	r2,r2,65535
 4002598:	108200e8 	cmpgeui	r2,r2,2051
 400259c:	1000171e 	bne	r2,zero,40025fc <main+0x514>
 40025a0:	e0bffd0b 	ldhu	r2,-12(fp)
 40025a4:	10bfffcc 	andi	r2,r2,65535
 40025a8:	1080af68 	cmpgeui	r2,r2,701
 40025ac:	1000131e 	bne	r2,zero,40025fc <main+0x514>
  			if(glissando_delay <= 0){
 40025b0:	e0bff9c3 	ldbu	r2,-25(fp)
 40025b4:	1000021e 	bne	r2,zero,40025c0 <main+0x4d8>
  				glissando_delay = 1;
 40025b8:	00800044 	movi	r2,1
 40025bc:	e0bff9c5 	stb	r2,-25(fp)
  			}
  			glissando_delay --;
 40025c0:	e0bff9c3 	ldbu	r2,-25(fp)
 40025c4:	10bfffc4 	addi	r2,r2,-1
 40025c8:	e0bff9c5 	stb	r2,-25(fp)
  			set_glissando_delay(glissando_delay);
 40025cc:	e0bff9c3 	ldbu	r2,-25(fp)
 40025d0:	1009883a 	mov	r4,r2
 40025d4:	4010e640 	call	4010e64 <set_glissando_delay>
  			draw_update_glissando_delay(glissando_delay);
 40025d8:	e0bff9c3 	ldbu	r2,-25(fp)
 40025dc:	1009883a 	mov	r4,r2
 40025e0:	40012100 	call	4001210 <draw_update_glissando_delay>
  			printf("freq pitch %d\n",read_freq_pitch());
 40025e4:	4010f300 	call	4010f30 <read_freq_pitch>
 40025e8:	100b883a 	mov	r5,r2
 40025ec:	010100f4 	movhi	r4,1027
 40025f0:	210b2d04 	addi	r4,r4,11444
 40025f4:	4002c540 	call	4002c54 <printf>
 40025f8:	00001706 	br	4002658 <main+0x570>
  		}else if((xy.y_coord <= 2050) && (xy.x_coord>=1300)){
 40025fc:	e0bffd8b 	ldhu	r2,-10(fp)
 4002600:	10bfffcc 	andi	r2,r2,65535
 4002604:	108200e8 	cmpgeui	r2,r2,2051
 4002608:	10002e1e 	bne	r2,zero,40026c4 <main+0x5dc>
 400260c:	e0bffd0b 	ldhu	r2,-12(fp)
 4002610:	10bfffcc 	andi	r2,r2,65535
 4002614:	10814530 	cmpltui	r2,r2,1300
 4002618:	10002a1e 	bne	r2,zero,40026c4 <main+0x5dc>
  			glissando_delay ++;
 400261c:	e0bff9c3 	ldbu	r2,-25(fp)
 4002620:	10800044 	addi	r2,r2,1
 4002624:	e0bff9c5 	stb	r2,-25(fp)
  			if(glissando_delay >= 10){
 4002628:	e0bff9c3 	ldbu	r2,-25(fp)
 400262c:	108002b0 	cmpltui	r2,r2,10
 4002630:	1000021e 	bne	r2,zero,400263c <main+0x554>
  			  glissando_delay = 10;
 4002634:	00800284 	movi	r2,10
 4002638:	e0bff9c5 	stb	r2,-25(fp)
  			}
  			set_glissando_delay(glissando_delay);
 400263c:	e0bff9c3 	ldbu	r2,-25(fp)
 4002640:	1009883a 	mov	r4,r2
 4002644:	4010e640 	call	4010e64 <set_glissando_delay>
  			draw_update_glissando_delay(glissando_delay);
 4002648:	e0bff9c3 	ldbu	r2,-25(fp)
 400264c:	1009883a 	mov	r4,r2
 4002650:	40012100 	call	4001210 <draw_update_glissando_delay>
  		}
  	  	break;
 4002654:	00001b06 	br	40026c4 <main+0x5dc>
 4002658:	00001a06 	br	40026c4 <main+0x5dc>

  	  case ST_display_ton:
  		if((xy.y_coord >= 2800) && (xy.x_coord<=1100)){
 400265c:	e0bffd8b 	ldhu	r2,-10(fp)
 4002660:	10bfffcc 	andi	r2,r2,65535
 4002664:	1082bc30 	cmpltui	r2,r2,2800
 4002668:	1000181e 	bne	r2,zero,40026cc <main+0x5e4>
 400266c:	e0bffd0b 	ldhu	r2,-12(fp)
 4002670:	10bfffcc 	andi	r2,r2,65535
 4002674:	10811368 	cmpgeui	r2,r2,1101
 4002678:	1000141e 	bne	r2,zero,40026cc <main+0x5e4>
  			state = ST_play_help;
 400267c:	008000c4 	movi	r2,3
 4002680:	e0bffa15 	stw	r2,-24(fp)
  			LCD_Clear(WHITE);
 4002684:	013fffd4 	movui	r4,65535
 4002688:	40105880 	call	4010588 <LCD_Clear>
  		  	draw_help_screen();
 400268c:	4000ed40 	call	4000ed4 <draw_help_screen>
  		  	draw_glissando_on_off(glissando_on_off);
 4002690:	e0bff983 	ldbu	r2,-26(fp)
 4002694:	1009883a 	mov	r4,r2
 4002698:	4000fe00 	call	4000fe0 <draw_glissando_on_off>
  		  	alt_alarm_stop(&my_alarm);
 400269c:	01010134 	movhi	r4,1028
 40026a0:	21258e04 	addi	r4,r4,-27080
 40026a4:	400ff6c0 	call	400ff6c <alt_alarm_stop>
  		}
  	  	break;
 40026a8:	00000806 	br	40026cc <main+0x5e4>
  				state = ST_play_help;
  				LCD_Clear(WHITE);
  				draw_help_screen();
  				draw_glissando_on_off(glissando_on_off);
  			}
  		break;
 40026ac:	0001883a 	nop
 40026b0:	003ea906 	br	4002158 <__alt_data_end+0xfc002158>
  				state = ST_main;
  				LCD_Clear(WHITE);
  				draw_main_screen();
  			}
  		}
  		break;
 40026b4:	0001883a 	nop
 40026b8:	003ea706 	br	4002158 <__alt_data_end+0xfc002158>
  				printf ("No System Clock Available\n");
  			}
  			LCD_Clear(WHITE);
  			draw_display_ton();
  		}
  	  	break;
 40026bc:	0001883a 	nop
 40026c0:	003ea506 	br	4002158 <__alt_data_end+0xfc002158>
  			  glissando_delay = 10;
  			}
  			set_glissando_delay(glissando_delay);
  			draw_update_glissando_delay(glissando_delay);
  		}
  	  	break;
 40026c4:	0001883a 	nop
 40026c8:	003ea306 	br	4002158 <__alt_data_end+0xfc002158>
  			LCD_Clear(WHITE);
  		  	draw_help_screen();
  		  	draw_glissando_on_off(glissando_on_off);
  		  	alt_alarm_stop(&my_alarm);
  		}
  	  	break;
 40026cc:	0001883a 	nop
  }
}


}
 40026d0:	003ea106 	br	4002158 <__alt_data_end+0xfc002158>

040026d4 <touch_isr>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void touch_isr(void * context)
{
 40026d4:	defff604 	addi	sp,sp,-40
 40026d8:	dfc00915 	stw	ra,36(sp)
 40026dc:	df000815 	stw	fp,32(sp)
 40026e0:	df000804 	addi	fp,sp,32
 40026e4:	e13fff15 	stw	r4,-4(fp)

	alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 40026e8:	014000c4 	movi	r5,3
 40026ec:	0009883a 	mov	r4,zero
 40026f0:	400f7b80 	call	400f7b8 <alt_ic_irq_disable>
	//Flag touched
	//alt_u8* touched = (alt_u8*)context;
	//*touched = 1;
	printf("touched!\n");
 40026f4:	010100f4 	movhi	r4,1027
 40026f8:	210b3104 	addi	r4,r4,11460
 40026fc:	4002d500 	call	4002d50 <puts>

	volatile XY* xy = (XY*)context;
 4002700:	e0bfff17 	ldw	r2,-4(fp)
 4002704:	e0bffb15 	stw	r2,-20(fp)

	volatile alt_u8 high_byte, low_byte;
	alt_u8 data8;
    // x
	//alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, sizeof(CommandGetX), &CommandGetX, 0, 0,ALT_AVALON_SPI_COMMAND_MERGE);
 4002708:	00800044 	movi	r2,1
 400270c:	d8800215 	stw	r2,8(sp)
 4002710:	d8000115 	stw	zero,4(sp)
 4002714:	d8000015 	stw	zero,0(sp)
 4002718:	d1e00004 	addi	r7,gp,-32768
 400271c:	01800044 	movi	r6,1
 4002720:	000b883a 	mov	r5,zero
 4002724:	01020034 	movhi	r4,2048
 4002728:	21040004 	addi	r4,r4,4096
 400272c:	4011aa40 	call	4011aa4 <alt_avalon_spi_command>
 4002730:	e0bffc15 	stw	r2,-16(fp)
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte,ALT_AVALON_SPI_COMMAND_MERGE);
 4002734:	00800044 	movi	r2,1
 4002738:	d8800215 	stw	r2,8(sp)
 400273c:	e0bffe04 	addi	r2,fp,-8
 4002740:	d8800115 	stw	r2,4(sp)
 4002744:	00800044 	movi	r2,1
 4002748:	d8800015 	stw	r2,0(sp)
 400274c:	000f883a 	mov	r7,zero
 4002750:	000d883a 	mov	r6,zero
 4002754:	000b883a 	mov	r5,zero
 4002758:	01020034 	movhi	r4,2048
 400275c:	21040004 	addi	r4,r4,4096
 4002760:	4011aa40 	call	4011aa4 <alt_avalon_spi_command>
 4002764:	e0bffc15 	stw	r2,-16(fp)
    if (result != sizeof(high_byte)){
 4002768:	e0bffc17 	ldw	r2,-16(fp)
 400276c:	10800060 	cmpeqi	r2,r2,1
 4002770:	1000041e 	bne	r2,zero,4002784 <touch_isr+0xb0>
        printf(("[TOUCH] failed to get x\n row32"));
 4002774:	010100f4 	movhi	r4,1027
 4002778:	210b3404 	addi	r4,r4,11472
 400277c:	4002c540 	call	4002c54 <printf>
        return;
 4002780:	00009306 	br	40029d0 <touch_isr+0x2fc>
    }

    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte,ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4002784:	00800084 	movi	r2,2
 4002788:	d8800215 	stw	r2,8(sp)
 400278c:	e0bffe44 	addi	r2,fp,-7
 4002790:	d8800115 	stw	r2,4(sp)
 4002794:	00800044 	movi	r2,1
 4002798:	d8800015 	stw	r2,0(sp)
 400279c:	000f883a 	mov	r7,zero
 40027a0:	000d883a 	mov	r6,zero
 40027a4:	000b883a 	mov	r5,zero
 40027a8:	01020034 	movhi	r4,2048
 40027ac:	21040004 	addi	r4,r4,4096
 40027b0:	4011aa40 	call	4011aa4 <alt_avalon_spi_command>
 40027b4:	e0bffc15 	stw	r2,-16(fp)

    if (result != sizeof(low_byte)){
 40027b8:	e0bffc17 	ldw	r2,-16(fp)
 40027bc:	10800060 	cmpeqi	r2,r2,1
 40027c0:	1000041e 	bne	r2,zero,40027d4 <touch_isr+0x100>
        printf(("[TOUCH] failed to get x\n row39"));
 40027c4:	010100f4 	movhi	r4,1027
 40027c8:	210b3c04 	addi	r4,r4,11504
 40027cc:	4002c540 	call	4002c54 <printf>
        return;
 40027d0:	00007f06 	br	40029d0 <touch_isr+0x2fc>
    }

    ResponseX = (high_byte << 8) | low_byte;
 40027d4:	e0bffe03 	ldbu	r2,-8(fp)
 40027d8:	10803fcc 	andi	r2,r2,255
 40027dc:	1004923a 	slli	r2,r2,8
 40027e0:	1007883a 	mov	r3,r2
 40027e4:	e0bffe43 	ldbu	r2,-7(fp)
 40027e8:	10803fcc 	andi	r2,r2,255
 40027ec:	1884b03a 	or	r2,r3,r2
 40027f0:	e0bffd0d 	sth	r2,-12(fp)

    // y
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 40027f4:	00800044 	movi	r2,1
 40027f8:	d8800215 	stw	r2,8(sp)
 40027fc:	d8000115 	stw	zero,4(sp)
 4002800:	d8000015 	stw	zero,0(sp)
 4002804:	d1e00044 	addi	r7,gp,-32767
 4002808:	01800044 	movi	r6,1
 400280c:	000b883a 	mov	r5,zero
 4002810:	01020034 	movhi	r4,2048
 4002814:	21040004 	addi	r4,r4,4096
 4002818:	4011aa40 	call	4011aa4 <alt_avalon_spi_command>
 400281c:	e0bffc15 	stw	r2,-16(fp)
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4002820:	00800044 	movi	r2,1
 4002824:	d8800215 	stw	r2,8(sp)
 4002828:	e0bffe04 	addi	r2,fp,-8
 400282c:	d8800115 	stw	r2,4(sp)
 4002830:	00800044 	movi	r2,1
 4002834:	d8800015 	stw	r2,0(sp)
 4002838:	000f883a 	mov	r7,zero
 400283c:	000d883a 	mov	r6,zero
 4002840:	000b883a 	mov	r5,zero
 4002844:	01020034 	movhi	r4,2048
 4002848:	21040004 	addi	r4,r4,4096
 400284c:	4011aa40 	call	4011aa4 <alt_avalon_spi_command>
 4002850:	e0bffc15 	stw	r2,-16(fp)

    if (result != sizeof(high_byte)){
 4002854:	e0bffc17 	ldw	r2,-16(fp)
 4002858:	10800060 	cmpeqi	r2,r2,1
 400285c:	1000041e 	bne	r2,zero,4002870 <touch_isr+0x19c>
        printf(("[TOUCH] failed to get x\n row50"));
 4002860:	010100f4 	movhi	r4,1027
 4002864:	210b4404 	addi	r4,r4,11536
 4002868:	4002c540 	call	4002c54 <printf>
        return;
 400286c:	00005806 	br	40029d0 <touch_isr+0x2fc>
    }

    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte,ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4002870:	00800084 	movi	r2,2
 4002874:	d8800215 	stw	r2,8(sp)
 4002878:	e0bffe44 	addi	r2,fp,-7
 400287c:	d8800115 	stw	r2,4(sp)
 4002880:	00800044 	movi	r2,1
 4002884:	d8800015 	stw	r2,0(sp)
 4002888:	000f883a 	mov	r7,zero
 400288c:	000d883a 	mov	r6,zero
 4002890:	000b883a 	mov	r5,zero
 4002894:	01020034 	movhi	r4,2048
 4002898:	21040004 	addi	r4,r4,4096
 400289c:	4011aa40 	call	4011aa4 <alt_avalon_spi_command>
 40028a0:	e0bffc15 	stw	r2,-16(fp)

    if (result != sizeof(low_byte)){
 40028a4:	e0bffc17 	ldw	r2,-16(fp)
 40028a8:	10800060 	cmpeqi	r2,r2,1
 40028ac:	1000041e 	bne	r2,zero,40028c0 <touch_isr+0x1ec>
        printf(("[TOUCH] failed to get x\n row57"));
 40028b0:	010100f4 	movhi	r4,1027
 40028b4:	210b4c04 	addi	r4,r4,11568
 40028b8:	4002c540 	call	4002c54 <printf>
        return;
 40028bc:	00004406 	br	40029d0 <touch_isr+0x2fc>
    }


    ResponseY = (high_byte << 8) | low_byte;
 40028c0:	e0bffe03 	ldbu	r2,-8(fp)
 40028c4:	10803fcc 	andi	r2,r2,255
 40028c8:	1004923a 	slli	r2,r2,8
 40028cc:	1007883a 	mov	r3,r2
 40028d0:	e0bffe43 	ldbu	r2,-7(fp)
 40028d4:	10803fcc 	andi	r2,r2,255
 40028d8:	1884b03a 	or	r2,r3,r2
 40028dc:	e0bffd8d 	sth	r2,-10(fp)


    xy->x_coord = (ResponseX >> 3 ) & 0xFFF;  // 12 bits
 40028e0:	e0bffd0b 	ldhu	r2,-12(fp)
 40028e4:	10bfffcc 	andi	r2,r2,65535
 40028e8:	1004d0fa 	srli	r2,r2,3
 40028ec:	1083ffcc 	andi	r2,r2,4095
 40028f0:	1007883a 	mov	r3,r2
 40028f4:	e0bffb17 	ldw	r2,-20(fp)
 40028f8:	10c0000d 	sth	r3,0(r2)
    xy->y_coord = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 40028fc:	e0bffd8b 	ldhu	r2,-10(fp)
 4002900:	10bfffcc 	andi	r2,r2,65535
 4002904:	1004d0fa 	srli	r2,r2,3
 4002908:	1083ffcc 	andi	r2,r2,4095
 400290c:	1007883a 	mov	r3,r2
 4002910:	e0bffb17 	ldw	r2,-20(fp)
 4002914:	10c0008d 	sth	r3,2(r2)

    if((xy->x_coord == 0 || xy->y_coord == 0) || (alt_nticks() < xy->next_active_time) ){
 4002918:	e0bffb17 	ldw	r2,-20(fp)
 400291c:	1080000b 	ldhu	r2,0(r2)
 4002920:	10bfffcc 	andi	r2,r2,65535
 4002924:	10000826 	beq	r2,zero,4002948 <touch_isr+0x274>
 4002928:	e0bffb17 	ldw	r2,-20(fp)
 400292c:	1080008b 	ldhu	r2,2(r2)
 4002930:	10bfffcc 	andi	r2,r2,65535
 4002934:	10000426 	beq	r2,zero,4002948 <touch_isr+0x274>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002938:	d0ecc817 	ldw	r3,-19680(gp)
 400293c:	e0bffb17 	ldw	r2,-20(fp)
 4002940:	10800217 	ldw	r2,8(r2)
 4002944:	1880032e 	bgeu	r3,r2,4002954 <touch_isr+0x280>
    	xy->enable_xy = 0;
 4002948:	e0bffb17 	ldw	r2,-20(fp)
 400294c:	10000105 	stb	zero,4(r2)
 4002950:	00000906 	br	4002978 <touch_isr+0x2a4>
    }else{
    	xy->enable_xy = 1;
 4002954:	e0bffb17 	ldw	r2,-20(fp)
 4002958:	00c00044 	movi	r3,1
 400295c:	10c00105 	stb	r3,4(r2)
 4002960:	d0ecc817 	ldw	r3,-19680(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4002964:	d0acc717 	ldw	r2,-19684(gp)
    	xy->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 4002968:	1004d0ba 	srli	r2,r2,2
 400296c:	1887883a 	add	r3,r3,r2
 4002970:	e0bffb17 	ldw	r2,-20(fp)
 4002974:	10c00215 	stw	r3,8(r2)
    }
    printf("X Koordinate: %d Y Koordinate: %d\n", xy->x_coord,xy->y_coord);
 4002978:	e0bffb17 	ldw	r2,-20(fp)
 400297c:	1080000b 	ldhu	r2,0(r2)
 4002980:	10ffffcc 	andi	r3,r2,65535
 4002984:	e0bffb17 	ldw	r2,-20(fp)
 4002988:	1080008b 	ldhu	r2,2(r2)
 400298c:	10bfffcc 	andi	r2,r2,65535
 4002990:	100d883a 	mov	r6,r2
 4002994:	180b883a 	mov	r5,r3
 4002998:	010100f4 	movhi	r4,1027
 400299c:	210b5404 	addi	r4,r4,11600
 40029a0:	4002c540 	call	4002c54 <printf>


	 //  INSERT CODE 6. Then reset that register to 0
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TOUCH_PANEL_PEN_IRQ_N_BASE,0x0);
 40029a4:	0007883a 	mov	r3,zero
 40029a8:	00820034 	movhi	r2,2048
 40029ac:	10841b04 	addi	r2,r2,4204
 40029b0:	10c00035 	stwio	r3,0(r2)

    //  Reset IRQ Mask
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x01);
 40029b4:	00c00044 	movi	r3,1
 40029b8:	00820034 	movhi	r2,2048
 40029bc:	10841a04 	addi	r2,r2,4200
 40029c0:	10c00035 	stwio	r3,0(r2)

    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 40029c4:	014000c4 	movi	r5,3
 40029c8:	0009883a 	mov	r4,zero
 40029cc:	400f7300 	call	400f730 <alt_ic_irq_enable>

    //xy->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
}
 40029d0:	e037883a 	mov	sp,fp
 40029d4:	dfc00117 	ldw	ra,4(sp)
 40029d8:	df000017 	ldw	fp,0(sp)
 40029dc:	dec00204 	addi	sp,sp,8
 40029e0:	f800283a 	ret

040029e4 <touch_init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void touch_init(void* context)
{
 40029e4:	defffc04 	addi	sp,sp,-16
 40029e8:	dfc00315 	stw	ra,12(sp)
 40029ec:	df000215 	stw	fp,8(sp)
 40029f0:	df000204 	addi	fp,sp,8
 40029f4:	e13fff15 	stw	r4,-4(fp)
	//
	//  - Enable touch pen irg.
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x01);
 40029f8:	00c00044 	movi	r3,1
 40029fc:	00820034 	movhi	r2,2048
 4002a00:	10841a04 	addi	r2,r2,4200
 4002a04:	10c00035 	stwio	r3,0(r2)

	// Reset the edge capture register.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x0);
 4002a08:	0007883a 	mov	r3,zero
 4002a0c:	00820034 	movhi	r2,2048
 4002a10:	10841b04 	addi	r2,r2,4204
 4002a14:	10c00035 	stwio	r3,0(r2)

	//  Register the ISR:
	alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID, TOUCH_PANEL_PEN_IRQ_N_IRQ, touch_isr, context, 0x0);
 4002a18:	d8000015 	stw	zero,0(sp)
 4002a1c:	e1ffff17 	ldw	r7,-4(fp)
 4002a20:	01810034 	movhi	r6,1024
 4002a24:	3189b504 	addi	r6,r6,9940
 4002a28:	014000c4 	movi	r5,3
 4002a2c:	0009883a 	mov	r4,zero
 4002a30:	400f6e00 	call	400f6e0 <alt_ic_isr_register>

}
 4002a34:	0001883a 	nop
 4002a38:	e037883a 	mov	sp,fp
 4002a3c:	dfc00117 	ldw	ra,4(sp)
 4002a40:	df000017 	ldw	fp,0(sp)
 4002a44:	dec00204 	addi	sp,sp,8
 4002a48:	f800283a 	ret

04002a4c <get_xy>:

void get_xy (void * context)
{
 4002a4c:	defffe04 	addi	sp,sp,-8
 4002a50:	df000115 	stw	fp,4(sp)
 4002a54:	df000104 	addi	fp,sp,4
 4002a58:	e13fff15 	stw	r4,-4(fp)





}
 4002a5c:	0001883a 	nop
 4002a60:	e037883a 	mov	sp,fp
 4002a64:	df000017 	ldw	fp,0(sp)
 4002a68:	dec00104 	addi	sp,sp,4
 4002a6c:	f800283a 	ret

04002a70 <__divsi3>:
 4002a70:	20001b16 	blt	r4,zero,4002ae0 <__divsi3+0x70>
 4002a74:	000f883a 	mov	r7,zero
 4002a78:	28001616 	blt	r5,zero,4002ad4 <__divsi3+0x64>
 4002a7c:	200d883a 	mov	r6,r4
 4002a80:	29001a2e 	bgeu	r5,r4,4002aec <__divsi3+0x7c>
 4002a84:	00800804 	movi	r2,32
 4002a88:	00c00044 	movi	r3,1
 4002a8c:	00000106 	br	4002a94 <__divsi3+0x24>
 4002a90:	10000d26 	beq	r2,zero,4002ac8 <__divsi3+0x58>
 4002a94:	294b883a 	add	r5,r5,r5
 4002a98:	10bfffc4 	addi	r2,r2,-1
 4002a9c:	18c7883a 	add	r3,r3,r3
 4002aa0:	293ffb36 	bltu	r5,r4,4002a90 <__alt_data_end+0xfc002a90>
 4002aa4:	0005883a 	mov	r2,zero
 4002aa8:	18000726 	beq	r3,zero,4002ac8 <__divsi3+0x58>
 4002aac:	0005883a 	mov	r2,zero
 4002ab0:	31400236 	bltu	r6,r5,4002abc <__divsi3+0x4c>
 4002ab4:	314dc83a 	sub	r6,r6,r5
 4002ab8:	10c4b03a 	or	r2,r2,r3
 4002abc:	1806d07a 	srli	r3,r3,1
 4002ac0:	280ad07a 	srli	r5,r5,1
 4002ac4:	183ffa1e 	bne	r3,zero,4002ab0 <__alt_data_end+0xfc002ab0>
 4002ac8:	38000126 	beq	r7,zero,4002ad0 <__divsi3+0x60>
 4002acc:	0085c83a 	sub	r2,zero,r2
 4002ad0:	f800283a 	ret
 4002ad4:	014bc83a 	sub	r5,zero,r5
 4002ad8:	39c0005c 	xori	r7,r7,1
 4002adc:	003fe706 	br	4002a7c <__alt_data_end+0xfc002a7c>
 4002ae0:	0109c83a 	sub	r4,zero,r4
 4002ae4:	01c00044 	movi	r7,1
 4002ae8:	003fe306 	br	4002a78 <__alt_data_end+0xfc002a78>
 4002aec:	00c00044 	movi	r3,1
 4002af0:	003fee06 	br	4002aac <__alt_data_end+0xfc002aac>

04002af4 <__modsi3>:
 4002af4:	20001716 	blt	r4,zero,4002b54 <__modsi3+0x60>
 4002af8:	000f883a 	mov	r7,zero
 4002afc:	2005883a 	mov	r2,r4
 4002b00:	28001216 	blt	r5,zero,4002b4c <__modsi3+0x58>
 4002b04:	2900162e 	bgeu	r5,r4,4002b60 <__modsi3+0x6c>
 4002b08:	01800804 	movi	r6,32
 4002b0c:	00c00044 	movi	r3,1
 4002b10:	00000106 	br	4002b18 <__modsi3+0x24>
 4002b14:	30000a26 	beq	r6,zero,4002b40 <__modsi3+0x4c>
 4002b18:	294b883a 	add	r5,r5,r5
 4002b1c:	31bfffc4 	addi	r6,r6,-1
 4002b20:	18c7883a 	add	r3,r3,r3
 4002b24:	293ffb36 	bltu	r5,r4,4002b14 <__alt_data_end+0xfc002b14>
 4002b28:	18000526 	beq	r3,zero,4002b40 <__modsi3+0x4c>
 4002b2c:	1806d07a 	srli	r3,r3,1
 4002b30:	11400136 	bltu	r2,r5,4002b38 <__modsi3+0x44>
 4002b34:	1145c83a 	sub	r2,r2,r5
 4002b38:	280ad07a 	srli	r5,r5,1
 4002b3c:	183ffb1e 	bne	r3,zero,4002b2c <__alt_data_end+0xfc002b2c>
 4002b40:	38000126 	beq	r7,zero,4002b48 <__modsi3+0x54>
 4002b44:	0085c83a 	sub	r2,zero,r2
 4002b48:	f800283a 	ret
 4002b4c:	014bc83a 	sub	r5,zero,r5
 4002b50:	003fec06 	br	4002b04 <__alt_data_end+0xfc002b04>
 4002b54:	0109c83a 	sub	r4,zero,r4
 4002b58:	01c00044 	movi	r7,1
 4002b5c:	003fe706 	br	4002afc <__alt_data_end+0xfc002afc>
 4002b60:	00c00044 	movi	r3,1
 4002b64:	003ff106 	br	4002b2c <__alt_data_end+0xfc002b2c>

04002b68 <__udivsi3>:
 4002b68:	200d883a 	mov	r6,r4
 4002b6c:	2900152e 	bgeu	r5,r4,4002bc4 <__udivsi3+0x5c>
 4002b70:	28001416 	blt	r5,zero,4002bc4 <__udivsi3+0x5c>
 4002b74:	00800804 	movi	r2,32
 4002b78:	00c00044 	movi	r3,1
 4002b7c:	00000206 	br	4002b88 <__udivsi3+0x20>
 4002b80:	10000e26 	beq	r2,zero,4002bbc <__udivsi3+0x54>
 4002b84:	28000516 	blt	r5,zero,4002b9c <__udivsi3+0x34>
 4002b88:	294b883a 	add	r5,r5,r5
 4002b8c:	10bfffc4 	addi	r2,r2,-1
 4002b90:	18c7883a 	add	r3,r3,r3
 4002b94:	293ffa36 	bltu	r5,r4,4002b80 <__alt_data_end+0xfc002b80>
 4002b98:	18000826 	beq	r3,zero,4002bbc <__udivsi3+0x54>
 4002b9c:	0005883a 	mov	r2,zero
 4002ba0:	31400236 	bltu	r6,r5,4002bac <__udivsi3+0x44>
 4002ba4:	314dc83a 	sub	r6,r6,r5
 4002ba8:	10c4b03a 	or	r2,r2,r3
 4002bac:	1806d07a 	srli	r3,r3,1
 4002bb0:	280ad07a 	srli	r5,r5,1
 4002bb4:	183ffa1e 	bne	r3,zero,4002ba0 <__alt_data_end+0xfc002ba0>
 4002bb8:	f800283a 	ret
 4002bbc:	0005883a 	mov	r2,zero
 4002bc0:	f800283a 	ret
 4002bc4:	00c00044 	movi	r3,1
 4002bc8:	003ff406 	br	4002b9c <__alt_data_end+0xfc002b9c>

04002bcc <__umodsi3>:
 4002bcc:	2005883a 	mov	r2,r4
 4002bd0:	2900122e 	bgeu	r5,r4,4002c1c <__umodsi3+0x50>
 4002bd4:	28001116 	blt	r5,zero,4002c1c <__umodsi3+0x50>
 4002bd8:	01800804 	movi	r6,32
 4002bdc:	00c00044 	movi	r3,1
 4002be0:	00000206 	br	4002bec <__umodsi3+0x20>
 4002be4:	30000c26 	beq	r6,zero,4002c18 <__umodsi3+0x4c>
 4002be8:	28000516 	blt	r5,zero,4002c00 <__umodsi3+0x34>
 4002bec:	294b883a 	add	r5,r5,r5
 4002bf0:	31bfffc4 	addi	r6,r6,-1
 4002bf4:	18c7883a 	add	r3,r3,r3
 4002bf8:	293ffa36 	bltu	r5,r4,4002be4 <__alt_data_end+0xfc002be4>
 4002bfc:	18000626 	beq	r3,zero,4002c18 <__umodsi3+0x4c>
 4002c00:	1806d07a 	srli	r3,r3,1
 4002c04:	11400136 	bltu	r2,r5,4002c0c <__umodsi3+0x40>
 4002c08:	1145c83a 	sub	r2,r2,r5
 4002c0c:	280ad07a 	srli	r5,r5,1
 4002c10:	183ffb1e 	bne	r3,zero,4002c00 <__alt_data_end+0xfc002c00>
 4002c14:	f800283a 	ret
 4002c18:	f800283a 	ret
 4002c1c:	00c00044 	movi	r3,1
 4002c20:	003ff706 	br	4002c00 <__alt_data_end+0xfc002c00>

04002c24 <_printf_r>:
 4002c24:	defffd04 	addi	sp,sp,-12
 4002c28:	2805883a 	mov	r2,r5
 4002c2c:	dfc00015 	stw	ra,0(sp)
 4002c30:	d9800115 	stw	r6,4(sp)
 4002c34:	d9c00215 	stw	r7,8(sp)
 4002c38:	21400217 	ldw	r5,8(r4)
 4002c3c:	d9c00104 	addi	r7,sp,4
 4002c40:	100d883a 	mov	r6,r2
 4002c44:	4002dfc0 	call	4002dfc <___vfprintf_internal_r>
 4002c48:	dfc00017 	ldw	ra,0(sp)
 4002c4c:	dec00304 	addi	sp,sp,12
 4002c50:	f800283a 	ret

04002c54 <printf>:
 4002c54:	defffc04 	addi	sp,sp,-16
 4002c58:	dfc00015 	stw	ra,0(sp)
 4002c5c:	d9400115 	stw	r5,4(sp)
 4002c60:	d9800215 	stw	r6,8(sp)
 4002c64:	d9c00315 	stw	r7,12(sp)
 4002c68:	008100f4 	movhi	r2,1027
 4002c6c:	1098bc04 	addi	r2,r2,25328
 4002c70:	10800017 	ldw	r2,0(r2)
 4002c74:	200b883a 	mov	r5,r4
 4002c78:	d9800104 	addi	r6,sp,4
 4002c7c:	11000217 	ldw	r4,8(r2)
 4002c80:	4004ff40 	call	4004ff4 <__vfprintf_internal>
 4002c84:	dfc00017 	ldw	ra,0(sp)
 4002c88:	dec00404 	addi	sp,sp,16
 4002c8c:	f800283a 	ret

04002c90 <_puts_r>:
 4002c90:	defff604 	addi	sp,sp,-40
 4002c94:	dc000715 	stw	r16,28(sp)
 4002c98:	2021883a 	mov	r16,r4
 4002c9c:	2809883a 	mov	r4,r5
 4002ca0:	dc400815 	stw	r17,32(sp)
 4002ca4:	dfc00915 	stw	ra,36(sp)
 4002ca8:	2823883a 	mov	r17,r5
 4002cac:	4002d640 	call	4002d64 <strlen>
 4002cb0:	10c00044 	addi	r3,r2,1
 4002cb4:	d8800115 	stw	r2,4(sp)
 4002cb8:	008100f4 	movhi	r2,1027
 4002cbc:	108b5d04 	addi	r2,r2,11636
 4002cc0:	d8800215 	stw	r2,8(sp)
 4002cc4:	00800044 	movi	r2,1
 4002cc8:	d8800315 	stw	r2,12(sp)
 4002ccc:	00800084 	movi	r2,2
 4002cd0:	dc400015 	stw	r17,0(sp)
 4002cd4:	d8c00615 	stw	r3,24(sp)
 4002cd8:	dec00415 	stw	sp,16(sp)
 4002cdc:	d8800515 	stw	r2,20(sp)
 4002ce0:	80000226 	beq	r16,zero,4002cec <_puts_r+0x5c>
 4002ce4:	80800e17 	ldw	r2,56(r16)
 4002ce8:	10001426 	beq	r2,zero,4002d3c <_puts_r+0xac>
 4002cec:	81400217 	ldw	r5,8(r16)
 4002cf0:	2880030b 	ldhu	r2,12(r5)
 4002cf4:	10c8000c 	andi	r3,r2,8192
 4002cf8:	1800061e 	bne	r3,zero,4002d14 <_puts_r+0x84>
 4002cfc:	29001917 	ldw	r4,100(r5)
 4002d00:	00f7ffc4 	movi	r3,-8193
 4002d04:	10880014 	ori	r2,r2,8192
 4002d08:	20c6703a 	and	r3,r4,r3
 4002d0c:	2880030d 	sth	r2,12(r5)
 4002d10:	28c01915 	stw	r3,100(r5)
 4002d14:	d9800404 	addi	r6,sp,16
 4002d18:	8009883a 	mov	r4,r16
 4002d1c:	40075240 	call	4007524 <__sfvwrite_r>
 4002d20:	1000091e 	bne	r2,zero,4002d48 <_puts_r+0xb8>
 4002d24:	00800284 	movi	r2,10
 4002d28:	dfc00917 	ldw	ra,36(sp)
 4002d2c:	dc400817 	ldw	r17,32(sp)
 4002d30:	dc000717 	ldw	r16,28(sp)
 4002d34:	dec00a04 	addi	sp,sp,40
 4002d38:	f800283a 	ret
 4002d3c:	8009883a 	mov	r4,r16
 4002d40:	40070a00 	call	40070a0 <__sinit>
 4002d44:	003fe906 	br	4002cec <__alt_data_end+0xfc002cec>
 4002d48:	00bfffc4 	movi	r2,-1
 4002d4c:	003ff606 	br	4002d28 <__alt_data_end+0xfc002d28>

04002d50 <puts>:
 4002d50:	008100f4 	movhi	r2,1027
 4002d54:	1098bc04 	addi	r2,r2,25328
 4002d58:	200b883a 	mov	r5,r4
 4002d5c:	11000017 	ldw	r4,0(r2)
 4002d60:	4002c901 	jmpi	4002c90 <_puts_r>

04002d64 <strlen>:
 4002d64:	208000cc 	andi	r2,r4,3
 4002d68:	10002026 	beq	r2,zero,4002dec <strlen+0x88>
 4002d6c:	20800007 	ldb	r2,0(r4)
 4002d70:	10002026 	beq	r2,zero,4002df4 <strlen+0x90>
 4002d74:	2005883a 	mov	r2,r4
 4002d78:	00000206 	br	4002d84 <strlen+0x20>
 4002d7c:	10c00007 	ldb	r3,0(r2)
 4002d80:	18001826 	beq	r3,zero,4002de4 <strlen+0x80>
 4002d84:	10800044 	addi	r2,r2,1
 4002d88:	10c000cc 	andi	r3,r2,3
 4002d8c:	183ffb1e 	bne	r3,zero,4002d7c <__alt_data_end+0xfc002d7c>
 4002d90:	10c00017 	ldw	r3,0(r2)
 4002d94:	01ffbff4 	movhi	r7,65279
 4002d98:	39ffbfc4 	addi	r7,r7,-257
 4002d9c:	00ca303a 	nor	r5,zero,r3
 4002da0:	01a02074 	movhi	r6,32897
 4002da4:	19c7883a 	add	r3,r3,r7
 4002da8:	31a02004 	addi	r6,r6,-32640
 4002dac:	1946703a 	and	r3,r3,r5
 4002db0:	1986703a 	and	r3,r3,r6
 4002db4:	1800091e 	bne	r3,zero,4002ddc <strlen+0x78>
 4002db8:	10800104 	addi	r2,r2,4
 4002dbc:	10c00017 	ldw	r3,0(r2)
 4002dc0:	19cb883a 	add	r5,r3,r7
 4002dc4:	00c6303a 	nor	r3,zero,r3
 4002dc8:	28c6703a 	and	r3,r5,r3
 4002dcc:	1986703a 	and	r3,r3,r6
 4002dd0:	183ff926 	beq	r3,zero,4002db8 <__alt_data_end+0xfc002db8>
 4002dd4:	00000106 	br	4002ddc <strlen+0x78>
 4002dd8:	10800044 	addi	r2,r2,1
 4002ddc:	10c00007 	ldb	r3,0(r2)
 4002de0:	183ffd1e 	bne	r3,zero,4002dd8 <__alt_data_end+0xfc002dd8>
 4002de4:	1105c83a 	sub	r2,r2,r4
 4002de8:	f800283a 	ret
 4002dec:	2005883a 	mov	r2,r4
 4002df0:	003fe706 	br	4002d90 <__alt_data_end+0xfc002d90>
 4002df4:	0005883a 	mov	r2,zero
 4002df8:	f800283a 	ret

04002dfc <___vfprintf_internal_r>:
 4002dfc:	deffb804 	addi	sp,sp,-288
 4002e00:	dfc04715 	stw	ra,284(sp)
 4002e04:	ddc04515 	stw	r23,276(sp)
 4002e08:	dd404315 	stw	r21,268(sp)
 4002e0c:	d9002c15 	stw	r4,176(sp)
 4002e10:	282f883a 	mov	r23,r5
 4002e14:	302b883a 	mov	r21,r6
 4002e18:	d9c02d15 	stw	r7,180(sp)
 4002e1c:	df004615 	stw	fp,280(sp)
 4002e20:	dd804415 	stw	r22,272(sp)
 4002e24:	dd004215 	stw	r20,264(sp)
 4002e28:	dcc04115 	stw	r19,260(sp)
 4002e2c:	dc804015 	stw	r18,256(sp)
 4002e30:	dc403f15 	stw	r17,252(sp)
 4002e34:	dc003e15 	stw	r16,248(sp)
 4002e38:	4007c140 	call	4007c14 <_localeconv_r>
 4002e3c:	10800017 	ldw	r2,0(r2)
 4002e40:	1009883a 	mov	r4,r2
 4002e44:	d8803415 	stw	r2,208(sp)
 4002e48:	4002d640 	call	4002d64 <strlen>
 4002e4c:	d8803715 	stw	r2,220(sp)
 4002e50:	d8802c17 	ldw	r2,176(sp)
 4002e54:	10000226 	beq	r2,zero,4002e60 <___vfprintf_internal_r+0x64>
 4002e58:	10800e17 	ldw	r2,56(r2)
 4002e5c:	1000f926 	beq	r2,zero,4003244 <___vfprintf_internal_r+0x448>
 4002e60:	b880030b 	ldhu	r2,12(r23)
 4002e64:	10c8000c 	andi	r3,r2,8192
 4002e68:	1800061e 	bne	r3,zero,4002e84 <___vfprintf_internal_r+0x88>
 4002e6c:	b9001917 	ldw	r4,100(r23)
 4002e70:	00f7ffc4 	movi	r3,-8193
 4002e74:	10880014 	ori	r2,r2,8192
 4002e78:	20c6703a 	and	r3,r4,r3
 4002e7c:	b880030d 	sth	r2,12(r23)
 4002e80:	b8c01915 	stw	r3,100(r23)
 4002e84:	10c0020c 	andi	r3,r2,8
 4002e88:	1800c126 	beq	r3,zero,4003190 <___vfprintf_internal_r+0x394>
 4002e8c:	b8c00417 	ldw	r3,16(r23)
 4002e90:	1800bf26 	beq	r3,zero,4003190 <___vfprintf_internal_r+0x394>
 4002e94:	1080068c 	andi	r2,r2,26
 4002e98:	00c00284 	movi	r3,10
 4002e9c:	10c0c426 	beq	r2,r3,40031b0 <___vfprintf_internal_r+0x3b4>
 4002ea0:	d8c00404 	addi	r3,sp,16
 4002ea4:	050100f4 	movhi	r20,1027
 4002ea8:	d9001e04 	addi	r4,sp,120
 4002eac:	a50b6e84 	addi	r20,r20,11706
 4002eb0:	d8c01e15 	stw	r3,120(sp)
 4002eb4:	d8002015 	stw	zero,128(sp)
 4002eb8:	d8001f15 	stw	zero,124(sp)
 4002ebc:	d8003315 	stw	zero,204(sp)
 4002ec0:	d8003615 	stw	zero,216(sp)
 4002ec4:	d8003815 	stw	zero,224(sp)
 4002ec8:	1811883a 	mov	r8,r3
 4002ecc:	d8003915 	stw	zero,228(sp)
 4002ed0:	d8003a15 	stw	zero,232(sp)
 4002ed4:	d8002f15 	stw	zero,188(sp)
 4002ed8:	d9002815 	stw	r4,160(sp)
 4002edc:	a8800007 	ldb	r2,0(r21)
 4002ee0:	10027b26 	beq	r2,zero,40038d0 <___vfprintf_internal_r+0xad4>
 4002ee4:	00c00944 	movi	r3,37
 4002ee8:	a821883a 	mov	r16,r21
 4002eec:	10c0021e 	bne	r2,r3,4002ef8 <___vfprintf_internal_r+0xfc>
 4002ef0:	00001406 	br	4002f44 <___vfprintf_internal_r+0x148>
 4002ef4:	10c00326 	beq	r2,r3,4002f04 <___vfprintf_internal_r+0x108>
 4002ef8:	84000044 	addi	r16,r16,1
 4002efc:	80800007 	ldb	r2,0(r16)
 4002f00:	103ffc1e 	bne	r2,zero,4002ef4 <__alt_data_end+0xfc002ef4>
 4002f04:	8563c83a 	sub	r17,r16,r21
 4002f08:	88000e26 	beq	r17,zero,4002f44 <___vfprintf_internal_r+0x148>
 4002f0c:	d8c02017 	ldw	r3,128(sp)
 4002f10:	d8801f17 	ldw	r2,124(sp)
 4002f14:	45400015 	stw	r21,0(r8)
 4002f18:	1c47883a 	add	r3,r3,r17
 4002f1c:	10800044 	addi	r2,r2,1
 4002f20:	d8c02015 	stw	r3,128(sp)
 4002f24:	44400115 	stw	r17,4(r8)
 4002f28:	d8801f15 	stw	r2,124(sp)
 4002f2c:	00c001c4 	movi	r3,7
 4002f30:	1880a716 	blt	r3,r2,40031d0 <___vfprintf_internal_r+0x3d4>
 4002f34:	42000204 	addi	r8,r8,8
 4002f38:	d9402f17 	ldw	r5,188(sp)
 4002f3c:	2c4b883a 	add	r5,r5,r17
 4002f40:	d9402f15 	stw	r5,188(sp)
 4002f44:	80800007 	ldb	r2,0(r16)
 4002f48:	1000a826 	beq	r2,zero,40031ec <___vfprintf_internal_r+0x3f0>
 4002f4c:	84400047 	ldb	r17,1(r16)
 4002f50:	00bfffc4 	movi	r2,-1
 4002f54:	85400044 	addi	r21,r16,1
 4002f58:	d8002785 	stb	zero,158(sp)
 4002f5c:	0007883a 	mov	r3,zero
 4002f60:	000f883a 	mov	r7,zero
 4002f64:	d8802915 	stw	r2,164(sp)
 4002f68:	d8003115 	stw	zero,196(sp)
 4002f6c:	0025883a 	mov	r18,zero
 4002f70:	01401604 	movi	r5,88
 4002f74:	01800244 	movi	r6,9
 4002f78:	02800a84 	movi	r10,42
 4002f7c:	02401b04 	movi	r9,108
 4002f80:	ad400044 	addi	r21,r21,1
 4002f84:	88bff804 	addi	r2,r17,-32
 4002f88:	28830436 	bltu	r5,r2,4003b9c <___vfprintf_internal_r+0xda0>
 4002f8c:	100490ba 	slli	r2,r2,2
 4002f90:	01010034 	movhi	r4,1024
 4002f94:	210be904 	addi	r4,r4,12196
 4002f98:	1105883a 	add	r2,r2,r4
 4002f9c:	10800017 	ldw	r2,0(r2)
 4002fa0:	1000683a 	jmp	r2
 4002fa4:	04003abc 	xorhi	r16,zero,234
 4002fa8:	04003b9c 	xori	r16,zero,238
 4002fac:	04003b9c 	xori	r16,zero,238
 4002fb0:	04003adc 	xori	r16,zero,235
 4002fb4:	04003b9c 	xori	r16,zero,238
 4002fb8:	04003b9c 	xori	r16,zero,238
 4002fbc:	04003b9c 	xori	r16,zero,238
 4002fc0:	04003b9c 	xori	r16,zero,238
 4002fc4:	04003b9c 	xori	r16,zero,238
 4002fc8:	04003b9c 	xori	r16,zero,238
 4002fcc:	04003250 	cmplti	r16,zero,201
 4002fd0:	040039f8 	rdprs	r16,zero,231
 4002fd4:	04003b9c 	xori	r16,zero,238
 4002fd8:	04003118 	cmpnei	r16,zero,196
 4002fdc:	04003278 	rdprs	r16,zero,201
 4002fe0:	04003b9c 	xori	r16,zero,238
 4002fe4:	040032b8 	rdprs	r16,zero,202
 4002fe8:	040032c4 	movi	r16,203
 4002fec:	040032c4 	movi	r16,203
 4002ff0:	040032c4 	movi	r16,203
 4002ff4:	040032c4 	movi	r16,203
 4002ff8:	040032c4 	movi	r16,203
 4002ffc:	040032c4 	movi	r16,203
 4003000:	040032c4 	movi	r16,203
 4003004:	040032c4 	movi	r16,203
 4003008:	040032c4 	movi	r16,203
 400300c:	04003b9c 	xori	r16,zero,238
 4003010:	04003b9c 	xori	r16,zero,238
 4003014:	04003b9c 	xori	r16,zero,238
 4003018:	04003b9c 	xori	r16,zero,238
 400301c:	04003b9c 	xori	r16,zero,238
 4003020:	04003b9c 	xori	r16,zero,238
 4003024:	04003b9c 	xori	r16,zero,238
 4003028:	04003b9c 	xori	r16,zero,238
 400302c:	04003b9c 	xori	r16,zero,238
 4003030:	04003b9c 	xori	r16,zero,238
 4003034:	040032f8 	rdprs	r16,zero,203
 4003038:	040033b4 	movhi	r16,206
 400303c:	04003b9c 	xori	r16,zero,238
 4003040:	040033b4 	movhi	r16,206
 4003044:	04003b9c 	xori	r16,zero,238
 4003048:	04003b9c 	xori	r16,zero,238
 400304c:	04003b9c 	xori	r16,zero,238
 4003050:	04003b9c 	xori	r16,zero,238
 4003054:	04003454 	movui	r16,209
 4003058:	04003b9c 	xori	r16,zero,238
 400305c:	04003b9c 	xori	r16,zero,238
 4003060:	04003460 	cmpeqi	r16,zero,209
 4003064:	04003b9c 	xori	r16,zero,238
 4003068:	04003b9c 	xori	r16,zero,238
 400306c:	04003b9c 	xori	r16,zero,238
 4003070:	04003b9c 	xori	r16,zero,238
 4003074:	04003b9c 	xori	r16,zero,238
 4003078:	040038d8 	cmpnei	r16,zero,227
 400307c:	04003b9c 	xori	r16,zero,238
 4003080:	04003b9c 	xori	r16,zero,238
 4003084:	04003938 	rdprs	r16,zero,228
 4003088:	04003b9c 	xori	r16,zero,238
 400308c:	04003b9c 	xori	r16,zero,238
 4003090:	04003b9c 	xori	r16,zero,238
 4003094:	04003b9c 	xori	r16,zero,238
 4003098:	04003b9c 	xori	r16,zero,238
 400309c:	04003b9c 	xori	r16,zero,238
 40030a0:	04003b9c 	xori	r16,zero,238
 40030a4:	04003b9c 	xori	r16,zero,238
 40030a8:	04003b9c 	xori	r16,zero,238
 40030ac:	04003b9c 	xori	r16,zero,238
 40030b0:	04003b48 	cmpgei	r16,zero,237
 40030b4:	04003ae8 	cmpgeui	r16,zero,235
 40030b8:	040033b4 	movhi	r16,206
 40030bc:	040033b4 	movhi	r16,206
 40030c0:	040033b4 	movhi	r16,206
 40030c4:	04003af8 	rdprs	r16,zero,235
 40030c8:	04003ae8 	cmpgeui	r16,zero,235
 40030cc:	04003b9c 	xori	r16,zero,238
 40030d0:	04003b9c 	xori	r16,zero,238
 40030d4:	04003b04 	movi	r16,236
 40030d8:	04003b9c 	xori	r16,zero,238
 40030dc:	04003b14 	movui	r16,236
 40030e0:	040039e8 	cmpgeui	r16,zero,231
 40030e4:	04003124 	muli	r16,zero,196
 40030e8:	04003a08 	cmpgei	r16,zero,232
 40030ec:	04003b9c 	xori	r16,zero,238
 40030f0:	04003a14 	movui	r16,232
 40030f4:	04003b9c 	xori	r16,zero,238
 40030f8:	04003a70 	cmpltui	r16,zero,233
 40030fc:	04003b9c 	xori	r16,zero,238
 4003100:	04003b9c 	xori	r16,zero,238
 4003104:	04003a80 	call	4003a8 <__alt_mem_dram_ctrl-0x3bffc58>
 4003108:	d9003117 	ldw	r4,196(sp)
 400310c:	d8802d15 	stw	r2,180(sp)
 4003110:	0109c83a 	sub	r4,zero,r4
 4003114:	d9003115 	stw	r4,196(sp)
 4003118:	94800114 	ori	r18,r18,4
 400311c:	ac400007 	ldb	r17,0(r21)
 4003120:	003f9706 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003124:	00800c04 	movi	r2,48
 4003128:	d9002d17 	ldw	r4,180(sp)
 400312c:	d9402917 	ldw	r5,164(sp)
 4003130:	d8802705 	stb	r2,156(sp)
 4003134:	00801e04 	movi	r2,120
 4003138:	d8802745 	stb	r2,157(sp)
 400313c:	d8002785 	stb	zero,158(sp)
 4003140:	20c00104 	addi	r3,r4,4
 4003144:	24c00017 	ldw	r19,0(r4)
 4003148:	002d883a 	mov	r22,zero
 400314c:	90800094 	ori	r2,r18,2
 4003150:	28029a16 	blt	r5,zero,4003bbc <___vfprintf_internal_r+0xdc0>
 4003154:	00bfdfc4 	movi	r2,-129
 4003158:	90a4703a 	and	r18,r18,r2
 400315c:	d8c02d15 	stw	r3,180(sp)
 4003160:	94800094 	ori	r18,r18,2
 4003164:	9802871e 	bne	r19,zero,4003b84 <___vfprintf_internal_r+0xd88>
 4003168:	008100f4 	movhi	r2,1027
 400316c:	108b6704 	addi	r2,r2,11676
 4003170:	d8803915 	stw	r2,228(sp)
 4003174:	04401e04 	movi	r17,120
 4003178:	d8802917 	ldw	r2,164(sp)
 400317c:	0039883a 	mov	fp,zero
 4003180:	1001e926 	beq	r2,zero,4003928 <___vfprintf_internal_r+0xb2c>
 4003184:	0027883a 	mov	r19,zero
 4003188:	002d883a 	mov	r22,zero
 400318c:	00020506 	br	40039a4 <___vfprintf_internal_r+0xba8>
 4003190:	d9002c17 	ldw	r4,176(sp)
 4003194:	b80b883a 	mov	r5,r23
 4003198:	40050cc0 	call	40050cc <__swsetup_r>
 400319c:	1005ac1e 	bne	r2,zero,4004850 <___vfprintf_internal_r+0x1a54>
 40031a0:	b880030b 	ldhu	r2,12(r23)
 40031a4:	00c00284 	movi	r3,10
 40031a8:	1080068c 	andi	r2,r2,26
 40031ac:	10ff3c1e 	bne	r2,r3,4002ea0 <__alt_data_end+0xfc002ea0>
 40031b0:	b880038f 	ldh	r2,14(r23)
 40031b4:	103f3a16 	blt	r2,zero,4002ea0 <__alt_data_end+0xfc002ea0>
 40031b8:	d9c02d17 	ldw	r7,180(sp)
 40031bc:	d9002c17 	ldw	r4,176(sp)
 40031c0:	a80d883a 	mov	r6,r21
 40031c4:	b80b883a 	mov	r5,r23
 40031c8:	40050100 	call	4005010 <__sbprintf>
 40031cc:	00001106 	br	4003214 <___vfprintf_internal_r+0x418>
 40031d0:	d9002c17 	ldw	r4,176(sp)
 40031d4:	d9801e04 	addi	r6,sp,120
 40031d8:	b80b883a 	mov	r5,r23
 40031dc:	400a3f80 	call	400a3f8 <__sprint_r>
 40031e0:	1000081e 	bne	r2,zero,4003204 <___vfprintf_internal_r+0x408>
 40031e4:	da000404 	addi	r8,sp,16
 40031e8:	003f5306 	br	4002f38 <__alt_data_end+0xfc002f38>
 40031ec:	d8802017 	ldw	r2,128(sp)
 40031f0:	10000426 	beq	r2,zero,4003204 <___vfprintf_internal_r+0x408>
 40031f4:	d9002c17 	ldw	r4,176(sp)
 40031f8:	d9801e04 	addi	r6,sp,120
 40031fc:	b80b883a 	mov	r5,r23
 4003200:	400a3f80 	call	400a3f8 <__sprint_r>
 4003204:	b880030b 	ldhu	r2,12(r23)
 4003208:	1080100c 	andi	r2,r2,64
 400320c:	1005901e 	bne	r2,zero,4004850 <___vfprintf_internal_r+0x1a54>
 4003210:	d8802f17 	ldw	r2,188(sp)
 4003214:	dfc04717 	ldw	ra,284(sp)
 4003218:	df004617 	ldw	fp,280(sp)
 400321c:	ddc04517 	ldw	r23,276(sp)
 4003220:	dd804417 	ldw	r22,272(sp)
 4003224:	dd404317 	ldw	r21,268(sp)
 4003228:	dd004217 	ldw	r20,264(sp)
 400322c:	dcc04117 	ldw	r19,260(sp)
 4003230:	dc804017 	ldw	r18,256(sp)
 4003234:	dc403f17 	ldw	r17,252(sp)
 4003238:	dc003e17 	ldw	r16,248(sp)
 400323c:	dec04804 	addi	sp,sp,288
 4003240:	f800283a 	ret
 4003244:	d9002c17 	ldw	r4,176(sp)
 4003248:	40070a00 	call	40070a0 <__sinit>
 400324c:	003f0406 	br	4002e60 <__alt_data_end+0xfc002e60>
 4003250:	d8802d17 	ldw	r2,180(sp)
 4003254:	d9002d17 	ldw	r4,180(sp)
 4003258:	10800017 	ldw	r2,0(r2)
 400325c:	d8803115 	stw	r2,196(sp)
 4003260:	20800104 	addi	r2,r4,4
 4003264:	d9003117 	ldw	r4,196(sp)
 4003268:	203fa716 	blt	r4,zero,4003108 <__alt_data_end+0xfc003108>
 400326c:	d8802d15 	stw	r2,180(sp)
 4003270:	ac400007 	ldb	r17,0(r21)
 4003274:	003f4206 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003278:	ac400007 	ldb	r17,0(r21)
 400327c:	aac00044 	addi	r11,r21,1
 4003280:	8a872826 	beq	r17,r10,4004f24 <___vfprintf_internal_r+0x2128>
 4003284:	88bff404 	addi	r2,r17,-48
 4003288:	0009883a 	mov	r4,zero
 400328c:	30867d36 	bltu	r6,r2,4004c84 <___vfprintf_internal_r+0x1e88>
 4003290:	5c400007 	ldb	r17,0(r11)
 4003294:	210002a4 	muli	r4,r4,10
 4003298:	5d400044 	addi	r21,r11,1
 400329c:	a817883a 	mov	r11,r21
 40032a0:	2089883a 	add	r4,r4,r2
 40032a4:	88bff404 	addi	r2,r17,-48
 40032a8:	30bff92e 	bgeu	r6,r2,4003290 <__alt_data_end+0xfc003290>
 40032ac:	2005c916 	blt	r4,zero,40049d4 <___vfprintf_internal_r+0x1bd8>
 40032b0:	d9002915 	stw	r4,164(sp)
 40032b4:	003f3306 	br	4002f84 <__alt_data_end+0xfc002f84>
 40032b8:	94802014 	ori	r18,r18,128
 40032bc:	ac400007 	ldb	r17,0(r21)
 40032c0:	003f2f06 	br	4002f80 <__alt_data_end+0xfc002f80>
 40032c4:	a809883a 	mov	r4,r21
 40032c8:	d8003115 	stw	zero,196(sp)
 40032cc:	88bff404 	addi	r2,r17,-48
 40032d0:	0017883a 	mov	r11,zero
 40032d4:	24400007 	ldb	r17,0(r4)
 40032d8:	5ac002a4 	muli	r11,r11,10
 40032dc:	ad400044 	addi	r21,r21,1
 40032e0:	a809883a 	mov	r4,r21
 40032e4:	12d7883a 	add	r11,r2,r11
 40032e8:	88bff404 	addi	r2,r17,-48
 40032ec:	30bff92e 	bgeu	r6,r2,40032d4 <__alt_data_end+0xfc0032d4>
 40032f0:	dac03115 	stw	r11,196(sp)
 40032f4:	003f2306 	br	4002f84 <__alt_data_end+0xfc002f84>
 40032f8:	18c03fcc 	andi	r3,r3,255
 40032fc:	18072b1e 	bne	r3,zero,4004fac <___vfprintf_internal_r+0x21b0>
 4003300:	94800414 	ori	r18,r18,16
 4003304:	9080080c 	andi	r2,r18,32
 4003308:	10037b26 	beq	r2,zero,40040f8 <___vfprintf_internal_r+0x12fc>
 400330c:	d9402d17 	ldw	r5,180(sp)
 4003310:	28800117 	ldw	r2,4(r5)
 4003314:	2cc00017 	ldw	r19,0(r5)
 4003318:	29400204 	addi	r5,r5,8
 400331c:	d9402d15 	stw	r5,180(sp)
 4003320:	102d883a 	mov	r22,r2
 4003324:	10044b16 	blt	r2,zero,4004454 <___vfprintf_internal_r+0x1658>
 4003328:	d9402917 	ldw	r5,164(sp)
 400332c:	df002783 	ldbu	fp,158(sp)
 4003330:	2803bc16 	blt	r5,zero,4004224 <___vfprintf_internal_r+0x1428>
 4003334:	00ffdfc4 	movi	r3,-129
 4003338:	9d84b03a 	or	r2,r19,r22
 400333c:	90e4703a 	and	r18,r18,r3
 4003340:	10017726 	beq	r2,zero,4003920 <___vfprintf_internal_r+0xb24>
 4003344:	b0038326 	beq	r22,zero,4004154 <___vfprintf_internal_r+0x1358>
 4003348:	dc402a15 	stw	r17,168(sp)
 400334c:	dc001e04 	addi	r16,sp,120
 4003350:	b023883a 	mov	r17,r22
 4003354:	402d883a 	mov	r22,r8
 4003358:	9809883a 	mov	r4,r19
 400335c:	880b883a 	mov	r5,r17
 4003360:	01800284 	movi	r6,10
 4003364:	000f883a 	mov	r7,zero
 4003368:	400c7f00 	call	400c7f0 <__umoddi3>
 400336c:	10800c04 	addi	r2,r2,48
 4003370:	843fffc4 	addi	r16,r16,-1
 4003374:	9809883a 	mov	r4,r19
 4003378:	880b883a 	mov	r5,r17
 400337c:	80800005 	stb	r2,0(r16)
 4003380:	01800284 	movi	r6,10
 4003384:	000f883a 	mov	r7,zero
 4003388:	400c2780 	call	400c278 <__udivdi3>
 400338c:	1027883a 	mov	r19,r2
 4003390:	10c4b03a 	or	r2,r2,r3
 4003394:	1823883a 	mov	r17,r3
 4003398:	103fef1e 	bne	r2,zero,4003358 <__alt_data_end+0xfc003358>
 400339c:	d8c02817 	ldw	r3,160(sp)
 40033a0:	dc402a17 	ldw	r17,168(sp)
 40033a4:	b011883a 	mov	r8,r22
 40033a8:	1c07c83a 	sub	r3,r3,r16
 40033ac:	d8c02e15 	stw	r3,184(sp)
 40033b0:	00005906 	br	4003518 <___vfprintf_internal_r+0x71c>
 40033b4:	18c03fcc 	andi	r3,r3,255
 40033b8:	1806fa1e 	bne	r3,zero,4004fa4 <___vfprintf_internal_r+0x21a8>
 40033bc:	9080020c 	andi	r2,r18,8
 40033c0:	10048a26 	beq	r2,zero,40045ec <___vfprintf_internal_r+0x17f0>
 40033c4:	d8c02d17 	ldw	r3,180(sp)
 40033c8:	d9002d17 	ldw	r4,180(sp)
 40033cc:	d9402d17 	ldw	r5,180(sp)
 40033d0:	18c00017 	ldw	r3,0(r3)
 40033d4:	21000117 	ldw	r4,4(r4)
 40033d8:	29400204 	addi	r5,r5,8
 40033dc:	d8c03615 	stw	r3,216(sp)
 40033e0:	d9003815 	stw	r4,224(sp)
 40033e4:	d9402d15 	stw	r5,180(sp)
 40033e8:	d9003617 	ldw	r4,216(sp)
 40033ec:	d9403817 	ldw	r5,224(sp)
 40033f0:	da003d15 	stw	r8,244(sp)
 40033f4:	04000044 	movi	r16,1
 40033f8:	400a01c0 	call	400a01c <__fpclassifyd>
 40033fc:	da003d17 	ldw	r8,244(sp)
 4003400:	14041f1e 	bne	r2,r16,4004480 <___vfprintf_internal_r+0x1684>
 4003404:	d9003617 	ldw	r4,216(sp)
 4003408:	d9403817 	ldw	r5,224(sp)
 400340c:	000d883a 	mov	r6,zero
 4003410:	000f883a 	mov	r7,zero
 4003414:	400e0200 	call	400e020 <__ledf2>
 4003418:	da003d17 	ldw	r8,244(sp)
 400341c:	1005be16 	blt	r2,zero,4004b18 <___vfprintf_internal_r+0x1d1c>
 4003420:	df002783 	ldbu	fp,158(sp)
 4003424:	008011c4 	movi	r2,71
 4003428:	1445330e 	bge	r2,r17,40048f8 <___vfprintf_internal_r+0x1afc>
 400342c:	040100f4 	movhi	r16,1027
 4003430:	840b5f04 	addi	r16,r16,11644
 4003434:	00c000c4 	movi	r3,3
 4003438:	00bfdfc4 	movi	r2,-129
 400343c:	d8c02a15 	stw	r3,168(sp)
 4003440:	90a4703a 	and	r18,r18,r2
 4003444:	d8c02e15 	stw	r3,184(sp)
 4003448:	d8002915 	stw	zero,164(sp)
 400344c:	d8003215 	stw	zero,200(sp)
 4003450:	00003706 	br	4003530 <___vfprintf_internal_r+0x734>
 4003454:	94800214 	ori	r18,r18,8
 4003458:	ac400007 	ldb	r17,0(r21)
 400345c:	003ec806 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003460:	18c03fcc 	andi	r3,r3,255
 4003464:	1806db1e 	bne	r3,zero,4004fd4 <___vfprintf_internal_r+0x21d8>
 4003468:	94800414 	ori	r18,r18,16
 400346c:	9080080c 	andi	r2,r18,32
 4003470:	1002d826 	beq	r2,zero,4003fd4 <___vfprintf_internal_r+0x11d8>
 4003474:	d9402d17 	ldw	r5,180(sp)
 4003478:	d8c02917 	ldw	r3,164(sp)
 400347c:	d8002785 	stb	zero,158(sp)
 4003480:	28800204 	addi	r2,r5,8
 4003484:	2cc00017 	ldw	r19,0(r5)
 4003488:	2d800117 	ldw	r22,4(r5)
 400348c:	18048f16 	blt	r3,zero,40046cc <___vfprintf_internal_r+0x18d0>
 4003490:	013fdfc4 	movi	r4,-129
 4003494:	9d86b03a 	or	r3,r19,r22
 4003498:	d8802d15 	stw	r2,180(sp)
 400349c:	9124703a 	and	r18,r18,r4
 40034a0:	1802d91e 	bne	r3,zero,4004008 <___vfprintf_internal_r+0x120c>
 40034a4:	d8c02917 	ldw	r3,164(sp)
 40034a8:	0039883a 	mov	fp,zero
 40034ac:	1805c326 	beq	r3,zero,4004bbc <___vfprintf_internal_r+0x1dc0>
 40034b0:	0027883a 	mov	r19,zero
 40034b4:	002d883a 	mov	r22,zero
 40034b8:	dc001e04 	addi	r16,sp,120
 40034bc:	9806d0fa 	srli	r3,r19,3
 40034c0:	b008977a 	slli	r4,r22,29
 40034c4:	b02cd0fa 	srli	r22,r22,3
 40034c8:	9cc001cc 	andi	r19,r19,7
 40034cc:	98800c04 	addi	r2,r19,48
 40034d0:	843fffc4 	addi	r16,r16,-1
 40034d4:	20e6b03a 	or	r19,r4,r3
 40034d8:	80800005 	stb	r2,0(r16)
 40034dc:	9d86b03a 	or	r3,r19,r22
 40034e0:	183ff61e 	bne	r3,zero,40034bc <__alt_data_end+0xfc0034bc>
 40034e4:	90c0004c 	andi	r3,r18,1
 40034e8:	18013b26 	beq	r3,zero,40039d8 <___vfprintf_internal_r+0xbdc>
 40034ec:	10803fcc 	andi	r2,r2,255
 40034f0:	1080201c 	xori	r2,r2,128
 40034f4:	10bfe004 	addi	r2,r2,-128
 40034f8:	00c00c04 	movi	r3,48
 40034fc:	10c13626 	beq	r2,r3,40039d8 <___vfprintf_internal_r+0xbdc>
 4003500:	80ffffc5 	stb	r3,-1(r16)
 4003504:	d8c02817 	ldw	r3,160(sp)
 4003508:	80bfffc4 	addi	r2,r16,-1
 400350c:	1021883a 	mov	r16,r2
 4003510:	1887c83a 	sub	r3,r3,r2
 4003514:	d8c02e15 	stw	r3,184(sp)
 4003518:	d8802e17 	ldw	r2,184(sp)
 400351c:	d9002917 	ldw	r4,164(sp)
 4003520:	1100010e 	bge	r2,r4,4003528 <___vfprintf_internal_r+0x72c>
 4003524:	2005883a 	mov	r2,r4
 4003528:	d8802a15 	stw	r2,168(sp)
 400352c:	d8003215 	stw	zero,200(sp)
 4003530:	e7003fcc 	andi	fp,fp,255
 4003534:	e700201c 	xori	fp,fp,128
 4003538:	e73fe004 	addi	fp,fp,-128
 400353c:	e0000326 	beq	fp,zero,400354c <___vfprintf_internal_r+0x750>
 4003540:	d8c02a17 	ldw	r3,168(sp)
 4003544:	18c00044 	addi	r3,r3,1
 4003548:	d8c02a15 	stw	r3,168(sp)
 400354c:	90c0008c 	andi	r3,r18,2
 4003550:	d8c02b15 	stw	r3,172(sp)
 4003554:	18000326 	beq	r3,zero,4003564 <___vfprintf_internal_r+0x768>
 4003558:	d8c02a17 	ldw	r3,168(sp)
 400355c:	18c00084 	addi	r3,r3,2
 4003560:	d8c02a15 	stw	r3,168(sp)
 4003564:	90c0210c 	andi	r3,r18,132
 4003568:	d8c03015 	stw	r3,192(sp)
 400356c:	1801a31e 	bne	r3,zero,4003bfc <___vfprintf_internal_r+0xe00>
 4003570:	d9003117 	ldw	r4,196(sp)
 4003574:	d8c02a17 	ldw	r3,168(sp)
 4003578:	20e7c83a 	sub	r19,r4,r3
 400357c:	04c19f0e 	bge	zero,r19,4003bfc <___vfprintf_internal_r+0xe00>
 4003580:	02400404 	movi	r9,16
 4003584:	d8c02017 	ldw	r3,128(sp)
 4003588:	d8801f17 	ldw	r2,124(sp)
 400358c:	4cc50d0e 	bge	r9,r19,40049c4 <___vfprintf_internal_r+0x1bc8>
 4003590:	014100f4 	movhi	r5,1027
 4003594:	294b7284 	addi	r5,r5,11722
 4003598:	dc403b15 	stw	r17,236(sp)
 400359c:	d9403515 	stw	r5,212(sp)
 40035a0:	9823883a 	mov	r17,r19
 40035a4:	482d883a 	mov	r22,r9
 40035a8:	9027883a 	mov	r19,r18
 40035ac:	070001c4 	movi	fp,7
 40035b0:	8025883a 	mov	r18,r16
 40035b4:	dc002c17 	ldw	r16,176(sp)
 40035b8:	00000306 	br	40035c8 <___vfprintf_internal_r+0x7cc>
 40035bc:	8c7ffc04 	addi	r17,r17,-16
 40035c0:	42000204 	addi	r8,r8,8
 40035c4:	b440130e 	bge	r22,r17,4003614 <___vfprintf_internal_r+0x818>
 40035c8:	010100f4 	movhi	r4,1027
 40035cc:	18c00404 	addi	r3,r3,16
 40035d0:	10800044 	addi	r2,r2,1
 40035d4:	210b7284 	addi	r4,r4,11722
 40035d8:	41000015 	stw	r4,0(r8)
 40035dc:	45800115 	stw	r22,4(r8)
 40035e0:	d8c02015 	stw	r3,128(sp)
 40035e4:	d8801f15 	stw	r2,124(sp)
 40035e8:	e0bff40e 	bge	fp,r2,40035bc <__alt_data_end+0xfc0035bc>
 40035ec:	d9801e04 	addi	r6,sp,120
 40035f0:	b80b883a 	mov	r5,r23
 40035f4:	8009883a 	mov	r4,r16
 40035f8:	400a3f80 	call	400a3f8 <__sprint_r>
 40035fc:	103f011e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003600:	8c7ffc04 	addi	r17,r17,-16
 4003604:	d8c02017 	ldw	r3,128(sp)
 4003608:	d8801f17 	ldw	r2,124(sp)
 400360c:	da000404 	addi	r8,sp,16
 4003610:	b47fed16 	blt	r22,r17,40035c8 <__alt_data_end+0xfc0035c8>
 4003614:	9021883a 	mov	r16,r18
 4003618:	9825883a 	mov	r18,r19
 400361c:	8827883a 	mov	r19,r17
 4003620:	dc403b17 	ldw	r17,236(sp)
 4003624:	d9403517 	ldw	r5,212(sp)
 4003628:	98c7883a 	add	r3,r19,r3
 400362c:	10800044 	addi	r2,r2,1
 4003630:	41400015 	stw	r5,0(r8)
 4003634:	44c00115 	stw	r19,4(r8)
 4003638:	d8c02015 	stw	r3,128(sp)
 400363c:	d8801f15 	stw	r2,124(sp)
 4003640:	010001c4 	movi	r4,7
 4003644:	2082a316 	blt	r4,r2,40040d4 <___vfprintf_internal_r+0x12d8>
 4003648:	df002787 	ldb	fp,158(sp)
 400364c:	42000204 	addi	r8,r8,8
 4003650:	e0000c26 	beq	fp,zero,4003684 <___vfprintf_internal_r+0x888>
 4003654:	d8801f17 	ldw	r2,124(sp)
 4003658:	d9002784 	addi	r4,sp,158
 400365c:	18c00044 	addi	r3,r3,1
 4003660:	10800044 	addi	r2,r2,1
 4003664:	41000015 	stw	r4,0(r8)
 4003668:	01000044 	movi	r4,1
 400366c:	41000115 	stw	r4,4(r8)
 4003670:	d8c02015 	stw	r3,128(sp)
 4003674:	d8801f15 	stw	r2,124(sp)
 4003678:	010001c4 	movi	r4,7
 400367c:	20823c16 	blt	r4,r2,4003f70 <___vfprintf_internal_r+0x1174>
 4003680:	42000204 	addi	r8,r8,8
 4003684:	d8802b17 	ldw	r2,172(sp)
 4003688:	10000c26 	beq	r2,zero,40036bc <___vfprintf_internal_r+0x8c0>
 400368c:	d8801f17 	ldw	r2,124(sp)
 4003690:	d9002704 	addi	r4,sp,156
 4003694:	18c00084 	addi	r3,r3,2
 4003698:	10800044 	addi	r2,r2,1
 400369c:	41000015 	stw	r4,0(r8)
 40036a0:	01000084 	movi	r4,2
 40036a4:	41000115 	stw	r4,4(r8)
 40036a8:	d8c02015 	stw	r3,128(sp)
 40036ac:	d8801f15 	stw	r2,124(sp)
 40036b0:	010001c4 	movi	r4,7
 40036b4:	20823616 	blt	r4,r2,4003f90 <___vfprintf_internal_r+0x1194>
 40036b8:	42000204 	addi	r8,r8,8
 40036bc:	d9003017 	ldw	r4,192(sp)
 40036c0:	00802004 	movi	r2,128
 40036c4:	20819926 	beq	r4,r2,4003d2c <___vfprintf_internal_r+0xf30>
 40036c8:	d9402917 	ldw	r5,164(sp)
 40036cc:	d8802e17 	ldw	r2,184(sp)
 40036d0:	28adc83a 	sub	r22,r5,r2
 40036d4:	0580310e 	bge	zero,r22,400379c <___vfprintf_internal_r+0x9a0>
 40036d8:	07000404 	movi	fp,16
 40036dc:	d8801f17 	ldw	r2,124(sp)
 40036e0:	e584140e 	bge	fp,r22,4004734 <___vfprintf_internal_r+0x1938>
 40036e4:	014100f4 	movhi	r5,1027
 40036e8:	294b6e84 	addi	r5,r5,11706
 40036ec:	dc402915 	stw	r17,164(sp)
 40036f0:	d9402b15 	stw	r5,172(sp)
 40036f4:	b023883a 	mov	r17,r22
 40036f8:	04c001c4 	movi	r19,7
 40036fc:	a82d883a 	mov	r22,r21
 4003700:	902b883a 	mov	r21,r18
 4003704:	8025883a 	mov	r18,r16
 4003708:	dc002c17 	ldw	r16,176(sp)
 400370c:	00000306 	br	400371c <___vfprintf_internal_r+0x920>
 4003710:	8c7ffc04 	addi	r17,r17,-16
 4003714:	42000204 	addi	r8,r8,8
 4003718:	e440110e 	bge	fp,r17,4003760 <___vfprintf_internal_r+0x964>
 400371c:	18c00404 	addi	r3,r3,16
 4003720:	10800044 	addi	r2,r2,1
 4003724:	45000015 	stw	r20,0(r8)
 4003728:	47000115 	stw	fp,4(r8)
 400372c:	d8c02015 	stw	r3,128(sp)
 4003730:	d8801f15 	stw	r2,124(sp)
 4003734:	98bff60e 	bge	r19,r2,4003710 <__alt_data_end+0xfc003710>
 4003738:	d9801e04 	addi	r6,sp,120
 400373c:	b80b883a 	mov	r5,r23
 4003740:	8009883a 	mov	r4,r16
 4003744:	400a3f80 	call	400a3f8 <__sprint_r>
 4003748:	103eae1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 400374c:	8c7ffc04 	addi	r17,r17,-16
 4003750:	d8c02017 	ldw	r3,128(sp)
 4003754:	d8801f17 	ldw	r2,124(sp)
 4003758:	da000404 	addi	r8,sp,16
 400375c:	e47fef16 	blt	fp,r17,400371c <__alt_data_end+0xfc00371c>
 4003760:	9021883a 	mov	r16,r18
 4003764:	a825883a 	mov	r18,r21
 4003768:	b02b883a 	mov	r21,r22
 400376c:	882d883a 	mov	r22,r17
 4003770:	dc402917 	ldw	r17,164(sp)
 4003774:	d9002b17 	ldw	r4,172(sp)
 4003778:	1d87883a 	add	r3,r3,r22
 400377c:	10800044 	addi	r2,r2,1
 4003780:	41000015 	stw	r4,0(r8)
 4003784:	45800115 	stw	r22,4(r8)
 4003788:	d8c02015 	stw	r3,128(sp)
 400378c:	d8801f15 	stw	r2,124(sp)
 4003790:	010001c4 	movi	r4,7
 4003794:	2081ee16 	blt	r4,r2,4003f50 <___vfprintf_internal_r+0x1154>
 4003798:	42000204 	addi	r8,r8,8
 400379c:	9080400c 	andi	r2,r18,256
 40037a0:	1001181e 	bne	r2,zero,4003c04 <___vfprintf_internal_r+0xe08>
 40037a4:	d9402e17 	ldw	r5,184(sp)
 40037a8:	d8801f17 	ldw	r2,124(sp)
 40037ac:	44000015 	stw	r16,0(r8)
 40037b0:	1947883a 	add	r3,r3,r5
 40037b4:	10800044 	addi	r2,r2,1
 40037b8:	41400115 	stw	r5,4(r8)
 40037bc:	d8c02015 	stw	r3,128(sp)
 40037c0:	d8801f15 	stw	r2,124(sp)
 40037c4:	010001c4 	movi	r4,7
 40037c8:	2081d316 	blt	r4,r2,4003f18 <___vfprintf_internal_r+0x111c>
 40037cc:	42000204 	addi	r8,r8,8
 40037d0:	9480010c 	andi	r18,r18,4
 40037d4:	90003226 	beq	r18,zero,40038a0 <___vfprintf_internal_r+0xaa4>
 40037d8:	d9403117 	ldw	r5,196(sp)
 40037dc:	d8802a17 	ldw	r2,168(sp)
 40037e0:	28a1c83a 	sub	r16,r5,r2
 40037e4:	04002e0e 	bge	zero,r16,40038a0 <___vfprintf_internal_r+0xaa4>
 40037e8:	04400404 	movi	r17,16
 40037ec:	d8801f17 	ldw	r2,124(sp)
 40037f0:	8c04a20e 	bge	r17,r16,4004a7c <___vfprintf_internal_r+0x1c80>
 40037f4:	014100f4 	movhi	r5,1027
 40037f8:	294b7284 	addi	r5,r5,11722
 40037fc:	d9403515 	stw	r5,212(sp)
 4003800:	048001c4 	movi	r18,7
 4003804:	dcc02c17 	ldw	r19,176(sp)
 4003808:	00000306 	br	4003818 <___vfprintf_internal_r+0xa1c>
 400380c:	843ffc04 	addi	r16,r16,-16
 4003810:	42000204 	addi	r8,r8,8
 4003814:	8c00130e 	bge	r17,r16,4003864 <___vfprintf_internal_r+0xa68>
 4003818:	010100f4 	movhi	r4,1027
 400381c:	18c00404 	addi	r3,r3,16
 4003820:	10800044 	addi	r2,r2,1
 4003824:	210b7284 	addi	r4,r4,11722
 4003828:	41000015 	stw	r4,0(r8)
 400382c:	44400115 	stw	r17,4(r8)
 4003830:	d8c02015 	stw	r3,128(sp)
 4003834:	d8801f15 	stw	r2,124(sp)
 4003838:	90bff40e 	bge	r18,r2,400380c <__alt_data_end+0xfc00380c>
 400383c:	d9801e04 	addi	r6,sp,120
 4003840:	b80b883a 	mov	r5,r23
 4003844:	9809883a 	mov	r4,r19
 4003848:	400a3f80 	call	400a3f8 <__sprint_r>
 400384c:	103e6d1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003850:	843ffc04 	addi	r16,r16,-16
 4003854:	d8c02017 	ldw	r3,128(sp)
 4003858:	d8801f17 	ldw	r2,124(sp)
 400385c:	da000404 	addi	r8,sp,16
 4003860:	8c3fed16 	blt	r17,r16,4003818 <__alt_data_end+0xfc003818>
 4003864:	d9403517 	ldw	r5,212(sp)
 4003868:	1c07883a 	add	r3,r3,r16
 400386c:	10800044 	addi	r2,r2,1
 4003870:	41400015 	stw	r5,0(r8)
 4003874:	44000115 	stw	r16,4(r8)
 4003878:	d8c02015 	stw	r3,128(sp)
 400387c:	d8801f15 	stw	r2,124(sp)
 4003880:	010001c4 	movi	r4,7
 4003884:	2080060e 	bge	r4,r2,40038a0 <___vfprintf_internal_r+0xaa4>
 4003888:	d9002c17 	ldw	r4,176(sp)
 400388c:	d9801e04 	addi	r6,sp,120
 4003890:	b80b883a 	mov	r5,r23
 4003894:	400a3f80 	call	400a3f8 <__sprint_r>
 4003898:	103e5a1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 400389c:	d8c02017 	ldw	r3,128(sp)
 40038a0:	d8803117 	ldw	r2,196(sp)
 40038a4:	d9002a17 	ldw	r4,168(sp)
 40038a8:	1100010e 	bge	r2,r4,40038b0 <___vfprintf_internal_r+0xab4>
 40038ac:	2005883a 	mov	r2,r4
 40038b0:	d9402f17 	ldw	r5,188(sp)
 40038b4:	288b883a 	add	r5,r5,r2
 40038b8:	d9402f15 	stw	r5,188(sp)
 40038bc:	18019e1e 	bne	r3,zero,4003f38 <___vfprintf_internal_r+0x113c>
 40038c0:	a8800007 	ldb	r2,0(r21)
 40038c4:	d8001f15 	stw	zero,124(sp)
 40038c8:	da000404 	addi	r8,sp,16
 40038cc:	103d851e 	bne	r2,zero,4002ee4 <__alt_data_end+0xfc002ee4>
 40038d0:	a821883a 	mov	r16,r21
 40038d4:	003d9b06 	br	4002f44 <__alt_data_end+0xfc002f44>
 40038d8:	18c03fcc 	andi	r3,r3,255
 40038dc:	1805c11e 	bne	r3,zero,4004fe4 <___vfprintf_internal_r+0x21e8>
 40038e0:	94800414 	ori	r18,r18,16
 40038e4:	9080080c 	andi	r2,r18,32
 40038e8:	10020c26 	beq	r2,zero,400411c <___vfprintf_internal_r+0x1320>
 40038ec:	d8802d17 	ldw	r2,180(sp)
 40038f0:	d9002917 	ldw	r4,164(sp)
 40038f4:	d8002785 	stb	zero,158(sp)
 40038f8:	10c00204 	addi	r3,r2,8
 40038fc:	14c00017 	ldw	r19,0(r2)
 4003900:	15800117 	ldw	r22,4(r2)
 4003904:	20040f16 	blt	r4,zero,4004944 <___vfprintf_internal_r+0x1b48>
 4003908:	013fdfc4 	movi	r4,-129
 400390c:	9d84b03a 	or	r2,r19,r22
 4003910:	d8c02d15 	stw	r3,180(sp)
 4003914:	9124703a 	and	r18,r18,r4
 4003918:	0039883a 	mov	fp,zero
 400391c:	103e891e 	bne	r2,zero,4003344 <__alt_data_end+0xfc003344>
 4003920:	d9002917 	ldw	r4,164(sp)
 4003924:	2002c11e 	bne	r4,zero,400442c <___vfprintf_internal_r+0x1630>
 4003928:	d8002915 	stw	zero,164(sp)
 400392c:	d8002e15 	stw	zero,184(sp)
 4003930:	dc001e04 	addi	r16,sp,120
 4003934:	003ef806 	br	4003518 <__alt_data_end+0xfc003518>
 4003938:	18c03fcc 	andi	r3,r3,255
 400393c:	18059d1e 	bne	r3,zero,4004fb4 <___vfprintf_internal_r+0x21b8>
 4003940:	014100f4 	movhi	r5,1027
 4003944:	294b6204 	addi	r5,r5,11656
 4003948:	d9403915 	stw	r5,228(sp)
 400394c:	9080080c 	andi	r2,r18,32
 4003950:	10005226 	beq	r2,zero,4003a9c <___vfprintf_internal_r+0xca0>
 4003954:	d8802d17 	ldw	r2,180(sp)
 4003958:	14c00017 	ldw	r19,0(r2)
 400395c:	15800117 	ldw	r22,4(r2)
 4003960:	10800204 	addi	r2,r2,8
 4003964:	d8802d15 	stw	r2,180(sp)
 4003968:	9080004c 	andi	r2,r18,1
 400396c:	10019026 	beq	r2,zero,4003fb0 <___vfprintf_internal_r+0x11b4>
 4003970:	9d84b03a 	or	r2,r19,r22
 4003974:	10036926 	beq	r2,zero,400471c <___vfprintf_internal_r+0x1920>
 4003978:	d8c02917 	ldw	r3,164(sp)
 400397c:	00800c04 	movi	r2,48
 4003980:	d8802705 	stb	r2,156(sp)
 4003984:	dc402745 	stb	r17,157(sp)
 4003988:	d8002785 	stb	zero,158(sp)
 400398c:	90800094 	ori	r2,r18,2
 4003990:	18045d16 	blt	r3,zero,4004b08 <___vfprintf_internal_r+0x1d0c>
 4003994:	00bfdfc4 	movi	r2,-129
 4003998:	90a4703a 	and	r18,r18,r2
 400399c:	94800094 	ori	r18,r18,2
 40039a0:	0039883a 	mov	fp,zero
 40039a4:	d9003917 	ldw	r4,228(sp)
 40039a8:	dc001e04 	addi	r16,sp,120
 40039ac:	988003cc 	andi	r2,r19,15
 40039b0:	b006973a 	slli	r3,r22,28
 40039b4:	2085883a 	add	r2,r4,r2
 40039b8:	9826d13a 	srli	r19,r19,4
 40039bc:	10800003 	ldbu	r2,0(r2)
 40039c0:	b02cd13a 	srli	r22,r22,4
 40039c4:	843fffc4 	addi	r16,r16,-1
 40039c8:	1ce6b03a 	or	r19,r3,r19
 40039cc:	80800005 	stb	r2,0(r16)
 40039d0:	9d84b03a 	or	r2,r19,r22
 40039d4:	103ff51e 	bne	r2,zero,40039ac <__alt_data_end+0xfc0039ac>
 40039d8:	d8c02817 	ldw	r3,160(sp)
 40039dc:	1c07c83a 	sub	r3,r3,r16
 40039e0:	d8c02e15 	stw	r3,184(sp)
 40039e4:	003ecc06 	br	4003518 <__alt_data_end+0xfc003518>
 40039e8:	18c03fcc 	andi	r3,r3,255
 40039ec:	183e9f26 	beq	r3,zero,400346c <__alt_data_end+0xfc00346c>
 40039f0:	d9c02785 	stb	r7,158(sp)
 40039f4:	003e9d06 	br	400346c <__alt_data_end+0xfc00346c>
 40039f8:	00c00044 	movi	r3,1
 40039fc:	01c00ac4 	movi	r7,43
 4003a00:	ac400007 	ldb	r17,0(r21)
 4003a04:	003d5e06 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003a08:	94800814 	ori	r18,r18,32
 4003a0c:	ac400007 	ldb	r17,0(r21)
 4003a10:	003d5b06 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003a14:	d8c02d17 	ldw	r3,180(sp)
 4003a18:	d8002785 	stb	zero,158(sp)
 4003a1c:	1c000017 	ldw	r16,0(r3)
 4003a20:	1cc00104 	addi	r19,r3,4
 4003a24:	80041926 	beq	r16,zero,4004a8c <___vfprintf_internal_r+0x1c90>
 4003a28:	d9002917 	ldw	r4,164(sp)
 4003a2c:	2003d016 	blt	r4,zero,4004970 <___vfprintf_internal_r+0x1b74>
 4003a30:	200d883a 	mov	r6,r4
 4003a34:	000b883a 	mov	r5,zero
 4003a38:	8009883a 	mov	r4,r16
 4003a3c:	da003d15 	stw	r8,244(sp)
 4003a40:	400860c0 	call	400860c <memchr>
 4003a44:	da003d17 	ldw	r8,244(sp)
 4003a48:	10045426 	beq	r2,zero,4004b9c <___vfprintf_internal_r+0x1da0>
 4003a4c:	1405c83a 	sub	r2,r2,r16
 4003a50:	d8802e15 	stw	r2,184(sp)
 4003a54:	1003cc16 	blt	r2,zero,4004988 <___vfprintf_internal_r+0x1b8c>
 4003a58:	df002783 	ldbu	fp,158(sp)
 4003a5c:	d8802a15 	stw	r2,168(sp)
 4003a60:	dcc02d15 	stw	r19,180(sp)
 4003a64:	d8002915 	stw	zero,164(sp)
 4003a68:	d8003215 	stw	zero,200(sp)
 4003a6c:	003eb006 	br	4003530 <__alt_data_end+0xfc003530>
 4003a70:	18c03fcc 	andi	r3,r3,255
 4003a74:	183f9b26 	beq	r3,zero,40038e4 <__alt_data_end+0xfc0038e4>
 4003a78:	d9c02785 	stb	r7,158(sp)
 4003a7c:	003f9906 	br	40038e4 <__alt_data_end+0xfc0038e4>
 4003a80:	18c03fcc 	andi	r3,r3,255
 4003a84:	1805551e 	bne	r3,zero,4004fdc <___vfprintf_internal_r+0x21e0>
 4003a88:	014100f4 	movhi	r5,1027
 4003a8c:	294b6704 	addi	r5,r5,11676
 4003a90:	d9403915 	stw	r5,228(sp)
 4003a94:	9080080c 	andi	r2,r18,32
 4003a98:	103fae1e 	bne	r2,zero,4003954 <__alt_data_end+0xfc003954>
 4003a9c:	9080040c 	andi	r2,r18,16
 4003aa0:	1002de26 	beq	r2,zero,400461c <___vfprintf_internal_r+0x1820>
 4003aa4:	d8c02d17 	ldw	r3,180(sp)
 4003aa8:	002d883a 	mov	r22,zero
 4003aac:	1cc00017 	ldw	r19,0(r3)
 4003ab0:	18c00104 	addi	r3,r3,4
 4003ab4:	d8c02d15 	stw	r3,180(sp)
 4003ab8:	003fab06 	br	4003968 <__alt_data_end+0xfc003968>
 4003abc:	38803fcc 	andi	r2,r7,255
 4003ac0:	1080201c 	xori	r2,r2,128
 4003ac4:	10bfe004 	addi	r2,r2,-128
 4003ac8:	1002d21e 	bne	r2,zero,4004614 <___vfprintf_internal_r+0x1818>
 4003acc:	00c00044 	movi	r3,1
 4003ad0:	01c00804 	movi	r7,32
 4003ad4:	ac400007 	ldb	r17,0(r21)
 4003ad8:	003d2906 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003adc:	94800054 	ori	r18,r18,1
 4003ae0:	ac400007 	ldb	r17,0(r21)
 4003ae4:	003d2606 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003ae8:	18c03fcc 	andi	r3,r3,255
 4003aec:	183e0526 	beq	r3,zero,4003304 <__alt_data_end+0xfc003304>
 4003af0:	d9c02785 	stb	r7,158(sp)
 4003af4:	003e0306 	br	4003304 <__alt_data_end+0xfc003304>
 4003af8:	94801014 	ori	r18,r18,64
 4003afc:	ac400007 	ldb	r17,0(r21)
 4003b00:	003d1f06 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003b04:	ac400007 	ldb	r17,0(r21)
 4003b08:	8a438726 	beq	r17,r9,4004928 <___vfprintf_internal_r+0x1b2c>
 4003b0c:	94800414 	ori	r18,r18,16
 4003b10:	003d1b06 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003b14:	18c03fcc 	andi	r3,r3,255
 4003b18:	1805341e 	bne	r3,zero,4004fec <___vfprintf_internal_r+0x21f0>
 4003b1c:	9080080c 	andi	r2,r18,32
 4003b20:	1002cd26 	beq	r2,zero,4004658 <___vfprintf_internal_r+0x185c>
 4003b24:	d9402d17 	ldw	r5,180(sp)
 4003b28:	d9002f17 	ldw	r4,188(sp)
 4003b2c:	28800017 	ldw	r2,0(r5)
 4003b30:	2007d7fa 	srai	r3,r4,31
 4003b34:	29400104 	addi	r5,r5,4
 4003b38:	d9402d15 	stw	r5,180(sp)
 4003b3c:	11000015 	stw	r4,0(r2)
 4003b40:	10c00115 	stw	r3,4(r2)
 4003b44:	003ce506 	br	4002edc <__alt_data_end+0xfc002edc>
 4003b48:	d8c02d17 	ldw	r3,180(sp)
 4003b4c:	d9002d17 	ldw	r4,180(sp)
 4003b50:	d8002785 	stb	zero,158(sp)
 4003b54:	18800017 	ldw	r2,0(r3)
 4003b58:	21000104 	addi	r4,r4,4
 4003b5c:	00c00044 	movi	r3,1
 4003b60:	d8c02a15 	stw	r3,168(sp)
 4003b64:	d8801405 	stb	r2,80(sp)
 4003b68:	d9002d15 	stw	r4,180(sp)
 4003b6c:	d8c02e15 	stw	r3,184(sp)
 4003b70:	d8002915 	stw	zero,164(sp)
 4003b74:	d8003215 	stw	zero,200(sp)
 4003b78:	dc001404 	addi	r16,sp,80
 4003b7c:	0039883a 	mov	fp,zero
 4003b80:	003e7206 	br	400354c <__alt_data_end+0xfc00354c>
 4003b84:	010100f4 	movhi	r4,1027
 4003b88:	210b6704 	addi	r4,r4,11676
 4003b8c:	0039883a 	mov	fp,zero
 4003b90:	d9003915 	stw	r4,228(sp)
 4003b94:	04401e04 	movi	r17,120
 4003b98:	003f8206 	br	40039a4 <__alt_data_end+0xfc0039a4>
 4003b9c:	18c03fcc 	andi	r3,r3,255
 4003ba0:	1805061e 	bne	r3,zero,4004fbc <___vfprintf_internal_r+0x21c0>
 4003ba4:	883d9126 	beq	r17,zero,40031ec <__alt_data_end+0xfc0031ec>
 4003ba8:	00c00044 	movi	r3,1
 4003bac:	d8c02a15 	stw	r3,168(sp)
 4003bb0:	dc401405 	stb	r17,80(sp)
 4003bb4:	d8002785 	stb	zero,158(sp)
 4003bb8:	003fec06 	br	4003b6c <__alt_data_end+0xfc003b6c>
 4003bbc:	014100f4 	movhi	r5,1027
 4003bc0:	294b6704 	addi	r5,r5,11676
 4003bc4:	d9403915 	stw	r5,228(sp)
 4003bc8:	d8c02d15 	stw	r3,180(sp)
 4003bcc:	1025883a 	mov	r18,r2
 4003bd0:	04401e04 	movi	r17,120
 4003bd4:	9d84b03a 	or	r2,r19,r22
 4003bd8:	1000fc1e 	bne	r2,zero,4003fcc <___vfprintf_internal_r+0x11d0>
 4003bdc:	0039883a 	mov	fp,zero
 4003be0:	00800084 	movi	r2,2
 4003be4:	10803fcc 	andi	r2,r2,255
 4003be8:	00c00044 	movi	r3,1
 4003bec:	10c20f26 	beq	r2,r3,400442c <___vfprintf_internal_r+0x1630>
 4003bf0:	00c00084 	movi	r3,2
 4003bf4:	10fd6326 	beq	r2,r3,4003184 <__alt_data_end+0xfc003184>
 4003bf8:	003e2d06 	br	40034b0 <__alt_data_end+0xfc0034b0>
 4003bfc:	d8c02017 	ldw	r3,128(sp)
 4003c00:	003e9306 	br	4003650 <__alt_data_end+0xfc003650>
 4003c04:	00801944 	movi	r2,101
 4003c08:	14407e0e 	bge	r2,r17,4003e04 <___vfprintf_internal_r+0x1008>
 4003c0c:	d9003617 	ldw	r4,216(sp)
 4003c10:	d9403817 	ldw	r5,224(sp)
 4003c14:	000d883a 	mov	r6,zero
 4003c18:	000f883a 	mov	r7,zero
 4003c1c:	d8c03c15 	stw	r3,240(sp)
 4003c20:	da003d15 	stw	r8,244(sp)
 4003c24:	400debc0 	call	400debc <__eqdf2>
 4003c28:	d8c03c17 	ldw	r3,240(sp)
 4003c2c:	da003d17 	ldw	r8,244(sp)
 4003c30:	1000f71e 	bne	r2,zero,4004010 <___vfprintf_internal_r+0x1214>
 4003c34:	d8801f17 	ldw	r2,124(sp)
 4003c38:	010100f4 	movhi	r4,1027
 4003c3c:	210b6e04 	addi	r4,r4,11704
 4003c40:	18c00044 	addi	r3,r3,1
 4003c44:	10800044 	addi	r2,r2,1
 4003c48:	41000015 	stw	r4,0(r8)
 4003c4c:	01000044 	movi	r4,1
 4003c50:	41000115 	stw	r4,4(r8)
 4003c54:	d8c02015 	stw	r3,128(sp)
 4003c58:	d8801f15 	stw	r2,124(sp)
 4003c5c:	010001c4 	movi	r4,7
 4003c60:	2082b816 	blt	r4,r2,4004744 <___vfprintf_internal_r+0x1948>
 4003c64:	42000204 	addi	r8,r8,8
 4003c68:	d8802617 	ldw	r2,152(sp)
 4003c6c:	d9403317 	ldw	r5,204(sp)
 4003c70:	11400216 	blt	r2,r5,4003c7c <___vfprintf_internal_r+0xe80>
 4003c74:	9080004c 	andi	r2,r18,1
 4003c78:	103ed526 	beq	r2,zero,40037d0 <__alt_data_end+0xfc0037d0>
 4003c7c:	d8803717 	ldw	r2,220(sp)
 4003c80:	d9003417 	ldw	r4,208(sp)
 4003c84:	d9403717 	ldw	r5,220(sp)
 4003c88:	1887883a 	add	r3,r3,r2
 4003c8c:	d8801f17 	ldw	r2,124(sp)
 4003c90:	41000015 	stw	r4,0(r8)
 4003c94:	41400115 	stw	r5,4(r8)
 4003c98:	10800044 	addi	r2,r2,1
 4003c9c:	d8c02015 	stw	r3,128(sp)
 4003ca0:	d8801f15 	stw	r2,124(sp)
 4003ca4:	010001c4 	movi	r4,7
 4003ca8:	20832916 	blt	r4,r2,4004950 <___vfprintf_internal_r+0x1b54>
 4003cac:	42000204 	addi	r8,r8,8
 4003cb0:	d8803317 	ldw	r2,204(sp)
 4003cb4:	143fffc4 	addi	r16,r2,-1
 4003cb8:	043ec50e 	bge	zero,r16,40037d0 <__alt_data_end+0xfc0037d0>
 4003cbc:	04400404 	movi	r17,16
 4003cc0:	d8801f17 	ldw	r2,124(sp)
 4003cc4:	8c00880e 	bge	r17,r16,4003ee8 <___vfprintf_internal_r+0x10ec>
 4003cc8:	014100f4 	movhi	r5,1027
 4003ccc:	294b6e84 	addi	r5,r5,11706
 4003cd0:	d9402b15 	stw	r5,172(sp)
 4003cd4:	058001c4 	movi	r22,7
 4003cd8:	dcc02c17 	ldw	r19,176(sp)
 4003cdc:	00000306 	br	4003cec <___vfprintf_internal_r+0xef0>
 4003ce0:	42000204 	addi	r8,r8,8
 4003ce4:	843ffc04 	addi	r16,r16,-16
 4003ce8:	8c00820e 	bge	r17,r16,4003ef4 <___vfprintf_internal_r+0x10f8>
 4003cec:	18c00404 	addi	r3,r3,16
 4003cf0:	10800044 	addi	r2,r2,1
 4003cf4:	45000015 	stw	r20,0(r8)
 4003cf8:	44400115 	stw	r17,4(r8)
 4003cfc:	d8c02015 	stw	r3,128(sp)
 4003d00:	d8801f15 	stw	r2,124(sp)
 4003d04:	b0bff60e 	bge	r22,r2,4003ce0 <__alt_data_end+0xfc003ce0>
 4003d08:	d9801e04 	addi	r6,sp,120
 4003d0c:	b80b883a 	mov	r5,r23
 4003d10:	9809883a 	mov	r4,r19
 4003d14:	400a3f80 	call	400a3f8 <__sprint_r>
 4003d18:	103d3a1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003d1c:	d8c02017 	ldw	r3,128(sp)
 4003d20:	d8801f17 	ldw	r2,124(sp)
 4003d24:	da000404 	addi	r8,sp,16
 4003d28:	003fee06 	br	4003ce4 <__alt_data_end+0xfc003ce4>
 4003d2c:	d9403117 	ldw	r5,196(sp)
 4003d30:	d8802a17 	ldw	r2,168(sp)
 4003d34:	28adc83a 	sub	r22,r5,r2
 4003d38:	05be630e 	bge	zero,r22,40036c8 <__alt_data_end+0xfc0036c8>
 4003d3c:	07000404 	movi	fp,16
 4003d40:	d8801f17 	ldw	r2,124(sp)
 4003d44:	e5838f0e 	bge	fp,r22,4004b84 <___vfprintf_internal_r+0x1d88>
 4003d48:	014100f4 	movhi	r5,1027
 4003d4c:	294b6e84 	addi	r5,r5,11706
 4003d50:	dc403015 	stw	r17,192(sp)
 4003d54:	d9402b15 	stw	r5,172(sp)
 4003d58:	b023883a 	mov	r17,r22
 4003d5c:	04c001c4 	movi	r19,7
 4003d60:	a82d883a 	mov	r22,r21
 4003d64:	902b883a 	mov	r21,r18
 4003d68:	8025883a 	mov	r18,r16
 4003d6c:	dc002c17 	ldw	r16,176(sp)
 4003d70:	00000306 	br	4003d80 <___vfprintf_internal_r+0xf84>
 4003d74:	8c7ffc04 	addi	r17,r17,-16
 4003d78:	42000204 	addi	r8,r8,8
 4003d7c:	e440110e 	bge	fp,r17,4003dc4 <___vfprintf_internal_r+0xfc8>
 4003d80:	18c00404 	addi	r3,r3,16
 4003d84:	10800044 	addi	r2,r2,1
 4003d88:	45000015 	stw	r20,0(r8)
 4003d8c:	47000115 	stw	fp,4(r8)
 4003d90:	d8c02015 	stw	r3,128(sp)
 4003d94:	d8801f15 	stw	r2,124(sp)
 4003d98:	98bff60e 	bge	r19,r2,4003d74 <__alt_data_end+0xfc003d74>
 4003d9c:	d9801e04 	addi	r6,sp,120
 4003da0:	b80b883a 	mov	r5,r23
 4003da4:	8009883a 	mov	r4,r16
 4003da8:	400a3f80 	call	400a3f8 <__sprint_r>
 4003dac:	103d151e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003db0:	8c7ffc04 	addi	r17,r17,-16
 4003db4:	d8c02017 	ldw	r3,128(sp)
 4003db8:	d8801f17 	ldw	r2,124(sp)
 4003dbc:	da000404 	addi	r8,sp,16
 4003dc0:	e47fef16 	blt	fp,r17,4003d80 <__alt_data_end+0xfc003d80>
 4003dc4:	9021883a 	mov	r16,r18
 4003dc8:	a825883a 	mov	r18,r21
 4003dcc:	b02b883a 	mov	r21,r22
 4003dd0:	882d883a 	mov	r22,r17
 4003dd4:	dc403017 	ldw	r17,192(sp)
 4003dd8:	d9002b17 	ldw	r4,172(sp)
 4003ddc:	1d87883a 	add	r3,r3,r22
 4003de0:	10800044 	addi	r2,r2,1
 4003de4:	41000015 	stw	r4,0(r8)
 4003de8:	45800115 	stw	r22,4(r8)
 4003dec:	d8c02015 	stw	r3,128(sp)
 4003df0:	d8801f15 	stw	r2,124(sp)
 4003df4:	010001c4 	movi	r4,7
 4003df8:	20818e16 	blt	r4,r2,4004434 <___vfprintf_internal_r+0x1638>
 4003dfc:	42000204 	addi	r8,r8,8
 4003e00:	003e3106 	br	40036c8 <__alt_data_end+0xfc0036c8>
 4003e04:	d9403317 	ldw	r5,204(sp)
 4003e08:	00800044 	movi	r2,1
 4003e0c:	18c00044 	addi	r3,r3,1
 4003e10:	1141530e 	bge	r2,r5,4004360 <___vfprintf_internal_r+0x1564>
 4003e14:	dc401f17 	ldw	r17,124(sp)
 4003e18:	00800044 	movi	r2,1
 4003e1c:	40800115 	stw	r2,4(r8)
 4003e20:	8c400044 	addi	r17,r17,1
 4003e24:	44000015 	stw	r16,0(r8)
 4003e28:	d8c02015 	stw	r3,128(sp)
 4003e2c:	dc401f15 	stw	r17,124(sp)
 4003e30:	008001c4 	movi	r2,7
 4003e34:	14416b16 	blt	r2,r17,40043e4 <___vfprintf_internal_r+0x15e8>
 4003e38:	42000204 	addi	r8,r8,8
 4003e3c:	d8803717 	ldw	r2,220(sp)
 4003e40:	d9003417 	ldw	r4,208(sp)
 4003e44:	8c400044 	addi	r17,r17,1
 4003e48:	10c7883a 	add	r3,r2,r3
 4003e4c:	40800115 	stw	r2,4(r8)
 4003e50:	41000015 	stw	r4,0(r8)
 4003e54:	d8c02015 	stw	r3,128(sp)
 4003e58:	dc401f15 	stw	r17,124(sp)
 4003e5c:	008001c4 	movi	r2,7
 4003e60:	14416916 	blt	r2,r17,4004408 <___vfprintf_internal_r+0x160c>
 4003e64:	45800204 	addi	r22,r8,8
 4003e68:	d9003617 	ldw	r4,216(sp)
 4003e6c:	d9403817 	ldw	r5,224(sp)
 4003e70:	000d883a 	mov	r6,zero
 4003e74:	000f883a 	mov	r7,zero
 4003e78:	d8c03c15 	stw	r3,240(sp)
 4003e7c:	400debc0 	call	400debc <__eqdf2>
 4003e80:	d8c03c17 	ldw	r3,240(sp)
 4003e84:	1000bc26 	beq	r2,zero,4004178 <___vfprintf_internal_r+0x137c>
 4003e88:	d9403317 	ldw	r5,204(sp)
 4003e8c:	84000044 	addi	r16,r16,1
 4003e90:	8c400044 	addi	r17,r17,1
 4003e94:	28bfffc4 	addi	r2,r5,-1
 4003e98:	1887883a 	add	r3,r3,r2
 4003e9c:	b0800115 	stw	r2,4(r22)
 4003ea0:	b4000015 	stw	r16,0(r22)
 4003ea4:	d8c02015 	stw	r3,128(sp)
 4003ea8:	dc401f15 	stw	r17,124(sp)
 4003eac:	008001c4 	movi	r2,7
 4003eb0:	14414316 	blt	r2,r17,40043c0 <___vfprintf_internal_r+0x15c4>
 4003eb4:	b5800204 	addi	r22,r22,8
 4003eb8:	d9003a17 	ldw	r4,232(sp)
 4003ebc:	df0022c4 	addi	fp,sp,139
 4003ec0:	8c400044 	addi	r17,r17,1
 4003ec4:	20c7883a 	add	r3,r4,r3
 4003ec8:	b7000015 	stw	fp,0(r22)
 4003ecc:	b1000115 	stw	r4,4(r22)
 4003ed0:	d8c02015 	stw	r3,128(sp)
 4003ed4:	dc401f15 	stw	r17,124(sp)
 4003ed8:	008001c4 	movi	r2,7
 4003edc:	14400e16 	blt	r2,r17,4003f18 <___vfprintf_internal_r+0x111c>
 4003ee0:	b2000204 	addi	r8,r22,8
 4003ee4:	003e3a06 	br	40037d0 <__alt_data_end+0xfc0037d0>
 4003ee8:	010100f4 	movhi	r4,1027
 4003eec:	210b6e84 	addi	r4,r4,11706
 4003ef0:	d9002b15 	stw	r4,172(sp)
 4003ef4:	d9002b17 	ldw	r4,172(sp)
 4003ef8:	1c07883a 	add	r3,r3,r16
 4003efc:	44000115 	stw	r16,4(r8)
 4003f00:	41000015 	stw	r4,0(r8)
 4003f04:	10800044 	addi	r2,r2,1
 4003f08:	d8c02015 	stw	r3,128(sp)
 4003f0c:	d8801f15 	stw	r2,124(sp)
 4003f10:	010001c4 	movi	r4,7
 4003f14:	20be2d0e 	bge	r4,r2,40037cc <__alt_data_end+0xfc0037cc>
 4003f18:	d9002c17 	ldw	r4,176(sp)
 4003f1c:	d9801e04 	addi	r6,sp,120
 4003f20:	b80b883a 	mov	r5,r23
 4003f24:	400a3f80 	call	400a3f8 <__sprint_r>
 4003f28:	103cb61e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003f2c:	d8c02017 	ldw	r3,128(sp)
 4003f30:	da000404 	addi	r8,sp,16
 4003f34:	003e2606 	br	40037d0 <__alt_data_end+0xfc0037d0>
 4003f38:	d9002c17 	ldw	r4,176(sp)
 4003f3c:	d9801e04 	addi	r6,sp,120
 4003f40:	b80b883a 	mov	r5,r23
 4003f44:	400a3f80 	call	400a3f8 <__sprint_r>
 4003f48:	103e5d26 	beq	r2,zero,40038c0 <__alt_data_end+0xfc0038c0>
 4003f4c:	003cad06 	br	4003204 <__alt_data_end+0xfc003204>
 4003f50:	d9002c17 	ldw	r4,176(sp)
 4003f54:	d9801e04 	addi	r6,sp,120
 4003f58:	b80b883a 	mov	r5,r23
 4003f5c:	400a3f80 	call	400a3f8 <__sprint_r>
 4003f60:	103ca81e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003f64:	d8c02017 	ldw	r3,128(sp)
 4003f68:	da000404 	addi	r8,sp,16
 4003f6c:	003e0b06 	br	400379c <__alt_data_end+0xfc00379c>
 4003f70:	d9002c17 	ldw	r4,176(sp)
 4003f74:	d9801e04 	addi	r6,sp,120
 4003f78:	b80b883a 	mov	r5,r23
 4003f7c:	400a3f80 	call	400a3f8 <__sprint_r>
 4003f80:	103ca01e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003f84:	d8c02017 	ldw	r3,128(sp)
 4003f88:	da000404 	addi	r8,sp,16
 4003f8c:	003dbd06 	br	4003684 <__alt_data_end+0xfc003684>
 4003f90:	d9002c17 	ldw	r4,176(sp)
 4003f94:	d9801e04 	addi	r6,sp,120
 4003f98:	b80b883a 	mov	r5,r23
 4003f9c:	400a3f80 	call	400a3f8 <__sprint_r>
 4003fa0:	103c981e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4003fa4:	d8c02017 	ldw	r3,128(sp)
 4003fa8:	da000404 	addi	r8,sp,16
 4003fac:	003dc306 	br	40036bc <__alt_data_end+0xfc0036bc>
 4003fb0:	d8802917 	ldw	r2,164(sp)
 4003fb4:	d8002785 	stb	zero,158(sp)
 4003fb8:	103f0616 	blt	r2,zero,4003bd4 <__alt_data_end+0xfc003bd4>
 4003fbc:	00ffdfc4 	movi	r3,-129
 4003fc0:	9d84b03a 	or	r2,r19,r22
 4003fc4:	90e4703a 	and	r18,r18,r3
 4003fc8:	103c6b26 	beq	r2,zero,4003178 <__alt_data_end+0xfc003178>
 4003fcc:	0039883a 	mov	fp,zero
 4003fd0:	003e7406 	br	40039a4 <__alt_data_end+0xfc0039a4>
 4003fd4:	9080040c 	andi	r2,r18,16
 4003fd8:	1001b326 	beq	r2,zero,40046a8 <___vfprintf_internal_r+0x18ac>
 4003fdc:	d9002d17 	ldw	r4,180(sp)
 4003fe0:	d9402917 	ldw	r5,164(sp)
 4003fe4:	d8002785 	stb	zero,158(sp)
 4003fe8:	20800104 	addi	r2,r4,4
 4003fec:	24c00017 	ldw	r19,0(r4)
 4003ff0:	002d883a 	mov	r22,zero
 4003ff4:	2801b516 	blt	r5,zero,40046cc <___vfprintf_internal_r+0x18d0>
 4003ff8:	00ffdfc4 	movi	r3,-129
 4003ffc:	d8802d15 	stw	r2,180(sp)
 4004000:	90e4703a 	and	r18,r18,r3
 4004004:	983d2726 	beq	r19,zero,40034a4 <__alt_data_end+0xfc0034a4>
 4004008:	0039883a 	mov	fp,zero
 400400c:	003d2a06 	br	40034b8 <__alt_data_end+0xfc0034b8>
 4004010:	dc402617 	ldw	r17,152(sp)
 4004014:	0441d30e 	bge	zero,r17,4004764 <___vfprintf_internal_r+0x1968>
 4004018:	dc403217 	ldw	r17,200(sp)
 400401c:	d8803317 	ldw	r2,204(sp)
 4004020:	1440010e 	bge	r2,r17,4004028 <___vfprintf_internal_r+0x122c>
 4004024:	1023883a 	mov	r17,r2
 4004028:	04400a0e 	bge	zero,r17,4004054 <___vfprintf_internal_r+0x1258>
 400402c:	d8801f17 	ldw	r2,124(sp)
 4004030:	1c47883a 	add	r3,r3,r17
 4004034:	44000015 	stw	r16,0(r8)
 4004038:	10800044 	addi	r2,r2,1
 400403c:	44400115 	stw	r17,4(r8)
 4004040:	d8c02015 	stw	r3,128(sp)
 4004044:	d8801f15 	stw	r2,124(sp)
 4004048:	010001c4 	movi	r4,7
 400404c:	20826516 	blt	r4,r2,40049e4 <___vfprintf_internal_r+0x1be8>
 4004050:	42000204 	addi	r8,r8,8
 4004054:	88026116 	blt	r17,zero,40049dc <___vfprintf_internal_r+0x1be0>
 4004058:	d9003217 	ldw	r4,200(sp)
 400405c:	2463c83a 	sub	r17,r4,r17
 4004060:	04407b0e 	bge	zero,r17,4004250 <___vfprintf_internal_r+0x1454>
 4004064:	05800404 	movi	r22,16
 4004068:	d8801f17 	ldw	r2,124(sp)
 400406c:	b4419d0e 	bge	r22,r17,40046e4 <___vfprintf_internal_r+0x18e8>
 4004070:	010100f4 	movhi	r4,1027
 4004074:	210b6e84 	addi	r4,r4,11706
 4004078:	d9002b15 	stw	r4,172(sp)
 400407c:	070001c4 	movi	fp,7
 4004080:	dcc02c17 	ldw	r19,176(sp)
 4004084:	00000306 	br	4004094 <___vfprintf_internal_r+0x1298>
 4004088:	42000204 	addi	r8,r8,8
 400408c:	8c7ffc04 	addi	r17,r17,-16
 4004090:	b441970e 	bge	r22,r17,40046f0 <___vfprintf_internal_r+0x18f4>
 4004094:	18c00404 	addi	r3,r3,16
 4004098:	10800044 	addi	r2,r2,1
 400409c:	45000015 	stw	r20,0(r8)
 40040a0:	45800115 	stw	r22,4(r8)
 40040a4:	d8c02015 	stw	r3,128(sp)
 40040a8:	d8801f15 	stw	r2,124(sp)
 40040ac:	e0bff60e 	bge	fp,r2,4004088 <__alt_data_end+0xfc004088>
 40040b0:	d9801e04 	addi	r6,sp,120
 40040b4:	b80b883a 	mov	r5,r23
 40040b8:	9809883a 	mov	r4,r19
 40040bc:	400a3f80 	call	400a3f8 <__sprint_r>
 40040c0:	103c501e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40040c4:	d8c02017 	ldw	r3,128(sp)
 40040c8:	d8801f17 	ldw	r2,124(sp)
 40040cc:	da000404 	addi	r8,sp,16
 40040d0:	003fee06 	br	400408c <__alt_data_end+0xfc00408c>
 40040d4:	d9002c17 	ldw	r4,176(sp)
 40040d8:	d9801e04 	addi	r6,sp,120
 40040dc:	b80b883a 	mov	r5,r23
 40040e0:	400a3f80 	call	400a3f8 <__sprint_r>
 40040e4:	103c471e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40040e8:	d8c02017 	ldw	r3,128(sp)
 40040ec:	df002787 	ldb	fp,158(sp)
 40040f0:	da000404 	addi	r8,sp,16
 40040f4:	003d5606 	br	4003650 <__alt_data_end+0xfc003650>
 40040f8:	9080040c 	andi	r2,r18,16
 40040fc:	10016126 	beq	r2,zero,4004684 <___vfprintf_internal_r+0x1888>
 4004100:	d8802d17 	ldw	r2,180(sp)
 4004104:	14c00017 	ldw	r19,0(r2)
 4004108:	10800104 	addi	r2,r2,4
 400410c:	d8802d15 	stw	r2,180(sp)
 4004110:	982dd7fa 	srai	r22,r19,31
 4004114:	b005883a 	mov	r2,r22
 4004118:	003c8206 	br	4003324 <__alt_data_end+0xfc003324>
 400411c:	9080040c 	andi	r2,r18,16
 4004120:	10003526 	beq	r2,zero,40041f8 <___vfprintf_internal_r+0x13fc>
 4004124:	d9402d17 	ldw	r5,180(sp)
 4004128:	d8c02917 	ldw	r3,164(sp)
 400412c:	d8002785 	stb	zero,158(sp)
 4004130:	28800104 	addi	r2,r5,4
 4004134:	2cc00017 	ldw	r19,0(r5)
 4004138:	002d883a 	mov	r22,zero
 400413c:	18003716 	blt	r3,zero,400421c <___vfprintf_internal_r+0x1420>
 4004140:	00ffdfc4 	movi	r3,-129
 4004144:	d8802d15 	stw	r2,180(sp)
 4004148:	90e4703a 	and	r18,r18,r3
 400414c:	0039883a 	mov	fp,zero
 4004150:	983df326 	beq	r19,zero,4003920 <__alt_data_end+0xfc003920>
 4004154:	00800244 	movi	r2,9
 4004158:	14fc7b36 	bltu	r2,r19,4003348 <__alt_data_end+0xfc003348>
 400415c:	d8c02817 	ldw	r3,160(sp)
 4004160:	dc001dc4 	addi	r16,sp,119
 4004164:	9cc00c04 	addi	r19,r19,48
 4004168:	1c07c83a 	sub	r3,r3,r16
 400416c:	dcc01dc5 	stb	r19,119(sp)
 4004170:	d8c02e15 	stw	r3,184(sp)
 4004174:	003ce806 	br	4003518 <__alt_data_end+0xfc003518>
 4004178:	d8803317 	ldw	r2,204(sp)
 400417c:	143fffc4 	addi	r16,r2,-1
 4004180:	043f4d0e 	bge	zero,r16,4003eb8 <__alt_data_end+0xfc003eb8>
 4004184:	07000404 	movi	fp,16
 4004188:	e400810e 	bge	fp,r16,4004390 <___vfprintf_internal_r+0x1594>
 400418c:	014100f4 	movhi	r5,1027
 4004190:	294b6e84 	addi	r5,r5,11706
 4004194:	d9402b15 	stw	r5,172(sp)
 4004198:	01c001c4 	movi	r7,7
 400419c:	dcc02c17 	ldw	r19,176(sp)
 40041a0:	00000306 	br	40041b0 <___vfprintf_internal_r+0x13b4>
 40041a4:	b5800204 	addi	r22,r22,8
 40041a8:	843ffc04 	addi	r16,r16,-16
 40041ac:	e4007b0e 	bge	fp,r16,400439c <___vfprintf_internal_r+0x15a0>
 40041b0:	18c00404 	addi	r3,r3,16
 40041b4:	8c400044 	addi	r17,r17,1
 40041b8:	b5000015 	stw	r20,0(r22)
 40041bc:	b7000115 	stw	fp,4(r22)
 40041c0:	d8c02015 	stw	r3,128(sp)
 40041c4:	dc401f15 	stw	r17,124(sp)
 40041c8:	3c7ff60e 	bge	r7,r17,40041a4 <__alt_data_end+0xfc0041a4>
 40041cc:	d9801e04 	addi	r6,sp,120
 40041d0:	b80b883a 	mov	r5,r23
 40041d4:	9809883a 	mov	r4,r19
 40041d8:	d9c03c15 	stw	r7,240(sp)
 40041dc:	400a3f80 	call	400a3f8 <__sprint_r>
 40041e0:	d9c03c17 	ldw	r7,240(sp)
 40041e4:	103c071e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40041e8:	d8c02017 	ldw	r3,128(sp)
 40041ec:	dc401f17 	ldw	r17,124(sp)
 40041f0:	dd800404 	addi	r22,sp,16
 40041f4:	003fec06 	br	40041a8 <__alt_data_end+0xfc0041a8>
 40041f8:	9080100c 	andi	r2,r18,64
 40041fc:	d8002785 	stb	zero,158(sp)
 4004200:	10010e26 	beq	r2,zero,400463c <___vfprintf_internal_r+0x1840>
 4004204:	d9002d17 	ldw	r4,180(sp)
 4004208:	d9402917 	ldw	r5,164(sp)
 400420c:	002d883a 	mov	r22,zero
 4004210:	20800104 	addi	r2,r4,4
 4004214:	24c0000b 	ldhu	r19,0(r4)
 4004218:	283fc90e 	bge	r5,zero,4004140 <__alt_data_end+0xfc004140>
 400421c:	d8802d15 	stw	r2,180(sp)
 4004220:	0039883a 	mov	fp,zero
 4004224:	9d84b03a 	or	r2,r19,r22
 4004228:	103c461e 	bne	r2,zero,4003344 <__alt_data_end+0xfc003344>
 400422c:	00800044 	movi	r2,1
 4004230:	003e6c06 	br	4003be4 <__alt_data_end+0xfc003be4>
 4004234:	d9002c17 	ldw	r4,176(sp)
 4004238:	d9801e04 	addi	r6,sp,120
 400423c:	b80b883a 	mov	r5,r23
 4004240:	400a3f80 	call	400a3f8 <__sprint_r>
 4004244:	103bef1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004248:	d8c02017 	ldw	r3,128(sp)
 400424c:	da000404 	addi	r8,sp,16
 4004250:	d9003217 	ldw	r4,200(sp)
 4004254:	d8802617 	ldw	r2,152(sp)
 4004258:	d9403317 	ldw	r5,204(sp)
 400425c:	8123883a 	add	r17,r16,r4
 4004260:	11400216 	blt	r2,r5,400426c <___vfprintf_internal_r+0x1470>
 4004264:	9100004c 	andi	r4,r18,1
 4004268:	20000d26 	beq	r4,zero,40042a0 <___vfprintf_internal_r+0x14a4>
 400426c:	d9003717 	ldw	r4,220(sp)
 4004270:	d9403417 	ldw	r5,208(sp)
 4004274:	1907883a 	add	r3,r3,r4
 4004278:	d9001f17 	ldw	r4,124(sp)
 400427c:	41400015 	stw	r5,0(r8)
 4004280:	d9403717 	ldw	r5,220(sp)
 4004284:	21000044 	addi	r4,r4,1
 4004288:	d8c02015 	stw	r3,128(sp)
 400428c:	41400115 	stw	r5,4(r8)
 4004290:	d9001f15 	stw	r4,124(sp)
 4004294:	014001c4 	movi	r5,7
 4004298:	2901e816 	blt	r5,r4,4004a3c <___vfprintf_internal_r+0x1c40>
 400429c:	42000204 	addi	r8,r8,8
 40042a0:	d9003317 	ldw	r4,204(sp)
 40042a4:	8121883a 	add	r16,r16,r4
 40042a8:	2085c83a 	sub	r2,r4,r2
 40042ac:	8461c83a 	sub	r16,r16,r17
 40042b0:	1400010e 	bge	r2,r16,40042b8 <___vfprintf_internal_r+0x14bc>
 40042b4:	1021883a 	mov	r16,r2
 40042b8:	04000a0e 	bge	zero,r16,40042e4 <___vfprintf_internal_r+0x14e8>
 40042bc:	d9001f17 	ldw	r4,124(sp)
 40042c0:	1c07883a 	add	r3,r3,r16
 40042c4:	44400015 	stw	r17,0(r8)
 40042c8:	21000044 	addi	r4,r4,1
 40042cc:	44000115 	stw	r16,4(r8)
 40042d0:	d8c02015 	stw	r3,128(sp)
 40042d4:	d9001f15 	stw	r4,124(sp)
 40042d8:	014001c4 	movi	r5,7
 40042dc:	2901fb16 	blt	r5,r4,4004acc <___vfprintf_internal_r+0x1cd0>
 40042e0:	42000204 	addi	r8,r8,8
 40042e4:	8001f716 	blt	r16,zero,4004ac4 <___vfprintf_internal_r+0x1cc8>
 40042e8:	1421c83a 	sub	r16,r2,r16
 40042ec:	043d380e 	bge	zero,r16,40037d0 <__alt_data_end+0xfc0037d0>
 40042f0:	04400404 	movi	r17,16
 40042f4:	d8801f17 	ldw	r2,124(sp)
 40042f8:	8c3efb0e 	bge	r17,r16,4003ee8 <__alt_data_end+0xfc003ee8>
 40042fc:	014100f4 	movhi	r5,1027
 4004300:	294b6e84 	addi	r5,r5,11706
 4004304:	d9402b15 	stw	r5,172(sp)
 4004308:	058001c4 	movi	r22,7
 400430c:	dcc02c17 	ldw	r19,176(sp)
 4004310:	00000306 	br	4004320 <___vfprintf_internal_r+0x1524>
 4004314:	42000204 	addi	r8,r8,8
 4004318:	843ffc04 	addi	r16,r16,-16
 400431c:	8c3ef50e 	bge	r17,r16,4003ef4 <__alt_data_end+0xfc003ef4>
 4004320:	18c00404 	addi	r3,r3,16
 4004324:	10800044 	addi	r2,r2,1
 4004328:	45000015 	stw	r20,0(r8)
 400432c:	44400115 	stw	r17,4(r8)
 4004330:	d8c02015 	stw	r3,128(sp)
 4004334:	d8801f15 	stw	r2,124(sp)
 4004338:	b0bff60e 	bge	r22,r2,4004314 <__alt_data_end+0xfc004314>
 400433c:	d9801e04 	addi	r6,sp,120
 4004340:	b80b883a 	mov	r5,r23
 4004344:	9809883a 	mov	r4,r19
 4004348:	400a3f80 	call	400a3f8 <__sprint_r>
 400434c:	103bad1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004350:	d8c02017 	ldw	r3,128(sp)
 4004354:	d8801f17 	ldw	r2,124(sp)
 4004358:	da000404 	addi	r8,sp,16
 400435c:	003fee06 	br	4004318 <__alt_data_end+0xfc004318>
 4004360:	9088703a 	and	r4,r18,r2
 4004364:	203eab1e 	bne	r4,zero,4003e14 <__alt_data_end+0xfc003e14>
 4004368:	dc401f17 	ldw	r17,124(sp)
 400436c:	40800115 	stw	r2,4(r8)
 4004370:	44000015 	stw	r16,0(r8)
 4004374:	8c400044 	addi	r17,r17,1
 4004378:	d8c02015 	stw	r3,128(sp)
 400437c:	dc401f15 	stw	r17,124(sp)
 4004380:	008001c4 	movi	r2,7
 4004384:	14400e16 	blt	r2,r17,40043c0 <___vfprintf_internal_r+0x15c4>
 4004388:	45800204 	addi	r22,r8,8
 400438c:	003eca06 	br	4003eb8 <__alt_data_end+0xfc003eb8>
 4004390:	010100f4 	movhi	r4,1027
 4004394:	210b6e84 	addi	r4,r4,11706
 4004398:	d9002b15 	stw	r4,172(sp)
 400439c:	d8802b17 	ldw	r2,172(sp)
 40043a0:	1c07883a 	add	r3,r3,r16
 40043a4:	8c400044 	addi	r17,r17,1
 40043a8:	b0800015 	stw	r2,0(r22)
 40043ac:	b4000115 	stw	r16,4(r22)
 40043b0:	d8c02015 	stw	r3,128(sp)
 40043b4:	dc401f15 	stw	r17,124(sp)
 40043b8:	008001c4 	movi	r2,7
 40043bc:	147ebd0e 	bge	r2,r17,4003eb4 <__alt_data_end+0xfc003eb4>
 40043c0:	d9002c17 	ldw	r4,176(sp)
 40043c4:	d9801e04 	addi	r6,sp,120
 40043c8:	b80b883a 	mov	r5,r23
 40043cc:	400a3f80 	call	400a3f8 <__sprint_r>
 40043d0:	103b8c1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40043d4:	d8c02017 	ldw	r3,128(sp)
 40043d8:	dc401f17 	ldw	r17,124(sp)
 40043dc:	dd800404 	addi	r22,sp,16
 40043e0:	003eb506 	br	4003eb8 <__alt_data_end+0xfc003eb8>
 40043e4:	d9002c17 	ldw	r4,176(sp)
 40043e8:	d9801e04 	addi	r6,sp,120
 40043ec:	b80b883a 	mov	r5,r23
 40043f0:	400a3f80 	call	400a3f8 <__sprint_r>
 40043f4:	103b831e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40043f8:	d8c02017 	ldw	r3,128(sp)
 40043fc:	dc401f17 	ldw	r17,124(sp)
 4004400:	da000404 	addi	r8,sp,16
 4004404:	003e8d06 	br	4003e3c <__alt_data_end+0xfc003e3c>
 4004408:	d9002c17 	ldw	r4,176(sp)
 400440c:	d9801e04 	addi	r6,sp,120
 4004410:	b80b883a 	mov	r5,r23
 4004414:	400a3f80 	call	400a3f8 <__sprint_r>
 4004418:	103b7a1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 400441c:	d8c02017 	ldw	r3,128(sp)
 4004420:	dc401f17 	ldw	r17,124(sp)
 4004424:	dd800404 	addi	r22,sp,16
 4004428:	003e8f06 	br	4003e68 <__alt_data_end+0xfc003e68>
 400442c:	0027883a 	mov	r19,zero
 4004430:	003f4a06 	br	400415c <__alt_data_end+0xfc00415c>
 4004434:	d9002c17 	ldw	r4,176(sp)
 4004438:	d9801e04 	addi	r6,sp,120
 400443c:	b80b883a 	mov	r5,r23
 4004440:	400a3f80 	call	400a3f8 <__sprint_r>
 4004444:	103b6f1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004448:	d8c02017 	ldw	r3,128(sp)
 400444c:	da000404 	addi	r8,sp,16
 4004450:	003c9d06 	br	40036c8 <__alt_data_end+0xfc0036c8>
 4004454:	04e7c83a 	sub	r19,zero,r19
 4004458:	9804c03a 	cmpne	r2,r19,zero
 400445c:	05adc83a 	sub	r22,zero,r22
 4004460:	b0adc83a 	sub	r22,r22,r2
 4004464:	d8802917 	ldw	r2,164(sp)
 4004468:	07000b44 	movi	fp,45
 400446c:	df002785 	stb	fp,158(sp)
 4004470:	10017b16 	blt	r2,zero,4004a60 <___vfprintf_internal_r+0x1c64>
 4004474:	00bfdfc4 	movi	r2,-129
 4004478:	90a4703a 	and	r18,r18,r2
 400447c:	003bb106 	br	4003344 <__alt_data_end+0xfc003344>
 4004480:	d9003617 	ldw	r4,216(sp)
 4004484:	d9403817 	ldw	r5,224(sp)
 4004488:	da003d15 	stw	r8,244(sp)
 400448c:	400a01c0 	call	400a01c <__fpclassifyd>
 4004490:	da003d17 	ldw	r8,244(sp)
 4004494:	1000f026 	beq	r2,zero,4004858 <___vfprintf_internal_r+0x1a5c>
 4004498:	d9002917 	ldw	r4,164(sp)
 400449c:	05bff7c4 	movi	r22,-33
 40044a0:	00bfffc4 	movi	r2,-1
 40044a4:	8dac703a 	and	r22,r17,r22
 40044a8:	20820026 	beq	r4,r2,4004cac <___vfprintf_internal_r+0x1eb0>
 40044ac:	008011c4 	movi	r2,71
 40044b0:	b081f726 	beq	r22,r2,4004c90 <___vfprintf_internal_r+0x1e94>
 40044b4:	d9003817 	ldw	r4,224(sp)
 40044b8:	90c04014 	ori	r3,r18,256
 40044bc:	d8c02b15 	stw	r3,172(sp)
 40044c0:	20021516 	blt	r4,zero,4004d18 <___vfprintf_internal_r+0x1f1c>
 40044c4:	dcc03817 	ldw	r19,224(sp)
 40044c8:	d8002a05 	stb	zero,168(sp)
 40044cc:	00801984 	movi	r2,102
 40044d0:	8881f926 	beq	r17,r2,4004cb8 <___vfprintf_internal_r+0x1ebc>
 40044d4:	00801184 	movi	r2,70
 40044d8:	88821c26 	beq	r17,r2,4004d4c <___vfprintf_internal_r+0x1f50>
 40044dc:	00801144 	movi	r2,69
 40044e0:	b081ef26 	beq	r22,r2,4004ca0 <___vfprintf_internal_r+0x1ea4>
 40044e4:	d8c02917 	ldw	r3,164(sp)
 40044e8:	d8802104 	addi	r2,sp,132
 40044ec:	d8800315 	stw	r2,12(sp)
 40044f0:	d9403617 	ldw	r5,216(sp)
 40044f4:	d8802504 	addi	r2,sp,148
 40044f8:	d9002c17 	ldw	r4,176(sp)
 40044fc:	d8800215 	stw	r2,8(sp)
 4004500:	d8802604 	addi	r2,sp,152
 4004504:	d8c00015 	stw	r3,0(sp)
 4004508:	d8800115 	stw	r2,4(sp)
 400450c:	01c00084 	movi	r7,2
 4004510:	980d883a 	mov	r6,r19
 4004514:	d8c03c15 	stw	r3,240(sp)
 4004518:	da003d15 	stw	r8,244(sp)
 400451c:	40054200 	call	4005420 <_dtoa_r>
 4004520:	1021883a 	mov	r16,r2
 4004524:	008019c4 	movi	r2,103
 4004528:	d8c03c17 	ldw	r3,240(sp)
 400452c:	da003d17 	ldw	r8,244(sp)
 4004530:	88817126 	beq	r17,r2,4004af8 <___vfprintf_internal_r+0x1cfc>
 4004534:	008011c4 	movi	r2,71
 4004538:	88829226 	beq	r17,r2,4004f84 <___vfprintf_internal_r+0x2188>
 400453c:	80f9883a 	add	fp,r16,r3
 4004540:	d9003617 	ldw	r4,216(sp)
 4004544:	000d883a 	mov	r6,zero
 4004548:	000f883a 	mov	r7,zero
 400454c:	980b883a 	mov	r5,r19
 4004550:	da003d15 	stw	r8,244(sp)
 4004554:	400debc0 	call	400debc <__eqdf2>
 4004558:	da003d17 	ldw	r8,244(sp)
 400455c:	10018d26 	beq	r2,zero,4004b94 <___vfprintf_internal_r+0x1d98>
 4004560:	d8802117 	ldw	r2,132(sp)
 4004564:	1700062e 	bgeu	r2,fp,4004580 <___vfprintf_internal_r+0x1784>
 4004568:	01000c04 	movi	r4,48
 400456c:	10c00044 	addi	r3,r2,1
 4004570:	d8c02115 	stw	r3,132(sp)
 4004574:	11000005 	stb	r4,0(r2)
 4004578:	d8802117 	ldw	r2,132(sp)
 400457c:	173ffb36 	bltu	r2,fp,400456c <__alt_data_end+0xfc00456c>
 4004580:	1405c83a 	sub	r2,r2,r16
 4004584:	d8803315 	stw	r2,204(sp)
 4004588:	008011c4 	movi	r2,71
 400458c:	b0817626 	beq	r22,r2,4004b68 <___vfprintf_internal_r+0x1d6c>
 4004590:	00801944 	movi	r2,101
 4004594:	1442810e 	bge	r2,r17,4004f9c <___vfprintf_internal_r+0x21a0>
 4004598:	d8c02617 	ldw	r3,152(sp)
 400459c:	00801984 	movi	r2,102
 40045a0:	d8c03215 	stw	r3,200(sp)
 40045a4:	8881fe26 	beq	r17,r2,4004da0 <___vfprintf_internal_r+0x1fa4>
 40045a8:	d8c03217 	ldw	r3,200(sp)
 40045ac:	d9003317 	ldw	r4,204(sp)
 40045b0:	1901dd16 	blt	r3,r4,4004d28 <___vfprintf_internal_r+0x1f2c>
 40045b4:	9480004c 	andi	r18,r18,1
 40045b8:	90022b1e 	bne	r18,zero,4004e68 <___vfprintf_internal_r+0x206c>
 40045bc:	1805883a 	mov	r2,r3
 40045c0:	18028016 	blt	r3,zero,4004fc4 <___vfprintf_internal_r+0x21c8>
 40045c4:	d8c03217 	ldw	r3,200(sp)
 40045c8:	044019c4 	movi	r17,103
 40045cc:	d8c02e15 	stw	r3,184(sp)
 40045d0:	df002a07 	ldb	fp,168(sp)
 40045d4:	e001531e 	bne	fp,zero,4004b24 <___vfprintf_internal_r+0x1d28>
 40045d8:	df002783 	ldbu	fp,158(sp)
 40045dc:	d8802a15 	stw	r2,168(sp)
 40045e0:	dc802b17 	ldw	r18,172(sp)
 40045e4:	d8002915 	stw	zero,164(sp)
 40045e8:	003bd106 	br	4003530 <__alt_data_end+0xfc003530>
 40045ec:	d8802d17 	ldw	r2,180(sp)
 40045f0:	d8c02d17 	ldw	r3,180(sp)
 40045f4:	d9002d17 	ldw	r4,180(sp)
 40045f8:	10800017 	ldw	r2,0(r2)
 40045fc:	18c00117 	ldw	r3,4(r3)
 4004600:	21000204 	addi	r4,r4,8
 4004604:	d8803615 	stw	r2,216(sp)
 4004608:	d8c03815 	stw	r3,224(sp)
 400460c:	d9002d15 	stw	r4,180(sp)
 4004610:	003b7506 	br	40033e8 <__alt_data_end+0xfc0033e8>
 4004614:	ac400007 	ldb	r17,0(r21)
 4004618:	003a5906 	br	4002f80 <__alt_data_end+0xfc002f80>
 400461c:	9080100c 	andi	r2,r18,64
 4004620:	1000a826 	beq	r2,zero,40048c4 <___vfprintf_internal_r+0x1ac8>
 4004624:	d9002d17 	ldw	r4,180(sp)
 4004628:	002d883a 	mov	r22,zero
 400462c:	24c0000b 	ldhu	r19,0(r4)
 4004630:	21000104 	addi	r4,r4,4
 4004634:	d9002d15 	stw	r4,180(sp)
 4004638:	003ccb06 	br	4003968 <__alt_data_end+0xfc003968>
 400463c:	d8c02d17 	ldw	r3,180(sp)
 4004640:	d9002917 	ldw	r4,164(sp)
 4004644:	002d883a 	mov	r22,zero
 4004648:	18800104 	addi	r2,r3,4
 400464c:	1cc00017 	ldw	r19,0(r3)
 4004650:	203ebb0e 	bge	r4,zero,4004140 <__alt_data_end+0xfc004140>
 4004654:	003ef106 	br	400421c <__alt_data_end+0xfc00421c>
 4004658:	9080040c 	andi	r2,r18,16
 400465c:	1000921e 	bne	r2,zero,40048a8 <___vfprintf_internal_r+0x1aac>
 4004660:	9480100c 	andi	r18,r18,64
 4004664:	90013926 	beq	r18,zero,4004b4c <___vfprintf_internal_r+0x1d50>
 4004668:	d9002d17 	ldw	r4,180(sp)
 400466c:	d9402f17 	ldw	r5,188(sp)
 4004670:	20800017 	ldw	r2,0(r4)
 4004674:	21000104 	addi	r4,r4,4
 4004678:	d9002d15 	stw	r4,180(sp)
 400467c:	1140000d 	sth	r5,0(r2)
 4004680:	003a1606 	br	4002edc <__alt_data_end+0xfc002edc>
 4004684:	9080100c 	andi	r2,r18,64
 4004688:	10008026 	beq	r2,zero,400488c <___vfprintf_internal_r+0x1a90>
 400468c:	d8c02d17 	ldw	r3,180(sp)
 4004690:	1cc0000f 	ldh	r19,0(r3)
 4004694:	18c00104 	addi	r3,r3,4
 4004698:	d8c02d15 	stw	r3,180(sp)
 400469c:	982dd7fa 	srai	r22,r19,31
 40046a0:	b005883a 	mov	r2,r22
 40046a4:	003b1f06 	br	4003324 <__alt_data_end+0xfc003324>
 40046a8:	9080100c 	andi	r2,r18,64
 40046ac:	d8002785 	stb	zero,158(sp)
 40046b0:	10008a1e 	bne	r2,zero,40048dc <___vfprintf_internal_r+0x1ae0>
 40046b4:	d9402d17 	ldw	r5,180(sp)
 40046b8:	d8c02917 	ldw	r3,164(sp)
 40046bc:	002d883a 	mov	r22,zero
 40046c0:	28800104 	addi	r2,r5,4
 40046c4:	2cc00017 	ldw	r19,0(r5)
 40046c8:	183e4b0e 	bge	r3,zero,4003ff8 <__alt_data_end+0xfc003ff8>
 40046cc:	9d86b03a 	or	r3,r19,r22
 40046d0:	d8802d15 	stw	r2,180(sp)
 40046d4:	183e4c1e 	bne	r3,zero,4004008 <__alt_data_end+0xfc004008>
 40046d8:	0039883a 	mov	fp,zero
 40046dc:	0005883a 	mov	r2,zero
 40046e0:	003d4006 	br	4003be4 <__alt_data_end+0xfc003be4>
 40046e4:	014100f4 	movhi	r5,1027
 40046e8:	294b6e84 	addi	r5,r5,11706
 40046ec:	d9402b15 	stw	r5,172(sp)
 40046f0:	d9402b17 	ldw	r5,172(sp)
 40046f4:	1c47883a 	add	r3,r3,r17
 40046f8:	10800044 	addi	r2,r2,1
 40046fc:	41400015 	stw	r5,0(r8)
 4004700:	44400115 	stw	r17,4(r8)
 4004704:	d8c02015 	stw	r3,128(sp)
 4004708:	d8801f15 	stw	r2,124(sp)
 400470c:	010001c4 	movi	r4,7
 4004710:	20bec816 	blt	r4,r2,4004234 <__alt_data_end+0xfc004234>
 4004714:	42000204 	addi	r8,r8,8
 4004718:	003ecd06 	br	4004250 <__alt_data_end+0xfc004250>
 400471c:	d9002917 	ldw	r4,164(sp)
 4004720:	d8002785 	stb	zero,158(sp)
 4004724:	203d2d16 	blt	r4,zero,4003bdc <__alt_data_end+0xfc003bdc>
 4004728:	00bfdfc4 	movi	r2,-129
 400472c:	90a4703a 	and	r18,r18,r2
 4004730:	003a9106 	br	4003178 <__alt_data_end+0xfc003178>
 4004734:	010100f4 	movhi	r4,1027
 4004738:	210b6e84 	addi	r4,r4,11706
 400473c:	d9002b15 	stw	r4,172(sp)
 4004740:	003c0c06 	br	4003774 <__alt_data_end+0xfc003774>
 4004744:	d9002c17 	ldw	r4,176(sp)
 4004748:	d9801e04 	addi	r6,sp,120
 400474c:	b80b883a 	mov	r5,r23
 4004750:	400a3f80 	call	400a3f8 <__sprint_r>
 4004754:	103aab1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004758:	d8c02017 	ldw	r3,128(sp)
 400475c:	da000404 	addi	r8,sp,16
 4004760:	003d4106 	br	4003c68 <__alt_data_end+0xfc003c68>
 4004764:	d8801f17 	ldw	r2,124(sp)
 4004768:	014100f4 	movhi	r5,1027
 400476c:	01000044 	movi	r4,1
 4004770:	18c00044 	addi	r3,r3,1
 4004774:	10800044 	addi	r2,r2,1
 4004778:	294b6e04 	addi	r5,r5,11704
 400477c:	41000115 	stw	r4,4(r8)
 4004780:	41400015 	stw	r5,0(r8)
 4004784:	d8c02015 	stw	r3,128(sp)
 4004788:	d8801f15 	stw	r2,124(sp)
 400478c:	010001c4 	movi	r4,7
 4004790:	20805c16 	blt	r4,r2,4004904 <___vfprintf_internal_r+0x1b08>
 4004794:	42000204 	addi	r8,r8,8
 4004798:	8800041e 	bne	r17,zero,40047ac <___vfprintf_internal_r+0x19b0>
 400479c:	d8803317 	ldw	r2,204(sp)
 40047a0:	1000021e 	bne	r2,zero,40047ac <___vfprintf_internal_r+0x19b0>
 40047a4:	9080004c 	andi	r2,r18,1
 40047a8:	103c0926 	beq	r2,zero,40037d0 <__alt_data_end+0xfc0037d0>
 40047ac:	d9003717 	ldw	r4,220(sp)
 40047b0:	d8801f17 	ldw	r2,124(sp)
 40047b4:	d9403417 	ldw	r5,208(sp)
 40047b8:	20c7883a 	add	r3,r4,r3
 40047bc:	10800044 	addi	r2,r2,1
 40047c0:	41000115 	stw	r4,4(r8)
 40047c4:	41400015 	stw	r5,0(r8)
 40047c8:	d8c02015 	stw	r3,128(sp)
 40047cc:	d8801f15 	stw	r2,124(sp)
 40047d0:	010001c4 	movi	r4,7
 40047d4:	20812116 	blt	r4,r2,4004c5c <___vfprintf_internal_r+0x1e60>
 40047d8:	42000204 	addi	r8,r8,8
 40047dc:	0463c83a 	sub	r17,zero,r17
 40047e0:	0440730e 	bge	zero,r17,40049b0 <___vfprintf_internal_r+0x1bb4>
 40047e4:	05800404 	movi	r22,16
 40047e8:	b440860e 	bge	r22,r17,4004a04 <___vfprintf_internal_r+0x1c08>
 40047ec:	014100f4 	movhi	r5,1027
 40047f0:	294b6e84 	addi	r5,r5,11706
 40047f4:	d9402b15 	stw	r5,172(sp)
 40047f8:	070001c4 	movi	fp,7
 40047fc:	dcc02c17 	ldw	r19,176(sp)
 4004800:	00000306 	br	4004810 <___vfprintf_internal_r+0x1a14>
 4004804:	42000204 	addi	r8,r8,8
 4004808:	8c7ffc04 	addi	r17,r17,-16
 400480c:	b440800e 	bge	r22,r17,4004a10 <___vfprintf_internal_r+0x1c14>
 4004810:	18c00404 	addi	r3,r3,16
 4004814:	10800044 	addi	r2,r2,1
 4004818:	45000015 	stw	r20,0(r8)
 400481c:	45800115 	stw	r22,4(r8)
 4004820:	d8c02015 	stw	r3,128(sp)
 4004824:	d8801f15 	stw	r2,124(sp)
 4004828:	e0bff60e 	bge	fp,r2,4004804 <__alt_data_end+0xfc004804>
 400482c:	d9801e04 	addi	r6,sp,120
 4004830:	b80b883a 	mov	r5,r23
 4004834:	9809883a 	mov	r4,r19
 4004838:	400a3f80 	call	400a3f8 <__sprint_r>
 400483c:	103a711e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004840:	d8c02017 	ldw	r3,128(sp)
 4004844:	d8801f17 	ldw	r2,124(sp)
 4004848:	da000404 	addi	r8,sp,16
 400484c:	003fee06 	br	4004808 <__alt_data_end+0xfc004808>
 4004850:	00bfffc4 	movi	r2,-1
 4004854:	003a6f06 	br	4003214 <__alt_data_end+0xfc003214>
 4004858:	008011c4 	movi	r2,71
 400485c:	1440b816 	blt	r2,r17,4004b40 <___vfprintf_internal_r+0x1d44>
 4004860:	040100f4 	movhi	r16,1027
 4004864:	840b6004 	addi	r16,r16,11648
 4004868:	00c000c4 	movi	r3,3
 400486c:	00bfdfc4 	movi	r2,-129
 4004870:	d8c02a15 	stw	r3,168(sp)
 4004874:	90a4703a 	and	r18,r18,r2
 4004878:	df002783 	ldbu	fp,158(sp)
 400487c:	d8c02e15 	stw	r3,184(sp)
 4004880:	d8002915 	stw	zero,164(sp)
 4004884:	d8003215 	stw	zero,200(sp)
 4004888:	003b2906 	br	4003530 <__alt_data_end+0xfc003530>
 400488c:	d9002d17 	ldw	r4,180(sp)
 4004890:	24c00017 	ldw	r19,0(r4)
 4004894:	21000104 	addi	r4,r4,4
 4004898:	d9002d15 	stw	r4,180(sp)
 400489c:	982dd7fa 	srai	r22,r19,31
 40048a0:	b005883a 	mov	r2,r22
 40048a4:	003a9f06 	br	4003324 <__alt_data_end+0xfc003324>
 40048a8:	d9402d17 	ldw	r5,180(sp)
 40048ac:	d8c02f17 	ldw	r3,188(sp)
 40048b0:	28800017 	ldw	r2,0(r5)
 40048b4:	29400104 	addi	r5,r5,4
 40048b8:	d9402d15 	stw	r5,180(sp)
 40048bc:	10c00015 	stw	r3,0(r2)
 40048c0:	00398606 	br	4002edc <__alt_data_end+0xfc002edc>
 40048c4:	d9402d17 	ldw	r5,180(sp)
 40048c8:	002d883a 	mov	r22,zero
 40048cc:	2cc00017 	ldw	r19,0(r5)
 40048d0:	29400104 	addi	r5,r5,4
 40048d4:	d9402d15 	stw	r5,180(sp)
 40048d8:	003c2306 	br	4003968 <__alt_data_end+0xfc003968>
 40048dc:	d8c02d17 	ldw	r3,180(sp)
 40048e0:	d9002917 	ldw	r4,164(sp)
 40048e4:	002d883a 	mov	r22,zero
 40048e8:	18800104 	addi	r2,r3,4
 40048ec:	1cc0000b 	ldhu	r19,0(r3)
 40048f0:	203dc10e 	bge	r4,zero,4003ff8 <__alt_data_end+0xfc003ff8>
 40048f4:	003f7506 	br	40046cc <__alt_data_end+0xfc0046cc>
 40048f8:	040100f4 	movhi	r16,1027
 40048fc:	840b5e04 	addi	r16,r16,11640
 4004900:	003acc06 	br	4003434 <__alt_data_end+0xfc003434>
 4004904:	d9002c17 	ldw	r4,176(sp)
 4004908:	d9801e04 	addi	r6,sp,120
 400490c:	b80b883a 	mov	r5,r23
 4004910:	400a3f80 	call	400a3f8 <__sprint_r>
 4004914:	103a3b1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004918:	dc402617 	ldw	r17,152(sp)
 400491c:	d8c02017 	ldw	r3,128(sp)
 4004920:	da000404 	addi	r8,sp,16
 4004924:	003f9c06 	br	4004798 <__alt_data_end+0xfc004798>
 4004928:	ac400043 	ldbu	r17,1(r21)
 400492c:	94800814 	ori	r18,r18,32
 4004930:	ad400044 	addi	r21,r21,1
 4004934:	8c403fcc 	andi	r17,r17,255
 4004938:	8c40201c 	xori	r17,r17,128
 400493c:	8c7fe004 	addi	r17,r17,-128
 4004940:	00398f06 	br	4002f80 <__alt_data_end+0xfc002f80>
 4004944:	d8c02d15 	stw	r3,180(sp)
 4004948:	0039883a 	mov	fp,zero
 400494c:	003e3506 	br	4004224 <__alt_data_end+0xfc004224>
 4004950:	d9002c17 	ldw	r4,176(sp)
 4004954:	d9801e04 	addi	r6,sp,120
 4004958:	b80b883a 	mov	r5,r23
 400495c:	400a3f80 	call	400a3f8 <__sprint_r>
 4004960:	103a281e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004964:	d8c02017 	ldw	r3,128(sp)
 4004968:	da000404 	addi	r8,sp,16
 400496c:	003cd006 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 4004970:	8009883a 	mov	r4,r16
 4004974:	da003d15 	stw	r8,244(sp)
 4004978:	4002d640 	call	4002d64 <strlen>
 400497c:	d8802e15 	stw	r2,184(sp)
 4004980:	da003d17 	ldw	r8,244(sp)
 4004984:	103c340e 	bge	r2,zero,4003a58 <__alt_data_end+0xfc003a58>
 4004988:	0005883a 	mov	r2,zero
 400498c:	003c3206 	br	4003a58 <__alt_data_end+0xfc003a58>
 4004990:	d9002c17 	ldw	r4,176(sp)
 4004994:	d9801e04 	addi	r6,sp,120
 4004998:	b80b883a 	mov	r5,r23
 400499c:	400a3f80 	call	400a3f8 <__sprint_r>
 40049a0:	103a181e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40049a4:	d8c02017 	ldw	r3,128(sp)
 40049a8:	d8801f17 	ldw	r2,124(sp)
 40049ac:	da000404 	addi	r8,sp,16
 40049b0:	d9403317 	ldw	r5,204(sp)
 40049b4:	10800044 	addi	r2,r2,1
 40049b8:	44000015 	stw	r16,0(r8)
 40049bc:	28c7883a 	add	r3,r5,r3
 40049c0:	003b7d06 	br	40037b8 <__alt_data_end+0xfc0037b8>
 40049c4:	010100f4 	movhi	r4,1027
 40049c8:	210b7284 	addi	r4,r4,11722
 40049cc:	d9003515 	stw	r4,212(sp)
 40049d0:	003b1406 	br	4003624 <__alt_data_end+0xfc003624>
 40049d4:	013fffc4 	movi	r4,-1
 40049d8:	003a3506 	br	40032b0 <__alt_data_end+0xfc0032b0>
 40049dc:	0023883a 	mov	r17,zero
 40049e0:	003d9d06 	br	4004058 <__alt_data_end+0xfc004058>
 40049e4:	d9002c17 	ldw	r4,176(sp)
 40049e8:	d9801e04 	addi	r6,sp,120
 40049ec:	b80b883a 	mov	r5,r23
 40049f0:	400a3f80 	call	400a3f8 <__sprint_r>
 40049f4:	103a031e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 40049f8:	d8c02017 	ldw	r3,128(sp)
 40049fc:	da000404 	addi	r8,sp,16
 4004a00:	003d9406 	br	4004054 <__alt_data_end+0xfc004054>
 4004a04:	010100f4 	movhi	r4,1027
 4004a08:	210b6e84 	addi	r4,r4,11706
 4004a0c:	d9002b15 	stw	r4,172(sp)
 4004a10:	d9002b17 	ldw	r4,172(sp)
 4004a14:	1c47883a 	add	r3,r3,r17
 4004a18:	10800044 	addi	r2,r2,1
 4004a1c:	41000015 	stw	r4,0(r8)
 4004a20:	44400115 	stw	r17,4(r8)
 4004a24:	d8c02015 	stw	r3,128(sp)
 4004a28:	d8801f15 	stw	r2,124(sp)
 4004a2c:	010001c4 	movi	r4,7
 4004a30:	20bfd716 	blt	r4,r2,4004990 <__alt_data_end+0xfc004990>
 4004a34:	42000204 	addi	r8,r8,8
 4004a38:	003fdd06 	br	40049b0 <__alt_data_end+0xfc0049b0>
 4004a3c:	d9002c17 	ldw	r4,176(sp)
 4004a40:	d9801e04 	addi	r6,sp,120
 4004a44:	b80b883a 	mov	r5,r23
 4004a48:	400a3f80 	call	400a3f8 <__sprint_r>
 4004a4c:	1039ed1e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004a50:	d8802617 	ldw	r2,152(sp)
 4004a54:	d8c02017 	ldw	r3,128(sp)
 4004a58:	da000404 	addi	r8,sp,16
 4004a5c:	003e1006 	br	40042a0 <__alt_data_end+0xfc0042a0>
 4004a60:	00800044 	movi	r2,1
 4004a64:	10803fcc 	andi	r2,r2,255
 4004a68:	00c00044 	movi	r3,1
 4004a6c:	10fa3526 	beq	r2,r3,4003344 <__alt_data_end+0xfc003344>
 4004a70:	00c00084 	movi	r3,2
 4004a74:	10fbcb26 	beq	r2,r3,40039a4 <__alt_data_end+0xfc0039a4>
 4004a78:	003a8f06 	br	40034b8 <__alt_data_end+0xfc0034b8>
 4004a7c:	010100f4 	movhi	r4,1027
 4004a80:	210b7284 	addi	r4,r4,11722
 4004a84:	d9003515 	stw	r4,212(sp)
 4004a88:	003b7606 	br	4003864 <__alt_data_end+0xfc003864>
 4004a8c:	d8802917 	ldw	r2,164(sp)
 4004a90:	00c00184 	movi	r3,6
 4004a94:	1880012e 	bgeu	r3,r2,4004a9c <___vfprintf_internal_r+0x1ca0>
 4004a98:	1805883a 	mov	r2,r3
 4004a9c:	d8802e15 	stw	r2,184(sp)
 4004aa0:	1000ef16 	blt	r2,zero,4004e60 <___vfprintf_internal_r+0x2064>
 4004aa4:	040100f4 	movhi	r16,1027
 4004aa8:	d8802a15 	stw	r2,168(sp)
 4004aac:	dcc02d15 	stw	r19,180(sp)
 4004ab0:	d8002915 	stw	zero,164(sp)
 4004ab4:	d8003215 	stw	zero,200(sp)
 4004ab8:	840b6c04 	addi	r16,r16,11696
 4004abc:	0039883a 	mov	fp,zero
 4004ac0:	003aa206 	br	400354c <__alt_data_end+0xfc00354c>
 4004ac4:	0021883a 	mov	r16,zero
 4004ac8:	003e0706 	br	40042e8 <__alt_data_end+0xfc0042e8>
 4004acc:	d9002c17 	ldw	r4,176(sp)
 4004ad0:	d9801e04 	addi	r6,sp,120
 4004ad4:	b80b883a 	mov	r5,r23
 4004ad8:	400a3f80 	call	400a3f8 <__sprint_r>
 4004adc:	1039c91e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004ae0:	d8802617 	ldw	r2,152(sp)
 4004ae4:	d9403317 	ldw	r5,204(sp)
 4004ae8:	d8c02017 	ldw	r3,128(sp)
 4004aec:	da000404 	addi	r8,sp,16
 4004af0:	2885c83a 	sub	r2,r5,r2
 4004af4:	003dfb06 	br	40042e4 <__alt_data_end+0xfc0042e4>
 4004af8:	9080004c 	andi	r2,r18,1
 4004afc:	103e8f1e 	bne	r2,zero,400453c <__alt_data_end+0xfc00453c>
 4004b00:	d8802117 	ldw	r2,132(sp)
 4004b04:	003e9e06 	br	4004580 <__alt_data_end+0xfc004580>
 4004b08:	1025883a 	mov	r18,r2
 4004b0c:	0039883a 	mov	fp,zero
 4004b10:	00800084 	movi	r2,2
 4004b14:	003fd306 	br	4004a64 <__alt_data_end+0xfc004a64>
 4004b18:	07000b44 	movi	fp,45
 4004b1c:	df002785 	stb	fp,158(sp)
 4004b20:	003a4006 	br	4003424 <__alt_data_end+0xfc003424>
 4004b24:	00c00b44 	movi	r3,45
 4004b28:	d8c02785 	stb	r3,158(sp)
 4004b2c:	d8802a15 	stw	r2,168(sp)
 4004b30:	dc802b17 	ldw	r18,172(sp)
 4004b34:	d8002915 	stw	zero,164(sp)
 4004b38:	07000b44 	movi	fp,45
 4004b3c:	003a8006 	br	4003540 <__alt_data_end+0xfc003540>
 4004b40:	040100f4 	movhi	r16,1027
 4004b44:	840b6104 	addi	r16,r16,11652
 4004b48:	003f4706 	br	4004868 <__alt_data_end+0xfc004868>
 4004b4c:	d8c02d17 	ldw	r3,180(sp)
 4004b50:	d9002f17 	ldw	r4,188(sp)
 4004b54:	18800017 	ldw	r2,0(r3)
 4004b58:	18c00104 	addi	r3,r3,4
 4004b5c:	d8c02d15 	stw	r3,180(sp)
 4004b60:	11000015 	stw	r4,0(r2)
 4004b64:	0038dd06 	br	4002edc <__alt_data_end+0xfc002edc>
 4004b68:	dd802617 	ldw	r22,152(sp)
 4004b6c:	00bfff44 	movi	r2,-3
 4004b70:	b0801c16 	blt	r22,r2,4004be4 <___vfprintf_internal_r+0x1de8>
 4004b74:	d9402917 	ldw	r5,164(sp)
 4004b78:	2d801a16 	blt	r5,r22,4004be4 <___vfprintf_internal_r+0x1de8>
 4004b7c:	dd803215 	stw	r22,200(sp)
 4004b80:	003e8906 	br	40045a8 <__alt_data_end+0xfc0045a8>
 4004b84:	010100f4 	movhi	r4,1027
 4004b88:	210b6e84 	addi	r4,r4,11706
 4004b8c:	d9002b15 	stw	r4,172(sp)
 4004b90:	003c9106 	br	4003dd8 <__alt_data_end+0xfc003dd8>
 4004b94:	e005883a 	mov	r2,fp
 4004b98:	003e7906 	br	4004580 <__alt_data_end+0xfc004580>
 4004b9c:	d9402917 	ldw	r5,164(sp)
 4004ba0:	df002783 	ldbu	fp,158(sp)
 4004ba4:	dcc02d15 	stw	r19,180(sp)
 4004ba8:	d9402a15 	stw	r5,168(sp)
 4004bac:	d9402e15 	stw	r5,184(sp)
 4004bb0:	d8002915 	stw	zero,164(sp)
 4004bb4:	d8003215 	stw	zero,200(sp)
 4004bb8:	003a5d06 	br	4003530 <__alt_data_end+0xfc003530>
 4004bbc:	9080004c 	andi	r2,r18,1
 4004bc0:	0039883a 	mov	fp,zero
 4004bc4:	10000426 	beq	r2,zero,4004bd8 <___vfprintf_internal_r+0x1ddc>
 4004bc8:	00800c04 	movi	r2,48
 4004bcc:	dc001dc4 	addi	r16,sp,119
 4004bd0:	d8801dc5 	stb	r2,119(sp)
 4004bd4:	003b8006 	br	40039d8 <__alt_data_end+0xfc0039d8>
 4004bd8:	d8002e15 	stw	zero,184(sp)
 4004bdc:	dc001e04 	addi	r16,sp,120
 4004be0:	003a4d06 	br	4003518 <__alt_data_end+0xfc003518>
 4004be4:	8c7fff84 	addi	r17,r17,-2
 4004be8:	b5bfffc4 	addi	r22,r22,-1
 4004bec:	dd802615 	stw	r22,152(sp)
 4004bf0:	dc4022c5 	stb	r17,139(sp)
 4004bf4:	b000bf16 	blt	r22,zero,4004ef4 <___vfprintf_internal_r+0x20f8>
 4004bf8:	00800ac4 	movi	r2,43
 4004bfc:	d8802305 	stb	r2,140(sp)
 4004c00:	00800244 	movi	r2,9
 4004c04:	15807016 	blt	r2,r22,4004dc8 <___vfprintf_internal_r+0x1fcc>
 4004c08:	00800c04 	movi	r2,48
 4004c0c:	b5800c04 	addi	r22,r22,48
 4004c10:	d8802345 	stb	r2,141(sp)
 4004c14:	dd802385 	stb	r22,142(sp)
 4004c18:	d88023c4 	addi	r2,sp,143
 4004c1c:	df0022c4 	addi	fp,sp,139
 4004c20:	d8c03317 	ldw	r3,204(sp)
 4004c24:	1739c83a 	sub	fp,r2,fp
 4004c28:	d9003317 	ldw	r4,204(sp)
 4004c2c:	e0c7883a 	add	r3,fp,r3
 4004c30:	df003a15 	stw	fp,232(sp)
 4004c34:	d8c02e15 	stw	r3,184(sp)
 4004c38:	00800044 	movi	r2,1
 4004c3c:	1100b30e 	bge	r2,r4,4004f0c <___vfprintf_internal_r+0x2110>
 4004c40:	d8c02e17 	ldw	r3,184(sp)
 4004c44:	18c00044 	addi	r3,r3,1
 4004c48:	d8c02e15 	stw	r3,184(sp)
 4004c4c:	1805883a 	mov	r2,r3
 4004c50:	1800ac16 	blt	r3,zero,4004f04 <___vfprintf_internal_r+0x2108>
 4004c54:	d8003215 	stw	zero,200(sp)
 4004c58:	003e5d06 	br	40045d0 <__alt_data_end+0xfc0045d0>
 4004c5c:	d9002c17 	ldw	r4,176(sp)
 4004c60:	d9801e04 	addi	r6,sp,120
 4004c64:	b80b883a 	mov	r5,r23
 4004c68:	400a3f80 	call	400a3f8 <__sprint_r>
 4004c6c:	1039651e 	bne	r2,zero,4003204 <__alt_data_end+0xfc003204>
 4004c70:	dc402617 	ldw	r17,152(sp)
 4004c74:	d8c02017 	ldw	r3,128(sp)
 4004c78:	d8801f17 	ldw	r2,124(sp)
 4004c7c:	da000404 	addi	r8,sp,16
 4004c80:	003ed606 	br	40047dc <__alt_data_end+0xfc0047dc>
 4004c84:	582b883a 	mov	r21,r11
 4004c88:	d8002915 	stw	zero,164(sp)
 4004c8c:	0038bd06 	br	4002f84 <__alt_data_end+0xfc002f84>
 4004c90:	d8802917 	ldw	r2,164(sp)
 4004c94:	103e071e 	bne	r2,zero,40044b4 <__alt_data_end+0xfc0044b4>
 4004c98:	dc002915 	stw	r16,164(sp)
 4004c9c:	003e0506 	br	40044b4 <__alt_data_end+0xfc0044b4>
 4004ca0:	d9002917 	ldw	r4,164(sp)
 4004ca4:	20c00044 	addi	r3,r4,1
 4004ca8:	003e0f06 	br	40044e8 <__alt_data_end+0xfc0044e8>
 4004cac:	01400184 	movi	r5,6
 4004cb0:	d9402915 	stw	r5,164(sp)
 4004cb4:	003dff06 	br	40044b4 <__alt_data_end+0xfc0044b4>
 4004cb8:	d8802104 	addi	r2,sp,132
 4004cbc:	d8800315 	stw	r2,12(sp)
 4004cc0:	d8802504 	addi	r2,sp,148
 4004cc4:	d8800215 	stw	r2,8(sp)
 4004cc8:	d8802604 	addi	r2,sp,152
 4004ccc:	d8800115 	stw	r2,4(sp)
 4004cd0:	d8802917 	ldw	r2,164(sp)
 4004cd4:	d9403617 	ldw	r5,216(sp)
 4004cd8:	d9002c17 	ldw	r4,176(sp)
 4004cdc:	d8800015 	stw	r2,0(sp)
 4004ce0:	01c000c4 	movi	r7,3
 4004ce4:	980d883a 	mov	r6,r19
 4004ce8:	da003d15 	stw	r8,244(sp)
 4004cec:	40054200 	call	4005420 <_dtoa_r>
 4004cf0:	d8c02917 	ldw	r3,164(sp)
 4004cf4:	da003d17 	ldw	r8,244(sp)
 4004cf8:	1021883a 	mov	r16,r2
 4004cfc:	10f9883a 	add	fp,r2,r3
 4004d00:	81000007 	ldb	r4,0(r16)
 4004d04:	00800c04 	movi	r2,48
 4004d08:	20805e26 	beq	r4,r2,4004e84 <___vfprintf_internal_r+0x2088>
 4004d0c:	d8c02617 	ldw	r3,152(sp)
 4004d10:	e0f9883a 	add	fp,fp,r3
 4004d14:	003e0a06 	br	4004540 <__alt_data_end+0xfc004540>
 4004d18:	00c00b44 	movi	r3,45
 4004d1c:	24e0003c 	xorhi	r19,r4,32768
 4004d20:	d8c02a05 	stb	r3,168(sp)
 4004d24:	003de906 	br	40044cc <__alt_data_end+0xfc0044cc>
 4004d28:	d8c03217 	ldw	r3,200(sp)
 4004d2c:	00c07a0e 	bge	zero,r3,4004f18 <___vfprintf_internal_r+0x211c>
 4004d30:	00800044 	movi	r2,1
 4004d34:	d9003317 	ldw	r4,204(sp)
 4004d38:	1105883a 	add	r2,r2,r4
 4004d3c:	d8802e15 	stw	r2,184(sp)
 4004d40:	10004e16 	blt	r2,zero,4004e7c <___vfprintf_internal_r+0x2080>
 4004d44:	044019c4 	movi	r17,103
 4004d48:	003e2106 	br	40045d0 <__alt_data_end+0xfc0045d0>
 4004d4c:	d9002917 	ldw	r4,164(sp)
 4004d50:	d8802104 	addi	r2,sp,132
 4004d54:	d8800315 	stw	r2,12(sp)
 4004d58:	d9000015 	stw	r4,0(sp)
 4004d5c:	d8802504 	addi	r2,sp,148
 4004d60:	d9403617 	ldw	r5,216(sp)
 4004d64:	d9002c17 	ldw	r4,176(sp)
 4004d68:	d8800215 	stw	r2,8(sp)
 4004d6c:	d8802604 	addi	r2,sp,152
 4004d70:	d8800115 	stw	r2,4(sp)
 4004d74:	01c000c4 	movi	r7,3
 4004d78:	980d883a 	mov	r6,r19
 4004d7c:	da003d15 	stw	r8,244(sp)
 4004d80:	40054200 	call	4005420 <_dtoa_r>
 4004d84:	d8c02917 	ldw	r3,164(sp)
 4004d88:	da003d17 	ldw	r8,244(sp)
 4004d8c:	1021883a 	mov	r16,r2
 4004d90:	00801184 	movi	r2,70
 4004d94:	80f9883a 	add	fp,r16,r3
 4004d98:	88bfd926 	beq	r17,r2,4004d00 <__alt_data_end+0xfc004d00>
 4004d9c:	003de806 	br	4004540 <__alt_data_end+0xfc004540>
 4004da0:	d9002917 	ldw	r4,164(sp)
 4004da4:	00c04d0e 	bge	zero,r3,4004edc <___vfprintf_internal_r+0x20e0>
 4004da8:	2000441e 	bne	r4,zero,4004ebc <___vfprintf_internal_r+0x20c0>
 4004dac:	9480004c 	andi	r18,r18,1
 4004db0:	9000421e 	bne	r18,zero,4004ebc <___vfprintf_internal_r+0x20c0>
 4004db4:	1805883a 	mov	r2,r3
 4004db8:	18007016 	blt	r3,zero,4004f7c <___vfprintf_internal_r+0x2180>
 4004dbc:	d8c03217 	ldw	r3,200(sp)
 4004dc0:	d8c02e15 	stw	r3,184(sp)
 4004dc4:	003e0206 	br	40045d0 <__alt_data_end+0xfc0045d0>
 4004dc8:	df0022c4 	addi	fp,sp,139
 4004dcc:	dc002915 	stw	r16,164(sp)
 4004dd0:	4027883a 	mov	r19,r8
 4004dd4:	e021883a 	mov	r16,fp
 4004dd8:	b009883a 	mov	r4,r22
 4004ddc:	01400284 	movi	r5,10
 4004de0:	4002af40 	call	4002af4 <__modsi3>
 4004de4:	10800c04 	addi	r2,r2,48
 4004de8:	843fffc4 	addi	r16,r16,-1
 4004dec:	b009883a 	mov	r4,r22
 4004df0:	01400284 	movi	r5,10
 4004df4:	80800005 	stb	r2,0(r16)
 4004df8:	4002a700 	call	4002a70 <__divsi3>
 4004dfc:	102d883a 	mov	r22,r2
 4004e00:	00800244 	movi	r2,9
 4004e04:	15bff416 	blt	r2,r22,4004dd8 <__alt_data_end+0xfc004dd8>
 4004e08:	9811883a 	mov	r8,r19
 4004e0c:	b0800c04 	addi	r2,r22,48
 4004e10:	8027883a 	mov	r19,r16
 4004e14:	997fffc4 	addi	r5,r19,-1
 4004e18:	98bfffc5 	stb	r2,-1(r19)
 4004e1c:	dc002917 	ldw	r16,164(sp)
 4004e20:	2f006a2e 	bgeu	r5,fp,4004fcc <___vfprintf_internal_r+0x21d0>
 4004e24:	d9c02384 	addi	r7,sp,142
 4004e28:	3ccfc83a 	sub	r7,r7,r19
 4004e2c:	d9002344 	addi	r4,sp,141
 4004e30:	e1cf883a 	add	r7,fp,r7
 4004e34:	00000106 	br	4004e3c <___vfprintf_internal_r+0x2040>
 4004e38:	28800003 	ldbu	r2,0(r5)
 4004e3c:	20800005 	stb	r2,0(r4)
 4004e40:	21000044 	addi	r4,r4,1
 4004e44:	29400044 	addi	r5,r5,1
 4004e48:	393ffb1e 	bne	r7,r4,4004e38 <__alt_data_end+0xfc004e38>
 4004e4c:	d8802304 	addi	r2,sp,140
 4004e50:	14c5c83a 	sub	r2,r2,r19
 4004e54:	d8c02344 	addi	r3,sp,141
 4004e58:	1885883a 	add	r2,r3,r2
 4004e5c:	003f7006 	br	4004c20 <__alt_data_end+0xfc004c20>
 4004e60:	0005883a 	mov	r2,zero
 4004e64:	003f0f06 	br	4004aa4 <__alt_data_end+0xfc004aa4>
 4004e68:	d8c03217 	ldw	r3,200(sp)
 4004e6c:	18c00044 	addi	r3,r3,1
 4004e70:	d8c02e15 	stw	r3,184(sp)
 4004e74:	1805883a 	mov	r2,r3
 4004e78:	183fb20e 	bge	r3,zero,4004d44 <__alt_data_end+0xfc004d44>
 4004e7c:	0005883a 	mov	r2,zero
 4004e80:	003fb006 	br	4004d44 <__alt_data_end+0xfc004d44>
 4004e84:	d9003617 	ldw	r4,216(sp)
 4004e88:	000d883a 	mov	r6,zero
 4004e8c:	000f883a 	mov	r7,zero
 4004e90:	980b883a 	mov	r5,r19
 4004e94:	d8c03c15 	stw	r3,240(sp)
 4004e98:	da003d15 	stw	r8,244(sp)
 4004e9c:	400debc0 	call	400debc <__eqdf2>
 4004ea0:	d8c03c17 	ldw	r3,240(sp)
 4004ea4:	da003d17 	ldw	r8,244(sp)
 4004ea8:	103f9826 	beq	r2,zero,4004d0c <__alt_data_end+0xfc004d0c>
 4004eac:	00800044 	movi	r2,1
 4004eb0:	10c7c83a 	sub	r3,r2,r3
 4004eb4:	d8c02615 	stw	r3,152(sp)
 4004eb8:	003f9506 	br	4004d10 <__alt_data_end+0xfc004d10>
 4004ebc:	d9002917 	ldw	r4,164(sp)
 4004ec0:	d8c03217 	ldw	r3,200(sp)
 4004ec4:	20800044 	addi	r2,r4,1
 4004ec8:	1885883a 	add	r2,r3,r2
 4004ecc:	d8802e15 	stw	r2,184(sp)
 4004ed0:	103dbf0e 	bge	r2,zero,40045d0 <__alt_data_end+0xfc0045d0>
 4004ed4:	0005883a 	mov	r2,zero
 4004ed8:	003dbd06 	br	40045d0 <__alt_data_end+0xfc0045d0>
 4004edc:	2000211e 	bne	r4,zero,4004f64 <___vfprintf_internal_r+0x2168>
 4004ee0:	9480004c 	andi	r18,r18,1
 4004ee4:	90001f1e 	bne	r18,zero,4004f64 <___vfprintf_internal_r+0x2168>
 4004ee8:	00800044 	movi	r2,1
 4004eec:	d8802e15 	stw	r2,184(sp)
 4004ef0:	003db706 	br	40045d0 <__alt_data_end+0xfc0045d0>
 4004ef4:	00800b44 	movi	r2,45
 4004ef8:	05adc83a 	sub	r22,zero,r22
 4004efc:	d8802305 	stb	r2,140(sp)
 4004f00:	003f3f06 	br	4004c00 <__alt_data_end+0xfc004c00>
 4004f04:	0005883a 	mov	r2,zero
 4004f08:	003f5206 	br	4004c54 <__alt_data_end+0xfc004c54>
 4004f0c:	90a4703a 	and	r18,r18,r2
 4004f10:	903f4e26 	beq	r18,zero,4004c4c <__alt_data_end+0xfc004c4c>
 4004f14:	003f4a06 	br	4004c40 <__alt_data_end+0xfc004c40>
 4004f18:	00800084 	movi	r2,2
 4004f1c:	10c5c83a 	sub	r2,r2,r3
 4004f20:	003f8406 	br	4004d34 <__alt_data_end+0xfc004d34>
 4004f24:	d8802d17 	ldw	r2,180(sp)
 4004f28:	d9002d17 	ldw	r4,180(sp)
 4004f2c:	ac400043 	ldbu	r17,1(r21)
 4004f30:	10800017 	ldw	r2,0(r2)
 4004f34:	582b883a 	mov	r21,r11
 4004f38:	d8802915 	stw	r2,164(sp)
 4004f3c:	20800104 	addi	r2,r4,4
 4004f40:	d9002917 	ldw	r4,164(sp)
 4004f44:	d8802d15 	stw	r2,180(sp)
 4004f48:	203e7a0e 	bge	r4,zero,4004934 <__alt_data_end+0xfc004934>
 4004f4c:	8c403fcc 	andi	r17,r17,255
 4004f50:	00bfffc4 	movi	r2,-1
 4004f54:	8c40201c 	xori	r17,r17,128
 4004f58:	d8802915 	stw	r2,164(sp)
 4004f5c:	8c7fe004 	addi	r17,r17,-128
 4004f60:	00380706 	br	4002f80 <__alt_data_end+0xfc002f80>
 4004f64:	d8c02917 	ldw	r3,164(sp)
 4004f68:	18c00084 	addi	r3,r3,2
 4004f6c:	d8c02e15 	stw	r3,184(sp)
 4004f70:	1805883a 	mov	r2,r3
 4004f74:	183d960e 	bge	r3,zero,40045d0 <__alt_data_end+0xfc0045d0>
 4004f78:	003fd606 	br	4004ed4 <__alt_data_end+0xfc004ed4>
 4004f7c:	0005883a 	mov	r2,zero
 4004f80:	003f8e06 	br	4004dbc <__alt_data_end+0xfc004dbc>
 4004f84:	9080004c 	andi	r2,r18,1
 4004f88:	103f811e 	bne	r2,zero,4004d90 <__alt_data_end+0xfc004d90>
 4004f8c:	d8802117 	ldw	r2,132(sp)
 4004f90:	1405c83a 	sub	r2,r2,r16
 4004f94:	d8803315 	stw	r2,204(sp)
 4004f98:	b47ef326 	beq	r22,r17,4004b68 <__alt_data_end+0xfc004b68>
 4004f9c:	dd802617 	ldw	r22,152(sp)
 4004fa0:	003f1106 	br	4004be8 <__alt_data_end+0xfc004be8>
 4004fa4:	d9c02785 	stb	r7,158(sp)
 4004fa8:	00390406 	br	40033bc <__alt_data_end+0xfc0033bc>
 4004fac:	d9c02785 	stb	r7,158(sp)
 4004fb0:	0038d306 	br	4003300 <__alt_data_end+0xfc003300>
 4004fb4:	d9c02785 	stb	r7,158(sp)
 4004fb8:	003a6106 	br	4003940 <__alt_data_end+0xfc003940>
 4004fbc:	d9c02785 	stb	r7,158(sp)
 4004fc0:	003af806 	br	4003ba4 <__alt_data_end+0xfc003ba4>
 4004fc4:	0005883a 	mov	r2,zero
 4004fc8:	003d7e06 	br	40045c4 <__alt_data_end+0xfc0045c4>
 4004fcc:	d8802344 	addi	r2,sp,141
 4004fd0:	003f1306 	br	4004c20 <__alt_data_end+0xfc004c20>
 4004fd4:	d9c02785 	stb	r7,158(sp)
 4004fd8:	00392306 	br	4003468 <__alt_data_end+0xfc003468>
 4004fdc:	d9c02785 	stb	r7,158(sp)
 4004fe0:	003aa906 	br	4003a88 <__alt_data_end+0xfc003a88>
 4004fe4:	d9c02785 	stb	r7,158(sp)
 4004fe8:	003a3d06 	br	40038e0 <__alt_data_end+0xfc0038e0>
 4004fec:	d9c02785 	stb	r7,158(sp)
 4004ff0:	003aca06 	br	4003b1c <__alt_data_end+0xfc003b1c>

04004ff4 <__vfprintf_internal>:
 4004ff4:	008100f4 	movhi	r2,1027
 4004ff8:	1098bc04 	addi	r2,r2,25328
 4004ffc:	300f883a 	mov	r7,r6
 4005000:	280d883a 	mov	r6,r5
 4005004:	200b883a 	mov	r5,r4
 4005008:	11000017 	ldw	r4,0(r2)
 400500c:	4002dfc1 	jmpi	4002dfc <___vfprintf_internal_r>

04005010 <__sbprintf>:
 4005010:	2880030b 	ldhu	r2,12(r5)
 4005014:	2ac01917 	ldw	r11,100(r5)
 4005018:	2a80038b 	ldhu	r10,14(r5)
 400501c:	2a400717 	ldw	r9,28(r5)
 4005020:	2a000917 	ldw	r8,36(r5)
 4005024:	defee204 	addi	sp,sp,-1144
 4005028:	00c10004 	movi	r3,1024
 400502c:	dc011a15 	stw	r16,1128(sp)
 4005030:	10bfff4c 	andi	r2,r2,65533
 4005034:	2821883a 	mov	r16,r5
 4005038:	d8cb883a 	add	r5,sp,r3
 400503c:	dc811c15 	stw	r18,1136(sp)
 4005040:	dc411b15 	stw	r17,1132(sp)
 4005044:	dfc11d15 	stw	ra,1140(sp)
 4005048:	2025883a 	mov	r18,r4
 400504c:	d881030d 	sth	r2,1036(sp)
 4005050:	dac11915 	stw	r11,1124(sp)
 4005054:	da81038d 	sth	r10,1038(sp)
 4005058:	da410715 	stw	r9,1052(sp)
 400505c:	da010915 	stw	r8,1060(sp)
 4005060:	dec10015 	stw	sp,1024(sp)
 4005064:	dec10415 	stw	sp,1040(sp)
 4005068:	d8c10215 	stw	r3,1032(sp)
 400506c:	d8c10515 	stw	r3,1044(sp)
 4005070:	d8010615 	stw	zero,1048(sp)
 4005074:	4002dfc0 	call	4002dfc <___vfprintf_internal_r>
 4005078:	1023883a 	mov	r17,r2
 400507c:	10000416 	blt	r2,zero,4005090 <__sbprintf+0x80>
 4005080:	d9410004 	addi	r5,sp,1024
 4005084:	9009883a 	mov	r4,r18
 4005088:	4006cc40 	call	4006cc4 <_fflush_r>
 400508c:	10000d1e 	bne	r2,zero,40050c4 <__sbprintf+0xb4>
 4005090:	d881030b 	ldhu	r2,1036(sp)
 4005094:	1080100c 	andi	r2,r2,64
 4005098:	10000326 	beq	r2,zero,40050a8 <__sbprintf+0x98>
 400509c:	8080030b 	ldhu	r2,12(r16)
 40050a0:	10801014 	ori	r2,r2,64
 40050a4:	8080030d 	sth	r2,12(r16)
 40050a8:	8805883a 	mov	r2,r17
 40050ac:	dfc11d17 	ldw	ra,1140(sp)
 40050b0:	dc811c17 	ldw	r18,1136(sp)
 40050b4:	dc411b17 	ldw	r17,1132(sp)
 40050b8:	dc011a17 	ldw	r16,1128(sp)
 40050bc:	dec11e04 	addi	sp,sp,1144
 40050c0:	f800283a 	ret
 40050c4:	047fffc4 	movi	r17,-1
 40050c8:	003ff106 	br	4005090 <__alt_data_end+0xfc005090>

040050cc <__swsetup_r>:
 40050cc:	008100f4 	movhi	r2,1027
 40050d0:	defffd04 	addi	sp,sp,-12
 40050d4:	1098bc04 	addi	r2,r2,25328
 40050d8:	dc400115 	stw	r17,4(sp)
 40050dc:	2023883a 	mov	r17,r4
 40050e0:	11000017 	ldw	r4,0(r2)
 40050e4:	dc000015 	stw	r16,0(sp)
 40050e8:	dfc00215 	stw	ra,8(sp)
 40050ec:	2821883a 	mov	r16,r5
 40050f0:	20000226 	beq	r4,zero,40050fc <__swsetup_r+0x30>
 40050f4:	20800e17 	ldw	r2,56(r4)
 40050f8:	10003126 	beq	r2,zero,40051c0 <__swsetup_r+0xf4>
 40050fc:	8080030b 	ldhu	r2,12(r16)
 4005100:	10c0020c 	andi	r3,r2,8
 4005104:	1009883a 	mov	r4,r2
 4005108:	18000f26 	beq	r3,zero,4005148 <__swsetup_r+0x7c>
 400510c:	80c00417 	ldw	r3,16(r16)
 4005110:	18001526 	beq	r3,zero,4005168 <__swsetup_r+0x9c>
 4005114:	1100004c 	andi	r4,r2,1
 4005118:	20001c1e 	bne	r4,zero,400518c <__swsetup_r+0xc0>
 400511c:	1080008c 	andi	r2,r2,2
 4005120:	1000291e 	bne	r2,zero,40051c8 <__swsetup_r+0xfc>
 4005124:	80800517 	ldw	r2,20(r16)
 4005128:	80800215 	stw	r2,8(r16)
 400512c:	18001c26 	beq	r3,zero,40051a0 <__swsetup_r+0xd4>
 4005130:	0005883a 	mov	r2,zero
 4005134:	dfc00217 	ldw	ra,8(sp)
 4005138:	dc400117 	ldw	r17,4(sp)
 400513c:	dc000017 	ldw	r16,0(sp)
 4005140:	dec00304 	addi	sp,sp,12
 4005144:	f800283a 	ret
 4005148:	2080040c 	andi	r2,r4,16
 400514c:	10002e26 	beq	r2,zero,4005208 <__swsetup_r+0x13c>
 4005150:	2080010c 	andi	r2,r4,4
 4005154:	10001e1e 	bne	r2,zero,40051d0 <__swsetup_r+0x104>
 4005158:	80c00417 	ldw	r3,16(r16)
 400515c:	20800214 	ori	r2,r4,8
 4005160:	8080030d 	sth	r2,12(r16)
 4005164:	183feb1e 	bne	r3,zero,4005114 <__alt_data_end+0xfc005114>
 4005168:	1100a00c 	andi	r4,r2,640
 400516c:	01408004 	movi	r5,512
 4005170:	217fe826 	beq	r4,r5,4005114 <__alt_data_end+0xfc005114>
 4005174:	800b883a 	mov	r5,r16
 4005178:	8809883a 	mov	r4,r17
 400517c:	4007c440 	call	4007c44 <__smakebuf_r>
 4005180:	8080030b 	ldhu	r2,12(r16)
 4005184:	80c00417 	ldw	r3,16(r16)
 4005188:	003fe206 	br	4005114 <__alt_data_end+0xfc005114>
 400518c:	80800517 	ldw	r2,20(r16)
 4005190:	80000215 	stw	zero,8(r16)
 4005194:	0085c83a 	sub	r2,zero,r2
 4005198:	80800615 	stw	r2,24(r16)
 400519c:	183fe41e 	bne	r3,zero,4005130 <__alt_data_end+0xfc005130>
 40051a0:	80c0030b 	ldhu	r3,12(r16)
 40051a4:	0005883a 	mov	r2,zero
 40051a8:	1900200c 	andi	r4,r3,128
 40051ac:	203fe126 	beq	r4,zero,4005134 <__alt_data_end+0xfc005134>
 40051b0:	18c01014 	ori	r3,r3,64
 40051b4:	80c0030d 	sth	r3,12(r16)
 40051b8:	00bfffc4 	movi	r2,-1
 40051bc:	003fdd06 	br	4005134 <__alt_data_end+0xfc005134>
 40051c0:	40070a00 	call	40070a0 <__sinit>
 40051c4:	003fcd06 	br	40050fc <__alt_data_end+0xfc0050fc>
 40051c8:	0005883a 	mov	r2,zero
 40051cc:	003fd606 	br	4005128 <__alt_data_end+0xfc005128>
 40051d0:	81400c17 	ldw	r5,48(r16)
 40051d4:	28000626 	beq	r5,zero,40051f0 <__swsetup_r+0x124>
 40051d8:	80801004 	addi	r2,r16,64
 40051dc:	28800326 	beq	r5,r2,40051ec <__swsetup_r+0x120>
 40051e0:	8809883a 	mov	r4,r17
 40051e4:	40072140 	call	4007214 <_free_r>
 40051e8:	8100030b 	ldhu	r4,12(r16)
 40051ec:	80000c15 	stw	zero,48(r16)
 40051f0:	80c00417 	ldw	r3,16(r16)
 40051f4:	00bff6c4 	movi	r2,-37
 40051f8:	1108703a 	and	r4,r2,r4
 40051fc:	80000115 	stw	zero,4(r16)
 4005200:	80c00015 	stw	r3,0(r16)
 4005204:	003fd506 	br	400515c <__alt_data_end+0xfc00515c>
 4005208:	00800244 	movi	r2,9
 400520c:	88800015 	stw	r2,0(r17)
 4005210:	20801014 	ori	r2,r4,64
 4005214:	8080030d 	sth	r2,12(r16)
 4005218:	00bfffc4 	movi	r2,-1
 400521c:	003fc506 	br	4005134 <__alt_data_end+0xfc005134>

04005220 <quorem>:
 4005220:	defff704 	addi	sp,sp,-36
 4005224:	dc800215 	stw	r18,8(sp)
 4005228:	20800417 	ldw	r2,16(r4)
 400522c:	2c800417 	ldw	r18,16(r5)
 4005230:	dfc00815 	stw	ra,32(sp)
 4005234:	ddc00715 	stw	r23,28(sp)
 4005238:	dd800615 	stw	r22,24(sp)
 400523c:	dd400515 	stw	r21,20(sp)
 4005240:	dd000415 	stw	r20,16(sp)
 4005244:	dcc00315 	stw	r19,12(sp)
 4005248:	dc400115 	stw	r17,4(sp)
 400524c:	dc000015 	stw	r16,0(sp)
 4005250:	14807116 	blt	r2,r18,4005418 <quorem+0x1f8>
 4005254:	94bfffc4 	addi	r18,r18,-1
 4005258:	94ad883a 	add	r22,r18,r18
 400525c:	b5ad883a 	add	r22,r22,r22
 4005260:	2c400504 	addi	r17,r5,20
 4005264:	8da9883a 	add	r20,r17,r22
 4005268:	25400504 	addi	r21,r4,20
 400526c:	282f883a 	mov	r23,r5
 4005270:	adad883a 	add	r22,r21,r22
 4005274:	a1400017 	ldw	r5,0(r20)
 4005278:	2021883a 	mov	r16,r4
 400527c:	b1000017 	ldw	r4,0(r22)
 4005280:	29400044 	addi	r5,r5,1
 4005284:	4002b680 	call	4002b68 <__udivsi3>
 4005288:	1027883a 	mov	r19,r2
 400528c:	10002c26 	beq	r2,zero,4005340 <quorem+0x120>
 4005290:	a813883a 	mov	r9,r21
 4005294:	880b883a 	mov	r5,r17
 4005298:	0009883a 	mov	r4,zero
 400529c:	000d883a 	mov	r6,zero
 40052a0:	2a000017 	ldw	r8,0(r5)
 40052a4:	49c00017 	ldw	r7,0(r9)
 40052a8:	29400104 	addi	r5,r5,4
 40052ac:	40bfffcc 	andi	r2,r8,65535
 40052b0:	14c5383a 	mul	r2,r2,r19
 40052b4:	4010d43a 	srli	r8,r8,16
 40052b8:	38ffffcc 	andi	r3,r7,65535
 40052bc:	1105883a 	add	r2,r2,r4
 40052c0:	1008d43a 	srli	r4,r2,16
 40052c4:	44d1383a 	mul	r8,r8,r19
 40052c8:	198d883a 	add	r6,r3,r6
 40052cc:	10ffffcc 	andi	r3,r2,65535
 40052d0:	30c7c83a 	sub	r3,r6,r3
 40052d4:	380ed43a 	srli	r7,r7,16
 40052d8:	4105883a 	add	r2,r8,r4
 40052dc:	180dd43a 	srai	r6,r3,16
 40052e0:	113fffcc 	andi	r4,r2,65535
 40052e4:	390fc83a 	sub	r7,r7,r4
 40052e8:	398d883a 	add	r6,r7,r6
 40052ec:	300e943a 	slli	r7,r6,16
 40052f0:	18ffffcc 	andi	r3,r3,65535
 40052f4:	1008d43a 	srli	r4,r2,16
 40052f8:	38ceb03a 	or	r7,r7,r3
 40052fc:	49c00015 	stw	r7,0(r9)
 4005300:	300dd43a 	srai	r6,r6,16
 4005304:	4a400104 	addi	r9,r9,4
 4005308:	a17fe52e 	bgeu	r20,r5,40052a0 <__alt_data_end+0xfc0052a0>
 400530c:	b0800017 	ldw	r2,0(r22)
 4005310:	10000b1e 	bne	r2,zero,4005340 <quorem+0x120>
 4005314:	b0bfff04 	addi	r2,r22,-4
 4005318:	a880082e 	bgeu	r21,r2,400533c <quorem+0x11c>
 400531c:	b0ffff17 	ldw	r3,-4(r22)
 4005320:	18000326 	beq	r3,zero,4005330 <quorem+0x110>
 4005324:	00000506 	br	400533c <quorem+0x11c>
 4005328:	10c00017 	ldw	r3,0(r2)
 400532c:	1800031e 	bne	r3,zero,400533c <quorem+0x11c>
 4005330:	10bfff04 	addi	r2,r2,-4
 4005334:	94bfffc4 	addi	r18,r18,-1
 4005338:	a8bffb36 	bltu	r21,r2,4005328 <__alt_data_end+0xfc005328>
 400533c:	84800415 	stw	r18,16(r16)
 4005340:	b80b883a 	mov	r5,r23
 4005344:	8009883a 	mov	r4,r16
 4005348:	40093840 	call	4009384 <__mcmp>
 400534c:	10002616 	blt	r2,zero,40053e8 <quorem+0x1c8>
 4005350:	9cc00044 	addi	r19,r19,1
 4005354:	a805883a 	mov	r2,r21
 4005358:	000b883a 	mov	r5,zero
 400535c:	11000017 	ldw	r4,0(r2)
 4005360:	89800017 	ldw	r6,0(r17)
 4005364:	10800104 	addi	r2,r2,4
 4005368:	20ffffcc 	andi	r3,r4,65535
 400536c:	194b883a 	add	r5,r3,r5
 4005370:	30ffffcc 	andi	r3,r6,65535
 4005374:	28c7c83a 	sub	r3,r5,r3
 4005378:	300cd43a 	srli	r6,r6,16
 400537c:	2008d43a 	srli	r4,r4,16
 4005380:	180bd43a 	srai	r5,r3,16
 4005384:	18ffffcc 	andi	r3,r3,65535
 4005388:	2189c83a 	sub	r4,r4,r6
 400538c:	2149883a 	add	r4,r4,r5
 4005390:	200c943a 	slli	r6,r4,16
 4005394:	8c400104 	addi	r17,r17,4
 4005398:	200bd43a 	srai	r5,r4,16
 400539c:	30c6b03a 	or	r3,r6,r3
 40053a0:	10ffff15 	stw	r3,-4(r2)
 40053a4:	a47fed2e 	bgeu	r20,r17,400535c <__alt_data_end+0xfc00535c>
 40053a8:	9485883a 	add	r2,r18,r18
 40053ac:	1085883a 	add	r2,r2,r2
 40053b0:	a887883a 	add	r3,r21,r2
 40053b4:	18800017 	ldw	r2,0(r3)
 40053b8:	10000b1e 	bne	r2,zero,40053e8 <quorem+0x1c8>
 40053bc:	18bfff04 	addi	r2,r3,-4
 40053c0:	a880082e 	bgeu	r21,r2,40053e4 <quorem+0x1c4>
 40053c4:	18ffff17 	ldw	r3,-4(r3)
 40053c8:	18000326 	beq	r3,zero,40053d8 <quorem+0x1b8>
 40053cc:	00000506 	br	40053e4 <quorem+0x1c4>
 40053d0:	10c00017 	ldw	r3,0(r2)
 40053d4:	1800031e 	bne	r3,zero,40053e4 <quorem+0x1c4>
 40053d8:	10bfff04 	addi	r2,r2,-4
 40053dc:	94bfffc4 	addi	r18,r18,-1
 40053e0:	a8bffb36 	bltu	r21,r2,40053d0 <__alt_data_end+0xfc0053d0>
 40053e4:	84800415 	stw	r18,16(r16)
 40053e8:	9805883a 	mov	r2,r19
 40053ec:	dfc00817 	ldw	ra,32(sp)
 40053f0:	ddc00717 	ldw	r23,28(sp)
 40053f4:	dd800617 	ldw	r22,24(sp)
 40053f8:	dd400517 	ldw	r21,20(sp)
 40053fc:	dd000417 	ldw	r20,16(sp)
 4005400:	dcc00317 	ldw	r19,12(sp)
 4005404:	dc800217 	ldw	r18,8(sp)
 4005408:	dc400117 	ldw	r17,4(sp)
 400540c:	dc000017 	ldw	r16,0(sp)
 4005410:	dec00904 	addi	sp,sp,36
 4005414:	f800283a 	ret
 4005418:	0005883a 	mov	r2,zero
 400541c:	003ff306 	br	40053ec <__alt_data_end+0xfc0053ec>

04005420 <_dtoa_r>:
 4005420:	20801017 	ldw	r2,64(r4)
 4005424:	deffde04 	addi	sp,sp,-136
 4005428:	df002015 	stw	fp,128(sp)
 400542c:	dcc01b15 	stw	r19,108(sp)
 4005430:	dc801a15 	stw	r18,104(sp)
 4005434:	dc401915 	stw	r17,100(sp)
 4005438:	dc001815 	stw	r16,96(sp)
 400543c:	dfc02115 	stw	ra,132(sp)
 4005440:	ddc01f15 	stw	r23,124(sp)
 4005444:	dd801e15 	stw	r22,120(sp)
 4005448:	dd401d15 	stw	r21,116(sp)
 400544c:	dd001c15 	stw	r20,112(sp)
 4005450:	d9c00315 	stw	r7,12(sp)
 4005454:	2039883a 	mov	fp,r4
 4005458:	3023883a 	mov	r17,r6
 400545c:	2825883a 	mov	r18,r5
 4005460:	dc002417 	ldw	r16,144(sp)
 4005464:	3027883a 	mov	r19,r6
 4005468:	10000826 	beq	r2,zero,400548c <_dtoa_r+0x6c>
 400546c:	21801117 	ldw	r6,68(r4)
 4005470:	00c00044 	movi	r3,1
 4005474:	100b883a 	mov	r5,r2
 4005478:	1986983a 	sll	r3,r3,r6
 400547c:	11800115 	stw	r6,4(r2)
 4005480:	10c00215 	stw	r3,8(r2)
 4005484:	4008b640 	call	4008b64 <_Bfree>
 4005488:	e0001015 	stw	zero,64(fp)
 400548c:	88002e16 	blt	r17,zero,4005548 <_dtoa_r+0x128>
 4005490:	80000015 	stw	zero,0(r16)
 4005494:	889ffc2c 	andhi	r2,r17,32752
 4005498:	00dffc34 	movhi	r3,32752
 400549c:	10c01c26 	beq	r2,r3,4005510 <_dtoa_r+0xf0>
 40054a0:	000d883a 	mov	r6,zero
 40054a4:	000f883a 	mov	r7,zero
 40054a8:	9009883a 	mov	r4,r18
 40054ac:	980b883a 	mov	r5,r19
 40054b0:	400debc0 	call	400debc <__eqdf2>
 40054b4:	10002b1e 	bne	r2,zero,4005564 <_dtoa_r+0x144>
 40054b8:	d9c02317 	ldw	r7,140(sp)
 40054bc:	00800044 	movi	r2,1
 40054c0:	38800015 	stw	r2,0(r7)
 40054c4:	d8802517 	ldw	r2,148(sp)
 40054c8:	10019e26 	beq	r2,zero,4005b44 <_dtoa_r+0x724>
 40054cc:	d8c02517 	ldw	r3,148(sp)
 40054d0:	008100f4 	movhi	r2,1027
 40054d4:	108b6e44 	addi	r2,r2,11705
 40054d8:	18800015 	stw	r2,0(r3)
 40054dc:	10bfffc4 	addi	r2,r2,-1
 40054e0:	dfc02117 	ldw	ra,132(sp)
 40054e4:	df002017 	ldw	fp,128(sp)
 40054e8:	ddc01f17 	ldw	r23,124(sp)
 40054ec:	dd801e17 	ldw	r22,120(sp)
 40054f0:	dd401d17 	ldw	r21,116(sp)
 40054f4:	dd001c17 	ldw	r20,112(sp)
 40054f8:	dcc01b17 	ldw	r19,108(sp)
 40054fc:	dc801a17 	ldw	r18,104(sp)
 4005500:	dc401917 	ldw	r17,100(sp)
 4005504:	dc001817 	ldw	r16,96(sp)
 4005508:	dec02204 	addi	sp,sp,136
 400550c:	f800283a 	ret
 4005510:	d8c02317 	ldw	r3,140(sp)
 4005514:	0089c3c4 	movi	r2,9999
 4005518:	18800015 	stw	r2,0(r3)
 400551c:	90017726 	beq	r18,zero,4005afc <_dtoa_r+0x6dc>
 4005520:	008100f4 	movhi	r2,1027
 4005524:	108b7a04 	addi	r2,r2,11752
 4005528:	d9002517 	ldw	r4,148(sp)
 400552c:	203fec26 	beq	r4,zero,40054e0 <__alt_data_end+0xfc0054e0>
 4005530:	10c000c7 	ldb	r3,3(r2)
 4005534:	1801781e 	bne	r3,zero,4005b18 <_dtoa_r+0x6f8>
 4005538:	10c000c4 	addi	r3,r2,3
 400553c:	d9802517 	ldw	r6,148(sp)
 4005540:	30c00015 	stw	r3,0(r6)
 4005544:	003fe606 	br	40054e0 <__alt_data_end+0xfc0054e0>
 4005548:	04e00034 	movhi	r19,32768
 400554c:	9cffffc4 	addi	r19,r19,-1
 4005550:	00800044 	movi	r2,1
 4005554:	8ce6703a 	and	r19,r17,r19
 4005558:	80800015 	stw	r2,0(r16)
 400555c:	9823883a 	mov	r17,r19
 4005560:	003fcc06 	br	4005494 <__alt_data_end+0xfc005494>
 4005564:	d8800204 	addi	r2,sp,8
 4005568:	d8800015 	stw	r2,0(sp)
 400556c:	d9c00104 	addi	r7,sp,4
 4005570:	900b883a 	mov	r5,r18
 4005574:	980d883a 	mov	r6,r19
 4005578:	e009883a 	mov	r4,fp
 400557c:	8820d53a 	srli	r16,r17,20
 4005580:	40097500 	call	4009750 <__d2b>
 4005584:	d8800915 	stw	r2,36(sp)
 4005588:	8001651e 	bne	r16,zero,4005b20 <_dtoa_r+0x700>
 400558c:	dd800217 	ldw	r22,8(sp)
 4005590:	dc000117 	ldw	r16,4(sp)
 4005594:	00800804 	movi	r2,32
 4005598:	b421883a 	add	r16,r22,r16
 400559c:	80c10c84 	addi	r3,r16,1074
 40055a0:	10c2d10e 	bge	r2,r3,40060e8 <_dtoa_r+0xcc8>
 40055a4:	00801004 	movi	r2,64
 40055a8:	81010484 	addi	r4,r16,1042
 40055ac:	10c7c83a 	sub	r3,r2,r3
 40055b0:	9108d83a 	srl	r4,r18,r4
 40055b4:	88e2983a 	sll	r17,r17,r3
 40055b8:	2448b03a 	or	r4,r4,r17
 40055bc:	400f2840 	call	400f284 <__floatunsidf>
 40055c0:	017f8434 	movhi	r5,65040
 40055c4:	01800044 	movi	r6,1
 40055c8:	1009883a 	mov	r4,r2
 40055cc:	194b883a 	add	r5,r3,r5
 40055d0:	843fffc4 	addi	r16,r16,-1
 40055d4:	d9801115 	stw	r6,68(sp)
 40055d8:	000d883a 	mov	r6,zero
 40055dc:	01cffe34 	movhi	r7,16376
 40055e0:	400e82c0 	call	400e82c <__subdf3>
 40055e4:	0198dbf4 	movhi	r6,25455
 40055e8:	01cff4f4 	movhi	r7,16339
 40055ec:	3190d844 	addi	r6,r6,17249
 40055f0:	39e1e9c4 	addi	r7,r7,-30809
 40055f4:	1009883a 	mov	r4,r2
 40055f8:	180b883a 	mov	r5,r3
 40055fc:	400e1140 	call	400e114 <__muldf3>
 4005600:	01a2d874 	movhi	r6,35681
 4005604:	01cff1f4 	movhi	r7,16327
 4005608:	31b22cc4 	addi	r6,r6,-14157
 400560c:	39e28a04 	addi	r7,r7,-30168
 4005610:	180b883a 	mov	r5,r3
 4005614:	1009883a 	mov	r4,r2
 4005618:	400cd280 	call	400cd28 <__adddf3>
 400561c:	8009883a 	mov	r4,r16
 4005620:	1029883a 	mov	r20,r2
 4005624:	1823883a 	mov	r17,r3
 4005628:	400f1a80 	call	400f1a8 <__floatsidf>
 400562c:	019427f4 	movhi	r6,20639
 4005630:	01cff4f4 	movhi	r7,16339
 4005634:	319e7ec4 	addi	r6,r6,31227
 4005638:	39d104c4 	addi	r7,r7,17427
 400563c:	1009883a 	mov	r4,r2
 4005640:	180b883a 	mov	r5,r3
 4005644:	400e1140 	call	400e114 <__muldf3>
 4005648:	100d883a 	mov	r6,r2
 400564c:	180f883a 	mov	r7,r3
 4005650:	a009883a 	mov	r4,r20
 4005654:	880b883a 	mov	r5,r17
 4005658:	400cd280 	call	400cd28 <__adddf3>
 400565c:	1009883a 	mov	r4,r2
 4005660:	180b883a 	mov	r5,r3
 4005664:	1029883a 	mov	r20,r2
 4005668:	1823883a 	mov	r17,r3
 400566c:	400f1280 	call	400f128 <__fixdfsi>
 4005670:	000d883a 	mov	r6,zero
 4005674:	000f883a 	mov	r7,zero
 4005678:	a009883a 	mov	r4,r20
 400567c:	880b883a 	mov	r5,r17
 4005680:	d8800515 	stw	r2,20(sp)
 4005684:	400e0200 	call	400e020 <__ledf2>
 4005688:	10028716 	blt	r2,zero,40060a8 <_dtoa_r+0xc88>
 400568c:	d8c00517 	ldw	r3,20(sp)
 4005690:	00800584 	movi	r2,22
 4005694:	10c27536 	bltu	r2,r3,400606c <_dtoa_r+0xc4c>
 4005698:	180490fa 	slli	r2,r3,3
 400569c:	00c100f4 	movhi	r3,1027
 40056a0:	18cb9604 	addi	r3,r3,11864
 40056a4:	1885883a 	add	r2,r3,r2
 40056a8:	11000017 	ldw	r4,0(r2)
 40056ac:	11400117 	ldw	r5,4(r2)
 40056b0:	900d883a 	mov	r6,r18
 40056b4:	980f883a 	mov	r7,r19
 40056b8:	400df440 	call	400df44 <__gedf2>
 40056bc:	00828d0e 	bge	zero,r2,40060f4 <_dtoa_r+0xcd4>
 40056c0:	d9000517 	ldw	r4,20(sp)
 40056c4:	d8000e15 	stw	zero,56(sp)
 40056c8:	213fffc4 	addi	r4,r4,-1
 40056cc:	d9000515 	stw	r4,20(sp)
 40056d0:	b42dc83a 	sub	r22,r22,r16
 40056d4:	b5bfffc4 	addi	r22,r22,-1
 40056d8:	b0026f16 	blt	r22,zero,4006098 <_dtoa_r+0xc78>
 40056dc:	d8000815 	stw	zero,32(sp)
 40056e0:	d9c00517 	ldw	r7,20(sp)
 40056e4:	38026416 	blt	r7,zero,4006078 <_dtoa_r+0xc58>
 40056e8:	b1ed883a 	add	r22,r22,r7
 40056ec:	d9c00d15 	stw	r7,52(sp)
 40056f0:	d8000a15 	stw	zero,40(sp)
 40056f4:	d9800317 	ldw	r6,12(sp)
 40056f8:	00800244 	movi	r2,9
 40056fc:	11811436 	bltu	r2,r6,4005b50 <_dtoa_r+0x730>
 4005700:	00800144 	movi	r2,5
 4005704:	1184e10e 	bge	r2,r6,4006a8c <_dtoa_r+0x166c>
 4005708:	31bfff04 	addi	r6,r6,-4
 400570c:	d9800315 	stw	r6,12(sp)
 4005710:	0023883a 	mov	r17,zero
 4005714:	d9800317 	ldw	r6,12(sp)
 4005718:	008000c4 	movi	r2,3
 400571c:	30836726 	beq	r6,r2,40064bc <_dtoa_r+0x109c>
 4005720:	1183410e 	bge	r2,r6,4006428 <_dtoa_r+0x1008>
 4005724:	d9c00317 	ldw	r7,12(sp)
 4005728:	00800104 	movi	r2,4
 400572c:	38827c26 	beq	r7,r2,4006120 <_dtoa_r+0xd00>
 4005730:	00800144 	movi	r2,5
 4005734:	3884c41e 	bne	r7,r2,4006a48 <_dtoa_r+0x1628>
 4005738:	00800044 	movi	r2,1
 400573c:	d8800b15 	stw	r2,44(sp)
 4005740:	d8c00517 	ldw	r3,20(sp)
 4005744:	d9002217 	ldw	r4,136(sp)
 4005748:	1907883a 	add	r3,r3,r4
 400574c:	19800044 	addi	r6,r3,1
 4005750:	d8c00c15 	stw	r3,48(sp)
 4005754:	d9800615 	stw	r6,24(sp)
 4005758:	0183a40e 	bge	zero,r6,40065ec <_dtoa_r+0x11cc>
 400575c:	d9800617 	ldw	r6,24(sp)
 4005760:	3021883a 	mov	r16,r6
 4005764:	e0001115 	stw	zero,68(fp)
 4005768:	008005c4 	movi	r2,23
 400576c:	1184c92e 	bgeu	r2,r6,4006a94 <_dtoa_r+0x1674>
 4005770:	00c00044 	movi	r3,1
 4005774:	00800104 	movi	r2,4
 4005778:	1085883a 	add	r2,r2,r2
 400577c:	11000504 	addi	r4,r2,20
 4005780:	180b883a 	mov	r5,r3
 4005784:	18c00044 	addi	r3,r3,1
 4005788:	313ffb2e 	bgeu	r6,r4,4005778 <__alt_data_end+0xfc005778>
 400578c:	e1401115 	stw	r5,68(fp)
 4005790:	e009883a 	mov	r4,fp
 4005794:	4008abc0 	call	4008abc <_Balloc>
 4005798:	d8800715 	stw	r2,28(sp)
 400579c:	e0801015 	stw	r2,64(fp)
 40057a0:	00800384 	movi	r2,14
 40057a4:	1400f736 	bltu	r2,r16,4005b84 <_dtoa_r+0x764>
 40057a8:	8800f626 	beq	r17,zero,4005b84 <_dtoa_r+0x764>
 40057ac:	d9c00517 	ldw	r7,20(sp)
 40057b0:	01c39a0e 	bge	zero,r7,400661c <_dtoa_r+0x11fc>
 40057b4:	388003cc 	andi	r2,r7,15
 40057b8:	100490fa 	slli	r2,r2,3
 40057bc:	382bd13a 	srai	r21,r7,4
 40057c0:	00c100f4 	movhi	r3,1027
 40057c4:	18cb9604 	addi	r3,r3,11864
 40057c8:	1885883a 	add	r2,r3,r2
 40057cc:	a8c0040c 	andi	r3,r21,16
 40057d0:	12400017 	ldw	r9,0(r2)
 40057d4:	12000117 	ldw	r8,4(r2)
 40057d8:	18037926 	beq	r3,zero,40065c0 <_dtoa_r+0x11a0>
 40057dc:	008100f4 	movhi	r2,1027
 40057e0:	108b8c04 	addi	r2,r2,11824
 40057e4:	11800817 	ldw	r6,32(r2)
 40057e8:	11c00917 	ldw	r7,36(r2)
 40057ec:	9009883a 	mov	r4,r18
 40057f0:	980b883a 	mov	r5,r19
 40057f4:	da001715 	stw	r8,92(sp)
 40057f8:	da401615 	stw	r9,88(sp)
 40057fc:	400d5d40 	call	400d5d4 <__divdf3>
 4005800:	da001717 	ldw	r8,92(sp)
 4005804:	da401617 	ldw	r9,88(sp)
 4005808:	ad4003cc 	andi	r21,r21,15
 400580c:	040000c4 	movi	r16,3
 4005810:	1023883a 	mov	r17,r2
 4005814:	1829883a 	mov	r20,r3
 4005818:	a8001126 	beq	r21,zero,4005860 <_dtoa_r+0x440>
 400581c:	05c100f4 	movhi	r23,1027
 4005820:	bdcb8c04 	addi	r23,r23,11824
 4005824:	4805883a 	mov	r2,r9
 4005828:	4007883a 	mov	r3,r8
 400582c:	a980004c 	andi	r6,r21,1
 4005830:	1009883a 	mov	r4,r2
 4005834:	a82bd07a 	srai	r21,r21,1
 4005838:	180b883a 	mov	r5,r3
 400583c:	30000426 	beq	r6,zero,4005850 <_dtoa_r+0x430>
 4005840:	b9800017 	ldw	r6,0(r23)
 4005844:	b9c00117 	ldw	r7,4(r23)
 4005848:	84000044 	addi	r16,r16,1
 400584c:	400e1140 	call	400e114 <__muldf3>
 4005850:	bdc00204 	addi	r23,r23,8
 4005854:	a83ff51e 	bne	r21,zero,400582c <__alt_data_end+0xfc00582c>
 4005858:	1013883a 	mov	r9,r2
 400585c:	1811883a 	mov	r8,r3
 4005860:	480d883a 	mov	r6,r9
 4005864:	400f883a 	mov	r7,r8
 4005868:	8809883a 	mov	r4,r17
 400586c:	a00b883a 	mov	r5,r20
 4005870:	400d5d40 	call	400d5d4 <__divdf3>
 4005874:	d8800f15 	stw	r2,60(sp)
 4005878:	d8c01015 	stw	r3,64(sp)
 400587c:	d8c00e17 	ldw	r3,56(sp)
 4005880:	18000626 	beq	r3,zero,400589c <_dtoa_r+0x47c>
 4005884:	d9000f17 	ldw	r4,60(sp)
 4005888:	d9401017 	ldw	r5,64(sp)
 400588c:	000d883a 	mov	r6,zero
 4005890:	01cffc34 	movhi	r7,16368
 4005894:	400e0200 	call	400e020 <__ledf2>
 4005898:	10040b16 	blt	r2,zero,40068c8 <_dtoa_r+0x14a8>
 400589c:	8009883a 	mov	r4,r16
 40058a0:	400f1a80 	call	400f1a8 <__floatsidf>
 40058a4:	d9800f17 	ldw	r6,60(sp)
 40058a8:	d9c01017 	ldw	r7,64(sp)
 40058ac:	1009883a 	mov	r4,r2
 40058b0:	180b883a 	mov	r5,r3
 40058b4:	400e1140 	call	400e114 <__muldf3>
 40058b8:	000d883a 	mov	r6,zero
 40058bc:	01d00734 	movhi	r7,16412
 40058c0:	1009883a 	mov	r4,r2
 40058c4:	180b883a 	mov	r5,r3
 40058c8:	400cd280 	call	400cd28 <__adddf3>
 40058cc:	1021883a 	mov	r16,r2
 40058d0:	d8800617 	ldw	r2,24(sp)
 40058d4:	047f3034 	movhi	r17,64704
 40058d8:	1c63883a 	add	r17,r3,r17
 40058dc:	10031826 	beq	r2,zero,4006540 <_dtoa_r+0x1120>
 40058e0:	d8c00517 	ldw	r3,20(sp)
 40058e4:	db000617 	ldw	r12,24(sp)
 40058e8:	d8c01315 	stw	r3,76(sp)
 40058ec:	d9000b17 	ldw	r4,44(sp)
 40058f0:	20038f26 	beq	r4,zero,4006730 <_dtoa_r+0x1310>
 40058f4:	60bfffc4 	addi	r2,r12,-1
 40058f8:	100490fa 	slli	r2,r2,3
 40058fc:	00c100f4 	movhi	r3,1027
 4005900:	18cb9604 	addi	r3,r3,11864
 4005904:	1885883a 	add	r2,r3,r2
 4005908:	11800017 	ldw	r6,0(r2)
 400590c:	11c00117 	ldw	r7,4(r2)
 4005910:	d8800717 	ldw	r2,28(sp)
 4005914:	0009883a 	mov	r4,zero
 4005918:	014ff834 	movhi	r5,16352
 400591c:	db001615 	stw	r12,88(sp)
 4005920:	15c00044 	addi	r23,r2,1
 4005924:	400d5d40 	call	400d5d4 <__divdf3>
 4005928:	800d883a 	mov	r6,r16
 400592c:	880f883a 	mov	r7,r17
 4005930:	1009883a 	mov	r4,r2
 4005934:	180b883a 	mov	r5,r3
 4005938:	400e82c0 	call	400e82c <__subdf3>
 400593c:	d9401017 	ldw	r5,64(sp)
 4005940:	d9000f17 	ldw	r4,60(sp)
 4005944:	102b883a 	mov	r21,r2
 4005948:	d8c01215 	stw	r3,72(sp)
 400594c:	400f1280 	call	400f128 <__fixdfsi>
 4005950:	1009883a 	mov	r4,r2
 4005954:	1029883a 	mov	r20,r2
 4005958:	400f1a80 	call	400f1a8 <__floatsidf>
 400595c:	d9000f17 	ldw	r4,60(sp)
 4005960:	d9401017 	ldw	r5,64(sp)
 4005964:	100d883a 	mov	r6,r2
 4005968:	180f883a 	mov	r7,r3
 400596c:	400e82c0 	call	400e82c <__subdf3>
 4005970:	1823883a 	mov	r17,r3
 4005974:	d8c00717 	ldw	r3,28(sp)
 4005978:	d9401217 	ldw	r5,72(sp)
 400597c:	a2000c04 	addi	r8,r20,48
 4005980:	1021883a 	mov	r16,r2
 4005984:	1a000005 	stb	r8,0(r3)
 4005988:	800d883a 	mov	r6,r16
 400598c:	880f883a 	mov	r7,r17
 4005990:	a809883a 	mov	r4,r21
 4005994:	4029883a 	mov	r20,r8
 4005998:	400df440 	call	400df44 <__gedf2>
 400599c:	00841d16 	blt	zero,r2,4006a14 <_dtoa_r+0x15f4>
 40059a0:	800d883a 	mov	r6,r16
 40059a4:	880f883a 	mov	r7,r17
 40059a8:	0009883a 	mov	r4,zero
 40059ac:	014ffc34 	movhi	r5,16368
 40059b0:	400e82c0 	call	400e82c <__subdf3>
 40059b4:	d9401217 	ldw	r5,72(sp)
 40059b8:	100d883a 	mov	r6,r2
 40059bc:	180f883a 	mov	r7,r3
 40059c0:	a809883a 	mov	r4,r21
 40059c4:	400df440 	call	400df44 <__gedf2>
 40059c8:	db001617 	ldw	r12,88(sp)
 40059cc:	00840e16 	blt	zero,r2,4006a08 <_dtoa_r+0x15e8>
 40059d0:	00800044 	movi	r2,1
 40059d4:	13006b0e 	bge	r2,r12,4005b84 <_dtoa_r+0x764>
 40059d8:	d9000717 	ldw	r4,28(sp)
 40059dc:	dd800f15 	stw	r22,60(sp)
 40059e0:	dcc01015 	stw	r19,64(sp)
 40059e4:	2319883a 	add	r12,r4,r12
 40059e8:	dcc01217 	ldw	r19,72(sp)
 40059ec:	602d883a 	mov	r22,r12
 40059f0:	dc801215 	stw	r18,72(sp)
 40059f4:	b825883a 	mov	r18,r23
 40059f8:	00000906 	br	4005a20 <_dtoa_r+0x600>
 40059fc:	400e82c0 	call	400e82c <__subdf3>
 4005a00:	a80d883a 	mov	r6,r21
 4005a04:	980f883a 	mov	r7,r19
 4005a08:	1009883a 	mov	r4,r2
 4005a0c:	180b883a 	mov	r5,r3
 4005a10:	400e0200 	call	400e020 <__ledf2>
 4005a14:	1003e816 	blt	r2,zero,40069b8 <_dtoa_r+0x1598>
 4005a18:	b825883a 	mov	r18,r23
 4005a1c:	bd83e926 	beq	r23,r22,40069c4 <_dtoa_r+0x15a4>
 4005a20:	a809883a 	mov	r4,r21
 4005a24:	980b883a 	mov	r5,r19
 4005a28:	000d883a 	mov	r6,zero
 4005a2c:	01d00934 	movhi	r7,16420
 4005a30:	400e1140 	call	400e114 <__muldf3>
 4005a34:	000d883a 	mov	r6,zero
 4005a38:	01d00934 	movhi	r7,16420
 4005a3c:	8009883a 	mov	r4,r16
 4005a40:	880b883a 	mov	r5,r17
 4005a44:	102b883a 	mov	r21,r2
 4005a48:	1827883a 	mov	r19,r3
 4005a4c:	400e1140 	call	400e114 <__muldf3>
 4005a50:	180b883a 	mov	r5,r3
 4005a54:	1009883a 	mov	r4,r2
 4005a58:	1821883a 	mov	r16,r3
 4005a5c:	1023883a 	mov	r17,r2
 4005a60:	400f1280 	call	400f128 <__fixdfsi>
 4005a64:	1009883a 	mov	r4,r2
 4005a68:	1029883a 	mov	r20,r2
 4005a6c:	400f1a80 	call	400f1a8 <__floatsidf>
 4005a70:	8809883a 	mov	r4,r17
 4005a74:	800b883a 	mov	r5,r16
 4005a78:	100d883a 	mov	r6,r2
 4005a7c:	180f883a 	mov	r7,r3
 4005a80:	400e82c0 	call	400e82c <__subdf3>
 4005a84:	a5000c04 	addi	r20,r20,48
 4005a88:	a80d883a 	mov	r6,r21
 4005a8c:	980f883a 	mov	r7,r19
 4005a90:	1009883a 	mov	r4,r2
 4005a94:	180b883a 	mov	r5,r3
 4005a98:	95000005 	stb	r20,0(r18)
 4005a9c:	1021883a 	mov	r16,r2
 4005aa0:	1823883a 	mov	r17,r3
 4005aa4:	400e0200 	call	400e020 <__ledf2>
 4005aa8:	bdc00044 	addi	r23,r23,1
 4005aac:	800d883a 	mov	r6,r16
 4005ab0:	880f883a 	mov	r7,r17
 4005ab4:	0009883a 	mov	r4,zero
 4005ab8:	014ffc34 	movhi	r5,16368
 4005abc:	103fcf0e 	bge	r2,zero,40059fc <__alt_data_end+0xfc0059fc>
 4005ac0:	d8c01317 	ldw	r3,76(sp)
 4005ac4:	d8c00515 	stw	r3,20(sp)
 4005ac8:	d9400917 	ldw	r5,36(sp)
 4005acc:	e009883a 	mov	r4,fp
 4005ad0:	4008b640 	call	4008b64 <_Bfree>
 4005ad4:	d9000517 	ldw	r4,20(sp)
 4005ad8:	d9802317 	ldw	r6,140(sp)
 4005adc:	d9c02517 	ldw	r7,148(sp)
 4005ae0:	b8000005 	stb	zero,0(r23)
 4005ae4:	20800044 	addi	r2,r4,1
 4005ae8:	30800015 	stw	r2,0(r6)
 4005aec:	3802aa26 	beq	r7,zero,4006598 <_dtoa_r+0x1178>
 4005af0:	3dc00015 	stw	r23,0(r7)
 4005af4:	d8800717 	ldw	r2,28(sp)
 4005af8:	003e7906 	br	40054e0 <__alt_data_end+0xfc0054e0>
 4005afc:	00800434 	movhi	r2,16
 4005b00:	10bfffc4 	addi	r2,r2,-1
 4005b04:	88a2703a 	and	r17,r17,r2
 4005b08:	883e851e 	bne	r17,zero,4005520 <__alt_data_end+0xfc005520>
 4005b0c:	008100f4 	movhi	r2,1027
 4005b10:	108b7704 	addi	r2,r2,11740
 4005b14:	003e8406 	br	4005528 <__alt_data_end+0xfc005528>
 4005b18:	10c00204 	addi	r3,r2,8
 4005b1c:	003e8706 	br	400553c <__alt_data_end+0xfc00553c>
 4005b20:	01400434 	movhi	r5,16
 4005b24:	297fffc4 	addi	r5,r5,-1
 4005b28:	994a703a 	and	r5,r19,r5
 4005b2c:	9009883a 	mov	r4,r18
 4005b30:	843f0044 	addi	r16,r16,-1023
 4005b34:	294ffc34 	orhi	r5,r5,16368
 4005b38:	dd800217 	ldw	r22,8(sp)
 4005b3c:	d8001115 	stw	zero,68(sp)
 4005b40:	003ea506 	br	40055d8 <__alt_data_end+0xfc0055d8>
 4005b44:	008100f4 	movhi	r2,1027
 4005b48:	108b6e04 	addi	r2,r2,11704
 4005b4c:	003e6406 	br	40054e0 <__alt_data_end+0xfc0054e0>
 4005b50:	e0001115 	stw	zero,68(fp)
 4005b54:	000b883a 	mov	r5,zero
 4005b58:	e009883a 	mov	r4,fp
 4005b5c:	4008abc0 	call	4008abc <_Balloc>
 4005b60:	01bfffc4 	movi	r6,-1
 4005b64:	01c00044 	movi	r7,1
 4005b68:	d8800715 	stw	r2,28(sp)
 4005b6c:	d9800c15 	stw	r6,48(sp)
 4005b70:	e0801015 	stw	r2,64(fp)
 4005b74:	d8000315 	stw	zero,12(sp)
 4005b78:	d9c00b15 	stw	r7,44(sp)
 4005b7c:	d9800615 	stw	r6,24(sp)
 4005b80:	d8002215 	stw	zero,136(sp)
 4005b84:	d8800117 	ldw	r2,4(sp)
 4005b88:	10008916 	blt	r2,zero,4005db0 <_dtoa_r+0x990>
 4005b8c:	d9000517 	ldw	r4,20(sp)
 4005b90:	00c00384 	movi	r3,14
 4005b94:	19008616 	blt	r3,r4,4005db0 <_dtoa_r+0x990>
 4005b98:	200490fa 	slli	r2,r4,3
 4005b9c:	00c100f4 	movhi	r3,1027
 4005ba0:	d9802217 	ldw	r6,136(sp)
 4005ba4:	18cb9604 	addi	r3,r3,11864
 4005ba8:	1885883a 	add	r2,r3,r2
 4005bac:	14000017 	ldw	r16,0(r2)
 4005bb0:	14400117 	ldw	r17,4(r2)
 4005bb4:	30016316 	blt	r6,zero,4006144 <_dtoa_r+0xd24>
 4005bb8:	800d883a 	mov	r6,r16
 4005bbc:	880f883a 	mov	r7,r17
 4005bc0:	9009883a 	mov	r4,r18
 4005bc4:	980b883a 	mov	r5,r19
 4005bc8:	400d5d40 	call	400d5d4 <__divdf3>
 4005bcc:	180b883a 	mov	r5,r3
 4005bd0:	1009883a 	mov	r4,r2
 4005bd4:	400f1280 	call	400f128 <__fixdfsi>
 4005bd8:	1009883a 	mov	r4,r2
 4005bdc:	102b883a 	mov	r21,r2
 4005be0:	400f1a80 	call	400f1a8 <__floatsidf>
 4005be4:	800d883a 	mov	r6,r16
 4005be8:	880f883a 	mov	r7,r17
 4005bec:	1009883a 	mov	r4,r2
 4005bf0:	180b883a 	mov	r5,r3
 4005bf4:	400e1140 	call	400e114 <__muldf3>
 4005bf8:	100d883a 	mov	r6,r2
 4005bfc:	180f883a 	mov	r7,r3
 4005c00:	9009883a 	mov	r4,r18
 4005c04:	980b883a 	mov	r5,r19
 4005c08:	400e82c0 	call	400e82c <__subdf3>
 4005c0c:	d9c00717 	ldw	r7,28(sp)
 4005c10:	1009883a 	mov	r4,r2
 4005c14:	a8800c04 	addi	r2,r21,48
 4005c18:	38800005 	stb	r2,0(r7)
 4005c1c:	3dc00044 	addi	r23,r7,1
 4005c20:	d9c00617 	ldw	r7,24(sp)
 4005c24:	01800044 	movi	r6,1
 4005c28:	180b883a 	mov	r5,r3
 4005c2c:	2005883a 	mov	r2,r4
 4005c30:	39803826 	beq	r7,r6,4005d14 <_dtoa_r+0x8f4>
 4005c34:	000d883a 	mov	r6,zero
 4005c38:	01d00934 	movhi	r7,16420
 4005c3c:	400e1140 	call	400e114 <__muldf3>
 4005c40:	000d883a 	mov	r6,zero
 4005c44:	000f883a 	mov	r7,zero
 4005c48:	1009883a 	mov	r4,r2
 4005c4c:	180b883a 	mov	r5,r3
 4005c50:	1025883a 	mov	r18,r2
 4005c54:	1827883a 	mov	r19,r3
 4005c58:	400debc0 	call	400debc <__eqdf2>
 4005c5c:	103f9a26 	beq	r2,zero,4005ac8 <__alt_data_end+0xfc005ac8>
 4005c60:	d9c00617 	ldw	r7,24(sp)
 4005c64:	d8c00717 	ldw	r3,28(sp)
 4005c68:	b829883a 	mov	r20,r23
 4005c6c:	38bfffc4 	addi	r2,r7,-1
 4005c70:	18ad883a 	add	r22,r3,r2
 4005c74:	00000a06 	br	4005ca0 <_dtoa_r+0x880>
 4005c78:	400e1140 	call	400e114 <__muldf3>
 4005c7c:	000d883a 	mov	r6,zero
 4005c80:	000f883a 	mov	r7,zero
 4005c84:	1009883a 	mov	r4,r2
 4005c88:	180b883a 	mov	r5,r3
 4005c8c:	1025883a 	mov	r18,r2
 4005c90:	1827883a 	mov	r19,r3
 4005c94:	b829883a 	mov	r20,r23
 4005c98:	400debc0 	call	400debc <__eqdf2>
 4005c9c:	103f8a26 	beq	r2,zero,4005ac8 <__alt_data_end+0xfc005ac8>
 4005ca0:	800d883a 	mov	r6,r16
 4005ca4:	880f883a 	mov	r7,r17
 4005ca8:	9009883a 	mov	r4,r18
 4005cac:	980b883a 	mov	r5,r19
 4005cb0:	400d5d40 	call	400d5d4 <__divdf3>
 4005cb4:	180b883a 	mov	r5,r3
 4005cb8:	1009883a 	mov	r4,r2
 4005cbc:	400f1280 	call	400f128 <__fixdfsi>
 4005cc0:	1009883a 	mov	r4,r2
 4005cc4:	102b883a 	mov	r21,r2
 4005cc8:	400f1a80 	call	400f1a8 <__floatsidf>
 4005ccc:	800d883a 	mov	r6,r16
 4005cd0:	880f883a 	mov	r7,r17
 4005cd4:	1009883a 	mov	r4,r2
 4005cd8:	180b883a 	mov	r5,r3
 4005cdc:	400e1140 	call	400e114 <__muldf3>
 4005ce0:	100d883a 	mov	r6,r2
 4005ce4:	180f883a 	mov	r7,r3
 4005ce8:	9009883a 	mov	r4,r18
 4005cec:	980b883a 	mov	r5,r19
 4005cf0:	400e82c0 	call	400e82c <__subdf3>
 4005cf4:	aa000c04 	addi	r8,r21,48
 4005cf8:	a2000005 	stb	r8,0(r20)
 4005cfc:	000d883a 	mov	r6,zero
 4005d00:	01d00934 	movhi	r7,16420
 4005d04:	1009883a 	mov	r4,r2
 4005d08:	180b883a 	mov	r5,r3
 4005d0c:	a5c00044 	addi	r23,r20,1
 4005d10:	b53fd91e 	bne	r22,r20,4005c78 <__alt_data_end+0xfc005c78>
 4005d14:	100d883a 	mov	r6,r2
 4005d18:	180f883a 	mov	r7,r3
 4005d1c:	1009883a 	mov	r4,r2
 4005d20:	180b883a 	mov	r5,r3
 4005d24:	400cd280 	call	400cd28 <__adddf3>
 4005d28:	100d883a 	mov	r6,r2
 4005d2c:	180f883a 	mov	r7,r3
 4005d30:	8009883a 	mov	r4,r16
 4005d34:	880b883a 	mov	r5,r17
 4005d38:	1027883a 	mov	r19,r2
 4005d3c:	1825883a 	mov	r18,r3
 4005d40:	400e0200 	call	400e020 <__ledf2>
 4005d44:	10000816 	blt	r2,zero,4005d68 <_dtoa_r+0x948>
 4005d48:	980d883a 	mov	r6,r19
 4005d4c:	900f883a 	mov	r7,r18
 4005d50:	8009883a 	mov	r4,r16
 4005d54:	880b883a 	mov	r5,r17
 4005d58:	400debc0 	call	400debc <__eqdf2>
 4005d5c:	103f5a1e 	bne	r2,zero,4005ac8 <__alt_data_end+0xfc005ac8>
 4005d60:	ad40004c 	andi	r21,r21,1
 4005d64:	a83f5826 	beq	r21,zero,4005ac8 <__alt_data_end+0xfc005ac8>
 4005d68:	bd3fffc3 	ldbu	r20,-1(r23)
 4005d6c:	b8bfffc4 	addi	r2,r23,-1
 4005d70:	1007883a 	mov	r3,r2
 4005d74:	01400e44 	movi	r5,57
 4005d78:	d9800717 	ldw	r6,28(sp)
 4005d7c:	00000506 	br	4005d94 <_dtoa_r+0x974>
 4005d80:	18ffffc4 	addi	r3,r3,-1
 4005d84:	11824726 	beq	r2,r6,40066a4 <_dtoa_r+0x1284>
 4005d88:	1d000003 	ldbu	r20,0(r3)
 4005d8c:	102f883a 	mov	r23,r2
 4005d90:	10bfffc4 	addi	r2,r2,-1
 4005d94:	a1003fcc 	andi	r4,r20,255
 4005d98:	2100201c 	xori	r4,r4,128
 4005d9c:	213fe004 	addi	r4,r4,-128
 4005da0:	217ff726 	beq	r4,r5,4005d80 <__alt_data_end+0xfc005d80>
 4005da4:	a2000044 	addi	r8,r20,1
 4005da8:	12000005 	stb	r8,0(r2)
 4005dac:	003f4606 	br	4005ac8 <__alt_data_end+0xfc005ac8>
 4005db0:	d9000b17 	ldw	r4,44(sp)
 4005db4:	2000c826 	beq	r4,zero,40060d8 <_dtoa_r+0xcb8>
 4005db8:	d9800317 	ldw	r6,12(sp)
 4005dbc:	00c00044 	movi	r3,1
 4005dc0:	1980f90e 	bge	r3,r6,40061a8 <_dtoa_r+0xd88>
 4005dc4:	d8800617 	ldw	r2,24(sp)
 4005dc8:	d8c00a17 	ldw	r3,40(sp)
 4005dcc:	157fffc4 	addi	r21,r2,-1
 4005dd0:	1d41f316 	blt	r3,r21,40065a0 <_dtoa_r+0x1180>
 4005dd4:	1d6bc83a 	sub	r21,r3,r21
 4005dd8:	d9c00617 	ldw	r7,24(sp)
 4005ddc:	3802aa16 	blt	r7,zero,4006888 <_dtoa_r+0x1468>
 4005de0:	dd000817 	ldw	r20,32(sp)
 4005de4:	d8800617 	ldw	r2,24(sp)
 4005de8:	d8c00817 	ldw	r3,32(sp)
 4005dec:	01400044 	movi	r5,1
 4005df0:	e009883a 	mov	r4,fp
 4005df4:	1887883a 	add	r3,r3,r2
 4005df8:	d8c00815 	stw	r3,32(sp)
 4005dfc:	b0ad883a 	add	r22,r22,r2
 4005e00:	4008ec80 	call	4008ec8 <__i2b>
 4005e04:	1023883a 	mov	r17,r2
 4005e08:	a0000826 	beq	r20,zero,4005e2c <_dtoa_r+0xa0c>
 4005e0c:	0580070e 	bge	zero,r22,4005e2c <_dtoa_r+0xa0c>
 4005e10:	a005883a 	mov	r2,r20
 4005e14:	b500b916 	blt	r22,r20,40060fc <_dtoa_r+0xcdc>
 4005e18:	d9000817 	ldw	r4,32(sp)
 4005e1c:	a0a9c83a 	sub	r20,r20,r2
 4005e20:	b0adc83a 	sub	r22,r22,r2
 4005e24:	2089c83a 	sub	r4,r4,r2
 4005e28:	d9000815 	stw	r4,32(sp)
 4005e2c:	d9800a17 	ldw	r6,40(sp)
 4005e30:	0181810e 	bge	zero,r6,4006438 <_dtoa_r+0x1018>
 4005e34:	d9c00b17 	ldw	r7,44(sp)
 4005e38:	3800b326 	beq	r7,zero,4006108 <_dtoa_r+0xce8>
 4005e3c:	a800b226 	beq	r21,zero,4006108 <_dtoa_r+0xce8>
 4005e40:	880b883a 	mov	r5,r17
 4005e44:	a80d883a 	mov	r6,r21
 4005e48:	e009883a 	mov	r4,fp
 4005e4c:	40090fc0 	call	40090fc <__pow5mult>
 4005e50:	d9800917 	ldw	r6,36(sp)
 4005e54:	100b883a 	mov	r5,r2
 4005e58:	e009883a 	mov	r4,fp
 4005e5c:	1023883a 	mov	r17,r2
 4005e60:	4008f040 	call	4008f04 <__multiply>
 4005e64:	1021883a 	mov	r16,r2
 4005e68:	d8800a17 	ldw	r2,40(sp)
 4005e6c:	d9400917 	ldw	r5,36(sp)
 4005e70:	e009883a 	mov	r4,fp
 4005e74:	1545c83a 	sub	r2,r2,r21
 4005e78:	d8800a15 	stw	r2,40(sp)
 4005e7c:	4008b640 	call	4008b64 <_Bfree>
 4005e80:	d8c00a17 	ldw	r3,40(sp)
 4005e84:	18009f1e 	bne	r3,zero,4006104 <_dtoa_r+0xce4>
 4005e88:	05c00044 	movi	r23,1
 4005e8c:	e009883a 	mov	r4,fp
 4005e90:	b80b883a 	mov	r5,r23
 4005e94:	4008ec80 	call	4008ec8 <__i2b>
 4005e98:	d9000d17 	ldw	r4,52(sp)
 4005e9c:	102b883a 	mov	r21,r2
 4005ea0:	2000ce26 	beq	r4,zero,40061dc <_dtoa_r+0xdbc>
 4005ea4:	200d883a 	mov	r6,r4
 4005ea8:	100b883a 	mov	r5,r2
 4005eac:	e009883a 	mov	r4,fp
 4005eb0:	40090fc0 	call	40090fc <__pow5mult>
 4005eb4:	d9800317 	ldw	r6,12(sp)
 4005eb8:	102b883a 	mov	r21,r2
 4005ebc:	b981810e 	bge	r23,r6,40064c4 <_dtoa_r+0x10a4>
 4005ec0:	0027883a 	mov	r19,zero
 4005ec4:	a8800417 	ldw	r2,16(r21)
 4005ec8:	05c00804 	movi	r23,32
 4005ecc:	10800104 	addi	r2,r2,4
 4005ed0:	1085883a 	add	r2,r2,r2
 4005ed4:	1085883a 	add	r2,r2,r2
 4005ed8:	a885883a 	add	r2,r21,r2
 4005edc:	11000017 	ldw	r4,0(r2)
 4005ee0:	4008db00 	call	4008db0 <__hi0bits>
 4005ee4:	b885c83a 	sub	r2,r23,r2
 4005ee8:	1585883a 	add	r2,r2,r22
 4005eec:	108007cc 	andi	r2,r2,31
 4005ef0:	1000b326 	beq	r2,zero,40061c0 <_dtoa_r+0xda0>
 4005ef4:	00c00804 	movi	r3,32
 4005ef8:	1887c83a 	sub	r3,r3,r2
 4005efc:	01000104 	movi	r4,4
 4005f00:	20c2cd0e 	bge	r4,r3,4006a38 <_dtoa_r+0x1618>
 4005f04:	00c00704 	movi	r3,28
 4005f08:	1885c83a 	sub	r2,r3,r2
 4005f0c:	d8c00817 	ldw	r3,32(sp)
 4005f10:	a0a9883a 	add	r20,r20,r2
 4005f14:	b0ad883a 	add	r22,r22,r2
 4005f18:	1887883a 	add	r3,r3,r2
 4005f1c:	d8c00815 	stw	r3,32(sp)
 4005f20:	d9800817 	ldw	r6,32(sp)
 4005f24:	0180040e 	bge	zero,r6,4005f38 <_dtoa_r+0xb18>
 4005f28:	800b883a 	mov	r5,r16
 4005f2c:	e009883a 	mov	r4,fp
 4005f30:	400923c0 	call	400923c <__lshift>
 4005f34:	1021883a 	mov	r16,r2
 4005f38:	0580050e 	bge	zero,r22,4005f50 <_dtoa_r+0xb30>
 4005f3c:	a80b883a 	mov	r5,r21
 4005f40:	b00d883a 	mov	r6,r22
 4005f44:	e009883a 	mov	r4,fp
 4005f48:	400923c0 	call	400923c <__lshift>
 4005f4c:	102b883a 	mov	r21,r2
 4005f50:	d9c00e17 	ldw	r7,56(sp)
 4005f54:	3801211e 	bne	r7,zero,40063dc <_dtoa_r+0xfbc>
 4005f58:	d9800617 	ldw	r6,24(sp)
 4005f5c:	0181380e 	bge	zero,r6,4006440 <_dtoa_r+0x1020>
 4005f60:	d8c00b17 	ldw	r3,44(sp)
 4005f64:	1800ab1e 	bne	r3,zero,4006214 <_dtoa_r+0xdf4>
 4005f68:	dc800717 	ldw	r18,28(sp)
 4005f6c:	dcc00617 	ldw	r19,24(sp)
 4005f70:	9029883a 	mov	r20,r18
 4005f74:	00000206 	br	4005f80 <_dtoa_r+0xb60>
 4005f78:	4008b8c0 	call	4008b8c <__multadd>
 4005f7c:	1021883a 	mov	r16,r2
 4005f80:	a80b883a 	mov	r5,r21
 4005f84:	8009883a 	mov	r4,r16
 4005f88:	40052200 	call	4005220 <quorem>
 4005f8c:	10800c04 	addi	r2,r2,48
 4005f90:	90800005 	stb	r2,0(r18)
 4005f94:	94800044 	addi	r18,r18,1
 4005f98:	9507c83a 	sub	r3,r18,r20
 4005f9c:	000f883a 	mov	r7,zero
 4005fa0:	01800284 	movi	r6,10
 4005fa4:	800b883a 	mov	r5,r16
 4005fa8:	e009883a 	mov	r4,fp
 4005fac:	1cfff216 	blt	r3,r19,4005f78 <__alt_data_end+0xfc005f78>
 4005fb0:	1011883a 	mov	r8,r2
 4005fb4:	d8800617 	ldw	r2,24(sp)
 4005fb8:	0082370e 	bge	zero,r2,4006898 <_dtoa_r+0x1478>
 4005fbc:	d9000717 	ldw	r4,28(sp)
 4005fc0:	0025883a 	mov	r18,zero
 4005fc4:	20af883a 	add	r23,r4,r2
 4005fc8:	01800044 	movi	r6,1
 4005fcc:	800b883a 	mov	r5,r16
 4005fd0:	e009883a 	mov	r4,fp
 4005fd4:	da001715 	stw	r8,92(sp)
 4005fd8:	400923c0 	call	400923c <__lshift>
 4005fdc:	a80b883a 	mov	r5,r21
 4005fe0:	1009883a 	mov	r4,r2
 4005fe4:	d8800915 	stw	r2,36(sp)
 4005fe8:	40093840 	call	4009384 <__mcmp>
 4005fec:	da001717 	ldw	r8,92(sp)
 4005ff0:	0081800e 	bge	zero,r2,40065f4 <_dtoa_r+0x11d4>
 4005ff4:	b93fffc3 	ldbu	r4,-1(r23)
 4005ff8:	b8bfffc4 	addi	r2,r23,-1
 4005ffc:	1007883a 	mov	r3,r2
 4006000:	01800e44 	movi	r6,57
 4006004:	d9c00717 	ldw	r7,28(sp)
 4006008:	00000506 	br	4006020 <_dtoa_r+0xc00>
 400600c:	18ffffc4 	addi	r3,r3,-1
 4006010:	11c12326 	beq	r2,r7,40064a0 <_dtoa_r+0x1080>
 4006014:	19000003 	ldbu	r4,0(r3)
 4006018:	102f883a 	mov	r23,r2
 400601c:	10bfffc4 	addi	r2,r2,-1
 4006020:	21403fcc 	andi	r5,r4,255
 4006024:	2940201c 	xori	r5,r5,128
 4006028:	297fe004 	addi	r5,r5,-128
 400602c:	29bff726 	beq	r5,r6,400600c <__alt_data_end+0xfc00600c>
 4006030:	21000044 	addi	r4,r4,1
 4006034:	11000005 	stb	r4,0(r2)
 4006038:	a80b883a 	mov	r5,r21
 400603c:	e009883a 	mov	r4,fp
 4006040:	4008b640 	call	4008b64 <_Bfree>
 4006044:	883ea026 	beq	r17,zero,4005ac8 <__alt_data_end+0xfc005ac8>
 4006048:	90000426 	beq	r18,zero,400605c <_dtoa_r+0xc3c>
 400604c:	94400326 	beq	r18,r17,400605c <_dtoa_r+0xc3c>
 4006050:	900b883a 	mov	r5,r18
 4006054:	e009883a 	mov	r4,fp
 4006058:	4008b640 	call	4008b64 <_Bfree>
 400605c:	880b883a 	mov	r5,r17
 4006060:	e009883a 	mov	r4,fp
 4006064:	4008b640 	call	4008b64 <_Bfree>
 4006068:	003e9706 	br	4005ac8 <__alt_data_end+0xfc005ac8>
 400606c:	01800044 	movi	r6,1
 4006070:	d9800e15 	stw	r6,56(sp)
 4006074:	003d9606 	br	40056d0 <__alt_data_end+0xfc0056d0>
 4006078:	d8800817 	ldw	r2,32(sp)
 400607c:	d8c00517 	ldw	r3,20(sp)
 4006080:	d8000d15 	stw	zero,52(sp)
 4006084:	10c5c83a 	sub	r2,r2,r3
 4006088:	00c9c83a 	sub	r4,zero,r3
 400608c:	d8800815 	stw	r2,32(sp)
 4006090:	d9000a15 	stw	r4,40(sp)
 4006094:	003d9706 	br	40056f4 <__alt_data_end+0xfc0056f4>
 4006098:	05adc83a 	sub	r22,zero,r22
 400609c:	dd800815 	stw	r22,32(sp)
 40060a0:	002d883a 	mov	r22,zero
 40060a4:	003d8e06 	br	40056e0 <__alt_data_end+0xfc0056e0>
 40060a8:	d9000517 	ldw	r4,20(sp)
 40060ac:	400f1a80 	call	400f1a8 <__floatsidf>
 40060b0:	100d883a 	mov	r6,r2
 40060b4:	180f883a 	mov	r7,r3
 40060b8:	a009883a 	mov	r4,r20
 40060bc:	880b883a 	mov	r5,r17
 40060c0:	400debc0 	call	400debc <__eqdf2>
 40060c4:	103d7126 	beq	r2,zero,400568c <__alt_data_end+0xfc00568c>
 40060c8:	d9c00517 	ldw	r7,20(sp)
 40060cc:	39ffffc4 	addi	r7,r7,-1
 40060d0:	d9c00515 	stw	r7,20(sp)
 40060d4:	003d6d06 	br	400568c <__alt_data_end+0xfc00568c>
 40060d8:	dd400a17 	ldw	r21,40(sp)
 40060dc:	dd000817 	ldw	r20,32(sp)
 40060e0:	0023883a 	mov	r17,zero
 40060e4:	003f4806 	br	4005e08 <__alt_data_end+0xfc005e08>
 40060e8:	10e3c83a 	sub	r17,r2,r3
 40060ec:	9448983a 	sll	r4,r18,r17
 40060f0:	003d3206 	br	40055bc <__alt_data_end+0xfc0055bc>
 40060f4:	d8000e15 	stw	zero,56(sp)
 40060f8:	003d7506 	br	40056d0 <__alt_data_end+0xfc0056d0>
 40060fc:	b005883a 	mov	r2,r22
 4006100:	003f4506 	br	4005e18 <__alt_data_end+0xfc005e18>
 4006104:	dc000915 	stw	r16,36(sp)
 4006108:	d9800a17 	ldw	r6,40(sp)
 400610c:	d9400917 	ldw	r5,36(sp)
 4006110:	e009883a 	mov	r4,fp
 4006114:	40090fc0 	call	40090fc <__pow5mult>
 4006118:	1021883a 	mov	r16,r2
 400611c:	003f5a06 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006120:	01c00044 	movi	r7,1
 4006124:	d9c00b15 	stw	r7,44(sp)
 4006128:	d8802217 	ldw	r2,136(sp)
 400612c:	0081280e 	bge	zero,r2,40065d0 <_dtoa_r+0x11b0>
 4006130:	100d883a 	mov	r6,r2
 4006134:	1021883a 	mov	r16,r2
 4006138:	d8800c15 	stw	r2,48(sp)
 400613c:	d8800615 	stw	r2,24(sp)
 4006140:	003d8806 	br	4005764 <__alt_data_end+0xfc005764>
 4006144:	d8800617 	ldw	r2,24(sp)
 4006148:	00be9b16 	blt	zero,r2,4005bb8 <__alt_data_end+0xfc005bb8>
 400614c:	10010f1e 	bne	r2,zero,400658c <_dtoa_r+0x116c>
 4006150:	880b883a 	mov	r5,r17
 4006154:	000d883a 	mov	r6,zero
 4006158:	01d00534 	movhi	r7,16404
 400615c:	8009883a 	mov	r4,r16
 4006160:	400e1140 	call	400e114 <__muldf3>
 4006164:	900d883a 	mov	r6,r18
 4006168:	980f883a 	mov	r7,r19
 400616c:	1009883a 	mov	r4,r2
 4006170:	180b883a 	mov	r5,r3
 4006174:	400df440 	call	400df44 <__gedf2>
 4006178:	002b883a 	mov	r21,zero
 400617c:	0023883a 	mov	r17,zero
 4006180:	1000bf16 	blt	r2,zero,4006480 <_dtoa_r+0x1060>
 4006184:	d9802217 	ldw	r6,136(sp)
 4006188:	ddc00717 	ldw	r23,28(sp)
 400618c:	018c303a 	nor	r6,zero,r6
 4006190:	d9800515 	stw	r6,20(sp)
 4006194:	a80b883a 	mov	r5,r21
 4006198:	e009883a 	mov	r4,fp
 400619c:	4008b640 	call	4008b64 <_Bfree>
 40061a0:	883e4926 	beq	r17,zero,4005ac8 <__alt_data_end+0xfc005ac8>
 40061a4:	003fad06 	br	400605c <__alt_data_end+0xfc00605c>
 40061a8:	d9c01117 	ldw	r7,68(sp)
 40061ac:	3801bc26 	beq	r7,zero,40068a0 <_dtoa_r+0x1480>
 40061b0:	10810cc4 	addi	r2,r2,1075
 40061b4:	dd400a17 	ldw	r21,40(sp)
 40061b8:	dd000817 	ldw	r20,32(sp)
 40061bc:	003f0a06 	br	4005de8 <__alt_data_end+0xfc005de8>
 40061c0:	00800704 	movi	r2,28
 40061c4:	d9000817 	ldw	r4,32(sp)
 40061c8:	a0a9883a 	add	r20,r20,r2
 40061cc:	b0ad883a 	add	r22,r22,r2
 40061d0:	2089883a 	add	r4,r4,r2
 40061d4:	d9000815 	stw	r4,32(sp)
 40061d8:	003f5106 	br	4005f20 <__alt_data_end+0xfc005f20>
 40061dc:	d8c00317 	ldw	r3,12(sp)
 40061e0:	b8c1fc0e 	bge	r23,r3,40069d4 <_dtoa_r+0x15b4>
 40061e4:	0027883a 	mov	r19,zero
 40061e8:	b805883a 	mov	r2,r23
 40061ec:	003f3e06 	br	4005ee8 <__alt_data_end+0xfc005ee8>
 40061f0:	880b883a 	mov	r5,r17
 40061f4:	e009883a 	mov	r4,fp
 40061f8:	000f883a 	mov	r7,zero
 40061fc:	01800284 	movi	r6,10
 4006200:	4008b8c0 	call	4008b8c <__multadd>
 4006204:	d9000c17 	ldw	r4,48(sp)
 4006208:	1023883a 	mov	r17,r2
 400620c:	0102040e 	bge	zero,r4,4006a20 <_dtoa_r+0x1600>
 4006210:	d9000615 	stw	r4,24(sp)
 4006214:	0500050e 	bge	zero,r20,400622c <_dtoa_r+0xe0c>
 4006218:	880b883a 	mov	r5,r17
 400621c:	a00d883a 	mov	r6,r20
 4006220:	e009883a 	mov	r4,fp
 4006224:	400923c0 	call	400923c <__lshift>
 4006228:	1023883a 	mov	r17,r2
 400622c:	9801241e 	bne	r19,zero,40066c0 <_dtoa_r+0x12a0>
 4006230:	8829883a 	mov	r20,r17
 4006234:	d9000617 	ldw	r4,24(sp)
 4006238:	dcc00717 	ldw	r19,28(sp)
 400623c:	9480004c 	andi	r18,r18,1
 4006240:	20bfffc4 	addi	r2,r4,-1
 4006244:	9885883a 	add	r2,r19,r2
 4006248:	d8800415 	stw	r2,16(sp)
 400624c:	dc800615 	stw	r18,24(sp)
 4006250:	a80b883a 	mov	r5,r21
 4006254:	8009883a 	mov	r4,r16
 4006258:	40052200 	call	4005220 <quorem>
 400625c:	880b883a 	mov	r5,r17
 4006260:	8009883a 	mov	r4,r16
 4006264:	102f883a 	mov	r23,r2
 4006268:	40093840 	call	4009384 <__mcmp>
 400626c:	a80b883a 	mov	r5,r21
 4006270:	a00d883a 	mov	r6,r20
 4006274:	e009883a 	mov	r4,fp
 4006278:	102d883a 	mov	r22,r2
 400627c:	40093e40 	call	40093e4 <__mdiff>
 4006280:	1007883a 	mov	r3,r2
 4006284:	10800317 	ldw	r2,12(r2)
 4006288:	bc800c04 	addi	r18,r23,48
 400628c:	180b883a 	mov	r5,r3
 4006290:	10004e1e 	bne	r2,zero,40063cc <_dtoa_r+0xfac>
 4006294:	8009883a 	mov	r4,r16
 4006298:	d8c01615 	stw	r3,88(sp)
 400629c:	40093840 	call	4009384 <__mcmp>
 40062a0:	d8c01617 	ldw	r3,88(sp)
 40062a4:	e009883a 	mov	r4,fp
 40062a8:	d8801615 	stw	r2,88(sp)
 40062ac:	180b883a 	mov	r5,r3
 40062b0:	4008b640 	call	4008b64 <_Bfree>
 40062b4:	d8801617 	ldw	r2,88(sp)
 40062b8:	1000041e 	bne	r2,zero,40062cc <_dtoa_r+0xeac>
 40062bc:	d9800317 	ldw	r6,12(sp)
 40062c0:	3000021e 	bne	r6,zero,40062cc <_dtoa_r+0xeac>
 40062c4:	d8c00617 	ldw	r3,24(sp)
 40062c8:	18003726 	beq	r3,zero,40063a8 <_dtoa_r+0xf88>
 40062cc:	b0002016 	blt	r22,zero,4006350 <_dtoa_r+0xf30>
 40062d0:	b000041e 	bne	r22,zero,40062e4 <_dtoa_r+0xec4>
 40062d4:	d9000317 	ldw	r4,12(sp)
 40062d8:	2000021e 	bne	r4,zero,40062e4 <_dtoa_r+0xec4>
 40062dc:	d8c00617 	ldw	r3,24(sp)
 40062e0:	18001b26 	beq	r3,zero,4006350 <_dtoa_r+0xf30>
 40062e4:	00810716 	blt	zero,r2,4006704 <_dtoa_r+0x12e4>
 40062e8:	d8c00417 	ldw	r3,16(sp)
 40062ec:	9d800044 	addi	r22,r19,1
 40062f0:	9c800005 	stb	r18,0(r19)
 40062f4:	b02f883a 	mov	r23,r22
 40062f8:	98c10626 	beq	r19,r3,4006714 <_dtoa_r+0x12f4>
 40062fc:	800b883a 	mov	r5,r16
 4006300:	000f883a 	mov	r7,zero
 4006304:	01800284 	movi	r6,10
 4006308:	e009883a 	mov	r4,fp
 400630c:	4008b8c0 	call	4008b8c <__multadd>
 4006310:	1021883a 	mov	r16,r2
 4006314:	000f883a 	mov	r7,zero
 4006318:	01800284 	movi	r6,10
 400631c:	880b883a 	mov	r5,r17
 4006320:	e009883a 	mov	r4,fp
 4006324:	8d002526 	beq	r17,r20,40063bc <_dtoa_r+0xf9c>
 4006328:	4008b8c0 	call	4008b8c <__multadd>
 400632c:	a00b883a 	mov	r5,r20
 4006330:	000f883a 	mov	r7,zero
 4006334:	01800284 	movi	r6,10
 4006338:	e009883a 	mov	r4,fp
 400633c:	1023883a 	mov	r17,r2
 4006340:	4008b8c0 	call	4008b8c <__multadd>
 4006344:	1029883a 	mov	r20,r2
 4006348:	b027883a 	mov	r19,r22
 400634c:	003fc006 	br	4006250 <__alt_data_end+0xfc006250>
 4006350:	9011883a 	mov	r8,r18
 4006354:	00800e0e 	bge	zero,r2,4006390 <_dtoa_r+0xf70>
 4006358:	800b883a 	mov	r5,r16
 400635c:	01800044 	movi	r6,1
 4006360:	e009883a 	mov	r4,fp
 4006364:	da001715 	stw	r8,92(sp)
 4006368:	400923c0 	call	400923c <__lshift>
 400636c:	a80b883a 	mov	r5,r21
 4006370:	1009883a 	mov	r4,r2
 4006374:	1021883a 	mov	r16,r2
 4006378:	40093840 	call	4009384 <__mcmp>
 400637c:	da001717 	ldw	r8,92(sp)
 4006380:	0081960e 	bge	zero,r2,40069dc <_dtoa_r+0x15bc>
 4006384:	00800e44 	movi	r2,57
 4006388:	40817026 	beq	r8,r2,400694c <_dtoa_r+0x152c>
 400638c:	ba000c44 	addi	r8,r23,49
 4006390:	8825883a 	mov	r18,r17
 4006394:	9dc00044 	addi	r23,r19,1
 4006398:	9a000005 	stb	r8,0(r19)
 400639c:	a023883a 	mov	r17,r20
 40063a0:	dc000915 	stw	r16,36(sp)
 40063a4:	003f2406 	br	4006038 <__alt_data_end+0xfc006038>
 40063a8:	00800e44 	movi	r2,57
 40063ac:	9011883a 	mov	r8,r18
 40063b0:	90816626 	beq	r18,r2,400694c <_dtoa_r+0x152c>
 40063b4:	05bff516 	blt	zero,r22,400638c <__alt_data_end+0xfc00638c>
 40063b8:	003ff506 	br	4006390 <__alt_data_end+0xfc006390>
 40063bc:	4008b8c0 	call	4008b8c <__multadd>
 40063c0:	1023883a 	mov	r17,r2
 40063c4:	1029883a 	mov	r20,r2
 40063c8:	003fdf06 	br	4006348 <__alt_data_end+0xfc006348>
 40063cc:	e009883a 	mov	r4,fp
 40063d0:	4008b640 	call	4008b64 <_Bfree>
 40063d4:	00800044 	movi	r2,1
 40063d8:	003fbc06 	br	40062cc <__alt_data_end+0xfc0062cc>
 40063dc:	a80b883a 	mov	r5,r21
 40063e0:	8009883a 	mov	r4,r16
 40063e4:	40093840 	call	4009384 <__mcmp>
 40063e8:	103edb0e 	bge	r2,zero,4005f58 <__alt_data_end+0xfc005f58>
 40063ec:	800b883a 	mov	r5,r16
 40063f0:	000f883a 	mov	r7,zero
 40063f4:	01800284 	movi	r6,10
 40063f8:	e009883a 	mov	r4,fp
 40063fc:	4008b8c0 	call	4008b8c <__multadd>
 4006400:	1021883a 	mov	r16,r2
 4006404:	d8800517 	ldw	r2,20(sp)
 4006408:	d8c00b17 	ldw	r3,44(sp)
 400640c:	10bfffc4 	addi	r2,r2,-1
 4006410:	d8800515 	stw	r2,20(sp)
 4006414:	183f761e 	bne	r3,zero,40061f0 <__alt_data_end+0xfc0061f0>
 4006418:	d9000c17 	ldw	r4,48(sp)
 400641c:	0101730e 	bge	zero,r4,40069ec <_dtoa_r+0x15cc>
 4006420:	d9000615 	stw	r4,24(sp)
 4006424:	003ed006 	br	4005f68 <__alt_data_end+0xfc005f68>
 4006428:	00800084 	movi	r2,2
 400642c:	3081861e 	bne	r6,r2,4006a48 <_dtoa_r+0x1628>
 4006430:	d8000b15 	stw	zero,44(sp)
 4006434:	003f3c06 	br	4006128 <__alt_data_end+0xfc006128>
 4006438:	dc000917 	ldw	r16,36(sp)
 400643c:	003e9206 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006440:	d9c00317 	ldw	r7,12(sp)
 4006444:	00800084 	movi	r2,2
 4006448:	11fec50e 	bge	r2,r7,4005f60 <__alt_data_end+0xfc005f60>
 400644c:	d9000617 	ldw	r4,24(sp)
 4006450:	20013c1e 	bne	r4,zero,4006944 <_dtoa_r+0x1524>
 4006454:	a80b883a 	mov	r5,r21
 4006458:	000f883a 	mov	r7,zero
 400645c:	01800144 	movi	r6,5
 4006460:	e009883a 	mov	r4,fp
 4006464:	4008b8c0 	call	4008b8c <__multadd>
 4006468:	100b883a 	mov	r5,r2
 400646c:	8009883a 	mov	r4,r16
 4006470:	102b883a 	mov	r21,r2
 4006474:	40093840 	call	4009384 <__mcmp>
 4006478:	dc000915 	stw	r16,36(sp)
 400647c:	00bf410e 	bge	zero,r2,4006184 <__alt_data_end+0xfc006184>
 4006480:	d9c00717 	ldw	r7,28(sp)
 4006484:	00800c44 	movi	r2,49
 4006488:	38800005 	stb	r2,0(r7)
 400648c:	d8800517 	ldw	r2,20(sp)
 4006490:	3dc00044 	addi	r23,r7,1
 4006494:	10800044 	addi	r2,r2,1
 4006498:	d8800515 	stw	r2,20(sp)
 400649c:	003f3d06 	br	4006194 <__alt_data_end+0xfc006194>
 40064a0:	d9800517 	ldw	r6,20(sp)
 40064a4:	d9c00717 	ldw	r7,28(sp)
 40064a8:	00800c44 	movi	r2,49
 40064ac:	31800044 	addi	r6,r6,1
 40064b0:	d9800515 	stw	r6,20(sp)
 40064b4:	38800005 	stb	r2,0(r7)
 40064b8:	003edf06 	br	4006038 <__alt_data_end+0xfc006038>
 40064bc:	d8000b15 	stw	zero,44(sp)
 40064c0:	003c9f06 	br	4005740 <__alt_data_end+0xfc005740>
 40064c4:	903e7e1e 	bne	r18,zero,4005ec0 <__alt_data_end+0xfc005ec0>
 40064c8:	00800434 	movhi	r2,16
 40064cc:	10bfffc4 	addi	r2,r2,-1
 40064d0:	9884703a 	and	r2,r19,r2
 40064d4:	1000ea1e 	bne	r2,zero,4006880 <_dtoa_r+0x1460>
 40064d8:	9cdffc2c 	andhi	r19,r19,32752
 40064dc:	9800e826 	beq	r19,zero,4006880 <_dtoa_r+0x1460>
 40064e0:	d9c00817 	ldw	r7,32(sp)
 40064e4:	b5800044 	addi	r22,r22,1
 40064e8:	04c00044 	movi	r19,1
 40064ec:	39c00044 	addi	r7,r7,1
 40064f0:	d9c00815 	stw	r7,32(sp)
 40064f4:	d8800d17 	ldw	r2,52(sp)
 40064f8:	103e721e 	bne	r2,zero,4005ec4 <__alt_data_end+0xfc005ec4>
 40064fc:	00800044 	movi	r2,1
 4006500:	003e7906 	br	4005ee8 <__alt_data_end+0xfc005ee8>
 4006504:	8009883a 	mov	r4,r16
 4006508:	400f1a80 	call	400f1a8 <__floatsidf>
 400650c:	d9800f17 	ldw	r6,60(sp)
 4006510:	d9c01017 	ldw	r7,64(sp)
 4006514:	1009883a 	mov	r4,r2
 4006518:	180b883a 	mov	r5,r3
 400651c:	400e1140 	call	400e114 <__muldf3>
 4006520:	000d883a 	mov	r6,zero
 4006524:	01d00734 	movhi	r7,16412
 4006528:	1009883a 	mov	r4,r2
 400652c:	180b883a 	mov	r5,r3
 4006530:	400cd280 	call	400cd28 <__adddf3>
 4006534:	047f3034 	movhi	r17,64704
 4006538:	1021883a 	mov	r16,r2
 400653c:	1c63883a 	add	r17,r3,r17
 4006540:	d9000f17 	ldw	r4,60(sp)
 4006544:	d9401017 	ldw	r5,64(sp)
 4006548:	000d883a 	mov	r6,zero
 400654c:	01d00534 	movhi	r7,16404
 4006550:	400e82c0 	call	400e82c <__subdf3>
 4006554:	800d883a 	mov	r6,r16
 4006558:	880f883a 	mov	r7,r17
 400655c:	1009883a 	mov	r4,r2
 4006560:	180b883a 	mov	r5,r3
 4006564:	102b883a 	mov	r21,r2
 4006568:	1829883a 	mov	r20,r3
 400656c:	400df440 	call	400df44 <__gedf2>
 4006570:	00806c16 	blt	zero,r2,4006724 <_dtoa_r+0x1304>
 4006574:	89e0003c 	xorhi	r7,r17,32768
 4006578:	800d883a 	mov	r6,r16
 400657c:	a809883a 	mov	r4,r21
 4006580:	a00b883a 	mov	r5,r20
 4006584:	400e0200 	call	400e020 <__ledf2>
 4006588:	103d7e0e 	bge	r2,zero,4005b84 <__alt_data_end+0xfc005b84>
 400658c:	002b883a 	mov	r21,zero
 4006590:	0023883a 	mov	r17,zero
 4006594:	003efb06 	br	4006184 <__alt_data_end+0xfc006184>
 4006598:	d8800717 	ldw	r2,28(sp)
 400659c:	003bd006 	br	40054e0 <__alt_data_end+0xfc0054e0>
 40065a0:	d9000a17 	ldw	r4,40(sp)
 40065a4:	d9800d17 	ldw	r6,52(sp)
 40065a8:	dd400a15 	stw	r21,40(sp)
 40065ac:	a905c83a 	sub	r2,r21,r4
 40065b0:	308d883a 	add	r6,r6,r2
 40065b4:	d9800d15 	stw	r6,52(sp)
 40065b8:	002b883a 	mov	r21,zero
 40065bc:	003e0606 	br	4005dd8 <__alt_data_end+0xfc005dd8>
 40065c0:	9023883a 	mov	r17,r18
 40065c4:	9829883a 	mov	r20,r19
 40065c8:	04000084 	movi	r16,2
 40065cc:	003c9206 	br	4005818 <__alt_data_end+0xfc005818>
 40065d0:	04000044 	movi	r16,1
 40065d4:	dc000c15 	stw	r16,48(sp)
 40065d8:	dc000615 	stw	r16,24(sp)
 40065dc:	dc002215 	stw	r16,136(sp)
 40065e0:	e0001115 	stw	zero,68(fp)
 40065e4:	000b883a 	mov	r5,zero
 40065e8:	003c6906 	br	4005790 <__alt_data_end+0xfc005790>
 40065ec:	3021883a 	mov	r16,r6
 40065f0:	003ffb06 	br	40065e0 <__alt_data_end+0xfc0065e0>
 40065f4:	1000021e 	bne	r2,zero,4006600 <_dtoa_r+0x11e0>
 40065f8:	4200004c 	andi	r8,r8,1
 40065fc:	403e7d1e 	bne	r8,zero,4005ff4 <__alt_data_end+0xfc005ff4>
 4006600:	01000c04 	movi	r4,48
 4006604:	00000106 	br	400660c <_dtoa_r+0x11ec>
 4006608:	102f883a 	mov	r23,r2
 400660c:	b8bfffc4 	addi	r2,r23,-1
 4006610:	10c00007 	ldb	r3,0(r2)
 4006614:	193ffc26 	beq	r3,r4,4006608 <__alt_data_end+0xfc006608>
 4006618:	003e8706 	br	4006038 <__alt_data_end+0xfc006038>
 400661c:	d8800517 	ldw	r2,20(sp)
 4006620:	00a3c83a 	sub	r17,zero,r2
 4006624:	8800a426 	beq	r17,zero,40068b8 <_dtoa_r+0x1498>
 4006628:	888003cc 	andi	r2,r17,15
 400662c:	100490fa 	slli	r2,r2,3
 4006630:	00c100f4 	movhi	r3,1027
 4006634:	18cb9604 	addi	r3,r3,11864
 4006638:	1885883a 	add	r2,r3,r2
 400663c:	11800017 	ldw	r6,0(r2)
 4006640:	11c00117 	ldw	r7,4(r2)
 4006644:	9009883a 	mov	r4,r18
 4006648:	980b883a 	mov	r5,r19
 400664c:	8823d13a 	srai	r17,r17,4
 4006650:	400e1140 	call	400e114 <__muldf3>
 4006654:	d8800f15 	stw	r2,60(sp)
 4006658:	d8c01015 	stw	r3,64(sp)
 400665c:	8800e826 	beq	r17,zero,4006a00 <_dtoa_r+0x15e0>
 4006660:	050100f4 	movhi	r20,1027
 4006664:	a50b8c04 	addi	r20,r20,11824
 4006668:	04000084 	movi	r16,2
 400666c:	8980004c 	andi	r6,r17,1
 4006670:	1009883a 	mov	r4,r2
 4006674:	8823d07a 	srai	r17,r17,1
 4006678:	180b883a 	mov	r5,r3
 400667c:	30000426 	beq	r6,zero,4006690 <_dtoa_r+0x1270>
 4006680:	a1800017 	ldw	r6,0(r20)
 4006684:	a1c00117 	ldw	r7,4(r20)
 4006688:	84000044 	addi	r16,r16,1
 400668c:	400e1140 	call	400e114 <__muldf3>
 4006690:	a5000204 	addi	r20,r20,8
 4006694:	883ff51e 	bne	r17,zero,400666c <__alt_data_end+0xfc00666c>
 4006698:	d8800f15 	stw	r2,60(sp)
 400669c:	d8c01015 	stw	r3,64(sp)
 40066a0:	003c7606 	br	400587c <__alt_data_end+0xfc00587c>
 40066a4:	00c00c04 	movi	r3,48
 40066a8:	10c00005 	stb	r3,0(r2)
 40066ac:	d8c00517 	ldw	r3,20(sp)
 40066b0:	bd3fffc3 	ldbu	r20,-1(r23)
 40066b4:	18c00044 	addi	r3,r3,1
 40066b8:	d8c00515 	stw	r3,20(sp)
 40066bc:	003db906 	br	4005da4 <__alt_data_end+0xfc005da4>
 40066c0:	89400117 	ldw	r5,4(r17)
 40066c4:	e009883a 	mov	r4,fp
 40066c8:	4008abc0 	call	4008abc <_Balloc>
 40066cc:	89800417 	ldw	r6,16(r17)
 40066d0:	89400304 	addi	r5,r17,12
 40066d4:	11000304 	addi	r4,r2,12
 40066d8:	31800084 	addi	r6,r6,2
 40066dc:	318d883a 	add	r6,r6,r6
 40066e0:	318d883a 	add	r6,r6,r6
 40066e4:	1027883a 	mov	r19,r2
 40066e8:	40086f00 	call	40086f0 <memcpy>
 40066ec:	01800044 	movi	r6,1
 40066f0:	980b883a 	mov	r5,r19
 40066f4:	e009883a 	mov	r4,fp
 40066f8:	400923c0 	call	400923c <__lshift>
 40066fc:	1029883a 	mov	r20,r2
 4006700:	003ecc06 	br	4006234 <__alt_data_end+0xfc006234>
 4006704:	00800e44 	movi	r2,57
 4006708:	90809026 	beq	r18,r2,400694c <_dtoa_r+0x152c>
 400670c:	92000044 	addi	r8,r18,1
 4006710:	003f1f06 	br	4006390 <__alt_data_end+0xfc006390>
 4006714:	9011883a 	mov	r8,r18
 4006718:	8825883a 	mov	r18,r17
 400671c:	a023883a 	mov	r17,r20
 4006720:	003e2906 	br	4005fc8 <__alt_data_end+0xfc005fc8>
 4006724:	002b883a 	mov	r21,zero
 4006728:	0023883a 	mov	r17,zero
 400672c:	003f5406 	br	4006480 <__alt_data_end+0xfc006480>
 4006730:	61bfffc4 	addi	r6,r12,-1
 4006734:	300490fa 	slli	r2,r6,3
 4006738:	00c100f4 	movhi	r3,1027
 400673c:	18cb9604 	addi	r3,r3,11864
 4006740:	1885883a 	add	r2,r3,r2
 4006744:	11000017 	ldw	r4,0(r2)
 4006748:	11400117 	ldw	r5,4(r2)
 400674c:	d8800717 	ldw	r2,28(sp)
 4006750:	880f883a 	mov	r7,r17
 4006754:	d9801215 	stw	r6,72(sp)
 4006758:	800d883a 	mov	r6,r16
 400675c:	db001615 	stw	r12,88(sp)
 4006760:	15c00044 	addi	r23,r2,1
 4006764:	400e1140 	call	400e114 <__muldf3>
 4006768:	d9401017 	ldw	r5,64(sp)
 400676c:	d9000f17 	ldw	r4,60(sp)
 4006770:	d8c01515 	stw	r3,84(sp)
 4006774:	d8801415 	stw	r2,80(sp)
 4006778:	400f1280 	call	400f128 <__fixdfsi>
 400677c:	1009883a 	mov	r4,r2
 4006780:	1021883a 	mov	r16,r2
 4006784:	400f1a80 	call	400f1a8 <__floatsidf>
 4006788:	d9000f17 	ldw	r4,60(sp)
 400678c:	d9401017 	ldw	r5,64(sp)
 4006790:	100d883a 	mov	r6,r2
 4006794:	180f883a 	mov	r7,r3
 4006798:	400e82c0 	call	400e82c <__subdf3>
 400679c:	1829883a 	mov	r20,r3
 40067a0:	d8c00717 	ldw	r3,28(sp)
 40067a4:	84000c04 	addi	r16,r16,48
 40067a8:	1023883a 	mov	r17,r2
 40067ac:	1c000005 	stb	r16,0(r3)
 40067b0:	db001617 	ldw	r12,88(sp)
 40067b4:	00800044 	movi	r2,1
 40067b8:	60802226 	beq	r12,r2,4006844 <_dtoa_r+0x1424>
 40067bc:	d9c00717 	ldw	r7,28(sp)
 40067c0:	8805883a 	mov	r2,r17
 40067c4:	b82b883a 	mov	r21,r23
 40067c8:	3b19883a 	add	r12,r7,r12
 40067cc:	6023883a 	mov	r17,r12
 40067d0:	a007883a 	mov	r3,r20
 40067d4:	dc800f15 	stw	r18,60(sp)
 40067d8:	000d883a 	mov	r6,zero
 40067dc:	01d00934 	movhi	r7,16420
 40067e0:	1009883a 	mov	r4,r2
 40067e4:	180b883a 	mov	r5,r3
 40067e8:	400e1140 	call	400e114 <__muldf3>
 40067ec:	180b883a 	mov	r5,r3
 40067f0:	1009883a 	mov	r4,r2
 40067f4:	1829883a 	mov	r20,r3
 40067f8:	1025883a 	mov	r18,r2
 40067fc:	400f1280 	call	400f128 <__fixdfsi>
 4006800:	1009883a 	mov	r4,r2
 4006804:	1021883a 	mov	r16,r2
 4006808:	400f1a80 	call	400f1a8 <__floatsidf>
 400680c:	100d883a 	mov	r6,r2
 4006810:	180f883a 	mov	r7,r3
 4006814:	9009883a 	mov	r4,r18
 4006818:	a00b883a 	mov	r5,r20
 400681c:	84000c04 	addi	r16,r16,48
 4006820:	400e82c0 	call	400e82c <__subdf3>
 4006824:	ad400044 	addi	r21,r21,1
 4006828:	ac3fffc5 	stb	r16,-1(r21)
 400682c:	ac7fea1e 	bne	r21,r17,40067d8 <__alt_data_end+0xfc0067d8>
 4006830:	1023883a 	mov	r17,r2
 4006834:	d8801217 	ldw	r2,72(sp)
 4006838:	dc800f17 	ldw	r18,60(sp)
 400683c:	1829883a 	mov	r20,r3
 4006840:	b8af883a 	add	r23,r23,r2
 4006844:	d9001417 	ldw	r4,80(sp)
 4006848:	d9401517 	ldw	r5,84(sp)
 400684c:	000d883a 	mov	r6,zero
 4006850:	01cff834 	movhi	r7,16352
 4006854:	400cd280 	call	400cd28 <__adddf3>
 4006858:	880d883a 	mov	r6,r17
 400685c:	a00f883a 	mov	r7,r20
 4006860:	1009883a 	mov	r4,r2
 4006864:	180b883a 	mov	r5,r3
 4006868:	400e0200 	call	400e020 <__ledf2>
 400686c:	10003e0e 	bge	r2,zero,4006968 <_dtoa_r+0x1548>
 4006870:	d9001317 	ldw	r4,76(sp)
 4006874:	bd3fffc3 	ldbu	r20,-1(r23)
 4006878:	d9000515 	stw	r4,20(sp)
 400687c:	003d3b06 	br	4005d6c <__alt_data_end+0xfc005d6c>
 4006880:	0027883a 	mov	r19,zero
 4006884:	003f1b06 	br	40064f4 <__alt_data_end+0xfc0064f4>
 4006888:	d8800817 	ldw	r2,32(sp)
 400688c:	11e9c83a 	sub	r20,r2,r7
 4006890:	0005883a 	mov	r2,zero
 4006894:	003d5406 	br	4005de8 <__alt_data_end+0xfc005de8>
 4006898:	00800044 	movi	r2,1
 400689c:	003dc706 	br	4005fbc <__alt_data_end+0xfc005fbc>
 40068a0:	d8c00217 	ldw	r3,8(sp)
 40068a4:	00800d84 	movi	r2,54
 40068a8:	dd400a17 	ldw	r21,40(sp)
 40068ac:	10c5c83a 	sub	r2,r2,r3
 40068b0:	dd000817 	ldw	r20,32(sp)
 40068b4:	003d4c06 	br	4005de8 <__alt_data_end+0xfc005de8>
 40068b8:	dc800f15 	stw	r18,60(sp)
 40068bc:	dcc01015 	stw	r19,64(sp)
 40068c0:	04000084 	movi	r16,2
 40068c4:	003bed06 	br	400587c <__alt_data_end+0xfc00587c>
 40068c8:	d9000617 	ldw	r4,24(sp)
 40068cc:	203f0d26 	beq	r4,zero,4006504 <__alt_data_end+0xfc006504>
 40068d0:	d9800c17 	ldw	r6,48(sp)
 40068d4:	01bcab0e 	bge	zero,r6,4005b84 <__alt_data_end+0xfc005b84>
 40068d8:	d9401017 	ldw	r5,64(sp)
 40068dc:	d9000f17 	ldw	r4,60(sp)
 40068e0:	000d883a 	mov	r6,zero
 40068e4:	01d00934 	movhi	r7,16420
 40068e8:	400e1140 	call	400e114 <__muldf3>
 40068ec:	81000044 	addi	r4,r16,1
 40068f0:	d8800f15 	stw	r2,60(sp)
 40068f4:	d8c01015 	stw	r3,64(sp)
 40068f8:	400f1a80 	call	400f1a8 <__floatsidf>
 40068fc:	d9800f17 	ldw	r6,60(sp)
 4006900:	d9c01017 	ldw	r7,64(sp)
 4006904:	1009883a 	mov	r4,r2
 4006908:	180b883a 	mov	r5,r3
 400690c:	400e1140 	call	400e114 <__muldf3>
 4006910:	01d00734 	movhi	r7,16412
 4006914:	000d883a 	mov	r6,zero
 4006918:	1009883a 	mov	r4,r2
 400691c:	180b883a 	mov	r5,r3
 4006920:	400cd280 	call	400cd28 <__adddf3>
 4006924:	d9c00517 	ldw	r7,20(sp)
 4006928:	047f3034 	movhi	r17,64704
 400692c:	1021883a 	mov	r16,r2
 4006930:	39ffffc4 	addi	r7,r7,-1
 4006934:	d9c01315 	stw	r7,76(sp)
 4006938:	1c63883a 	add	r17,r3,r17
 400693c:	db000c17 	ldw	r12,48(sp)
 4006940:	003bea06 	br	40058ec <__alt_data_end+0xfc0058ec>
 4006944:	dc000915 	stw	r16,36(sp)
 4006948:	003e0e06 	br	4006184 <__alt_data_end+0xfc006184>
 400694c:	01000e44 	movi	r4,57
 4006950:	8825883a 	mov	r18,r17
 4006954:	9dc00044 	addi	r23,r19,1
 4006958:	99000005 	stb	r4,0(r19)
 400695c:	a023883a 	mov	r17,r20
 4006960:	dc000915 	stw	r16,36(sp)
 4006964:	003da406 	br	4005ff8 <__alt_data_end+0xfc005ff8>
 4006968:	d9801417 	ldw	r6,80(sp)
 400696c:	d9c01517 	ldw	r7,84(sp)
 4006970:	0009883a 	mov	r4,zero
 4006974:	014ff834 	movhi	r5,16352
 4006978:	400e82c0 	call	400e82c <__subdf3>
 400697c:	880d883a 	mov	r6,r17
 4006980:	a00f883a 	mov	r7,r20
 4006984:	1009883a 	mov	r4,r2
 4006988:	180b883a 	mov	r5,r3
 400698c:	400df440 	call	400df44 <__gedf2>
 4006990:	00bc7c0e 	bge	zero,r2,4005b84 <__alt_data_end+0xfc005b84>
 4006994:	01000c04 	movi	r4,48
 4006998:	00000106 	br	40069a0 <_dtoa_r+0x1580>
 400699c:	102f883a 	mov	r23,r2
 40069a0:	b8bfffc4 	addi	r2,r23,-1
 40069a4:	10c00007 	ldb	r3,0(r2)
 40069a8:	193ffc26 	beq	r3,r4,400699c <__alt_data_end+0xfc00699c>
 40069ac:	d9801317 	ldw	r6,76(sp)
 40069b0:	d9800515 	stw	r6,20(sp)
 40069b4:	003c4406 	br	4005ac8 <__alt_data_end+0xfc005ac8>
 40069b8:	d9801317 	ldw	r6,76(sp)
 40069bc:	d9800515 	stw	r6,20(sp)
 40069c0:	003cea06 	br	4005d6c <__alt_data_end+0xfc005d6c>
 40069c4:	dd800f17 	ldw	r22,60(sp)
 40069c8:	dcc01017 	ldw	r19,64(sp)
 40069cc:	dc801217 	ldw	r18,72(sp)
 40069d0:	003c6c06 	br	4005b84 <__alt_data_end+0xfc005b84>
 40069d4:	903e031e 	bne	r18,zero,40061e4 <__alt_data_end+0xfc0061e4>
 40069d8:	003ebb06 	br	40064c8 <__alt_data_end+0xfc0064c8>
 40069dc:	103e6c1e 	bne	r2,zero,4006390 <__alt_data_end+0xfc006390>
 40069e0:	4080004c 	andi	r2,r8,1
 40069e4:	103e6a26 	beq	r2,zero,4006390 <__alt_data_end+0xfc006390>
 40069e8:	003e6606 	br	4006384 <__alt_data_end+0xfc006384>
 40069ec:	d8c00317 	ldw	r3,12(sp)
 40069f0:	00800084 	movi	r2,2
 40069f4:	10c02916 	blt	r2,r3,4006a9c <_dtoa_r+0x167c>
 40069f8:	d9000c17 	ldw	r4,48(sp)
 40069fc:	003e8806 	br	4006420 <__alt_data_end+0xfc006420>
 4006a00:	04000084 	movi	r16,2
 4006a04:	003b9d06 	br	400587c <__alt_data_end+0xfc00587c>
 4006a08:	d9001317 	ldw	r4,76(sp)
 4006a0c:	d9000515 	stw	r4,20(sp)
 4006a10:	003cd606 	br	4005d6c <__alt_data_end+0xfc005d6c>
 4006a14:	d8801317 	ldw	r2,76(sp)
 4006a18:	d8800515 	stw	r2,20(sp)
 4006a1c:	003c2a06 	br	4005ac8 <__alt_data_end+0xfc005ac8>
 4006a20:	d9800317 	ldw	r6,12(sp)
 4006a24:	00800084 	movi	r2,2
 4006a28:	11801516 	blt	r2,r6,4006a80 <_dtoa_r+0x1660>
 4006a2c:	d9c00c17 	ldw	r7,48(sp)
 4006a30:	d9c00615 	stw	r7,24(sp)
 4006a34:	003df706 	br	4006214 <__alt_data_end+0xfc006214>
 4006a38:	193d3926 	beq	r3,r4,4005f20 <__alt_data_end+0xfc005f20>
 4006a3c:	00c00f04 	movi	r3,60
 4006a40:	1885c83a 	sub	r2,r3,r2
 4006a44:	003ddf06 	br	40061c4 <__alt_data_end+0xfc0061c4>
 4006a48:	e009883a 	mov	r4,fp
 4006a4c:	e0001115 	stw	zero,68(fp)
 4006a50:	000b883a 	mov	r5,zero
 4006a54:	4008abc0 	call	4008abc <_Balloc>
 4006a58:	d8800715 	stw	r2,28(sp)
 4006a5c:	d8c00717 	ldw	r3,28(sp)
 4006a60:	00bfffc4 	movi	r2,-1
 4006a64:	01000044 	movi	r4,1
 4006a68:	d8800c15 	stw	r2,48(sp)
 4006a6c:	e0c01015 	stw	r3,64(fp)
 4006a70:	d9000b15 	stw	r4,44(sp)
 4006a74:	d8800615 	stw	r2,24(sp)
 4006a78:	d8002215 	stw	zero,136(sp)
 4006a7c:	003c4106 	br	4005b84 <__alt_data_end+0xfc005b84>
 4006a80:	d8c00c17 	ldw	r3,48(sp)
 4006a84:	d8c00615 	stw	r3,24(sp)
 4006a88:	003e7006 	br	400644c <__alt_data_end+0xfc00644c>
 4006a8c:	04400044 	movi	r17,1
 4006a90:	003b2006 	br	4005714 <__alt_data_end+0xfc005714>
 4006a94:	000b883a 	mov	r5,zero
 4006a98:	003b3d06 	br	4005790 <__alt_data_end+0xfc005790>
 4006a9c:	d8800c17 	ldw	r2,48(sp)
 4006aa0:	d8800615 	stw	r2,24(sp)
 4006aa4:	003e6906 	br	400644c <__alt_data_end+0xfc00644c>

04006aa8 <__sflush_r>:
 4006aa8:	2880030b 	ldhu	r2,12(r5)
 4006aac:	defffb04 	addi	sp,sp,-20
 4006ab0:	dcc00315 	stw	r19,12(sp)
 4006ab4:	dc400115 	stw	r17,4(sp)
 4006ab8:	dfc00415 	stw	ra,16(sp)
 4006abc:	dc800215 	stw	r18,8(sp)
 4006ac0:	dc000015 	stw	r16,0(sp)
 4006ac4:	10c0020c 	andi	r3,r2,8
 4006ac8:	2823883a 	mov	r17,r5
 4006acc:	2027883a 	mov	r19,r4
 4006ad0:	1800311e 	bne	r3,zero,4006b98 <__sflush_r+0xf0>
 4006ad4:	28c00117 	ldw	r3,4(r5)
 4006ad8:	10820014 	ori	r2,r2,2048
 4006adc:	2880030d 	sth	r2,12(r5)
 4006ae0:	00c04b0e 	bge	zero,r3,4006c10 <__sflush_r+0x168>
 4006ae4:	8a000a17 	ldw	r8,40(r17)
 4006ae8:	40002326 	beq	r8,zero,4006b78 <__sflush_r+0xd0>
 4006aec:	9c000017 	ldw	r16,0(r19)
 4006af0:	10c4000c 	andi	r3,r2,4096
 4006af4:	98000015 	stw	zero,0(r19)
 4006af8:	18004826 	beq	r3,zero,4006c1c <__sflush_r+0x174>
 4006afc:	89801417 	ldw	r6,80(r17)
 4006b00:	10c0010c 	andi	r3,r2,4
 4006b04:	18000626 	beq	r3,zero,4006b20 <__sflush_r+0x78>
 4006b08:	88c00117 	ldw	r3,4(r17)
 4006b0c:	88800c17 	ldw	r2,48(r17)
 4006b10:	30cdc83a 	sub	r6,r6,r3
 4006b14:	10000226 	beq	r2,zero,4006b20 <__sflush_r+0x78>
 4006b18:	88800f17 	ldw	r2,60(r17)
 4006b1c:	308dc83a 	sub	r6,r6,r2
 4006b20:	89400717 	ldw	r5,28(r17)
 4006b24:	000f883a 	mov	r7,zero
 4006b28:	9809883a 	mov	r4,r19
 4006b2c:	403ee83a 	callr	r8
 4006b30:	00ffffc4 	movi	r3,-1
 4006b34:	10c04426 	beq	r2,r3,4006c48 <__sflush_r+0x1a0>
 4006b38:	88c0030b 	ldhu	r3,12(r17)
 4006b3c:	89000417 	ldw	r4,16(r17)
 4006b40:	88000115 	stw	zero,4(r17)
 4006b44:	197dffcc 	andi	r5,r3,63487
 4006b48:	8940030d 	sth	r5,12(r17)
 4006b4c:	89000015 	stw	r4,0(r17)
 4006b50:	18c4000c 	andi	r3,r3,4096
 4006b54:	18002c1e 	bne	r3,zero,4006c08 <__sflush_r+0x160>
 4006b58:	89400c17 	ldw	r5,48(r17)
 4006b5c:	9c000015 	stw	r16,0(r19)
 4006b60:	28000526 	beq	r5,zero,4006b78 <__sflush_r+0xd0>
 4006b64:	88801004 	addi	r2,r17,64
 4006b68:	28800226 	beq	r5,r2,4006b74 <__sflush_r+0xcc>
 4006b6c:	9809883a 	mov	r4,r19
 4006b70:	40072140 	call	4007214 <_free_r>
 4006b74:	88000c15 	stw	zero,48(r17)
 4006b78:	0005883a 	mov	r2,zero
 4006b7c:	dfc00417 	ldw	ra,16(sp)
 4006b80:	dcc00317 	ldw	r19,12(sp)
 4006b84:	dc800217 	ldw	r18,8(sp)
 4006b88:	dc400117 	ldw	r17,4(sp)
 4006b8c:	dc000017 	ldw	r16,0(sp)
 4006b90:	dec00504 	addi	sp,sp,20
 4006b94:	f800283a 	ret
 4006b98:	2c800417 	ldw	r18,16(r5)
 4006b9c:	903ff626 	beq	r18,zero,4006b78 <__alt_data_end+0xfc006b78>
 4006ba0:	2c000017 	ldw	r16,0(r5)
 4006ba4:	108000cc 	andi	r2,r2,3
 4006ba8:	2c800015 	stw	r18,0(r5)
 4006bac:	84a1c83a 	sub	r16,r16,r18
 4006bb0:	1000131e 	bne	r2,zero,4006c00 <__sflush_r+0x158>
 4006bb4:	28800517 	ldw	r2,20(r5)
 4006bb8:	88800215 	stw	r2,8(r17)
 4006bbc:	04000316 	blt	zero,r16,4006bcc <__sflush_r+0x124>
 4006bc0:	003fed06 	br	4006b78 <__alt_data_end+0xfc006b78>
 4006bc4:	90a5883a 	add	r18,r18,r2
 4006bc8:	043feb0e 	bge	zero,r16,4006b78 <__alt_data_end+0xfc006b78>
 4006bcc:	88800917 	ldw	r2,36(r17)
 4006bd0:	89400717 	ldw	r5,28(r17)
 4006bd4:	800f883a 	mov	r7,r16
 4006bd8:	900d883a 	mov	r6,r18
 4006bdc:	9809883a 	mov	r4,r19
 4006be0:	103ee83a 	callr	r2
 4006be4:	80a1c83a 	sub	r16,r16,r2
 4006be8:	00bff616 	blt	zero,r2,4006bc4 <__alt_data_end+0xfc006bc4>
 4006bec:	88c0030b 	ldhu	r3,12(r17)
 4006bf0:	00bfffc4 	movi	r2,-1
 4006bf4:	18c01014 	ori	r3,r3,64
 4006bf8:	88c0030d 	sth	r3,12(r17)
 4006bfc:	003fdf06 	br	4006b7c <__alt_data_end+0xfc006b7c>
 4006c00:	0005883a 	mov	r2,zero
 4006c04:	003fec06 	br	4006bb8 <__alt_data_end+0xfc006bb8>
 4006c08:	88801415 	stw	r2,80(r17)
 4006c0c:	003fd206 	br	4006b58 <__alt_data_end+0xfc006b58>
 4006c10:	28c00f17 	ldw	r3,60(r5)
 4006c14:	00ffb316 	blt	zero,r3,4006ae4 <__alt_data_end+0xfc006ae4>
 4006c18:	003fd706 	br	4006b78 <__alt_data_end+0xfc006b78>
 4006c1c:	89400717 	ldw	r5,28(r17)
 4006c20:	000d883a 	mov	r6,zero
 4006c24:	01c00044 	movi	r7,1
 4006c28:	9809883a 	mov	r4,r19
 4006c2c:	403ee83a 	callr	r8
 4006c30:	100d883a 	mov	r6,r2
 4006c34:	00bfffc4 	movi	r2,-1
 4006c38:	30801426 	beq	r6,r2,4006c8c <__sflush_r+0x1e4>
 4006c3c:	8880030b 	ldhu	r2,12(r17)
 4006c40:	8a000a17 	ldw	r8,40(r17)
 4006c44:	003fae06 	br	4006b00 <__alt_data_end+0xfc006b00>
 4006c48:	98c00017 	ldw	r3,0(r19)
 4006c4c:	183fba26 	beq	r3,zero,4006b38 <__alt_data_end+0xfc006b38>
 4006c50:	01000744 	movi	r4,29
 4006c54:	19000626 	beq	r3,r4,4006c70 <__sflush_r+0x1c8>
 4006c58:	01000584 	movi	r4,22
 4006c5c:	19000426 	beq	r3,r4,4006c70 <__sflush_r+0x1c8>
 4006c60:	88c0030b 	ldhu	r3,12(r17)
 4006c64:	18c01014 	ori	r3,r3,64
 4006c68:	88c0030d 	sth	r3,12(r17)
 4006c6c:	003fc306 	br	4006b7c <__alt_data_end+0xfc006b7c>
 4006c70:	8880030b 	ldhu	r2,12(r17)
 4006c74:	88c00417 	ldw	r3,16(r17)
 4006c78:	88000115 	stw	zero,4(r17)
 4006c7c:	10bdffcc 	andi	r2,r2,63487
 4006c80:	8880030d 	sth	r2,12(r17)
 4006c84:	88c00015 	stw	r3,0(r17)
 4006c88:	003fb306 	br	4006b58 <__alt_data_end+0xfc006b58>
 4006c8c:	98800017 	ldw	r2,0(r19)
 4006c90:	103fea26 	beq	r2,zero,4006c3c <__alt_data_end+0xfc006c3c>
 4006c94:	00c00744 	movi	r3,29
 4006c98:	10c00226 	beq	r2,r3,4006ca4 <__sflush_r+0x1fc>
 4006c9c:	00c00584 	movi	r3,22
 4006ca0:	10c0031e 	bne	r2,r3,4006cb0 <__sflush_r+0x208>
 4006ca4:	9c000015 	stw	r16,0(r19)
 4006ca8:	0005883a 	mov	r2,zero
 4006cac:	003fb306 	br	4006b7c <__alt_data_end+0xfc006b7c>
 4006cb0:	88c0030b 	ldhu	r3,12(r17)
 4006cb4:	3005883a 	mov	r2,r6
 4006cb8:	18c01014 	ori	r3,r3,64
 4006cbc:	88c0030d 	sth	r3,12(r17)
 4006cc0:	003fae06 	br	4006b7c <__alt_data_end+0xfc006b7c>

04006cc4 <_fflush_r>:
 4006cc4:	defffd04 	addi	sp,sp,-12
 4006cc8:	dc000115 	stw	r16,4(sp)
 4006ccc:	dfc00215 	stw	ra,8(sp)
 4006cd0:	2021883a 	mov	r16,r4
 4006cd4:	20000226 	beq	r4,zero,4006ce0 <_fflush_r+0x1c>
 4006cd8:	20800e17 	ldw	r2,56(r4)
 4006cdc:	10000c26 	beq	r2,zero,4006d10 <_fflush_r+0x4c>
 4006ce0:	2880030f 	ldh	r2,12(r5)
 4006ce4:	1000051e 	bne	r2,zero,4006cfc <_fflush_r+0x38>
 4006ce8:	0005883a 	mov	r2,zero
 4006cec:	dfc00217 	ldw	ra,8(sp)
 4006cf0:	dc000117 	ldw	r16,4(sp)
 4006cf4:	dec00304 	addi	sp,sp,12
 4006cf8:	f800283a 	ret
 4006cfc:	8009883a 	mov	r4,r16
 4006d00:	dfc00217 	ldw	ra,8(sp)
 4006d04:	dc000117 	ldw	r16,4(sp)
 4006d08:	dec00304 	addi	sp,sp,12
 4006d0c:	4006aa81 	jmpi	4006aa8 <__sflush_r>
 4006d10:	d9400015 	stw	r5,0(sp)
 4006d14:	40070a00 	call	40070a0 <__sinit>
 4006d18:	d9400017 	ldw	r5,0(sp)
 4006d1c:	003ff006 	br	4006ce0 <__alt_data_end+0xfc006ce0>

04006d20 <fflush>:
 4006d20:	20000526 	beq	r4,zero,4006d38 <fflush+0x18>
 4006d24:	008100f4 	movhi	r2,1027
 4006d28:	1098bc04 	addi	r2,r2,25328
 4006d2c:	200b883a 	mov	r5,r4
 4006d30:	11000017 	ldw	r4,0(r2)
 4006d34:	4006cc41 	jmpi	4006cc4 <_fflush_r>
 4006d38:	008100f4 	movhi	r2,1027
 4006d3c:	1098bb04 	addi	r2,r2,25324
 4006d40:	11000017 	ldw	r4,0(r2)
 4006d44:	01410034 	movhi	r5,1024
 4006d48:	295b3104 	addi	r5,r5,27844
 4006d4c:	4007aa41 	jmpi	4007aa4 <_fwalk_reent>

04006d50 <__fp_unlock>:
 4006d50:	0005883a 	mov	r2,zero
 4006d54:	f800283a 	ret

04006d58 <_cleanup_r>:
 4006d58:	01410074 	movhi	r5,1025
 4006d5c:	296eaf04 	addi	r5,r5,-17732
 4006d60:	4007aa41 	jmpi	4007aa4 <_fwalk_reent>

04006d64 <__sinit.part.1>:
 4006d64:	defff704 	addi	sp,sp,-36
 4006d68:	00c10034 	movhi	r3,1024
 4006d6c:	dfc00815 	stw	ra,32(sp)
 4006d70:	ddc00715 	stw	r23,28(sp)
 4006d74:	dd800615 	stw	r22,24(sp)
 4006d78:	dd400515 	stw	r21,20(sp)
 4006d7c:	dd000415 	stw	r20,16(sp)
 4006d80:	dcc00315 	stw	r19,12(sp)
 4006d84:	dc800215 	stw	r18,8(sp)
 4006d88:	dc400115 	stw	r17,4(sp)
 4006d8c:	dc000015 	stw	r16,0(sp)
 4006d90:	18db5604 	addi	r3,r3,27992
 4006d94:	24000117 	ldw	r16,4(r4)
 4006d98:	20c00f15 	stw	r3,60(r4)
 4006d9c:	2080bb04 	addi	r2,r4,748
 4006da0:	00c000c4 	movi	r3,3
 4006da4:	20c0b915 	stw	r3,740(r4)
 4006da8:	2080ba15 	stw	r2,744(r4)
 4006dac:	2000b815 	stw	zero,736(r4)
 4006db0:	05c00204 	movi	r23,8
 4006db4:	00800104 	movi	r2,4
 4006db8:	2025883a 	mov	r18,r4
 4006dbc:	b80d883a 	mov	r6,r23
 4006dc0:	81001704 	addi	r4,r16,92
 4006dc4:	000b883a 	mov	r5,zero
 4006dc8:	80000015 	stw	zero,0(r16)
 4006dcc:	80000115 	stw	zero,4(r16)
 4006dd0:	80000215 	stw	zero,8(r16)
 4006dd4:	8080030d 	sth	r2,12(r16)
 4006dd8:	80001915 	stw	zero,100(r16)
 4006ddc:	8000038d 	sth	zero,14(r16)
 4006de0:	80000415 	stw	zero,16(r16)
 4006de4:	80000515 	stw	zero,20(r16)
 4006de8:	80000615 	stw	zero,24(r16)
 4006dec:	40089940 	call	4008994 <memset>
 4006df0:	05810074 	movhi	r22,1025
 4006df4:	94400217 	ldw	r17,8(r18)
 4006df8:	05410074 	movhi	r21,1025
 4006dfc:	05010074 	movhi	r20,1025
 4006e00:	04c10074 	movhi	r19,1025
 4006e04:	b5a83904 	addi	r22,r22,-24348
 4006e08:	ad685004 	addi	r21,r21,-24256
 4006e0c:	a5286f04 	addi	r20,r20,-24132
 4006e10:	9ce88604 	addi	r19,r19,-24040
 4006e14:	85800815 	stw	r22,32(r16)
 4006e18:	85400915 	stw	r21,36(r16)
 4006e1c:	85000a15 	stw	r20,40(r16)
 4006e20:	84c00b15 	stw	r19,44(r16)
 4006e24:	84000715 	stw	r16,28(r16)
 4006e28:	00800284 	movi	r2,10
 4006e2c:	8880030d 	sth	r2,12(r17)
 4006e30:	00800044 	movi	r2,1
 4006e34:	b80d883a 	mov	r6,r23
 4006e38:	89001704 	addi	r4,r17,92
 4006e3c:	000b883a 	mov	r5,zero
 4006e40:	88000015 	stw	zero,0(r17)
 4006e44:	88000115 	stw	zero,4(r17)
 4006e48:	88000215 	stw	zero,8(r17)
 4006e4c:	88001915 	stw	zero,100(r17)
 4006e50:	8880038d 	sth	r2,14(r17)
 4006e54:	88000415 	stw	zero,16(r17)
 4006e58:	88000515 	stw	zero,20(r17)
 4006e5c:	88000615 	stw	zero,24(r17)
 4006e60:	40089940 	call	4008994 <memset>
 4006e64:	94000317 	ldw	r16,12(r18)
 4006e68:	00800484 	movi	r2,18
 4006e6c:	8c400715 	stw	r17,28(r17)
 4006e70:	8d800815 	stw	r22,32(r17)
 4006e74:	8d400915 	stw	r21,36(r17)
 4006e78:	8d000a15 	stw	r20,40(r17)
 4006e7c:	8cc00b15 	stw	r19,44(r17)
 4006e80:	8080030d 	sth	r2,12(r16)
 4006e84:	00800084 	movi	r2,2
 4006e88:	80000015 	stw	zero,0(r16)
 4006e8c:	80000115 	stw	zero,4(r16)
 4006e90:	80000215 	stw	zero,8(r16)
 4006e94:	80001915 	stw	zero,100(r16)
 4006e98:	8080038d 	sth	r2,14(r16)
 4006e9c:	80000415 	stw	zero,16(r16)
 4006ea0:	80000515 	stw	zero,20(r16)
 4006ea4:	80000615 	stw	zero,24(r16)
 4006ea8:	b80d883a 	mov	r6,r23
 4006eac:	000b883a 	mov	r5,zero
 4006eb0:	81001704 	addi	r4,r16,92
 4006eb4:	40089940 	call	4008994 <memset>
 4006eb8:	00800044 	movi	r2,1
 4006ebc:	84000715 	stw	r16,28(r16)
 4006ec0:	85800815 	stw	r22,32(r16)
 4006ec4:	85400915 	stw	r21,36(r16)
 4006ec8:	85000a15 	stw	r20,40(r16)
 4006ecc:	84c00b15 	stw	r19,44(r16)
 4006ed0:	90800e15 	stw	r2,56(r18)
 4006ed4:	dfc00817 	ldw	ra,32(sp)
 4006ed8:	ddc00717 	ldw	r23,28(sp)
 4006edc:	dd800617 	ldw	r22,24(sp)
 4006ee0:	dd400517 	ldw	r21,20(sp)
 4006ee4:	dd000417 	ldw	r20,16(sp)
 4006ee8:	dcc00317 	ldw	r19,12(sp)
 4006eec:	dc800217 	ldw	r18,8(sp)
 4006ef0:	dc400117 	ldw	r17,4(sp)
 4006ef4:	dc000017 	ldw	r16,0(sp)
 4006ef8:	dec00904 	addi	sp,sp,36
 4006efc:	f800283a 	ret

04006f00 <__fp_lock>:
 4006f00:	0005883a 	mov	r2,zero
 4006f04:	f800283a 	ret

04006f08 <__sfmoreglue>:
 4006f08:	defffc04 	addi	sp,sp,-16
 4006f0c:	dc400115 	stw	r17,4(sp)
 4006f10:	2c7fffc4 	addi	r17,r5,-1
 4006f14:	8c401a24 	muli	r17,r17,104
 4006f18:	dc800215 	stw	r18,8(sp)
 4006f1c:	2825883a 	mov	r18,r5
 4006f20:	89401d04 	addi	r5,r17,116
 4006f24:	dc000015 	stw	r16,0(sp)
 4006f28:	dfc00315 	stw	ra,12(sp)
 4006f2c:	4007e000 	call	4007e00 <_malloc_r>
 4006f30:	1021883a 	mov	r16,r2
 4006f34:	10000726 	beq	r2,zero,4006f54 <__sfmoreglue+0x4c>
 4006f38:	11000304 	addi	r4,r2,12
 4006f3c:	10000015 	stw	zero,0(r2)
 4006f40:	14800115 	stw	r18,4(r2)
 4006f44:	11000215 	stw	r4,8(r2)
 4006f48:	89801a04 	addi	r6,r17,104
 4006f4c:	000b883a 	mov	r5,zero
 4006f50:	40089940 	call	4008994 <memset>
 4006f54:	8005883a 	mov	r2,r16
 4006f58:	dfc00317 	ldw	ra,12(sp)
 4006f5c:	dc800217 	ldw	r18,8(sp)
 4006f60:	dc400117 	ldw	r17,4(sp)
 4006f64:	dc000017 	ldw	r16,0(sp)
 4006f68:	dec00404 	addi	sp,sp,16
 4006f6c:	f800283a 	ret

04006f70 <__sfp>:
 4006f70:	defffb04 	addi	sp,sp,-20
 4006f74:	dc000015 	stw	r16,0(sp)
 4006f78:	040100f4 	movhi	r16,1027
 4006f7c:	8418bb04 	addi	r16,r16,25324
 4006f80:	dcc00315 	stw	r19,12(sp)
 4006f84:	2027883a 	mov	r19,r4
 4006f88:	81000017 	ldw	r4,0(r16)
 4006f8c:	dfc00415 	stw	ra,16(sp)
 4006f90:	dc800215 	stw	r18,8(sp)
 4006f94:	20800e17 	ldw	r2,56(r4)
 4006f98:	dc400115 	stw	r17,4(sp)
 4006f9c:	1000021e 	bne	r2,zero,4006fa8 <__sfp+0x38>
 4006fa0:	4006d640 	call	4006d64 <__sinit.part.1>
 4006fa4:	81000017 	ldw	r4,0(r16)
 4006fa8:	2480b804 	addi	r18,r4,736
 4006fac:	047fffc4 	movi	r17,-1
 4006fb0:	91000117 	ldw	r4,4(r18)
 4006fb4:	94000217 	ldw	r16,8(r18)
 4006fb8:	213fffc4 	addi	r4,r4,-1
 4006fbc:	20000a16 	blt	r4,zero,4006fe8 <__sfp+0x78>
 4006fc0:	8080030f 	ldh	r2,12(r16)
 4006fc4:	10000c26 	beq	r2,zero,4006ff8 <__sfp+0x88>
 4006fc8:	80c01d04 	addi	r3,r16,116
 4006fcc:	00000206 	br	4006fd8 <__sfp+0x68>
 4006fd0:	18bfe60f 	ldh	r2,-104(r3)
 4006fd4:	10000826 	beq	r2,zero,4006ff8 <__sfp+0x88>
 4006fd8:	213fffc4 	addi	r4,r4,-1
 4006fdc:	1c3ffd04 	addi	r16,r3,-12
 4006fe0:	18c01a04 	addi	r3,r3,104
 4006fe4:	247ffa1e 	bne	r4,r17,4006fd0 <__alt_data_end+0xfc006fd0>
 4006fe8:	90800017 	ldw	r2,0(r18)
 4006fec:	10001d26 	beq	r2,zero,4007064 <__sfp+0xf4>
 4006ff0:	1025883a 	mov	r18,r2
 4006ff4:	003fee06 	br	4006fb0 <__alt_data_end+0xfc006fb0>
 4006ff8:	00bfffc4 	movi	r2,-1
 4006ffc:	8080038d 	sth	r2,14(r16)
 4007000:	00800044 	movi	r2,1
 4007004:	8080030d 	sth	r2,12(r16)
 4007008:	80001915 	stw	zero,100(r16)
 400700c:	80000015 	stw	zero,0(r16)
 4007010:	80000215 	stw	zero,8(r16)
 4007014:	80000115 	stw	zero,4(r16)
 4007018:	80000415 	stw	zero,16(r16)
 400701c:	80000515 	stw	zero,20(r16)
 4007020:	80000615 	stw	zero,24(r16)
 4007024:	01800204 	movi	r6,8
 4007028:	000b883a 	mov	r5,zero
 400702c:	81001704 	addi	r4,r16,92
 4007030:	40089940 	call	4008994 <memset>
 4007034:	8005883a 	mov	r2,r16
 4007038:	80000c15 	stw	zero,48(r16)
 400703c:	80000d15 	stw	zero,52(r16)
 4007040:	80001115 	stw	zero,68(r16)
 4007044:	80001215 	stw	zero,72(r16)
 4007048:	dfc00417 	ldw	ra,16(sp)
 400704c:	dcc00317 	ldw	r19,12(sp)
 4007050:	dc800217 	ldw	r18,8(sp)
 4007054:	dc400117 	ldw	r17,4(sp)
 4007058:	dc000017 	ldw	r16,0(sp)
 400705c:	dec00504 	addi	sp,sp,20
 4007060:	f800283a 	ret
 4007064:	01400104 	movi	r5,4
 4007068:	9809883a 	mov	r4,r19
 400706c:	4006f080 	call	4006f08 <__sfmoreglue>
 4007070:	90800015 	stw	r2,0(r18)
 4007074:	103fde1e 	bne	r2,zero,4006ff0 <__alt_data_end+0xfc006ff0>
 4007078:	00800304 	movi	r2,12
 400707c:	98800015 	stw	r2,0(r19)
 4007080:	0005883a 	mov	r2,zero
 4007084:	003ff006 	br	4007048 <__alt_data_end+0xfc007048>

04007088 <_cleanup>:
 4007088:	008100f4 	movhi	r2,1027
 400708c:	1098bb04 	addi	r2,r2,25324
 4007090:	11000017 	ldw	r4,0(r2)
 4007094:	01410074 	movhi	r5,1025
 4007098:	296eaf04 	addi	r5,r5,-17732
 400709c:	4007aa41 	jmpi	4007aa4 <_fwalk_reent>

040070a0 <__sinit>:
 40070a0:	20800e17 	ldw	r2,56(r4)
 40070a4:	10000126 	beq	r2,zero,40070ac <__sinit+0xc>
 40070a8:	f800283a 	ret
 40070ac:	4006d641 	jmpi	4006d64 <__sinit.part.1>

040070b0 <__sfp_lock_acquire>:
 40070b0:	f800283a 	ret

040070b4 <__sfp_lock_release>:
 40070b4:	f800283a 	ret

040070b8 <__sinit_lock_acquire>:
 40070b8:	f800283a 	ret

040070bc <__sinit_lock_release>:
 40070bc:	f800283a 	ret

040070c0 <__fp_lock_all>:
 40070c0:	008100f4 	movhi	r2,1027
 40070c4:	1098bc04 	addi	r2,r2,25328
 40070c8:	11000017 	ldw	r4,0(r2)
 40070cc:	01410034 	movhi	r5,1024
 40070d0:	295bc004 	addi	r5,r5,28416
 40070d4:	40079e01 	jmpi	40079e0 <_fwalk>

040070d8 <__fp_unlock_all>:
 40070d8:	008100f4 	movhi	r2,1027
 40070dc:	1098bc04 	addi	r2,r2,25328
 40070e0:	11000017 	ldw	r4,0(r2)
 40070e4:	01410034 	movhi	r5,1024
 40070e8:	295b5404 	addi	r5,r5,27984
 40070ec:	40079e01 	jmpi	40079e0 <_fwalk>

040070f0 <_malloc_trim_r>:
 40070f0:	defffb04 	addi	sp,sp,-20
 40070f4:	dcc00315 	stw	r19,12(sp)
 40070f8:	04c100f4 	movhi	r19,1027
 40070fc:	dc800215 	stw	r18,8(sp)
 4007100:	dc400115 	stw	r17,4(sp)
 4007104:	dc000015 	stw	r16,0(sp)
 4007108:	dfc00415 	stw	ra,16(sp)
 400710c:	2821883a 	mov	r16,r5
 4007110:	9cd32a04 	addi	r19,r19,19624
 4007114:	2025883a 	mov	r18,r4
 4007118:	400fcd80 	call	400fcd8 <__malloc_lock>
 400711c:	98800217 	ldw	r2,8(r19)
 4007120:	14400117 	ldw	r17,4(r2)
 4007124:	00bfff04 	movi	r2,-4
 4007128:	88a2703a 	and	r17,r17,r2
 400712c:	8c21c83a 	sub	r16,r17,r16
 4007130:	8403fbc4 	addi	r16,r16,4079
 4007134:	8020d33a 	srli	r16,r16,12
 4007138:	0083ffc4 	movi	r2,4095
 400713c:	843fffc4 	addi	r16,r16,-1
 4007140:	8020933a 	slli	r16,r16,12
 4007144:	1400060e 	bge	r2,r16,4007160 <_malloc_trim_r+0x70>
 4007148:	000b883a 	mov	r5,zero
 400714c:	9009883a 	mov	r4,r18
 4007150:	400a0900 	call	400a090 <_sbrk_r>
 4007154:	98c00217 	ldw	r3,8(r19)
 4007158:	1c47883a 	add	r3,r3,r17
 400715c:	10c00a26 	beq	r2,r3,4007188 <_malloc_trim_r+0x98>
 4007160:	9009883a 	mov	r4,r18
 4007164:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4007168:	0005883a 	mov	r2,zero
 400716c:	dfc00417 	ldw	ra,16(sp)
 4007170:	dcc00317 	ldw	r19,12(sp)
 4007174:	dc800217 	ldw	r18,8(sp)
 4007178:	dc400117 	ldw	r17,4(sp)
 400717c:	dc000017 	ldw	r16,0(sp)
 4007180:	dec00504 	addi	sp,sp,20
 4007184:	f800283a 	ret
 4007188:	040bc83a 	sub	r5,zero,r16
 400718c:	9009883a 	mov	r4,r18
 4007190:	400a0900 	call	400a090 <_sbrk_r>
 4007194:	00ffffc4 	movi	r3,-1
 4007198:	10c00d26 	beq	r2,r3,40071d0 <_malloc_trim_r+0xe0>
 400719c:	00c10134 	movhi	r3,1028
 40071a0:	18e58404 	addi	r3,r3,-27120
 40071a4:	18800017 	ldw	r2,0(r3)
 40071a8:	99000217 	ldw	r4,8(r19)
 40071ac:	8c23c83a 	sub	r17,r17,r16
 40071b0:	8c400054 	ori	r17,r17,1
 40071b4:	1421c83a 	sub	r16,r2,r16
 40071b8:	24400115 	stw	r17,4(r4)
 40071bc:	9009883a 	mov	r4,r18
 40071c0:	1c000015 	stw	r16,0(r3)
 40071c4:	400fcfc0 	call	400fcfc <__malloc_unlock>
 40071c8:	00800044 	movi	r2,1
 40071cc:	003fe706 	br	400716c <__alt_data_end+0xfc00716c>
 40071d0:	000b883a 	mov	r5,zero
 40071d4:	9009883a 	mov	r4,r18
 40071d8:	400a0900 	call	400a090 <_sbrk_r>
 40071dc:	99000217 	ldw	r4,8(r19)
 40071e0:	014003c4 	movi	r5,15
 40071e4:	1107c83a 	sub	r3,r2,r4
 40071e8:	28ffdd0e 	bge	r5,r3,4007160 <__alt_data_end+0xfc007160>
 40071ec:	014100f4 	movhi	r5,1027
 40071f0:	2958be04 	addi	r5,r5,25336
 40071f4:	29400017 	ldw	r5,0(r5)
 40071f8:	18c00054 	ori	r3,r3,1
 40071fc:	20c00115 	stw	r3,4(r4)
 4007200:	00c10134 	movhi	r3,1028
 4007204:	1145c83a 	sub	r2,r2,r5
 4007208:	18e58404 	addi	r3,r3,-27120
 400720c:	18800015 	stw	r2,0(r3)
 4007210:	003fd306 	br	4007160 <__alt_data_end+0xfc007160>

04007214 <_free_r>:
 4007214:	28004126 	beq	r5,zero,400731c <_free_r+0x108>
 4007218:	defffd04 	addi	sp,sp,-12
 400721c:	dc400115 	stw	r17,4(sp)
 4007220:	dc000015 	stw	r16,0(sp)
 4007224:	2023883a 	mov	r17,r4
 4007228:	2821883a 	mov	r16,r5
 400722c:	dfc00215 	stw	ra,8(sp)
 4007230:	400fcd80 	call	400fcd8 <__malloc_lock>
 4007234:	81ffff17 	ldw	r7,-4(r16)
 4007238:	00bfff84 	movi	r2,-2
 400723c:	010100f4 	movhi	r4,1027
 4007240:	81bffe04 	addi	r6,r16,-8
 4007244:	3884703a 	and	r2,r7,r2
 4007248:	21132a04 	addi	r4,r4,19624
 400724c:	308b883a 	add	r5,r6,r2
 4007250:	2a400117 	ldw	r9,4(r5)
 4007254:	22000217 	ldw	r8,8(r4)
 4007258:	00ffff04 	movi	r3,-4
 400725c:	48c6703a 	and	r3,r9,r3
 4007260:	2a005726 	beq	r5,r8,40073c0 <_free_r+0x1ac>
 4007264:	28c00115 	stw	r3,4(r5)
 4007268:	39c0004c 	andi	r7,r7,1
 400726c:	3800091e 	bne	r7,zero,4007294 <_free_r+0x80>
 4007270:	823ffe17 	ldw	r8,-8(r16)
 4007274:	22400204 	addi	r9,r4,8
 4007278:	320dc83a 	sub	r6,r6,r8
 400727c:	31c00217 	ldw	r7,8(r6)
 4007280:	1205883a 	add	r2,r2,r8
 4007284:	3a406526 	beq	r7,r9,400741c <_free_r+0x208>
 4007288:	32000317 	ldw	r8,12(r6)
 400728c:	3a000315 	stw	r8,12(r7)
 4007290:	41c00215 	stw	r7,8(r8)
 4007294:	28cf883a 	add	r7,r5,r3
 4007298:	39c00117 	ldw	r7,4(r7)
 400729c:	39c0004c 	andi	r7,r7,1
 40072a0:	38003a26 	beq	r7,zero,400738c <_free_r+0x178>
 40072a4:	10c00054 	ori	r3,r2,1
 40072a8:	30c00115 	stw	r3,4(r6)
 40072ac:	3087883a 	add	r3,r6,r2
 40072b0:	18800015 	stw	r2,0(r3)
 40072b4:	00c07fc4 	movi	r3,511
 40072b8:	18801936 	bltu	r3,r2,4007320 <_free_r+0x10c>
 40072bc:	1004d0fa 	srli	r2,r2,3
 40072c0:	01c00044 	movi	r7,1
 40072c4:	21400117 	ldw	r5,4(r4)
 40072c8:	10c00044 	addi	r3,r2,1
 40072cc:	18c7883a 	add	r3,r3,r3
 40072d0:	1005d0ba 	srai	r2,r2,2
 40072d4:	18c7883a 	add	r3,r3,r3
 40072d8:	18c7883a 	add	r3,r3,r3
 40072dc:	1907883a 	add	r3,r3,r4
 40072e0:	3884983a 	sll	r2,r7,r2
 40072e4:	19c00017 	ldw	r7,0(r3)
 40072e8:	1a3ffe04 	addi	r8,r3,-8
 40072ec:	1144b03a 	or	r2,r2,r5
 40072f0:	32000315 	stw	r8,12(r6)
 40072f4:	31c00215 	stw	r7,8(r6)
 40072f8:	20800115 	stw	r2,4(r4)
 40072fc:	19800015 	stw	r6,0(r3)
 4007300:	39800315 	stw	r6,12(r7)
 4007304:	8809883a 	mov	r4,r17
 4007308:	dfc00217 	ldw	ra,8(sp)
 400730c:	dc400117 	ldw	r17,4(sp)
 4007310:	dc000017 	ldw	r16,0(sp)
 4007314:	dec00304 	addi	sp,sp,12
 4007318:	400fcfc1 	jmpi	400fcfc <__malloc_unlock>
 400731c:	f800283a 	ret
 4007320:	100ad27a 	srli	r5,r2,9
 4007324:	00c00104 	movi	r3,4
 4007328:	19404a36 	bltu	r3,r5,4007454 <_free_r+0x240>
 400732c:	100ad1ba 	srli	r5,r2,6
 4007330:	28c00e44 	addi	r3,r5,57
 4007334:	18c7883a 	add	r3,r3,r3
 4007338:	29400e04 	addi	r5,r5,56
 400733c:	18c7883a 	add	r3,r3,r3
 4007340:	18c7883a 	add	r3,r3,r3
 4007344:	1909883a 	add	r4,r3,r4
 4007348:	20c00017 	ldw	r3,0(r4)
 400734c:	01c100f4 	movhi	r7,1027
 4007350:	213ffe04 	addi	r4,r4,-8
 4007354:	39d32a04 	addi	r7,r7,19624
 4007358:	20c04426 	beq	r4,r3,400746c <_free_r+0x258>
 400735c:	01ffff04 	movi	r7,-4
 4007360:	19400117 	ldw	r5,4(r3)
 4007364:	29ca703a 	and	r5,r5,r7
 4007368:	1140022e 	bgeu	r2,r5,4007374 <_free_r+0x160>
 400736c:	18c00217 	ldw	r3,8(r3)
 4007370:	20fffb1e 	bne	r4,r3,4007360 <__alt_data_end+0xfc007360>
 4007374:	19000317 	ldw	r4,12(r3)
 4007378:	31000315 	stw	r4,12(r6)
 400737c:	30c00215 	stw	r3,8(r6)
 4007380:	21800215 	stw	r6,8(r4)
 4007384:	19800315 	stw	r6,12(r3)
 4007388:	003fde06 	br	4007304 <__alt_data_end+0xfc007304>
 400738c:	29c00217 	ldw	r7,8(r5)
 4007390:	10c5883a 	add	r2,r2,r3
 4007394:	00c100f4 	movhi	r3,1027
 4007398:	18d32c04 	addi	r3,r3,19632
 400739c:	38c03b26 	beq	r7,r3,400748c <_free_r+0x278>
 40073a0:	2a000317 	ldw	r8,12(r5)
 40073a4:	11400054 	ori	r5,r2,1
 40073a8:	3087883a 	add	r3,r6,r2
 40073ac:	3a000315 	stw	r8,12(r7)
 40073b0:	41c00215 	stw	r7,8(r8)
 40073b4:	31400115 	stw	r5,4(r6)
 40073b8:	18800015 	stw	r2,0(r3)
 40073bc:	003fbd06 	br	40072b4 <__alt_data_end+0xfc0072b4>
 40073c0:	39c0004c 	andi	r7,r7,1
 40073c4:	10c5883a 	add	r2,r2,r3
 40073c8:	3800071e 	bne	r7,zero,40073e8 <_free_r+0x1d4>
 40073cc:	81fffe17 	ldw	r7,-8(r16)
 40073d0:	31cdc83a 	sub	r6,r6,r7
 40073d4:	30c00317 	ldw	r3,12(r6)
 40073d8:	31400217 	ldw	r5,8(r6)
 40073dc:	11c5883a 	add	r2,r2,r7
 40073e0:	28c00315 	stw	r3,12(r5)
 40073e4:	19400215 	stw	r5,8(r3)
 40073e8:	10c00054 	ori	r3,r2,1
 40073ec:	30c00115 	stw	r3,4(r6)
 40073f0:	00c100f4 	movhi	r3,1027
 40073f4:	18d8bf04 	addi	r3,r3,25340
 40073f8:	18c00017 	ldw	r3,0(r3)
 40073fc:	21800215 	stw	r6,8(r4)
 4007400:	10ffc036 	bltu	r2,r3,4007304 <__alt_data_end+0xfc007304>
 4007404:	00810134 	movhi	r2,1028
 4007408:	10a57b04 	addi	r2,r2,-27156
 400740c:	11400017 	ldw	r5,0(r2)
 4007410:	8809883a 	mov	r4,r17
 4007414:	40070f00 	call	40070f0 <_malloc_trim_r>
 4007418:	003fba06 	br	4007304 <__alt_data_end+0xfc007304>
 400741c:	28c9883a 	add	r4,r5,r3
 4007420:	21000117 	ldw	r4,4(r4)
 4007424:	2100004c 	andi	r4,r4,1
 4007428:	2000391e 	bne	r4,zero,4007510 <_free_r+0x2fc>
 400742c:	29c00217 	ldw	r7,8(r5)
 4007430:	29000317 	ldw	r4,12(r5)
 4007434:	1885883a 	add	r2,r3,r2
 4007438:	10c00054 	ori	r3,r2,1
 400743c:	39000315 	stw	r4,12(r7)
 4007440:	21c00215 	stw	r7,8(r4)
 4007444:	30c00115 	stw	r3,4(r6)
 4007448:	308d883a 	add	r6,r6,r2
 400744c:	30800015 	stw	r2,0(r6)
 4007450:	003fac06 	br	4007304 <__alt_data_end+0xfc007304>
 4007454:	00c00504 	movi	r3,20
 4007458:	19401536 	bltu	r3,r5,40074b0 <_free_r+0x29c>
 400745c:	28c01704 	addi	r3,r5,92
 4007460:	18c7883a 	add	r3,r3,r3
 4007464:	294016c4 	addi	r5,r5,91
 4007468:	003fb406 	br	400733c <__alt_data_end+0xfc00733c>
 400746c:	280bd0ba 	srai	r5,r5,2
 4007470:	00c00044 	movi	r3,1
 4007474:	38800117 	ldw	r2,4(r7)
 4007478:	194a983a 	sll	r5,r3,r5
 400747c:	2007883a 	mov	r3,r4
 4007480:	2884b03a 	or	r2,r5,r2
 4007484:	38800115 	stw	r2,4(r7)
 4007488:	003fbb06 	br	4007378 <__alt_data_end+0xfc007378>
 400748c:	21800515 	stw	r6,20(r4)
 4007490:	21800415 	stw	r6,16(r4)
 4007494:	10c00054 	ori	r3,r2,1
 4007498:	31c00315 	stw	r7,12(r6)
 400749c:	31c00215 	stw	r7,8(r6)
 40074a0:	30c00115 	stw	r3,4(r6)
 40074a4:	308d883a 	add	r6,r6,r2
 40074a8:	30800015 	stw	r2,0(r6)
 40074ac:	003f9506 	br	4007304 <__alt_data_end+0xfc007304>
 40074b0:	00c01504 	movi	r3,84
 40074b4:	19400536 	bltu	r3,r5,40074cc <_free_r+0x2b8>
 40074b8:	100ad33a 	srli	r5,r2,12
 40074bc:	28c01bc4 	addi	r3,r5,111
 40074c0:	18c7883a 	add	r3,r3,r3
 40074c4:	29401b84 	addi	r5,r5,110
 40074c8:	003f9c06 	br	400733c <__alt_data_end+0xfc00733c>
 40074cc:	00c05504 	movi	r3,340
 40074d0:	19400536 	bltu	r3,r5,40074e8 <_free_r+0x2d4>
 40074d4:	100ad3fa 	srli	r5,r2,15
 40074d8:	28c01e04 	addi	r3,r5,120
 40074dc:	18c7883a 	add	r3,r3,r3
 40074e0:	29401dc4 	addi	r5,r5,119
 40074e4:	003f9506 	br	400733c <__alt_data_end+0xfc00733c>
 40074e8:	00c15504 	movi	r3,1364
 40074ec:	19400536 	bltu	r3,r5,4007504 <_free_r+0x2f0>
 40074f0:	100ad4ba 	srli	r5,r2,18
 40074f4:	28c01f44 	addi	r3,r5,125
 40074f8:	18c7883a 	add	r3,r3,r3
 40074fc:	29401f04 	addi	r5,r5,124
 4007500:	003f8e06 	br	400733c <__alt_data_end+0xfc00733c>
 4007504:	00c03f84 	movi	r3,254
 4007508:	01401f84 	movi	r5,126
 400750c:	003f8b06 	br	400733c <__alt_data_end+0xfc00733c>
 4007510:	10c00054 	ori	r3,r2,1
 4007514:	30c00115 	stw	r3,4(r6)
 4007518:	308d883a 	add	r6,r6,r2
 400751c:	30800015 	stw	r2,0(r6)
 4007520:	003f7806 	br	4007304 <__alt_data_end+0xfc007304>

04007524 <__sfvwrite_r>:
 4007524:	30800217 	ldw	r2,8(r6)
 4007528:	10006726 	beq	r2,zero,40076c8 <__sfvwrite_r+0x1a4>
 400752c:	28c0030b 	ldhu	r3,12(r5)
 4007530:	defff404 	addi	sp,sp,-48
 4007534:	dd400715 	stw	r21,28(sp)
 4007538:	dd000615 	stw	r20,24(sp)
 400753c:	dc000215 	stw	r16,8(sp)
 4007540:	dfc00b15 	stw	ra,44(sp)
 4007544:	df000a15 	stw	fp,40(sp)
 4007548:	ddc00915 	stw	r23,36(sp)
 400754c:	dd800815 	stw	r22,32(sp)
 4007550:	dcc00515 	stw	r19,20(sp)
 4007554:	dc800415 	stw	r18,16(sp)
 4007558:	dc400315 	stw	r17,12(sp)
 400755c:	1880020c 	andi	r2,r3,8
 4007560:	2821883a 	mov	r16,r5
 4007564:	202b883a 	mov	r21,r4
 4007568:	3029883a 	mov	r20,r6
 400756c:	10002726 	beq	r2,zero,400760c <__sfvwrite_r+0xe8>
 4007570:	28800417 	ldw	r2,16(r5)
 4007574:	10002526 	beq	r2,zero,400760c <__sfvwrite_r+0xe8>
 4007578:	1880008c 	andi	r2,r3,2
 400757c:	a4400017 	ldw	r17,0(r20)
 4007580:	10002a26 	beq	r2,zero,400762c <__sfvwrite_r+0x108>
 4007584:	05a00034 	movhi	r22,32768
 4007588:	0027883a 	mov	r19,zero
 400758c:	0025883a 	mov	r18,zero
 4007590:	b5bf0004 	addi	r22,r22,-1024
 4007594:	980d883a 	mov	r6,r19
 4007598:	a809883a 	mov	r4,r21
 400759c:	90004626 	beq	r18,zero,40076b8 <__sfvwrite_r+0x194>
 40075a0:	900f883a 	mov	r7,r18
 40075a4:	b480022e 	bgeu	r22,r18,40075b0 <__sfvwrite_r+0x8c>
 40075a8:	01e00034 	movhi	r7,32768
 40075ac:	39ff0004 	addi	r7,r7,-1024
 40075b0:	80800917 	ldw	r2,36(r16)
 40075b4:	81400717 	ldw	r5,28(r16)
 40075b8:	103ee83a 	callr	r2
 40075bc:	0080570e 	bge	zero,r2,400771c <__sfvwrite_r+0x1f8>
 40075c0:	a0c00217 	ldw	r3,8(r20)
 40075c4:	98a7883a 	add	r19,r19,r2
 40075c8:	90a5c83a 	sub	r18,r18,r2
 40075cc:	1885c83a 	sub	r2,r3,r2
 40075d0:	a0800215 	stw	r2,8(r20)
 40075d4:	103fef1e 	bne	r2,zero,4007594 <__alt_data_end+0xfc007594>
 40075d8:	0005883a 	mov	r2,zero
 40075dc:	dfc00b17 	ldw	ra,44(sp)
 40075e0:	df000a17 	ldw	fp,40(sp)
 40075e4:	ddc00917 	ldw	r23,36(sp)
 40075e8:	dd800817 	ldw	r22,32(sp)
 40075ec:	dd400717 	ldw	r21,28(sp)
 40075f0:	dd000617 	ldw	r20,24(sp)
 40075f4:	dcc00517 	ldw	r19,20(sp)
 40075f8:	dc800417 	ldw	r18,16(sp)
 40075fc:	dc400317 	ldw	r17,12(sp)
 4007600:	dc000217 	ldw	r16,8(sp)
 4007604:	dec00c04 	addi	sp,sp,48
 4007608:	f800283a 	ret
 400760c:	800b883a 	mov	r5,r16
 4007610:	a809883a 	mov	r4,r21
 4007614:	40050cc0 	call	40050cc <__swsetup_r>
 4007618:	1000eb1e 	bne	r2,zero,40079c8 <__sfvwrite_r+0x4a4>
 400761c:	80c0030b 	ldhu	r3,12(r16)
 4007620:	a4400017 	ldw	r17,0(r20)
 4007624:	1880008c 	andi	r2,r3,2
 4007628:	103fd61e 	bne	r2,zero,4007584 <__alt_data_end+0xfc007584>
 400762c:	1880004c 	andi	r2,r3,1
 4007630:	10003f1e 	bne	r2,zero,4007730 <__sfvwrite_r+0x20c>
 4007634:	0039883a 	mov	fp,zero
 4007638:	0025883a 	mov	r18,zero
 400763c:	90001a26 	beq	r18,zero,40076a8 <__sfvwrite_r+0x184>
 4007640:	1880800c 	andi	r2,r3,512
 4007644:	84c00217 	ldw	r19,8(r16)
 4007648:	10002126 	beq	r2,zero,40076d0 <__sfvwrite_r+0x1ac>
 400764c:	982f883a 	mov	r23,r19
 4007650:	94c09336 	bltu	r18,r19,40078a0 <__sfvwrite_r+0x37c>
 4007654:	1881200c 	andi	r2,r3,1152
 4007658:	10009e1e 	bne	r2,zero,40078d4 <__sfvwrite_r+0x3b0>
 400765c:	81000017 	ldw	r4,0(r16)
 4007660:	b80d883a 	mov	r6,r23
 4007664:	e00b883a 	mov	r5,fp
 4007668:	40088380 	call	4008838 <memmove>
 400766c:	80c00217 	ldw	r3,8(r16)
 4007670:	81000017 	ldw	r4,0(r16)
 4007674:	9005883a 	mov	r2,r18
 4007678:	1ce7c83a 	sub	r19,r3,r19
 400767c:	25cf883a 	add	r7,r4,r23
 4007680:	84c00215 	stw	r19,8(r16)
 4007684:	81c00015 	stw	r7,0(r16)
 4007688:	a0c00217 	ldw	r3,8(r20)
 400768c:	e0b9883a 	add	fp,fp,r2
 4007690:	90a5c83a 	sub	r18,r18,r2
 4007694:	18a7c83a 	sub	r19,r3,r2
 4007698:	a4c00215 	stw	r19,8(r20)
 400769c:	983fce26 	beq	r19,zero,40075d8 <__alt_data_end+0xfc0075d8>
 40076a0:	80c0030b 	ldhu	r3,12(r16)
 40076a4:	903fe61e 	bne	r18,zero,4007640 <__alt_data_end+0xfc007640>
 40076a8:	8f000017 	ldw	fp,0(r17)
 40076ac:	8c800117 	ldw	r18,4(r17)
 40076b0:	8c400204 	addi	r17,r17,8
 40076b4:	003fe106 	br	400763c <__alt_data_end+0xfc00763c>
 40076b8:	8cc00017 	ldw	r19,0(r17)
 40076bc:	8c800117 	ldw	r18,4(r17)
 40076c0:	8c400204 	addi	r17,r17,8
 40076c4:	003fb306 	br	4007594 <__alt_data_end+0xfc007594>
 40076c8:	0005883a 	mov	r2,zero
 40076cc:	f800283a 	ret
 40076d0:	81000017 	ldw	r4,0(r16)
 40076d4:	80800417 	ldw	r2,16(r16)
 40076d8:	11005736 	bltu	r2,r4,4007838 <__sfvwrite_r+0x314>
 40076dc:	85c00517 	ldw	r23,20(r16)
 40076e0:	95c05536 	bltu	r18,r23,4007838 <__sfvwrite_r+0x314>
 40076e4:	00a00034 	movhi	r2,32768
 40076e8:	10bfffc4 	addi	r2,r2,-1
 40076ec:	9009883a 	mov	r4,r18
 40076f0:	1480012e 	bgeu	r2,r18,40076f8 <__sfvwrite_r+0x1d4>
 40076f4:	1009883a 	mov	r4,r2
 40076f8:	b80b883a 	mov	r5,r23
 40076fc:	4002a700 	call	4002a70 <__divsi3>
 4007700:	15cf383a 	mul	r7,r2,r23
 4007704:	81400717 	ldw	r5,28(r16)
 4007708:	80800917 	ldw	r2,36(r16)
 400770c:	e00d883a 	mov	r6,fp
 4007710:	a809883a 	mov	r4,r21
 4007714:	103ee83a 	callr	r2
 4007718:	00bfdb16 	blt	zero,r2,4007688 <__alt_data_end+0xfc007688>
 400771c:	8080030b 	ldhu	r2,12(r16)
 4007720:	10801014 	ori	r2,r2,64
 4007724:	8080030d 	sth	r2,12(r16)
 4007728:	00bfffc4 	movi	r2,-1
 400772c:	003fab06 	br	40075dc <__alt_data_end+0xfc0075dc>
 4007730:	0027883a 	mov	r19,zero
 4007734:	0011883a 	mov	r8,zero
 4007738:	0039883a 	mov	fp,zero
 400773c:	0025883a 	mov	r18,zero
 4007740:	90001f26 	beq	r18,zero,40077c0 <__sfvwrite_r+0x29c>
 4007744:	40005a26 	beq	r8,zero,40078b0 <__sfvwrite_r+0x38c>
 4007748:	982d883a 	mov	r22,r19
 400774c:	94c0012e 	bgeu	r18,r19,4007754 <__sfvwrite_r+0x230>
 4007750:	902d883a 	mov	r22,r18
 4007754:	81000017 	ldw	r4,0(r16)
 4007758:	80800417 	ldw	r2,16(r16)
 400775c:	b02f883a 	mov	r23,r22
 4007760:	81c00517 	ldw	r7,20(r16)
 4007764:	1100032e 	bgeu	r2,r4,4007774 <__sfvwrite_r+0x250>
 4007768:	80c00217 	ldw	r3,8(r16)
 400776c:	38c7883a 	add	r3,r7,r3
 4007770:	1d801816 	blt	r3,r22,40077d4 <__sfvwrite_r+0x2b0>
 4007774:	b1c03e16 	blt	r22,r7,4007870 <__sfvwrite_r+0x34c>
 4007778:	80800917 	ldw	r2,36(r16)
 400777c:	81400717 	ldw	r5,28(r16)
 4007780:	e00d883a 	mov	r6,fp
 4007784:	da000115 	stw	r8,4(sp)
 4007788:	a809883a 	mov	r4,r21
 400778c:	103ee83a 	callr	r2
 4007790:	102f883a 	mov	r23,r2
 4007794:	da000117 	ldw	r8,4(sp)
 4007798:	00bfe00e 	bge	zero,r2,400771c <__alt_data_end+0xfc00771c>
 400779c:	9de7c83a 	sub	r19,r19,r23
 40077a0:	98001f26 	beq	r19,zero,4007820 <__sfvwrite_r+0x2fc>
 40077a4:	a0800217 	ldw	r2,8(r20)
 40077a8:	e5f9883a 	add	fp,fp,r23
 40077ac:	95e5c83a 	sub	r18,r18,r23
 40077b0:	15efc83a 	sub	r23,r2,r23
 40077b4:	a5c00215 	stw	r23,8(r20)
 40077b8:	b83f8726 	beq	r23,zero,40075d8 <__alt_data_end+0xfc0075d8>
 40077bc:	903fe11e 	bne	r18,zero,4007744 <__alt_data_end+0xfc007744>
 40077c0:	8f000017 	ldw	fp,0(r17)
 40077c4:	8c800117 	ldw	r18,4(r17)
 40077c8:	0011883a 	mov	r8,zero
 40077cc:	8c400204 	addi	r17,r17,8
 40077d0:	003fdb06 	br	4007740 <__alt_data_end+0xfc007740>
 40077d4:	180d883a 	mov	r6,r3
 40077d8:	e00b883a 	mov	r5,fp
 40077dc:	da000115 	stw	r8,4(sp)
 40077e0:	d8c00015 	stw	r3,0(sp)
 40077e4:	40088380 	call	4008838 <memmove>
 40077e8:	d8c00017 	ldw	r3,0(sp)
 40077ec:	80800017 	ldw	r2,0(r16)
 40077f0:	800b883a 	mov	r5,r16
 40077f4:	a809883a 	mov	r4,r21
 40077f8:	10c5883a 	add	r2,r2,r3
 40077fc:	80800015 	stw	r2,0(r16)
 4007800:	d8c00015 	stw	r3,0(sp)
 4007804:	4006cc40 	call	4006cc4 <_fflush_r>
 4007808:	d8c00017 	ldw	r3,0(sp)
 400780c:	da000117 	ldw	r8,4(sp)
 4007810:	103fc21e 	bne	r2,zero,400771c <__alt_data_end+0xfc00771c>
 4007814:	182f883a 	mov	r23,r3
 4007818:	9de7c83a 	sub	r19,r19,r23
 400781c:	983fe11e 	bne	r19,zero,40077a4 <__alt_data_end+0xfc0077a4>
 4007820:	800b883a 	mov	r5,r16
 4007824:	a809883a 	mov	r4,r21
 4007828:	4006cc40 	call	4006cc4 <_fflush_r>
 400782c:	103fbb1e 	bne	r2,zero,400771c <__alt_data_end+0xfc00771c>
 4007830:	0011883a 	mov	r8,zero
 4007834:	003fdb06 	br	40077a4 <__alt_data_end+0xfc0077a4>
 4007838:	94c0012e 	bgeu	r18,r19,4007840 <__sfvwrite_r+0x31c>
 400783c:	9027883a 	mov	r19,r18
 4007840:	980d883a 	mov	r6,r19
 4007844:	e00b883a 	mov	r5,fp
 4007848:	40088380 	call	4008838 <memmove>
 400784c:	80800217 	ldw	r2,8(r16)
 4007850:	80c00017 	ldw	r3,0(r16)
 4007854:	14c5c83a 	sub	r2,r2,r19
 4007858:	1cc7883a 	add	r3,r3,r19
 400785c:	80800215 	stw	r2,8(r16)
 4007860:	80c00015 	stw	r3,0(r16)
 4007864:	10004326 	beq	r2,zero,4007974 <__sfvwrite_r+0x450>
 4007868:	9805883a 	mov	r2,r19
 400786c:	003f8606 	br	4007688 <__alt_data_end+0xfc007688>
 4007870:	b00d883a 	mov	r6,r22
 4007874:	e00b883a 	mov	r5,fp
 4007878:	da000115 	stw	r8,4(sp)
 400787c:	40088380 	call	4008838 <memmove>
 4007880:	80800217 	ldw	r2,8(r16)
 4007884:	80c00017 	ldw	r3,0(r16)
 4007888:	da000117 	ldw	r8,4(sp)
 400788c:	1585c83a 	sub	r2,r2,r22
 4007890:	1dad883a 	add	r22,r3,r22
 4007894:	80800215 	stw	r2,8(r16)
 4007898:	85800015 	stw	r22,0(r16)
 400789c:	003fbf06 	br	400779c <__alt_data_end+0xfc00779c>
 40078a0:	81000017 	ldw	r4,0(r16)
 40078a4:	9027883a 	mov	r19,r18
 40078a8:	902f883a 	mov	r23,r18
 40078ac:	003f6c06 	br	4007660 <__alt_data_end+0xfc007660>
 40078b0:	900d883a 	mov	r6,r18
 40078b4:	01400284 	movi	r5,10
 40078b8:	e009883a 	mov	r4,fp
 40078bc:	400860c0 	call	400860c <memchr>
 40078c0:	10003e26 	beq	r2,zero,40079bc <__sfvwrite_r+0x498>
 40078c4:	10800044 	addi	r2,r2,1
 40078c8:	1727c83a 	sub	r19,r2,fp
 40078cc:	02000044 	movi	r8,1
 40078d0:	003f9d06 	br	4007748 <__alt_data_end+0xfc007748>
 40078d4:	80800517 	ldw	r2,20(r16)
 40078d8:	81400417 	ldw	r5,16(r16)
 40078dc:	81c00017 	ldw	r7,0(r16)
 40078e0:	10a7883a 	add	r19,r2,r2
 40078e4:	9885883a 	add	r2,r19,r2
 40078e8:	1026d7fa 	srli	r19,r2,31
 40078ec:	396dc83a 	sub	r22,r7,r5
 40078f0:	b1000044 	addi	r4,r22,1
 40078f4:	9885883a 	add	r2,r19,r2
 40078f8:	1027d07a 	srai	r19,r2,1
 40078fc:	2485883a 	add	r2,r4,r18
 4007900:	980d883a 	mov	r6,r19
 4007904:	9880022e 	bgeu	r19,r2,4007910 <__sfvwrite_r+0x3ec>
 4007908:	1027883a 	mov	r19,r2
 400790c:	100d883a 	mov	r6,r2
 4007910:	18c1000c 	andi	r3,r3,1024
 4007914:	18001c26 	beq	r3,zero,4007988 <__sfvwrite_r+0x464>
 4007918:	300b883a 	mov	r5,r6
 400791c:	a809883a 	mov	r4,r21
 4007920:	4007e000 	call	4007e00 <_malloc_r>
 4007924:	102f883a 	mov	r23,r2
 4007928:	10002926 	beq	r2,zero,40079d0 <__sfvwrite_r+0x4ac>
 400792c:	81400417 	ldw	r5,16(r16)
 4007930:	b00d883a 	mov	r6,r22
 4007934:	1009883a 	mov	r4,r2
 4007938:	40086f00 	call	40086f0 <memcpy>
 400793c:	8080030b 	ldhu	r2,12(r16)
 4007940:	00fedfc4 	movi	r3,-1153
 4007944:	10c4703a 	and	r2,r2,r3
 4007948:	10802014 	ori	r2,r2,128
 400794c:	8080030d 	sth	r2,12(r16)
 4007950:	bd89883a 	add	r4,r23,r22
 4007954:	9d8fc83a 	sub	r7,r19,r22
 4007958:	85c00415 	stw	r23,16(r16)
 400795c:	84c00515 	stw	r19,20(r16)
 4007960:	81000015 	stw	r4,0(r16)
 4007964:	9027883a 	mov	r19,r18
 4007968:	81c00215 	stw	r7,8(r16)
 400796c:	902f883a 	mov	r23,r18
 4007970:	003f3b06 	br	4007660 <__alt_data_end+0xfc007660>
 4007974:	800b883a 	mov	r5,r16
 4007978:	a809883a 	mov	r4,r21
 400797c:	4006cc40 	call	4006cc4 <_fflush_r>
 4007980:	103fb926 	beq	r2,zero,4007868 <__alt_data_end+0xfc007868>
 4007984:	003f6506 	br	400771c <__alt_data_end+0xfc00771c>
 4007988:	a809883a 	mov	r4,r21
 400798c:	4009ab80 	call	4009ab8 <_realloc_r>
 4007990:	102f883a 	mov	r23,r2
 4007994:	103fee1e 	bne	r2,zero,4007950 <__alt_data_end+0xfc007950>
 4007998:	81400417 	ldw	r5,16(r16)
 400799c:	a809883a 	mov	r4,r21
 40079a0:	40072140 	call	4007214 <_free_r>
 40079a4:	8080030b 	ldhu	r2,12(r16)
 40079a8:	00ffdfc4 	movi	r3,-129
 40079ac:	1884703a 	and	r2,r3,r2
 40079b0:	00c00304 	movi	r3,12
 40079b4:	a8c00015 	stw	r3,0(r21)
 40079b8:	003f5906 	br	4007720 <__alt_data_end+0xfc007720>
 40079bc:	94c00044 	addi	r19,r18,1
 40079c0:	02000044 	movi	r8,1
 40079c4:	003f6006 	br	4007748 <__alt_data_end+0xfc007748>
 40079c8:	00bfffc4 	movi	r2,-1
 40079cc:	003f0306 	br	40075dc <__alt_data_end+0xfc0075dc>
 40079d0:	00800304 	movi	r2,12
 40079d4:	a8800015 	stw	r2,0(r21)
 40079d8:	8080030b 	ldhu	r2,12(r16)
 40079dc:	003f5006 	br	4007720 <__alt_data_end+0xfc007720>

040079e0 <_fwalk>:
 40079e0:	defff704 	addi	sp,sp,-36
 40079e4:	dd000415 	stw	r20,16(sp)
 40079e8:	dfc00815 	stw	ra,32(sp)
 40079ec:	ddc00715 	stw	r23,28(sp)
 40079f0:	dd800615 	stw	r22,24(sp)
 40079f4:	dd400515 	stw	r21,20(sp)
 40079f8:	dcc00315 	stw	r19,12(sp)
 40079fc:	dc800215 	stw	r18,8(sp)
 4007a00:	dc400115 	stw	r17,4(sp)
 4007a04:	dc000015 	stw	r16,0(sp)
 4007a08:	2500b804 	addi	r20,r4,736
 4007a0c:	a0002326 	beq	r20,zero,4007a9c <_fwalk+0xbc>
 4007a10:	282b883a 	mov	r21,r5
 4007a14:	002f883a 	mov	r23,zero
 4007a18:	05800044 	movi	r22,1
 4007a1c:	04ffffc4 	movi	r19,-1
 4007a20:	a4400117 	ldw	r17,4(r20)
 4007a24:	a4800217 	ldw	r18,8(r20)
 4007a28:	8c7fffc4 	addi	r17,r17,-1
 4007a2c:	88000d16 	blt	r17,zero,4007a64 <_fwalk+0x84>
 4007a30:	94000304 	addi	r16,r18,12
 4007a34:	94800384 	addi	r18,r18,14
 4007a38:	8080000b 	ldhu	r2,0(r16)
 4007a3c:	8c7fffc4 	addi	r17,r17,-1
 4007a40:	813ffd04 	addi	r4,r16,-12
 4007a44:	b080042e 	bgeu	r22,r2,4007a58 <_fwalk+0x78>
 4007a48:	9080000f 	ldh	r2,0(r18)
 4007a4c:	14c00226 	beq	r2,r19,4007a58 <_fwalk+0x78>
 4007a50:	a83ee83a 	callr	r21
 4007a54:	b8aeb03a 	or	r23,r23,r2
 4007a58:	84001a04 	addi	r16,r16,104
 4007a5c:	94801a04 	addi	r18,r18,104
 4007a60:	8cfff51e 	bne	r17,r19,4007a38 <__alt_data_end+0xfc007a38>
 4007a64:	a5000017 	ldw	r20,0(r20)
 4007a68:	a03fed1e 	bne	r20,zero,4007a20 <__alt_data_end+0xfc007a20>
 4007a6c:	b805883a 	mov	r2,r23
 4007a70:	dfc00817 	ldw	ra,32(sp)
 4007a74:	ddc00717 	ldw	r23,28(sp)
 4007a78:	dd800617 	ldw	r22,24(sp)
 4007a7c:	dd400517 	ldw	r21,20(sp)
 4007a80:	dd000417 	ldw	r20,16(sp)
 4007a84:	dcc00317 	ldw	r19,12(sp)
 4007a88:	dc800217 	ldw	r18,8(sp)
 4007a8c:	dc400117 	ldw	r17,4(sp)
 4007a90:	dc000017 	ldw	r16,0(sp)
 4007a94:	dec00904 	addi	sp,sp,36
 4007a98:	f800283a 	ret
 4007a9c:	002f883a 	mov	r23,zero
 4007aa0:	003ff206 	br	4007a6c <__alt_data_end+0xfc007a6c>

04007aa4 <_fwalk_reent>:
 4007aa4:	defff704 	addi	sp,sp,-36
 4007aa8:	dd000415 	stw	r20,16(sp)
 4007aac:	dfc00815 	stw	ra,32(sp)
 4007ab0:	ddc00715 	stw	r23,28(sp)
 4007ab4:	dd800615 	stw	r22,24(sp)
 4007ab8:	dd400515 	stw	r21,20(sp)
 4007abc:	dcc00315 	stw	r19,12(sp)
 4007ac0:	dc800215 	stw	r18,8(sp)
 4007ac4:	dc400115 	stw	r17,4(sp)
 4007ac8:	dc000015 	stw	r16,0(sp)
 4007acc:	2500b804 	addi	r20,r4,736
 4007ad0:	a0002326 	beq	r20,zero,4007b60 <_fwalk_reent+0xbc>
 4007ad4:	282b883a 	mov	r21,r5
 4007ad8:	2027883a 	mov	r19,r4
 4007adc:	002f883a 	mov	r23,zero
 4007ae0:	05800044 	movi	r22,1
 4007ae4:	04bfffc4 	movi	r18,-1
 4007ae8:	a4400117 	ldw	r17,4(r20)
 4007aec:	a4000217 	ldw	r16,8(r20)
 4007af0:	8c7fffc4 	addi	r17,r17,-1
 4007af4:	88000c16 	blt	r17,zero,4007b28 <_fwalk_reent+0x84>
 4007af8:	84000304 	addi	r16,r16,12
 4007afc:	8080000b 	ldhu	r2,0(r16)
 4007b00:	8c7fffc4 	addi	r17,r17,-1
 4007b04:	817ffd04 	addi	r5,r16,-12
 4007b08:	b080052e 	bgeu	r22,r2,4007b20 <_fwalk_reent+0x7c>
 4007b0c:	8080008f 	ldh	r2,2(r16)
 4007b10:	9809883a 	mov	r4,r19
 4007b14:	14800226 	beq	r2,r18,4007b20 <_fwalk_reent+0x7c>
 4007b18:	a83ee83a 	callr	r21
 4007b1c:	b8aeb03a 	or	r23,r23,r2
 4007b20:	84001a04 	addi	r16,r16,104
 4007b24:	8cbff51e 	bne	r17,r18,4007afc <__alt_data_end+0xfc007afc>
 4007b28:	a5000017 	ldw	r20,0(r20)
 4007b2c:	a03fee1e 	bne	r20,zero,4007ae8 <__alt_data_end+0xfc007ae8>
 4007b30:	b805883a 	mov	r2,r23
 4007b34:	dfc00817 	ldw	ra,32(sp)
 4007b38:	ddc00717 	ldw	r23,28(sp)
 4007b3c:	dd800617 	ldw	r22,24(sp)
 4007b40:	dd400517 	ldw	r21,20(sp)
 4007b44:	dd000417 	ldw	r20,16(sp)
 4007b48:	dcc00317 	ldw	r19,12(sp)
 4007b4c:	dc800217 	ldw	r18,8(sp)
 4007b50:	dc400117 	ldw	r17,4(sp)
 4007b54:	dc000017 	ldw	r16,0(sp)
 4007b58:	dec00904 	addi	sp,sp,36
 4007b5c:	f800283a 	ret
 4007b60:	002f883a 	mov	r23,zero
 4007b64:	003ff206 	br	4007b30 <__alt_data_end+0xfc007b30>

04007b68 <_setlocale_r>:
 4007b68:	30001b26 	beq	r6,zero,4007bd8 <_setlocale_r+0x70>
 4007b6c:	014100f4 	movhi	r5,1027
 4007b70:	defffe04 	addi	sp,sp,-8
 4007b74:	294b7c04 	addi	r5,r5,11760
 4007b78:	3009883a 	mov	r4,r6
 4007b7c:	dc000015 	stw	r16,0(sp)
 4007b80:	dfc00115 	stw	ra,4(sp)
 4007b84:	3021883a 	mov	r16,r6
 4007b88:	400a2200 	call	400a220 <strcmp>
 4007b8c:	1000061e 	bne	r2,zero,4007ba8 <_setlocale_r+0x40>
 4007b90:	008100f4 	movhi	r2,1027
 4007b94:	108b7b04 	addi	r2,r2,11756
 4007b98:	dfc00117 	ldw	ra,4(sp)
 4007b9c:	dc000017 	ldw	r16,0(sp)
 4007ba0:	dec00204 	addi	sp,sp,8
 4007ba4:	f800283a 	ret
 4007ba8:	014100f4 	movhi	r5,1027
 4007bac:	294b7b04 	addi	r5,r5,11756
 4007bb0:	8009883a 	mov	r4,r16
 4007bb4:	400a2200 	call	400a220 <strcmp>
 4007bb8:	103ff526 	beq	r2,zero,4007b90 <__alt_data_end+0xfc007b90>
 4007bbc:	014100f4 	movhi	r5,1027
 4007bc0:	294b6604 	addi	r5,r5,11672
 4007bc4:	8009883a 	mov	r4,r16
 4007bc8:	400a2200 	call	400a220 <strcmp>
 4007bcc:	103ff026 	beq	r2,zero,4007b90 <__alt_data_end+0xfc007b90>
 4007bd0:	0005883a 	mov	r2,zero
 4007bd4:	003ff006 	br	4007b98 <__alt_data_end+0xfc007b98>
 4007bd8:	008100f4 	movhi	r2,1027
 4007bdc:	108b7b04 	addi	r2,r2,11756
 4007be0:	f800283a 	ret

04007be4 <__locale_charset>:
 4007be4:	008100f4 	movhi	r2,1027
 4007be8:	10931404 	addi	r2,r2,19536
 4007bec:	f800283a 	ret

04007bf0 <__locale_mb_cur_max>:
 4007bf0:	008100f4 	movhi	r2,1027
 4007bf4:	1098bd04 	addi	r2,r2,25332
 4007bf8:	10800017 	ldw	r2,0(r2)
 4007bfc:	f800283a 	ret

04007c00 <__locale_msgcharset>:
 4007c00:	008100f4 	movhi	r2,1027
 4007c04:	10930c04 	addi	r2,r2,19504
 4007c08:	f800283a 	ret

04007c0c <__locale_cjk_lang>:
 4007c0c:	0005883a 	mov	r2,zero
 4007c10:	f800283a 	ret

04007c14 <_localeconv_r>:
 4007c14:	008100f4 	movhi	r2,1027
 4007c18:	10931c04 	addi	r2,r2,19568
 4007c1c:	f800283a 	ret

04007c20 <setlocale>:
 4007c20:	008100f4 	movhi	r2,1027
 4007c24:	1098bc04 	addi	r2,r2,25328
 4007c28:	280d883a 	mov	r6,r5
 4007c2c:	200b883a 	mov	r5,r4
 4007c30:	11000017 	ldw	r4,0(r2)
 4007c34:	4007b681 	jmpi	4007b68 <_setlocale_r>

04007c38 <localeconv>:
 4007c38:	008100f4 	movhi	r2,1027
 4007c3c:	10931c04 	addi	r2,r2,19568
 4007c40:	f800283a 	ret

04007c44 <__smakebuf_r>:
 4007c44:	2880030b 	ldhu	r2,12(r5)
 4007c48:	10c0008c 	andi	r3,r2,2
 4007c4c:	1800411e 	bne	r3,zero,4007d54 <__smakebuf_r+0x110>
 4007c50:	deffec04 	addi	sp,sp,-80
 4007c54:	dc000f15 	stw	r16,60(sp)
 4007c58:	2821883a 	mov	r16,r5
 4007c5c:	2940038f 	ldh	r5,14(r5)
 4007c60:	dc401015 	stw	r17,64(sp)
 4007c64:	dfc01315 	stw	ra,76(sp)
 4007c68:	dcc01215 	stw	r19,72(sp)
 4007c6c:	dc801115 	stw	r18,68(sp)
 4007c70:	2023883a 	mov	r17,r4
 4007c74:	28001c16 	blt	r5,zero,4007ce8 <__smakebuf_r+0xa4>
 4007c78:	d80d883a 	mov	r6,sp
 4007c7c:	400bdc80 	call	400bdc8 <_fstat_r>
 4007c80:	10001816 	blt	r2,zero,4007ce4 <__smakebuf_r+0xa0>
 4007c84:	d8800117 	ldw	r2,4(sp)
 4007c88:	00e00014 	movui	r3,32768
 4007c8c:	10bc000c 	andi	r2,r2,61440
 4007c90:	14c80020 	cmpeqi	r19,r2,8192
 4007c94:	10c03726 	beq	r2,r3,4007d74 <__smakebuf_r+0x130>
 4007c98:	80c0030b 	ldhu	r3,12(r16)
 4007c9c:	18c20014 	ori	r3,r3,2048
 4007ca0:	80c0030d 	sth	r3,12(r16)
 4007ca4:	00c80004 	movi	r3,8192
 4007ca8:	10c0521e 	bne	r2,r3,4007df4 <__smakebuf_r+0x1b0>
 4007cac:	8140038f 	ldh	r5,14(r16)
 4007cb0:	8809883a 	mov	r4,r17
 4007cb4:	400be240 	call	400be24 <_isatty_r>
 4007cb8:	10004c26 	beq	r2,zero,4007dec <__smakebuf_r+0x1a8>
 4007cbc:	8080030b 	ldhu	r2,12(r16)
 4007cc0:	80c010c4 	addi	r3,r16,67
 4007cc4:	80c00015 	stw	r3,0(r16)
 4007cc8:	10800054 	ori	r2,r2,1
 4007ccc:	8080030d 	sth	r2,12(r16)
 4007cd0:	00800044 	movi	r2,1
 4007cd4:	80c00415 	stw	r3,16(r16)
 4007cd8:	80800515 	stw	r2,20(r16)
 4007cdc:	04810004 	movi	r18,1024
 4007ce0:	00000706 	br	4007d00 <__smakebuf_r+0xbc>
 4007ce4:	8080030b 	ldhu	r2,12(r16)
 4007ce8:	10c0200c 	andi	r3,r2,128
 4007cec:	18001f1e 	bne	r3,zero,4007d6c <__smakebuf_r+0x128>
 4007cf0:	04810004 	movi	r18,1024
 4007cf4:	10820014 	ori	r2,r2,2048
 4007cf8:	8080030d 	sth	r2,12(r16)
 4007cfc:	0027883a 	mov	r19,zero
 4007d00:	900b883a 	mov	r5,r18
 4007d04:	8809883a 	mov	r4,r17
 4007d08:	4007e000 	call	4007e00 <_malloc_r>
 4007d0c:	10002c26 	beq	r2,zero,4007dc0 <__smakebuf_r+0x17c>
 4007d10:	80c0030b 	ldhu	r3,12(r16)
 4007d14:	01010034 	movhi	r4,1024
 4007d18:	211b5604 	addi	r4,r4,27992
 4007d1c:	89000f15 	stw	r4,60(r17)
 4007d20:	18c02014 	ori	r3,r3,128
 4007d24:	80c0030d 	sth	r3,12(r16)
 4007d28:	80800015 	stw	r2,0(r16)
 4007d2c:	80800415 	stw	r2,16(r16)
 4007d30:	84800515 	stw	r18,20(r16)
 4007d34:	98001a1e 	bne	r19,zero,4007da0 <__smakebuf_r+0x15c>
 4007d38:	dfc01317 	ldw	ra,76(sp)
 4007d3c:	dcc01217 	ldw	r19,72(sp)
 4007d40:	dc801117 	ldw	r18,68(sp)
 4007d44:	dc401017 	ldw	r17,64(sp)
 4007d48:	dc000f17 	ldw	r16,60(sp)
 4007d4c:	dec01404 	addi	sp,sp,80
 4007d50:	f800283a 	ret
 4007d54:	288010c4 	addi	r2,r5,67
 4007d58:	28800015 	stw	r2,0(r5)
 4007d5c:	28800415 	stw	r2,16(r5)
 4007d60:	00800044 	movi	r2,1
 4007d64:	28800515 	stw	r2,20(r5)
 4007d68:	f800283a 	ret
 4007d6c:	04801004 	movi	r18,64
 4007d70:	003fe006 	br	4007cf4 <__alt_data_end+0xfc007cf4>
 4007d74:	81000a17 	ldw	r4,40(r16)
 4007d78:	00c10074 	movhi	r3,1025
 4007d7c:	18e86f04 	addi	r3,r3,-24132
 4007d80:	20ffc51e 	bne	r4,r3,4007c98 <__alt_data_end+0xfc007c98>
 4007d84:	8080030b 	ldhu	r2,12(r16)
 4007d88:	04810004 	movi	r18,1024
 4007d8c:	84801315 	stw	r18,76(r16)
 4007d90:	1484b03a 	or	r2,r2,r18
 4007d94:	8080030d 	sth	r2,12(r16)
 4007d98:	0027883a 	mov	r19,zero
 4007d9c:	003fd806 	br	4007d00 <__alt_data_end+0xfc007d00>
 4007da0:	8140038f 	ldh	r5,14(r16)
 4007da4:	8809883a 	mov	r4,r17
 4007da8:	400be240 	call	400be24 <_isatty_r>
 4007dac:	103fe226 	beq	r2,zero,4007d38 <__alt_data_end+0xfc007d38>
 4007db0:	8080030b 	ldhu	r2,12(r16)
 4007db4:	10800054 	ori	r2,r2,1
 4007db8:	8080030d 	sth	r2,12(r16)
 4007dbc:	003fde06 	br	4007d38 <__alt_data_end+0xfc007d38>
 4007dc0:	8080030b 	ldhu	r2,12(r16)
 4007dc4:	10c0800c 	andi	r3,r2,512
 4007dc8:	183fdb1e 	bne	r3,zero,4007d38 <__alt_data_end+0xfc007d38>
 4007dcc:	10800094 	ori	r2,r2,2
 4007dd0:	80c010c4 	addi	r3,r16,67
 4007dd4:	8080030d 	sth	r2,12(r16)
 4007dd8:	00800044 	movi	r2,1
 4007ddc:	80c00015 	stw	r3,0(r16)
 4007de0:	80c00415 	stw	r3,16(r16)
 4007de4:	80800515 	stw	r2,20(r16)
 4007de8:	003fd306 	br	4007d38 <__alt_data_end+0xfc007d38>
 4007dec:	04810004 	movi	r18,1024
 4007df0:	003fc306 	br	4007d00 <__alt_data_end+0xfc007d00>
 4007df4:	0027883a 	mov	r19,zero
 4007df8:	04810004 	movi	r18,1024
 4007dfc:	003fc006 	br	4007d00 <__alt_data_end+0xfc007d00>

04007e00 <_malloc_r>:
 4007e00:	defff504 	addi	sp,sp,-44
 4007e04:	dc800315 	stw	r18,12(sp)
 4007e08:	dfc00a15 	stw	ra,40(sp)
 4007e0c:	df000915 	stw	fp,36(sp)
 4007e10:	ddc00815 	stw	r23,32(sp)
 4007e14:	dd800715 	stw	r22,28(sp)
 4007e18:	dd400615 	stw	r21,24(sp)
 4007e1c:	dd000515 	stw	r20,20(sp)
 4007e20:	dcc00415 	stw	r19,16(sp)
 4007e24:	dc400215 	stw	r17,8(sp)
 4007e28:	dc000115 	stw	r16,4(sp)
 4007e2c:	288002c4 	addi	r2,r5,11
 4007e30:	00c00584 	movi	r3,22
 4007e34:	2025883a 	mov	r18,r4
 4007e38:	18807f2e 	bgeu	r3,r2,4008038 <_malloc_r+0x238>
 4007e3c:	047ffe04 	movi	r17,-8
 4007e40:	1462703a 	and	r17,r2,r17
 4007e44:	8800a316 	blt	r17,zero,40080d4 <_malloc_r+0x2d4>
 4007e48:	8940a236 	bltu	r17,r5,40080d4 <_malloc_r+0x2d4>
 4007e4c:	400fcd80 	call	400fcd8 <__malloc_lock>
 4007e50:	00807dc4 	movi	r2,503
 4007e54:	1441e92e 	bgeu	r2,r17,40085fc <_malloc_r+0x7fc>
 4007e58:	8804d27a 	srli	r2,r17,9
 4007e5c:	1000a126 	beq	r2,zero,40080e4 <_malloc_r+0x2e4>
 4007e60:	00c00104 	movi	r3,4
 4007e64:	18811e36 	bltu	r3,r2,40082e0 <_malloc_r+0x4e0>
 4007e68:	8804d1ba 	srli	r2,r17,6
 4007e6c:	12000e44 	addi	r8,r2,57
 4007e70:	11c00e04 	addi	r7,r2,56
 4007e74:	4209883a 	add	r4,r8,r8
 4007e78:	04c100f4 	movhi	r19,1027
 4007e7c:	2109883a 	add	r4,r4,r4
 4007e80:	9cd32a04 	addi	r19,r19,19624
 4007e84:	2109883a 	add	r4,r4,r4
 4007e88:	9909883a 	add	r4,r19,r4
 4007e8c:	24000117 	ldw	r16,4(r4)
 4007e90:	213ffe04 	addi	r4,r4,-8
 4007e94:	24009726 	beq	r4,r16,40080f4 <_malloc_r+0x2f4>
 4007e98:	80800117 	ldw	r2,4(r16)
 4007e9c:	01bfff04 	movi	r6,-4
 4007ea0:	014003c4 	movi	r5,15
 4007ea4:	1184703a 	and	r2,r2,r6
 4007ea8:	1447c83a 	sub	r3,r2,r17
 4007eac:	28c00716 	blt	r5,r3,4007ecc <_malloc_r+0xcc>
 4007eb0:	1800920e 	bge	r3,zero,40080fc <_malloc_r+0x2fc>
 4007eb4:	84000317 	ldw	r16,12(r16)
 4007eb8:	24008e26 	beq	r4,r16,40080f4 <_malloc_r+0x2f4>
 4007ebc:	80800117 	ldw	r2,4(r16)
 4007ec0:	1184703a 	and	r2,r2,r6
 4007ec4:	1447c83a 	sub	r3,r2,r17
 4007ec8:	28fff90e 	bge	r5,r3,4007eb0 <__alt_data_end+0xfc007eb0>
 4007ecc:	3809883a 	mov	r4,r7
 4007ed0:	018100f4 	movhi	r6,1027
 4007ed4:	9c000417 	ldw	r16,16(r19)
 4007ed8:	31932a04 	addi	r6,r6,19624
 4007edc:	32000204 	addi	r8,r6,8
 4007ee0:	82013426 	beq	r16,r8,40083b4 <_malloc_r+0x5b4>
 4007ee4:	80c00117 	ldw	r3,4(r16)
 4007ee8:	00bfff04 	movi	r2,-4
 4007eec:	188e703a 	and	r7,r3,r2
 4007ef0:	3c45c83a 	sub	r2,r7,r17
 4007ef4:	00c003c4 	movi	r3,15
 4007ef8:	18811f16 	blt	r3,r2,4008378 <_malloc_r+0x578>
 4007efc:	32000515 	stw	r8,20(r6)
 4007f00:	32000415 	stw	r8,16(r6)
 4007f04:	10007f0e 	bge	r2,zero,4008104 <_malloc_r+0x304>
 4007f08:	00807fc4 	movi	r2,511
 4007f0c:	11c0fd36 	bltu	r2,r7,4008304 <_malloc_r+0x504>
 4007f10:	3806d0fa 	srli	r3,r7,3
 4007f14:	01c00044 	movi	r7,1
 4007f18:	30800117 	ldw	r2,4(r6)
 4007f1c:	19400044 	addi	r5,r3,1
 4007f20:	294b883a 	add	r5,r5,r5
 4007f24:	1807d0ba 	srai	r3,r3,2
 4007f28:	294b883a 	add	r5,r5,r5
 4007f2c:	294b883a 	add	r5,r5,r5
 4007f30:	298b883a 	add	r5,r5,r6
 4007f34:	38c6983a 	sll	r3,r7,r3
 4007f38:	29c00017 	ldw	r7,0(r5)
 4007f3c:	2a7ffe04 	addi	r9,r5,-8
 4007f40:	1886b03a 	or	r3,r3,r2
 4007f44:	82400315 	stw	r9,12(r16)
 4007f48:	81c00215 	stw	r7,8(r16)
 4007f4c:	30c00115 	stw	r3,4(r6)
 4007f50:	2c000015 	stw	r16,0(r5)
 4007f54:	3c000315 	stw	r16,12(r7)
 4007f58:	2005d0ba 	srai	r2,r4,2
 4007f5c:	01400044 	movi	r5,1
 4007f60:	288a983a 	sll	r5,r5,r2
 4007f64:	19406f36 	bltu	r3,r5,4008124 <_malloc_r+0x324>
 4007f68:	28c4703a 	and	r2,r5,r3
 4007f6c:	10000a1e 	bne	r2,zero,4007f98 <_malloc_r+0x198>
 4007f70:	00bfff04 	movi	r2,-4
 4007f74:	294b883a 	add	r5,r5,r5
 4007f78:	2088703a 	and	r4,r4,r2
 4007f7c:	28c4703a 	and	r2,r5,r3
 4007f80:	21000104 	addi	r4,r4,4
 4007f84:	1000041e 	bne	r2,zero,4007f98 <_malloc_r+0x198>
 4007f88:	294b883a 	add	r5,r5,r5
 4007f8c:	28c4703a 	and	r2,r5,r3
 4007f90:	21000104 	addi	r4,r4,4
 4007f94:	103ffc26 	beq	r2,zero,4007f88 <__alt_data_end+0xfc007f88>
 4007f98:	02bfff04 	movi	r10,-4
 4007f9c:	024003c4 	movi	r9,15
 4007fa0:	21800044 	addi	r6,r4,1
 4007fa4:	318d883a 	add	r6,r6,r6
 4007fa8:	318d883a 	add	r6,r6,r6
 4007fac:	318d883a 	add	r6,r6,r6
 4007fb0:	998d883a 	add	r6,r19,r6
 4007fb4:	333ffe04 	addi	r12,r6,-8
 4007fb8:	2017883a 	mov	r11,r4
 4007fbc:	31800104 	addi	r6,r6,4
 4007fc0:	34000017 	ldw	r16,0(r6)
 4007fc4:	31fffd04 	addi	r7,r6,-12
 4007fc8:	81c0041e 	bne	r16,r7,4007fdc <_malloc_r+0x1dc>
 4007fcc:	0000fb06 	br	40083bc <_malloc_r+0x5bc>
 4007fd0:	1801030e 	bge	r3,zero,40083e0 <_malloc_r+0x5e0>
 4007fd4:	84000317 	ldw	r16,12(r16)
 4007fd8:	81c0f826 	beq	r16,r7,40083bc <_malloc_r+0x5bc>
 4007fdc:	80800117 	ldw	r2,4(r16)
 4007fe0:	1284703a 	and	r2,r2,r10
 4007fe4:	1447c83a 	sub	r3,r2,r17
 4007fe8:	48fff90e 	bge	r9,r3,4007fd0 <__alt_data_end+0xfc007fd0>
 4007fec:	80800317 	ldw	r2,12(r16)
 4007ff0:	81000217 	ldw	r4,8(r16)
 4007ff4:	89400054 	ori	r5,r17,1
 4007ff8:	81400115 	stw	r5,4(r16)
 4007ffc:	20800315 	stw	r2,12(r4)
 4008000:	11000215 	stw	r4,8(r2)
 4008004:	8463883a 	add	r17,r16,r17
 4008008:	9c400515 	stw	r17,20(r19)
 400800c:	9c400415 	stw	r17,16(r19)
 4008010:	18800054 	ori	r2,r3,1
 4008014:	88800115 	stw	r2,4(r17)
 4008018:	8a000315 	stw	r8,12(r17)
 400801c:	8a000215 	stw	r8,8(r17)
 4008020:	88e3883a 	add	r17,r17,r3
 4008024:	88c00015 	stw	r3,0(r17)
 4008028:	9009883a 	mov	r4,r18
 400802c:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4008030:	80800204 	addi	r2,r16,8
 4008034:	00001b06 	br	40080a4 <_malloc_r+0x2a4>
 4008038:	04400404 	movi	r17,16
 400803c:	89402536 	bltu	r17,r5,40080d4 <_malloc_r+0x2d4>
 4008040:	400fcd80 	call	400fcd8 <__malloc_lock>
 4008044:	00800184 	movi	r2,6
 4008048:	01000084 	movi	r4,2
 400804c:	04c100f4 	movhi	r19,1027
 4008050:	1085883a 	add	r2,r2,r2
 4008054:	9cd32a04 	addi	r19,r19,19624
 4008058:	1085883a 	add	r2,r2,r2
 400805c:	9885883a 	add	r2,r19,r2
 4008060:	14000117 	ldw	r16,4(r2)
 4008064:	10fffe04 	addi	r3,r2,-8
 4008068:	80c0d926 	beq	r16,r3,40083d0 <_malloc_r+0x5d0>
 400806c:	80c00117 	ldw	r3,4(r16)
 4008070:	81000317 	ldw	r4,12(r16)
 4008074:	00bfff04 	movi	r2,-4
 4008078:	1884703a 	and	r2,r3,r2
 400807c:	81400217 	ldw	r5,8(r16)
 4008080:	8085883a 	add	r2,r16,r2
 4008084:	10c00117 	ldw	r3,4(r2)
 4008088:	29000315 	stw	r4,12(r5)
 400808c:	21400215 	stw	r5,8(r4)
 4008090:	18c00054 	ori	r3,r3,1
 4008094:	10c00115 	stw	r3,4(r2)
 4008098:	9009883a 	mov	r4,r18
 400809c:	400fcfc0 	call	400fcfc <__malloc_unlock>
 40080a0:	80800204 	addi	r2,r16,8
 40080a4:	dfc00a17 	ldw	ra,40(sp)
 40080a8:	df000917 	ldw	fp,36(sp)
 40080ac:	ddc00817 	ldw	r23,32(sp)
 40080b0:	dd800717 	ldw	r22,28(sp)
 40080b4:	dd400617 	ldw	r21,24(sp)
 40080b8:	dd000517 	ldw	r20,20(sp)
 40080bc:	dcc00417 	ldw	r19,16(sp)
 40080c0:	dc800317 	ldw	r18,12(sp)
 40080c4:	dc400217 	ldw	r17,8(sp)
 40080c8:	dc000117 	ldw	r16,4(sp)
 40080cc:	dec00b04 	addi	sp,sp,44
 40080d0:	f800283a 	ret
 40080d4:	00800304 	movi	r2,12
 40080d8:	90800015 	stw	r2,0(r18)
 40080dc:	0005883a 	mov	r2,zero
 40080e0:	003ff006 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40080e4:	01002004 	movi	r4,128
 40080e8:	02001004 	movi	r8,64
 40080ec:	01c00fc4 	movi	r7,63
 40080f0:	003f6106 	br	4007e78 <__alt_data_end+0xfc007e78>
 40080f4:	4009883a 	mov	r4,r8
 40080f8:	003f7506 	br	4007ed0 <__alt_data_end+0xfc007ed0>
 40080fc:	81000317 	ldw	r4,12(r16)
 4008100:	003fde06 	br	400807c <__alt_data_end+0xfc00807c>
 4008104:	81c5883a 	add	r2,r16,r7
 4008108:	11400117 	ldw	r5,4(r2)
 400810c:	9009883a 	mov	r4,r18
 4008110:	29400054 	ori	r5,r5,1
 4008114:	11400115 	stw	r5,4(r2)
 4008118:	400fcfc0 	call	400fcfc <__malloc_unlock>
 400811c:	80800204 	addi	r2,r16,8
 4008120:	003fe006 	br	40080a4 <__alt_data_end+0xfc0080a4>
 4008124:	9c000217 	ldw	r16,8(r19)
 4008128:	00bfff04 	movi	r2,-4
 400812c:	85800117 	ldw	r22,4(r16)
 4008130:	b0ac703a 	and	r22,r22,r2
 4008134:	b4400336 	bltu	r22,r17,4008144 <_malloc_r+0x344>
 4008138:	b445c83a 	sub	r2,r22,r17
 400813c:	00c003c4 	movi	r3,15
 4008140:	18805d16 	blt	r3,r2,40082b8 <_malloc_r+0x4b8>
 4008144:	05c100f4 	movhi	r23,1027
 4008148:	00810134 	movhi	r2,1028
 400814c:	10a57b04 	addi	r2,r2,-27156
 4008150:	bdd8be04 	addi	r23,r23,25336
 4008154:	15400017 	ldw	r21,0(r2)
 4008158:	b8c00017 	ldw	r3,0(r23)
 400815c:	00bfffc4 	movi	r2,-1
 4008160:	858d883a 	add	r6,r16,r22
 4008164:	8d6b883a 	add	r21,r17,r21
 4008168:	1880ea26 	beq	r3,r2,4008514 <_malloc_r+0x714>
 400816c:	ad4403c4 	addi	r21,r21,4111
 4008170:	00bc0004 	movi	r2,-4096
 4008174:	a8aa703a 	and	r21,r21,r2
 4008178:	a80b883a 	mov	r5,r21
 400817c:	9009883a 	mov	r4,r18
 4008180:	d9800015 	stw	r6,0(sp)
 4008184:	400a0900 	call	400a090 <_sbrk_r>
 4008188:	1029883a 	mov	r20,r2
 400818c:	00bfffc4 	movi	r2,-1
 4008190:	d9800017 	ldw	r6,0(sp)
 4008194:	a080e826 	beq	r20,r2,4008538 <_malloc_r+0x738>
 4008198:	a180a636 	bltu	r20,r6,4008434 <_malloc_r+0x634>
 400819c:	07010134 	movhi	fp,1028
 40081a0:	e7258404 	addi	fp,fp,-27120
 40081a4:	e0800017 	ldw	r2,0(fp)
 40081a8:	a887883a 	add	r3,r21,r2
 40081ac:	e0c00015 	stw	r3,0(fp)
 40081b0:	3500e626 	beq	r6,r20,400854c <_malloc_r+0x74c>
 40081b4:	b9000017 	ldw	r4,0(r23)
 40081b8:	00bfffc4 	movi	r2,-1
 40081bc:	2080ee26 	beq	r4,r2,4008578 <_malloc_r+0x778>
 40081c0:	a185c83a 	sub	r2,r20,r6
 40081c4:	10c5883a 	add	r2,r2,r3
 40081c8:	e0800015 	stw	r2,0(fp)
 40081cc:	a0c001cc 	andi	r3,r20,7
 40081d0:	1800bc26 	beq	r3,zero,40084c4 <_malloc_r+0x6c4>
 40081d4:	a0e9c83a 	sub	r20,r20,r3
 40081d8:	00840204 	movi	r2,4104
 40081dc:	a5000204 	addi	r20,r20,8
 40081e0:	10c7c83a 	sub	r3,r2,r3
 40081e4:	a545883a 	add	r2,r20,r21
 40081e8:	1083ffcc 	andi	r2,r2,4095
 40081ec:	18abc83a 	sub	r21,r3,r2
 40081f0:	a80b883a 	mov	r5,r21
 40081f4:	9009883a 	mov	r4,r18
 40081f8:	400a0900 	call	400a090 <_sbrk_r>
 40081fc:	00ffffc4 	movi	r3,-1
 4008200:	10c0e126 	beq	r2,r3,4008588 <_malloc_r+0x788>
 4008204:	1505c83a 	sub	r2,r2,r20
 4008208:	1545883a 	add	r2,r2,r21
 400820c:	10800054 	ori	r2,r2,1
 4008210:	e0c00017 	ldw	r3,0(fp)
 4008214:	9d000215 	stw	r20,8(r19)
 4008218:	a0800115 	stw	r2,4(r20)
 400821c:	a8c7883a 	add	r3,r21,r3
 4008220:	e0c00015 	stw	r3,0(fp)
 4008224:	84c00e26 	beq	r16,r19,4008260 <_malloc_r+0x460>
 4008228:	018003c4 	movi	r6,15
 400822c:	3580a72e 	bgeu	r6,r22,40084cc <_malloc_r+0x6cc>
 4008230:	81400117 	ldw	r5,4(r16)
 4008234:	013ffe04 	movi	r4,-8
 4008238:	b0bffd04 	addi	r2,r22,-12
 400823c:	1104703a 	and	r2,r2,r4
 4008240:	2900004c 	andi	r4,r5,1
 4008244:	2088b03a 	or	r4,r4,r2
 4008248:	81000115 	stw	r4,4(r16)
 400824c:	01400144 	movi	r5,5
 4008250:	8089883a 	add	r4,r16,r2
 4008254:	21400115 	stw	r5,4(r4)
 4008258:	21400215 	stw	r5,8(r4)
 400825c:	3080cd36 	bltu	r6,r2,4008594 <_malloc_r+0x794>
 4008260:	00810134 	movhi	r2,1028
 4008264:	10a57a04 	addi	r2,r2,-27160
 4008268:	11000017 	ldw	r4,0(r2)
 400826c:	20c0012e 	bgeu	r4,r3,4008274 <_malloc_r+0x474>
 4008270:	10c00015 	stw	r3,0(r2)
 4008274:	00810134 	movhi	r2,1028
 4008278:	10a57904 	addi	r2,r2,-27164
 400827c:	11000017 	ldw	r4,0(r2)
 4008280:	9c000217 	ldw	r16,8(r19)
 4008284:	20c0012e 	bgeu	r4,r3,400828c <_malloc_r+0x48c>
 4008288:	10c00015 	stw	r3,0(r2)
 400828c:	80c00117 	ldw	r3,4(r16)
 4008290:	00bfff04 	movi	r2,-4
 4008294:	1886703a 	and	r3,r3,r2
 4008298:	1c45c83a 	sub	r2,r3,r17
 400829c:	1c400236 	bltu	r3,r17,40082a8 <_malloc_r+0x4a8>
 40082a0:	00c003c4 	movi	r3,15
 40082a4:	18800416 	blt	r3,r2,40082b8 <_malloc_r+0x4b8>
 40082a8:	9009883a 	mov	r4,r18
 40082ac:	400fcfc0 	call	400fcfc <__malloc_unlock>
 40082b0:	0005883a 	mov	r2,zero
 40082b4:	003f7b06 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40082b8:	88c00054 	ori	r3,r17,1
 40082bc:	80c00115 	stw	r3,4(r16)
 40082c0:	8463883a 	add	r17,r16,r17
 40082c4:	10800054 	ori	r2,r2,1
 40082c8:	9c400215 	stw	r17,8(r19)
 40082cc:	88800115 	stw	r2,4(r17)
 40082d0:	9009883a 	mov	r4,r18
 40082d4:	400fcfc0 	call	400fcfc <__malloc_unlock>
 40082d8:	80800204 	addi	r2,r16,8
 40082dc:	003f7106 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40082e0:	00c00504 	movi	r3,20
 40082e4:	18804a2e 	bgeu	r3,r2,4008410 <_malloc_r+0x610>
 40082e8:	00c01504 	movi	r3,84
 40082ec:	18806e36 	bltu	r3,r2,40084a8 <_malloc_r+0x6a8>
 40082f0:	8804d33a 	srli	r2,r17,12
 40082f4:	12001bc4 	addi	r8,r2,111
 40082f8:	11c01b84 	addi	r7,r2,110
 40082fc:	4209883a 	add	r4,r8,r8
 4008300:	003edd06 	br	4007e78 <__alt_data_end+0xfc007e78>
 4008304:	3804d27a 	srli	r2,r7,9
 4008308:	00c00104 	movi	r3,4
 400830c:	1880442e 	bgeu	r3,r2,4008420 <_malloc_r+0x620>
 4008310:	00c00504 	movi	r3,20
 4008314:	18808136 	bltu	r3,r2,400851c <_malloc_r+0x71c>
 4008318:	11401704 	addi	r5,r2,92
 400831c:	10c016c4 	addi	r3,r2,91
 4008320:	294b883a 	add	r5,r5,r5
 4008324:	294b883a 	add	r5,r5,r5
 4008328:	294b883a 	add	r5,r5,r5
 400832c:	994b883a 	add	r5,r19,r5
 4008330:	28800017 	ldw	r2,0(r5)
 4008334:	018100f4 	movhi	r6,1027
 4008338:	297ffe04 	addi	r5,r5,-8
 400833c:	31932a04 	addi	r6,r6,19624
 4008340:	28806526 	beq	r5,r2,40084d8 <_malloc_r+0x6d8>
 4008344:	01bfff04 	movi	r6,-4
 4008348:	10c00117 	ldw	r3,4(r2)
 400834c:	1986703a 	and	r3,r3,r6
 4008350:	38c0022e 	bgeu	r7,r3,400835c <_malloc_r+0x55c>
 4008354:	10800217 	ldw	r2,8(r2)
 4008358:	28bffb1e 	bne	r5,r2,4008348 <__alt_data_end+0xfc008348>
 400835c:	11400317 	ldw	r5,12(r2)
 4008360:	98c00117 	ldw	r3,4(r19)
 4008364:	81400315 	stw	r5,12(r16)
 4008368:	80800215 	stw	r2,8(r16)
 400836c:	2c000215 	stw	r16,8(r5)
 4008370:	14000315 	stw	r16,12(r2)
 4008374:	003ef806 	br	4007f58 <__alt_data_end+0xfc007f58>
 4008378:	88c00054 	ori	r3,r17,1
 400837c:	80c00115 	stw	r3,4(r16)
 4008380:	8463883a 	add	r17,r16,r17
 4008384:	34400515 	stw	r17,20(r6)
 4008388:	34400415 	stw	r17,16(r6)
 400838c:	10c00054 	ori	r3,r2,1
 4008390:	8a000315 	stw	r8,12(r17)
 4008394:	8a000215 	stw	r8,8(r17)
 4008398:	88c00115 	stw	r3,4(r17)
 400839c:	88a3883a 	add	r17,r17,r2
 40083a0:	88800015 	stw	r2,0(r17)
 40083a4:	9009883a 	mov	r4,r18
 40083a8:	400fcfc0 	call	400fcfc <__malloc_unlock>
 40083ac:	80800204 	addi	r2,r16,8
 40083b0:	003f3c06 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40083b4:	30c00117 	ldw	r3,4(r6)
 40083b8:	003ee706 	br	4007f58 <__alt_data_end+0xfc007f58>
 40083bc:	5ac00044 	addi	r11,r11,1
 40083c0:	588000cc 	andi	r2,r11,3
 40083c4:	31800204 	addi	r6,r6,8
 40083c8:	103efd1e 	bne	r2,zero,4007fc0 <__alt_data_end+0xfc007fc0>
 40083cc:	00002406 	br	4008460 <_malloc_r+0x660>
 40083d0:	14000317 	ldw	r16,12(r2)
 40083d4:	143f251e 	bne	r2,r16,400806c <__alt_data_end+0xfc00806c>
 40083d8:	21000084 	addi	r4,r4,2
 40083dc:	003ebc06 	br	4007ed0 <__alt_data_end+0xfc007ed0>
 40083e0:	8085883a 	add	r2,r16,r2
 40083e4:	10c00117 	ldw	r3,4(r2)
 40083e8:	81000317 	ldw	r4,12(r16)
 40083ec:	81400217 	ldw	r5,8(r16)
 40083f0:	18c00054 	ori	r3,r3,1
 40083f4:	10c00115 	stw	r3,4(r2)
 40083f8:	29000315 	stw	r4,12(r5)
 40083fc:	21400215 	stw	r5,8(r4)
 4008400:	9009883a 	mov	r4,r18
 4008404:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4008408:	80800204 	addi	r2,r16,8
 400840c:	003f2506 	br	40080a4 <__alt_data_end+0xfc0080a4>
 4008410:	12001704 	addi	r8,r2,92
 4008414:	11c016c4 	addi	r7,r2,91
 4008418:	4209883a 	add	r4,r8,r8
 400841c:	003e9606 	br	4007e78 <__alt_data_end+0xfc007e78>
 4008420:	3804d1ba 	srli	r2,r7,6
 4008424:	11400e44 	addi	r5,r2,57
 4008428:	10c00e04 	addi	r3,r2,56
 400842c:	294b883a 	add	r5,r5,r5
 4008430:	003fbc06 	br	4008324 <__alt_data_end+0xfc008324>
 4008434:	84ff5926 	beq	r16,r19,400819c <__alt_data_end+0xfc00819c>
 4008438:	008100f4 	movhi	r2,1027
 400843c:	10932a04 	addi	r2,r2,19624
 4008440:	14000217 	ldw	r16,8(r2)
 4008444:	00bfff04 	movi	r2,-4
 4008448:	80c00117 	ldw	r3,4(r16)
 400844c:	1886703a 	and	r3,r3,r2
 4008450:	003f9106 	br	4008298 <__alt_data_end+0xfc008298>
 4008454:	60800217 	ldw	r2,8(r12)
 4008458:	213fffc4 	addi	r4,r4,-1
 400845c:	1300651e 	bne	r2,r12,40085f4 <_malloc_r+0x7f4>
 4008460:	208000cc 	andi	r2,r4,3
 4008464:	633ffe04 	addi	r12,r12,-8
 4008468:	103ffa1e 	bne	r2,zero,4008454 <__alt_data_end+0xfc008454>
 400846c:	98800117 	ldw	r2,4(r19)
 4008470:	0146303a 	nor	r3,zero,r5
 4008474:	1884703a 	and	r2,r3,r2
 4008478:	98800115 	stw	r2,4(r19)
 400847c:	294b883a 	add	r5,r5,r5
 4008480:	117f2836 	bltu	r2,r5,4008124 <__alt_data_end+0xfc008124>
 4008484:	283f2726 	beq	r5,zero,4008124 <__alt_data_end+0xfc008124>
 4008488:	2886703a 	and	r3,r5,r2
 400848c:	5809883a 	mov	r4,r11
 4008490:	183ec31e 	bne	r3,zero,4007fa0 <__alt_data_end+0xfc007fa0>
 4008494:	294b883a 	add	r5,r5,r5
 4008498:	2886703a 	and	r3,r5,r2
 400849c:	21000104 	addi	r4,r4,4
 40084a0:	183ffc26 	beq	r3,zero,4008494 <__alt_data_end+0xfc008494>
 40084a4:	003ebe06 	br	4007fa0 <__alt_data_end+0xfc007fa0>
 40084a8:	00c05504 	movi	r3,340
 40084ac:	18801236 	bltu	r3,r2,40084f8 <_malloc_r+0x6f8>
 40084b0:	8804d3fa 	srli	r2,r17,15
 40084b4:	12001e04 	addi	r8,r2,120
 40084b8:	11c01dc4 	addi	r7,r2,119
 40084bc:	4209883a 	add	r4,r8,r8
 40084c0:	003e6d06 	br	4007e78 <__alt_data_end+0xfc007e78>
 40084c4:	00c40004 	movi	r3,4096
 40084c8:	003f4606 	br	40081e4 <__alt_data_end+0xfc0081e4>
 40084cc:	00800044 	movi	r2,1
 40084d0:	a0800115 	stw	r2,4(r20)
 40084d4:	003f7406 	br	40082a8 <__alt_data_end+0xfc0082a8>
 40084d8:	1805d0ba 	srai	r2,r3,2
 40084dc:	01c00044 	movi	r7,1
 40084e0:	30c00117 	ldw	r3,4(r6)
 40084e4:	388e983a 	sll	r7,r7,r2
 40084e8:	2805883a 	mov	r2,r5
 40084ec:	38c6b03a 	or	r3,r7,r3
 40084f0:	30c00115 	stw	r3,4(r6)
 40084f4:	003f9b06 	br	4008364 <__alt_data_end+0xfc008364>
 40084f8:	00c15504 	movi	r3,1364
 40084fc:	18801a36 	bltu	r3,r2,4008568 <_malloc_r+0x768>
 4008500:	8804d4ba 	srli	r2,r17,18
 4008504:	12001f44 	addi	r8,r2,125
 4008508:	11c01f04 	addi	r7,r2,124
 400850c:	4209883a 	add	r4,r8,r8
 4008510:	003e5906 	br	4007e78 <__alt_data_end+0xfc007e78>
 4008514:	ad400404 	addi	r21,r21,16
 4008518:	003f1706 	br	4008178 <__alt_data_end+0xfc008178>
 400851c:	00c01504 	movi	r3,84
 4008520:	18802336 	bltu	r3,r2,40085b0 <_malloc_r+0x7b0>
 4008524:	3804d33a 	srli	r2,r7,12
 4008528:	11401bc4 	addi	r5,r2,111
 400852c:	10c01b84 	addi	r3,r2,110
 4008530:	294b883a 	add	r5,r5,r5
 4008534:	003f7b06 	br	4008324 <__alt_data_end+0xfc008324>
 4008538:	9c000217 	ldw	r16,8(r19)
 400853c:	00bfff04 	movi	r2,-4
 4008540:	80c00117 	ldw	r3,4(r16)
 4008544:	1886703a 	and	r3,r3,r2
 4008548:	003f5306 	br	4008298 <__alt_data_end+0xfc008298>
 400854c:	3083ffcc 	andi	r2,r6,4095
 4008550:	103f181e 	bne	r2,zero,40081b4 <__alt_data_end+0xfc0081b4>
 4008554:	99000217 	ldw	r4,8(r19)
 4008558:	b545883a 	add	r2,r22,r21
 400855c:	10800054 	ori	r2,r2,1
 4008560:	20800115 	stw	r2,4(r4)
 4008564:	003f3e06 	br	4008260 <__alt_data_end+0xfc008260>
 4008568:	01003f84 	movi	r4,254
 400856c:	02001fc4 	movi	r8,127
 4008570:	01c01f84 	movi	r7,126
 4008574:	003e4006 	br	4007e78 <__alt_data_end+0xfc007e78>
 4008578:	008100f4 	movhi	r2,1027
 400857c:	1098be04 	addi	r2,r2,25336
 4008580:	15000015 	stw	r20,0(r2)
 4008584:	003f1106 	br	40081cc <__alt_data_end+0xfc0081cc>
 4008588:	00800044 	movi	r2,1
 400858c:	002b883a 	mov	r21,zero
 4008590:	003f1f06 	br	4008210 <__alt_data_end+0xfc008210>
 4008594:	81400204 	addi	r5,r16,8
 4008598:	9009883a 	mov	r4,r18
 400859c:	40072140 	call	4007214 <_free_r>
 40085a0:	00810134 	movhi	r2,1028
 40085a4:	10a58404 	addi	r2,r2,-27120
 40085a8:	10c00017 	ldw	r3,0(r2)
 40085ac:	003f2c06 	br	4008260 <__alt_data_end+0xfc008260>
 40085b0:	00c05504 	movi	r3,340
 40085b4:	18800536 	bltu	r3,r2,40085cc <_malloc_r+0x7cc>
 40085b8:	3804d3fa 	srli	r2,r7,15
 40085bc:	11401e04 	addi	r5,r2,120
 40085c0:	10c01dc4 	addi	r3,r2,119
 40085c4:	294b883a 	add	r5,r5,r5
 40085c8:	003f5606 	br	4008324 <__alt_data_end+0xfc008324>
 40085cc:	00c15504 	movi	r3,1364
 40085d0:	18800536 	bltu	r3,r2,40085e8 <_malloc_r+0x7e8>
 40085d4:	3804d4ba 	srli	r2,r7,18
 40085d8:	11401f44 	addi	r5,r2,125
 40085dc:	10c01f04 	addi	r3,r2,124
 40085e0:	294b883a 	add	r5,r5,r5
 40085e4:	003f4f06 	br	4008324 <__alt_data_end+0xfc008324>
 40085e8:	01403f84 	movi	r5,254
 40085ec:	00c01f84 	movi	r3,126
 40085f0:	003f4c06 	br	4008324 <__alt_data_end+0xfc008324>
 40085f4:	98800117 	ldw	r2,4(r19)
 40085f8:	003fa006 	br	400847c <__alt_data_end+0xfc00847c>
 40085fc:	8808d0fa 	srli	r4,r17,3
 4008600:	20800044 	addi	r2,r4,1
 4008604:	1085883a 	add	r2,r2,r2
 4008608:	003e9006 	br	400804c <__alt_data_end+0xfc00804c>

0400860c <memchr>:
 400860c:	208000cc 	andi	r2,r4,3
 4008610:	280f883a 	mov	r7,r5
 4008614:	10003426 	beq	r2,zero,40086e8 <memchr+0xdc>
 4008618:	30bfffc4 	addi	r2,r6,-1
 400861c:	30001a26 	beq	r6,zero,4008688 <memchr+0x7c>
 4008620:	20c00003 	ldbu	r3,0(r4)
 4008624:	29803fcc 	andi	r6,r5,255
 4008628:	30c0051e 	bne	r6,r3,4008640 <memchr+0x34>
 400862c:	00001806 	br	4008690 <memchr+0x84>
 4008630:	10001526 	beq	r2,zero,4008688 <memchr+0x7c>
 4008634:	20c00003 	ldbu	r3,0(r4)
 4008638:	10bfffc4 	addi	r2,r2,-1
 400863c:	30c01426 	beq	r6,r3,4008690 <memchr+0x84>
 4008640:	21000044 	addi	r4,r4,1
 4008644:	20c000cc 	andi	r3,r4,3
 4008648:	183ff91e 	bne	r3,zero,4008630 <__alt_data_end+0xfc008630>
 400864c:	020000c4 	movi	r8,3
 4008650:	40801136 	bltu	r8,r2,4008698 <memchr+0x8c>
 4008654:	10000c26 	beq	r2,zero,4008688 <memchr+0x7c>
 4008658:	20c00003 	ldbu	r3,0(r4)
 400865c:	29403fcc 	andi	r5,r5,255
 4008660:	28c00b26 	beq	r5,r3,4008690 <memchr+0x84>
 4008664:	20c00044 	addi	r3,r4,1
 4008668:	39803fcc 	andi	r6,r7,255
 400866c:	2089883a 	add	r4,r4,r2
 4008670:	00000306 	br	4008680 <memchr+0x74>
 4008674:	18c00044 	addi	r3,r3,1
 4008678:	197fffc3 	ldbu	r5,-1(r3)
 400867c:	31400526 	beq	r6,r5,4008694 <memchr+0x88>
 4008680:	1805883a 	mov	r2,r3
 4008684:	20fffb1e 	bne	r4,r3,4008674 <__alt_data_end+0xfc008674>
 4008688:	0005883a 	mov	r2,zero
 400868c:	f800283a 	ret
 4008690:	2005883a 	mov	r2,r4
 4008694:	f800283a 	ret
 4008698:	28c03fcc 	andi	r3,r5,255
 400869c:	1812923a 	slli	r9,r3,8
 40086a0:	02ffbff4 	movhi	r11,65279
 40086a4:	02a02074 	movhi	r10,32897
 40086a8:	48d2b03a 	or	r9,r9,r3
 40086ac:	4806943a 	slli	r3,r9,16
 40086b0:	5affbfc4 	addi	r11,r11,-257
 40086b4:	52a02004 	addi	r10,r10,-32640
 40086b8:	48d2b03a 	or	r9,r9,r3
 40086bc:	20c00017 	ldw	r3,0(r4)
 40086c0:	48c6f03a 	xor	r3,r9,r3
 40086c4:	1acd883a 	add	r6,r3,r11
 40086c8:	00c6303a 	nor	r3,zero,r3
 40086cc:	30c6703a 	and	r3,r6,r3
 40086d0:	1a86703a 	and	r3,r3,r10
 40086d4:	183fe01e 	bne	r3,zero,4008658 <__alt_data_end+0xfc008658>
 40086d8:	10bfff04 	addi	r2,r2,-4
 40086dc:	21000104 	addi	r4,r4,4
 40086e0:	40bff636 	bltu	r8,r2,40086bc <__alt_data_end+0xfc0086bc>
 40086e4:	003fdb06 	br	4008654 <__alt_data_end+0xfc008654>
 40086e8:	3005883a 	mov	r2,r6
 40086ec:	003fd706 	br	400864c <__alt_data_end+0xfc00864c>

040086f0 <memcpy>:
 40086f0:	defffd04 	addi	sp,sp,-12
 40086f4:	dfc00215 	stw	ra,8(sp)
 40086f8:	dc400115 	stw	r17,4(sp)
 40086fc:	dc000015 	stw	r16,0(sp)
 4008700:	00c003c4 	movi	r3,15
 4008704:	2005883a 	mov	r2,r4
 4008708:	1980452e 	bgeu	r3,r6,4008820 <memcpy+0x130>
 400870c:	2906b03a 	or	r3,r5,r4
 4008710:	18c000cc 	andi	r3,r3,3
 4008714:	1800441e 	bne	r3,zero,4008828 <memcpy+0x138>
 4008718:	347ffc04 	addi	r17,r6,-16
 400871c:	8822d13a 	srli	r17,r17,4
 4008720:	28c00104 	addi	r3,r5,4
 4008724:	23400104 	addi	r13,r4,4
 4008728:	8820913a 	slli	r16,r17,4
 400872c:	2b000204 	addi	r12,r5,8
 4008730:	22c00204 	addi	r11,r4,8
 4008734:	84000504 	addi	r16,r16,20
 4008738:	2a800304 	addi	r10,r5,12
 400873c:	22400304 	addi	r9,r4,12
 4008740:	2c21883a 	add	r16,r5,r16
 4008744:	2811883a 	mov	r8,r5
 4008748:	200f883a 	mov	r7,r4
 400874c:	41000017 	ldw	r4,0(r8)
 4008750:	1fc00017 	ldw	ra,0(r3)
 4008754:	63c00017 	ldw	r15,0(r12)
 4008758:	39000015 	stw	r4,0(r7)
 400875c:	53800017 	ldw	r14,0(r10)
 4008760:	6fc00015 	stw	ra,0(r13)
 4008764:	5bc00015 	stw	r15,0(r11)
 4008768:	4b800015 	stw	r14,0(r9)
 400876c:	18c00404 	addi	r3,r3,16
 4008770:	39c00404 	addi	r7,r7,16
 4008774:	42000404 	addi	r8,r8,16
 4008778:	6b400404 	addi	r13,r13,16
 400877c:	63000404 	addi	r12,r12,16
 4008780:	5ac00404 	addi	r11,r11,16
 4008784:	52800404 	addi	r10,r10,16
 4008788:	4a400404 	addi	r9,r9,16
 400878c:	1c3fef1e 	bne	r3,r16,400874c <__alt_data_end+0xfc00874c>
 4008790:	89c00044 	addi	r7,r17,1
 4008794:	380e913a 	slli	r7,r7,4
 4008798:	310003cc 	andi	r4,r6,15
 400879c:	02c000c4 	movi	r11,3
 40087a0:	11c7883a 	add	r3,r2,r7
 40087a4:	29cb883a 	add	r5,r5,r7
 40087a8:	5900212e 	bgeu	r11,r4,4008830 <memcpy+0x140>
 40087ac:	1813883a 	mov	r9,r3
 40087b0:	2811883a 	mov	r8,r5
 40087b4:	200f883a 	mov	r7,r4
 40087b8:	42800017 	ldw	r10,0(r8)
 40087bc:	4a400104 	addi	r9,r9,4
 40087c0:	39ffff04 	addi	r7,r7,-4
 40087c4:	4abfff15 	stw	r10,-4(r9)
 40087c8:	42000104 	addi	r8,r8,4
 40087cc:	59fffa36 	bltu	r11,r7,40087b8 <__alt_data_end+0xfc0087b8>
 40087d0:	213fff04 	addi	r4,r4,-4
 40087d4:	2008d0ba 	srli	r4,r4,2
 40087d8:	318000cc 	andi	r6,r6,3
 40087dc:	21000044 	addi	r4,r4,1
 40087e0:	2109883a 	add	r4,r4,r4
 40087e4:	2109883a 	add	r4,r4,r4
 40087e8:	1907883a 	add	r3,r3,r4
 40087ec:	290b883a 	add	r5,r5,r4
 40087f0:	30000626 	beq	r6,zero,400880c <memcpy+0x11c>
 40087f4:	198d883a 	add	r6,r3,r6
 40087f8:	29c00003 	ldbu	r7,0(r5)
 40087fc:	18c00044 	addi	r3,r3,1
 4008800:	29400044 	addi	r5,r5,1
 4008804:	19ffffc5 	stb	r7,-1(r3)
 4008808:	19bffb1e 	bne	r3,r6,40087f8 <__alt_data_end+0xfc0087f8>
 400880c:	dfc00217 	ldw	ra,8(sp)
 4008810:	dc400117 	ldw	r17,4(sp)
 4008814:	dc000017 	ldw	r16,0(sp)
 4008818:	dec00304 	addi	sp,sp,12
 400881c:	f800283a 	ret
 4008820:	2007883a 	mov	r3,r4
 4008824:	003ff206 	br	40087f0 <__alt_data_end+0xfc0087f0>
 4008828:	2007883a 	mov	r3,r4
 400882c:	003ff106 	br	40087f4 <__alt_data_end+0xfc0087f4>
 4008830:	200d883a 	mov	r6,r4
 4008834:	003fee06 	br	40087f0 <__alt_data_end+0xfc0087f0>

04008838 <memmove>:
 4008838:	2005883a 	mov	r2,r4
 400883c:	29000b2e 	bgeu	r5,r4,400886c <memmove+0x34>
 4008840:	298f883a 	add	r7,r5,r6
 4008844:	21c0092e 	bgeu	r4,r7,400886c <memmove+0x34>
 4008848:	2187883a 	add	r3,r4,r6
 400884c:	198bc83a 	sub	r5,r3,r6
 4008850:	30004826 	beq	r6,zero,4008974 <memmove+0x13c>
 4008854:	39ffffc4 	addi	r7,r7,-1
 4008858:	39000003 	ldbu	r4,0(r7)
 400885c:	18ffffc4 	addi	r3,r3,-1
 4008860:	19000005 	stb	r4,0(r3)
 4008864:	28fffb1e 	bne	r5,r3,4008854 <__alt_data_end+0xfc008854>
 4008868:	f800283a 	ret
 400886c:	00c003c4 	movi	r3,15
 4008870:	1980412e 	bgeu	r3,r6,4008978 <memmove+0x140>
 4008874:	2886b03a 	or	r3,r5,r2
 4008878:	18c000cc 	andi	r3,r3,3
 400887c:	1800401e 	bne	r3,zero,4008980 <memmove+0x148>
 4008880:	33fffc04 	addi	r15,r6,-16
 4008884:	781ed13a 	srli	r15,r15,4
 4008888:	28c00104 	addi	r3,r5,4
 400888c:	13400104 	addi	r13,r2,4
 4008890:	781c913a 	slli	r14,r15,4
 4008894:	2b000204 	addi	r12,r5,8
 4008898:	12c00204 	addi	r11,r2,8
 400889c:	73800504 	addi	r14,r14,20
 40088a0:	2a800304 	addi	r10,r5,12
 40088a4:	12400304 	addi	r9,r2,12
 40088a8:	2b9d883a 	add	r14,r5,r14
 40088ac:	2811883a 	mov	r8,r5
 40088b0:	100f883a 	mov	r7,r2
 40088b4:	41000017 	ldw	r4,0(r8)
 40088b8:	39c00404 	addi	r7,r7,16
 40088bc:	18c00404 	addi	r3,r3,16
 40088c0:	393ffc15 	stw	r4,-16(r7)
 40088c4:	193ffc17 	ldw	r4,-16(r3)
 40088c8:	6b400404 	addi	r13,r13,16
 40088cc:	5ac00404 	addi	r11,r11,16
 40088d0:	693ffc15 	stw	r4,-16(r13)
 40088d4:	61000017 	ldw	r4,0(r12)
 40088d8:	4a400404 	addi	r9,r9,16
 40088dc:	42000404 	addi	r8,r8,16
 40088e0:	593ffc15 	stw	r4,-16(r11)
 40088e4:	51000017 	ldw	r4,0(r10)
 40088e8:	63000404 	addi	r12,r12,16
 40088ec:	52800404 	addi	r10,r10,16
 40088f0:	493ffc15 	stw	r4,-16(r9)
 40088f4:	1bbfef1e 	bne	r3,r14,40088b4 <__alt_data_end+0xfc0088b4>
 40088f8:	79000044 	addi	r4,r15,1
 40088fc:	2008913a 	slli	r4,r4,4
 4008900:	328003cc 	andi	r10,r6,15
 4008904:	02c000c4 	movi	r11,3
 4008908:	1107883a 	add	r3,r2,r4
 400890c:	290b883a 	add	r5,r5,r4
 4008910:	5a801e2e 	bgeu	r11,r10,400898c <memmove+0x154>
 4008914:	1813883a 	mov	r9,r3
 4008918:	2811883a 	mov	r8,r5
 400891c:	500f883a 	mov	r7,r10
 4008920:	41000017 	ldw	r4,0(r8)
 4008924:	4a400104 	addi	r9,r9,4
 4008928:	39ffff04 	addi	r7,r7,-4
 400892c:	493fff15 	stw	r4,-4(r9)
 4008930:	42000104 	addi	r8,r8,4
 4008934:	59fffa36 	bltu	r11,r7,4008920 <__alt_data_end+0xfc008920>
 4008938:	513fff04 	addi	r4,r10,-4
 400893c:	2008d0ba 	srli	r4,r4,2
 4008940:	318000cc 	andi	r6,r6,3
 4008944:	21000044 	addi	r4,r4,1
 4008948:	2109883a 	add	r4,r4,r4
 400894c:	2109883a 	add	r4,r4,r4
 4008950:	1907883a 	add	r3,r3,r4
 4008954:	290b883a 	add	r5,r5,r4
 4008958:	30000b26 	beq	r6,zero,4008988 <memmove+0x150>
 400895c:	198d883a 	add	r6,r3,r6
 4008960:	29c00003 	ldbu	r7,0(r5)
 4008964:	18c00044 	addi	r3,r3,1
 4008968:	29400044 	addi	r5,r5,1
 400896c:	19ffffc5 	stb	r7,-1(r3)
 4008970:	19bffb1e 	bne	r3,r6,4008960 <__alt_data_end+0xfc008960>
 4008974:	f800283a 	ret
 4008978:	1007883a 	mov	r3,r2
 400897c:	003ff606 	br	4008958 <__alt_data_end+0xfc008958>
 4008980:	1007883a 	mov	r3,r2
 4008984:	003ff506 	br	400895c <__alt_data_end+0xfc00895c>
 4008988:	f800283a 	ret
 400898c:	500d883a 	mov	r6,r10
 4008990:	003ff106 	br	4008958 <__alt_data_end+0xfc008958>

04008994 <memset>:
 4008994:	20c000cc 	andi	r3,r4,3
 4008998:	2005883a 	mov	r2,r4
 400899c:	18004426 	beq	r3,zero,4008ab0 <memset+0x11c>
 40089a0:	31ffffc4 	addi	r7,r6,-1
 40089a4:	30004026 	beq	r6,zero,4008aa8 <memset+0x114>
 40089a8:	2813883a 	mov	r9,r5
 40089ac:	200d883a 	mov	r6,r4
 40089b0:	2007883a 	mov	r3,r4
 40089b4:	00000406 	br	40089c8 <memset+0x34>
 40089b8:	3a3fffc4 	addi	r8,r7,-1
 40089bc:	31800044 	addi	r6,r6,1
 40089c0:	38003926 	beq	r7,zero,4008aa8 <memset+0x114>
 40089c4:	400f883a 	mov	r7,r8
 40089c8:	18c00044 	addi	r3,r3,1
 40089cc:	32400005 	stb	r9,0(r6)
 40089d0:	1a0000cc 	andi	r8,r3,3
 40089d4:	403ff81e 	bne	r8,zero,40089b8 <__alt_data_end+0xfc0089b8>
 40089d8:	010000c4 	movi	r4,3
 40089dc:	21c02d2e 	bgeu	r4,r7,4008a94 <memset+0x100>
 40089e0:	29003fcc 	andi	r4,r5,255
 40089e4:	200c923a 	slli	r6,r4,8
 40089e8:	3108b03a 	or	r4,r6,r4
 40089ec:	200c943a 	slli	r6,r4,16
 40089f0:	218cb03a 	or	r6,r4,r6
 40089f4:	010003c4 	movi	r4,15
 40089f8:	21c0182e 	bgeu	r4,r7,4008a5c <memset+0xc8>
 40089fc:	3b3ffc04 	addi	r12,r7,-16
 4008a00:	6018d13a 	srli	r12,r12,4
 4008a04:	1a000104 	addi	r8,r3,4
 4008a08:	1ac00204 	addi	r11,r3,8
 4008a0c:	6008913a 	slli	r4,r12,4
 4008a10:	1a800304 	addi	r10,r3,12
 4008a14:	1813883a 	mov	r9,r3
 4008a18:	21000504 	addi	r4,r4,20
 4008a1c:	1909883a 	add	r4,r3,r4
 4008a20:	49800015 	stw	r6,0(r9)
 4008a24:	41800015 	stw	r6,0(r8)
 4008a28:	59800015 	stw	r6,0(r11)
 4008a2c:	51800015 	stw	r6,0(r10)
 4008a30:	42000404 	addi	r8,r8,16
 4008a34:	4a400404 	addi	r9,r9,16
 4008a38:	5ac00404 	addi	r11,r11,16
 4008a3c:	52800404 	addi	r10,r10,16
 4008a40:	413ff71e 	bne	r8,r4,4008a20 <__alt_data_end+0xfc008a20>
 4008a44:	63000044 	addi	r12,r12,1
 4008a48:	6018913a 	slli	r12,r12,4
 4008a4c:	39c003cc 	andi	r7,r7,15
 4008a50:	010000c4 	movi	r4,3
 4008a54:	1b07883a 	add	r3,r3,r12
 4008a58:	21c00e2e 	bgeu	r4,r7,4008a94 <memset+0x100>
 4008a5c:	1813883a 	mov	r9,r3
 4008a60:	3811883a 	mov	r8,r7
 4008a64:	010000c4 	movi	r4,3
 4008a68:	49800015 	stw	r6,0(r9)
 4008a6c:	423fff04 	addi	r8,r8,-4
 4008a70:	4a400104 	addi	r9,r9,4
 4008a74:	223ffc36 	bltu	r4,r8,4008a68 <__alt_data_end+0xfc008a68>
 4008a78:	393fff04 	addi	r4,r7,-4
 4008a7c:	2008d0ba 	srli	r4,r4,2
 4008a80:	39c000cc 	andi	r7,r7,3
 4008a84:	21000044 	addi	r4,r4,1
 4008a88:	2109883a 	add	r4,r4,r4
 4008a8c:	2109883a 	add	r4,r4,r4
 4008a90:	1907883a 	add	r3,r3,r4
 4008a94:	38000526 	beq	r7,zero,4008aac <memset+0x118>
 4008a98:	19cf883a 	add	r7,r3,r7
 4008a9c:	19400005 	stb	r5,0(r3)
 4008aa0:	18c00044 	addi	r3,r3,1
 4008aa4:	38fffd1e 	bne	r7,r3,4008a9c <__alt_data_end+0xfc008a9c>
 4008aa8:	f800283a 	ret
 4008aac:	f800283a 	ret
 4008ab0:	2007883a 	mov	r3,r4
 4008ab4:	300f883a 	mov	r7,r6
 4008ab8:	003fc706 	br	40089d8 <__alt_data_end+0xfc0089d8>

04008abc <_Balloc>:
 4008abc:	20801317 	ldw	r2,76(r4)
 4008ac0:	defffc04 	addi	sp,sp,-16
 4008ac4:	dc400115 	stw	r17,4(sp)
 4008ac8:	dc000015 	stw	r16,0(sp)
 4008acc:	dfc00315 	stw	ra,12(sp)
 4008ad0:	dc800215 	stw	r18,8(sp)
 4008ad4:	2023883a 	mov	r17,r4
 4008ad8:	2821883a 	mov	r16,r5
 4008adc:	10000f26 	beq	r2,zero,4008b1c <_Balloc+0x60>
 4008ae0:	8407883a 	add	r3,r16,r16
 4008ae4:	18c7883a 	add	r3,r3,r3
 4008ae8:	10c7883a 	add	r3,r2,r3
 4008aec:	18800017 	ldw	r2,0(r3)
 4008af0:	10001126 	beq	r2,zero,4008b38 <_Balloc+0x7c>
 4008af4:	11000017 	ldw	r4,0(r2)
 4008af8:	19000015 	stw	r4,0(r3)
 4008afc:	10000415 	stw	zero,16(r2)
 4008b00:	10000315 	stw	zero,12(r2)
 4008b04:	dfc00317 	ldw	ra,12(sp)
 4008b08:	dc800217 	ldw	r18,8(sp)
 4008b0c:	dc400117 	ldw	r17,4(sp)
 4008b10:	dc000017 	ldw	r16,0(sp)
 4008b14:	dec00404 	addi	sp,sp,16
 4008b18:	f800283a 	ret
 4008b1c:	01800844 	movi	r6,33
 4008b20:	01400104 	movi	r5,4
 4008b24:	400b9f80 	call	400b9f8 <_calloc_r>
 4008b28:	88801315 	stw	r2,76(r17)
 4008b2c:	103fec1e 	bne	r2,zero,4008ae0 <__alt_data_end+0xfc008ae0>
 4008b30:	0005883a 	mov	r2,zero
 4008b34:	003ff306 	br	4008b04 <__alt_data_end+0xfc008b04>
 4008b38:	01400044 	movi	r5,1
 4008b3c:	2c24983a 	sll	r18,r5,r16
 4008b40:	8809883a 	mov	r4,r17
 4008b44:	91800144 	addi	r6,r18,5
 4008b48:	318d883a 	add	r6,r6,r6
 4008b4c:	318d883a 	add	r6,r6,r6
 4008b50:	400b9f80 	call	400b9f8 <_calloc_r>
 4008b54:	103ff626 	beq	r2,zero,4008b30 <__alt_data_end+0xfc008b30>
 4008b58:	14000115 	stw	r16,4(r2)
 4008b5c:	14800215 	stw	r18,8(r2)
 4008b60:	003fe606 	br	4008afc <__alt_data_end+0xfc008afc>

04008b64 <_Bfree>:
 4008b64:	28000826 	beq	r5,zero,4008b88 <_Bfree+0x24>
 4008b68:	28c00117 	ldw	r3,4(r5)
 4008b6c:	20801317 	ldw	r2,76(r4)
 4008b70:	18c7883a 	add	r3,r3,r3
 4008b74:	18c7883a 	add	r3,r3,r3
 4008b78:	10c5883a 	add	r2,r2,r3
 4008b7c:	10c00017 	ldw	r3,0(r2)
 4008b80:	28c00015 	stw	r3,0(r5)
 4008b84:	11400015 	stw	r5,0(r2)
 4008b88:	f800283a 	ret

04008b8c <__multadd>:
 4008b8c:	defffa04 	addi	sp,sp,-24
 4008b90:	dc800315 	stw	r18,12(sp)
 4008b94:	dc400215 	stw	r17,8(sp)
 4008b98:	dc000115 	stw	r16,4(sp)
 4008b9c:	2823883a 	mov	r17,r5
 4008ba0:	2c000417 	ldw	r16,16(r5)
 4008ba4:	dfc00515 	stw	ra,20(sp)
 4008ba8:	dcc00415 	stw	r19,16(sp)
 4008bac:	2025883a 	mov	r18,r4
 4008bb0:	29400504 	addi	r5,r5,20
 4008bb4:	0011883a 	mov	r8,zero
 4008bb8:	28c00017 	ldw	r3,0(r5)
 4008bbc:	29400104 	addi	r5,r5,4
 4008bc0:	42000044 	addi	r8,r8,1
 4008bc4:	18bfffcc 	andi	r2,r3,65535
 4008bc8:	1185383a 	mul	r2,r2,r6
 4008bcc:	1806d43a 	srli	r3,r3,16
 4008bd0:	11cf883a 	add	r7,r2,r7
 4008bd4:	3808d43a 	srli	r4,r7,16
 4008bd8:	1987383a 	mul	r3,r3,r6
 4008bdc:	38bfffcc 	andi	r2,r7,65535
 4008be0:	1907883a 	add	r3,r3,r4
 4008be4:	1808943a 	slli	r4,r3,16
 4008be8:	180ed43a 	srli	r7,r3,16
 4008bec:	2085883a 	add	r2,r4,r2
 4008bf0:	28bfff15 	stw	r2,-4(r5)
 4008bf4:	443ff016 	blt	r8,r16,4008bb8 <__alt_data_end+0xfc008bb8>
 4008bf8:	38000926 	beq	r7,zero,4008c20 <__multadd+0x94>
 4008bfc:	88800217 	ldw	r2,8(r17)
 4008c00:	80800f0e 	bge	r16,r2,4008c40 <__multadd+0xb4>
 4008c04:	80800144 	addi	r2,r16,5
 4008c08:	1085883a 	add	r2,r2,r2
 4008c0c:	1085883a 	add	r2,r2,r2
 4008c10:	8885883a 	add	r2,r17,r2
 4008c14:	11c00015 	stw	r7,0(r2)
 4008c18:	84000044 	addi	r16,r16,1
 4008c1c:	8c000415 	stw	r16,16(r17)
 4008c20:	8805883a 	mov	r2,r17
 4008c24:	dfc00517 	ldw	ra,20(sp)
 4008c28:	dcc00417 	ldw	r19,16(sp)
 4008c2c:	dc800317 	ldw	r18,12(sp)
 4008c30:	dc400217 	ldw	r17,8(sp)
 4008c34:	dc000117 	ldw	r16,4(sp)
 4008c38:	dec00604 	addi	sp,sp,24
 4008c3c:	f800283a 	ret
 4008c40:	89400117 	ldw	r5,4(r17)
 4008c44:	9009883a 	mov	r4,r18
 4008c48:	d9c00015 	stw	r7,0(sp)
 4008c4c:	29400044 	addi	r5,r5,1
 4008c50:	4008abc0 	call	4008abc <_Balloc>
 4008c54:	89800417 	ldw	r6,16(r17)
 4008c58:	89400304 	addi	r5,r17,12
 4008c5c:	11000304 	addi	r4,r2,12
 4008c60:	31800084 	addi	r6,r6,2
 4008c64:	318d883a 	add	r6,r6,r6
 4008c68:	318d883a 	add	r6,r6,r6
 4008c6c:	1027883a 	mov	r19,r2
 4008c70:	40086f00 	call	40086f0 <memcpy>
 4008c74:	d9c00017 	ldw	r7,0(sp)
 4008c78:	88000a26 	beq	r17,zero,4008ca4 <__multadd+0x118>
 4008c7c:	88c00117 	ldw	r3,4(r17)
 4008c80:	90801317 	ldw	r2,76(r18)
 4008c84:	18c7883a 	add	r3,r3,r3
 4008c88:	18c7883a 	add	r3,r3,r3
 4008c8c:	10c5883a 	add	r2,r2,r3
 4008c90:	10c00017 	ldw	r3,0(r2)
 4008c94:	88c00015 	stw	r3,0(r17)
 4008c98:	14400015 	stw	r17,0(r2)
 4008c9c:	9823883a 	mov	r17,r19
 4008ca0:	003fd806 	br	4008c04 <__alt_data_end+0xfc008c04>
 4008ca4:	9823883a 	mov	r17,r19
 4008ca8:	003fd606 	br	4008c04 <__alt_data_end+0xfc008c04>

04008cac <__s2b>:
 4008cac:	defff904 	addi	sp,sp,-28
 4008cb0:	dc400115 	stw	r17,4(sp)
 4008cb4:	dc000015 	stw	r16,0(sp)
 4008cb8:	2023883a 	mov	r17,r4
 4008cbc:	2821883a 	mov	r16,r5
 4008cc0:	39000204 	addi	r4,r7,8
 4008cc4:	01400244 	movi	r5,9
 4008cc8:	dcc00315 	stw	r19,12(sp)
 4008ccc:	dc800215 	stw	r18,8(sp)
 4008cd0:	dfc00615 	stw	ra,24(sp)
 4008cd4:	dd400515 	stw	r21,20(sp)
 4008cd8:	dd000415 	stw	r20,16(sp)
 4008cdc:	3825883a 	mov	r18,r7
 4008ce0:	3027883a 	mov	r19,r6
 4008ce4:	4002a700 	call	4002a70 <__divsi3>
 4008ce8:	00c00044 	movi	r3,1
 4008cec:	000b883a 	mov	r5,zero
 4008cf0:	1880030e 	bge	r3,r2,4008d00 <__s2b+0x54>
 4008cf4:	18c7883a 	add	r3,r3,r3
 4008cf8:	29400044 	addi	r5,r5,1
 4008cfc:	18bffd16 	blt	r3,r2,4008cf4 <__alt_data_end+0xfc008cf4>
 4008d00:	8809883a 	mov	r4,r17
 4008d04:	4008abc0 	call	4008abc <_Balloc>
 4008d08:	d8c00717 	ldw	r3,28(sp)
 4008d0c:	10c00515 	stw	r3,20(r2)
 4008d10:	00c00044 	movi	r3,1
 4008d14:	10c00415 	stw	r3,16(r2)
 4008d18:	00c00244 	movi	r3,9
 4008d1c:	1cc0210e 	bge	r3,r19,4008da4 <__s2b+0xf8>
 4008d20:	80eb883a 	add	r21,r16,r3
 4008d24:	a829883a 	mov	r20,r21
 4008d28:	84e1883a 	add	r16,r16,r19
 4008d2c:	a1c00007 	ldb	r7,0(r20)
 4008d30:	01800284 	movi	r6,10
 4008d34:	a5000044 	addi	r20,r20,1
 4008d38:	100b883a 	mov	r5,r2
 4008d3c:	39fff404 	addi	r7,r7,-48
 4008d40:	8809883a 	mov	r4,r17
 4008d44:	4008b8c0 	call	4008b8c <__multadd>
 4008d48:	a43ff81e 	bne	r20,r16,4008d2c <__alt_data_end+0xfc008d2c>
 4008d4c:	ace1883a 	add	r16,r21,r19
 4008d50:	843ffe04 	addi	r16,r16,-8
 4008d54:	9c800a0e 	bge	r19,r18,4008d80 <__s2b+0xd4>
 4008d58:	94e5c83a 	sub	r18,r18,r19
 4008d5c:	84a5883a 	add	r18,r16,r18
 4008d60:	81c00007 	ldb	r7,0(r16)
 4008d64:	01800284 	movi	r6,10
 4008d68:	84000044 	addi	r16,r16,1
 4008d6c:	100b883a 	mov	r5,r2
 4008d70:	39fff404 	addi	r7,r7,-48
 4008d74:	8809883a 	mov	r4,r17
 4008d78:	4008b8c0 	call	4008b8c <__multadd>
 4008d7c:	84bff81e 	bne	r16,r18,4008d60 <__alt_data_end+0xfc008d60>
 4008d80:	dfc00617 	ldw	ra,24(sp)
 4008d84:	dd400517 	ldw	r21,20(sp)
 4008d88:	dd000417 	ldw	r20,16(sp)
 4008d8c:	dcc00317 	ldw	r19,12(sp)
 4008d90:	dc800217 	ldw	r18,8(sp)
 4008d94:	dc400117 	ldw	r17,4(sp)
 4008d98:	dc000017 	ldw	r16,0(sp)
 4008d9c:	dec00704 	addi	sp,sp,28
 4008da0:	f800283a 	ret
 4008da4:	84000284 	addi	r16,r16,10
 4008da8:	1827883a 	mov	r19,r3
 4008dac:	003fe906 	br	4008d54 <__alt_data_end+0xfc008d54>

04008db0 <__hi0bits>:
 4008db0:	20bfffec 	andhi	r2,r4,65535
 4008db4:	1000141e 	bne	r2,zero,4008e08 <__hi0bits+0x58>
 4008db8:	2008943a 	slli	r4,r4,16
 4008dbc:	00800404 	movi	r2,16
 4008dc0:	20ffc02c 	andhi	r3,r4,65280
 4008dc4:	1800021e 	bne	r3,zero,4008dd0 <__hi0bits+0x20>
 4008dc8:	2008923a 	slli	r4,r4,8
 4008dcc:	10800204 	addi	r2,r2,8
 4008dd0:	20fc002c 	andhi	r3,r4,61440
 4008dd4:	1800021e 	bne	r3,zero,4008de0 <__hi0bits+0x30>
 4008dd8:	2008913a 	slli	r4,r4,4
 4008ddc:	10800104 	addi	r2,r2,4
 4008de0:	20f0002c 	andhi	r3,r4,49152
 4008de4:	1800031e 	bne	r3,zero,4008df4 <__hi0bits+0x44>
 4008de8:	2109883a 	add	r4,r4,r4
 4008dec:	10800084 	addi	r2,r2,2
 4008df0:	2109883a 	add	r4,r4,r4
 4008df4:	20000316 	blt	r4,zero,4008e04 <__hi0bits+0x54>
 4008df8:	2110002c 	andhi	r4,r4,16384
 4008dfc:	2000041e 	bne	r4,zero,4008e10 <__hi0bits+0x60>
 4008e00:	00800804 	movi	r2,32
 4008e04:	f800283a 	ret
 4008e08:	0005883a 	mov	r2,zero
 4008e0c:	003fec06 	br	4008dc0 <__alt_data_end+0xfc008dc0>
 4008e10:	10800044 	addi	r2,r2,1
 4008e14:	f800283a 	ret

04008e18 <__lo0bits>:
 4008e18:	20c00017 	ldw	r3,0(r4)
 4008e1c:	188001cc 	andi	r2,r3,7
 4008e20:	10000826 	beq	r2,zero,4008e44 <__lo0bits+0x2c>
 4008e24:	1880004c 	andi	r2,r3,1
 4008e28:	1000211e 	bne	r2,zero,4008eb0 <__lo0bits+0x98>
 4008e2c:	1880008c 	andi	r2,r3,2
 4008e30:	1000211e 	bne	r2,zero,4008eb8 <__lo0bits+0xa0>
 4008e34:	1806d0ba 	srli	r3,r3,2
 4008e38:	00800084 	movi	r2,2
 4008e3c:	20c00015 	stw	r3,0(r4)
 4008e40:	f800283a 	ret
 4008e44:	18bfffcc 	andi	r2,r3,65535
 4008e48:	10001326 	beq	r2,zero,4008e98 <__lo0bits+0x80>
 4008e4c:	0005883a 	mov	r2,zero
 4008e50:	19403fcc 	andi	r5,r3,255
 4008e54:	2800021e 	bne	r5,zero,4008e60 <__lo0bits+0x48>
 4008e58:	1806d23a 	srli	r3,r3,8
 4008e5c:	10800204 	addi	r2,r2,8
 4008e60:	194003cc 	andi	r5,r3,15
 4008e64:	2800021e 	bne	r5,zero,4008e70 <__lo0bits+0x58>
 4008e68:	1806d13a 	srli	r3,r3,4
 4008e6c:	10800104 	addi	r2,r2,4
 4008e70:	194000cc 	andi	r5,r3,3
 4008e74:	2800021e 	bne	r5,zero,4008e80 <__lo0bits+0x68>
 4008e78:	1806d0ba 	srli	r3,r3,2
 4008e7c:	10800084 	addi	r2,r2,2
 4008e80:	1940004c 	andi	r5,r3,1
 4008e84:	2800081e 	bne	r5,zero,4008ea8 <__lo0bits+0x90>
 4008e88:	1806d07a 	srli	r3,r3,1
 4008e8c:	1800051e 	bne	r3,zero,4008ea4 <__lo0bits+0x8c>
 4008e90:	00800804 	movi	r2,32
 4008e94:	f800283a 	ret
 4008e98:	1806d43a 	srli	r3,r3,16
 4008e9c:	00800404 	movi	r2,16
 4008ea0:	003feb06 	br	4008e50 <__alt_data_end+0xfc008e50>
 4008ea4:	10800044 	addi	r2,r2,1
 4008ea8:	20c00015 	stw	r3,0(r4)
 4008eac:	f800283a 	ret
 4008eb0:	0005883a 	mov	r2,zero
 4008eb4:	f800283a 	ret
 4008eb8:	1806d07a 	srli	r3,r3,1
 4008ebc:	00800044 	movi	r2,1
 4008ec0:	20c00015 	stw	r3,0(r4)
 4008ec4:	f800283a 	ret

04008ec8 <__i2b>:
 4008ec8:	defffd04 	addi	sp,sp,-12
 4008ecc:	dc000015 	stw	r16,0(sp)
 4008ed0:	04000044 	movi	r16,1
 4008ed4:	dc400115 	stw	r17,4(sp)
 4008ed8:	2823883a 	mov	r17,r5
 4008edc:	800b883a 	mov	r5,r16
 4008ee0:	dfc00215 	stw	ra,8(sp)
 4008ee4:	4008abc0 	call	4008abc <_Balloc>
 4008ee8:	14400515 	stw	r17,20(r2)
 4008eec:	14000415 	stw	r16,16(r2)
 4008ef0:	dfc00217 	ldw	ra,8(sp)
 4008ef4:	dc400117 	ldw	r17,4(sp)
 4008ef8:	dc000017 	ldw	r16,0(sp)
 4008efc:	dec00304 	addi	sp,sp,12
 4008f00:	f800283a 	ret

04008f04 <__multiply>:
 4008f04:	defffa04 	addi	sp,sp,-24
 4008f08:	dcc00315 	stw	r19,12(sp)
 4008f0c:	dc800215 	stw	r18,8(sp)
 4008f10:	34c00417 	ldw	r19,16(r6)
 4008f14:	2c800417 	ldw	r18,16(r5)
 4008f18:	dd000415 	stw	r20,16(sp)
 4008f1c:	dc400115 	stw	r17,4(sp)
 4008f20:	dfc00515 	stw	ra,20(sp)
 4008f24:	dc000015 	stw	r16,0(sp)
 4008f28:	2829883a 	mov	r20,r5
 4008f2c:	3023883a 	mov	r17,r6
 4008f30:	94c0050e 	bge	r18,r19,4008f48 <__multiply+0x44>
 4008f34:	9007883a 	mov	r3,r18
 4008f38:	3029883a 	mov	r20,r6
 4008f3c:	9825883a 	mov	r18,r19
 4008f40:	2823883a 	mov	r17,r5
 4008f44:	1827883a 	mov	r19,r3
 4008f48:	a0800217 	ldw	r2,8(r20)
 4008f4c:	94e1883a 	add	r16,r18,r19
 4008f50:	a1400117 	ldw	r5,4(r20)
 4008f54:	1400010e 	bge	r2,r16,4008f5c <__multiply+0x58>
 4008f58:	29400044 	addi	r5,r5,1
 4008f5c:	4008abc0 	call	4008abc <_Balloc>
 4008f60:	8415883a 	add	r10,r16,r16
 4008f64:	12c00504 	addi	r11,r2,20
 4008f68:	5295883a 	add	r10,r10,r10
 4008f6c:	5a95883a 	add	r10,r11,r10
 4008f70:	5807883a 	mov	r3,r11
 4008f74:	5a80032e 	bgeu	r11,r10,4008f84 <__multiply+0x80>
 4008f78:	18000015 	stw	zero,0(r3)
 4008f7c:	18c00104 	addi	r3,r3,4
 4008f80:	1abffd36 	bltu	r3,r10,4008f78 <__alt_data_end+0xfc008f78>
 4008f84:	9ce7883a 	add	r19,r19,r19
 4008f88:	94a5883a 	add	r18,r18,r18
 4008f8c:	89800504 	addi	r6,r17,20
 4008f90:	9ce7883a 	add	r19,r19,r19
 4008f94:	a3400504 	addi	r13,r20,20
 4008f98:	94a5883a 	add	r18,r18,r18
 4008f9c:	34d9883a 	add	r12,r6,r19
 4008fa0:	6c93883a 	add	r9,r13,r18
 4008fa4:	3300422e 	bgeu	r6,r12,40090b0 <__multiply+0x1ac>
 4008fa8:	37c00017 	ldw	ra,0(r6)
 4008fac:	fbffffcc 	andi	r15,ra,65535
 4008fb0:	78001b26 	beq	r15,zero,4009020 <__multiply+0x11c>
 4008fb4:	5811883a 	mov	r8,r11
 4008fb8:	681d883a 	mov	r14,r13
 4008fbc:	000f883a 	mov	r7,zero
 4008fc0:	71000017 	ldw	r4,0(r14)
 4008fc4:	40c00017 	ldw	r3,0(r8)
 4008fc8:	73800104 	addi	r14,r14,4
 4008fcc:	217fffcc 	andi	r5,r4,65535
 4008fd0:	2bcb383a 	mul	r5,r5,r15
 4008fd4:	2008d43a 	srli	r4,r4,16
 4008fd8:	1c7fffcc 	andi	r17,r3,65535
 4008fdc:	2c4b883a 	add	r5,r5,r17
 4008fe0:	29cb883a 	add	r5,r5,r7
 4008fe4:	23c9383a 	mul	r4,r4,r15
 4008fe8:	1806d43a 	srli	r3,r3,16
 4008fec:	280ed43a 	srli	r7,r5,16
 4008ff0:	297fffcc 	andi	r5,r5,65535
 4008ff4:	20c7883a 	add	r3,r4,r3
 4008ff8:	19c7883a 	add	r3,r3,r7
 4008ffc:	1808943a 	slli	r4,r3,16
 4009000:	4023883a 	mov	r17,r8
 4009004:	180ed43a 	srli	r7,r3,16
 4009008:	214ab03a 	or	r5,r4,r5
 400900c:	41400015 	stw	r5,0(r8)
 4009010:	42000104 	addi	r8,r8,4
 4009014:	727fea36 	bltu	r14,r9,4008fc0 <__alt_data_end+0xfc008fc0>
 4009018:	89c00115 	stw	r7,4(r17)
 400901c:	37c00017 	ldw	ra,0(r6)
 4009020:	f83ed43a 	srli	ra,ra,16
 4009024:	f8001f26 	beq	ra,zero,40090a4 <__multiply+0x1a0>
 4009028:	58c00017 	ldw	r3,0(r11)
 400902c:	681d883a 	mov	r14,r13
 4009030:	581f883a 	mov	r15,r11
 4009034:	1811883a 	mov	r8,r3
 4009038:	5825883a 	mov	r18,r11
 400903c:	000f883a 	mov	r7,zero
 4009040:	00000106 	br	4009048 <__multiply+0x144>
 4009044:	8825883a 	mov	r18,r17
 4009048:	7140000b 	ldhu	r5,0(r14)
 400904c:	4010d43a 	srli	r8,r8,16
 4009050:	193fffcc 	andi	r4,r3,65535
 4009054:	2fcb383a 	mul	r5,r5,ra
 4009058:	7bc00104 	addi	r15,r15,4
 400905c:	73800104 	addi	r14,r14,4
 4009060:	2a0b883a 	add	r5,r5,r8
 4009064:	29cb883a 	add	r5,r5,r7
 4009068:	2806943a 	slli	r3,r5,16
 400906c:	94400104 	addi	r17,r18,4
 4009070:	280ad43a 	srli	r5,r5,16
 4009074:	1908b03a 	or	r4,r3,r4
 4009078:	793fff15 	stw	r4,-4(r15)
 400907c:	70ffff17 	ldw	r3,-4(r14)
 4009080:	8a000017 	ldw	r8,0(r17)
 4009084:	1806d43a 	srli	r3,r3,16
 4009088:	413fffcc 	andi	r4,r8,65535
 400908c:	1fc7383a 	mul	r3,r3,ra
 4009090:	1907883a 	add	r3,r3,r4
 4009094:	1947883a 	add	r3,r3,r5
 4009098:	180ed43a 	srli	r7,r3,16
 400909c:	727fe936 	bltu	r14,r9,4009044 <__alt_data_end+0xfc009044>
 40090a0:	90c00115 	stw	r3,4(r18)
 40090a4:	31800104 	addi	r6,r6,4
 40090a8:	5ac00104 	addi	r11,r11,4
 40090ac:	333fbe36 	bltu	r6,r12,4008fa8 <__alt_data_end+0xfc008fa8>
 40090b0:	0400090e 	bge	zero,r16,40090d8 <__multiply+0x1d4>
 40090b4:	50ffff17 	ldw	r3,-4(r10)
 40090b8:	52bfff04 	addi	r10,r10,-4
 40090bc:	18000326 	beq	r3,zero,40090cc <__multiply+0x1c8>
 40090c0:	00000506 	br	40090d8 <__multiply+0x1d4>
 40090c4:	50c00017 	ldw	r3,0(r10)
 40090c8:	1800031e 	bne	r3,zero,40090d8 <__multiply+0x1d4>
 40090cc:	843fffc4 	addi	r16,r16,-1
 40090d0:	52bfff04 	addi	r10,r10,-4
 40090d4:	803ffb1e 	bne	r16,zero,40090c4 <__alt_data_end+0xfc0090c4>
 40090d8:	14000415 	stw	r16,16(r2)
 40090dc:	dfc00517 	ldw	ra,20(sp)
 40090e0:	dd000417 	ldw	r20,16(sp)
 40090e4:	dcc00317 	ldw	r19,12(sp)
 40090e8:	dc800217 	ldw	r18,8(sp)
 40090ec:	dc400117 	ldw	r17,4(sp)
 40090f0:	dc000017 	ldw	r16,0(sp)
 40090f4:	dec00604 	addi	sp,sp,24
 40090f8:	f800283a 	ret

040090fc <__pow5mult>:
 40090fc:	defffa04 	addi	sp,sp,-24
 4009100:	dcc00315 	stw	r19,12(sp)
 4009104:	dc000015 	stw	r16,0(sp)
 4009108:	dfc00515 	stw	ra,20(sp)
 400910c:	dd000415 	stw	r20,16(sp)
 4009110:	dc800215 	stw	r18,8(sp)
 4009114:	dc400115 	stw	r17,4(sp)
 4009118:	308000cc 	andi	r2,r6,3
 400911c:	3021883a 	mov	r16,r6
 4009120:	2027883a 	mov	r19,r4
 4009124:	10002f1e 	bne	r2,zero,40091e4 <__pow5mult+0xe8>
 4009128:	2825883a 	mov	r18,r5
 400912c:	8021d0ba 	srai	r16,r16,2
 4009130:	80001a26 	beq	r16,zero,400919c <__pow5mult+0xa0>
 4009134:	9c401217 	ldw	r17,72(r19)
 4009138:	8800061e 	bne	r17,zero,4009154 <__pow5mult+0x58>
 400913c:	00003406 	br	4009210 <__pow5mult+0x114>
 4009140:	8021d07a 	srai	r16,r16,1
 4009144:	80001526 	beq	r16,zero,400919c <__pow5mult+0xa0>
 4009148:	88800017 	ldw	r2,0(r17)
 400914c:	10001c26 	beq	r2,zero,40091c0 <__pow5mult+0xc4>
 4009150:	1023883a 	mov	r17,r2
 4009154:	8080004c 	andi	r2,r16,1
 4009158:	103ff926 	beq	r2,zero,4009140 <__alt_data_end+0xfc009140>
 400915c:	880d883a 	mov	r6,r17
 4009160:	900b883a 	mov	r5,r18
 4009164:	9809883a 	mov	r4,r19
 4009168:	4008f040 	call	4008f04 <__multiply>
 400916c:	90001b26 	beq	r18,zero,40091dc <__pow5mult+0xe0>
 4009170:	91000117 	ldw	r4,4(r18)
 4009174:	98c01317 	ldw	r3,76(r19)
 4009178:	8021d07a 	srai	r16,r16,1
 400917c:	2109883a 	add	r4,r4,r4
 4009180:	2109883a 	add	r4,r4,r4
 4009184:	1907883a 	add	r3,r3,r4
 4009188:	19000017 	ldw	r4,0(r3)
 400918c:	91000015 	stw	r4,0(r18)
 4009190:	1c800015 	stw	r18,0(r3)
 4009194:	1025883a 	mov	r18,r2
 4009198:	803feb1e 	bne	r16,zero,4009148 <__alt_data_end+0xfc009148>
 400919c:	9005883a 	mov	r2,r18
 40091a0:	dfc00517 	ldw	ra,20(sp)
 40091a4:	dd000417 	ldw	r20,16(sp)
 40091a8:	dcc00317 	ldw	r19,12(sp)
 40091ac:	dc800217 	ldw	r18,8(sp)
 40091b0:	dc400117 	ldw	r17,4(sp)
 40091b4:	dc000017 	ldw	r16,0(sp)
 40091b8:	dec00604 	addi	sp,sp,24
 40091bc:	f800283a 	ret
 40091c0:	880d883a 	mov	r6,r17
 40091c4:	880b883a 	mov	r5,r17
 40091c8:	9809883a 	mov	r4,r19
 40091cc:	4008f040 	call	4008f04 <__multiply>
 40091d0:	88800015 	stw	r2,0(r17)
 40091d4:	10000015 	stw	zero,0(r2)
 40091d8:	003fdd06 	br	4009150 <__alt_data_end+0xfc009150>
 40091dc:	1025883a 	mov	r18,r2
 40091e0:	003fd706 	br	4009140 <__alt_data_end+0xfc009140>
 40091e4:	10bfffc4 	addi	r2,r2,-1
 40091e8:	1085883a 	add	r2,r2,r2
 40091ec:	00c100f4 	movhi	r3,1027
 40091f0:	18cb7f04 	addi	r3,r3,11772
 40091f4:	1085883a 	add	r2,r2,r2
 40091f8:	1885883a 	add	r2,r3,r2
 40091fc:	11800017 	ldw	r6,0(r2)
 4009200:	000f883a 	mov	r7,zero
 4009204:	4008b8c0 	call	4008b8c <__multadd>
 4009208:	1025883a 	mov	r18,r2
 400920c:	003fc706 	br	400912c <__alt_data_end+0xfc00912c>
 4009210:	05000044 	movi	r20,1
 4009214:	a00b883a 	mov	r5,r20
 4009218:	9809883a 	mov	r4,r19
 400921c:	4008abc0 	call	4008abc <_Balloc>
 4009220:	1023883a 	mov	r17,r2
 4009224:	00809c44 	movi	r2,625
 4009228:	88800515 	stw	r2,20(r17)
 400922c:	8d000415 	stw	r20,16(r17)
 4009230:	9c401215 	stw	r17,72(r19)
 4009234:	88000015 	stw	zero,0(r17)
 4009238:	003fc606 	br	4009154 <__alt_data_end+0xfc009154>

0400923c <__lshift>:
 400923c:	defff904 	addi	sp,sp,-28
 4009240:	dd400515 	stw	r21,20(sp)
 4009244:	dcc00315 	stw	r19,12(sp)
 4009248:	302bd17a 	srai	r21,r6,5
 400924c:	2cc00417 	ldw	r19,16(r5)
 4009250:	28800217 	ldw	r2,8(r5)
 4009254:	dd000415 	stw	r20,16(sp)
 4009258:	ace7883a 	add	r19,r21,r19
 400925c:	dc800215 	stw	r18,8(sp)
 4009260:	dc400115 	stw	r17,4(sp)
 4009264:	dc000015 	stw	r16,0(sp)
 4009268:	dfc00615 	stw	ra,24(sp)
 400926c:	9c000044 	addi	r16,r19,1
 4009270:	2823883a 	mov	r17,r5
 4009274:	3029883a 	mov	r20,r6
 4009278:	2025883a 	mov	r18,r4
 400927c:	29400117 	ldw	r5,4(r5)
 4009280:	1400030e 	bge	r2,r16,4009290 <__lshift+0x54>
 4009284:	1085883a 	add	r2,r2,r2
 4009288:	29400044 	addi	r5,r5,1
 400928c:	143ffd16 	blt	r2,r16,4009284 <__alt_data_end+0xfc009284>
 4009290:	9009883a 	mov	r4,r18
 4009294:	4008abc0 	call	4008abc <_Balloc>
 4009298:	10c00504 	addi	r3,r2,20
 400929c:	0540070e 	bge	zero,r21,40092bc <__lshift+0x80>
 40092a0:	ad6b883a 	add	r21,r21,r21
 40092a4:	ad6b883a 	add	r21,r21,r21
 40092a8:	1809883a 	mov	r4,r3
 40092ac:	1d47883a 	add	r3,r3,r21
 40092b0:	20000015 	stw	zero,0(r4)
 40092b4:	21000104 	addi	r4,r4,4
 40092b8:	193ffd1e 	bne	r3,r4,40092b0 <__alt_data_end+0xfc0092b0>
 40092bc:	8a000417 	ldw	r8,16(r17)
 40092c0:	89000504 	addi	r4,r17,20
 40092c4:	a18007cc 	andi	r6,r20,31
 40092c8:	4211883a 	add	r8,r8,r8
 40092cc:	4211883a 	add	r8,r8,r8
 40092d0:	2211883a 	add	r8,r4,r8
 40092d4:	30002326 	beq	r6,zero,4009364 <__lshift+0x128>
 40092d8:	02400804 	movi	r9,32
 40092dc:	4993c83a 	sub	r9,r9,r6
 40092e0:	000b883a 	mov	r5,zero
 40092e4:	21c00017 	ldw	r7,0(r4)
 40092e8:	1815883a 	mov	r10,r3
 40092ec:	18c00104 	addi	r3,r3,4
 40092f0:	398e983a 	sll	r7,r7,r6
 40092f4:	21000104 	addi	r4,r4,4
 40092f8:	394ab03a 	or	r5,r7,r5
 40092fc:	197fff15 	stw	r5,-4(r3)
 4009300:	217fff17 	ldw	r5,-4(r4)
 4009304:	2a4ad83a 	srl	r5,r5,r9
 4009308:	223ff636 	bltu	r4,r8,40092e4 <__alt_data_end+0xfc0092e4>
 400930c:	51400115 	stw	r5,4(r10)
 4009310:	28001a1e 	bne	r5,zero,400937c <__lshift+0x140>
 4009314:	843fffc4 	addi	r16,r16,-1
 4009318:	14000415 	stw	r16,16(r2)
 400931c:	88000826 	beq	r17,zero,4009340 <__lshift+0x104>
 4009320:	89000117 	ldw	r4,4(r17)
 4009324:	90c01317 	ldw	r3,76(r18)
 4009328:	2109883a 	add	r4,r4,r4
 400932c:	2109883a 	add	r4,r4,r4
 4009330:	1907883a 	add	r3,r3,r4
 4009334:	19000017 	ldw	r4,0(r3)
 4009338:	89000015 	stw	r4,0(r17)
 400933c:	1c400015 	stw	r17,0(r3)
 4009340:	dfc00617 	ldw	ra,24(sp)
 4009344:	dd400517 	ldw	r21,20(sp)
 4009348:	dd000417 	ldw	r20,16(sp)
 400934c:	dcc00317 	ldw	r19,12(sp)
 4009350:	dc800217 	ldw	r18,8(sp)
 4009354:	dc400117 	ldw	r17,4(sp)
 4009358:	dc000017 	ldw	r16,0(sp)
 400935c:	dec00704 	addi	sp,sp,28
 4009360:	f800283a 	ret
 4009364:	21400017 	ldw	r5,0(r4)
 4009368:	18c00104 	addi	r3,r3,4
 400936c:	21000104 	addi	r4,r4,4
 4009370:	197fff15 	stw	r5,-4(r3)
 4009374:	223ffb36 	bltu	r4,r8,4009364 <__alt_data_end+0xfc009364>
 4009378:	003fe606 	br	4009314 <__alt_data_end+0xfc009314>
 400937c:	9c000084 	addi	r16,r19,2
 4009380:	003fe406 	br	4009314 <__alt_data_end+0xfc009314>

04009384 <__mcmp>:
 4009384:	20800417 	ldw	r2,16(r4)
 4009388:	28c00417 	ldw	r3,16(r5)
 400938c:	10c5c83a 	sub	r2,r2,r3
 4009390:	1000111e 	bne	r2,zero,40093d8 <__mcmp+0x54>
 4009394:	18c7883a 	add	r3,r3,r3
 4009398:	18c7883a 	add	r3,r3,r3
 400939c:	21000504 	addi	r4,r4,20
 40093a0:	29400504 	addi	r5,r5,20
 40093a4:	20c5883a 	add	r2,r4,r3
 40093a8:	28cb883a 	add	r5,r5,r3
 40093ac:	00000106 	br	40093b4 <__mcmp+0x30>
 40093b0:	20800a2e 	bgeu	r4,r2,40093dc <__mcmp+0x58>
 40093b4:	10bfff04 	addi	r2,r2,-4
 40093b8:	297fff04 	addi	r5,r5,-4
 40093bc:	11800017 	ldw	r6,0(r2)
 40093c0:	28c00017 	ldw	r3,0(r5)
 40093c4:	30fffa26 	beq	r6,r3,40093b0 <__alt_data_end+0xfc0093b0>
 40093c8:	30c00236 	bltu	r6,r3,40093d4 <__mcmp+0x50>
 40093cc:	00800044 	movi	r2,1
 40093d0:	f800283a 	ret
 40093d4:	00bfffc4 	movi	r2,-1
 40093d8:	f800283a 	ret
 40093dc:	0005883a 	mov	r2,zero
 40093e0:	f800283a 	ret

040093e4 <__mdiff>:
 40093e4:	28c00417 	ldw	r3,16(r5)
 40093e8:	30800417 	ldw	r2,16(r6)
 40093ec:	defffa04 	addi	sp,sp,-24
 40093f0:	dcc00315 	stw	r19,12(sp)
 40093f4:	dc800215 	stw	r18,8(sp)
 40093f8:	dfc00515 	stw	ra,20(sp)
 40093fc:	dd000415 	stw	r20,16(sp)
 4009400:	dc400115 	stw	r17,4(sp)
 4009404:	dc000015 	stw	r16,0(sp)
 4009408:	1887c83a 	sub	r3,r3,r2
 400940c:	2825883a 	mov	r18,r5
 4009410:	3027883a 	mov	r19,r6
 4009414:	1800141e 	bne	r3,zero,4009468 <__mdiff+0x84>
 4009418:	1085883a 	add	r2,r2,r2
 400941c:	1085883a 	add	r2,r2,r2
 4009420:	2a000504 	addi	r8,r5,20
 4009424:	34000504 	addi	r16,r6,20
 4009428:	4087883a 	add	r3,r8,r2
 400942c:	8085883a 	add	r2,r16,r2
 4009430:	00000106 	br	4009438 <__mdiff+0x54>
 4009434:	40c0592e 	bgeu	r8,r3,400959c <__mdiff+0x1b8>
 4009438:	18ffff04 	addi	r3,r3,-4
 400943c:	10bfff04 	addi	r2,r2,-4
 4009440:	19c00017 	ldw	r7,0(r3)
 4009444:	11400017 	ldw	r5,0(r2)
 4009448:	397ffa26 	beq	r7,r5,4009434 <__alt_data_end+0xfc009434>
 400944c:	3940592e 	bgeu	r7,r5,40095b4 <__mdiff+0x1d0>
 4009450:	9005883a 	mov	r2,r18
 4009454:	4023883a 	mov	r17,r8
 4009458:	9825883a 	mov	r18,r19
 400945c:	05000044 	movi	r20,1
 4009460:	1027883a 	mov	r19,r2
 4009464:	00000406 	br	4009478 <__mdiff+0x94>
 4009468:	18005616 	blt	r3,zero,40095c4 <__mdiff+0x1e0>
 400946c:	34400504 	addi	r17,r6,20
 4009470:	2c000504 	addi	r16,r5,20
 4009474:	0029883a 	mov	r20,zero
 4009478:	91400117 	ldw	r5,4(r18)
 400947c:	4008abc0 	call	4008abc <_Balloc>
 4009480:	92400417 	ldw	r9,16(r18)
 4009484:	9b000417 	ldw	r12,16(r19)
 4009488:	12c00504 	addi	r11,r2,20
 400948c:	4a51883a 	add	r8,r9,r9
 4009490:	6319883a 	add	r12,r12,r12
 4009494:	4211883a 	add	r8,r8,r8
 4009498:	6319883a 	add	r12,r12,r12
 400949c:	15000315 	stw	r20,12(r2)
 40094a0:	8211883a 	add	r8,r16,r8
 40094a4:	8b19883a 	add	r12,r17,r12
 40094a8:	0007883a 	mov	r3,zero
 40094ac:	81400017 	ldw	r5,0(r16)
 40094b0:	89c00017 	ldw	r7,0(r17)
 40094b4:	59800104 	addi	r6,r11,4
 40094b8:	293fffcc 	andi	r4,r5,65535
 40094bc:	20c7883a 	add	r3,r4,r3
 40094c0:	393fffcc 	andi	r4,r7,65535
 40094c4:	1909c83a 	sub	r4,r3,r4
 40094c8:	280ad43a 	srli	r5,r5,16
 40094cc:	380ed43a 	srli	r7,r7,16
 40094d0:	2007d43a 	srai	r3,r4,16
 40094d4:	213fffcc 	andi	r4,r4,65535
 40094d8:	29cbc83a 	sub	r5,r5,r7
 40094dc:	28c7883a 	add	r3,r5,r3
 40094e0:	180a943a 	slli	r5,r3,16
 40094e4:	8c400104 	addi	r17,r17,4
 40094e8:	84000104 	addi	r16,r16,4
 40094ec:	2908b03a 	or	r4,r5,r4
 40094f0:	59000015 	stw	r4,0(r11)
 40094f4:	1807d43a 	srai	r3,r3,16
 40094f8:	3015883a 	mov	r10,r6
 40094fc:	3017883a 	mov	r11,r6
 4009500:	8b3fea36 	bltu	r17,r12,40094ac <__alt_data_end+0xfc0094ac>
 4009504:	8200162e 	bgeu	r16,r8,4009560 <__mdiff+0x17c>
 4009508:	8017883a 	mov	r11,r16
 400950c:	59400017 	ldw	r5,0(r11)
 4009510:	31800104 	addi	r6,r6,4
 4009514:	5ac00104 	addi	r11,r11,4
 4009518:	293fffcc 	andi	r4,r5,65535
 400951c:	20c7883a 	add	r3,r4,r3
 4009520:	280ed43a 	srli	r7,r5,16
 4009524:	180bd43a 	srai	r5,r3,16
 4009528:	193fffcc 	andi	r4,r3,65535
 400952c:	3947883a 	add	r3,r7,r5
 4009530:	180a943a 	slli	r5,r3,16
 4009534:	1807d43a 	srai	r3,r3,16
 4009538:	2908b03a 	or	r4,r5,r4
 400953c:	313fff15 	stw	r4,-4(r6)
 4009540:	5a3ff236 	bltu	r11,r8,400950c <__alt_data_end+0xfc00950c>
 4009544:	0406303a 	nor	r3,zero,r16
 4009548:	1a07883a 	add	r3,r3,r8
 400954c:	1806d0ba 	srli	r3,r3,2
 4009550:	18c00044 	addi	r3,r3,1
 4009554:	18c7883a 	add	r3,r3,r3
 4009558:	18c7883a 	add	r3,r3,r3
 400955c:	50d5883a 	add	r10,r10,r3
 4009560:	50ffff04 	addi	r3,r10,-4
 4009564:	2000041e 	bne	r4,zero,4009578 <__mdiff+0x194>
 4009568:	18ffff04 	addi	r3,r3,-4
 400956c:	19000017 	ldw	r4,0(r3)
 4009570:	4a7fffc4 	addi	r9,r9,-1
 4009574:	203ffc26 	beq	r4,zero,4009568 <__alt_data_end+0xfc009568>
 4009578:	12400415 	stw	r9,16(r2)
 400957c:	dfc00517 	ldw	ra,20(sp)
 4009580:	dd000417 	ldw	r20,16(sp)
 4009584:	dcc00317 	ldw	r19,12(sp)
 4009588:	dc800217 	ldw	r18,8(sp)
 400958c:	dc400117 	ldw	r17,4(sp)
 4009590:	dc000017 	ldw	r16,0(sp)
 4009594:	dec00604 	addi	sp,sp,24
 4009598:	f800283a 	ret
 400959c:	000b883a 	mov	r5,zero
 40095a0:	4008abc0 	call	4008abc <_Balloc>
 40095a4:	00c00044 	movi	r3,1
 40095a8:	10c00415 	stw	r3,16(r2)
 40095ac:	10000515 	stw	zero,20(r2)
 40095b0:	003ff206 	br	400957c <__alt_data_end+0xfc00957c>
 40095b4:	8023883a 	mov	r17,r16
 40095b8:	0029883a 	mov	r20,zero
 40095bc:	4021883a 	mov	r16,r8
 40095c0:	003fad06 	br	4009478 <__alt_data_end+0xfc009478>
 40095c4:	9005883a 	mov	r2,r18
 40095c8:	94400504 	addi	r17,r18,20
 40095cc:	9c000504 	addi	r16,r19,20
 40095d0:	9825883a 	mov	r18,r19
 40095d4:	05000044 	movi	r20,1
 40095d8:	1027883a 	mov	r19,r2
 40095dc:	003fa606 	br	4009478 <__alt_data_end+0xfc009478>

040095e0 <__ulp>:
 40095e0:	295ffc2c 	andhi	r5,r5,32752
 40095e4:	00bf3034 	movhi	r2,64704
 40095e8:	2887883a 	add	r3,r5,r2
 40095ec:	00c0020e 	bge	zero,r3,40095f8 <__ulp+0x18>
 40095f0:	0005883a 	mov	r2,zero
 40095f4:	f800283a 	ret
 40095f8:	00c7c83a 	sub	r3,zero,r3
 40095fc:	1807d53a 	srai	r3,r3,20
 4009600:	008004c4 	movi	r2,19
 4009604:	10c00b0e 	bge	r2,r3,4009634 <__ulp+0x54>
 4009608:	18bffb04 	addi	r2,r3,-20
 400960c:	01000784 	movi	r4,30
 4009610:	0007883a 	mov	r3,zero
 4009614:	20800516 	blt	r4,r2,400962c <__ulp+0x4c>
 4009618:	010007c4 	movi	r4,31
 400961c:	2089c83a 	sub	r4,r4,r2
 4009620:	00800044 	movi	r2,1
 4009624:	1104983a 	sll	r2,r2,r4
 4009628:	f800283a 	ret
 400962c:	00800044 	movi	r2,1
 4009630:	f800283a 	ret
 4009634:	01400234 	movhi	r5,8
 4009638:	28c7d83a 	sra	r3,r5,r3
 400963c:	0005883a 	mov	r2,zero
 4009640:	f800283a 	ret

04009644 <__b2d>:
 4009644:	defffa04 	addi	sp,sp,-24
 4009648:	dc000015 	stw	r16,0(sp)
 400964c:	24000417 	ldw	r16,16(r4)
 4009650:	dc400115 	stw	r17,4(sp)
 4009654:	24400504 	addi	r17,r4,20
 4009658:	8421883a 	add	r16,r16,r16
 400965c:	8421883a 	add	r16,r16,r16
 4009660:	8c21883a 	add	r16,r17,r16
 4009664:	dc800215 	stw	r18,8(sp)
 4009668:	84bfff17 	ldw	r18,-4(r16)
 400966c:	dd000415 	stw	r20,16(sp)
 4009670:	dcc00315 	stw	r19,12(sp)
 4009674:	9009883a 	mov	r4,r18
 4009678:	2829883a 	mov	r20,r5
 400967c:	dfc00515 	stw	ra,20(sp)
 4009680:	4008db00 	call	4008db0 <__hi0bits>
 4009684:	00c00804 	movi	r3,32
 4009688:	1889c83a 	sub	r4,r3,r2
 400968c:	a1000015 	stw	r4,0(r20)
 4009690:	01000284 	movi	r4,10
 4009694:	84ffff04 	addi	r19,r16,-4
 4009698:	20801216 	blt	r4,r2,40096e4 <__b2d+0xa0>
 400969c:	018002c4 	movi	r6,11
 40096a0:	308dc83a 	sub	r6,r6,r2
 40096a4:	9186d83a 	srl	r3,r18,r6
 40096a8:	18cffc34 	orhi	r3,r3,16368
 40096ac:	8cc0212e 	bgeu	r17,r19,4009734 <__b2d+0xf0>
 40096b0:	813ffe17 	ldw	r4,-8(r16)
 40096b4:	218cd83a 	srl	r6,r4,r6
 40096b8:	10800544 	addi	r2,r2,21
 40096bc:	9084983a 	sll	r2,r18,r2
 40096c0:	1184b03a 	or	r2,r2,r6
 40096c4:	dfc00517 	ldw	ra,20(sp)
 40096c8:	dd000417 	ldw	r20,16(sp)
 40096cc:	dcc00317 	ldw	r19,12(sp)
 40096d0:	dc800217 	ldw	r18,8(sp)
 40096d4:	dc400117 	ldw	r17,4(sp)
 40096d8:	dc000017 	ldw	r16,0(sp)
 40096dc:	dec00604 	addi	sp,sp,24
 40096e0:	f800283a 	ret
 40096e4:	8cc00f2e 	bgeu	r17,r19,4009724 <__b2d+0xe0>
 40096e8:	117ffd44 	addi	r5,r2,-11
 40096ec:	80bffe17 	ldw	r2,-8(r16)
 40096f0:	28000e26 	beq	r5,zero,400972c <__b2d+0xe8>
 40096f4:	1949c83a 	sub	r4,r3,r5
 40096f8:	9164983a 	sll	r18,r18,r5
 40096fc:	1106d83a 	srl	r3,r2,r4
 4009700:	81bffe04 	addi	r6,r16,-8
 4009704:	948ffc34 	orhi	r18,r18,16368
 4009708:	90c6b03a 	or	r3,r18,r3
 400970c:	89800e2e 	bgeu	r17,r6,4009748 <__b2d+0x104>
 4009710:	81bffd17 	ldw	r6,-12(r16)
 4009714:	1144983a 	sll	r2,r2,r5
 4009718:	310ad83a 	srl	r5,r6,r4
 400971c:	2884b03a 	or	r2,r5,r2
 4009720:	003fe806 	br	40096c4 <__alt_data_end+0xfc0096c4>
 4009724:	10bffd44 	addi	r2,r2,-11
 4009728:	1000041e 	bne	r2,zero,400973c <__b2d+0xf8>
 400972c:	90cffc34 	orhi	r3,r18,16368
 4009730:	003fe406 	br	40096c4 <__alt_data_end+0xfc0096c4>
 4009734:	000d883a 	mov	r6,zero
 4009738:	003fdf06 	br	40096b8 <__alt_data_end+0xfc0096b8>
 400973c:	90a4983a 	sll	r18,r18,r2
 4009740:	0005883a 	mov	r2,zero
 4009744:	003ff906 	br	400972c <__alt_data_end+0xfc00972c>
 4009748:	1144983a 	sll	r2,r2,r5
 400974c:	003fdd06 	br	40096c4 <__alt_data_end+0xfc0096c4>

04009750 <__d2b>:
 4009750:	defff804 	addi	sp,sp,-32
 4009754:	dc000215 	stw	r16,8(sp)
 4009758:	3021883a 	mov	r16,r6
 400975c:	dc400315 	stw	r17,12(sp)
 4009760:	8022907a 	slli	r17,r16,1
 4009764:	dd000615 	stw	r20,24(sp)
 4009768:	2829883a 	mov	r20,r5
 400976c:	01400044 	movi	r5,1
 4009770:	dcc00515 	stw	r19,20(sp)
 4009774:	dc800415 	stw	r18,16(sp)
 4009778:	dfc00715 	stw	ra,28(sp)
 400977c:	3825883a 	mov	r18,r7
 4009780:	8822d57a 	srli	r17,r17,21
 4009784:	4008abc0 	call	4008abc <_Balloc>
 4009788:	1027883a 	mov	r19,r2
 400978c:	00800434 	movhi	r2,16
 4009790:	10bfffc4 	addi	r2,r2,-1
 4009794:	808c703a 	and	r6,r16,r2
 4009798:	88000126 	beq	r17,zero,40097a0 <__d2b+0x50>
 400979c:	31800434 	orhi	r6,r6,16
 40097a0:	d9800015 	stw	r6,0(sp)
 40097a4:	a0002426 	beq	r20,zero,4009838 <__d2b+0xe8>
 40097a8:	d9000104 	addi	r4,sp,4
 40097ac:	dd000115 	stw	r20,4(sp)
 40097b0:	4008e180 	call	4008e18 <__lo0bits>
 40097b4:	d8c00017 	ldw	r3,0(sp)
 40097b8:	10002f1e 	bne	r2,zero,4009878 <__d2b+0x128>
 40097bc:	d9000117 	ldw	r4,4(sp)
 40097c0:	99000515 	stw	r4,20(r19)
 40097c4:	1821003a 	cmpeq	r16,r3,zero
 40097c8:	01000084 	movi	r4,2
 40097cc:	2421c83a 	sub	r16,r4,r16
 40097d0:	98c00615 	stw	r3,24(r19)
 40097d4:	9c000415 	stw	r16,16(r19)
 40097d8:	88001f1e 	bne	r17,zero,4009858 <__d2b+0x108>
 40097dc:	10bef384 	addi	r2,r2,-1074
 40097e0:	90800015 	stw	r2,0(r18)
 40097e4:	00900034 	movhi	r2,16384
 40097e8:	10bfffc4 	addi	r2,r2,-1
 40097ec:	8085883a 	add	r2,r16,r2
 40097f0:	1085883a 	add	r2,r2,r2
 40097f4:	1085883a 	add	r2,r2,r2
 40097f8:	9885883a 	add	r2,r19,r2
 40097fc:	11000517 	ldw	r4,20(r2)
 4009800:	8020917a 	slli	r16,r16,5
 4009804:	4008db00 	call	4008db0 <__hi0bits>
 4009808:	d8c00817 	ldw	r3,32(sp)
 400980c:	8085c83a 	sub	r2,r16,r2
 4009810:	18800015 	stw	r2,0(r3)
 4009814:	9805883a 	mov	r2,r19
 4009818:	dfc00717 	ldw	ra,28(sp)
 400981c:	dd000617 	ldw	r20,24(sp)
 4009820:	dcc00517 	ldw	r19,20(sp)
 4009824:	dc800417 	ldw	r18,16(sp)
 4009828:	dc400317 	ldw	r17,12(sp)
 400982c:	dc000217 	ldw	r16,8(sp)
 4009830:	dec00804 	addi	sp,sp,32
 4009834:	f800283a 	ret
 4009838:	d809883a 	mov	r4,sp
 400983c:	4008e180 	call	4008e18 <__lo0bits>
 4009840:	d8c00017 	ldw	r3,0(sp)
 4009844:	04000044 	movi	r16,1
 4009848:	9c000415 	stw	r16,16(r19)
 400984c:	98c00515 	stw	r3,20(r19)
 4009850:	10800804 	addi	r2,r2,32
 4009854:	883fe126 	beq	r17,zero,40097dc <__alt_data_end+0xfc0097dc>
 4009858:	00c00d44 	movi	r3,53
 400985c:	8c7ef344 	addi	r17,r17,-1075
 4009860:	88a3883a 	add	r17,r17,r2
 4009864:	1885c83a 	sub	r2,r3,r2
 4009868:	d8c00817 	ldw	r3,32(sp)
 400986c:	94400015 	stw	r17,0(r18)
 4009870:	18800015 	stw	r2,0(r3)
 4009874:	003fe706 	br	4009814 <__alt_data_end+0xfc009814>
 4009878:	01000804 	movi	r4,32
 400987c:	2089c83a 	sub	r4,r4,r2
 4009880:	1908983a 	sll	r4,r3,r4
 4009884:	d9400117 	ldw	r5,4(sp)
 4009888:	1886d83a 	srl	r3,r3,r2
 400988c:	2148b03a 	or	r4,r4,r5
 4009890:	99000515 	stw	r4,20(r19)
 4009894:	d8c00015 	stw	r3,0(sp)
 4009898:	003fca06 	br	40097c4 <__alt_data_end+0xfc0097c4>

0400989c <__ratio>:
 400989c:	defff904 	addi	sp,sp,-28
 40098a0:	dc400315 	stw	r17,12(sp)
 40098a4:	2823883a 	mov	r17,r5
 40098a8:	d9400104 	addi	r5,sp,4
 40098ac:	dfc00615 	stw	ra,24(sp)
 40098b0:	dcc00515 	stw	r19,20(sp)
 40098b4:	dc800415 	stw	r18,16(sp)
 40098b8:	2027883a 	mov	r19,r4
 40098bc:	dc000215 	stw	r16,8(sp)
 40098c0:	40096440 	call	4009644 <__b2d>
 40098c4:	d80b883a 	mov	r5,sp
 40098c8:	8809883a 	mov	r4,r17
 40098cc:	1025883a 	mov	r18,r2
 40098d0:	1821883a 	mov	r16,r3
 40098d4:	40096440 	call	4009644 <__b2d>
 40098d8:	8a000417 	ldw	r8,16(r17)
 40098dc:	99000417 	ldw	r4,16(r19)
 40098e0:	d9400117 	ldw	r5,4(sp)
 40098e4:	2209c83a 	sub	r4,r4,r8
 40098e8:	2010917a 	slli	r8,r4,5
 40098ec:	d9000017 	ldw	r4,0(sp)
 40098f0:	2909c83a 	sub	r4,r5,r4
 40098f4:	4109883a 	add	r4,r8,r4
 40098f8:	01000e0e 	bge	zero,r4,4009934 <__ratio+0x98>
 40098fc:	2008953a 	slli	r4,r4,20
 4009900:	2421883a 	add	r16,r4,r16
 4009904:	100d883a 	mov	r6,r2
 4009908:	180f883a 	mov	r7,r3
 400990c:	9009883a 	mov	r4,r18
 4009910:	800b883a 	mov	r5,r16
 4009914:	400d5d40 	call	400d5d4 <__divdf3>
 4009918:	dfc00617 	ldw	ra,24(sp)
 400991c:	dcc00517 	ldw	r19,20(sp)
 4009920:	dc800417 	ldw	r18,16(sp)
 4009924:	dc400317 	ldw	r17,12(sp)
 4009928:	dc000217 	ldw	r16,8(sp)
 400992c:	dec00704 	addi	sp,sp,28
 4009930:	f800283a 	ret
 4009934:	2008953a 	slli	r4,r4,20
 4009938:	1907c83a 	sub	r3,r3,r4
 400993c:	003ff106 	br	4009904 <__alt_data_end+0xfc009904>

04009940 <_mprec_log10>:
 4009940:	defffe04 	addi	sp,sp,-8
 4009944:	dc000015 	stw	r16,0(sp)
 4009948:	dfc00115 	stw	ra,4(sp)
 400994c:	008005c4 	movi	r2,23
 4009950:	2021883a 	mov	r16,r4
 4009954:	11000d0e 	bge	r2,r4,400998c <_mprec_log10+0x4c>
 4009958:	0005883a 	mov	r2,zero
 400995c:	00cffc34 	movhi	r3,16368
 4009960:	843fffc4 	addi	r16,r16,-1
 4009964:	000d883a 	mov	r6,zero
 4009968:	01d00934 	movhi	r7,16420
 400996c:	1009883a 	mov	r4,r2
 4009970:	180b883a 	mov	r5,r3
 4009974:	400e1140 	call	400e114 <__muldf3>
 4009978:	803ff91e 	bne	r16,zero,4009960 <__alt_data_end+0xfc009960>
 400997c:	dfc00117 	ldw	ra,4(sp)
 4009980:	dc000017 	ldw	r16,0(sp)
 4009984:	dec00204 	addi	sp,sp,8
 4009988:	f800283a 	ret
 400998c:	202090fa 	slli	r16,r4,3
 4009990:	008100f4 	movhi	r2,1027
 4009994:	108b9604 	addi	r2,r2,11864
 4009998:	1421883a 	add	r16,r2,r16
 400999c:	80800017 	ldw	r2,0(r16)
 40099a0:	80c00117 	ldw	r3,4(r16)
 40099a4:	dfc00117 	ldw	ra,4(sp)
 40099a8:	dc000017 	ldw	r16,0(sp)
 40099ac:	dec00204 	addi	sp,sp,8
 40099b0:	f800283a 	ret

040099b4 <__copybits>:
 40099b4:	297fffc4 	addi	r5,r5,-1
 40099b8:	280fd17a 	srai	r7,r5,5
 40099bc:	30c00417 	ldw	r3,16(r6)
 40099c0:	30800504 	addi	r2,r6,20
 40099c4:	39c00044 	addi	r7,r7,1
 40099c8:	18c7883a 	add	r3,r3,r3
 40099cc:	39cf883a 	add	r7,r7,r7
 40099d0:	18c7883a 	add	r3,r3,r3
 40099d4:	39cf883a 	add	r7,r7,r7
 40099d8:	10c7883a 	add	r3,r2,r3
 40099dc:	21cf883a 	add	r7,r4,r7
 40099e0:	10c00d2e 	bgeu	r2,r3,4009a18 <__copybits+0x64>
 40099e4:	200b883a 	mov	r5,r4
 40099e8:	12000017 	ldw	r8,0(r2)
 40099ec:	29400104 	addi	r5,r5,4
 40099f0:	10800104 	addi	r2,r2,4
 40099f4:	2a3fff15 	stw	r8,-4(r5)
 40099f8:	10fffb36 	bltu	r2,r3,40099e8 <__alt_data_end+0xfc0099e8>
 40099fc:	1985c83a 	sub	r2,r3,r6
 4009a00:	10bffac4 	addi	r2,r2,-21
 4009a04:	1004d0ba 	srli	r2,r2,2
 4009a08:	10800044 	addi	r2,r2,1
 4009a0c:	1085883a 	add	r2,r2,r2
 4009a10:	1085883a 	add	r2,r2,r2
 4009a14:	2089883a 	add	r4,r4,r2
 4009a18:	21c0032e 	bgeu	r4,r7,4009a28 <__copybits+0x74>
 4009a1c:	20000015 	stw	zero,0(r4)
 4009a20:	21000104 	addi	r4,r4,4
 4009a24:	21fffd36 	bltu	r4,r7,4009a1c <__alt_data_end+0xfc009a1c>
 4009a28:	f800283a 	ret

04009a2c <__any_on>:
 4009a2c:	20c00417 	ldw	r3,16(r4)
 4009a30:	2805d17a 	srai	r2,r5,5
 4009a34:	21000504 	addi	r4,r4,20
 4009a38:	18800d0e 	bge	r3,r2,4009a70 <__any_on+0x44>
 4009a3c:	18c7883a 	add	r3,r3,r3
 4009a40:	18c7883a 	add	r3,r3,r3
 4009a44:	20c7883a 	add	r3,r4,r3
 4009a48:	20c0192e 	bgeu	r4,r3,4009ab0 <__any_on+0x84>
 4009a4c:	18bfff17 	ldw	r2,-4(r3)
 4009a50:	18ffff04 	addi	r3,r3,-4
 4009a54:	1000041e 	bne	r2,zero,4009a68 <__any_on+0x3c>
 4009a58:	20c0142e 	bgeu	r4,r3,4009aac <__any_on+0x80>
 4009a5c:	18ffff04 	addi	r3,r3,-4
 4009a60:	19400017 	ldw	r5,0(r3)
 4009a64:	283ffc26 	beq	r5,zero,4009a58 <__alt_data_end+0xfc009a58>
 4009a68:	00800044 	movi	r2,1
 4009a6c:	f800283a 	ret
 4009a70:	10c00a0e 	bge	r2,r3,4009a9c <__any_on+0x70>
 4009a74:	1085883a 	add	r2,r2,r2
 4009a78:	1085883a 	add	r2,r2,r2
 4009a7c:	294007cc 	andi	r5,r5,31
 4009a80:	2087883a 	add	r3,r4,r2
 4009a84:	283ff026 	beq	r5,zero,4009a48 <__alt_data_end+0xfc009a48>
 4009a88:	19800017 	ldw	r6,0(r3)
 4009a8c:	3144d83a 	srl	r2,r6,r5
 4009a90:	114a983a 	sll	r5,r2,r5
 4009a94:	317ff41e 	bne	r6,r5,4009a68 <__alt_data_end+0xfc009a68>
 4009a98:	003feb06 	br	4009a48 <__alt_data_end+0xfc009a48>
 4009a9c:	1085883a 	add	r2,r2,r2
 4009aa0:	1085883a 	add	r2,r2,r2
 4009aa4:	2087883a 	add	r3,r4,r2
 4009aa8:	003fe706 	br	4009a48 <__alt_data_end+0xfc009a48>
 4009aac:	f800283a 	ret
 4009ab0:	0005883a 	mov	r2,zero
 4009ab4:	f800283a 	ret

04009ab8 <_realloc_r>:
 4009ab8:	defff604 	addi	sp,sp,-40
 4009abc:	dc800215 	stw	r18,8(sp)
 4009ac0:	dfc00915 	stw	ra,36(sp)
 4009ac4:	df000815 	stw	fp,32(sp)
 4009ac8:	ddc00715 	stw	r23,28(sp)
 4009acc:	dd800615 	stw	r22,24(sp)
 4009ad0:	dd400515 	stw	r21,20(sp)
 4009ad4:	dd000415 	stw	r20,16(sp)
 4009ad8:	dcc00315 	stw	r19,12(sp)
 4009adc:	dc400115 	stw	r17,4(sp)
 4009ae0:	dc000015 	stw	r16,0(sp)
 4009ae4:	3025883a 	mov	r18,r6
 4009ae8:	2800b726 	beq	r5,zero,4009dc8 <_realloc_r+0x310>
 4009aec:	282b883a 	mov	r21,r5
 4009af0:	2029883a 	mov	r20,r4
 4009af4:	400fcd80 	call	400fcd8 <__malloc_lock>
 4009af8:	a8bfff17 	ldw	r2,-4(r21)
 4009afc:	043fff04 	movi	r16,-4
 4009b00:	90c002c4 	addi	r3,r18,11
 4009b04:	01000584 	movi	r4,22
 4009b08:	acfffe04 	addi	r19,r21,-8
 4009b0c:	1420703a 	and	r16,r2,r16
 4009b10:	20c0332e 	bgeu	r4,r3,4009be0 <_realloc_r+0x128>
 4009b14:	047ffe04 	movi	r17,-8
 4009b18:	1c62703a 	and	r17,r3,r17
 4009b1c:	8807883a 	mov	r3,r17
 4009b20:	88005816 	blt	r17,zero,4009c84 <_realloc_r+0x1cc>
 4009b24:	8c805736 	bltu	r17,r18,4009c84 <_realloc_r+0x1cc>
 4009b28:	80c0300e 	bge	r16,r3,4009bec <_realloc_r+0x134>
 4009b2c:	070100f4 	movhi	fp,1027
 4009b30:	e7132a04 	addi	fp,fp,19624
 4009b34:	e1c00217 	ldw	r7,8(fp)
 4009b38:	9c09883a 	add	r4,r19,r16
 4009b3c:	22000117 	ldw	r8,4(r4)
 4009b40:	21c06326 	beq	r4,r7,4009cd0 <_realloc_r+0x218>
 4009b44:	017fff84 	movi	r5,-2
 4009b48:	414a703a 	and	r5,r8,r5
 4009b4c:	214b883a 	add	r5,r4,r5
 4009b50:	29800117 	ldw	r6,4(r5)
 4009b54:	3180004c 	andi	r6,r6,1
 4009b58:	30003f26 	beq	r6,zero,4009c58 <_realloc_r+0x1a0>
 4009b5c:	1080004c 	andi	r2,r2,1
 4009b60:	10008326 	beq	r2,zero,4009d70 <_realloc_r+0x2b8>
 4009b64:	900b883a 	mov	r5,r18
 4009b68:	a009883a 	mov	r4,r20
 4009b6c:	4007e000 	call	4007e00 <_malloc_r>
 4009b70:	1025883a 	mov	r18,r2
 4009b74:	10011e26 	beq	r2,zero,4009ff0 <_realloc_r+0x538>
 4009b78:	a93fff17 	ldw	r4,-4(r21)
 4009b7c:	10fffe04 	addi	r3,r2,-8
 4009b80:	00bfff84 	movi	r2,-2
 4009b84:	2084703a 	and	r2,r4,r2
 4009b88:	9885883a 	add	r2,r19,r2
 4009b8c:	1880ee26 	beq	r3,r2,4009f48 <_realloc_r+0x490>
 4009b90:	81bfff04 	addi	r6,r16,-4
 4009b94:	00800904 	movi	r2,36
 4009b98:	1180b836 	bltu	r2,r6,4009e7c <_realloc_r+0x3c4>
 4009b9c:	00c004c4 	movi	r3,19
 4009ba0:	19809636 	bltu	r3,r6,4009dfc <_realloc_r+0x344>
 4009ba4:	9005883a 	mov	r2,r18
 4009ba8:	a807883a 	mov	r3,r21
 4009bac:	19000017 	ldw	r4,0(r3)
 4009bb0:	11000015 	stw	r4,0(r2)
 4009bb4:	19000117 	ldw	r4,4(r3)
 4009bb8:	11000115 	stw	r4,4(r2)
 4009bbc:	18c00217 	ldw	r3,8(r3)
 4009bc0:	10c00215 	stw	r3,8(r2)
 4009bc4:	a80b883a 	mov	r5,r21
 4009bc8:	a009883a 	mov	r4,r20
 4009bcc:	40072140 	call	4007214 <_free_r>
 4009bd0:	a009883a 	mov	r4,r20
 4009bd4:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4009bd8:	9005883a 	mov	r2,r18
 4009bdc:	00001206 	br	4009c28 <_realloc_r+0x170>
 4009be0:	00c00404 	movi	r3,16
 4009be4:	1823883a 	mov	r17,r3
 4009be8:	003fce06 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009bec:	a825883a 	mov	r18,r21
 4009bf0:	8445c83a 	sub	r2,r16,r17
 4009bf4:	00c003c4 	movi	r3,15
 4009bf8:	18802636 	bltu	r3,r2,4009c94 <_realloc_r+0x1dc>
 4009bfc:	99800117 	ldw	r6,4(r19)
 4009c00:	9c07883a 	add	r3,r19,r16
 4009c04:	3180004c 	andi	r6,r6,1
 4009c08:	3420b03a 	or	r16,r6,r16
 4009c0c:	9c000115 	stw	r16,4(r19)
 4009c10:	18800117 	ldw	r2,4(r3)
 4009c14:	10800054 	ori	r2,r2,1
 4009c18:	18800115 	stw	r2,4(r3)
 4009c1c:	a009883a 	mov	r4,r20
 4009c20:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4009c24:	9005883a 	mov	r2,r18
 4009c28:	dfc00917 	ldw	ra,36(sp)
 4009c2c:	df000817 	ldw	fp,32(sp)
 4009c30:	ddc00717 	ldw	r23,28(sp)
 4009c34:	dd800617 	ldw	r22,24(sp)
 4009c38:	dd400517 	ldw	r21,20(sp)
 4009c3c:	dd000417 	ldw	r20,16(sp)
 4009c40:	dcc00317 	ldw	r19,12(sp)
 4009c44:	dc800217 	ldw	r18,8(sp)
 4009c48:	dc400117 	ldw	r17,4(sp)
 4009c4c:	dc000017 	ldw	r16,0(sp)
 4009c50:	dec00a04 	addi	sp,sp,40
 4009c54:	f800283a 	ret
 4009c58:	017fff04 	movi	r5,-4
 4009c5c:	414a703a 	and	r5,r8,r5
 4009c60:	814d883a 	add	r6,r16,r5
 4009c64:	30c01f16 	blt	r6,r3,4009ce4 <_realloc_r+0x22c>
 4009c68:	20800317 	ldw	r2,12(r4)
 4009c6c:	20c00217 	ldw	r3,8(r4)
 4009c70:	a825883a 	mov	r18,r21
 4009c74:	3021883a 	mov	r16,r6
 4009c78:	18800315 	stw	r2,12(r3)
 4009c7c:	10c00215 	stw	r3,8(r2)
 4009c80:	003fdb06 	br	4009bf0 <__alt_data_end+0xfc009bf0>
 4009c84:	00800304 	movi	r2,12
 4009c88:	a0800015 	stw	r2,0(r20)
 4009c8c:	0005883a 	mov	r2,zero
 4009c90:	003fe506 	br	4009c28 <__alt_data_end+0xfc009c28>
 4009c94:	98c00117 	ldw	r3,4(r19)
 4009c98:	9c4b883a 	add	r5,r19,r17
 4009c9c:	11000054 	ori	r4,r2,1
 4009ca0:	18c0004c 	andi	r3,r3,1
 4009ca4:	1c62b03a 	or	r17,r3,r17
 4009ca8:	9c400115 	stw	r17,4(r19)
 4009cac:	29000115 	stw	r4,4(r5)
 4009cb0:	2885883a 	add	r2,r5,r2
 4009cb4:	10c00117 	ldw	r3,4(r2)
 4009cb8:	29400204 	addi	r5,r5,8
 4009cbc:	a009883a 	mov	r4,r20
 4009cc0:	18c00054 	ori	r3,r3,1
 4009cc4:	10c00115 	stw	r3,4(r2)
 4009cc8:	40072140 	call	4007214 <_free_r>
 4009ccc:	003fd306 	br	4009c1c <__alt_data_end+0xfc009c1c>
 4009cd0:	017fff04 	movi	r5,-4
 4009cd4:	414a703a 	and	r5,r8,r5
 4009cd8:	89800404 	addi	r6,r17,16
 4009cdc:	8151883a 	add	r8,r16,r5
 4009ce0:	4180590e 	bge	r8,r6,4009e48 <_realloc_r+0x390>
 4009ce4:	1080004c 	andi	r2,r2,1
 4009ce8:	103f9e1e 	bne	r2,zero,4009b64 <__alt_data_end+0xfc009b64>
 4009cec:	adbffe17 	ldw	r22,-8(r21)
 4009cf0:	00bfff04 	movi	r2,-4
 4009cf4:	9dadc83a 	sub	r22,r19,r22
 4009cf8:	b1800117 	ldw	r6,4(r22)
 4009cfc:	3084703a 	and	r2,r6,r2
 4009d00:	20002026 	beq	r4,zero,4009d84 <_realloc_r+0x2cc>
 4009d04:	80af883a 	add	r23,r16,r2
 4009d08:	b96f883a 	add	r23,r23,r5
 4009d0c:	21c05f26 	beq	r4,r7,4009e8c <_realloc_r+0x3d4>
 4009d10:	b8c01c16 	blt	r23,r3,4009d84 <_realloc_r+0x2cc>
 4009d14:	20800317 	ldw	r2,12(r4)
 4009d18:	20c00217 	ldw	r3,8(r4)
 4009d1c:	81bfff04 	addi	r6,r16,-4
 4009d20:	01000904 	movi	r4,36
 4009d24:	18800315 	stw	r2,12(r3)
 4009d28:	10c00215 	stw	r3,8(r2)
 4009d2c:	b0c00217 	ldw	r3,8(r22)
 4009d30:	b0800317 	ldw	r2,12(r22)
 4009d34:	b4800204 	addi	r18,r22,8
 4009d38:	18800315 	stw	r2,12(r3)
 4009d3c:	10c00215 	stw	r3,8(r2)
 4009d40:	21801b36 	bltu	r4,r6,4009db0 <_realloc_r+0x2f8>
 4009d44:	008004c4 	movi	r2,19
 4009d48:	1180352e 	bgeu	r2,r6,4009e20 <_realloc_r+0x368>
 4009d4c:	a8800017 	ldw	r2,0(r21)
 4009d50:	b0800215 	stw	r2,8(r22)
 4009d54:	a8800117 	ldw	r2,4(r21)
 4009d58:	b0800315 	stw	r2,12(r22)
 4009d5c:	008006c4 	movi	r2,27
 4009d60:	11807f36 	bltu	r2,r6,4009f60 <_realloc_r+0x4a8>
 4009d64:	b0800404 	addi	r2,r22,16
 4009d68:	ad400204 	addi	r21,r21,8
 4009d6c:	00002d06 	br	4009e24 <_realloc_r+0x36c>
 4009d70:	adbffe17 	ldw	r22,-8(r21)
 4009d74:	00bfff04 	movi	r2,-4
 4009d78:	9dadc83a 	sub	r22,r19,r22
 4009d7c:	b1000117 	ldw	r4,4(r22)
 4009d80:	2084703a 	and	r2,r4,r2
 4009d84:	b03f7726 	beq	r22,zero,4009b64 <__alt_data_end+0xfc009b64>
 4009d88:	80af883a 	add	r23,r16,r2
 4009d8c:	b8ff7516 	blt	r23,r3,4009b64 <__alt_data_end+0xfc009b64>
 4009d90:	b0800317 	ldw	r2,12(r22)
 4009d94:	b0c00217 	ldw	r3,8(r22)
 4009d98:	81bfff04 	addi	r6,r16,-4
 4009d9c:	01000904 	movi	r4,36
 4009da0:	18800315 	stw	r2,12(r3)
 4009da4:	10c00215 	stw	r3,8(r2)
 4009da8:	b4800204 	addi	r18,r22,8
 4009dac:	21bfe52e 	bgeu	r4,r6,4009d44 <__alt_data_end+0xfc009d44>
 4009db0:	a80b883a 	mov	r5,r21
 4009db4:	9009883a 	mov	r4,r18
 4009db8:	40088380 	call	4008838 <memmove>
 4009dbc:	b821883a 	mov	r16,r23
 4009dc0:	b027883a 	mov	r19,r22
 4009dc4:	003f8a06 	br	4009bf0 <__alt_data_end+0xfc009bf0>
 4009dc8:	300b883a 	mov	r5,r6
 4009dcc:	dfc00917 	ldw	ra,36(sp)
 4009dd0:	df000817 	ldw	fp,32(sp)
 4009dd4:	ddc00717 	ldw	r23,28(sp)
 4009dd8:	dd800617 	ldw	r22,24(sp)
 4009ddc:	dd400517 	ldw	r21,20(sp)
 4009de0:	dd000417 	ldw	r20,16(sp)
 4009de4:	dcc00317 	ldw	r19,12(sp)
 4009de8:	dc800217 	ldw	r18,8(sp)
 4009dec:	dc400117 	ldw	r17,4(sp)
 4009df0:	dc000017 	ldw	r16,0(sp)
 4009df4:	dec00a04 	addi	sp,sp,40
 4009df8:	4007e001 	jmpi	4007e00 <_malloc_r>
 4009dfc:	a8c00017 	ldw	r3,0(r21)
 4009e00:	90c00015 	stw	r3,0(r18)
 4009e04:	a8c00117 	ldw	r3,4(r21)
 4009e08:	90c00115 	stw	r3,4(r18)
 4009e0c:	00c006c4 	movi	r3,27
 4009e10:	19804536 	bltu	r3,r6,4009f28 <_realloc_r+0x470>
 4009e14:	90800204 	addi	r2,r18,8
 4009e18:	a8c00204 	addi	r3,r21,8
 4009e1c:	003f6306 	br	4009bac <__alt_data_end+0xfc009bac>
 4009e20:	9005883a 	mov	r2,r18
 4009e24:	a8c00017 	ldw	r3,0(r21)
 4009e28:	b821883a 	mov	r16,r23
 4009e2c:	b027883a 	mov	r19,r22
 4009e30:	10c00015 	stw	r3,0(r2)
 4009e34:	a8c00117 	ldw	r3,4(r21)
 4009e38:	10c00115 	stw	r3,4(r2)
 4009e3c:	a8c00217 	ldw	r3,8(r21)
 4009e40:	10c00215 	stw	r3,8(r2)
 4009e44:	003f6a06 	br	4009bf0 <__alt_data_end+0xfc009bf0>
 4009e48:	9c67883a 	add	r19,r19,r17
 4009e4c:	4445c83a 	sub	r2,r8,r17
 4009e50:	e4c00215 	stw	r19,8(fp)
 4009e54:	10800054 	ori	r2,r2,1
 4009e58:	98800115 	stw	r2,4(r19)
 4009e5c:	a8bfff17 	ldw	r2,-4(r21)
 4009e60:	a009883a 	mov	r4,r20
 4009e64:	1080004c 	andi	r2,r2,1
 4009e68:	1462b03a 	or	r17,r2,r17
 4009e6c:	ac7fff15 	stw	r17,-4(r21)
 4009e70:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4009e74:	a805883a 	mov	r2,r21
 4009e78:	003f6b06 	br	4009c28 <__alt_data_end+0xfc009c28>
 4009e7c:	a80b883a 	mov	r5,r21
 4009e80:	9009883a 	mov	r4,r18
 4009e84:	40088380 	call	4008838 <memmove>
 4009e88:	003f4e06 	br	4009bc4 <__alt_data_end+0xfc009bc4>
 4009e8c:	89000404 	addi	r4,r17,16
 4009e90:	b93fbc16 	blt	r23,r4,4009d84 <__alt_data_end+0xfc009d84>
 4009e94:	b0800317 	ldw	r2,12(r22)
 4009e98:	b0c00217 	ldw	r3,8(r22)
 4009e9c:	81bfff04 	addi	r6,r16,-4
 4009ea0:	01000904 	movi	r4,36
 4009ea4:	18800315 	stw	r2,12(r3)
 4009ea8:	10c00215 	stw	r3,8(r2)
 4009eac:	b4800204 	addi	r18,r22,8
 4009eb0:	21804336 	bltu	r4,r6,4009fc0 <_realloc_r+0x508>
 4009eb4:	008004c4 	movi	r2,19
 4009eb8:	11803f2e 	bgeu	r2,r6,4009fb8 <_realloc_r+0x500>
 4009ebc:	a8800017 	ldw	r2,0(r21)
 4009ec0:	b0800215 	stw	r2,8(r22)
 4009ec4:	a8800117 	ldw	r2,4(r21)
 4009ec8:	b0800315 	stw	r2,12(r22)
 4009ecc:	008006c4 	movi	r2,27
 4009ed0:	11803f36 	bltu	r2,r6,4009fd0 <_realloc_r+0x518>
 4009ed4:	b0800404 	addi	r2,r22,16
 4009ed8:	ad400204 	addi	r21,r21,8
 4009edc:	a8c00017 	ldw	r3,0(r21)
 4009ee0:	10c00015 	stw	r3,0(r2)
 4009ee4:	a8c00117 	ldw	r3,4(r21)
 4009ee8:	10c00115 	stw	r3,4(r2)
 4009eec:	a8c00217 	ldw	r3,8(r21)
 4009ef0:	10c00215 	stw	r3,8(r2)
 4009ef4:	b447883a 	add	r3,r22,r17
 4009ef8:	bc45c83a 	sub	r2,r23,r17
 4009efc:	e0c00215 	stw	r3,8(fp)
 4009f00:	10800054 	ori	r2,r2,1
 4009f04:	18800115 	stw	r2,4(r3)
 4009f08:	b0800117 	ldw	r2,4(r22)
 4009f0c:	a009883a 	mov	r4,r20
 4009f10:	1080004c 	andi	r2,r2,1
 4009f14:	1462b03a 	or	r17,r2,r17
 4009f18:	b4400115 	stw	r17,4(r22)
 4009f1c:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4009f20:	9005883a 	mov	r2,r18
 4009f24:	003f4006 	br	4009c28 <__alt_data_end+0xfc009c28>
 4009f28:	a8c00217 	ldw	r3,8(r21)
 4009f2c:	90c00215 	stw	r3,8(r18)
 4009f30:	a8c00317 	ldw	r3,12(r21)
 4009f34:	90c00315 	stw	r3,12(r18)
 4009f38:	30801126 	beq	r6,r2,4009f80 <_realloc_r+0x4c8>
 4009f3c:	90800404 	addi	r2,r18,16
 4009f40:	a8c00404 	addi	r3,r21,16
 4009f44:	003f1906 	br	4009bac <__alt_data_end+0xfc009bac>
 4009f48:	90ffff17 	ldw	r3,-4(r18)
 4009f4c:	00bfff04 	movi	r2,-4
 4009f50:	a825883a 	mov	r18,r21
 4009f54:	1884703a 	and	r2,r3,r2
 4009f58:	80a1883a 	add	r16,r16,r2
 4009f5c:	003f2406 	br	4009bf0 <__alt_data_end+0xfc009bf0>
 4009f60:	a8800217 	ldw	r2,8(r21)
 4009f64:	b0800415 	stw	r2,16(r22)
 4009f68:	a8800317 	ldw	r2,12(r21)
 4009f6c:	b0800515 	stw	r2,20(r22)
 4009f70:	31000a26 	beq	r6,r4,4009f9c <_realloc_r+0x4e4>
 4009f74:	b0800604 	addi	r2,r22,24
 4009f78:	ad400404 	addi	r21,r21,16
 4009f7c:	003fa906 	br	4009e24 <__alt_data_end+0xfc009e24>
 4009f80:	a9000417 	ldw	r4,16(r21)
 4009f84:	90800604 	addi	r2,r18,24
 4009f88:	a8c00604 	addi	r3,r21,24
 4009f8c:	91000415 	stw	r4,16(r18)
 4009f90:	a9000517 	ldw	r4,20(r21)
 4009f94:	91000515 	stw	r4,20(r18)
 4009f98:	003f0406 	br	4009bac <__alt_data_end+0xfc009bac>
 4009f9c:	a8c00417 	ldw	r3,16(r21)
 4009fa0:	ad400604 	addi	r21,r21,24
 4009fa4:	b0800804 	addi	r2,r22,32
 4009fa8:	b0c00615 	stw	r3,24(r22)
 4009fac:	a8ffff17 	ldw	r3,-4(r21)
 4009fb0:	b0c00715 	stw	r3,28(r22)
 4009fb4:	003f9b06 	br	4009e24 <__alt_data_end+0xfc009e24>
 4009fb8:	9005883a 	mov	r2,r18
 4009fbc:	003fc706 	br	4009edc <__alt_data_end+0xfc009edc>
 4009fc0:	a80b883a 	mov	r5,r21
 4009fc4:	9009883a 	mov	r4,r18
 4009fc8:	40088380 	call	4008838 <memmove>
 4009fcc:	003fc906 	br	4009ef4 <__alt_data_end+0xfc009ef4>
 4009fd0:	a8800217 	ldw	r2,8(r21)
 4009fd4:	b0800415 	stw	r2,16(r22)
 4009fd8:	a8800317 	ldw	r2,12(r21)
 4009fdc:	b0800515 	stw	r2,20(r22)
 4009fe0:	31000726 	beq	r6,r4,400a000 <_realloc_r+0x548>
 4009fe4:	b0800604 	addi	r2,r22,24
 4009fe8:	ad400404 	addi	r21,r21,16
 4009fec:	003fbb06 	br	4009edc <__alt_data_end+0xfc009edc>
 4009ff0:	a009883a 	mov	r4,r20
 4009ff4:	400fcfc0 	call	400fcfc <__malloc_unlock>
 4009ff8:	0005883a 	mov	r2,zero
 4009ffc:	003f0a06 	br	4009c28 <__alt_data_end+0xfc009c28>
 400a000:	a8c00417 	ldw	r3,16(r21)
 400a004:	ad400604 	addi	r21,r21,24
 400a008:	b0800804 	addi	r2,r22,32
 400a00c:	b0c00615 	stw	r3,24(r22)
 400a010:	a8ffff17 	ldw	r3,-4(r21)
 400a014:	b0c00715 	stw	r3,28(r22)
 400a018:	003fb006 	br	4009edc <__alt_data_end+0xfc009edc>

0400a01c <__fpclassifyd>:
 400a01c:	00a00034 	movhi	r2,32768
 400a020:	10bfffc4 	addi	r2,r2,-1
 400a024:	2884703a 	and	r2,r5,r2
 400a028:	10000726 	beq	r2,zero,400a048 <__fpclassifyd+0x2c>
 400a02c:	00fffc34 	movhi	r3,65520
 400a030:	019ff834 	movhi	r6,32736
 400a034:	28c7883a 	add	r3,r5,r3
 400a038:	31bfffc4 	addi	r6,r6,-1
 400a03c:	30c00536 	bltu	r6,r3,400a054 <__fpclassifyd+0x38>
 400a040:	00800104 	movi	r2,4
 400a044:	f800283a 	ret
 400a048:	2000021e 	bne	r4,zero,400a054 <__fpclassifyd+0x38>
 400a04c:	00800084 	movi	r2,2
 400a050:	f800283a 	ret
 400a054:	00dffc34 	movhi	r3,32752
 400a058:	019ff834 	movhi	r6,32736
 400a05c:	28cb883a 	add	r5,r5,r3
 400a060:	31bfffc4 	addi	r6,r6,-1
 400a064:	317ff62e 	bgeu	r6,r5,400a040 <__alt_data_end+0xfc00a040>
 400a068:	01400434 	movhi	r5,16
 400a06c:	297fffc4 	addi	r5,r5,-1
 400a070:	28800236 	bltu	r5,r2,400a07c <__fpclassifyd+0x60>
 400a074:	008000c4 	movi	r2,3
 400a078:	f800283a 	ret
 400a07c:	10c00226 	beq	r2,r3,400a088 <__fpclassifyd+0x6c>
 400a080:	0005883a 	mov	r2,zero
 400a084:	f800283a 	ret
 400a088:	2005003a 	cmpeq	r2,r4,zero
 400a08c:	f800283a 	ret

0400a090 <_sbrk_r>:
 400a090:	defffd04 	addi	sp,sp,-12
 400a094:	dc000015 	stw	r16,0(sp)
 400a098:	04010134 	movhi	r16,1028
 400a09c:	dc400115 	stw	r17,4(sp)
 400a0a0:	84257c04 	addi	r16,r16,-27152
 400a0a4:	2023883a 	mov	r17,r4
 400a0a8:	2809883a 	mov	r4,r5
 400a0ac:	dfc00215 	stw	ra,8(sp)
 400a0b0:	80000015 	stw	zero,0(r16)
 400a0b4:	400febc0 	call	400febc <sbrk>
 400a0b8:	00ffffc4 	movi	r3,-1
 400a0bc:	10c00526 	beq	r2,r3,400a0d4 <_sbrk_r+0x44>
 400a0c0:	dfc00217 	ldw	ra,8(sp)
 400a0c4:	dc400117 	ldw	r17,4(sp)
 400a0c8:	dc000017 	ldw	r16,0(sp)
 400a0cc:	dec00304 	addi	sp,sp,12
 400a0d0:	f800283a 	ret
 400a0d4:	80c00017 	ldw	r3,0(r16)
 400a0d8:	183ff926 	beq	r3,zero,400a0c0 <__alt_data_end+0xfc00a0c0>
 400a0dc:	88c00015 	stw	r3,0(r17)
 400a0e0:	003ff706 	br	400a0c0 <__alt_data_end+0xfc00a0c0>

0400a0e4 <__sread>:
 400a0e4:	defffe04 	addi	sp,sp,-8
 400a0e8:	dc000015 	stw	r16,0(sp)
 400a0ec:	2821883a 	mov	r16,r5
 400a0f0:	2940038f 	ldh	r5,14(r5)
 400a0f4:	dfc00115 	stw	ra,4(sp)
 400a0f8:	400bed80 	call	400bed8 <_read_r>
 400a0fc:	10000716 	blt	r2,zero,400a11c <__sread+0x38>
 400a100:	80c01417 	ldw	r3,80(r16)
 400a104:	1887883a 	add	r3,r3,r2
 400a108:	80c01415 	stw	r3,80(r16)
 400a10c:	dfc00117 	ldw	ra,4(sp)
 400a110:	dc000017 	ldw	r16,0(sp)
 400a114:	dec00204 	addi	sp,sp,8
 400a118:	f800283a 	ret
 400a11c:	80c0030b 	ldhu	r3,12(r16)
 400a120:	18fbffcc 	andi	r3,r3,61439
 400a124:	80c0030d 	sth	r3,12(r16)
 400a128:	dfc00117 	ldw	ra,4(sp)
 400a12c:	dc000017 	ldw	r16,0(sp)
 400a130:	dec00204 	addi	sp,sp,8
 400a134:	f800283a 	ret

0400a138 <__seofread>:
 400a138:	0005883a 	mov	r2,zero
 400a13c:	f800283a 	ret

0400a140 <__swrite>:
 400a140:	2880030b 	ldhu	r2,12(r5)
 400a144:	defffb04 	addi	sp,sp,-20
 400a148:	dcc00315 	stw	r19,12(sp)
 400a14c:	dc800215 	stw	r18,8(sp)
 400a150:	dc400115 	stw	r17,4(sp)
 400a154:	dc000015 	stw	r16,0(sp)
 400a158:	dfc00415 	stw	ra,16(sp)
 400a15c:	10c0400c 	andi	r3,r2,256
 400a160:	2821883a 	mov	r16,r5
 400a164:	2023883a 	mov	r17,r4
 400a168:	3025883a 	mov	r18,r6
 400a16c:	3827883a 	mov	r19,r7
 400a170:	18000526 	beq	r3,zero,400a188 <__swrite+0x48>
 400a174:	2940038f 	ldh	r5,14(r5)
 400a178:	01c00084 	movi	r7,2
 400a17c:	000d883a 	mov	r6,zero
 400a180:	400be780 	call	400be78 <_lseek_r>
 400a184:	8080030b 	ldhu	r2,12(r16)
 400a188:	8140038f 	ldh	r5,14(r16)
 400a18c:	10bbffcc 	andi	r2,r2,61439
 400a190:	980f883a 	mov	r7,r19
 400a194:	900d883a 	mov	r6,r18
 400a198:	8809883a 	mov	r4,r17
 400a19c:	8080030d 	sth	r2,12(r16)
 400a1a0:	dfc00417 	ldw	ra,16(sp)
 400a1a4:	dcc00317 	ldw	r19,12(sp)
 400a1a8:	dc800217 	ldw	r18,8(sp)
 400a1ac:	dc400117 	ldw	r17,4(sp)
 400a1b0:	dc000017 	ldw	r16,0(sp)
 400a1b4:	dec00504 	addi	sp,sp,20
 400a1b8:	400b9441 	jmpi	400b944 <_write_r>

0400a1bc <__sseek>:
 400a1bc:	defffe04 	addi	sp,sp,-8
 400a1c0:	dc000015 	stw	r16,0(sp)
 400a1c4:	2821883a 	mov	r16,r5
 400a1c8:	2940038f 	ldh	r5,14(r5)
 400a1cc:	dfc00115 	stw	ra,4(sp)
 400a1d0:	400be780 	call	400be78 <_lseek_r>
 400a1d4:	00ffffc4 	movi	r3,-1
 400a1d8:	10c00826 	beq	r2,r3,400a1fc <__sseek+0x40>
 400a1dc:	80c0030b 	ldhu	r3,12(r16)
 400a1e0:	80801415 	stw	r2,80(r16)
 400a1e4:	18c40014 	ori	r3,r3,4096
 400a1e8:	80c0030d 	sth	r3,12(r16)
 400a1ec:	dfc00117 	ldw	ra,4(sp)
 400a1f0:	dc000017 	ldw	r16,0(sp)
 400a1f4:	dec00204 	addi	sp,sp,8
 400a1f8:	f800283a 	ret
 400a1fc:	80c0030b 	ldhu	r3,12(r16)
 400a200:	18fbffcc 	andi	r3,r3,61439
 400a204:	80c0030d 	sth	r3,12(r16)
 400a208:	dfc00117 	ldw	ra,4(sp)
 400a20c:	dc000017 	ldw	r16,0(sp)
 400a210:	dec00204 	addi	sp,sp,8
 400a214:	f800283a 	ret

0400a218 <__sclose>:
 400a218:	2940038f 	ldh	r5,14(r5)
 400a21c:	400b9a41 	jmpi	400b9a4 <_close_r>

0400a220 <strcmp>:
 400a220:	2144b03a 	or	r2,r4,r5
 400a224:	108000cc 	andi	r2,r2,3
 400a228:	1000171e 	bne	r2,zero,400a288 <strcmp+0x68>
 400a22c:	20800017 	ldw	r2,0(r4)
 400a230:	28c00017 	ldw	r3,0(r5)
 400a234:	10c0141e 	bne	r2,r3,400a288 <strcmp+0x68>
 400a238:	027fbff4 	movhi	r9,65279
 400a23c:	4a7fbfc4 	addi	r9,r9,-257
 400a240:	0086303a 	nor	r3,zero,r2
 400a244:	02202074 	movhi	r8,32897
 400a248:	1245883a 	add	r2,r2,r9
 400a24c:	42202004 	addi	r8,r8,-32640
 400a250:	10c4703a 	and	r2,r2,r3
 400a254:	1204703a 	and	r2,r2,r8
 400a258:	10000226 	beq	r2,zero,400a264 <strcmp+0x44>
 400a25c:	00002306 	br	400a2ec <strcmp+0xcc>
 400a260:	1000221e 	bne	r2,zero,400a2ec <strcmp+0xcc>
 400a264:	21000104 	addi	r4,r4,4
 400a268:	20c00017 	ldw	r3,0(r4)
 400a26c:	29400104 	addi	r5,r5,4
 400a270:	29800017 	ldw	r6,0(r5)
 400a274:	1a4f883a 	add	r7,r3,r9
 400a278:	00c4303a 	nor	r2,zero,r3
 400a27c:	3884703a 	and	r2,r7,r2
 400a280:	1204703a 	and	r2,r2,r8
 400a284:	19bff626 	beq	r3,r6,400a260 <__alt_data_end+0xfc00a260>
 400a288:	20800003 	ldbu	r2,0(r4)
 400a28c:	10c03fcc 	andi	r3,r2,255
 400a290:	18c0201c 	xori	r3,r3,128
 400a294:	18ffe004 	addi	r3,r3,-128
 400a298:	18000c26 	beq	r3,zero,400a2cc <strcmp+0xac>
 400a29c:	29800007 	ldb	r6,0(r5)
 400a2a0:	19800326 	beq	r3,r6,400a2b0 <strcmp+0x90>
 400a2a4:	00001306 	br	400a2f4 <strcmp+0xd4>
 400a2a8:	29800007 	ldb	r6,0(r5)
 400a2ac:	11800b1e 	bne	r2,r6,400a2dc <strcmp+0xbc>
 400a2b0:	21000044 	addi	r4,r4,1
 400a2b4:	20c00003 	ldbu	r3,0(r4)
 400a2b8:	29400044 	addi	r5,r5,1
 400a2bc:	18803fcc 	andi	r2,r3,255
 400a2c0:	1080201c 	xori	r2,r2,128
 400a2c4:	10bfe004 	addi	r2,r2,-128
 400a2c8:	103ff71e 	bne	r2,zero,400a2a8 <__alt_data_end+0xfc00a2a8>
 400a2cc:	0007883a 	mov	r3,zero
 400a2d0:	28800003 	ldbu	r2,0(r5)
 400a2d4:	1885c83a 	sub	r2,r3,r2
 400a2d8:	f800283a 	ret
 400a2dc:	28800003 	ldbu	r2,0(r5)
 400a2e0:	18c03fcc 	andi	r3,r3,255
 400a2e4:	1885c83a 	sub	r2,r3,r2
 400a2e8:	f800283a 	ret
 400a2ec:	0005883a 	mov	r2,zero
 400a2f0:	f800283a 	ret
 400a2f4:	10c03fcc 	andi	r3,r2,255
 400a2f8:	003ff506 	br	400a2d0 <__alt_data_end+0xfc00a2d0>

0400a2fc <__sprint_r.part.0>:
 400a2fc:	28801917 	ldw	r2,100(r5)
 400a300:	defff604 	addi	sp,sp,-40
 400a304:	dd400515 	stw	r21,20(sp)
 400a308:	dfc00915 	stw	ra,36(sp)
 400a30c:	df000815 	stw	fp,32(sp)
 400a310:	ddc00715 	stw	r23,28(sp)
 400a314:	dd800615 	stw	r22,24(sp)
 400a318:	dd000415 	stw	r20,16(sp)
 400a31c:	dcc00315 	stw	r19,12(sp)
 400a320:	dc800215 	stw	r18,8(sp)
 400a324:	dc400115 	stw	r17,4(sp)
 400a328:	dc000015 	stw	r16,0(sp)
 400a32c:	1088000c 	andi	r2,r2,8192
 400a330:	302b883a 	mov	r21,r6
 400a334:	10002e26 	beq	r2,zero,400a3f0 <__sprint_r.part.0+0xf4>
 400a338:	30800217 	ldw	r2,8(r6)
 400a33c:	35800017 	ldw	r22,0(r6)
 400a340:	10002926 	beq	r2,zero,400a3e8 <__sprint_r.part.0+0xec>
 400a344:	2827883a 	mov	r19,r5
 400a348:	2029883a 	mov	r20,r4
 400a34c:	b5c00104 	addi	r23,r22,4
 400a350:	04bfffc4 	movi	r18,-1
 400a354:	bc400017 	ldw	r17,0(r23)
 400a358:	b4000017 	ldw	r16,0(r22)
 400a35c:	0039883a 	mov	fp,zero
 400a360:	8822d0ba 	srli	r17,r17,2
 400a364:	8800031e 	bne	r17,zero,400a374 <__sprint_r.part.0+0x78>
 400a368:	00001806 	br	400a3cc <__sprint_r.part.0+0xd0>
 400a36c:	84000104 	addi	r16,r16,4
 400a370:	8f001526 	beq	r17,fp,400a3c8 <__sprint_r.part.0+0xcc>
 400a374:	81400017 	ldw	r5,0(r16)
 400a378:	980d883a 	mov	r6,r19
 400a37c:	a009883a 	mov	r4,r20
 400a380:	400bd240 	call	400bd24 <_fputwc_r>
 400a384:	e7000044 	addi	fp,fp,1
 400a388:	14bff81e 	bne	r2,r18,400a36c <__alt_data_end+0xfc00a36c>
 400a38c:	9005883a 	mov	r2,r18
 400a390:	a8000215 	stw	zero,8(r21)
 400a394:	a8000115 	stw	zero,4(r21)
 400a398:	dfc00917 	ldw	ra,36(sp)
 400a39c:	df000817 	ldw	fp,32(sp)
 400a3a0:	ddc00717 	ldw	r23,28(sp)
 400a3a4:	dd800617 	ldw	r22,24(sp)
 400a3a8:	dd400517 	ldw	r21,20(sp)
 400a3ac:	dd000417 	ldw	r20,16(sp)
 400a3b0:	dcc00317 	ldw	r19,12(sp)
 400a3b4:	dc800217 	ldw	r18,8(sp)
 400a3b8:	dc400117 	ldw	r17,4(sp)
 400a3bc:	dc000017 	ldw	r16,0(sp)
 400a3c0:	dec00a04 	addi	sp,sp,40
 400a3c4:	f800283a 	ret
 400a3c8:	a8800217 	ldw	r2,8(r21)
 400a3cc:	8c63883a 	add	r17,r17,r17
 400a3d0:	8c63883a 	add	r17,r17,r17
 400a3d4:	1445c83a 	sub	r2,r2,r17
 400a3d8:	a8800215 	stw	r2,8(r21)
 400a3dc:	b5800204 	addi	r22,r22,8
 400a3e0:	bdc00204 	addi	r23,r23,8
 400a3e4:	103fdb1e 	bne	r2,zero,400a354 <__alt_data_end+0xfc00a354>
 400a3e8:	0005883a 	mov	r2,zero
 400a3ec:	003fe806 	br	400a390 <__alt_data_end+0xfc00a390>
 400a3f0:	40075240 	call	4007524 <__sfvwrite_r>
 400a3f4:	003fe606 	br	400a390 <__alt_data_end+0xfc00a390>

0400a3f8 <__sprint_r>:
 400a3f8:	30c00217 	ldw	r3,8(r6)
 400a3fc:	18000126 	beq	r3,zero,400a404 <__sprint_r+0xc>
 400a400:	400a2fc1 	jmpi	400a2fc <__sprint_r.part.0>
 400a404:	30000115 	stw	zero,4(r6)
 400a408:	0005883a 	mov	r2,zero
 400a40c:	f800283a 	ret

0400a410 <___vfiprintf_internal_r>:
 400a410:	deffc904 	addi	sp,sp,-220
 400a414:	df003515 	stw	fp,212(sp)
 400a418:	dd003115 	stw	r20,196(sp)
 400a41c:	dfc03615 	stw	ra,216(sp)
 400a420:	ddc03415 	stw	r23,208(sp)
 400a424:	dd803315 	stw	r22,204(sp)
 400a428:	dd403215 	stw	r21,200(sp)
 400a42c:	dcc03015 	stw	r19,192(sp)
 400a430:	dc802f15 	stw	r18,188(sp)
 400a434:	dc402e15 	stw	r17,184(sp)
 400a438:	dc002d15 	stw	r16,180(sp)
 400a43c:	d9002015 	stw	r4,128(sp)
 400a440:	d9c02215 	stw	r7,136(sp)
 400a444:	2829883a 	mov	r20,r5
 400a448:	3039883a 	mov	fp,r6
 400a44c:	20000226 	beq	r4,zero,400a458 <___vfiprintf_internal_r+0x48>
 400a450:	20800e17 	ldw	r2,56(r4)
 400a454:	1000cf26 	beq	r2,zero,400a794 <___vfiprintf_internal_r+0x384>
 400a458:	a080030b 	ldhu	r2,12(r20)
 400a45c:	10c8000c 	andi	r3,r2,8192
 400a460:	1800061e 	bne	r3,zero,400a47c <___vfiprintf_internal_r+0x6c>
 400a464:	a1001917 	ldw	r4,100(r20)
 400a468:	00f7ffc4 	movi	r3,-8193
 400a46c:	10880014 	ori	r2,r2,8192
 400a470:	20c6703a 	and	r3,r4,r3
 400a474:	a080030d 	sth	r2,12(r20)
 400a478:	a0c01915 	stw	r3,100(r20)
 400a47c:	10c0020c 	andi	r3,r2,8
 400a480:	1800a926 	beq	r3,zero,400a728 <___vfiprintf_internal_r+0x318>
 400a484:	a0c00417 	ldw	r3,16(r20)
 400a488:	1800a726 	beq	r3,zero,400a728 <___vfiprintf_internal_r+0x318>
 400a48c:	1080068c 	andi	r2,r2,26
 400a490:	00c00284 	movi	r3,10
 400a494:	10c0ac26 	beq	r2,r3,400a748 <___vfiprintf_internal_r+0x338>
 400a498:	da801a04 	addi	r10,sp,104
 400a49c:	da801e15 	stw	r10,120(sp)
 400a4a0:	d8801e17 	ldw	r2,120(sp)
 400a4a4:	da8019c4 	addi	r10,sp,103
 400a4a8:	058100f4 	movhi	r22,1027
 400a4ac:	05c100f4 	movhi	r23,1027
 400a4b0:	da801f15 	stw	r10,124(sp)
 400a4b4:	1295c83a 	sub	r10,r2,r10
 400a4b8:	b58bcc04 	addi	r22,r22,12080
 400a4bc:	bdcbc804 	addi	r23,r23,12064
 400a4c0:	dec01a15 	stw	sp,104(sp)
 400a4c4:	d8001c15 	stw	zero,112(sp)
 400a4c8:	d8001b15 	stw	zero,108(sp)
 400a4cc:	d8002615 	stw	zero,152(sp)
 400a4d0:	d8002315 	stw	zero,140(sp)
 400a4d4:	da802715 	stw	r10,156(sp)
 400a4d8:	d811883a 	mov	r8,sp
 400a4dc:	dd002115 	stw	r20,132(sp)
 400a4e0:	e021883a 	mov	r16,fp
 400a4e4:	80800007 	ldb	r2,0(r16)
 400a4e8:	1003ea26 	beq	r2,zero,400b494 <___vfiprintf_internal_r+0x1084>
 400a4ec:	00c00944 	movi	r3,37
 400a4f0:	8025883a 	mov	r18,r16
 400a4f4:	10c0021e 	bne	r2,r3,400a500 <___vfiprintf_internal_r+0xf0>
 400a4f8:	00001606 	br	400a554 <___vfiprintf_internal_r+0x144>
 400a4fc:	10c00326 	beq	r2,r3,400a50c <___vfiprintf_internal_r+0xfc>
 400a500:	94800044 	addi	r18,r18,1
 400a504:	90800007 	ldb	r2,0(r18)
 400a508:	103ffc1e 	bne	r2,zero,400a4fc <__alt_data_end+0xfc00a4fc>
 400a50c:	9423c83a 	sub	r17,r18,r16
 400a510:	88001026 	beq	r17,zero,400a554 <___vfiprintf_internal_r+0x144>
 400a514:	d8c01c17 	ldw	r3,112(sp)
 400a518:	d8801b17 	ldw	r2,108(sp)
 400a51c:	44000015 	stw	r16,0(r8)
 400a520:	88c7883a 	add	r3,r17,r3
 400a524:	10800044 	addi	r2,r2,1
 400a528:	44400115 	stw	r17,4(r8)
 400a52c:	d8c01c15 	stw	r3,112(sp)
 400a530:	d8801b15 	stw	r2,108(sp)
 400a534:	010001c4 	movi	r4,7
 400a538:	2080760e 	bge	r4,r2,400a714 <___vfiprintf_internal_r+0x304>
 400a53c:	1803821e 	bne	r3,zero,400b348 <___vfiprintf_internal_r+0xf38>
 400a540:	da802317 	ldw	r10,140(sp)
 400a544:	d8001b15 	stw	zero,108(sp)
 400a548:	d811883a 	mov	r8,sp
 400a54c:	5455883a 	add	r10,r10,r17
 400a550:	da802315 	stw	r10,140(sp)
 400a554:	90800007 	ldb	r2,0(r18)
 400a558:	10044626 	beq	r2,zero,400b674 <___vfiprintf_internal_r+0x1264>
 400a55c:	90c00047 	ldb	r3,1(r18)
 400a560:	94000044 	addi	r16,r18,1
 400a564:	d8001d85 	stb	zero,118(sp)
 400a568:	0009883a 	mov	r4,zero
 400a56c:	000f883a 	mov	r7,zero
 400a570:	027fffc4 	movi	r9,-1
 400a574:	0023883a 	mov	r17,zero
 400a578:	0029883a 	mov	r20,zero
 400a57c:	01401604 	movi	r5,88
 400a580:	01800244 	movi	r6,9
 400a584:	03400a84 	movi	r13,42
 400a588:	03001b04 	movi	r12,108
 400a58c:	84000044 	addi	r16,r16,1
 400a590:	18bff804 	addi	r2,r3,-32
 400a594:	28827336 	bltu	r5,r2,400af64 <___vfiprintf_internal_r+0xb54>
 400a598:	100490ba 	slli	r2,r2,2
 400a59c:	02810074 	movhi	r10,1025
 400a5a0:	52a96c04 	addi	r10,r10,-23120
 400a5a4:	1285883a 	add	r2,r2,r10
 400a5a8:	10800017 	ldw	r2,0(r2)
 400a5ac:	1000683a 	jmp	r2
 400a5b0:	0400ac98 	cmpnei	r16,zero,690
 400a5b4:	0400af64 	muli	r16,zero,701
 400a5b8:	0400af64 	muli	r16,zero,701
 400a5bc:	0400acb8 	rdprs	r16,zero,690
 400a5c0:	0400af64 	muli	r16,zero,701
 400a5c4:	0400af64 	muli	r16,zero,701
 400a5c8:	0400af64 	muli	r16,zero,701
 400a5cc:	0400af64 	muli	r16,zero,701
 400a5d0:	0400af64 	muli	r16,zero,701
 400a5d4:	0400af64 	muli	r16,zero,701
 400a5d8:	0400aea0 	cmpeqi	r16,zero,698
 400a5dc:	0400aebc 	xorhi	r16,zero,698
 400a5e0:	0400af64 	muli	r16,zero,701
 400a5e4:	0400a7a4 	muli	r16,zero,670
 400a5e8:	0400aecc 	andi	r16,zero,699
 400a5ec:	0400af64 	muli	r16,zero,701
 400a5f0:	0400acc4 	movi	r16,691
 400a5f4:	0400acd0 	cmplti	r16,zero,691
 400a5f8:	0400acd0 	cmplti	r16,zero,691
 400a5fc:	0400acd0 	cmplti	r16,zero,691
 400a600:	0400acd0 	cmplti	r16,zero,691
 400a604:	0400acd0 	cmplti	r16,zero,691
 400a608:	0400acd0 	cmplti	r16,zero,691
 400a60c:	0400acd0 	cmplti	r16,zero,691
 400a610:	0400acd0 	cmplti	r16,zero,691
 400a614:	0400acd0 	cmplti	r16,zero,691
 400a618:	0400af64 	muli	r16,zero,701
 400a61c:	0400af64 	muli	r16,zero,701
 400a620:	0400af64 	muli	r16,zero,701
 400a624:	0400af64 	muli	r16,zero,701
 400a628:	0400af64 	muli	r16,zero,701
 400a62c:	0400af64 	muli	r16,zero,701
 400a630:	0400af64 	muli	r16,zero,701
 400a634:	0400af64 	muli	r16,zero,701
 400a638:	0400af64 	muli	r16,zero,701
 400a63c:	0400af64 	muli	r16,zero,701
 400a640:	0400acfc 	xorhi	r16,zero,691
 400a644:	0400af64 	muli	r16,zero,701
 400a648:	0400af64 	muli	r16,zero,701
 400a64c:	0400af64 	muli	r16,zero,701
 400a650:	0400af64 	muli	r16,zero,701
 400a654:	0400af64 	muli	r16,zero,701
 400a658:	0400af64 	muli	r16,zero,701
 400a65c:	0400af64 	muli	r16,zero,701
 400a660:	0400af64 	muli	r16,zero,701
 400a664:	0400af64 	muli	r16,zero,701
 400a668:	0400af64 	muli	r16,zero,701
 400a66c:	0400ad34 	movhi	r16,692
 400a670:	0400af64 	muli	r16,zero,701
 400a674:	0400af64 	muli	r16,zero,701
 400a678:	0400af64 	muli	r16,zero,701
 400a67c:	0400af64 	muli	r16,zero,701
 400a680:	0400af64 	muli	r16,zero,701
 400a684:	0400ad8c 	andi	r16,zero,694
 400a688:	0400af64 	muli	r16,zero,701
 400a68c:	0400af64 	muli	r16,zero,701
 400a690:	0400adfc 	xorhi	r16,zero,695
 400a694:	0400af64 	muli	r16,zero,701
 400a698:	0400af64 	muli	r16,zero,701
 400a69c:	0400af64 	muli	r16,zero,701
 400a6a0:	0400af64 	muli	r16,zero,701
 400a6a4:	0400af64 	muli	r16,zero,701
 400a6a8:	0400af64 	muli	r16,zero,701
 400a6ac:	0400af64 	muli	r16,zero,701
 400a6b0:	0400af64 	muli	r16,zero,701
 400a6b4:	0400af64 	muli	r16,zero,701
 400a6b8:	0400af64 	muli	r16,zero,701
 400a6bc:	0400aba8 	cmpgeui	r16,zero,686
 400a6c0:	0400abd4 	movui	r16,687
 400a6c4:	0400af64 	muli	r16,zero,701
 400a6c8:	0400af64 	muli	r16,zero,701
 400a6cc:	0400af64 	muli	r16,zero,701
 400a6d0:	0400af0c 	andi	r16,zero,700
 400a6d4:	0400abd4 	movui	r16,687
 400a6d8:	0400af64 	muli	r16,zero,701
 400a6dc:	0400af64 	muli	r16,zero,701
 400a6e0:	0400aa68 	cmpgeui	r16,zero,681
 400a6e4:	0400af64 	muli	r16,zero,701
 400a6e8:	0400aa78 	rdprs	r16,zero,681
 400a6ec:	0400aab4 	movhi	r16,682
 400a6f0:	0400a7b0 	cmpltui	r16,zero,670
 400a6f4:	0400aa5c 	xori	r16,zero,681
 400a6f8:	0400af64 	muli	r16,zero,701
 400a6fc:	0400ae38 	rdprs	r16,zero,696
 400a700:	0400af64 	muli	r16,zero,701
 400a704:	0400ae90 	cmplti	r16,zero,698
 400a708:	0400af64 	muli	r16,zero,701
 400a70c:	0400af64 	muli	r16,zero,701
 400a710:	0400ab54 	movui	r16,685
 400a714:	42000204 	addi	r8,r8,8
 400a718:	da802317 	ldw	r10,140(sp)
 400a71c:	5455883a 	add	r10,r10,r17
 400a720:	da802315 	stw	r10,140(sp)
 400a724:	003f8b06 	br	400a554 <__alt_data_end+0xfc00a554>
 400a728:	d9002017 	ldw	r4,128(sp)
 400a72c:	a00b883a 	mov	r5,r20
 400a730:	40050cc0 	call	40050cc <__swsetup_r>
 400a734:	1003b11e 	bne	r2,zero,400b5fc <___vfiprintf_internal_r+0x11ec>
 400a738:	a080030b 	ldhu	r2,12(r20)
 400a73c:	00c00284 	movi	r3,10
 400a740:	1080068c 	andi	r2,r2,26
 400a744:	10ff541e 	bne	r2,r3,400a498 <__alt_data_end+0xfc00a498>
 400a748:	a080038f 	ldh	r2,14(r20)
 400a74c:	103f5216 	blt	r2,zero,400a498 <__alt_data_end+0xfc00a498>
 400a750:	d9c02217 	ldw	r7,136(sp)
 400a754:	d9002017 	ldw	r4,128(sp)
 400a758:	e00d883a 	mov	r6,fp
 400a75c:	a00b883a 	mov	r5,r20
 400a760:	400b8880 	call	400b888 <__sbprintf>
 400a764:	dfc03617 	ldw	ra,216(sp)
 400a768:	df003517 	ldw	fp,212(sp)
 400a76c:	ddc03417 	ldw	r23,208(sp)
 400a770:	dd803317 	ldw	r22,204(sp)
 400a774:	dd403217 	ldw	r21,200(sp)
 400a778:	dd003117 	ldw	r20,196(sp)
 400a77c:	dcc03017 	ldw	r19,192(sp)
 400a780:	dc802f17 	ldw	r18,188(sp)
 400a784:	dc402e17 	ldw	r17,184(sp)
 400a788:	dc002d17 	ldw	r16,180(sp)
 400a78c:	dec03704 	addi	sp,sp,220
 400a790:	f800283a 	ret
 400a794:	40070a00 	call	40070a0 <__sinit>
 400a798:	003f2f06 	br	400a458 <__alt_data_end+0xfc00a458>
 400a79c:	0463c83a 	sub	r17,zero,r17
 400a7a0:	d8802215 	stw	r2,136(sp)
 400a7a4:	a5000114 	ori	r20,r20,4
 400a7a8:	80c00007 	ldb	r3,0(r16)
 400a7ac:	003f7706 	br	400a58c <__alt_data_end+0xfc00a58c>
 400a7b0:	00800c04 	movi	r2,48
 400a7b4:	da802217 	ldw	r10,136(sp)
 400a7b8:	d8801d05 	stb	r2,116(sp)
 400a7bc:	00801e04 	movi	r2,120
 400a7c0:	d8801d45 	stb	r2,117(sp)
 400a7c4:	d8001d85 	stb	zero,118(sp)
 400a7c8:	50c00104 	addi	r3,r10,4
 400a7cc:	54800017 	ldw	r18,0(r10)
 400a7d0:	0027883a 	mov	r19,zero
 400a7d4:	a0800094 	ori	r2,r20,2
 400a7d8:	48030b16 	blt	r9,zero,400b408 <___vfiprintf_internal_r+0xff8>
 400a7dc:	00bfdfc4 	movi	r2,-129
 400a7e0:	a096703a 	and	r11,r20,r2
 400a7e4:	d8c02215 	stw	r3,136(sp)
 400a7e8:	5d000094 	ori	r20,r11,2
 400a7ec:	90032b1e 	bne	r18,zero,400b49c <___vfiprintf_internal_r+0x108c>
 400a7f0:	008100f4 	movhi	r2,1027
 400a7f4:	108b6704 	addi	r2,r2,11676
 400a7f8:	d8802615 	stw	r2,152(sp)
 400a7fc:	0039883a 	mov	fp,zero
 400a800:	48017b1e 	bne	r9,zero,400adf0 <___vfiprintf_internal_r+0x9e0>
 400a804:	0013883a 	mov	r9,zero
 400a808:	0027883a 	mov	r19,zero
 400a80c:	dd401a04 	addi	r21,sp,104
 400a810:	4825883a 	mov	r18,r9
 400a814:	4cc0010e 	bge	r9,r19,400a81c <___vfiprintf_internal_r+0x40c>
 400a818:	9825883a 	mov	r18,r19
 400a81c:	e7003fcc 	andi	fp,fp,255
 400a820:	e700201c 	xori	fp,fp,128
 400a824:	e73fe004 	addi	fp,fp,-128
 400a828:	e0000126 	beq	fp,zero,400a830 <___vfiprintf_internal_r+0x420>
 400a82c:	94800044 	addi	r18,r18,1
 400a830:	a380008c 	andi	r14,r20,2
 400a834:	70000126 	beq	r14,zero,400a83c <___vfiprintf_internal_r+0x42c>
 400a838:	94800084 	addi	r18,r18,2
 400a83c:	a700210c 	andi	fp,r20,132
 400a840:	e001df1e 	bne	fp,zero,400afc0 <___vfiprintf_internal_r+0xbb0>
 400a844:	8c87c83a 	sub	r3,r17,r18
 400a848:	00c1dd0e 	bge	zero,r3,400afc0 <___vfiprintf_internal_r+0xbb0>
 400a84c:	01c00404 	movi	r7,16
 400a850:	d8801c17 	ldw	r2,112(sp)
 400a854:	38c3ad0e 	bge	r7,r3,400b70c <___vfiprintf_internal_r+0x12fc>
 400a858:	028100f4 	movhi	r10,1027
 400a85c:	528bcc04 	addi	r10,r10,12080
 400a860:	dc002915 	stw	r16,164(sp)
 400a864:	d9801b17 	ldw	r6,108(sp)
 400a868:	da802415 	stw	r10,144(sp)
 400a86c:	03c001c4 	movi	r15,7
 400a870:	da402515 	stw	r9,148(sp)
 400a874:	db802815 	stw	r14,160(sp)
 400a878:	1821883a 	mov	r16,r3
 400a87c:	00000506 	br	400a894 <___vfiprintf_internal_r+0x484>
 400a880:	31400084 	addi	r5,r6,2
 400a884:	42000204 	addi	r8,r8,8
 400a888:	200d883a 	mov	r6,r4
 400a88c:	843ffc04 	addi	r16,r16,-16
 400a890:	3c000d0e 	bge	r7,r16,400a8c8 <___vfiprintf_internal_r+0x4b8>
 400a894:	10800404 	addi	r2,r2,16
 400a898:	31000044 	addi	r4,r6,1
 400a89c:	45800015 	stw	r22,0(r8)
 400a8a0:	41c00115 	stw	r7,4(r8)
 400a8a4:	d8801c15 	stw	r2,112(sp)
 400a8a8:	d9001b15 	stw	r4,108(sp)
 400a8ac:	793ff40e 	bge	r15,r4,400a880 <__alt_data_end+0xfc00a880>
 400a8b0:	1001b51e 	bne	r2,zero,400af88 <___vfiprintf_internal_r+0xb78>
 400a8b4:	843ffc04 	addi	r16,r16,-16
 400a8b8:	000d883a 	mov	r6,zero
 400a8bc:	01400044 	movi	r5,1
 400a8c0:	d811883a 	mov	r8,sp
 400a8c4:	3c3ff316 	blt	r7,r16,400a894 <__alt_data_end+0xfc00a894>
 400a8c8:	8007883a 	mov	r3,r16
 400a8cc:	da402517 	ldw	r9,148(sp)
 400a8d0:	db802817 	ldw	r14,160(sp)
 400a8d4:	dc002917 	ldw	r16,164(sp)
 400a8d8:	da802417 	ldw	r10,144(sp)
 400a8dc:	1885883a 	add	r2,r3,r2
 400a8e0:	40c00115 	stw	r3,4(r8)
 400a8e4:	42800015 	stw	r10,0(r8)
 400a8e8:	d8801c15 	stw	r2,112(sp)
 400a8ec:	d9401b15 	stw	r5,108(sp)
 400a8f0:	00c001c4 	movi	r3,7
 400a8f4:	19426016 	blt	r3,r5,400b278 <___vfiprintf_internal_r+0xe68>
 400a8f8:	d8c01d87 	ldb	r3,118(sp)
 400a8fc:	42000204 	addi	r8,r8,8
 400a900:	29000044 	addi	r4,r5,1
 400a904:	1801b31e 	bne	r3,zero,400afd4 <___vfiprintf_internal_r+0xbc4>
 400a908:	7001c026 	beq	r14,zero,400b00c <___vfiprintf_internal_r+0xbfc>
 400a90c:	d8c01d04 	addi	r3,sp,116
 400a910:	10800084 	addi	r2,r2,2
 400a914:	40c00015 	stw	r3,0(r8)
 400a918:	00c00084 	movi	r3,2
 400a91c:	40c00115 	stw	r3,4(r8)
 400a920:	d8801c15 	stw	r2,112(sp)
 400a924:	d9001b15 	stw	r4,108(sp)
 400a928:	00c001c4 	movi	r3,7
 400a92c:	1902650e 	bge	r3,r4,400b2c4 <___vfiprintf_internal_r+0xeb4>
 400a930:	10029a1e 	bne	r2,zero,400b39c <___vfiprintf_internal_r+0xf8c>
 400a934:	00c02004 	movi	r3,128
 400a938:	01000044 	movi	r4,1
 400a93c:	000b883a 	mov	r5,zero
 400a940:	d811883a 	mov	r8,sp
 400a944:	e0c1b31e 	bne	fp,r3,400b014 <___vfiprintf_internal_r+0xc04>
 400a948:	8cb9c83a 	sub	fp,r17,r18
 400a94c:	0701b10e 	bge	zero,fp,400b014 <___vfiprintf_internal_r+0xc04>
 400a950:	01c00404 	movi	r7,16
 400a954:	3f03890e 	bge	r7,fp,400b77c <___vfiprintf_internal_r+0x136c>
 400a958:	00c100f4 	movhi	r3,1027
 400a95c:	18cbc804 	addi	r3,r3,12064
 400a960:	d8c02415 	stw	r3,144(sp)
 400a964:	8007883a 	mov	r3,r16
 400a968:	034001c4 	movi	r13,7
 400a96c:	e021883a 	mov	r16,fp
 400a970:	da402515 	stw	r9,148(sp)
 400a974:	1839883a 	mov	fp,r3
 400a978:	00000506 	br	400a990 <___vfiprintf_internal_r+0x580>
 400a97c:	29800084 	addi	r6,r5,2
 400a980:	42000204 	addi	r8,r8,8
 400a984:	180b883a 	mov	r5,r3
 400a988:	843ffc04 	addi	r16,r16,-16
 400a98c:	3c000d0e 	bge	r7,r16,400a9c4 <___vfiprintf_internal_r+0x5b4>
 400a990:	10800404 	addi	r2,r2,16
 400a994:	28c00044 	addi	r3,r5,1
 400a998:	45c00015 	stw	r23,0(r8)
 400a99c:	41c00115 	stw	r7,4(r8)
 400a9a0:	d8801c15 	stw	r2,112(sp)
 400a9a4:	d8c01b15 	stw	r3,108(sp)
 400a9a8:	68fff40e 	bge	r13,r3,400a97c <__alt_data_end+0xfc00a97c>
 400a9ac:	1002241e 	bne	r2,zero,400b240 <___vfiprintf_internal_r+0xe30>
 400a9b0:	843ffc04 	addi	r16,r16,-16
 400a9b4:	01800044 	movi	r6,1
 400a9b8:	000b883a 	mov	r5,zero
 400a9bc:	d811883a 	mov	r8,sp
 400a9c0:	3c3ff316 	blt	r7,r16,400a990 <__alt_data_end+0xfc00a990>
 400a9c4:	da402517 	ldw	r9,148(sp)
 400a9c8:	e007883a 	mov	r3,fp
 400a9cc:	8039883a 	mov	fp,r16
 400a9d0:	1821883a 	mov	r16,r3
 400a9d4:	d8c02417 	ldw	r3,144(sp)
 400a9d8:	1705883a 	add	r2,r2,fp
 400a9dc:	47000115 	stw	fp,4(r8)
 400a9e0:	40c00015 	stw	r3,0(r8)
 400a9e4:	d8801c15 	stw	r2,112(sp)
 400a9e8:	d9801b15 	stw	r6,108(sp)
 400a9ec:	00c001c4 	movi	r3,7
 400a9f0:	19827616 	blt	r3,r6,400b3cc <___vfiprintf_internal_r+0xfbc>
 400a9f4:	4cf9c83a 	sub	fp,r9,r19
 400a9f8:	42000204 	addi	r8,r8,8
 400a9fc:	31000044 	addi	r4,r6,1
 400aa00:	300b883a 	mov	r5,r6
 400aa04:	07018516 	blt	zero,fp,400b01c <___vfiprintf_internal_r+0xc0c>
 400aa08:	9885883a 	add	r2,r19,r2
 400aa0c:	45400015 	stw	r21,0(r8)
 400aa10:	44c00115 	stw	r19,4(r8)
 400aa14:	d8801c15 	stw	r2,112(sp)
 400aa18:	d9001b15 	stw	r4,108(sp)
 400aa1c:	00c001c4 	movi	r3,7
 400aa20:	1901dd0e 	bge	r3,r4,400b198 <___vfiprintf_internal_r+0xd88>
 400aa24:	1002401e 	bne	r2,zero,400b328 <___vfiprintf_internal_r+0xf18>
 400aa28:	d8001b15 	stw	zero,108(sp)
 400aa2c:	a2c0010c 	andi	r11,r20,4
 400aa30:	58000226 	beq	r11,zero,400aa3c <___vfiprintf_internal_r+0x62c>
 400aa34:	8ca7c83a 	sub	r19,r17,r18
 400aa38:	04c2f216 	blt	zero,r19,400b604 <___vfiprintf_internal_r+0x11f4>
 400aa3c:	8c80010e 	bge	r17,r18,400aa44 <___vfiprintf_internal_r+0x634>
 400aa40:	9023883a 	mov	r17,r18
 400aa44:	da802317 	ldw	r10,140(sp)
 400aa48:	5455883a 	add	r10,r10,r17
 400aa4c:	da802315 	stw	r10,140(sp)
 400aa50:	d8001b15 	stw	zero,108(sp)
 400aa54:	d811883a 	mov	r8,sp
 400aa58:	003ea206 	br	400a4e4 <__alt_data_end+0xfc00a4e4>
 400aa5c:	a5000814 	ori	r20,r20,32
 400aa60:	80c00007 	ldb	r3,0(r16)
 400aa64:	003ec906 	br	400a58c <__alt_data_end+0xfc00a58c>
 400aa68:	80c00007 	ldb	r3,0(r16)
 400aa6c:	1b030926 	beq	r3,r12,400b694 <___vfiprintf_internal_r+0x1284>
 400aa70:	a5000414 	ori	r20,r20,16
 400aa74:	003ec506 	br	400a58c <__alt_data_end+0xfc00a58c>
 400aa78:	21003fcc 	andi	r4,r4,255
 400aa7c:	20035e1e 	bne	r4,zero,400b7f8 <___vfiprintf_internal_r+0x13e8>
 400aa80:	a080080c 	andi	r2,r20,32
 400aa84:	1002a526 	beq	r2,zero,400b51c <___vfiprintf_internal_r+0x110c>
 400aa88:	da802217 	ldw	r10,136(sp)
 400aa8c:	50800017 	ldw	r2,0(r10)
 400aa90:	da802317 	ldw	r10,140(sp)
 400aa94:	5007d7fa 	srai	r3,r10,31
 400aa98:	da802217 	ldw	r10,136(sp)
 400aa9c:	10c00115 	stw	r3,4(r2)
 400aaa0:	52800104 	addi	r10,r10,4
 400aaa4:	da802215 	stw	r10,136(sp)
 400aaa8:	da802317 	ldw	r10,140(sp)
 400aaac:	12800015 	stw	r10,0(r2)
 400aab0:	003e8c06 	br	400a4e4 <__alt_data_end+0xfc00a4e4>
 400aab4:	21003fcc 	andi	r4,r4,255
 400aab8:	2003511e 	bne	r4,zero,400b800 <___vfiprintf_internal_r+0x13f0>
 400aabc:	a080080c 	andi	r2,r20,32
 400aac0:	1000a126 	beq	r2,zero,400ad48 <___vfiprintf_internal_r+0x938>
 400aac4:	da802217 	ldw	r10,136(sp)
 400aac8:	d8001d85 	stb	zero,118(sp)
 400aacc:	50800204 	addi	r2,r10,8
 400aad0:	54800017 	ldw	r18,0(r10)
 400aad4:	54c00117 	ldw	r19,4(r10)
 400aad8:	4802b416 	blt	r9,zero,400b5ac <___vfiprintf_internal_r+0x119c>
 400aadc:	013fdfc4 	movi	r4,-129
 400aae0:	94c6b03a 	or	r3,r18,r19
 400aae4:	d8802215 	stw	r2,136(sp)
 400aae8:	a128703a 	and	r20,r20,r4
 400aaec:	1800a226 	beq	r3,zero,400ad78 <___vfiprintf_internal_r+0x968>
 400aaf0:	0039883a 	mov	fp,zero
 400aaf4:	dd401a04 	addi	r21,sp,104
 400aaf8:	9006d0fa 	srli	r3,r18,3
 400aafc:	9808977a 	slli	r4,r19,29
 400ab00:	9826d0fa 	srli	r19,r19,3
 400ab04:	948001cc 	andi	r18,r18,7
 400ab08:	90800c04 	addi	r2,r18,48
 400ab0c:	ad7fffc4 	addi	r21,r21,-1
 400ab10:	20e4b03a 	or	r18,r4,r3
 400ab14:	a8800005 	stb	r2,0(r21)
 400ab18:	94c6b03a 	or	r3,r18,r19
 400ab1c:	183ff61e 	bne	r3,zero,400aaf8 <__alt_data_end+0xfc00aaf8>
 400ab20:	a0c0004c 	andi	r3,r20,1
 400ab24:	18005926 	beq	r3,zero,400ac8c <___vfiprintf_internal_r+0x87c>
 400ab28:	10803fcc 	andi	r2,r2,255
 400ab2c:	1080201c 	xori	r2,r2,128
 400ab30:	10bfe004 	addi	r2,r2,-128
 400ab34:	00c00c04 	movi	r3,48
 400ab38:	10c05426 	beq	r2,r3,400ac8c <___vfiprintf_internal_r+0x87c>
 400ab3c:	da801e17 	ldw	r10,120(sp)
 400ab40:	a8bfffc4 	addi	r2,r21,-1
 400ab44:	a8ffffc5 	stb	r3,-1(r21)
 400ab48:	50a7c83a 	sub	r19,r10,r2
 400ab4c:	102b883a 	mov	r21,r2
 400ab50:	003f2f06 	br	400a810 <__alt_data_end+0xfc00a810>
 400ab54:	21003fcc 	andi	r4,r4,255
 400ab58:	2003421e 	bne	r4,zero,400b864 <___vfiprintf_internal_r+0x1454>
 400ab5c:	008100f4 	movhi	r2,1027
 400ab60:	108b6704 	addi	r2,r2,11676
 400ab64:	d8802615 	stw	r2,152(sp)
 400ab68:	a080080c 	andi	r2,r20,32
 400ab6c:	1000aa26 	beq	r2,zero,400ae18 <___vfiprintf_internal_r+0xa08>
 400ab70:	da802217 	ldw	r10,136(sp)
 400ab74:	54800017 	ldw	r18,0(r10)
 400ab78:	54c00117 	ldw	r19,4(r10)
 400ab7c:	52800204 	addi	r10,r10,8
 400ab80:	da802215 	stw	r10,136(sp)
 400ab84:	a080004c 	andi	r2,r20,1
 400ab88:	1001d226 	beq	r2,zero,400b2d4 <___vfiprintf_internal_r+0xec4>
 400ab8c:	94c4b03a 	or	r2,r18,r19
 400ab90:	1002351e 	bne	r2,zero,400b468 <___vfiprintf_internal_r+0x1058>
 400ab94:	d8001d85 	stb	zero,118(sp)
 400ab98:	48022216 	blt	r9,zero,400b424 <___vfiprintf_internal_r+0x1014>
 400ab9c:	00bfdfc4 	movi	r2,-129
 400aba0:	a0a8703a 	and	r20,r20,r2
 400aba4:	003f1506 	br	400a7fc <__alt_data_end+0xfc00a7fc>
 400aba8:	da802217 	ldw	r10,136(sp)
 400abac:	04800044 	movi	r18,1
 400abb0:	d8001d85 	stb	zero,118(sp)
 400abb4:	50800017 	ldw	r2,0(r10)
 400abb8:	52800104 	addi	r10,r10,4
 400abbc:	da802215 	stw	r10,136(sp)
 400abc0:	d8801005 	stb	r2,64(sp)
 400abc4:	9027883a 	mov	r19,r18
 400abc8:	dd401004 	addi	r21,sp,64
 400abcc:	0013883a 	mov	r9,zero
 400abd0:	003f1706 	br	400a830 <__alt_data_end+0xfc00a830>
 400abd4:	21003fcc 	andi	r4,r4,255
 400abd8:	2003201e 	bne	r4,zero,400b85c <___vfiprintf_internal_r+0x144c>
 400abdc:	a080080c 	andi	r2,r20,32
 400abe0:	10004b26 	beq	r2,zero,400ad10 <___vfiprintf_internal_r+0x900>
 400abe4:	da802217 	ldw	r10,136(sp)
 400abe8:	50800117 	ldw	r2,4(r10)
 400abec:	54800017 	ldw	r18,0(r10)
 400abf0:	52800204 	addi	r10,r10,8
 400abf4:	da802215 	stw	r10,136(sp)
 400abf8:	1027883a 	mov	r19,r2
 400abfc:	10022c16 	blt	r2,zero,400b4b0 <___vfiprintf_internal_r+0x10a0>
 400ac00:	df001d83 	ldbu	fp,118(sp)
 400ac04:	48007216 	blt	r9,zero,400add0 <___vfiprintf_internal_r+0x9c0>
 400ac08:	00ffdfc4 	movi	r3,-129
 400ac0c:	94c4b03a 	or	r2,r18,r19
 400ac10:	a0e8703a 	and	r20,r20,r3
 400ac14:	1000cc26 	beq	r2,zero,400af48 <___vfiprintf_internal_r+0xb38>
 400ac18:	98021026 	beq	r19,zero,400b45c <___vfiprintf_internal_r+0x104c>
 400ac1c:	dc402415 	stw	r17,144(sp)
 400ac20:	dc002515 	stw	r16,148(sp)
 400ac24:	9823883a 	mov	r17,r19
 400ac28:	9021883a 	mov	r16,r18
 400ac2c:	dd401a04 	addi	r21,sp,104
 400ac30:	4825883a 	mov	r18,r9
 400ac34:	4027883a 	mov	r19,r8
 400ac38:	8009883a 	mov	r4,r16
 400ac3c:	880b883a 	mov	r5,r17
 400ac40:	01800284 	movi	r6,10
 400ac44:	000f883a 	mov	r7,zero
 400ac48:	400c7f00 	call	400c7f0 <__umoddi3>
 400ac4c:	10800c04 	addi	r2,r2,48
 400ac50:	ad7fffc4 	addi	r21,r21,-1
 400ac54:	8009883a 	mov	r4,r16
 400ac58:	880b883a 	mov	r5,r17
 400ac5c:	a8800005 	stb	r2,0(r21)
 400ac60:	01800284 	movi	r6,10
 400ac64:	000f883a 	mov	r7,zero
 400ac68:	400c2780 	call	400c278 <__udivdi3>
 400ac6c:	1021883a 	mov	r16,r2
 400ac70:	10c4b03a 	or	r2,r2,r3
 400ac74:	1823883a 	mov	r17,r3
 400ac78:	103fef1e 	bne	r2,zero,400ac38 <__alt_data_end+0xfc00ac38>
 400ac7c:	dc402417 	ldw	r17,144(sp)
 400ac80:	dc002517 	ldw	r16,148(sp)
 400ac84:	9013883a 	mov	r9,r18
 400ac88:	9811883a 	mov	r8,r19
 400ac8c:	da801e17 	ldw	r10,120(sp)
 400ac90:	5567c83a 	sub	r19,r10,r21
 400ac94:	003ede06 	br	400a810 <__alt_data_end+0xfc00a810>
 400ac98:	38803fcc 	andi	r2,r7,255
 400ac9c:	1080201c 	xori	r2,r2,128
 400aca0:	10bfe004 	addi	r2,r2,-128
 400aca4:	1002371e 	bne	r2,zero,400b584 <___vfiprintf_internal_r+0x1174>
 400aca8:	01000044 	movi	r4,1
 400acac:	01c00804 	movi	r7,32
 400acb0:	80c00007 	ldb	r3,0(r16)
 400acb4:	003e3506 	br	400a58c <__alt_data_end+0xfc00a58c>
 400acb8:	a5000054 	ori	r20,r20,1
 400acbc:	80c00007 	ldb	r3,0(r16)
 400acc0:	003e3206 	br	400a58c <__alt_data_end+0xfc00a58c>
 400acc4:	a5002014 	ori	r20,r20,128
 400acc8:	80c00007 	ldb	r3,0(r16)
 400accc:	003e2f06 	br	400a58c <__alt_data_end+0xfc00a58c>
 400acd0:	8015883a 	mov	r10,r16
 400acd4:	0023883a 	mov	r17,zero
 400acd8:	18bff404 	addi	r2,r3,-48
 400acdc:	50c00007 	ldb	r3,0(r10)
 400ace0:	8c4002a4 	muli	r17,r17,10
 400ace4:	84000044 	addi	r16,r16,1
 400ace8:	8015883a 	mov	r10,r16
 400acec:	1463883a 	add	r17,r2,r17
 400acf0:	18bff404 	addi	r2,r3,-48
 400acf4:	30bff92e 	bgeu	r6,r2,400acdc <__alt_data_end+0xfc00acdc>
 400acf8:	003e2506 	br	400a590 <__alt_data_end+0xfc00a590>
 400acfc:	21003fcc 	andi	r4,r4,255
 400ad00:	2002d41e 	bne	r4,zero,400b854 <___vfiprintf_internal_r+0x1444>
 400ad04:	a5000414 	ori	r20,r20,16
 400ad08:	a080080c 	andi	r2,r20,32
 400ad0c:	103fb51e 	bne	r2,zero,400abe4 <__alt_data_end+0xfc00abe4>
 400ad10:	a080040c 	andi	r2,r20,16
 400ad14:	1001f826 	beq	r2,zero,400b4f8 <___vfiprintf_internal_r+0x10e8>
 400ad18:	da802217 	ldw	r10,136(sp)
 400ad1c:	54800017 	ldw	r18,0(r10)
 400ad20:	52800104 	addi	r10,r10,4
 400ad24:	da802215 	stw	r10,136(sp)
 400ad28:	9027d7fa 	srai	r19,r18,31
 400ad2c:	9805883a 	mov	r2,r19
 400ad30:	003fb206 	br	400abfc <__alt_data_end+0xfc00abfc>
 400ad34:	21003fcc 	andi	r4,r4,255
 400ad38:	2002c41e 	bne	r4,zero,400b84c <___vfiprintf_internal_r+0x143c>
 400ad3c:	a5000414 	ori	r20,r20,16
 400ad40:	a080080c 	andi	r2,r20,32
 400ad44:	103f5f1e 	bne	r2,zero,400aac4 <__alt_data_end+0xfc00aac4>
 400ad48:	a080040c 	andi	r2,r20,16
 400ad4c:	10020f26 	beq	r2,zero,400b58c <___vfiprintf_internal_r+0x117c>
 400ad50:	da802217 	ldw	r10,136(sp)
 400ad54:	d8001d85 	stb	zero,118(sp)
 400ad58:	0027883a 	mov	r19,zero
 400ad5c:	50800104 	addi	r2,r10,4
 400ad60:	54800017 	ldw	r18,0(r10)
 400ad64:	48021116 	blt	r9,zero,400b5ac <___vfiprintf_internal_r+0x119c>
 400ad68:	00ffdfc4 	movi	r3,-129
 400ad6c:	d8802215 	stw	r2,136(sp)
 400ad70:	a0e8703a 	and	r20,r20,r3
 400ad74:	903f5e1e 	bne	r18,zero,400aaf0 <__alt_data_end+0xfc00aaf0>
 400ad78:	0039883a 	mov	fp,zero
 400ad7c:	4802a626 	beq	r9,zero,400b818 <___vfiprintf_internal_r+0x1408>
 400ad80:	0025883a 	mov	r18,zero
 400ad84:	0027883a 	mov	r19,zero
 400ad88:	003f5a06 	br	400aaf4 <__alt_data_end+0xfc00aaf4>
 400ad8c:	21003fcc 	andi	r4,r4,255
 400ad90:	20029f1e 	bne	r4,zero,400b810 <___vfiprintf_internal_r+0x1400>
 400ad94:	a5000414 	ori	r20,r20,16
 400ad98:	a080080c 	andi	r2,r20,32
 400ad9c:	10005e1e 	bne	r2,zero,400af18 <___vfiprintf_internal_r+0xb08>
 400ada0:	a080040c 	andi	r2,r20,16
 400ada4:	1001a21e 	bne	r2,zero,400b430 <___vfiprintf_internal_r+0x1020>
 400ada8:	a080100c 	andi	r2,r20,64
 400adac:	d8001d85 	stb	zero,118(sp)
 400adb0:	da802217 	ldw	r10,136(sp)
 400adb4:	1002231e 	bne	r2,zero,400b644 <___vfiprintf_internal_r+0x1234>
 400adb8:	50800104 	addi	r2,r10,4
 400adbc:	54800017 	ldw	r18,0(r10)
 400adc0:	0027883a 	mov	r19,zero
 400adc4:	4801a00e 	bge	r9,zero,400b448 <___vfiprintf_internal_r+0x1038>
 400adc8:	d8802215 	stw	r2,136(sp)
 400adcc:	0039883a 	mov	fp,zero
 400add0:	94c4b03a 	or	r2,r18,r19
 400add4:	103f901e 	bne	r2,zero,400ac18 <__alt_data_end+0xfc00ac18>
 400add8:	00800044 	movi	r2,1
 400addc:	10803fcc 	andi	r2,r2,255
 400ade0:	00c00044 	movi	r3,1
 400ade4:	10c05926 	beq	r2,r3,400af4c <___vfiprintf_internal_r+0xb3c>
 400ade8:	00c00084 	movi	r3,2
 400adec:	10ffe41e 	bne	r2,r3,400ad80 <__alt_data_end+0xfc00ad80>
 400adf0:	0025883a 	mov	r18,zero
 400adf4:	0027883a 	mov	r19,zero
 400adf8:	00013d06 	br	400b2f0 <___vfiprintf_internal_r+0xee0>
 400adfc:	21003fcc 	andi	r4,r4,255
 400ae00:	2002811e 	bne	r4,zero,400b808 <___vfiprintf_internal_r+0x13f8>
 400ae04:	008100f4 	movhi	r2,1027
 400ae08:	108b6204 	addi	r2,r2,11656
 400ae0c:	d8802615 	stw	r2,152(sp)
 400ae10:	a080080c 	andi	r2,r20,32
 400ae14:	103f561e 	bne	r2,zero,400ab70 <__alt_data_end+0xfc00ab70>
 400ae18:	a080040c 	andi	r2,r20,16
 400ae1c:	1001d126 	beq	r2,zero,400b564 <___vfiprintf_internal_r+0x1154>
 400ae20:	da802217 	ldw	r10,136(sp)
 400ae24:	0027883a 	mov	r19,zero
 400ae28:	54800017 	ldw	r18,0(r10)
 400ae2c:	52800104 	addi	r10,r10,4
 400ae30:	da802215 	stw	r10,136(sp)
 400ae34:	003f5306 	br	400ab84 <__alt_data_end+0xfc00ab84>
 400ae38:	da802217 	ldw	r10,136(sp)
 400ae3c:	d8001d85 	stb	zero,118(sp)
 400ae40:	55400017 	ldw	r21,0(r10)
 400ae44:	50c00104 	addi	r3,r10,4
 400ae48:	a8024226 	beq	r21,zero,400b754 <___vfiprintf_internal_r+0x1344>
 400ae4c:	48021816 	blt	r9,zero,400b6b0 <___vfiprintf_internal_r+0x12a0>
 400ae50:	480d883a 	mov	r6,r9
 400ae54:	000b883a 	mov	r5,zero
 400ae58:	a809883a 	mov	r4,r21
 400ae5c:	d8c02a15 	stw	r3,168(sp)
 400ae60:	da002b15 	stw	r8,172(sp)
 400ae64:	da402c15 	stw	r9,176(sp)
 400ae68:	400860c0 	call	400860c <memchr>
 400ae6c:	d8c02a17 	ldw	r3,168(sp)
 400ae70:	da002b17 	ldw	r8,172(sp)
 400ae74:	da402c17 	ldw	r9,176(sp)
 400ae78:	10024826 	beq	r2,zero,400b79c <___vfiprintf_internal_r+0x138c>
 400ae7c:	1567c83a 	sub	r19,r2,r21
 400ae80:	df001d83 	ldbu	fp,118(sp)
 400ae84:	d8c02215 	stw	r3,136(sp)
 400ae88:	0013883a 	mov	r9,zero
 400ae8c:	003e6006 	br	400a810 <__alt_data_end+0xfc00a810>
 400ae90:	21003fcc 	andi	r4,r4,255
 400ae94:	203fc026 	beq	r4,zero,400ad98 <__alt_data_end+0xfc00ad98>
 400ae98:	d9c01d85 	stb	r7,118(sp)
 400ae9c:	003fbe06 	br	400ad98 <__alt_data_end+0xfc00ad98>
 400aea0:	da802217 	ldw	r10,136(sp)
 400aea4:	54400017 	ldw	r17,0(r10)
 400aea8:	50800104 	addi	r2,r10,4
 400aeac:	883e3b16 	blt	r17,zero,400a79c <__alt_data_end+0xfc00a79c>
 400aeb0:	d8802215 	stw	r2,136(sp)
 400aeb4:	80c00007 	ldb	r3,0(r16)
 400aeb8:	003db406 	br	400a58c <__alt_data_end+0xfc00a58c>
 400aebc:	01000044 	movi	r4,1
 400aec0:	01c00ac4 	movi	r7,43
 400aec4:	80c00007 	ldb	r3,0(r16)
 400aec8:	003db006 	br	400a58c <__alt_data_end+0xfc00a58c>
 400aecc:	80c00007 	ldb	r3,0(r16)
 400aed0:	82800044 	addi	r10,r16,1
 400aed4:	1b423c26 	beq	r3,r13,400b7c8 <___vfiprintf_internal_r+0x13b8>
 400aed8:	18bff404 	addi	r2,r3,-48
 400aedc:	0013883a 	mov	r9,zero
 400aee0:	30822b36 	bltu	r6,r2,400b790 <___vfiprintf_internal_r+0x1380>
 400aee4:	50c00007 	ldb	r3,0(r10)
 400aee8:	4a4002a4 	muli	r9,r9,10
 400aeec:	54000044 	addi	r16,r10,1
 400aef0:	8015883a 	mov	r10,r16
 400aef4:	4893883a 	add	r9,r9,r2
 400aef8:	18bff404 	addi	r2,r3,-48
 400aefc:	30bff92e 	bgeu	r6,r2,400aee4 <__alt_data_end+0xfc00aee4>
 400af00:	483da30e 	bge	r9,zero,400a590 <__alt_data_end+0xfc00a590>
 400af04:	027fffc4 	movi	r9,-1
 400af08:	003da106 	br	400a590 <__alt_data_end+0xfc00a590>
 400af0c:	a5001014 	ori	r20,r20,64
 400af10:	80c00007 	ldb	r3,0(r16)
 400af14:	003d9d06 	br	400a58c <__alt_data_end+0xfc00a58c>
 400af18:	da802217 	ldw	r10,136(sp)
 400af1c:	d8001d85 	stb	zero,118(sp)
 400af20:	50c00204 	addi	r3,r10,8
 400af24:	54800017 	ldw	r18,0(r10)
 400af28:	54c00117 	ldw	r19,4(r10)
 400af2c:	4801ca16 	blt	r9,zero,400b658 <___vfiprintf_internal_r+0x1248>
 400af30:	013fdfc4 	movi	r4,-129
 400af34:	94c4b03a 	or	r2,r18,r19
 400af38:	d8c02215 	stw	r3,136(sp)
 400af3c:	a128703a 	and	r20,r20,r4
 400af40:	0039883a 	mov	fp,zero
 400af44:	103f341e 	bne	r2,zero,400ac18 <__alt_data_end+0xfc00ac18>
 400af48:	483e2e26 	beq	r9,zero,400a804 <__alt_data_end+0xfc00a804>
 400af4c:	0025883a 	mov	r18,zero
 400af50:	94800c04 	addi	r18,r18,48
 400af54:	dc8019c5 	stb	r18,103(sp)
 400af58:	dcc02717 	ldw	r19,156(sp)
 400af5c:	dd4019c4 	addi	r21,sp,103
 400af60:	003e2b06 	br	400a810 <__alt_data_end+0xfc00a810>
 400af64:	21003fcc 	andi	r4,r4,255
 400af68:	2002361e 	bne	r4,zero,400b844 <___vfiprintf_internal_r+0x1434>
 400af6c:	1801c126 	beq	r3,zero,400b674 <___vfiprintf_internal_r+0x1264>
 400af70:	04800044 	movi	r18,1
 400af74:	d8c01005 	stb	r3,64(sp)
 400af78:	d8001d85 	stb	zero,118(sp)
 400af7c:	9027883a 	mov	r19,r18
 400af80:	dd401004 	addi	r21,sp,64
 400af84:	003f1106 	br	400abcc <__alt_data_end+0xfc00abcc>
 400af88:	d9402117 	ldw	r5,132(sp)
 400af8c:	d9002017 	ldw	r4,128(sp)
 400af90:	d9801a04 	addi	r6,sp,104
 400af94:	d9c02b15 	stw	r7,172(sp)
 400af98:	dbc02a15 	stw	r15,168(sp)
 400af9c:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400afa0:	d9c02b17 	ldw	r7,172(sp)
 400afa4:	dbc02a17 	ldw	r15,168(sp)
 400afa8:	10006d1e 	bne	r2,zero,400b160 <___vfiprintf_internal_r+0xd50>
 400afac:	d9801b17 	ldw	r6,108(sp)
 400afb0:	d8801c17 	ldw	r2,112(sp)
 400afb4:	d811883a 	mov	r8,sp
 400afb8:	31400044 	addi	r5,r6,1
 400afbc:	003e3306 	br	400a88c <__alt_data_end+0xfc00a88c>
 400afc0:	d9401b17 	ldw	r5,108(sp)
 400afc4:	d8801c17 	ldw	r2,112(sp)
 400afc8:	29000044 	addi	r4,r5,1
 400afcc:	d8c01d87 	ldb	r3,118(sp)
 400afd0:	183e4d26 	beq	r3,zero,400a908 <__alt_data_end+0xfc00a908>
 400afd4:	00c00044 	movi	r3,1
 400afd8:	d9401d84 	addi	r5,sp,118
 400afdc:	10c5883a 	add	r2,r2,r3
 400afe0:	41400015 	stw	r5,0(r8)
 400afe4:	40c00115 	stw	r3,4(r8)
 400afe8:	d8801c15 	stw	r2,112(sp)
 400afec:	d9001b15 	stw	r4,108(sp)
 400aff0:	014001c4 	movi	r5,7
 400aff4:	2900a90e 	bge	r5,r4,400b29c <___vfiprintf_internal_r+0xe8c>
 400aff8:	1000da1e 	bne	r2,zero,400b364 <___vfiprintf_internal_r+0xf54>
 400affc:	7000ab1e 	bne	r14,zero,400b2ac <___vfiprintf_internal_r+0xe9c>
 400b000:	000b883a 	mov	r5,zero
 400b004:	1809883a 	mov	r4,r3
 400b008:	d811883a 	mov	r8,sp
 400b00c:	00c02004 	movi	r3,128
 400b010:	e0fe4d26 	beq	fp,r3,400a948 <__alt_data_end+0xfc00a948>
 400b014:	4cf9c83a 	sub	fp,r9,r19
 400b018:	073e7b0e 	bge	zero,fp,400aa08 <__alt_data_end+0xfc00aa08>
 400b01c:	01c00404 	movi	r7,16
 400b020:	3f01900e 	bge	r7,fp,400b664 <___vfiprintf_internal_r+0x1254>
 400b024:	00c100f4 	movhi	r3,1027
 400b028:	18cbc804 	addi	r3,r3,12064
 400b02c:	d8c02415 	stw	r3,144(sp)
 400b030:	034001c4 	movi	r13,7
 400b034:	00000506 	br	400b04c <___vfiprintf_internal_r+0xc3c>
 400b038:	29000084 	addi	r4,r5,2
 400b03c:	42000204 	addi	r8,r8,8
 400b040:	180b883a 	mov	r5,r3
 400b044:	e73ffc04 	addi	fp,fp,-16
 400b048:	3f000d0e 	bge	r7,fp,400b080 <___vfiprintf_internal_r+0xc70>
 400b04c:	10800404 	addi	r2,r2,16
 400b050:	28c00044 	addi	r3,r5,1
 400b054:	45c00015 	stw	r23,0(r8)
 400b058:	41c00115 	stw	r7,4(r8)
 400b05c:	d8801c15 	stw	r2,112(sp)
 400b060:	d8c01b15 	stw	r3,108(sp)
 400b064:	68fff40e 	bge	r13,r3,400b038 <__alt_data_end+0xfc00b038>
 400b068:	1000101e 	bne	r2,zero,400b0ac <___vfiprintf_internal_r+0xc9c>
 400b06c:	e73ffc04 	addi	fp,fp,-16
 400b070:	01000044 	movi	r4,1
 400b074:	000b883a 	mov	r5,zero
 400b078:	d811883a 	mov	r8,sp
 400b07c:	3f3ff316 	blt	r7,fp,400b04c <__alt_data_end+0xfc00b04c>
 400b080:	da802417 	ldw	r10,144(sp)
 400b084:	1705883a 	add	r2,r2,fp
 400b088:	47000115 	stw	fp,4(r8)
 400b08c:	42800015 	stw	r10,0(r8)
 400b090:	d8801c15 	stw	r2,112(sp)
 400b094:	d9001b15 	stw	r4,108(sp)
 400b098:	00c001c4 	movi	r3,7
 400b09c:	19003616 	blt	r3,r4,400b178 <___vfiprintf_internal_r+0xd68>
 400b0a0:	42000204 	addi	r8,r8,8
 400b0a4:	21000044 	addi	r4,r4,1
 400b0a8:	003e5706 	br	400aa08 <__alt_data_end+0xfc00aa08>
 400b0ac:	d9402117 	ldw	r5,132(sp)
 400b0b0:	d9002017 	ldw	r4,128(sp)
 400b0b4:	d9801a04 	addi	r6,sp,104
 400b0b8:	d9c02b15 	stw	r7,172(sp)
 400b0bc:	db402a15 	stw	r13,168(sp)
 400b0c0:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b0c4:	d9c02b17 	ldw	r7,172(sp)
 400b0c8:	db402a17 	ldw	r13,168(sp)
 400b0cc:	1000241e 	bne	r2,zero,400b160 <___vfiprintf_internal_r+0xd50>
 400b0d0:	d9401b17 	ldw	r5,108(sp)
 400b0d4:	d8801c17 	ldw	r2,112(sp)
 400b0d8:	d811883a 	mov	r8,sp
 400b0dc:	29000044 	addi	r4,r5,1
 400b0e0:	003fd806 	br	400b044 <__alt_data_end+0xfc00b044>
 400b0e4:	d9401b17 	ldw	r5,108(sp)
 400b0e8:	00c100f4 	movhi	r3,1027
 400b0ec:	18cbcc04 	addi	r3,r3,12080
 400b0f0:	d8c02415 	stw	r3,144(sp)
 400b0f4:	29400044 	addi	r5,r5,1
 400b0f8:	d8c02417 	ldw	r3,144(sp)
 400b0fc:	14c5883a 	add	r2,r2,r19
 400b100:	44c00115 	stw	r19,4(r8)
 400b104:	40c00015 	stw	r3,0(r8)
 400b108:	d8801c15 	stw	r2,112(sp)
 400b10c:	d9401b15 	stw	r5,108(sp)
 400b110:	00c001c4 	movi	r3,7
 400b114:	1940070e 	bge	r3,r5,400b134 <___vfiprintf_internal_r+0xd24>
 400b118:	103e4826 	beq	r2,zero,400aa3c <__alt_data_end+0xfc00aa3c>
 400b11c:	d9402117 	ldw	r5,132(sp)
 400b120:	d9002017 	ldw	r4,128(sp)
 400b124:	d9801a04 	addi	r6,sp,104
 400b128:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b12c:	10000c1e 	bne	r2,zero,400b160 <___vfiprintf_internal_r+0xd50>
 400b130:	d8801c17 	ldw	r2,112(sp)
 400b134:	8c80010e 	bge	r17,r18,400b13c <___vfiprintf_internal_r+0xd2c>
 400b138:	9023883a 	mov	r17,r18
 400b13c:	da802317 	ldw	r10,140(sp)
 400b140:	5455883a 	add	r10,r10,r17
 400b144:	da802315 	stw	r10,140(sp)
 400b148:	103e4126 	beq	r2,zero,400aa50 <__alt_data_end+0xfc00aa50>
 400b14c:	d9402117 	ldw	r5,132(sp)
 400b150:	d9002017 	ldw	r4,128(sp)
 400b154:	d9801a04 	addi	r6,sp,104
 400b158:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b15c:	103e3c26 	beq	r2,zero,400aa50 <__alt_data_end+0xfc00aa50>
 400b160:	dd002117 	ldw	r20,132(sp)
 400b164:	a080030b 	ldhu	r2,12(r20)
 400b168:	1080100c 	andi	r2,r2,64
 400b16c:	1001231e 	bne	r2,zero,400b5fc <___vfiprintf_internal_r+0x11ec>
 400b170:	d8802317 	ldw	r2,140(sp)
 400b174:	003d7b06 	br	400a764 <__alt_data_end+0xfc00a764>
 400b178:	1000991e 	bne	r2,zero,400b3e0 <___vfiprintf_internal_r+0xfd0>
 400b17c:	00c00044 	movi	r3,1
 400b180:	9805883a 	mov	r2,r19
 400b184:	dd400015 	stw	r21,0(sp)
 400b188:	dcc00115 	stw	r19,4(sp)
 400b18c:	dcc01c15 	stw	r19,112(sp)
 400b190:	d8c01b15 	stw	r3,108(sp)
 400b194:	d811883a 	mov	r8,sp
 400b198:	42000204 	addi	r8,r8,8
 400b19c:	a2c0010c 	andi	r11,r20,4
 400b1a0:	583fe426 	beq	r11,zero,400b134 <__alt_data_end+0xfc00b134>
 400b1a4:	8ca7c83a 	sub	r19,r17,r18
 400b1a8:	04ffe20e 	bge	zero,r19,400b134 <__alt_data_end+0xfc00b134>
 400b1ac:	01c00404 	movi	r7,16
 400b1b0:	3cffcc0e 	bge	r7,r19,400b0e4 <__alt_data_end+0xfc00b0e4>
 400b1b4:	028100f4 	movhi	r10,1027
 400b1b8:	528bcc04 	addi	r10,r10,12080
 400b1bc:	d9001b17 	ldw	r4,108(sp)
 400b1c0:	da802415 	stw	r10,144(sp)
 400b1c4:	382b883a 	mov	r21,r7
 400b1c8:	050001c4 	movi	r20,7
 400b1cc:	df002017 	ldw	fp,128(sp)
 400b1d0:	00000506 	br	400b1e8 <___vfiprintf_internal_r+0xdd8>
 400b1d4:	21400084 	addi	r5,r4,2
 400b1d8:	42000204 	addi	r8,r8,8
 400b1dc:	1809883a 	mov	r4,r3
 400b1e0:	9cfffc04 	addi	r19,r19,-16
 400b1e4:	acffc40e 	bge	r21,r19,400b0f8 <__alt_data_end+0xfc00b0f8>
 400b1e8:	10800404 	addi	r2,r2,16
 400b1ec:	20c00044 	addi	r3,r4,1
 400b1f0:	45800015 	stw	r22,0(r8)
 400b1f4:	45400115 	stw	r21,4(r8)
 400b1f8:	d8801c15 	stw	r2,112(sp)
 400b1fc:	d8c01b15 	stw	r3,108(sp)
 400b200:	a0fff40e 	bge	r20,r3,400b1d4 <__alt_data_end+0xfc00b1d4>
 400b204:	1000041e 	bne	r2,zero,400b218 <___vfiprintf_internal_r+0xe08>
 400b208:	01400044 	movi	r5,1
 400b20c:	0009883a 	mov	r4,zero
 400b210:	d811883a 	mov	r8,sp
 400b214:	003ff206 	br	400b1e0 <__alt_data_end+0xfc00b1e0>
 400b218:	d9402117 	ldw	r5,132(sp)
 400b21c:	d9801a04 	addi	r6,sp,104
 400b220:	e009883a 	mov	r4,fp
 400b224:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b228:	103fcd1e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b22c:	d9001b17 	ldw	r4,108(sp)
 400b230:	d8801c17 	ldw	r2,112(sp)
 400b234:	d811883a 	mov	r8,sp
 400b238:	21400044 	addi	r5,r4,1
 400b23c:	003fe806 	br	400b1e0 <__alt_data_end+0xfc00b1e0>
 400b240:	d9402117 	ldw	r5,132(sp)
 400b244:	d9002017 	ldw	r4,128(sp)
 400b248:	d9801a04 	addi	r6,sp,104
 400b24c:	d9c02b15 	stw	r7,172(sp)
 400b250:	db402a15 	stw	r13,168(sp)
 400b254:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b258:	d9c02b17 	ldw	r7,172(sp)
 400b25c:	db402a17 	ldw	r13,168(sp)
 400b260:	103fbf1e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b264:	d9401b17 	ldw	r5,108(sp)
 400b268:	d8801c17 	ldw	r2,112(sp)
 400b26c:	d811883a 	mov	r8,sp
 400b270:	29800044 	addi	r6,r5,1
 400b274:	003dc406 	br	400a988 <__alt_data_end+0xfc00a988>
 400b278:	1000d21e 	bne	r2,zero,400b5c4 <___vfiprintf_internal_r+0x11b4>
 400b27c:	d8c01d87 	ldb	r3,118(sp)
 400b280:	18009526 	beq	r3,zero,400b4d8 <___vfiprintf_internal_r+0x10c8>
 400b284:	00800044 	movi	r2,1
 400b288:	d8c01d84 	addi	r3,sp,118
 400b28c:	1009883a 	mov	r4,r2
 400b290:	d8c00015 	stw	r3,0(sp)
 400b294:	d8800115 	stw	r2,4(sp)
 400b298:	d811883a 	mov	r8,sp
 400b29c:	200b883a 	mov	r5,r4
 400b2a0:	42000204 	addi	r8,r8,8
 400b2a4:	21000044 	addi	r4,r4,1
 400b2a8:	003d9706 	br	400a908 <__alt_data_end+0xfc00a908>
 400b2ac:	d9001d04 	addi	r4,sp,116
 400b2b0:	00800084 	movi	r2,2
 400b2b4:	d9000015 	stw	r4,0(sp)
 400b2b8:	d8800115 	stw	r2,4(sp)
 400b2bc:	1809883a 	mov	r4,r3
 400b2c0:	d811883a 	mov	r8,sp
 400b2c4:	200b883a 	mov	r5,r4
 400b2c8:	42000204 	addi	r8,r8,8
 400b2cc:	21000044 	addi	r4,r4,1
 400b2d0:	003f4e06 	br	400b00c <__alt_data_end+0xfc00b00c>
 400b2d4:	d8001d85 	stb	zero,118(sp)
 400b2d8:	48005016 	blt	r9,zero,400b41c <___vfiprintf_internal_r+0x100c>
 400b2dc:	00ffdfc4 	movi	r3,-129
 400b2e0:	94c4b03a 	or	r2,r18,r19
 400b2e4:	a0e8703a 	and	r20,r20,r3
 400b2e8:	103d4426 	beq	r2,zero,400a7fc <__alt_data_end+0xfc00a7fc>
 400b2ec:	0039883a 	mov	fp,zero
 400b2f0:	d9002617 	ldw	r4,152(sp)
 400b2f4:	dd401a04 	addi	r21,sp,104
 400b2f8:	908003cc 	andi	r2,r18,15
 400b2fc:	9806973a 	slli	r3,r19,28
 400b300:	2085883a 	add	r2,r4,r2
 400b304:	9024d13a 	srli	r18,r18,4
 400b308:	10800003 	ldbu	r2,0(r2)
 400b30c:	9826d13a 	srli	r19,r19,4
 400b310:	ad7fffc4 	addi	r21,r21,-1
 400b314:	1ca4b03a 	or	r18,r3,r18
 400b318:	a8800005 	stb	r2,0(r21)
 400b31c:	94c4b03a 	or	r2,r18,r19
 400b320:	103ff51e 	bne	r2,zero,400b2f8 <__alt_data_end+0xfc00b2f8>
 400b324:	003e5906 	br	400ac8c <__alt_data_end+0xfc00ac8c>
 400b328:	d9402117 	ldw	r5,132(sp)
 400b32c:	d9002017 	ldw	r4,128(sp)
 400b330:	d9801a04 	addi	r6,sp,104
 400b334:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b338:	103f891e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b33c:	d8801c17 	ldw	r2,112(sp)
 400b340:	d811883a 	mov	r8,sp
 400b344:	003f9506 	br	400b19c <__alt_data_end+0xfc00b19c>
 400b348:	d9402117 	ldw	r5,132(sp)
 400b34c:	d9002017 	ldw	r4,128(sp)
 400b350:	d9801a04 	addi	r6,sp,104
 400b354:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b358:	103f811e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b35c:	d811883a 	mov	r8,sp
 400b360:	003ced06 	br	400a718 <__alt_data_end+0xfc00a718>
 400b364:	d9402117 	ldw	r5,132(sp)
 400b368:	d9002017 	ldw	r4,128(sp)
 400b36c:	d9801a04 	addi	r6,sp,104
 400b370:	da402c15 	stw	r9,176(sp)
 400b374:	db802a15 	stw	r14,168(sp)
 400b378:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b37c:	da402c17 	ldw	r9,176(sp)
 400b380:	db802a17 	ldw	r14,168(sp)
 400b384:	103f761e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b388:	d9401b17 	ldw	r5,108(sp)
 400b38c:	d8801c17 	ldw	r2,112(sp)
 400b390:	d811883a 	mov	r8,sp
 400b394:	29000044 	addi	r4,r5,1
 400b398:	003d5b06 	br	400a908 <__alt_data_end+0xfc00a908>
 400b39c:	d9402117 	ldw	r5,132(sp)
 400b3a0:	d9002017 	ldw	r4,128(sp)
 400b3a4:	d9801a04 	addi	r6,sp,104
 400b3a8:	da402c15 	stw	r9,176(sp)
 400b3ac:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b3b0:	da402c17 	ldw	r9,176(sp)
 400b3b4:	103f6a1e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b3b8:	d9401b17 	ldw	r5,108(sp)
 400b3bc:	d8801c17 	ldw	r2,112(sp)
 400b3c0:	d811883a 	mov	r8,sp
 400b3c4:	29000044 	addi	r4,r5,1
 400b3c8:	003f1006 	br	400b00c <__alt_data_end+0xfc00b00c>
 400b3cc:	1000c31e 	bne	r2,zero,400b6dc <___vfiprintf_internal_r+0x12cc>
 400b3d0:	01000044 	movi	r4,1
 400b3d4:	000b883a 	mov	r5,zero
 400b3d8:	d811883a 	mov	r8,sp
 400b3dc:	003f0d06 	br	400b014 <__alt_data_end+0xfc00b014>
 400b3e0:	d9402117 	ldw	r5,132(sp)
 400b3e4:	d9002017 	ldw	r4,128(sp)
 400b3e8:	d9801a04 	addi	r6,sp,104
 400b3ec:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b3f0:	103f5b1e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b3f4:	d9001b17 	ldw	r4,108(sp)
 400b3f8:	d8801c17 	ldw	r2,112(sp)
 400b3fc:	d811883a 	mov	r8,sp
 400b400:	21000044 	addi	r4,r4,1
 400b404:	003d8006 	br	400aa08 <__alt_data_end+0xfc00aa08>
 400b408:	010100f4 	movhi	r4,1027
 400b40c:	210b6704 	addi	r4,r4,11676
 400b410:	d9002615 	stw	r4,152(sp)
 400b414:	d8c02215 	stw	r3,136(sp)
 400b418:	1029883a 	mov	r20,r2
 400b41c:	94c4b03a 	or	r2,r18,r19
 400b420:	103fb21e 	bne	r2,zero,400b2ec <__alt_data_end+0xfc00b2ec>
 400b424:	0039883a 	mov	fp,zero
 400b428:	00800084 	movi	r2,2
 400b42c:	003e6b06 	br	400addc <__alt_data_end+0xfc00addc>
 400b430:	da802217 	ldw	r10,136(sp)
 400b434:	d8001d85 	stb	zero,118(sp)
 400b438:	0027883a 	mov	r19,zero
 400b43c:	50800104 	addi	r2,r10,4
 400b440:	54800017 	ldw	r18,0(r10)
 400b444:	483e6016 	blt	r9,zero,400adc8 <__alt_data_end+0xfc00adc8>
 400b448:	00ffdfc4 	movi	r3,-129
 400b44c:	d8802215 	stw	r2,136(sp)
 400b450:	a0e8703a 	and	r20,r20,r3
 400b454:	0039883a 	mov	fp,zero
 400b458:	903ebb26 	beq	r18,zero,400af48 <__alt_data_end+0xfc00af48>
 400b45c:	00800244 	movi	r2,9
 400b460:	14bdee36 	bltu	r2,r18,400ac1c <__alt_data_end+0xfc00ac1c>
 400b464:	003eba06 	br	400af50 <__alt_data_end+0xfc00af50>
 400b468:	00800c04 	movi	r2,48
 400b46c:	d8c01d45 	stb	r3,117(sp)
 400b470:	d8801d05 	stb	r2,116(sp)
 400b474:	d8001d85 	stb	zero,118(sp)
 400b478:	a0c00094 	ori	r3,r20,2
 400b47c:	4800a916 	blt	r9,zero,400b724 <___vfiprintf_internal_r+0x1314>
 400b480:	00bfdfc4 	movi	r2,-129
 400b484:	a096703a 	and	r11,r20,r2
 400b488:	5d000094 	ori	r20,r11,2
 400b48c:	0039883a 	mov	fp,zero
 400b490:	003f9706 	br	400b2f0 <__alt_data_end+0xfc00b2f0>
 400b494:	8025883a 	mov	r18,r16
 400b498:	003c2e06 	br	400a554 <__alt_data_end+0xfc00a554>
 400b49c:	008100f4 	movhi	r2,1027
 400b4a0:	108b6704 	addi	r2,r2,11676
 400b4a4:	0039883a 	mov	fp,zero
 400b4a8:	d8802615 	stw	r2,152(sp)
 400b4ac:	003f9006 	br	400b2f0 <__alt_data_end+0xfc00b2f0>
 400b4b0:	04a5c83a 	sub	r18,zero,r18
 400b4b4:	07000b44 	movi	fp,45
 400b4b8:	9004c03a 	cmpne	r2,r18,zero
 400b4bc:	04e7c83a 	sub	r19,zero,r19
 400b4c0:	df001d85 	stb	fp,118(sp)
 400b4c4:	98a7c83a 	sub	r19,r19,r2
 400b4c8:	48009f16 	blt	r9,zero,400b748 <___vfiprintf_internal_r+0x1338>
 400b4cc:	00bfdfc4 	movi	r2,-129
 400b4d0:	a0a8703a 	and	r20,r20,r2
 400b4d4:	003dd006 	br	400ac18 <__alt_data_end+0xfc00ac18>
 400b4d8:	70004c26 	beq	r14,zero,400b60c <___vfiprintf_internal_r+0x11fc>
 400b4dc:	00800084 	movi	r2,2
 400b4e0:	d8c01d04 	addi	r3,sp,116
 400b4e4:	d8c00015 	stw	r3,0(sp)
 400b4e8:	d8800115 	stw	r2,4(sp)
 400b4ec:	01000044 	movi	r4,1
 400b4f0:	d811883a 	mov	r8,sp
 400b4f4:	003f7306 	br	400b2c4 <__alt_data_end+0xfc00b2c4>
 400b4f8:	a080100c 	andi	r2,r20,64
 400b4fc:	da802217 	ldw	r10,136(sp)
 400b500:	103e0626 	beq	r2,zero,400ad1c <__alt_data_end+0xfc00ad1c>
 400b504:	5480000f 	ldh	r18,0(r10)
 400b508:	52800104 	addi	r10,r10,4
 400b50c:	da802215 	stw	r10,136(sp)
 400b510:	9027d7fa 	srai	r19,r18,31
 400b514:	9805883a 	mov	r2,r19
 400b518:	003db806 	br	400abfc <__alt_data_end+0xfc00abfc>
 400b51c:	a080040c 	andi	r2,r20,16
 400b520:	1000091e 	bne	r2,zero,400b548 <___vfiprintf_internal_r+0x1138>
 400b524:	a2c0100c 	andi	r11,r20,64
 400b528:	58000726 	beq	r11,zero,400b548 <___vfiprintf_internal_r+0x1138>
 400b52c:	da802217 	ldw	r10,136(sp)
 400b530:	50800017 	ldw	r2,0(r10)
 400b534:	52800104 	addi	r10,r10,4
 400b538:	da802215 	stw	r10,136(sp)
 400b53c:	da802317 	ldw	r10,140(sp)
 400b540:	1280000d 	sth	r10,0(r2)
 400b544:	003be706 	br	400a4e4 <__alt_data_end+0xfc00a4e4>
 400b548:	da802217 	ldw	r10,136(sp)
 400b54c:	50800017 	ldw	r2,0(r10)
 400b550:	52800104 	addi	r10,r10,4
 400b554:	da802215 	stw	r10,136(sp)
 400b558:	da802317 	ldw	r10,140(sp)
 400b55c:	12800015 	stw	r10,0(r2)
 400b560:	003be006 	br	400a4e4 <__alt_data_end+0xfc00a4e4>
 400b564:	a080100c 	andi	r2,r20,64
 400b568:	da802217 	ldw	r10,136(sp)
 400b56c:	10003026 	beq	r2,zero,400b630 <___vfiprintf_internal_r+0x1220>
 400b570:	5480000b 	ldhu	r18,0(r10)
 400b574:	52800104 	addi	r10,r10,4
 400b578:	0027883a 	mov	r19,zero
 400b57c:	da802215 	stw	r10,136(sp)
 400b580:	003d8006 	br	400ab84 <__alt_data_end+0xfc00ab84>
 400b584:	80c00007 	ldb	r3,0(r16)
 400b588:	003c0006 	br	400a58c <__alt_data_end+0xfc00a58c>
 400b58c:	a080100c 	andi	r2,r20,64
 400b590:	d8001d85 	stb	zero,118(sp)
 400b594:	da802217 	ldw	r10,136(sp)
 400b598:	1000201e 	bne	r2,zero,400b61c <___vfiprintf_internal_r+0x120c>
 400b59c:	50800104 	addi	r2,r10,4
 400b5a0:	54800017 	ldw	r18,0(r10)
 400b5a4:	0027883a 	mov	r19,zero
 400b5a8:	483def0e 	bge	r9,zero,400ad68 <__alt_data_end+0xfc00ad68>
 400b5ac:	94c6b03a 	or	r3,r18,r19
 400b5b0:	d8802215 	stw	r2,136(sp)
 400b5b4:	183d4e1e 	bne	r3,zero,400aaf0 <__alt_data_end+0xfc00aaf0>
 400b5b8:	0039883a 	mov	fp,zero
 400b5bc:	0005883a 	mov	r2,zero
 400b5c0:	003e0606 	br	400addc <__alt_data_end+0xfc00addc>
 400b5c4:	d9402117 	ldw	r5,132(sp)
 400b5c8:	d9002017 	ldw	r4,128(sp)
 400b5cc:	d9801a04 	addi	r6,sp,104
 400b5d0:	da402c15 	stw	r9,176(sp)
 400b5d4:	db802a15 	stw	r14,168(sp)
 400b5d8:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b5dc:	da402c17 	ldw	r9,176(sp)
 400b5e0:	db802a17 	ldw	r14,168(sp)
 400b5e4:	103ede1e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b5e8:	d9401b17 	ldw	r5,108(sp)
 400b5ec:	d8801c17 	ldw	r2,112(sp)
 400b5f0:	d811883a 	mov	r8,sp
 400b5f4:	29000044 	addi	r4,r5,1
 400b5f8:	003e7406 	br	400afcc <__alt_data_end+0xfc00afcc>
 400b5fc:	00bfffc4 	movi	r2,-1
 400b600:	003c5806 	br	400a764 <__alt_data_end+0xfc00a764>
 400b604:	d811883a 	mov	r8,sp
 400b608:	003ee806 	br	400b1ac <__alt_data_end+0xfc00b1ac>
 400b60c:	000b883a 	mov	r5,zero
 400b610:	01000044 	movi	r4,1
 400b614:	d811883a 	mov	r8,sp
 400b618:	003e7c06 	br	400b00c <__alt_data_end+0xfc00b00c>
 400b61c:	50800104 	addi	r2,r10,4
 400b620:	5480000b 	ldhu	r18,0(r10)
 400b624:	0027883a 	mov	r19,zero
 400b628:	483dcf0e 	bge	r9,zero,400ad68 <__alt_data_end+0xfc00ad68>
 400b62c:	003fdf06 	br	400b5ac <__alt_data_end+0xfc00b5ac>
 400b630:	54800017 	ldw	r18,0(r10)
 400b634:	52800104 	addi	r10,r10,4
 400b638:	0027883a 	mov	r19,zero
 400b63c:	da802215 	stw	r10,136(sp)
 400b640:	003d5006 	br	400ab84 <__alt_data_end+0xfc00ab84>
 400b644:	50800104 	addi	r2,r10,4
 400b648:	5480000b 	ldhu	r18,0(r10)
 400b64c:	0027883a 	mov	r19,zero
 400b650:	483f7d0e 	bge	r9,zero,400b448 <__alt_data_end+0xfc00b448>
 400b654:	003ddc06 	br	400adc8 <__alt_data_end+0xfc00adc8>
 400b658:	d8c02215 	stw	r3,136(sp)
 400b65c:	0039883a 	mov	fp,zero
 400b660:	003ddb06 	br	400add0 <__alt_data_end+0xfc00add0>
 400b664:	028100f4 	movhi	r10,1027
 400b668:	528bc804 	addi	r10,r10,12064
 400b66c:	da802415 	stw	r10,144(sp)
 400b670:	003e8306 	br	400b080 <__alt_data_end+0xfc00b080>
 400b674:	d8801c17 	ldw	r2,112(sp)
 400b678:	dd002117 	ldw	r20,132(sp)
 400b67c:	103eb926 	beq	r2,zero,400b164 <__alt_data_end+0xfc00b164>
 400b680:	d9002017 	ldw	r4,128(sp)
 400b684:	d9801a04 	addi	r6,sp,104
 400b688:	a00b883a 	mov	r5,r20
 400b68c:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b690:	003eb406 	br	400b164 <__alt_data_end+0xfc00b164>
 400b694:	80c00043 	ldbu	r3,1(r16)
 400b698:	a5000814 	ori	r20,r20,32
 400b69c:	84000044 	addi	r16,r16,1
 400b6a0:	18c03fcc 	andi	r3,r3,255
 400b6a4:	18c0201c 	xori	r3,r3,128
 400b6a8:	18ffe004 	addi	r3,r3,-128
 400b6ac:	003bb706 	br	400a58c <__alt_data_end+0xfc00a58c>
 400b6b0:	a809883a 	mov	r4,r21
 400b6b4:	d8c02a15 	stw	r3,168(sp)
 400b6b8:	da002b15 	stw	r8,172(sp)
 400b6bc:	4002d640 	call	4002d64 <strlen>
 400b6c0:	d8c02a17 	ldw	r3,168(sp)
 400b6c4:	1027883a 	mov	r19,r2
 400b6c8:	df001d83 	ldbu	fp,118(sp)
 400b6cc:	d8c02215 	stw	r3,136(sp)
 400b6d0:	0013883a 	mov	r9,zero
 400b6d4:	da002b17 	ldw	r8,172(sp)
 400b6d8:	003c4d06 	br	400a810 <__alt_data_end+0xfc00a810>
 400b6dc:	d9402117 	ldw	r5,132(sp)
 400b6e0:	d9002017 	ldw	r4,128(sp)
 400b6e4:	d9801a04 	addi	r6,sp,104
 400b6e8:	da402c15 	stw	r9,176(sp)
 400b6ec:	400a2fc0 	call	400a2fc <__sprint_r.part.0>
 400b6f0:	da402c17 	ldw	r9,176(sp)
 400b6f4:	103e9a1e 	bne	r2,zero,400b160 <__alt_data_end+0xfc00b160>
 400b6f8:	d9401b17 	ldw	r5,108(sp)
 400b6fc:	d8801c17 	ldw	r2,112(sp)
 400b700:	d811883a 	mov	r8,sp
 400b704:	29000044 	addi	r4,r5,1
 400b708:	003e4206 	br	400b014 <__alt_data_end+0xfc00b014>
 400b70c:	d9401b17 	ldw	r5,108(sp)
 400b710:	010100f4 	movhi	r4,1027
 400b714:	210bcc04 	addi	r4,r4,12080
 400b718:	d9002415 	stw	r4,144(sp)
 400b71c:	29400044 	addi	r5,r5,1
 400b720:	003c6d06 	br	400a8d8 <__alt_data_end+0xfc00a8d8>
 400b724:	0039883a 	mov	fp,zero
 400b728:	00800084 	movi	r2,2
 400b72c:	10803fcc 	andi	r2,r2,255
 400b730:	01000044 	movi	r4,1
 400b734:	11001e26 	beq	r2,r4,400b7b0 <___vfiprintf_internal_r+0x13a0>
 400b738:	01000084 	movi	r4,2
 400b73c:	11001e1e 	bne	r2,r4,400b7b8 <___vfiprintf_internal_r+0x13a8>
 400b740:	1829883a 	mov	r20,r3
 400b744:	003eea06 	br	400b2f0 <__alt_data_end+0xfc00b2f0>
 400b748:	a007883a 	mov	r3,r20
 400b74c:	00800044 	movi	r2,1
 400b750:	003ff606 	br	400b72c <__alt_data_end+0xfc00b72c>
 400b754:	00800184 	movi	r2,6
 400b758:	1240012e 	bgeu	r2,r9,400b760 <___vfiprintf_internal_r+0x1350>
 400b75c:	1013883a 	mov	r9,r2
 400b760:	4827883a 	mov	r19,r9
 400b764:	4825883a 	mov	r18,r9
 400b768:	48001516 	blt	r9,zero,400b7c0 <___vfiprintf_internal_r+0x13b0>
 400b76c:	054100f4 	movhi	r21,1027
 400b770:	d8c02215 	stw	r3,136(sp)
 400b774:	ad4b6c04 	addi	r21,r21,11696
 400b778:	003d1406 	br	400abcc <__alt_data_end+0xfc00abcc>
 400b77c:	028100f4 	movhi	r10,1027
 400b780:	528bc804 	addi	r10,r10,12064
 400b784:	da802415 	stw	r10,144(sp)
 400b788:	200d883a 	mov	r6,r4
 400b78c:	003c9106 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b790:	5021883a 	mov	r16,r10
 400b794:	0013883a 	mov	r9,zero
 400b798:	003b7d06 	br	400a590 <__alt_data_end+0xfc00a590>
 400b79c:	4827883a 	mov	r19,r9
 400b7a0:	df001d83 	ldbu	fp,118(sp)
 400b7a4:	d8c02215 	stw	r3,136(sp)
 400b7a8:	0013883a 	mov	r9,zero
 400b7ac:	003c1806 	br	400a810 <__alt_data_end+0xfc00a810>
 400b7b0:	1829883a 	mov	r20,r3
 400b7b4:	003d1806 	br	400ac18 <__alt_data_end+0xfc00ac18>
 400b7b8:	1829883a 	mov	r20,r3
 400b7bc:	003ccd06 	br	400aaf4 <__alt_data_end+0xfc00aaf4>
 400b7c0:	0025883a 	mov	r18,zero
 400b7c4:	003fe906 	br	400b76c <__alt_data_end+0xfc00b76c>
 400b7c8:	d8802217 	ldw	r2,136(sp)
 400b7cc:	80c00043 	ldbu	r3,1(r16)
 400b7d0:	5021883a 	mov	r16,r10
 400b7d4:	12400017 	ldw	r9,0(r2)
 400b7d8:	10800104 	addi	r2,r2,4
 400b7dc:	d8802215 	stw	r2,136(sp)
 400b7e0:	483faf0e 	bge	r9,zero,400b6a0 <__alt_data_end+0xfc00b6a0>
 400b7e4:	18c03fcc 	andi	r3,r3,255
 400b7e8:	18c0201c 	xori	r3,r3,128
 400b7ec:	027fffc4 	movi	r9,-1
 400b7f0:	18ffe004 	addi	r3,r3,-128
 400b7f4:	003b6506 	br	400a58c <__alt_data_end+0xfc00a58c>
 400b7f8:	d9c01d85 	stb	r7,118(sp)
 400b7fc:	003ca006 	br	400aa80 <__alt_data_end+0xfc00aa80>
 400b800:	d9c01d85 	stb	r7,118(sp)
 400b804:	003cad06 	br	400aabc <__alt_data_end+0xfc00aabc>
 400b808:	d9c01d85 	stb	r7,118(sp)
 400b80c:	003d7d06 	br	400ae04 <__alt_data_end+0xfc00ae04>
 400b810:	d9c01d85 	stb	r7,118(sp)
 400b814:	003d5f06 	br	400ad94 <__alt_data_end+0xfc00ad94>
 400b818:	a080004c 	andi	r2,r20,1
 400b81c:	0039883a 	mov	fp,zero
 400b820:	10000526 	beq	r2,zero,400b838 <___vfiprintf_internal_r+0x1428>
 400b824:	00800c04 	movi	r2,48
 400b828:	d88019c5 	stb	r2,103(sp)
 400b82c:	dcc02717 	ldw	r19,156(sp)
 400b830:	dd4019c4 	addi	r21,sp,103
 400b834:	003bf606 	br	400a810 <__alt_data_end+0xfc00a810>
 400b838:	0027883a 	mov	r19,zero
 400b83c:	dd401a04 	addi	r21,sp,104
 400b840:	003bf306 	br	400a810 <__alt_data_end+0xfc00a810>
 400b844:	d9c01d85 	stb	r7,118(sp)
 400b848:	003dc806 	br	400af6c <__alt_data_end+0xfc00af6c>
 400b84c:	d9c01d85 	stb	r7,118(sp)
 400b850:	003d3a06 	br	400ad3c <__alt_data_end+0xfc00ad3c>
 400b854:	d9c01d85 	stb	r7,118(sp)
 400b858:	003d2a06 	br	400ad04 <__alt_data_end+0xfc00ad04>
 400b85c:	d9c01d85 	stb	r7,118(sp)
 400b860:	003cde06 	br	400abdc <__alt_data_end+0xfc00abdc>
 400b864:	d9c01d85 	stb	r7,118(sp)
 400b868:	003cbc06 	br	400ab5c <__alt_data_end+0xfc00ab5c>

0400b86c <__vfiprintf_internal>:
 400b86c:	008100f4 	movhi	r2,1027
 400b870:	1098bc04 	addi	r2,r2,25328
 400b874:	300f883a 	mov	r7,r6
 400b878:	280d883a 	mov	r6,r5
 400b87c:	200b883a 	mov	r5,r4
 400b880:	11000017 	ldw	r4,0(r2)
 400b884:	400a4101 	jmpi	400a410 <___vfiprintf_internal_r>

0400b888 <__sbprintf>:
 400b888:	2880030b 	ldhu	r2,12(r5)
 400b88c:	2ac01917 	ldw	r11,100(r5)
 400b890:	2a80038b 	ldhu	r10,14(r5)
 400b894:	2a400717 	ldw	r9,28(r5)
 400b898:	2a000917 	ldw	r8,36(r5)
 400b89c:	defee204 	addi	sp,sp,-1144
 400b8a0:	00c10004 	movi	r3,1024
 400b8a4:	dc011a15 	stw	r16,1128(sp)
 400b8a8:	10bfff4c 	andi	r2,r2,65533
 400b8ac:	2821883a 	mov	r16,r5
 400b8b0:	d8cb883a 	add	r5,sp,r3
 400b8b4:	dc811c15 	stw	r18,1136(sp)
 400b8b8:	dc411b15 	stw	r17,1132(sp)
 400b8bc:	dfc11d15 	stw	ra,1140(sp)
 400b8c0:	2025883a 	mov	r18,r4
 400b8c4:	d881030d 	sth	r2,1036(sp)
 400b8c8:	dac11915 	stw	r11,1124(sp)
 400b8cc:	da81038d 	sth	r10,1038(sp)
 400b8d0:	da410715 	stw	r9,1052(sp)
 400b8d4:	da010915 	stw	r8,1060(sp)
 400b8d8:	dec10015 	stw	sp,1024(sp)
 400b8dc:	dec10415 	stw	sp,1040(sp)
 400b8e0:	d8c10215 	stw	r3,1032(sp)
 400b8e4:	d8c10515 	stw	r3,1044(sp)
 400b8e8:	d8010615 	stw	zero,1048(sp)
 400b8ec:	400a4100 	call	400a410 <___vfiprintf_internal_r>
 400b8f0:	1023883a 	mov	r17,r2
 400b8f4:	10000416 	blt	r2,zero,400b908 <__sbprintf+0x80>
 400b8f8:	d9410004 	addi	r5,sp,1024
 400b8fc:	9009883a 	mov	r4,r18
 400b900:	4006cc40 	call	4006cc4 <_fflush_r>
 400b904:	10000d1e 	bne	r2,zero,400b93c <__sbprintf+0xb4>
 400b908:	d881030b 	ldhu	r2,1036(sp)
 400b90c:	1080100c 	andi	r2,r2,64
 400b910:	10000326 	beq	r2,zero,400b920 <__sbprintf+0x98>
 400b914:	8080030b 	ldhu	r2,12(r16)
 400b918:	10801014 	ori	r2,r2,64
 400b91c:	8080030d 	sth	r2,12(r16)
 400b920:	8805883a 	mov	r2,r17
 400b924:	dfc11d17 	ldw	ra,1140(sp)
 400b928:	dc811c17 	ldw	r18,1136(sp)
 400b92c:	dc411b17 	ldw	r17,1132(sp)
 400b930:	dc011a17 	ldw	r16,1128(sp)
 400b934:	dec11e04 	addi	sp,sp,1144
 400b938:	f800283a 	ret
 400b93c:	047fffc4 	movi	r17,-1
 400b940:	003ff106 	br	400b908 <__alt_data_end+0xfc00b908>

0400b944 <_write_r>:
 400b944:	defffd04 	addi	sp,sp,-12
 400b948:	2805883a 	mov	r2,r5
 400b94c:	dc000015 	stw	r16,0(sp)
 400b950:	04010134 	movhi	r16,1028
 400b954:	dc400115 	stw	r17,4(sp)
 400b958:	300b883a 	mov	r5,r6
 400b95c:	84257c04 	addi	r16,r16,-27152
 400b960:	2023883a 	mov	r17,r4
 400b964:	380d883a 	mov	r6,r7
 400b968:	1009883a 	mov	r4,r2
 400b96c:	dfc00215 	stw	ra,8(sp)
 400b970:	80000015 	stw	zero,0(r16)
 400b974:	401017c0 	call	401017c <write>
 400b978:	00ffffc4 	movi	r3,-1
 400b97c:	10c00526 	beq	r2,r3,400b994 <_write_r+0x50>
 400b980:	dfc00217 	ldw	ra,8(sp)
 400b984:	dc400117 	ldw	r17,4(sp)
 400b988:	dc000017 	ldw	r16,0(sp)
 400b98c:	dec00304 	addi	sp,sp,12
 400b990:	f800283a 	ret
 400b994:	80c00017 	ldw	r3,0(r16)
 400b998:	183ff926 	beq	r3,zero,400b980 <__alt_data_end+0xfc00b980>
 400b99c:	88c00015 	stw	r3,0(r17)
 400b9a0:	003ff706 	br	400b980 <__alt_data_end+0xfc00b980>

0400b9a4 <_close_r>:
 400b9a4:	defffd04 	addi	sp,sp,-12
 400b9a8:	dc000015 	stw	r16,0(sp)
 400b9ac:	04010134 	movhi	r16,1028
 400b9b0:	dc400115 	stw	r17,4(sp)
 400b9b4:	84257c04 	addi	r16,r16,-27152
 400b9b8:	2023883a 	mov	r17,r4
 400b9bc:	2809883a 	mov	r4,r5
 400b9c0:	dfc00215 	stw	ra,8(sp)
 400b9c4:	80000015 	stw	zero,0(r16)
 400b9c8:	400f4f80 	call	400f4f8 <close>
 400b9cc:	00ffffc4 	movi	r3,-1
 400b9d0:	10c00526 	beq	r2,r3,400b9e8 <_close_r+0x44>
 400b9d4:	dfc00217 	ldw	ra,8(sp)
 400b9d8:	dc400117 	ldw	r17,4(sp)
 400b9dc:	dc000017 	ldw	r16,0(sp)
 400b9e0:	dec00304 	addi	sp,sp,12
 400b9e4:	f800283a 	ret
 400b9e8:	80c00017 	ldw	r3,0(r16)
 400b9ec:	183ff926 	beq	r3,zero,400b9d4 <__alt_data_end+0xfc00b9d4>
 400b9f0:	88c00015 	stw	r3,0(r17)
 400b9f4:	003ff706 	br	400b9d4 <__alt_data_end+0xfc00b9d4>

0400b9f8 <_calloc_r>:
 400b9f8:	298b383a 	mul	r5,r5,r6
 400b9fc:	defffe04 	addi	sp,sp,-8
 400ba00:	dfc00115 	stw	ra,4(sp)
 400ba04:	dc000015 	stw	r16,0(sp)
 400ba08:	4007e000 	call	4007e00 <_malloc_r>
 400ba0c:	10002926 	beq	r2,zero,400bab4 <_calloc_r+0xbc>
 400ba10:	11bfff17 	ldw	r6,-4(r2)
 400ba14:	1021883a 	mov	r16,r2
 400ba18:	00bfff04 	movi	r2,-4
 400ba1c:	308c703a 	and	r6,r6,r2
 400ba20:	00c00904 	movi	r3,36
 400ba24:	308d883a 	add	r6,r6,r2
 400ba28:	19801636 	bltu	r3,r6,400ba84 <_calloc_r+0x8c>
 400ba2c:	008004c4 	movi	r2,19
 400ba30:	11800b2e 	bgeu	r2,r6,400ba60 <_calloc_r+0x68>
 400ba34:	80000015 	stw	zero,0(r16)
 400ba38:	80000115 	stw	zero,4(r16)
 400ba3c:	008006c4 	movi	r2,27
 400ba40:	11801a2e 	bgeu	r2,r6,400baac <_calloc_r+0xb4>
 400ba44:	80000215 	stw	zero,8(r16)
 400ba48:	80000315 	stw	zero,12(r16)
 400ba4c:	30c0151e 	bne	r6,r3,400baa4 <_calloc_r+0xac>
 400ba50:	80000415 	stw	zero,16(r16)
 400ba54:	80800604 	addi	r2,r16,24
 400ba58:	80000515 	stw	zero,20(r16)
 400ba5c:	00000106 	br	400ba64 <_calloc_r+0x6c>
 400ba60:	8005883a 	mov	r2,r16
 400ba64:	10000015 	stw	zero,0(r2)
 400ba68:	10000115 	stw	zero,4(r2)
 400ba6c:	10000215 	stw	zero,8(r2)
 400ba70:	8005883a 	mov	r2,r16
 400ba74:	dfc00117 	ldw	ra,4(sp)
 400ba78:	dc000017 	ldw	r16,0(sp)
 400ba7c:	dec00204 	addi	sp,sp,8
 400ba80:	f800283a 	ret
 400ba84:	000b883a 	mov	r5,zero
 400ba88:	8009883a 	mov	r4,r16
 400ba8c:	40089940 	call	4008994 <memset>
 400ba90:	8005883a 	mov	r2,r16
 400ba94:	dfc00117 	ldw	ra,4(sp)
 400ba98:	dc000017 	ldw	r16,0(sp)
 400ba9c:	dec00204 	addi	sp,sp,8
 400baa0:	f800283a 	ret
 400baa4:	80800404 	addi	r2,r16,16
 400baa8:	003fee06 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400baac:	80800204 	addi	r2,r16,8
 400bab0:	003fec06 	br	400ba64 <__alt_data_end+0xfc00ba64>
 400bab4:	0005883a 	mov	r2,zero
 400bab8:	003fee06 	br	400ba74 <__alt_data_end+0xfc00ba74>

0400babc <_fclose_r>:
 400babc:	28003926 	beq	r5,zero,400bba4 <_fclose_r+0xe8>
 400bac0:	defffc04 	addi	sp,sp,-16
 400bac4:	dc400115 	stw	r17,4(sp)
 400bac8:	dc000015 	stw	r16,0(sp)
 400bacc:	dfc00315 	stw	ra,12(sp)
 400bad0:	dc800215 	stw	r18,8(sp)
 400bad4:	2023883a 	mov	r17,r4
 400bad8:	2821883a 	mov	r16,r5
 400badc:	20000226 	beq	r4,zero,400bae8 <_fclose_r+0x2c>
 400bae0:	20800e17 	ldw	r2,56(r4)
 400bae4:	10002726 	beq	r2,zero,400bb84 <_fclose_r+0xc8>
 400bae8:	8080030f 	ldh	r2,12(r16)
 400baec:	1000071e 	bne	r2,zero,400bb0c <_fclose_r+0x50>
 400baf0:	0005883a 	mov	r2,zero
 400baf4:	dfc00317 	ldw	ra,12(sp)
 400baf8:	dc800217 	ldw	r18,8(sp)
 400bafc:	dc400117 	ldw	r17,4(sp)
 400bb00:	dc000017 	ldw	r16,0(sp)
 400bb04:	dec00404 	addi	sp,sp,16
 400bb08:	f800283a 	ret
 400bb0c:	800b883a 	mov	r5,r16
 400bb10:	8809883a 	mov	r4,r17
 400bb14:	4006aa80 	call	4006aa8 <__sflush_r>
 400bb18:	1025883a 	mov	r18,r2
 400bb1c:	80800b17 	ldw	r2,44(r16)
 400bb20:	10000426 	beq	r2,zero,400bb34 <_fclose_r+0x78>
 400bb24:	81400717 	ldw	r5,28(r16)
 400bb28:	8809883a 	mov	r4,r17
 400bb2c:	103ee83a 	callr	r2
 400bb30:	10001616 	blt	r2,zero,400bb8c <_fclose_r+0xd0>
 400bb34:	8080030b 	ldhu	r2,12(r16)
 400bb38:	1080200c 	andi	r2,r2,128
 400bb3c:	1000151e 	bne	r2,zero,400bb94 <_fclose_r+0xd8>
 400bb40:	81400c17 	ldw	r5,48(r16)
 400bb44:	28000526 	beq	r5,zero,400bb5c <_fclose_r+0xa0>
 400bb48:	80801004 	addi	r2,r16,64
 400bb4c:	28800226 	beq	r5,r2,400bb58 <_fclose_r+0x9c>
 400bb50:	8809883a 	mov	r4,r17
 400bb54:	40072140 	call	4007214 <_free_r>
 400bb58:	80000c15 	stw	zero,48(r16)
 400bb5c:	81401117 	ldw	r5,68(r16)
 400bb60:	28000326 	beq	r5,zero,400bb70 <_fclose_r+0xb4>
 400bb64:	8809883a 	mov	r4,r17
 400bb68:	40072140 	call	4007214 <_free_r>
 400bb6c:	80001115 	stw	zero,68(r16)
 400bb70:	40070b00 	call	40070b0 <__sfp_lock_acquire>
 400bb74:	8000030d 	sth	zero,12(r16)
 400bb78:	40070b40 	call	40070b4 <__sfp_lock_release>
 400bb7c:	9005883a 	mov	r2,r18
 400bb80:	003fdc06 	br	400baf4 <__alt_data_end+0xfc00baf4>
 400bb84:	40070a00 	call	40070a0 <__sinit>
 400bb88:	003fd706 	br	400bae8 <__alt_data_end+0xfc00bae8>
 400bb8c:	04bfffc4 	movi	r18,-1
 400bb90:	003fe806 	br	400bb34 <__alt_data_end+0xfc00bb34>
 400bb94:	81400417 	ldw	r5,16(r16)
 400bb98:	8809883a 	mov	r4,r17
 400bb9c:	40072140 	call	4007214 <_free_r>
 400bba0:	003fe706 	br	400bb40 <__alt_data_end+0xfc00bb40>
 400bba4:	0005883a 	mov	r2,zero
 400bba8:	f800283a 	ret

0400bbac <fclose>:
 400bbac:	008100f4 	movhi	r2,1027
 400bbb0:	1098bc04 	addi	r2,r2,25328
 400bbb4:	200b883a 	mov	r5,r4
 400bbb8:	11000017 	ldw	r4,0(r2)
 400bbbc:	400babc1 	jmpi	400babc <_fclose_r>

0400bbc0 <__fputwc>:
 400bbc0:	defff804 	addi	sp,sp,-32
 400bbc4:	dcc00415 	stw	r19,16(sp)
 400bbc8:	dc800315 	stw	r18,12(sp)
 400bbcc:	dc000115 	stw	r16,4(sp)
 400bbd0:	dfc00715 	stw	ra,28(sp)
 400bbd4:	dd400615 	stw	r21,24(sp)
 400bbd8:	dd000515 	stw	r20,20(sp)
 400bbdc:	dc400215 	stw	r17,8(sp)
 400bbe0:	2027883a 	mov	r19,r4
 400bbe4:	2825883a 	mov	r18,r5
 400bbe8:	3021883a 	mov	r16,r6
 400bbec:	4007bf00 	call	4007bf0 <__locale_mb_cur_max>
 400bbf0:	00c00044 	movi	r3,1
 400bbf4:	10c03e26 	beq	r2,r3,400bcf0 <__fputwc+0x130>
 400bbf8:	81c01704 	addi	r7,r16,92
 400bbfc:	900d883a 	mov	r6,r18
 400bc00:	d80b883a 	mov	r5,sp
 400bc04:	9809883a 	mov	r4,r19
 400bc08:	400c0900 	call	400c090 <_wcrtomb_r>
 400bc0c:	1029883a 	mov	r20,r2
 400bc10:	00bfffc4 	movi	r2,-1
 400bc14:	a0802026 	beq	r20,r2,400bc98 <__fputwc+0xd8>
 400bc18:	d9400003 	ldbu	r5,0(sp)
 400bc1c:	a0001c26 	beq	r20,zero,400bc90 <__fputwc+0xd0>
 400bc20:	0023883a 	mov	r17,zero
 400bc24:	05400284 	movi	r21,10
 400bc28:	00000906 	br	400bc50 <__fputwc+0x90>
 400bc2c:	80800017 	ldw	r2,0(r16)
 400bc30:	11400005 	stb	r5,0(r2)
 400bc34:	80c00017 	ldw	r3,0(r16)
 400bc38:	18c00044 	addi	r3,r3,1
 400bc3c:	80c00015 	stw	r3,0(r16)
 400bc40:	8c400044 	addi	r17,r17,1
 400bc44:	dc45883a 	add	r2,sp,r17
 400bc48:	8d00112e 	bgeu	r17,r20,400bc90 <__fputwc+0xd0>
 400bc4c:	11400003 	ldbu	r5,0(r2)
 400bc50:	80c00217 	ldw	r3,8(r16)
 400bc54:	18ffffc4 	addi	r3,r3,-1
 400bc58:	80c00215 	stw	r3,8(r16)
 400bc5c:	183ff30e 	bge	r3,zero,400bc2c <__alt_data_end+0xfc00bc2c>
 400bc60:	80800617 	ldw	r2,24(r16)
 400bc64:	18801916 	blt	r3,r2,400bccc <__fputwc+0x10c>
 400bc68:	80800017 	ldw	r2,0(r16)
 400bc6c:	11400005 	stb	r5,0(r2)
 400bc70:	80800017 	ldw	r2,0(r16)
 400bc74:	10c00003 	ldbu	r3,0(r2)
 400bc78:	10800044 	addi	r2,r2,1
 400bc7c:	1d402326 	beq	r3,r21,400bd0c <__fputwc+0x14c>
 400bc80:	80800015 	stw	r2,0(r16)
 400bc84:	8c400044 	addi	r17,r17,1
 400bc88:	dc45883a 	add	r2,sp,r17
 400bc8c:	8d3fef36 	bltu	r17,r20,400bc4c <__alt_data_end+0xfc00bc4c>
 400bc90:	9005883a 	mov	r2,r18
 400bc94:	00000406 	br	400bca8 <__fputwc+0xe8>
 400bc98:	80c0030b 	ldhu	r3,12(r16)
 400bc9c:	a005883a 	mov	r2,r20
 400bca0:	18c01014 	ori	r3,r3,64
 400bca4:	80c0030d 	sth	r3,12(r16)
 400bca8:	dfc00717 	ldw	ra,28(sp)
 400bcac:	dd400617 	ldw	r21,24(sp)
 400bcb0:	dd000517 	ldw	r20,20(sp)
 400bcb4:	dcc00417 	ldw	r19,16(sp)
 400bcb8:	dc800317 	ldw	r18,12(sp)
 400bcbc:	dc400217 	ldw	r17,8(sp)
 400bcc0:	dc000117 	ldw	r16,4(sp)
 400bcc4:	dec00804 	addi	sp,sp,32
 400bcc8:	f800283a 	ret
 400bccc:	800d883a 	mov	r6,r16
 400bcd0:	29403fcc 	andi	r5,r5,255
 400bcd4:	9809883a 	mov	r4,r19
 400bcd8:	400bf380 	call	400bf38 <__swbuf_r>
 400bcdc:	10bfffe0 	cmpeqi	r2,r2,-1
 400bce0:	10803fcc 	andi	r2,r2,255
 400bce4:	103fd626 	beq	r2,zero,400bc40 <__alt_data_end+0xfc00bc40>
 400bce8:	00bfffc4 	movi	r2,-1
 400bcec:	003fee06 	br	400bca8 <__alt_data_end+0xfc00bca8>
 400bcf0:	90ffffc4 	addi	r3,r18,-1
 400bcf4:	01003f84 	movi	r4,254
 400bcf8:	20ffbf36 	bltu	r4,r3,400bbf8 <__alt_data_end+0xfc00bbf8>
 400bcfc:	900b883a 	mov	r5,r18
 400bd00:	dc800005 	stb	r18,0(sp)
 400bd04:	1029883a 	mov	r20,r2
 400bd08:	003fc506 	br	400bc20 <__alt_data_end+0xfc00bc20>
 400bd0c:	800d883a 	mov	r6,r16
 400bd10:	a80b883a 	mov	r5,r21
 400bd14:	9809883a 	mov	r4,r19
 400bd18:	400bf380 	call	400bf38 <__swbuf_r>
 400bd1c:	10bfffe0 	cmpeqi	r2,r2,-1
 400bd20:	003fef06 	br	400bce0 <__alt_data_end+0xfc00bce0>

0400bd24 <_fputwc_r>:
 400bd24:	3080030b 	ldhu	r2,12(r6)
 400bd28:	10c8000c 	andi	r3,r2,8192
 400bd2c:	1800051e 	bne	r3,zero,400bd44 <_fputwc_r+0x20>
 400bd30:	30c01917 	ldw	r3,100(r6)
 400bd34:	10880014 	ori	r2,r2,8192
 400bd38:	3080030d 	sth	r2,12(r6)
 400bd3c:	18880014 	ori	r2,r3,8192
 400bd40:	30801915 	stw	r2,100(r6)
 400bd44:	400bbc01 	jmpi	400bbc0 <__fputwc>

0400bd48 <fputwc>:
 400bd48:	008100f4 	movhi	r2,1027
 400bd4c:	defffc04 	addi	sp,sp,-16
 400bd50:	1098bc04 	addi	r2,r2,25328
 400bd54:	dc000115 	stw	r16,4(sp)
 400bd58:	14000017 	ldw	r16,0(r2)
 400bd5c:	dc400215 	stw	r17,8(sp)
 400bd60:	dfc00315 	stw	ra,12(sp)
 400bd64:	2023883a 	mov	r17,r4
 400bd68:	80000226 	beq	r16,zero,400bd74 <fputwc+0x2c>
 400bd6c:	80800e17 	ldw	r2,56(r16)
 400bd70:	10001026 	beq	r2,zero,400bdb4 <fputwc+0x6c>
 400bd74:	2880030b 	ldhu	r2,12(r5)
 400bd78:	10c8000c 	andi	r3,r2,8192
 400bd7c:	1800051e 	bne	r3,zero,400bd94 <fputwc+0x4c>
 400bd80:	28c01917 	ldw	r3,100(r5)
 400bd84:	10880014 	ori	r2,r2,8192
 400bd88:	2880030d 	sth	r2,12(r5)
 400bd8c:	18880014 	ori	r2,r3,8192
 400bd90:	28801915 	stw	r2,100(r5)
 400bd94:	280d883a 	mov	r6,r5
 400bd98:	8009883a 	mov	r4,r16
 400bd9c:	880b883a 	mov	r5,r17
 400bda0:	dfc00317 	ldw	ra,12(sp)
 400bda4:	dc400217 	ldw	r17,8(sp)
 400bda8:	dc000117 	ldw	r16,4(sp)
 400bdac:	dec00404 	addi	sp,sp,16
 400bdb0:	400bbc01 	jmpi	400bbc0 <__fputwc>
 400bdb4:	8009883a 	mov	r4,r16
 400bdb8:	d9400015 	stw	r5,0(sp)
 400bdbc:	40070a00 	call	40070a0 <__sinit>
 400bdc0:	d9400017 	ldw	r5,0(sp)
 400bdc4:	003feb06 	br	400bd74 <__alt_data_end+0xfc00bd74>

0400bdc8 <_fstat_r>:
 400bdc8:	defffd04 	addi	sp,sp,-12
 400bdcc:	2805883a 	mov	r2,r5
 400bdd0:	dc000015 	stw	r16,0(sp)
 400bdd4:	04010134 	movhi	r16,1028
 400bdd8:	dc400115 	stw	r17,4(sp)
 400bddc:	84257c04 	addi	r16,r16,-27152
 400bde0:	2023883a 	mov	r17,r4
 400bde4:	300b883a 	mov	r5,r6
 400bde8:	1009883a 	mov	r4,r2
 400bdec:	dfc00215 	stw	ra,8(sp)
 400bdf0:	80000015 	stw	zero,0(r16)
 400bdf4:	400f6300 	call	400f630 <fstat>
 400bdf8:	00ffffc4 	movi	r3,-1
 400bdfc:	10c00526 	beq	r2,r3,400be14 <_fstat_r+0x4c>
 400be00:	dfc00217 	ldw	ra,8(sp)
 400be04:	dc400117 	ldw	r17,4(sp)
 400be08:	dc000017 	ldw	r16,0(sp)
 400be0c:	dec00304 	addi	sp,sp,12
 400be10:	f800283a 	ret
 400be14:	80c00017 	ldw	r3,0(r16)
 400be18:	183ff926 	beq	r3,zero,400be00 <__alt_data_end+0xfc00be00>
 400be1c:	88c00015 	stw	r3,0(r17)
 400be20:	003ff706 	br	400be00 <__alt_data_end+0xfc00be00>

0400be24 <_isatty_r>:
 400be24:	defffd04 	addi	sp,sp,-12
 400be28:	dc000015 	stw	r16,0(sp)
 400be2c:	04010134 	movhi	r16,1028
 400be30:	dc400115 	stw	r17,4(sp)
 400be34:	84257c04 	addi	r16,r16,-27152
 400be38:	2023883a 	mov	r17,r4
 400be3c:	2809883a 	mov	r4,r5
 400be40:	dfc00215 	stw	ra,8(sp)
 400be44:	80000015 	stw	zero,0(r16)
 400be48:	400f9bc0 	call	400f9bc <isatty>
 400be4c:	00ffffc4 	movi	r3,-1
 400be50:	10c00526 	beq	r2,r3,400be68 <_isatty_r+0x44>
 400be54:	dfc00217 	ldw	ra,8(sp)
 400be58:	dc400117 	ldw	r17,4(sp)
 400be5c:	dc000017 	ldw	r16,0(sp)
 400be60:	dec00304 	addi	sp,sp,12
 400be64:	f800283a 	ret
 400be68:	80c00017 	ldw	r3,0(r16)
 400be6c:	183ff926 	beq	r3,zero,400be54 <__alt_data_end+0xfc00be54>
 400be70:	88c00015 	stw	r3,0(r17)
 400be74:	003ff706 	br	400be54 <__alt_data_end+0xfc00be54>

0400be78 <_lseek_r>:
 400be78:	defffd04 	addi	sp,sp,-12
 400be7c:	2805883a 	mov	r2,r5
 400be80:	dc000015 	stw	r16,0(sp)
 400be84:	04010134 	movhi	r16,1028
 400be88:	dc400115 	stw	r17,4(sp)
 400be8c:	300b883a 	mov	r5,r6
 400be90:	84257c04 	addi	r16,r16,-27152
 400be94:	2023883a 	mov	r17,r4
 400be98:	380d883a 	mov	r6,r7
 400be9c:	1009883a 	mov	r4,r2
 400bea0:	dfc00215 	stw	ra,8(sp)
 400bea4:	80000015 	stw	zero,0(r16)
 400bea8:	400fb880 	call	400fb88 <lseek>
 400beac:	00ffffc4 	movi	r3,-1
 400beb0:	10c00526 	beq	r2,r3,400bec8 <_lseek_r+0x50>
 400beb4:	dfc00217 	ldw	ra,8(sp)
 400beb8:	dc400117 	ldw	r17,4(sp)
 400bebc:	dc000017 	ldw	r16,0(sp)
 400bec0:	dec00304 	addi	sp,sp,12
 400bec4:	f800283a 	ret
 400bec8:	80c00017 	ldw	r3,0(r16)
 400becc:	183ff926 	beq	r3,zero,400beb4 <__alt_data_end+0xfc00beb4>
 400bed0:	88c00015 	stw	r3,0(r17)
 400bed4:	003ff706 	br	400beb4 <__alt_data_end+0xfc00beb4>

0400bed8 <_read_r>:
 400bed8:	defffd04 	addi	sp,sp,-12
 400bedc:	2805883a 	mov	r2,r5
 400bee0:	dc000015 	stw	r16,0(sp)
 400bee4:	04010134 	movhi	r16,1028
 400bee8:	dc400115 	stw	r17,4(sp)
 400beec:	300b883a 	mov	r5,r6
 400bef0:	84257c04 	addi	r16,r16,-27152
 400bef4:	2023883a 	mov	r17,r4
 400bef8:	380d883a 	mov	r6,r7
 400befc:	1009883a 	mov	r4,r2
 400bf00:	dfc00215 	stw	ra,8(sp)
 400bf04:	80000015 	stw	zero,0(r16)
 400bf08:	400fd5c0 	call	400fd5c <read>
 400bf0c:	00ffffc4 	movi	r3,-1
 400bf10:	10c00526 	beq	r2,r3,400bf28 <_read_r+0x50>
 400bf14:	dfc00217 	ldw	ra,8(sp)
 400bf18:	dc400117 	ldw	r17,4(sp)
 400bf1c:	dc000017 	ldw	r16,0(sp)
 400bf20:	dec00304 	addi	sp,sp,12
 400bf24:	f800283a 	ret
 400bf28:	80c00017 	ldw	r3,0(r16)
 400bf2c:	183ff926 	beq	r3,zero,400bf14 <__alt_data_end+0xfc00bf14>
 400bf30:	88c00015 	stw	r3,0(r17)
 400bf34:	003ff706 	br	400bf14 <__alt_data_end+0xfc00bf14>

0400bf38 <__swbuf_r>:
 400bf38:	defffb04 	addi	sp,sp,-20
 400bf3c:	dcc00315 	stw	r19,12(sp)
 400bf40:	dc800215 	stw	r18,8(sp)
 400bf44:	dc000015 	stw	r16,0(sp)
 400bf48:	dfc00415 	stw	ra,16(sp)
 400bf4c:	dc400115 	stw	r17,4(sp)
 400bf50:	2025883a 	mov	r18,r4
 400bf54:	2827883a 	mov	r19,r5
 400bf58:	3021883a 	mov	r16,r6
 400bf5c:	20000226 	beq	r4,zero,400bf68 <__swbuf_r+0x30>
 400bf60:	20800e17 	ldw	r2,56(r4)
 400bf64:	10004226 	beq	r2,zero,400c070 <__swbuf_r+0x138>
 400bf68:	80800617 	ldw	r2,24(r16)
 400bf6c:	8100030b 	ldhu	r4,12(r16)
 400bf70:	80800215 	stw	r2,8(r16)
 400bf74:	2080020c 	andi	r2,r4,8
 400bf78:	10003626 	beq	r2,zero,400c054 <__swbuf_r+0x11c>
 400bf7c:	80c00417 	ldw	r3,16(r16)
 400bf80:	18003426 	beq	r3,zero,400c054 <__swbuf_r+0x11c>
 400bf84:	2088000c 	andi	r2,r4,8192
 400bf88:	9c403fcc 	andi	r17,r19,255
 400bf8c:	10001a26 	beq	r2,zero,400bff8 <__swbuf_r+0xc0>
 400bf90:	80800017 	ldw	r2,0(r16)
 400bf94:	81000517 	ldw	r4,20(r16)
 400bf98:	10c7c83a 	sub	r3,r2,r3
 400bf9c:	1900200e 	bge	r3,r4,400c020 <__swbuf_r+0xe8>
 400bfa0:	18c00044 	addi	r3,r3,1
 400bfa4:	81000217 	ldw	r4,8(r16)
 400bfa8:	11400044 	addi	r5,r2,1
 400bfac:	81400015 	stw	r5,0(r16)
 400bfb0:	213fffc4 	addi	r4,r4,-1
 400bfb4:	81000215 	stw	r4,8(r16)
 400bfb8:	14c00005 	stb	r19,0(r2)
 400bfbc:	80800517 	ldw	r2,20(r16)
 400bfc0:	10c01e26 	beq	r2,r3,400c03c <__swbuf_r+0x104>
 400bfc4:	8080030b 	ldhu	r2,12(r16)
 400bfc8:	1080004c 	andi	r2,r2,1
 400bfcc:	10000226 	beq	r2,zero,400bfd8 <__swbuf_r+0xa0>
 400bfd0:	00800284 	movi	r2,10
 400bfd4:	88801926 	beq	r17,r2,400c03c <__swbuf_r+0x104>
 400bfd8:	8805883a 	mov	r2,r17
 400bfdc:	dfc00417 	ldw	ra,16(sp)
 400bfe0:	dcc00317 	ldw	r19,12(sp)
 400bfe4:	dc800217 	ldw	r18,8(sp)
 400bfe8:	dc400117 	ldw	r17,4(sp)
 400bfec:	dc000017 	ldw	r16,0(sp)
 400bff0:	dec00504 	addi	sp,sp,20
 400bff4:	f800283a 	ret
 400bff8:	81401917 	ldw	r5,100(r16)
 400bffc:	00b7ffc4 	movi	r2,-8193
 400c000:	21080014 	ori	r4,r4,8192
 400c004:	2884703a 	and	r2,r5,r2
 400c008:	80801915 	stw	r2,100(r16)
 400c00c:	80800017 	ldw	r2,0(r16)
 400c010:	8100030d 	sth	r4,12(r16)
 400c014:	81000517 	ldw	r4,20(r16)
 400c018:	10c7c83a 	sub	r3,r2,r3
 400c01c:	193fe016 	blt	r3,r4,400bfa0 <__alt_data_end+0xfc00bfa0>
 400c020:	800b883a 	mov	r5,r16
 400c024:	9009883a 	mov	r4,r18
 400c028:	4006cc40 	call	4006cc4 <_fflush_r>
 400c02c:	1000071e 	bne	r2,zero,400c04c <__swbuf_r+0x114>
 400c030:	80800017 	ldw	r2,0(r16)
 400c034:	00c00044 	movi	r3,1
 400c038:	003fda06 	br	400bfa4 <__alt_data_end+0xfc00bfa4>
 400c03c:	800b883a 	mov	r5,r16
 400c040:	9009883a 	mov	r4,r18
 400c044:	4006cc40 	call	4006cc4 <_fflush_r>
 400c048:	103fe326 	beq	r2,zero,400bfd8 <__alt_data_end+0xfc00bfd8>
 400c04c:	00bfffc4 	movi	r2,-1
 400c050:	003fe206 	br	400bfdc <__alt_data_end+0xfc00bfdc>
 400c054:	800b883a 	mov	r5,r16
 400c058:	9009883a 	mov	r4,r18
 400c05c:	40050cc0 	call	40050cc <__swsetup_r>
 400c060:	103ffa1e 	bne	r2,zero,400c04c <__alt_data_end+0xfc00c04c>
 400c064:	8100030b 	ldhu	r4,12(r16)
 400c068:	80c00417 	ldw	r3,16(r16)
 400c06c:	003fc506 	br	400bf84 <__alt_data_end+0xfc00bf84>
 400c070:	40070a00 	call	40070a0 <__sinit>
 400c074:	003fbc06 	br	400bf68 <__alt_data_end+0xfc00bf68>

0400c078 <__swbuf>:
 400c078:	008100f4 	movhi	r2,1027
 400c07c:	1098bc04 	addi	r2,r2,25328
 400c080:	280d883a 	mov	r6,r5
 400c084:	200b883a 	mov	r5,r4
 400c088:	11000017 	ldw	r4,0(r2)
 400c08c:	400bf381 	jmpi	400bf38 <__swbuf_r>

0400c090 <_wcrtomb_r>:
 400c090:	defff604 	addi	sp,sp,-40
 400c094:	008100f4 	movhi	r2,1027
 400c098:	dc800815 	stw	r18,32(sp)
 400c09c:	dc400715 	stw	r17,28(sp)
 400c0a0:	dc000615 	stw	r16,24(sp)
 400c0a4:	1098c004 	addi	r2,r2,25344
 400c0a8:	dfc00915 	stw	ra,36(sp)
 400c0ac:	2021883a 	mov	r16,r4
 400c0b0:	3823883a 	mov	r17,r7
 400c0b4:	14800017 	ldw	r18,0(r2)
 400c0b8:	28001426 	beq	r5,zero,400c10c <_wcrtomb_r+0x7c>
 400c0bc:	d9400415 	stw	r5,16(sp)
 400c0c0:	d9800515 	stw	r6,20(sp)
 400c0c4:	4007be40 	call	4007be4 <__locale_charset>
 400c0c8:	d9800517 	ldw	r6,20(sp)
 400c0cc:	d9400417 	ldw	r5,16(sp)
 400c0d0:	100f883a 	mov	r7,r2
 400c0d4:	dc400015 	stw	r17,0(sp)
 400c0d8:	8009883a 	mov	r4,r16
 400c0dc:	903ee83a 	callr	r18
 400c0e0:	00ffffc4 	movi	r3,-1
 400c0e4:	10c0031e 	bne	r2,r3,400c0f4 <_wcrtomb_r+0x64>
 400c0e8:	88000015 	stw	zero,0(r17)
 400c0ec:	00c02284 	movi	r3,138
 400c0f0:	80c00015 	stw	r3,0(r16)
 400c0f4:	dfc00917 	ldw	ra,36(sp)
 400c0f8:	dc800817 	ldw	r18,32(sp)
 400c0fc:	dc400717 	ldw	r17,28(sp)
 400c100:	dc000617 	ldw	r16,24(sp)
 400c104:	dec00a04 	addi	sp,sp,40
 400c108:	f800283a 	ret
 400c10c:	4007be40 	call	4007be4 <__locale_charset>
 400c110:	100f883a 	mov	r7,r2
 400c114:	dc400015 	stw	r17,0(sp)
 400c118:	000d883a 	mov	r6,zero
 400c11c:	d9400104 	addi	r5,sp,4
 400c120:	8009883a 	mov	r4,r16
 400c124:	903ee83a 	callr	r18
 400c128:	003fed06 	br	400c0e0 <__alt_data_end+0xfc00c0e0>

0400c12c <wcrtomb>:
 400c12c:	defff604 	addi	sp,sp,-40
 400c130:	008100f4 	movhi	r2,1027
 400c134:	dc800615 	stw	r18,24(sp)
 400c138:	dc400515 	stw	r17,20(sp)
 400c13c:	1098bc04 	addi	r2,r2,25328
 400c140:	dfc00915 	stw	ra,36(sp)
 400c144:	dd000815 	stw	r20,32(sp)
 400c148:	dcc00715 	stw	r19,28(sp)
 400c14c:	dc000415 	stw	r16,16(sp)
 400c150:	3025883a 	mov	r18,r6
 400c154:	14400017 	ldw	r17,0(r2)
 400c158:	20001926 	beq	r4,zero,400c1c0 <wcrtomb+0x94>
 400c15c:	008100f4 	movhi	r2,1027
 400c160:	1098c004 	addi	r2,r2,25344
 400c164:	15000017 	ldw	r20,0(r2)
 400c168:	2021883a 	mov	r16,r4
 400c16c:	2827883a 	mov	r19,r5
 400c170:	4007be40 	call	4007be4 <__locale_charset>
 400c174:	100f883a 	mov	r7,r2
 400c178:	dc800015 	stw	r18,0(sp)
 400c17c:	980d883a 	mov	r6,r19
 400c180:	800b883a 	mov	r5,r16
 400c184:	8809883a 	mov	r4,r17
 400c188:	a03ee83a 	callr	r20
 400c18c:	00ffffc4 	movi	r3,-1
 400c190:	10c0031e 	bne	r2,r3,400c1a0 <wcrtomb+0x74>
 400c194:	90000015 	stw	zero,0(r18)
 400c198:	00c02284 	movi	r3,138
 400c19c:	88c00015 	stw	r3,0(r17)
 400c1a0:	dfc00917 	ldw	ra,36(sp)
 400c1a4:	dd000817 	ldw	r20,32(sp)
 400c1a8:	dcc00717 	ldw	r19,28(sp)
 400c1ac:	dc800617 	ldw	r18,24(sp)
 400c1b0:	dc400517 	ldw	r17,20(sp)
 400c1b4:	dc000417 	ldw	r16,16(sp)
 400c1b8:	dec00a04 	addi	sp,sp,40
 400c1bc:	f800283a 	ret
 400c1c0:	008100f4 	movhi	r2,1027
 400c1c4:	1098c004 	addi	r2,r2,25344
 400c1c8:	14000017 	ldw	r16,0(r2)
 400c1cc:	4007be40 	call	4007be4 <__locale_charset>
 400c1d0:	100f883a 	mov	r7,r2
 400c1d4:	dc800015 	stw	r18,0(sp)
 400c1d8:	000d883a 	mov	r6,zero
 400c1dc:	d9400104 	addi	r5,sp,4
 400c1e0:	8809883a 	mov	r4,r17
 400c1e4:	803ee83a 	callr	r16
 400c1e8:	003fe806 	br	400c18c <__alt_data_end+0xfc00c18c>

0400c1ec <__ascii_wctomb>:
 400c1ec:	28000526 	beq	r5,zero,400c204 <__ascii_wctomb+0x18>
 400c1f0:	00803fc4 	movi	r2,255
 400c1f4:	11800536 	bltu	r2,r6,400c20c <__ascii_wctomb+0x20>
 400c1f8:	29800005 	stb	r6,0(r5)
 400c1fc:	00800044 	movi	r2,1
 400c200:	f800283a 	ret
 400c204:	0005883a 	mov	r2,zero
 400c208:	f800283a 	ret
 400c20c:	00802284 	movi	r2,138
 400c210:	20800015 	stw	r2,0(r4)
 400c214:	00bfffc4 	movi	r2,-1
 400c218:	f800283a 	ret

0400c21c <_wctomb_r>:
 400c21c:	008100f4 	movhi	r2,1027
 400c220:	defff904 	addi	sp,sp,-28
 400c224:	1098c004 	addi	r2,r2,25344
 400c228:	dfc00615 	stw	ra,24(sp)
 400c22c:	dc400515 	stw	r17,20(sp)
 400c230:	dc000415 	stw	r16,16(sp)
 400c234:	3823883a 	mov	r17,r7
 400c238:	14000017 	ldw	r16,0(r2)
 400c23c:	d9000115 	stw	r4,4(sp)
 400c240:	d9400215 	stw	r5,8(sp)
 400c244:	d9800315 	stw	r6,12(sp)
 400c248:	4007be40 	call	4007be4 <__locale_charset>
 400c24c:	d9800317 	ldw	r6,12(sp)
 400c250:	d9400217 	ldw	r5,8(sp)
 400c254:	d9000117 	ldw	r4,4(sp)
 400c258:	100f883a 	mov	r7,r2
 400c25c:	dc400015 	stw	r17,0(sp)
 400c260:	803ee83a 	callr	r16
 400c264:	dfc00617 	ldw	ra,24(sp)
 400c268:	dc400517 	ldw	r17,20(sp)
 400c26c:	dc000417 	ldw	r16,16(sp)
 400c270:	dec00704 	addi	sp,sp,28
 400c274:	f800283a 	ret

0400c278 <__udivdi3>:
 400c278:	defff504 	addi	sp,sp,-44
 400c27c:	dcc00415 	stw	r19,16(sp)
 400c280:	dc000115 	stw	r16,4(sp)
 400c284:	dfc00a15 	stw	ra,40(sp)
 400c288:	df000915 	stw	fp,36(sp)
 400c28c:	ddc00815 	stw	r23,32(sp)
 400c290:	dd800715 	stw	r22,28(sp)
 400c294:	dd400615 	stw	r21,24(sp)
 400c298:	dd000515 	stw	r20,20(sp)
 400c29c:	dc800315 	stw	r18,12(sp)
 400c2a0:	dc400215 	stw	r17,8(sp)
 400c2a4:	2027883a 	mov	r19,r4
 400c2a8:	2821883a 	mov	r16,r5
 400c2ac:	3800411e 	bne	r7,zero,400c3b4 <__udivdi3+0x13c>
 400c2b0:	3023883a 	mov	r17,r6
 400c2b4:	2025883a 	mov	r18,r4
 400c2b8:	2980522e 	bgeu	r5,r6,400c404 <__udivdi3+0x18c>
 400c2bc:	00bfffd4 	movui	r2,65535
 400c2c0:	282d883a 	mov	r22,r5
 400c2c4:	1180a836 	bltu	r2,r6,400c568 <__udivdi3+0x2f0>
 400c2c8:	00803fc4 	movi	r2,255
 400c2cc:	1185803a 	cmpltu	r2,r2,r6
 400c2d0:	100490fa 	slli	r2,r2,3
 400c2d4:	3086d83a 	srl	r3,r6,r2
 400c2d8:	010100f4 	movhi	r4,1027
 400c2dc:	210bd004 	addi	r4,r4,12096
 400c2e0:	20c7883a 	add	r3,r4,r3
 400c2e4:	18c00003 	ldbu	r3,0(r3)
 400c2e8:	1885883a 	add	r2,r3,r2
 400c2ec:	00c00804 	movi	r3,32
 400c2f0:	1887c83a 	sub	r3,r3,r2
 400c2f4:	18000526 	beq	r3,zero,400c30c <__udivdi3+0x94>
 400c2f8:	80e0983a 	sll	r16,r16,r3
 400c2fc:	9884d83a 	srl	r2,r19,r2
 400c300:	30e2983a 	sll	r17,r6,r3
 400c304:	98e4983a 	sll	r18,r19,r3
 400c308:	142cb03a 	or	r22,r2,r16
 400c30c:	882ad43a 	srli	r21,r17,16
 400c310:	b009883a 	mov	r4,r22
 400c314:	8d3fffcc 	andi	r20,r17,65535
 400c318:	a80b883a 	mov	r5,r21
 400c31c:	4002bcc0 	call	4002bcc <__umodsi3>
 400c320:	b009883a 	mov	r4,r22
 400c324:	a80b883a 	mov	r5,r21
 400c328:	1027883a 	mov	r19,r2
 400c32c:	4002b680 	call	4002b68 <__udivsi3>
 400c330:	102d883a 	mov	r22,r2
 400c334:	9826943a 	slli	r19,r19,16
 400c338:	9004d43a 	srli	r2,r18,16
 400c33c:	a5a1383a 	mul	r16,r20,r22
 400c340:	14c4b03a 	or	r2,r2,r19
 400c344:	1400052e 	bgeu	r2,r16,400c35c <__udivdi3+0xe4>
 400c348:	1445883a 	add	r2,r2,r17
 400c34c:	b0ffffc4 	addi	r3,r22,-1
 400c350:	14400136 	bltu	r2,r17,400c358 <__udivdi3+0xe0>
 400c354:	14012336 	bltu	r2,r16,400c7e4 <__udivdi3+0x56c>
 400c358:	182d883a 	mov	r22,r3
 400c35c:	1421c83a 	sub	r16,r2,r16
 400c360:	a80b883a 	mov	r5,r21
 400c364:	8009883a 	mov	r4,r16
 400c368:	4002bcc0 	call	4002bcc <__umodsi3>
 400c36c:	1027883a 	mov	r19,r2
 400c370:	a80b883a 	mov	r5,r21
 400c374:	8009883a 	mov	r4,r16
 400c378:	4002b680 	call	4002b68 <__udivsi3>
 400c37c:	9826943a 	slli	r19,r19,16
 400c380:	a0a9383a 	mul	r20,r20,r2
 400c384:	94bfffcc 	andi	r18,r18,65535
 400c388:	94e4b03a 	or	r18,r18,r19
 400c38c:	9500052e 	bgeu	r18,r20,400c3a4 <__udivdi3+0x12c>
 400c390:	8ca5883a 	add	r18,r17,r18
 400c394:	10ffffc4 	addi	r3,r2,-1
 400c398:	9440f136 	bltu	r18,r17,400c760 <__udivdi3+0x4e8>
 400c39c:	9500f02e 	bgeu	r18,r20,400c760 <__udivdi3+0x4e8>
 400c3a0:	10bfff84 	addi	r2,r2,-2
 400c3a4:	b00c943a 	slli	r6,r22,16
 400c3a8:	0007883a 	mov	r3,zero
 400c3ac:	3084b03a 	or	r2,r6,r2
 400c3b0:	00005906 	br	400c518 <__udivdi3+0x2a0>
 400c3b4:	29c05636 	bltu	r5,r7,400c510 <__udivdi3+0x298>
 400c3b8:	00bfffd4 	movui	r2,65535
 400c3bc:	11c0622e 	bgeu	r2,r7,400c548 <__udivdi3+0x2d0>
 400c3c0:	00804034 	movhi	r2,256
 400c3c4:	10bfffc4 	addi	r2,r2,-1
 400c3c8:	11c0ee36 	bltu	r2,r7,400c784 <__udivdi3+0x50c>
 400c3cc:	00800404 	movi	r2,16
 400c3d0:	3886d83a 	srl	r3,r7,r2
 400c3d4:	010100f4 	movhi	r4,1027
 400c3d8:	210bd004 	addi	r4,r4,12096
 400c3dc:	20c7883a 	add	r3,r4,r3
 400c3e0:	18c00003 	ldbu	r3,0(r3)
 400c3e4:	05400804 	movi	r21,32
 400c3e8:	1885883a 	add	r2,r3,r2
 400c3ec:	a8abc83a 	sub	r21,r21,r2
 400c3f0:	a800621e 	bne	r21,zero,400c57c <__udivdi3+0x304>
 400c3f4:	3c00e936 	bltu	r7,r16,400c79c <__udivdi3+0x524>
 400c3f8:	9985403a 	cmpgeu	r2,r19,r6
 400c3fc:	0007883a 	mov	r3,zero
 400c400:	00004506 	br	400c518 <__udivdi3+0x2a0>
 400c404:	3000041e 	bne	r6,zero,400c418 <__udivdi3+0x1a0>
 400c408:	000b883a 	mov	r5,zero
 400c40c:	01000044 	movi	r4,1
 400c410:	4002b680 	call	4002b68 <__udivsi3>
 400c414:	1023883a 	mov	r17,r2
 400c418:	00bfffd4 	movui	r2,65535
 400c41c:	14404e2e 	bgeu	r2,r17,400c558 <__udivdi3+0x2e0>
 400c420:	00804034 	movhi	r2,256
 400c424:	10bfffc4 	addi	r2,r2,-1
 400c428:	1440d836 	bltu	r2,r17,400c78c <__udivdi3+0x514>
 400c42c:	00800404 	movi	r2,16
 400c430:	8886d83a 	srl	r3,r17,r2
 400c434:	010100f4 	movhi	r4,1027
 400c438:	210bd004 	addi	r4,r4,12096
 400c43c:	20c7883a 	add	r3,r4,r3
 400c440:	18c00003 	ldbu	r3,0(r3)
 400c444:	1885883a 	add	r2,r3,r2
 400c448:	00c00804 	movi	r3,32
 400c44c:	1887c83a 	sub	r3,r3,r2
 400c450:	18008f1e 	bne	r3,zero,400c690 <__udivdi3+0x418>
 400c454:	882ad43a 	srli	r21,r17,16
 400c458:	8461c83a 	sub	r16,r16,r17
 400c45c:	8d3fffcc 	andi	r20,r17,65535
 400c460:	00c00044 	movi	r3,1
 400c464:	8009883a 	mov	r4,r16
 400c468:	a80b883a 	mov	r5,r21
 400c46c:	d8c00015 	stw	r3,0(sp)
 400c470:	4002bcc0 	call	4002bcc <__umodsi3>
 400c474:	8009883a 	mov	r4,r16
 400c478:	a80b883a 	mov	r5,r21
 400c47c:	1027883a 	mov	r19,r2
 400c480:	4002b680 	call	4002b68 <__udivsi3>
 400c484:	9826943a 	slli	r19,r19,16
 400c488:	9008d43a 	srli	r4,r18,16
 400c48c:	1521383a 	mul	r16,r2,r20
 400c490:	102d883a 	mov	r22,r2
 400c494:	24c8b03a 	or	r4,r4,r19
 400c498:	d8c00017 	ldw	r3,0(sp)
 400c49c:	2400052e 	bgeu	r4,r16,400c4b4 <__udivdi3+0x23c>
 400c4a0:	2449883a 	add	r4,r4,r17
 400c4a4:	b0bfffc4 	addi	r2,r22,-1
 400c4a8:	24400136 	bltu	r4,r17,400c4b0 <__udivdi3+0x238>
 400c4ac:	2400ca36 	bltu	r4,r16,400c7d8 <__udivdi3+0x560>
 400c4b0:	102d883a 	mov	r22,r2
 400c4b4:	2421c83a 	sub	r16,r4,r16
 400c4b8:	a80b883a 	mov	r5,r21
 400c4bc:	8009883a 	mov	r4,r16
 400c4c0:	d8c00015 	stw	r3,0(sp)
 400c4c4:	4002bcc0 	call	4002bcc <__umodsi3>
 400c4c8:	1027883a 	mov	r19,r2
 400c4cc:	a80b883a 	mov	r5,r21
 400c4d0:	8009883a 	mov	r4,r16
 400c4d4:	4002b680 	call	4002b68 <__udivsi3>
 400c4d8:	9826943a 	slli	r19,r19,16
 400c4dc:	1529383a 	mul	r20,r2,r20
 400c4e0:	94bfffcc 	andi	r18,r18,65535
 400c4e4:	94e4b03a 	or	r18,r18,r19
 400c4e8:	d8c00017 	ldw	r3,0(sp)
 400c4ec:	9500052e 	bgeu	r18,r20,400c504 <__udivdi3+0x28c>
 400c4f0:	8ca5883a 	add	r18,r17,r18
 400c4f4:	113fffc4 	addi	r4,r2,-1
 400c4f8:	94409736 	bltu	r18,r17,400c758 <__udivdi3+0x4e0>
 400c4fc:	9500962e 	bgeu	r18,r20,400c758 <__udivdi3+0x4e0>
 400c500:	10bfff84 	addi	r2,r2,-2
 400c504:	b00c943a 	slli	r6,r22,16
 400c508:	3084b03a 	or	r2,r6,r2
 400c50c:	00000206 	br	400c518 <__udivdi3+0x2a0>
 400c510:	0007883a 	mov	r3,zero
 400c514:	0005883a 	mov	r2,zero
 400c518:	dfc00a17 	ldw	ra,40(sp)
 400c51c:	df000917 	ldw	fp,36(sp)
 400c520:	ddc00817 	ldw	r23,32(sp)
 400c524:	dd800717 	ldw	r22,28(sp)
 400c528:	dd400617 	ldw	r21,24(sp)
 400c52c:	dd000517 	ldw	r20,20(sp)
 400c530:	dcc00417 	ldw	r19,16(sp)
 400c534:	dc800317 	ldw	r18,12(sp)
 400c538:	dc400217 	ldw	r17,8(sp)
 400c53c:	dc000117 	ldw	r16,4(sp)
 400c540:	dec00b04 	addi	sp,sp,44
 400c544:	f800283a 	ret
 400c548:	00803fc4 	movi	r2,255
 400c54c:	11c5803a 	cmpltu	r2,r2,r7
 400c550:	100490fa 	slli	r2,r2,3
 400c554:	003f9e06 	br	400c3d0 <__alt_data_end+0xfc00c3d0>
 400c558:	00803fc4 	movi	r2,255
 400c55c:	1445803a 	cmpltu	r2,r2,r17
 400c560:	100490fa 	slli	r2,r2,3
 400c564:	003fb206 	br	400c430 <__alt_data_end+0xfc00c430>
 400c568:	00804034 	movhi	r2,256
 400c56c:	10bfffc4 	addi	r2,r2,-1
 400c570:	11808836 	bltu	r2,r6,400c794 <__udivdi3+0x51c>
 400c574:	00800404 	movi	r2,16
 400c578:	003f5606 	br	400c2d4 <__alt_data_end+0xfc00c2d4>
 400c57c:	30aed83a 	srl	r23,r6,r2
 400c580:	3d4e983a 	sll	r7,r7,r21
 400c584:	80acd83a 	srl	r22,r16,r2
 400c588:	9884d83a 	srl	r2,r19,r2
 400c58c:	3deeb03a 	or	r23,r7,r23
 400c590:	b824d43a 	srli	r18,r23,16
 400c594:	8560983a 	sll	r16,r16,r21
 400c598:	b009883a 	mov	r4,r22
 400c59c:	900b883a 	mov	r5,r18
 400c5a0:	3568983a 	sll	r20,r6,r21
 400c5a4:	1420b03a 	or	r16,r2,r16
 400c5a8:	4002bcc0 	call	4002bcc <__umodsi3>
 400c5ac:	b009883a 	mov	r4,r22
 400c5b0:	900b883a 	mov	r5,r18
 400c5b4:	1023883a 	mov	r17,r2
 400c5b8:	4002b680 	call	4002b68 <__udivsi3>
 400c5bc:	8808943a 	slli	r4,r17,16
 400c5c0:	bf3fffcc 	andi	fp,r23,65535
 400c5c4:	8006d43a 	srli	r3,r16,16
 400c5c8:	e0a3383a 	mul	r17,fp,r2
 400c5cc:	100d883a 	mov	r6,r2
 400c5d0:	1906b03a 	or	r3,r3,r4
 400c5d4:	1c40042e 	bgeu	r3,r17,400c5e8 <__udivdi3+0x370>
 400c5d8:	1dc7883a 	add	r3,r3,r23
 400c5dc:	10bfffc4 	addi	r2,r2,-1
 400c5e0:	1dc0752e 	bgeu	r3,r23,400c7b8 <__udivdi3+0x540>
 400c5e4:	100d883a 	mov	r6,r2
 400c5e8:	1c63c83a 	sub	r17,r3,r17
 400c5ec:	900b883a 	mov	r5,r18
 400c5f0:	8809883a 	mov	r4,r17
 400c5f4:	d9800015 	stw	r6,0(sp)
 400c5f8:	4002bcc0 	call	4002bcc <__umodsi3>
 400c5fc:	102d883a 	mov	r22,r2
 400c600:	8809883a 	mov	r4,r17
 400c604:	900b883a 	mov	r5,r18
 400c608:	4002b680 	call	4002b68 <__udivsi3>
 400c60c:	b02c943a 	slli	r22,r22,16
 400c610:	e089383a 	mul	r4,fp,r2
 400c614:	843fffcc 	andi	r16,r16,65535
 400c618:	85a0b03a 	or	r16,r16,r22
 400c61c:	d9800017 	ldw	r6,0(sp)
 400c620:	8100042e 	bgeu	r16,r4,400c634 <__udivdi3+0x3bc>
 400c624:	85e1883a 	add	r16,r16,r23
 400c628:	10ffffc4 	addi	r3,r2,-1
 400c62c:	85c05e2e 	bgeu	r16,r23,400c7a8 <__udivdi3+0x530>
 400c630:	1805883a 	mov	r2,r3
 400c634:	300c943a 	slli	r6,r6,16
 400c638:	a17fffcc 	andi	r5,r20,65535
 400c63c:	a028d43a 	srli	r20,r20,16
 400c640:	3084b03a 	or	r2,r6,r2
 400c644:	10ffffcc 	andi	r3,r2,65535
 400c648:	100cd43a 	srli	r6,r2,16
 400c64c:	194f383a 	mul	r7,r3,r5
 400c650:	1d07383a 	mul	r3,r3,r20
 400c654:	314b383a 	mul	r5,r6,r5
 400c658:	3810d43a 	srli	r8,r7,16
 400c65c:	8121c83a 	sub	r16,r16,r4
 400c660:	1947883a 	add	r3,r3,r5
 400c664:	40c7883a 	add	r3,r8,r3
 400c668:	350d383a 	mul	r6,r6,r20
 400c66c:	1940022e 	bgeu	r3,r5,400c678 <__udivdi3+0x400>
 400c670:	01000074 	movhi	r4,1
 400c674:	310d883a 	add	r6,r6,r4
 400c678:	1828d43a 	srli	r20,r3,16
 400c67c:	a18d883a 	add	r6,r20,r6
 400c680:	81803e36 	bltu	r16,r6,400c77c <__udivdi3+0x504>
 400c684:	81803826 	beq	r16,r6,400c768 <__udivdi3+0x4f0>
 400c688:	0007883a 	mov	r3,zero
 400c68c:	003fa206 	br	400c518 <__alt_data_end+0xfc00c518>
 400c690:	88e2983a 	sll	r17,r17,r3
 400c694:	80a8d83a 	srl	r20,r16,r2
 400c698:	80e0983a 	sll	r16,r16,r3
 400c69c:	882ad43a 	srli	r21,r17,16
 400c6a0:	9884d83a 	srl	r2,r19,r2
 400c6a4:	a009883a 	mov	r4,r20
 400c6a8:	a80b883a 	mov	r5,r21
 400c6ac:	142eb03a 	or	r23,r2,r16
 400c6b0:	98e4983a 	sll	r18,r19,r3
 400c6b4:	4002bcc0 	call	4002bcc <__umodsi3>
 400c6b8:	a009883a 	mov	r4,r20
 400c6bc:	a80b883a 	mov	r5,r21
 400c6c0:	1021883a 	mov	r16,r2
 400c6c4:	4002b680 	call	4002b68 <__udivsi3>
 400c6c8:	1039883a 	mov	fp,r2
 400c6cc:	8d3fffcc 	andi	r20,r17,65535
 400c6d0:	8020943a 	slli	r16,r16,16
 400c6d4:	b804d43a 	srli	r2,r23,16
 400c6d8:	a72d383a 	mul	r22,r20,fp
 400c6dc:	1404b03a 	or	r2,r2,r16
 400c6e0:	1580062e 	bgeu	r2,r22,400c6fc <__udivdi3+0x484>
 400c6e4:	1445883a 	add	r2,r2,r17
 400c6e8:	e0ffffc4 	addi	r3,fp,-1
 400c6ec:	14403836 	bltu	r2,r17,400c7d0 <__udivdi3+0x558>
 400c6f0:	1580372e 	bgeu	r2,r22,400c7d0 <__udivdi3+0x558>
 400c6f4:	e73fff84 	addi	fp,fp,-2
 400c6f8:	1445883a 	add	r2,r2,r17
 400c6fc:	15adc83a 	sub	r22,r2,r22
 400c700:	a80b883a 	mov	r5,r21
 400c704:	b009883a 	mov	r4,r22
 400c708:	4002bcc0 	call	4002bcc <__umodsi3>
 400c70c:	1027883a 	mov	r19,r2
 400c710:	b009883a 	mov	r4,r22
 400c714:	a80b883a 	mov	r5,r21
 400c718:	4002b680 	call	4002b68 <__udivsi3>
 400c71c:	9826943a 	slli	r19,r19,16
 400c720:	a0a1383a 	mul	r16,r20,r2
 400c724:	b93fffcc 	andi	r4,r23,65535
 400c728:	24c8b03a 	or	r4,r4,r19
 400c72c:	2400062e 	bgeu	r4,r16,400c748 <__udivdi3+0x4d0>
 400c730:	2449883a 	add	r4,r4,r17
 400c734:	10ffffc4 	addi	r3,r2,-1
 400c738:	24402336 	bltu	r4,r17,400c7c8 <__udivdi3+0x550>
 400c73c:	2400222e 	bgeu	r4,r16,400c7c8 <__udivdi3+0x550>
 400c740:	10bfff84 	addi	r2,r2,-2
 400c744:	2449883a 	add	r4,r4,r17
 400c748:	e038943a 	slli	fp,fp,16
 400c74c:	2421c83a 	sub	r16,r4,r16
 400c750:	e086b03a 	or	r3,fp,r2
 400c754:	003f4306 	br	400c464 <__alt_data_end+0xfc00c464>
 400c758:	2005883a 	mov	r2,r4
 400c75c:	003f6906 	br	400c504 <__alt_data_end+0xfc00c504>
 400c760:	1805883a 	mov	r2,r3
 400c764:	003f0f06 	br	400c3a4 <__alt_data_end+0xfc00c3a4>
 400c768:	1806943a 	slli	r3,r3,16
 400c76c:	9d66983a 	sll	r19,r19,r21
 400c770:	39ffffcc 	andi	r7,r7,65535
 400c774:	19c7883a 	add	r3,r3,r7
 400c778:	98ffc32e 	bgeu	r19,r3,400c688 <__alt_data_end+0xfc00c688>
 400c77c:	10bfffc4 	addi	r2,r2,-1
 400c780:	003fc106 	br	400c688 <__alt_data_end+0xfc00c688>
 400c784:	00800604 	movi	r2,24
 400c788:	003f1106 	br	400c3d0 <__alt_data_end+0xfc00c3d0>
 400c78c:	00800604 	movi	r2,24
 400c790:	003f2706 	br	400c430 <__alt_data_end+0xfc00c430>
 400c794:	00800604 	movi	r2,24
 400c798:	003ece06 	br	400c2d4 <__alt_data_end+0xfc00c2d4>
 400c79c:	0007883a 	mov	r3,zero
 400c7a0:	00800044 	movi	r2,1
 400c7a4:	003f5c06 	br	400c518 <__alt_data_end+0xfc00c518>
 400c7a8:	813fa12e 	bgeu	r16,r4,400c630 <__alt_data_end+0xfc00c630>
 400c7ac:	10bfff84 	addi	r2,r2,-2
 400c7b0:	85e1883a 	add	r16,r16,r23
 400c7b4:	003f9f06 	br	400c634 <__alt_data_end+0xfc00c634>
 400c7b8:	1c7f8a2e 	bgeu	r3,r17,400c5e4 <__alt_data_end+0xfc00c5e4>
 400c7bc:	31bfff84 	addi	r6,r6,-2
 400c7c0:	1dc7883a 	add	r3,r3,r23
 400c7c4:	003f8806 	br	400c5e8 <__alt_data_end+0xfc00c5e8>
 400c7c8:	1805883a 	mov	r2,r3
 400c7cc:	003fde06 	br	400c748 <__alt_data_end+0xfc00c748>
 400c7d0:	1839883a 	mov	fp,r3
 400c7d4:	003fc906 	br	400c6fc <__alt_data_end+0xfc00c6fc>
 400c7d8:	b5bfff84 	addi	r22,r22,-2
 400c7dc:	2449883a 	add	r4,r4,r17
 400c7e0:	003f3406 	br	400c4b4 <__alt_data_end+0xfc00c4b4>
 400c7e4:	b5bfff84 	addi	r22,r22,-2
 400c7e8:	1445883a 	add	r2,r2,r17
 400c7ec:	003edb06 	br	400c35c <__alt_data_end+0xfc00c35c>

0400c7f0 <__umoddi3>:
 400c7f0:	defff404 	addi	sp,sp,-48
 400c7f4:	df000a15 	stw	fp,40(sp)
 400c7f8:	dc400315 	stw	r17,12(sp)
 400c7fc:	dc000215 	stw	r16,8(sp)
 400c800:	dfc00b15 	stw	ra,44(sp)
 400c804:	ddc00915 	stw	r23,36(sp)
 400c808:	dd800815 	stw	r22,32(sp)
 400c80c:	dd400715 	stw	r21,28(sp)
 400c810:	dd000615 	stw	r20,24(sp)
 400c814:	dcc00515 	stw	r19,20(sp)
 400c818:	dc800415 	stw	r18,16(sp)
 400c81c:	2021883a 	mov	r16,r4
 400c820:	2823883a 	mov	r17,r5
 400c824:	2839883a 	mov	fp,r5
 400c828:	38003c1e 	bne	r7,zero,400c91c <__umoddi3+0x12c>
 400c82c:	3027883a 	mov	r19,r6
 400c830:	2029883a 	mov	r20,r4
 400c834:	2980512e 	bgeu	r5,r6,400c97c <__umoddi3+0x18c>
 400c838:	00bfffd4 	movui	r2,65535
 400c83c:	11809a36 	bltu	r2,r6,400caa8 <__umoddi3+0x2b8>
 400c840:	01003fc4 	movi	r4,255
 400c844:	2189803a 	cmpltu	r4,r4,r6
 400c848:	200890fa 	slli	r4,r4,3
 400c84c:	3104d83a 	srl	r2,r6,r4
 400c850:	00c100f4 	movhi	r3,1027
 400c854:	18cbd004 	addi	r3,r3,12096
 400c858:	1885883a 	add	r2,r3,r2
 400c85c:	10c00003 	ldbu	r3,0(r2)
 400c860:	00800804 	movi	r2,32
 400c864:	1909883a 	add	r4,r3,r4
 400c868:	1125c83a 	sub	r18,r2,r4
 400c86c:	90000526 	beq	r18,zero,400c884 <__umoddi3+0x94>
 400c870:	8ca2983a 	sll	r17,r17,r18
 400c874:	8108d83a 	srl	r4,r16,r4
 400c878:	34a6983a 	sll	r19,r6,r18
 400c87c:	84a8983a 	sll	r20,r16,r18
 400c880:	2478b03a 	or	fp,r4,r17
 400c884:	982ed43a 	srli	r23,r19,16
 400c888:	e009883a 	mov	r4,fp
 400c88c:	9dbfffcc 	andi	r22,r19,65535
 400c890:	b80b883a 	mov	r5,r23
 400c894:	4002bcc0 	call	4002bcc <__umodsi3>
 400c898:	e009883a 	mov	r4,fp
 400c89c:	b80b883a 	mov	r5,r23
 400c8a0:	102b883a 	mov	r21,r2
 400c8a4:	4002b680 	call	4002b68 <__udivsi3>
 400c8a8:	a806943a 	slli	r3,r21,16
 400c8ac:	a008d43a 	srli	r4,r20,16
 400c8b0:	b085383a 	mul	r2,r22,r2
 400c8b4:	20c8b03a 	or	r4,r4,r3
 400c8b8:	2080032e 	bgeu	r4,r2,400c8c8 <__umoddi3+0xd8>
 400c8bc:	24c9883a 	add	r4,r4,r19
 400c8c0:	24c00136 	bltu	r4,r19,400c8c8 <__umoddi3+0xd8>
 400c8c4:	20811036 	bltu	r4,r2,400cd08 <__umoddi3+0x518>
 400c8c8:	20abc83a 	sub	r21,r4,r2
 400c8cc:	b80b883a 	mov	r5,r23
 400c8d0:	a809883a 	mov	r4,r21
 400c8d4:	4002bcc0 	call	4002bcc <__umodsi3>
 400c8d8:	1023883a 	mov	r17,r2
 400c8dc:	b80b883a 	mov	r5,r23
 400c8e0:	a809883a 	mov	r4,r21
 400c8e4:	4002b680 	call	4002b68 <__udivsi3>
 400c8e8:	8822943a 	slli	r17,r17,16
 400c8ec:	b085383a 	mul	r2,r22,r2
 400c8f0:	a0ffffcc 	andi	r3,r20,65535
 400c8f4:	1c46b03a 	or	r3,r3,r17
 400c8f8:	1880042e 	bgeu	r3,r2,400c90c <__umoddi3+0x11c>
 400c8fc:	1cc7883a 	add	r3,r3,r19
 400c900:	1cc00236 	bltu	r3,r19,400c90c <__umoddi3+0x11c>
 400c904:	1880012e 	bgeu	r3,r2,400c90c <__umoddi3+0x11c>
 400c908:	1cc7883a 	add	r3,r3,r19
 400c90c:	1885c83a 	sub	r2,r3,r2
 400c910:	1484d83a 	srl	r2,r2,r18
 400c914:	0007883a 	mov	r3,zero
 400c918:	00004f06 	br	400ca58 <__umoddi3+0x268>
 400c91c:	29c04c36 	bltu	r5,r7,400ca50 <__umoddi3+0x260>
 400c920:	00bfffd4 	movui	r2,65535
 400c924:	11c0582e 	bgeu	r2,r7,400ca88 <__umoddi3+0x298>
 400c928:	00804034 	movhi	r2,256
 400c92c:	10bfffc4 	addi	r2,r2,-1
 400c930:	11c0e736 	bltu	r2,r7,400ccd0 <__umoddi3+0x4e0>
 400c934:	01000404 	movi	r4,16
 400c938:	3904d83a 	srl	r2,r7,r4
 400c93c:	00c100f4 	movhi	r3,1027
 400c940:	18cbd004 	addi	r3,r3,12096
 400c944:	1885883a 	add	r2,r3,r2
 400c948:	14c00003 	ldbu	r19,0(r2)
 400c94c:	00c00804 	movi	r3,32
 400c950:	9927883a 	add	r19,r19,r4
 400c954:	1ce9c83a 	sub	r20,r3,r19
 400c958:	a000581e 	bne	r20,zero,400cabc <__umoddi3+0x2cc>
 400c95c:	3c400136 	bltu	r7,r17,400c964 <__umoddi3+0x174>
 400c960:	8180eb36 	bltu	r16,r6,400cd10 <__umoddi3+0x520>
 400c964:	8185c83a 	sub	r2,r16,r6
 400c968:	89e3c83a 	sub	r17,r17,r7
 400c96c:	8089803a 	cmpltu	r4,r16,r2
 400c970:	8939c83a 	sub	fp,r17,r4
 400c974:	e007883a 	mov	r3,fp
 400c978:	00003706 	br	400ca58 <__umoddi3+0x268>
 400c97c:	3000041e 	bne	r6,zero,400c990 <__umoddi3+0x1a0>
 400c980:	000b883a 	mov	r5,zero
 400c984:	01000044 	movi	r4,1
 400c988:	4002b680 	call	4002b68 <__udivsi3>
 400c98c:	1027883a 	mov	r19,r2
 400c990:	00bfffd4 	movui	r2,65535
 400c994:	14c0402e 	bgeu	r2,r19,400ca98 <__umoddi3+0x2a8>
 400c998:	00804034 	movhi	r2,256
 400c99c:	10bfffc4 	addi	r2,r2,-1
 400c9a0:	14c0cd36 	bltu	r2,r19,400ccd8 <__umoddi3+0x4e8>
 400c9a4:	00800404 	movi	r2,16
 400c9a8:	9886d83a 	srl	r3,r19,r2
 400c9ac:	010100f4 	movhi	r4,1027
 400c9b0:	210bd004 	addi	r4,r4,12096
 400c9b4:	20c7883a 	add	r3,r4,r3
 400c9b8:	18c00003 	ldbu	r3,0(r3)
 400c9bc:	1887883a 	add	r3,r3,r2
 400c9c0:	00800804 	movi	r2,32
 400c9c4:	10e5c83a 	sub	r18,r2,r3
 400c9c8:	9000901e 	bne	r18,zero,400cc0c <__umoddi3+0x41c>
 400c9cc:	982cd43a 	srli	r22,r19,16
 400c9d0:	8ce3c83a 	sub	r17,r17,r19
 400c9d4:	9d7fffcc 	andi	r21,r19,65535
 400c9d8:	b00b883a 	mov	r5,r22
 400c9dc:	8809883a 	mov	r4,r17
 400c9e0:	4002bcc0 	call	4002bcc <__umodsi3>
 400c9e4:	8809883a 	mov	r4,r17
 400c9e8:	b00b883a 	mov	r5,r22
 400c9ec:	1021883a 	mov	r16,r2
 400c9f0:	4002b680 	call	4002b68 <__udivsi3>
 400c9f4:	8006943a 	slli	r3,r16,16
 400c9f8:	a008d43a 	srli	r4,r20,16
 400c9fc:	1545383a 	mul	r2,r2,r21
 400ca00:	20c8b03a 	or	r4,r4,r3
 400ca04:	2080042e 	bgeu	r4,r2,400ca18 <__umoddi3+0x228>
 400ca08:	24c9883a 	add	r4,r4,r19
 400ca0c:	24c00236 	bltu	r4,r19,400ca18 <__umoddi3+0x228>
 400ca10:	2080012e 	bgeu	r4,r2,400ca18 <__umoddi3+0x228>
 400ca14:	24c9883a 	add	r4,r4,r19
 400ca18:	20a1c83a 	sub	r16,r4,r2
 400ca1c:	b00b883a 	mov	r5,r22
 400ca20:	8009883a 	mov	r4,r16
 400ca24:	4002bcc0 	call	4002bcc <__umodsi3>
 400ca28:	1023883a 	mov	r17,r2
 400ca2c:	b00b883a 	mov	r5,r22
 400ca30:	8009883a 	mov	r4,r16
 400ca34:	4002b680 	call	4002b68 <__udivsi3>
 400ca38:	8822943a 	slli	r17,r17,16
 400ca3c:	1545383a 	mul	r2,r2,r21
 400ca40:	a53fffcc 	andi	r20,r20,65535
 400ca44:	a446b03a 	or	r3,r20,r17
 400ca48:	18bfb02e 	bgeu	r3,r2,400c90c <__alt_data_end+0xfc00c90c>
 400ca4c:	003fab06 	br	400c8fc <__alt_data_end+0xfc00c8fc>
 400ca50:	2005883a 	mov	r2,r4
 400ca54:	2807883a 	mov	r3,r5
 400ca58:	dfc00b17 	ldw	ra,44(sp)
 400ca5c:	df000a17 	ldw	fp,40(sp)
 400ca60:	ddc00917 	ldw	r23,36(sp)
 400ca64:	dd800817 	ldw	r22,32(sp)
 400ca68:	dd400717 	ldw	r21,28(sp)
 400ca6c:	dd000617 	ldw	r20,24(sp)
 400ca70:	dcc00517 	ldw	r19,20(sp)
 400ca74:	dc800417 	ldw	r18,16(sp)
 400ca78:	dc400317 	ldw	r17,12(sp)
 400ca7c:	dc000217 	ldw	r16,8(sp)
 400ca80:	dec00c04 	addi	sp,sp,48
 400ca84:	f800283a 	ret
 400ca88:	04c03fc4 	movi	r19,255
 400ca8c:	99c9803a 	cmpltu	r4,r19,r7
 400ca90:	200890fa 	slli	r4,r4,3
 400ca94:	003fa806 	br	400c938 <__alt_data_end+0xfc00c938>
 400ca98:	00803fc4 	movi	r2,255
 400ca9c:	14c5803a 	cmpltu	r2,r2,r19
 400caa0:	100490fa 	slli	r2,r2,3
 400caa4:	003fc006 	br	400c9a8 <__alt_data_end+0xfc00c9a8>
 400caa8:	00804034 	movhi	r2,256
 400caac:	10bfffc4 	addi	r2,r2,-1
 400cab0:	11808b36 	bltu	r2,r6,400cce0 <__umoddi3+0x4f0>
 400cab4:	01000404 	movi	r4,16
 400cab8:	003f6406 	br	400c84c <__alt_data_end+0xfc00c84c>
 400cabc:	34c4d83a 	srl	r2,r6,r19
 400cac0:	3d0e983a 	sll	r7,r7,r20
 400cac4:	8cf8d83a 	srl	fp,r17,r19
 400cac8:	8d10983a 	sll	r8,r17,r20
 400cacc:	38aab03a 	or	r21,r7,r2
 400cad0:	a82cd43a 	srli	r22,r21,16
 400cad4:	84e2d83a 	srl	r17,r16,r19
 400cad8:	e009883a 	mov	r4,fp
 400cadc:	b00b883a 	mov	r5,r22
 400cae0:	8a22b03a 	or	r17,r17,r8
 400cae4:	3524983a 	sll	r18,r6,r20
 400cae8:	4002bcc0 	call	4002bcc <__umodsi3>
 400caec:	e009883a 	mov	r4,fp
 400caf0:	b00b883a 	mov	r5,r22
 400caf4:	102f883a 	mov	r23,r2
 400caf8:	4002b680 	call	4002b68 <__udivsi3>
 400cafc:	100d883a 	mov	r6,r2
 400cb00:	b808943a 	slli	r4,r23,16
 400cb04:	aa3fffcc 	andi	r8,r21,65535
 400cb08:	8804d43a 	srli	r2,r17,16
 400cb0c:	41af383a 	mul	r23,r8,r6
 400cb10:	8520983a 	sll	r16,r16,r20
 400cb14:	1104b03a 	or	r2,r2,r4
 400cb18:	15c0042e 	bgeu	r2,r23,400cb2c <__umoddi3+0x33c>
 400cb1c:	1545883a 	add	r2,r2,r21
 400cb20:	30ffffc4 	addi	r3,r6,-1
 400cb24:	1540742e 	bgeu	r2,r21,400ccf8 <__umoddi3+0x508>
 400cb28:	180d883a 	mov	r6,r3
 400cb2c:	15efc83a 	sub	r23,r2,r23
 400cb30:	b00b883a 	mov	r5,r22
 400cb34:	b809883a 	mov	r4,r23
 400cb38:	d9800115 	stw	r6,4(sp)
 400cb3c:	da000015 	stw	r8,0(sp)
 400cb40:	4002bcc0 	call	4002bcc <__umodsi3>
 400cb44:	b00b883a 	mov	r5,r22
 400cb48:	b809883a 	mov	r4,r23
 400cb4c:	1039883a 	mov	fp,r2
 400cb50:	4002b680 	call	4002b68 <__udivsi3>
 400cb54:	da000017 	ldw	r8,0(sp)
 400cb58:	e038943a 	slli	fp,fp,16
 400cb5c:	100b883a 	mov	r5,r2
 400cb60:	4089383a 	mul	r4,r8,r2
 400cb64:	8a3fffcc 	andi	r8,r17,65535
 400cb68:	4710b03a 	or	r8,r8,fp
 400cb6c:	d9800117 	ldw	r6,4(sp)
 400cb70:	4100042e 	bgeu	r8,r4,400cb84 <__umoddi3+0x394>
 400cb74:	4551883a 	add	r8,r8,r21
 400cb78:	10bfffc4 	addi	r2,r2,-1
 400cb7c:	45405a2e 	bgeu	r8,r21,400cce8 <__umoddi3+0x4f8>
 400cb80:	100b883a 	mov	r5,r2
 400cb84:	300c943a 	slli	r6,r6,16
 400cb88:	91ffffcc 	andi	r7,r18,65535
 400cb8c:	9004d43a 	srli	r2,r18,16
 400cb90:	314cb03a 	or	r6,r6,r5
 400cb94:	317fffcc 	andi	r5,r6,65535
 400cb98:	300cd43a 	srli	r6,r6,16
 400cb9c:	29d3383a 	mul	r9,r5,r7
 400cba0:	288b383a 	mul	r5,r5,r2
 400cba4:	31cf383a 	mul	r7,r6,r7
 400cba8:	4806d43a 	srli	r3,r9,16
 400cbac:	4111c83a 	sub	r8,r8,r4
 400cbb0:	29cb883a 	add	r5,r5,r7
 400cbb4:	194b883a 	add	r5,r3,r5
 400cbb8:	3085383a 	mul	r2,r6,r2
 400cbbc:	29c0022e 	bgeu	r5,r7,400cbc8 <__umoddi3+0x3d8>
 400cbc0:	00c00074 	movhi	r3,1
 400cbc4:	10c5883a 	add	r2,r2,r3
 400cbc8:	2808d43a 	srli	r4,r5,16
 400cbcc:	280a943a 	slli	r5,r5,16
 400cbd0:	4a7fffcc 	andi	r9,r9,65535
 400cbd4:	2085883a 	add	r2,r4,r2
 400cbd8:	2a4b883a 	add	r5,r5,r9
 400cbdc:	40803636 	bltu	r8,r2,400ccb8 <__umoddi3+0x4c8>
 400cbe0:	40804d26 	beq	r8,r2,400cd18 <__umoddi3+0x528>
 400cbe4:	4089c83a 	sub	r4,r8,r2
 400cbe8:	280f883a 	mov	r7,r5
 400cbec:	81cfc83a 	sub	r7,r16,r7
 400cbf0:	81c7803a 	cmpltu	r3,r16,r7
 400cbf4:	20c7c83a 	sub	r3,r4,r3
 400cbf8:	1cc4983a 	sll	r2,r3,r19
 400cbfc:	3d0ed83a 	srl	r7,r7,r20
 400cc00:	1d06d83a 	srl	r3,r3,r20
 400cc04:	11c4b03a 	or	r2,r2,r7
 400cc08:	003f9306 	br	400ca58 <__alt_data_end+0xfc00ca58>
 400cc0c:	9ca6983a 	sll	r19,r19,r18
 400cc10:	88e8d83a 	srl	r20,r17,r3
 400cc14:	80c4d83a 	srl	r2,r16,r3
 400cc18:	982cd43a 	srli	r22,r19,16
 400cc1c:	8ca2983a 	sll	r17,r17,r18
 400cc20:	a009883a 	mov	r4,r20
 400cc24:	b00b883a 	mov	r5,r22
 400cc28:	1478b03a 	or	fp,r2,r17
 400cc2c:	4002bcc0 	call	4002bcc <__umodsi3>
 400cc30:	a009883a 	mov	r4,r20
 400cc34:	b00b883a 	mov	r5,r22
 400cc38:	1023883a 	mov	r17,r2
 400cc3c:	4002b680 	call	4002b68 <__udivsi3>
 400cc40:	9d7fffcc 	andi	r21,r19,65535
 400cc44:	880a943a 	slli	r5,r17,16
 400cc48:	e008d43a 	srli	r4,fp,16
 400cc4c:	a885383a 	mul	r2,r21,r2
 400cc50:	84a8983a 	sll	r20,r16,r18
 400cc54:	2148b03a 	or	r4,r4,r5
 400cc58:	2080042e 	bgeu	r4,r2,400cc6c <__umoddi3+0x47c>
 400cc5c:	24c9883a 	add	r4,r4,r19
 400cc60:	24c00236 	bltu	r4,r19,400cc6c <__umoddi3+0x47c>
 400cc64:	2080012e 	bgeu	r4,r2,400cc6c <__umoddi3+0x47c>
 400cc68:	24c9883a 	add	r4,r4,r19
 400cc6c:	20a3c83a 	sub	r17,r4,r2
 400cc70:	b00b883a 	mov	r5,r22
 400cc74:	8809883a 	mov	r4,r17
 400cc78:	4002bcc0 	call	4002bcc <__umodsi3>
 400cc7c:	102f883a 	mov	r23,r2
 400cc80:	8809883a 	mov	r4,r17
 400cc84:	b00b883a 	mov	r5,r22
 400cc88:	4002b680 	call	4002b68 <__udivsi3>
 400cc8c:	b82e943a 	slli	r23,r23,16
 400cc90:	a885383a 	mul	r2,r21,r2
 400cc94:	e13fffcc 	andi	r4,fp,65535
 400cc98:	25c8b03a 	or	r4,r4,r23
 400cc9c:	2080042e 	bgeu	r4,r2,400ccb0 <__umoddi3+0x4c0>
 400cca0:	24c9883a 	add	r4,r4,r19
 400cca4:	24c00236 	bltu	r4,r19,400ccb0 <__umoddi3+0x4c0>
 400cca8:	2080012e 	bgeu	r4,r2,400ccb0 <__umoddi3+0x4c0>
 400ccac:	24c9883a 	add	r4,r4,r19
 400ccb0:	20a3c83a 	sub	r17,r4,r2
 400ccb4:	003f4806 	br	400c9d8 <__alt_data_end+0xfc00c9d8>
 400ccb8:	2c8fc83a 	sub	r7,r5,r18
 400ccbc:	1545c83a 	sub	r2,r2,r21
 400ccc0:	29cb803a 	cmpltu	r5,r5,r7
 400ccc4:	1145c83a 	sub	r2,r2,r5
 400ccc8:	4089c83a 	sub	r4,r8,r2
 400cccc:	003fc706 	br	400cbec <__alt_data_end+0xfc00cbec>
 400ccd0:	01000604 	movi	r4,24
 400ccd4:	003f1806 	br	400c938 <__alt_data_end+0xfc00c938>
 400ccd8:	00800604 	movi	r2,24
 400ccdc:	003f3206 	br	400c9a8 <__alt_data_end+0xfc00c9a8>
 400cce0:	01000604 	movi	r4,24
 400cce4:	003ed906 	br	400c84c <__alt_data_end+0xfc00c84c>
 400cce8:	413fa52e 	bgeu	r8,r4,400cb80 <__alt_data_end+0xfc00cb80>
 400ccec:	297fff84 	addi	r5,r5,-2
 400ccf0:	4551883a 	add	r8,r8,r21
 400ccf4:	003fa306 	br	400cb84 <__alt_data_end+0xfc00cb84>
 400ccf8:	15ff8b2e 	bgeu	r2,r23,400cb28 <__alt_data_end+0xfc00cb28>
 400ccfc:	31bfff84 	addi	r6,r6,-2
 400cd00:	1545883a 	add	r2,r2,r21
 400cd04:	003f8906 	br	400cb2c <__alt_data_end+0xfc00cb2c>
 400cd08:	24c9883a 	add	r4,r4,r19
 400cd0c:	003eee06 	br	400c8c8 <__alt_data_end+0xfc00c8c8>
 400cd10:	8005883a 	mov	r2,r16
 400cd14:	003f1706 	br	400c974 <__alt_data_end+0xfc00c974>
 400cd18:	817fe736 	bltu	r16,r5,400ccb8 <__alt_data_end+0xfc00ccb8>
 400cd1c:	280f883a 	mov	r7,r5
 400cd20:	0009883a 	mov	r4,zero
 400cd24:	003fb106 	br	400cbec <__alt_data_end+0xfc00cbec>

0400cd28 <__adddf3>:
 400cd28:	02c00434 	movhi	r11,16
 400cd2c:	5affffc4 	addi	r11,r11,-1
 400cd30:	2806d7fa 	srli	r3,r5,31
 400cd34:	2ad4703a 	and	r10,r5,r11
 400cd38:	3ad2703a 	and	r9,r7,r11
 400cd3c:	3804d53a 	srli	r2,r7,20
 400cd40:	3018d77a 	srli	r12,r6,29
 400cd44:	280ad53a 	srli	r5,r5,20
 400cd48:	501490fa 	slli	r10,r10,3
 400cd4c:	2010d77a 	srli	r8,r4,29
 400cd50:	481290fa 	slli	r9,r9,3
 400cd54:	380ed7fa 	srli	r7,r7,31
 400cd58:	defffb04 	addi	sp,sp,-20
 400cd5c:	dc800215 	stw	r18,8(sp)
 400cd60:	dc400115 	stw	r17,4(sp)
 400cd64:	dc000015 	stw	r16,0(sp)
 400cd68:	dfc00415 	stw	ra,16(sp)
 400cd6c:	dcc00315 	stw	r19,12(sp)
 400cd70:	1c803fcc 	andi	r18,r3,255
 400cd74:	2c01ffcc 	andi	r16,r5,2047
 400cd78:	5210b03a 	or	r8,r10,r8
 400cd7c:	202290fa 	slli	r17,r4,3
 400cd80:	1081ffcc 	andi	r2,r2,2047
 400cd84:	4b12b03a 	or	r9,r9,r12
 400cd88:	300c90fa 	slli	r6,r6,3
 400cd8c:	91c07526 	beq	r18,r7,400cf64 <__adddf3+0x23c>
 400cd90:	8087c83a 	sub	r3,r16,r2
 400cd94:	00c0ab0e 	bge	zero,r3,400d044 <__adddf3+0x31c>
 400cd98:	10002a1e 	bne	r2,zero,400ce44 <__adddf3+0x11c>
 400cd9c:	4984b03a 	or	r2,r9,r6
 400cda0:	1000961e 	bne	r2,zero,400cffc <__adddf3+0x2d4>
 400cda4:	888001cc 	andi	r2,r17,7
 400cda8:	10000726 	beq	r2,zero,400cdc8 <__adddf3+0xa0>
 400cdac:	888003cc 	andi	r2,r17,15
 400cdb0:	00c00104 	movi	r3,4
 400cdb4:	10c00426 	beq	r2,r3,400cdc8 <__adddf3+0xa0>
 400cdb8:	88c7883a 	add	r3,r17,r3
 400cdbc:	1c63803a 	cmpltu	r17,r3,r17
 400cdc0:	4451883a 	add	r8,r8,r17
 400cdc4:	1823883a 	mov	r17,r3
 400cdc8:	4080202c 	andhi	r2,r8,128
 400cdcc:	10005926 	beq	r2,zero,400cf34 <__adddf3+0x20c>
 400cdd0:	84000044 	addi	r16,r16,1
 400cdd4:	0081ffc4 	movi	r2,2047
 400cdd8:	8080ba26 	beq	r16,r2,400d0c4 <__adddf3+0x39c>
 400cddc:	00bfe034 	movhi	r2,65408
 400cde0:	10bfffc4 	addi	r2,r2,-1
 400cde4:	4090703a 	and	r8,r8,r2
 400cde8:	4004977a 	slli	r2,r8,29
 400cdec:	4010927a 	slli	r8,r8,9
 400cdf0:	8822d0fa 	srli	r17,r17,3
 400cdf4:	8401ffcc 	andi	r16,r16,2047
 400cdf8:	4010d33a 	srli	r8,r8,12
 400cdfc:	9007883a 	mov	r3,r18
 400ce00:	1444b03a 	or	r2,r2,r17
 400ce04:	8401ffcc 	andi	r16,r16,2047
 400ce08:	8020953a 	slli	r16,r16,20
 400ce0c:	18c03fcc 	andi	r3,r3,255
 400ce10:	01000434 	movhi	r4,16
 400ce14:	213fffc4 	addi	r4,r4,-1
 400ce18:	180697fa 	slli	r3,r3,31
 400ce1c:	4110703a 	and	r8,r8,r4
 400ce20:	4410b03a 	or	r8,r8,r16
 400ce24:	40c6b03a 	or	r3,r8,r3
 400ce28:	dfc00417 	ldw	ra,16(sp)
 400ce2c:	dcc00317 	ldw	r19,12(sp)
 400ce30:	dc800217 	ldw	r18,8(sp)
 400ce34:	dc400117 	ldw	r17,4(sp)
 400ce38:	dc000017 	ldw	r16,0(sp)
 400ce3c:	dec00504 	addi	sp,sp,20
 400ce40:	f800283a 	ret
 400ce44:	0081ffc4 	movi	r2,2047
 400ce48:	80bfd626 	beq	r16,r2,400cda4 <__alt_data_end+0xfc00cda4>
 400ce4c:	4a402034 	orhi	r9,r9,128
 400ce50:	00800e04 	movi	r2,56
 400ce54:	10c09f16 	blt	r2,r3,400d0d4 <__adddf3+0x3ac>
 400ce58:	008007c4 	movi	r2,31
 400ce5c:	10c0c216 	blt	r2,r3,400d168 <__adddf3+0x440>
 400ce60:	00800804 	movi	r2,32
 400ce64:	10c5c83a 	sub	r2,r2,r3
 400ce68:	488a983a 	sll	r5,r9,r2
 400ce6c:	30c8d83a 	srl	r4,r6,r3
 400ce70:	3084983a 	sll	r2,r6,r2
 400ce74:	48c6d83a 	srl	r3,r9,r3
 400ce78:	290cb03a 	or	r6,r5,r4
 400ce7c:	1004c03a 	cmpne	r2,r2,zero
 400ce80:	308cb03a 	or	r6,r6,r2
 400ce84:	898dc83a 	sub	r6,r17,r6
 400ce88:	89a3803a 	cmpltu	r17,r17,r6
 400ce8c:	40d1c83a 	sub	r8,r8,r3
 400ce90:	4451c83a 	sub	r8,r8,r17
 400ce94:	3023883a 	mov	r17,r6
 400ce98:	4080202c 	andhi	r2,r8,128
 400ce9c:	10002326 	beq	r2,zero,400cf2c <__adddf3+0x204>
 400cea0:	04c02034 	movhi	r19,128
 400cea4:	9cffffc4 	addi	r19,r19,-1
 400cea8:	44e6703a 	and	r19,r8,r19
 400ceac:	98007626 	beq	r19,zero,400d088 <__adddf3+0x360>
 400ceb0:	9809883a 	mov	r4,r19
 400ceb4:	400f32c0 	call	400f32c <__clzsi2>
 400ceb8:	10fffe04 	addi	r3,r2,-8
 400cebc:	010007c4 	movi	r4,31
 400cec0:	20c07716 	blt	r4,r3,400d0a0 <__adddf3+0x378>
 400cec4:	00800804 	movi	r2,32
 400cec8:	10c5c83a 	sub	r2,r2,r3
 400cecc:	8884d83a 	srl	r2,r17,r2
 400ced0:	98d0983a 	sll	r8,r19,r3
 400ced4:	88e2983a 	sll	r17,r17,r3
 400ced8:	1204b03a 	or	r2,r2,r8
 400cedc:	1c007416 	blt	r3,r16,400d0b0 <__adddf3+0x388>
 400cee0:	1c21c83a 	sub	r16,r3,r16
 400cee4:	82000044 	addi	r8,r16,1
 400cee8:	00c007c4 	movi	r3,31
 400ceec:	1a009116 	blt	r3,r8,400d134 <__adddf3+0x40c>
 400cef0:	00c00804 	movi	r3,32
 400cef4:	1a07c83a 	sub	r3,r3,r8
 400cef8:	8a08d83a 	srl	r4,r17,r8
 400cefc:	88e2983a 	sll	r17,r17,r3
 400cf00:	10c6983a 	sll	r3,r2,r3
 400cf04:	1210d83a 	srl	r8,r2,r8
 400cf08:	8804c03a 	cmpne	r2,r17,zero
 400cf0c:	1906b03a 	or	r3,r3,r4
 400cf10:	18a2b03a 	or	r17,r3,r2
 400cf14:	0021883a 	mov	r16,zero
 400cf18:	003fa206 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400cf1c:	1890b03a 	or	r8,r3,r2
 400cf20:	40017d26 	beq	r8,zero,400d518 <__adddf3+0x7f0>
 400cf24:	1011883a 	mov	r8,r2
 400cf28:	1823883a 	mov	r17,r3
 400cf2c:	888001cc 	andi	r2,r17,7
 400cf30:	103f9e1e 	bne	r2,zero,400cdac <__alt_data_end+0xfc00cdac>
 400cf34:	4004977a 	slli	r2,r8,29
 400cf38:	8822d0fa 	srli	r17,r17,3
 400cf3c:	4010d0fa 	srli	r8,r8,3
 400cf40:	9007883a 	mov	r3,r18
 400cf44:	1444b03a 	or	r2,r2,r17
 400cf48:	0101ffc4 	movi	r4,2047
 400cf4c:	81002426 	beq	r16,r4,400cfe0 <__adddf3+0x2b8>
 400cf50:	8120703a 	and	r16,r16,r4
 400cf54:	01000434 	movhi	r4,16
 400cf58:	213fffc4 	addi	r4,r4,-1
 400cf5c:	4110703a 	and	r8,r8,r4
 400cf60:	003fa806 	br	400ce04 <__alt_data_end+0xfc00ce04>
 400cf64:	8089c83a 	sub	r4,r16,r2
 400cf68:	01005e0e 	bge	zero,r4,400d0e4 <__adddf3+0x3bc>
 400cf6c:	10002b26 	beq	r2,zero,400d01c <__adddf3+0x2f4>
 400cf70:	0081ffc4 	movi	r2,2047
 400cf74:	80bf8b26 	beq	r16,r2,400cda4 <__alt_data_end+0xfc00cda4>
 400cf78:	4a402034 	orhi	r9,r9,128
 400cf7c:	00800e04 	movi	r2,56
 400cf80:	1100a40e 	bge	r2,r4,400d214 <__adddf3+0x4ec>
 400cf84:	498cb03a 	or	r6,r9,r6
 400cf88:	300ac03a 	cmpne	r5,r6,zero
 400cf8c:	0013883a 	mov	r9,zero
 400cf90:	2c4b883a 	add	r5,r5,r17
 400cf94:	2c63803a 	cmpltu	r17,r5,r17
 400cf98:	4a11883a 	add	r8,r9,r8
 400cf9c:	8a11883a 	add	r8,r17,r8
 400cfa0:	2823883a 	mov	r17,r5
 400cfa4:	4080202c 	andhi	r2,r8,128
 400cfa8:	103fe026 	beq	r2,zero,400cf2c <__alt_data_end+0xfc00cf2c>
 400cfac:	84000044 	addi	r16,r16,1
 400cfb0:	0081ffc4 	movi	r2,2047
 400cfb4:	8080d226 	beq	r16,r2,400d300 <__adddf3+0x5d8>
 400cfb8:	00bfe034 	movhi	r2,65408
 400cfbc:	10bfffc4 	addi	r2,r2,-1
 400cfc0:	4090703a 	and	r8,r8,r2
 400cfc4:	880ad07a 	srli	r5,r17,1
 400cfc8:	400897fa 	slli	r4,r8,31
 400cfcc:	88c0004c 	andi	r3,r17,1
 400cfd0:	28e2b03a 	or	r17,r5,r3
 400cfd4:	4010d07a 	srli	r8,r8,1
 400cfd8:	2462b03a 	or	r17,r4,r17
 400cfdc:	003f7106 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400cfe0:	4088b03a 	or	r4,r8,r2
 400cfe4:	20014526 	beq	r4,zero,400d4fc <__adddf3+0x7d4>
 400cfe8:	01000434 	movhi	r4,16
 400cfec:	42000234 	orhi	r8,r8,8
 400cff0:	213fffc4 	addi	r4,r4,-1
 400cff4:	4110703a 	and	r8,r8,r4
 400cff8:	003f8206 	br	400ce04 <__alt_data_end+0xfc00ce04>
 400cffc:	18ffffc4 	addi	r3,r3,-1
 400d000:	1800491e 	bne	r3,zero,400d128 <__adddf3+0x400>
 400d004:	898bc83a 	sub	r5,r17,r6
 400d008:	8963803a 	cmpltu	r17,r17,r5
 400d00c:	4251c83a 	sub	r8,r8,r9
 400d010:	4451c83a 	sub	r8,r8,r17
 400d014:	2823883a 	mov	r17,r5
 400d018:	003f9f06 	br	400ce98 <__alt_data_end+0xfc00ce98>
 400d01c:	4984b03a 	or	r2,r9,r6
 400d020:	103f6026 	beq	r2,zero,400cda4 <__alt_data_end+0xfc00cda4>
 400d024:	213fffc4 	addi	r4,r4,-1
 400d028:	2000931e 	bne	r4,zero,400d278 <__adddf3+0x550>
 400d02c:	898d883a 	add	r6,r17,r6
 400d030:	3463803a 	cmpltu	r17,r6,r17
 400d034:	4251883a 	add	r8,r8,r9
 400d038:	8a11883a 	add	r8,r17,r8
 400d03c:	3023883a 	mov	r17,r6
 400d040:	003fd806 	br	400cfa4 <__alt_data_end+0xfc00cfa4>
 400d044:	1800541e 	bne	r3,zero,400d198 <__adddf3+0x470>
 400d048:	80800044 	addi	r2,r16,1
 400d04c:	1081ffcc 	andi	r2,r2,2047
 400d050:	00c00044 	movi	r3,1
 400d054:	1880a00e 	bge	r3,r2,400d2d8 <__adddf3+0x5b0>
 400d058:	8989c83a 	sub	r4,r17,r6
 400d05c:	8905803a 	cmpltu	r2,r17,r4
 400d060:	4267c83a 	sub	r19,r8,r9
 400d064:	98a7c83a 	sub	r19,r19,r2
 400d068:	9880202c 	andhi	r2,r19,128
 400d06c:	10006326 	beq	r2,zero,400d1fc <__adddf3+0x4d4>
 400d070:	3463c83a 	sub	r17,r6,r17
 400d074:	4a07c83a 	sub	r3,r9,r8
 400d078:	344d803a 	cmpltu	r6,r6,r17
 400d07c:	19a7c83a 	sub	r19,r3,r6
 400d080:	3825883a 	mov	r18,r7
 400d084:	983f8a1e 	bne	r19,zero,400ceb0 <__alt_data_end+0xfc00ceb0>
 400d088:	8809883a 	mov	r4,r17
 400d08c:	400f32c0 	call	400f32c <__clzsi2>
 400d090:	10800804 	addi	r2,r2,32
 400d094:	10fffe04 	addi	r3,r2,-8
 400d098:	010007c4 	movi	r4,31
 400d09c:	20ff890e 	bge	r4,r3,400cec4 <__alt_data_end+0xfc00cec4>
 400d0a0:	10bff604 	addi	r2,r2,-40
 400d0a4:	8884983a 	sll	r2,r17,r2
 400d0a8:	0023883a 	mov	r17,zero
 400d0ac:	1c3f8c0e 	bge	r3,r16,400cee0 <__alt_data_end+0xfc00cee0>
 400d0b0:	023fe034 	movhi	r8,65408
 400d0b4:	423fffc4 	addi	r8,r8,-1
 400d0b8:	80e1c83a 	sub	r16,r16,r3
 400d0bc:	1210703a 	and	r8,r2,r8
 400d0c0:	003f3806 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d0c4:	9007883a 	mov	r3,r18
 400d0c8:	0011883a 	mov	r8,zero
 400d0cc:	0005883a 	mov	r2,zero
 400d0d0:	003f4c06 	br	400ce04 <__alt_data_end+0xfc00ce04>
 400d0d4:	498cb03a 	or	r6,r9,r6
 400d0d8:	300cc03a 	cmpne	r6,r6,zero
 400d0dc:	0007883a 	mov	r3,zero
 400d0e0:	003f6806 	br	400ce84 <__alt_data_end+0xfc00ce84>
 400d0e4:	20009c1e 	bne	r4,zero,400d358 <__adddf3+0x630>
 400d0e8:	80800044 	addi	r2,r16,1
 400d0ec:	1141ffcc 	andi	r5,r2,2047
 400d0f0:	01000044 	movi	r4,1
 400d0f4:	2140670e 	bge	r4,r5,400d294 <__adddf3+0x56c>
 400d0f8:	0101ffc4 	movi	r4,2047
 400d0fc:	11007f26 	beq	r2,r4,400d2fc <__adddf3+0x5d4>
 400d100:	898d883a 	add	r6,r17,r6
 400d104:	4247883a 	add	r3,r8,r9
 400d108:	3451803a 	cmpltu	r8,r6,r17
 400d10c:	40d1883a 	add	r8,r8,r3
 400d110:	402297fa 	slli	r17,r8,31
 400d114:	300cd07a 	srli	r6,r6,1
 400d118:	4010d07a 	srli	r8,r8,1
 400d11c:	1021883a 	mov	r16,r2
 400d120:	89a2b03a 	or	r17,r17,r6
 400d124:	003f1f06 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d128:	0081ffc4 	movi	r2,2047
 400d12c:	80bf481e 	bne	r16,r2,400ce50 <__alt_data_end+0xfc00ce50>
 400d130:	003f1c06 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d134:	843ff844 	addi	r16,r16,-31
 400d138:	01000804 	movi	r4,32
 400d13c:	1406d83a 	srl	r3,r2,r16
 400d140:	41005026 	beq	r8,r4,400d284 <__adddf3+0x55c>
 400d144:	01001004 	movi	r4,64
 400d148:	2211c83a 	sub	r8,r4,r8
 400d14c:	1204983a 	sll	r2,r2,r8
 400d150:	88a2b03a 	or	r17,r17,r2
 400d154:	8822c03a 	cmpne	r17,r17,zero
 400d158:	1c62b03a 	or	r17,r3,r17
 400d15c:	0011883a 	mov	r8,zero
 400d160:	0021883a 	mov	r16,zero
 400d164:	003f7106 	br	400cf2c <__alt_data_end+0xfc00cf2c>
 400d168:	193ff804 	addi	r4,r3,-32
 400d16c:	00800804 	movi	r2,32
 400d170:	4908d83a 	srl	r4,r9,r4
 400d174:	18804526 	beq	r3,r2,400d28c <__adddf3+0x564>
 400d178:	00801004 	movi	r2,64
 400d17c:	10c5c83a 	sub	r2,r2,r3
 400d180:	4886983a 	sll	r3,r9,r2
 400d184:	198cb03a 	or	r6,r3,r6
 400d188:	300cc03a 	cmpne	r6,r6,zero
 400d18c:	218cb03a 	or	r6,r4,r6
 400d190:	0007883a 	mov	r3,zero
 400d194:	003f3b06 	br	400ce84 <__alt_data_end+0xfc00ce84>
 400d198:	80002a26 	beq	r16,zero,400d244 <__adddf3+0x51c>
 400d19c:	0101ffc4 	movi	r4,2047
 400d1a0:	11006826 	beq	r2,r4,400d344 <__adddf3+0x61c>
 400d1a4:	00c7c83a 	sub	r3,zero,r3
 400d1a8:	42002034 	orhi	r8,r8,128
 400d1ac:	01000e04 	movi	r4,56
 400d1b0:	20c07c16 	blt	r4,r3,400d3a4 <__adddf3+0x67c>
 400d1b4:	010007c4 	movi	r4,31
 400d1b8:	20c0da16 	blt	r4,r3,400d524 <__adddf3+0x7fc>
 400d1bc:	01000804 	movi	r4,32
 400d1c0:	20c9c83a 	sub	r4,r4,r3
 400d1c4:	4114983a 	sll	r10,r8,r4
 400d1c8:	88cad83a 	srl	r5,r17,r3
 400d1cc:	8908983a 	sll	r4,r17,r4
 400d1d0:	40c6d83a 	srl	r3,r8,r3
 400d1d4:	5162b03a 	or	r17,r10,r5
 400d1d8:	2008c03a 	cmpne	r4,r4,zero
 400d1dc:	8922b03a 	or	r17,r17,r4
 400d1e0:	3463c83a 	sub	r17,r6,r17
 400d1e4:	48c7c83a 	sub	r3,r9,r3
 400d1e8:	344d803a 	cmpltu	r6,r6,r17
 400d1ec:	1991c83a 	sub	r8,r3,r6
 400d1f0:	1021883a 	mov	r16,r2
 400d1f4:	3825883a 	mov	r18,r7
 400d1f8:	003f2706 	br	400ce98 <__alt_data_end+0xfc00ce98>
 400d1fc:	24d0b03a 	or	r8,r4,r19
 400d200:	40001b1e 	bne	r8,zero,400d270 <__adddf3+0x548>
 400d204:	0005883a 	mov	r2,zero
 400d208:	0007883a 	mov	r3,zero
 400d20c:	0021883a 	mov	r16,zero
 400d210:	003f4d06 	br	400cf48 <__alt_data_end+0xfc00cf48>
 400d214:	008007c4 	movi	r2,31
 400d218:	11003c16 	blt	r2,r4,400d30c <__adddf3+0x5e4>
 400d21c:	00800804 	movi	r2,32
 400d220:	1105c83a 	sub	r2,r2,r4
 400d224:	488e983a 	sll	r7,r9,r2
 400d228:	310ad83a 	srl	r5,r6,r4
 400d22c:	3084983a 	sll	r2,r6,r2
 400d230:	4912d83a 	srl	r9,r9,r4
 400d234:	394ab03a 	or	r5,r7,r5
 400d238:	1004c03a 	cmpne	r2,r2,zero
 400d23c:	288ab03a 	or	r5,r5,r2
 400d240:	003f5306 	br	400cf90 <__alt_data_end+0xfc00cf90>
 400d244:	4448b03a 	or	r4,r8,r17
 400d248:	20003e26 	beq	r4,zero,400d344 <__adddf3+0x61c>
 400d24c:	00c6303a 	nor	r3,zero,r3
 400d250:	18003a1e 	bne	r3,zero,400d33c <__adddf3+0x614>
 400d254:	3463c83a 	sub	r17,r6,r17
 400d258:	4a07c83a 	sub	r3,r9,r8
 400d25c:	344d803a 	cmpltu	r6,r6,r17
 400d260:	1991c83a 	sub	r8,r3,r6
 400d264:	1021883a 	mov	r16,r2
 400d268:	3825883a 	mov	r18,r7
 400d26c:	003f0a06 	br	400ce98 <__alt_data_end+0xfc00ce98>
 400d270:	2023883a 	mov	r17,r4
 400d274:	003f0d06 	br	400ceac <__alt_data_end+0xfc00ceac>
 400d278:	0081ffc4 	movi	r2,2047
 400d27c:	80bf3f1e 	bne	r16,r2,400cf7c <__alt_data_end+0xfc00cf7c>
 400d280:	003ec806 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d284:	0005883a 	mov	r2,zero
 400d288:	003fb106 	br	400d150 <__alt_data_end+0xfc00d150>
 400d28c:	0007883a 	mov	r3,zero
 400d290:	003fbc06 	br	400d184 <__alt_data_end+0xfc00d184>
 400d294:	4444b03a 	or	r2,r8,r17
 400d298:	8000871e 	bne	r16,zero,400d4b8 <__adddf3+0x790>
 400d29c:	1000ba26 	beq	r2,zero,400d588 <__adddf3+0x860>
 400d2a0:	4984b03a 	or	r2,r9,r6
 400d2a4:	103ebf26 	beq	r2,zero,400cda4 <__alt_data_end+0xfc00cda4>
 400d2a8:	8985883a 	add	r2,r17,r6
 400d2ac:	4247883a 	add	r3,r8,r9
 400d2b0:	1451803a 	cmpltu	r8,r2,r17
 400d2b4:	40d1883a 	add	r8,r8,r3
 400d2b8:	40c0202c 	andhi	r3,r8,128
 400d2bc:	1023883a 	mov	r17,r2
 400d2c0:	183f1a26 	beq	r3,zero,400cf2c <__alt_data_end+0xfc00cf2c>
 400d2c4:	00bfe034 	movhi	r2,65408
 400d2c8:	10bfffc4 	addi	r2,r2,-1
 400d2cc:	2021883a 	mov	r16,r4
 400d2d0:	4090703a 	and	r8,r8,r2
 400d2d4:	003eb306 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d2d8:	4444b03a 	or	r2,r8,r17
 400d2dc:	8000291e 	bne	r16,zero,400d384 <__adddf3+0x65c>
 400d2e0:	10004b1e 	bne	r2,zero,400d410 <__adddf3+0x6e8>
 400d2e4:	4990b03a 	or	r8,r9,r6
 400d2e8:	40008b26 	beq	r8,zero,400d518 <__adddf3+0x7f0>
 400d2ec:	4811883a 	mov	r8,r9
 400d2f0:	3023883a 	mov	r17,r6
 400d2f4:	3825883a 	mov	r18,r7
 400d2f8:	003eaa06 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d2fc:	1021883a 	mov	r16,r2
 400d300:	0011883a 	mov	r8,zero
 400d304:	0005883a 	mov	r2,zero
 400d308:	003f0f06 	br	400cf48 <__alt_data_end+0xfc00cf48>
 400d30c:	217ff804 	addi	r5,r4,-32
 400d310:	00800804 	movi	r2,32
 400d314:	494ad83a 	srl	r5,r9,r5
 400d318:	20807d26 	beq	r4,r2,400d510 <__adddf3+0x7e8>
 400d31c:	00801004 	movi	r2,64
 400d320:	1109c83a 	sub	r4,r2,r4
 400d324:	4912983a 	sll	r9,r9,r4
 400d328:	498cb03a 	or	r6,r9,r6
 400d32c:	300cc03a 	cmpne	r6,r6,zero
 400d330:	298ab03a 	or	r5,r5,r6
 400d334:	0013883a 	mov	r9,zero
 400d338:	003f1506 	br	400cf90 <__alt_data_end+0xfc00cf90>
 400d33c:	0101ffc4 	movi	r4,2047
 400d340:	113f9a1e 	bne	r2,r4,400d1ac <__alt_data_end+0xfc00d1ac>
 400d344:	4811883a 	mov	r8,r9
 400d348:	3023883a 	mov	r17,r6
 400d34c:	1021883a 	mov	r16,r2
 400d350:	3825883a 	mov	r18,r7
 400d354:	003e9306 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d358:	8000161e 	bne	r16,zero,400d3b4 <__adddf3+0x68c>
 400d35c:	444ab03a 	or	r5,r8,r17
 400d360:	28005126 	beq	r5,zero,400d4a8 <__adddf3+0x780>
 400d364:	0108303a 	nor	r4,zero,r4
 400d368:	20004d1e 	bne	r4,zero,400d4a0 <__adddf3+0x778>
 400d36c:	89a3883a 	add	r17,r17,r6
 400d370:	4253883a 	add	r9,r8,r9
 400d374:	898d803a 	cmpltu	r6,r17,r6
 400d378:	3251883a 	add	r8,r6,r9
 400d37c:	1021883a 	mov	r16,r2
 400d380:	003f0806 	br	400cfa4 <__alt_data_end+0xfc00cfa4>
 400d384:	1000301e 	bne	r2,zero,400d448 <__adddf3+0x720>
 400d388:	4984b03a 	or	r2,r9,r6
 400d38c:	10007126 	beq	r2,zero,400d554 <__adddf3+0x82c>
 400d390:	4811883a 	mov	r8,r9
 400d394:	3023883a 	mov	r17,r6
 400d398:	3825883a 	mov	r18,r7
 400d39c:	0401ffc4 	movi	r16,2047
 400d3a0:	003e8006 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d3a4:	4462b03a 	or	r17,r8,r17
 400d3a8:	8822c03a 	cmpne	r17,r17,zero
 400d3ac:	0007883a 	mov	r3,zero
 400d3b0:	003f8b06 	br	400d1e0 <__alt_data_end+0xfc00d1e0>
 400d3b4:	0141ffc4 	movi	r5,2047
 400d3b8:	11403b26 	beq	r2,r5,400d4a8 <__adddf3+0x780>
 400d3bc:	0109c83a 	sub	r4,zero,r4
 400d3c0:	42002034 	orhi	r8,r8,128
 400d3c4:	01400e04 	movi	r5,56
 400d3c8:	29006716 	blt	r5,r4,400d568 <__adddf3+0x840>
 400d3cc:	014007c4 	movi	r5,31
 400d3d0:	29007016 	blt	r5,r4,400d594 <__adddf3+0x86c>
 400d3d4:	01400804 	movi	r5,32
 400d3d8:	290bc83a 	sub	r5,r5,r4
 400d3dc:	4154983a 	sll	r10,r8,r5
 400d3e0:	890ed83a 	srl	r7,r17,r4
 400d3e4:	894a983a 	sll	r5,r17,r5
 400d3e8:	4108d83a 	srl	r4,r8,r4
 400d3ec:	51e2b03a 	or	r17,r10,r7
 400d3f0:	280ac03a 	cmpne	r5,r5,zero
 400d3f4:	8962b03a 	or	r17,r17,r5
 400d3f8:	89a3883a 	add	r17,r17,r6
 400d3fc:	2253883a 	add	r9,r4,r9
 400d400:	898d803a 	cmpltu	r6,r17,r6
 400d404:	3251883a 	add	r8,r6,r9
 400d408:	1021883a 	mov	r16,r2
 400d40c:	003ee506 	br	400cfa4 <__alt_data_end+0xfc00cfa4>
 400d410:	4984b03a 	or	r2,r9,r6
 400d414:	103e6326 	beq	r2,zero,400cda4 <__alt_data_end+0xfc00cda4>
 400d418:	8987c83a 	sub	r3,r17,r6
 400d41c:	88c9803a 	cmpltu	r4,r17,r3
 400d420:	4245c83a 	sub	r2,r8,r9
 400d424:	1105c83a 	sub	r2,r2,r4
 400d428:	1100202c 	andhi	r4,r2,128
 400d42c:	203ebb26 	beq	r4,zero,400cf1c <__alt_data_end+0xfc00cf1c>
 400d430:	3463c83a 	sub	r17,r6,r17
 400d434:	4a07c83a 	sub	r3,r9,r8
 400d438:	344d803a 	cmpltu	r6,r6,r17
 400d43c:	1991c83a 	sub	r8,r3,r6
 400d440:	3825883a 	mov	r18,r7
 400d444:	003e5706 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d448:	4984b03a 	or	r2,r9,r6
 400d44c:	10002e26 	beq	r2,zero,400d508 <__adddf3+0x7e0>
 400d450:	4004d0fa 	srli	r2,r8,3
 400d454:	8822d0fa 	srli	r17,r17,3
 400d458:	4010977a 	slli	r8,r8,29
 400d45c:	10c0022c 	andhi	r3,r2,8
 400d460:	4462b03a 	or	r17,r8,r17
 400d464:	18000826 	beq	r3,zero,400d488 <__adddf3+0x760>
 400d468:	4808d0fa 	srli	r4,r9,3
 400d46c:	20c0022c 	andhi	r3,r4,8
 400d470:	1800051e 	bne	r3,zero,400d488 <__adddf3+0x760>
 400d474:	300cd0fa 	srli	r6,r6,3
 400d478:	4806977a 	slli	r3,r9,29
 400d47c:	2005883a 	mov	r2,r4
 400d480:	3825883a 	mov	r18,r7
 400d484:	19a2b03a 	or	r17,r3,r6
 400d488:	8810d77a 	srli	r8,r17,29
 400d48c:	100490fa 	slli	r2,r2,3
 400d490:	882290fa 	slli	r17,r17,3
 400d494:	0401ffc4 	movi	r16,2047
 400d498:	4090b03a 	or	r8,r8,r2
 400d49c:	003e4106 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d4a0:	0141ffc4 	movi	r5,2047
 400d4a4:	117fc71e 	bne	r2,r5,400d3c4 <__alt_data_end+0xfc00d3c4>
 400d4a8:	4811883a 	mov	r8,r9
 400d4ac:	3023883a 	mov	r17,r6
 400d4b0:	1021883a 	mov	r16,r2
 400d4b4:	003e3b06 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d4b8:	10002f26 	beq	r2,zero,400d578 <__adddf3+0x850>
 400d4bc:	4984b03a 	or	r2,r9,r6
 400d4c0:	10001126 	beq	r2,zero,400d508 <__adddf3+0x7e0>
 400d4c4:	4004d0fa 	srli	r2,r8,3
 400d4c8:	8822d0fa 	srli	r17,r17,3
 400d4cc:	4010977a 	slli	r8,r8,29
 400d4d0:	10c0022c 	andhi	r3,r2,8
 400d4d4:	4462b03a 	or	r17,r8,r17
 400d4d8:	183feb26 	beq	r3,zero,400d488 <__alt_data_end+0xfc00d488>
 400d4dc:	4808d0fa 	srli	r4,r9,3
 400d4e0:	20c0022c 	andhi	r3,r4,8
 400d4e4:	183fe81e 	bne	r3,zero,400d488 <__alt_data_end+0xfc00d488>
 400d4e8:	300cd0fa 	srli	r6,r6,3
 400d4ec:	4806977a 	slli	r3,r9,29
 400d4f0:	2005883a 	mov	r2,r4
 400d4f4:	19a2b03a 	or	r17,r3,r6
 400d4f8:	003fe306 	br	400d488 <__alt_data_end+0xfc00d488>
 400d4fc:	0011883a 	mov	r8,zero
 400d500:	0005883a 	mov	r2,zero
 400d504:	003e3f06 	br	400ce04 <__alt_data_end+0xfc00ce04>
 400d508:	0401ffc4 	movi	r16,2047
 400d50c:	003e2506 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d510:	0013883a 	mov	r9,zero
 400d514:	003f8406 	br	400d328 <__alt_data_end+0xfc00d328>
 400d518:	0005883a 	mov	r2,zero
 400d51c:	0007883a 	mov	r3,zero
 400d520:	003e8906 	br	400cf48 <__alt_data_end+0xfc00cf48>
 400d524:	197ff804 	addi	r5,r3,-32
 400d528:	01000804 	movi	r4,32
 400d52c:	414ad83a 	srl	r5,r8,r5
 400d530:	19002426 	beq	r3,r4,400d5c4 <__adddf3+0x89c>
 400d534:	01001004 	movi	r4,64
 400d538:	20c7c83a 	sub	r3,r4,r3
 400d53c:	40c6983a 	sll	r3,r8,r3
 400d540:	1c46b03a 	or	r3,r3,r17
 400d544:	1806c03a 	cmpne	r3,r3,zero
 400d548:	28e2b03a 	or	r17,r5,r3
 400d54c:	0007883a 	mov	r3,zero
 400d550:	003f2306 	br	400d1e0 <__alt_data_end+0xfc00d1e0>
 400d554:	0007883a 	mov	r3,zero
 400d558:	5811883a 	mov	r8,r11
 400d55c:	00bfffc4 	movi	r2,-1
 400d560:	0401ffc4 	movi	r16,2047
 400d564:	003e7806 	br	400cf48 <__alt_data_end+0xfc00cf48>
 400d568:	4462b03a 	or	r17,r8,r17
 400d56c:	8822c03a 	cmpne	r17,r17,zero
 400d570:	0009883a 	mov	r4,zero
 400d574:	003fa006 	br	400d3f8 <__alt_data_end+0xfc00d3f8>
 400d578:	4811883a 	mov	r8,r9
 400d57c:	3023883a 	mov	r17,r6
 400d580:	0401ffc4 	movi	r16,2047
 400d584:	003e0706 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d588:	4811883a 	mov	r8,r9
 400d58c:	3023883a 	mov	r17,r6
 400d590:	003e0406 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400d594:	21fff804 	addi	r7,r4,-32
 400d598:	01400804 	movi	r5,32
 400d59c:	41ced83a 	srl	r7,r8,r7
 400d5a0:	21400a26 	beq	r4,r5,400d5cc <__adddf3+0x8a4>
 400d5a4:	01401004 	movi	r5,64
 400d5a8:	2909c83a 	sub	r4,r5,r4
 400d5ac:	4108983a 	sll	r4,r8,r4
 400d5b0:	2448b03a 	or	r4,r4,r17
 400d5b4:	2008c03a 	cmpne	r4,r4,zero
 400d5b8:	3922b03a 	or	r17,r7,r4
 400d5bc:	0009883a 	mov	r4,zero
 400d5c0:	003f8d06 	br	400d3f8 <__alt_data_end+0xfc00d3f8>
 400d5c4:	0007883a 	mov	r3,zero
 400d5c8:	003fdd06 	br	400d540 <__alt_data_end+0xfc00d540>
 400d5cc:	0009883a 	mov	r4,zero
 400d5d0:	003ff706 	br	400d5b0 <__alt_data_end+0xfc00d5b0>

0400d5d4 <__divdf3>:
 400d5d4:	defff204 	addi	sp,sp,-56
 400d5d8:	dd400915 	stw	r21,36(sp)
 400d5dc:	282ad53a 	srli	r21,r5,20
 400d5e0:	dd000815 	stw	r20,32(sp)
 400d5e4:	2828d7fa 	srli	r20,r5,31
 400d5e8:	dc000415 	stw	r16,16(sp)
 400d5ec:	04000434 	movhi	r16,16
 400d5f0:	df000c15 	stw	fp,48(sp)
 400d5f4:	843fffc4 	addi	r16,r16,-1
 400d5f8:	dfc00d15 	stw	ra,52(sp)
 400d5fc:	ddc00b15 	stw	r23,44(sp)
 400d600:	dd800a15 	stw	r22,40(sp)
 400d604:	dcc00715 	stw	r19,28(sp)
 400d608:	dc800615 	stw	r18,24(sp)
 400d60c:	dc400515 	stw	r17,20(sp)
 400d610:	ad41ffcc 	andi	r21,r21,2047
 400d614:	2c20703a 	and	r16,r5,r16
 400d618:	a7003fcc 	andi	fp,r20,255
 400d61c:	a8006126 	beq	r21,zero,400d7a4 <__divdf3+0x1d0>
 400d620:	0081ffc4 	movi	r2,2047
 400d624:	2025883a 	mov	r18,r4
 400d628:	a8803726 	beq	r21,r2,400d708 <__divdf3+0x134>
 400d62c:	80800434 	orhi	r2,r16,16
 400d630:	100490fa 	slli	r2,r2,3
 400d634:	2020d77a 	srli	r16,r4,29
 400d638:	202490fa 	slli	r18,r4,3
 400d63c:	ad7f0044 	addi	r21,r21,-1023
 400d640:	80a0b03a 	or	r16,r16,r2
 400d644:	0027883a 	mov	r19,zero
 400d648:	0013883a 	mov	r9,zero
 400d64c:	3804d53a 	srli	r2,r7,20
 400d650:	382cd7fa 	srli	r22,r7,31
 400d654:	04400434 	movhi	r17,16
 400d658:	8c7fffc4 	addi	r17,r17,-1
 400d65c:	1081ffcc 	andi	r2,r2,2047
 400d660:	3011883a 	mov	r8,r6
 400d664:	3c62703a 	and	r17,r7,r17
 400d668:	b5c03fcc 	andi	r23,r22,255
 400d66c:	10006c26 	beq	r2,zero,400d820 <__divdf3+0x24c>
 400d670:	00c1ffc4 	movi	r3,2047
 400d674:	10c06426 	beq	r2,r3,400d808 <__divdf3+0x234>
 400d678:	88c00434 	orhi	r3,r17,16
 400d67c:	180690fa 	slli	r3,r3,3
 400d680:	3022d77a 	srli	r17,r6,29
 400d684:	301090fa 	slli	r8,r6,3
 400d688:	10bf0044 	addi	r2,r2,-1023
 400d68c:	88e2b03a 	or	r17,r17,r3
 400d690:	000f883a 	mov	r7,zero
 400d694:	a58cf03a 	xor	r6,r20,r22
 400d698:	3cc8b03a 	or	r4,r7,r19
 400d69c:	a8abc83a 	sub	r21,r21,r2
 400d6a0:	008003c4 	movi	r2,15
 400d6a4:	3007883a 	mov	r3,r6
 400d6a8:	34c03fcc 	andi	r19,r6,255
 400d6ac:	11009036 	bltu	r2,r4,400d8f0 <__divdf3+0x31c>
 400d6b0:	200890ba 	slli	r4,r4,2
 400d6b4:	00810074 	movhi	r2,1025
 400d6b8:	10b5b204 	addi	r2,r2,-10552
 400d6bc:	2089883a 	add	r4,r4,r2
 400d6c0:	20800017 	ldw	r2,0(r4)
 400d6c4:	1000683a 	jmp	r2
 400d6c8:	0400d8f0 	cmpltui	r16,zero,867
 400d6cc:	0400d740 	call	400d74 <__alt_mem_dram_ctrl-0x3bff28c>
 400d6d0:	0400d8e0 	cmpeqi	r16,zero,867
 400d6d4:	0400d734 	movhi	r16,860
 400d6d8:	0400d8e0 	cmpeqi	r16,zero,867
 400d6dc:	0400d8b4 	movhi	r16,866
 400d6e0:	0400d8e0 	cmpeqi	r16,zero,867
 400d6e4:	0400d734 	movhi	r16,860
 400d6e8:	0400d740 	call	400d74 <__alt_mem_dram_ctrl-0x3bff28c>
 400d6ec:	0400d740 	call	400d74 <__alt_mem_dram_ctrl-0x3bff28c>
 400d6f0:	0400d8b4 	movhi	r16,866
 400d6f4:	0400d734 	movhi	r16,860
 400d6f8:	0400d724 	muli	r16,zero,860
 400d6fc:	0400d724 	muli	r16,zero,860
 400d700:	0400d724 	muli	r16,zero,860
 400d704:	0400dbd4 	movui	r16,879
 400d708:	2404b03a 	or	r2,r4,r16
 400d70c:	1000661e 	bne	r2,zero,400d8a8 <__divdf3+0x2d4>
 400d710:	04c00204 	movi	r19,8
 400d714:	0021883a 	mov	r16,zero
 400d718:	0025883a 	mov	r18,zero
 400d71c:	02400084 	movi	r9,2
 400d720:	003fca06 	br	400d64c <__alt_data_end+0xfc00d64c>
 400d724:	8023883a 	mov	r17,r16
 400d728:	9011883a 	mov	r8,r18
 400d72c:	e02f883a 	mov	r23,fp
 400d730:	480f883a 	mov	r7,r9
 400d734:	00800084 	movi	r2,2
 400d738:	3881311e 	bne	r7,r2,400dc00 <__divdf3+0x62c>
 400d73c:	b827883a 	mov	r19,r23
 400d740:	98c0004c 	andi	r3,r19,1
 400d744:	0081ffc4 	movi	r2,2047
 400d748:	000b883a 	mov	r5,zero
 400d74c:	0025883a 	mov	r18,zero
 400d750:	1004953a 	slli	r2,r2,20
 400d754:	18c03fcc 	andi	r3,r3,255
 400d758:	04400434 	movhi	r17,16
 400d75c:	8c7fffc4 	addi	r17,r17,-1
 400d760:	180697fa 	slli	r3,r3,31
 400d764:	2c4a703a 	and	r5,r5,r17
 400d768:	288ab03a 	or	r5,r5,r2
 400d76c:	28c6b03a 	or	r3,r5,r3
 400d770:	9005883a 	mov	r2,r18
 400d774:	dfc00d17 	ldw	ra,52(sp)
 400d778:	df000c17 	ldw	fp,48(sp)
 400d77c:	ddc00b17 	ldw	r23,44(sp)
 400d780:	dd800a17 	ldw	r22,40(sp)
 400d784:	dd400917 	ldw	r21,36(sp)
 400d788:	dd000817 	ldw	r20,32(sp)
 400d78c:	dcc00717 	ldw	r19,28(sp)
 400d790:	dc800617 	ldw	r18,24(sp)
 400d794:	dc400517 	ldw	r17,20(sp)
 400d798:	dc000417 	ldw	r16,16(sp)
 400d79c:	dec00e04 	addi	sp,sp,56
 400d7a0:	f800283a 	ret
 400d7a4:	2404b03a 	or	r2,r4,r16
 400d7a8:	2027883a 	mov	r19,r4
 400d7ac:	10003926 	beq	r2,zero,400d894 <__divdf3+0x2c0>
 400d7b0:	80012e26 	beq	r16,zero,400dc6c <__divdf3+0x698>
 400d7b4:	8009883a 	mov	r4,r16
 400d7b8:	d9800315 	stw	r6,12(sp)
 400d7bc:	d9c00215 	stw	r7,8(sp)
 400d7c0:	400f32c0 	call	400f32c <__clzsi2>
 400d7c4:	d9800317 	ldw	r6,12(sp)
 400d7c8:	d9c00217 	ldw	r7,8(sp)
 400d7cc:	113ffd44 	addi	r4,r2,-11
 400d7d0:	00c00704 	movi	r3,28
 400d7d4:	19012116 	blt	r3,r4,400dc5c <__divdf3+0x688>
 400d7d8:	00c00744 	movi	r3,29
 400d7dc:	147ffe04 	addi	r17,r2,-8
 400d7e0:	1907c83a 	sub	r3,r3,r4
 400d7e4:	8460983a 	sll	r16,r16,r17
 400d7e8:	98c6d83a 	srl	r3,r19,r3
 400d7ec:	9c64983a 	sll	r18,r19,r17
 400d7f0:	1c20b03a 	or	r16,r3,r16
 400d7f4:	1080fcc4 	addi	r2,r2,1011
 400d7f8:	00abc83a 	sub	r21,zero,r2
 400d7fc:	0027883a 	mov	r19,zero
 400d800:	0013883a 	mov	r9,zero
 400d804:	003f9106 	br	400d64c <__alt_data_end+0xfc00d64c>
 400d808:	3446b03a 	or	r3,r6,r17
 400d80c:	18001f1e 	bne	r3,zero,400d88c <__divdf3+0x2b8>
 400d810:	0023883a 	mov	r17,zero
 400d814:	0011883a 	mov	r8,zero
 400d818:	01c00084 	movi	r7,2
 400d81c:	003f9d06 	br	400d694 <__alt_data_end+0xfc00d694>
 400d820:	3446b03a 	or	r3,r6,r17
 400d824:	18001526 	beq	r3,zero,400d87c <__divdf3+0x2a8>
 400d828:	88011b26 	beq	r17,zero,400dc98 <__divdf3+0x6c4>
 400d82c:	8809883a 	mov	r4,r17
 400d830:	d9800315 	stw	r6,12(sp)
 400d834:	da400115 	stw	r9,4(sp)
 400d838:	400f32c0 	call	400f32c <__clzsi2>
 400d83c:	d9800317 	ldw	r6,12(sp)
 400d840:	da400117 	ldw	r9,4(sp)
 400d844:	113ffd44 	addi	r4,r2,-11
 400d848:	00c00704 	movi	r3,28
 400d84c:	19010e16 	blt	r3,r4,400dc88 <__divdf3+0x6b4>
 400d850:	00c00744 	movi	r3,29
 400d854:	123ffe04 	addi	r8,r2,-8
 400d858:	1907c83a 	sub	r3,r3,r4
 400d85c:	8a22983a 	sll	r17,r17,r8
 400d860:	30c6d83a 	srl	r3,r6,r3
 400d864:	3210983a 	sll	r8,r6,r8
 400d868:	1c62b03a 	or	r17,r3,r17
 400d86c:	1080fcc4 	addi	r2,r2,1011
 400d870:	0085c83a 	sub	r2,zero,r2
 400d874:	000f883a 	mov	r7,zero
 400d878:	003f8606 	br	400d694 <__alt_data_end+0xfc00d694>
 400d87c:	0023883a 	mov	r17,zero
 400d880:	0011883a 	mov	r8,zero
 400d884:	01c00044 	movi	r7,1
 400d888:	003f8206 	br	400d694 <__alt_data_end+0xfc00d694>
 400d88c:	01c000c4 	movi	r7,3
 400d890:	003f8006 	br	400d694 <__alt_data_end+0xfc00d694>
 400d894:	04c00104 	movi	r19,4
 400d898:	0021883a 	mov	r16,zero
 400d89c:	0025883a 	mov	r18,zero
 400d8a0:	02400044 	movi	r9,1
 400d8a4:	003f6906 	br	400d64c <__alt_data_end+0xfc00d64c>
 400d8a8:	04c00304 	movi	r19,12
 400d8ac:	024000c4 	movi	r9,3
 400d8b0:	003f6606 	br	400d64c <__alt_data_end+0xfc00d64c>
 400d8b4:	01400434 	movhi	r5,16
 400d8b8:	0007883a 	mov	r3,zero
 400d8bc:	297fffc4 	addi	r5,r5,-1
 400d8c0:	04bfffc4 	movi	r18,-1
 400d8c4:	0081ffc4 	movi	r2,2047
 400d8c8:	003fa106 	br	400d750 <__alt_data_end+0xfc00d750>
 400d8cc:	00c00044 	movi	r3,1
 400d8d0:	1887c83a 	sub	r3,r3,r2
 400d8d4:	01000e04 	movi	r4,56
 400d8d8:	20c1210e 	bge	r4,r3,400dd60 <__divdf3+0x78c>
 400d8dc:	98c0004c 	andi	r3,r19,1
 400d8e0:	0005883a 	mov	r2,zero
 400d8e4:	000b883a 	mov	r5,zero
 400d8e8:	0025883a 	mov	r18,zero
 400d8ec:	003f9806 	br	400d750 <__alt_data_end+0xfc00d750>
 400d8f0:	8c00fd36 	bltu	r17,r16,400dce8 <__divdf3+0x714>
 400d8f4:	8440fb26 	beq	r16,r17,400dce4 <__divdf3+0x710>
 400d8f8:	8007883a 	mov	r3,r16
 400d8fc:	ad7fffc4 	addi	r21,r21,-1
 400d900:	0021883a 	mov	r16,zero
 400d904:	4004d63a 	srli	r2,r8,24
 400d908:	8822923a 	slli	r17,r17,8
 400d90c:	1809883a 	mov	r4,r3
 400d910:	402c923a 	slli	r22,r8,8
 400d914:	88b8b03a 	or	fp,r17,r2
 400d918:	e028d43a 	srli	r20,fp,16
 400d91c:	d8c00015 	stw	r3,0(sp)
 400d920:	e5ffffcc 	andi	r23,fp,65535
 400d924:	a00b883a 	mov	r5,r20
 400d928:	4002b680 	call	4002b68 <__udivsi3>
 400d92c:	d8c00017 	ldw	r3,0(sp)
 400d930:	a00b883a 	mov	r5,r20
 400d934:	d8800315 	stw	r2,12(sp)
 400d938:	1809883a 	mov	r4,r3
 400d93c:	4002bcc0 	call	4002bcc <__umodsi3>
 400d940:	d9800317 	ldw	r6,12(sp)
 400d944:	1006943a 	slli	r3,r2,16
 400d948:	9004d43a 	srli	r2,r18,16
 400d94c:	b9a3383a 	mul	r17,r23,r6
 400d950:	10c4b03a 	or	r2,r2,r3
 400d954:	1440062e 	bgeu	r2,r17,400d970 <__divdf3+0x39c>
 400d958:	1705883a 	add	r2,r2,fp
 400d95c:	30ffffc4 	addi	r3,r6,-1
 400d960:	1700ee36 	bltu	r2,fp,400dd1c <__divdf3+0x748>
 400d964:	1440ed2e 	bgeu	r2,r17,400dd1c <__divdf3+0x748>
 400d968:	31bfff84 	addi	r6,r6,-2
 400d96c:	1705883a 	add	r2,r2,fp
 400d970:	1463c83a 	sub	r17,r2,r17
 400d974:	a00b883a 	mov	r5,r20
 400d978:	8809883a 	mov	r4,r17
 400d97c:	d9800315 	stw	r6,12(sp)
 400d980:	4002b680 	call	4002b68 <__udivsi3>
 400d984:	a00b883a 	mov	r5,r20
 400d988:	8809883a 	mov	r4,r17
 400d98c:	d8800215 	stw	r2,8(sp)
 400d990:	4002bcc0 	call	4002bcc <__umodsi3>
 400d994:	d9c00217 	ldw	r7,8(sp)
 400d998:	1004943a 	slli	r2,r2,16
 400d99c:	94bfffcc 	andi	r18,r18,65535
 400d9a0:	b9d1383a 	mul	r8,r23,r7
 400d9a4:	90a4b03a 	or	r18,r18,r2
 400d9a8:	d9800317 	ldw	r6,12(sp)
 400d9ac:	9200062e 	bgeu	r18,r8,400d9c8 <__divdf3+0x3f4>
 400d9b0:	9725883a 	add	r18,r18,fp
 400d9b4:	38bfffc4 	addi	r2,r7,-1
 400d9b8:	9700d636 	bltu	r18,fp,400dd14 <__divdf3+0x740>
 400d9bc:	9200d52e 	bgeu	r18,r8,400dd14 <__divdf3+0x740>
 400d9c0:	39ffff84 	addi	r7,r7,-2
 400d9c4:	9725883a 	add	r18,r18,fp
 400d9c8:	3004943a 	slli	r2,r6,16
 400d9cc:	b012d43a 	srli	r9,r22,16
 400d9d0:	b1bfffcc 	andi	r6,r22,65535
 400d9d4:	11e2b03a 	or	r17,r2,r7
 400d9d8:	8806d43a 	srli	r3,r17,16
 400d9dc:	893fffcc 	andi	r4,r17,65535
 400d9e0:	218b383a 	mul	r5,r4,r6
 400d9e4:	30c5383a 	mul	r2,r6,r3
 400d9e8:	2249383a 	mul	r4,r4,r9
 400d9ec:	280ed43a 	srli	r7,r5,16
 400d9f0:	9225c83a 	sub	r18,r18,r8
 400d9f4:	2089883a 	add	r4,r4,r2
 400d9f8:	3909883a 	add	r4,r7,r4
 400d9fc:	1a47383a 	mul	r3,r3,r9
 400da00:	2080022e 	bgeu	r4,r2,400da0c <__divdf3+0x438>
 400da04:	00800074 	movhi	r2,1
 400da08:	1887883a 	add	r3,r3,r2
 400da0c:	2004d43a 	srli	r2,r4,16
 400da10:	2008943a 	slli	r4,r4,16
 400da14:	297fffcc 	andi	r5,r5,65535
 400da18:	10c7883a 	add	r3,r2,r3
 400da1c:	2149883a 	add	r4,r4,r5
 400da20:	90c0a536 	bltu	r18,r3,400dcb8 <__divdf3+0x6e4>
 400da24:	90c0bf26 	beq	r18,r3,400dd24 <__divdf3+0x750>
 400da28:	90c7c83a 	sub	r3,r18,r3
 400da2c:	810fc83a 	sub	r7,r16,r4
 400da30:	81e5803a 	cmpltu	r18,r16,r7
 400da34:	1ca5c83a 	sub	r18,r3,r18
 400da38:	e480c126 	beq	fp,r18,400dd40 <__divdf3+0x76c>
 400da3c:	a00b883a 	mov	r5,r20
 400da40:	9009883a 	mov	r4,r18
 400da44:	d9800315 	stw	r6,12(sp)
 400da48:	d9c00215 	stw	r7,8(sp)
 400da4c:	da400115 	stw	r9,4(sp)
 400da50:	4002b680 	call	4002b68 <__udivsi3>
 400da54:	a00b883a 	mov	r5,r20
 400da58:	9009883a 	mov	r4,r18
 400da5c:	d8800015 	stw	r2,0(sp)
 400da60:	4002bcc0 	call	4002bcc <__umodsi3>
 400da64:	d9c00217 	ldw	r7,8(sp)
 400da68:	da000017 	ldw	r8,0(sp)
 400da6c:	1006943a 	slli	r3,r2,16
 400da70:	3804d43a 	srli	r2,r7,16
 400da74:	ba21383a 	mul	r16,r23,r8
 400da78:	d9800317 	ldw	r6,12(sp)
 400da7c:	10c4b03a 	or	r2,r2,r3
 400da80:	da400117 	ldw	r9,4(sp)
 400da84:	1400062e 	bgeu	r2,r16,400daa0 <__divdf3+0x4cc>
 400da88:	1705883a 	add	r2,r2,fp
 400da8c:	40ffffc4 	addi	r3,r8,-1
 400da90:	1700ad36 	bltu	r2,fp,400dd48 <__divdf3+0x774>
 400da94:	1400ac2e 	bgeu	r2,r16,400dd48 <__divdf3+0x774>
 400da98:	423fff84 	addi	r8,r8,-2
 400da9c:	1705883a 	add	r2,r2,fp
 400daa0:	1421c83a 	sub	r16,r2,r16
 400daa4:	a00b883a 	mov	r5,r20
 400daa8:	8009883a 	mov	r4,r16
 400daac:	d9800315 	stw	r6,12(sp)
 400dab0:	d9c00215 	stw	r7,8(sp)
 400dab4:	da000015 	stw	r8,0(sp)
 400dab8:	da400115 	stw	r9,4(sp)
 400dabc:	4002b680 	call	4002b68 <__udivsi3>
 400dac0:	8009883a 	mov	r4,r16
 400dac4:	a00b883a 	mov	r5,r20
 400dac8:	1025883a 	mov	r18,r2
 400dacc:	4002bcc0 	call	4002bcc <__umodsi3>
 400dad0:	d9c00217 	ldw	r7,8(sp)
 400dad4:	1004943a 	slli	r2,r2,16
 400dad8:	bcaf383a 	mul	r23,r23,r18
 400dadc:	393fffcc 	andi	r4,r7,65535
 400dae0:	2088b03a 	or	r4,r4,r2
 400dae4:	d9800317 	ldw	r6,12(sp)
 400dae8:	da000017 	ldw	r8,0(sp)
 400daec:	da400117 	ldw	r9,4(sp)
 400daf0:	25c0062e 	bgeu	r4,r23,400db0c <__divdf3+0x538>
 400daf4:	2709883a 	add	r4,r4,fp
 400daf8:	90bfffc4 	addi	r2,r18,-1
 400dafc:	27009436 	bltu	r4,fp,400dd50 <__divdf3+0x77c>
 400db00:	25c0932e 	bgeu	r4,r23,400dd50 <__divdf3+0x77c>
 400db04:	94bfff84 	addi	r18,r18,-2
 400db08:	2709883a 	add	r4,r4,fp
 400db0c:	4004943a 	slli	r2,r8,16
 400db10:	25efc83a 	sub	r23,r4,r23
 400db14:	1490b03a 	or	r8,r2,r18
 400db18:	4008d43a 	srli	r4,r8,16
 400db1c:	40ffffcc 	andi	r3,r8,65535
 400db20:	30c5383a 	mul	r2,r6,r3
 400db24:	1a47383a 	mul	r3,r3,r9
 400db28:	310d383a 	mul	r6,r6,r4
 400db2c:	100ad43a 	srli	r5,r2,16
 400db30:	4913383a 	mul	r9,r9,r4
 400db34:	1987883a 	add	r3,r3,r6
 400db38:	28c7883a 	add	r3,r5,r3
 400db3c:	1980022e 	bgeu	r3,r6,400db48 <__divdf3+0x574>
 400db40:	01000074 	movhi	r4,1
 400db44:	4913883a 	add	r9,r9,r4
 400db48:	1808d43a 	srli	r4,r3,16
 400db4c:	1806943a 	slli	r3,r3,16
 400db50:	10bfffcc 	andi	r2,r2,65535
 400db54:	2253883a 	add	r9,r4,r9
 400db58:	1887883a 	add	r3,r3,r2
 400db5c:	ba403836 	bltu	r23,r9,400dc40 <__divdf3+0x66c>
 400db60:	ba403626 	beq	r23,r9,400dc3c <__divdf3+0x668>
 400db64:	42000054 	ori	r8,r8,1
 400db68:	a880ffc4 	addi	r2,r21,1023
 400db6c:	00bf570e 	bge	zero,r2,400d8cc <__alt_data_end+0xfc00d8cc>
 400db70:	40c001cc 	andi	r3,r8,7
 400db74:	18000726 	beq	r3,zero,400db94 <__divdf3+0x5c0>
 400db78:	40c003cc 	andi	r3,r8,15
 400db7c:	01000104 	movi	r4,4
 400db80:	19000426 	beq	r3,r4,400db94 <__divdf3+0x5c0>
 400db84:	4107883a 	add	r3,r8,r4
 400db88:	1a11803a 	cmpltu	r8,r3,r8
 400db8c:	8a23883a 	add	r17,r17,r8
 400db90:	1811883a 	mov	r8,r3
 400db94:	88c0402c 	andhi	r3,r17,256
 400db98:	18000426 	beq	r3,zero,400dbac <__divdf3+0x5d8>
 400db9c:	00ffc034 	movhi	r3,65280
 400dba0:	18ffffc4 	addi	r3,r3,-1
 400dba4:	a8810004 	addi	r2,r21,1024
 400dba8:	88e2703a 	and	r17,r17,r3
 400dbac:	00c1ff84 	movi	r3,2046
 400dbb0:	18bee316 	blt	r3,r2,400d740 <__alt_data_end+0xfc00d740>
 400dbb4:	8824977a 	slli	r18,r17,29
 400dbb8:	4010d0fa 	srli	r8,r8,3
 400dbbc:	8822927a 	slli	r17,r17,9
 400dbc0:	1081ffcc 	andi	r2,r2,2047
 400dbc4:	9224b03a 	or	r18,r18,r8
 400dbc8:	880ad33a 	srli	r5,r17,12
 400dbcc:	98c0004c 	andi	r3,r19,1
 400dbd0:	003edf06 	br	400d750 <__alt_data_end+0xfc00d750>
 400dbd4:	8080022c 	andhi	r2,r16,8
 400dbd8:	10001226 	beq	r2,zero,400dc24 <__divdf3+0x650>
 400dbdc:	8880022c 	andhi	r2,r17,8
 400dbe0:	1000101e 	bne	r2,zero,400dc24 <__divdf3+0x650>
 400dbe4:	00800434 	movhi	r2,16
 400dbe8:	89400234 	orhi	r5,r17,8
 400dbec:	10bfffc4 	addi	r2,r2,-1
 400dbf0:	b007883a 	mov	r3,r22
 400dbf4:	288a703a 	and	r5,r5,r2
 400dbf8:	4025883a 	mov	r18,r8
 400dbfc:	003f3106 	br	400d8c4 <__alt_data_end+0xfc00d8c4>
 400dc00:	008000c4 	movi	r2,3
 400dc04:	3880a626 	beq	r7,r2,400dea0 <__divdf3+0x8cc>
 400dc08:	00800044 	movi	r2,1
 400dc0c:	3880521e 	bne	r7,r2,400dd58 <__divdf3+0x784>
 400dc10:	b807883a 	mov	r3,r23
 400dc14:	0005883a 	mov	r2,zero
 400dc18:	000b883a 	mov	r5,zero
 400dc1c:	0025883a 	mov	r18,zero
 400dc20:	003ecb06 	br	400d750 <__alt_data_end+0xfc00d750>
 400dc24:	00800434 	movhi	r2,16
 400dc28:	81400234 	orhi	r5,r16,8
 400dc2c:	10bfffc4 	addi	r2,r2,-1
 400dc30:	a007883a 	mov	r3,r20
 400dc34:	288a703a 	and	r5,r5,r2
 400dc38:	003f2206 	br	400d8c4 <__alt_data_end+0xfc00d8c4>
 400dc3c:	183fca26 	beq	r3,zero,400db68 <__alt_data_end+0xfc00db68>
 400dc40:	e5ef883a 	add	r23,fp,r23
 400dc44:	40bfffc4 	addi	r2,r8,-1
 400dc48:	bf00392e 	bgeu	r23,fp,400dd30 <__divdf3+0x75c>
 400dc4c:	1011883a 	mov	r8,r2
 400dc50:	ba7fc41e 	bne	r23,r9,400db64 <__alt_data_end+0xfc00db64>
 400dc54:	b0ffc31e 	bne	r22,r3,400db64 <__alt_data_end+0xfc00db64>
 400dc58:	003fc306 	br	400db68 <__alt_data_end+0xfc00db68>
 400dc5c:	143ff604 	addi	r16,r2,-40
 400dc60:	9c20983a 	sll	r16,r19,r16
 400dc64:	0025883a 	mov	r18,zero
 400dc68:	003ee206 	br	400d7f4 <__alt_data_end+0xfc00d7f4>
 400dc6c:	d9800315 	stw	r6,12(sp)
 400dc70:	d9c00215 	stw	r7,8(sp)
 400dc74:	400f32c0 	call	400f32c <__clzsi2>
 400dc78:	10800804 	addi	r2,r2,32
 400dc7c:	d9c00217 	ldw	r7,8(sp)
 400dc80:	d9800317 	ldw	r6,12(sp)
 400dc84:	003ed106 	br	400d7cc <__alt_data_end+0xfc00d7cc>
 400dc88:	147ff604 	addi	r17,r2,-40
 400dc8c:	3462983a 	sll	r17,r6,r17
 400dc90:	0011883a 	mov	r8,zero
 400dc94:	003ef506 	br	400d86c <__alt_data_end+0xfc00d86c>
 400dc98:	3009883a 	mov	r4,r6
 400dc9c:	d9800315 	stw	r6,12(sp)
 400dca0:	da400115 	stw	r9,4(sp)
 400dca4:	400f32c0 	call	400f32c <__clzsi2>
 400dca8:	10800804 	addi	r2,r2,32
 400dcac:	da400117 	ldw	r9,4(sp)
 400dcb0:	d9800317 	ldw	r6,12(sp)
 400dcb4:	003ee306 	br	400d844 <__alt_data_end+0xfc00d844>
 400dcb8:	85a1883a 	add	r16,r16,r22
 400dcbc:	8585803a 	cmpltu	r2,r16,r22
 400dcc0:	1705883a 	add	r2,r2,fp
 400dcc4:	14a5883a 	add	r18,r2,r18
 400dcc8:	88bfffc4 	addi	r2,r17,-1
 400dccc:	e4800c2e 	bgeu	fp,r18,400dd00 <__divdf3+0x72c>
 400dcd0:	90c03e36 	bltu	r18,r3,400ddcc <__divdf3+0x7f8>
 400dcd4:	1c806926 	beq	r3,r18,400de7c <__divdf3+0x8a8>
 400dcd8:	90c7c83a 	sub	r3,r18,r3
 400dcdc:	1023883a 	mov	r17,r2
 400dce0:	003f5206 	br	400da2c <__alt_data_end+0xfc00da2c>
 400dce4:	923f0436 	bltu	r18,r8,400d8f8 <__alt_data_end+0xfc00d8f8>
 400dce8:	800897fa 	slli	r4,r16,31
 400dcec:	9004d07a 	srli	r2,r18,1
 400dcf0:	8006d07a 	srli	r3,r16,1
 400dcf4:	902097fa 	slli	r16,r18,31
 400dcf8:	20a4b03a 	or	r18,r4,r2
 400dcfc:	003f0106 	br	400d904 <__alt_data_end+0xfc00d904>
 400dd00:	e4bff51e 	bne	fp,r18,400dcd8 <__alt_data_end+0xfc00dcd8>
 400dd04:	85bff22e 	bgeu	r16,r22,400dcd0 <__alt_data_end+0xfc00dcd0>
 400dd08:	e0c7c83a 	sub	r3,fp,r3
 400dd0c:	1023883a 	mov	r17,r2
 400dd10:	003f4606 	br	400da2c <__alt_data_end+0xfc00da2c>
 400dd14:	100f883a 	mov	r7,r2
 400dd18:	003f2b06 	br	400d9c8 <__alt_data_end+0xfc00d9c8>
 400dd1c:	180d883a 	mov	r6,r3
 400dd20:	003f1306 	br	400d970 <__alt_data_end+0xfc00d970>
 400dd24:	813fe436 	bltu	r16,r4,400dcb8 <__alt_data_end+0xfc00dcb8>
 400dd28:	0007883a 	mov	r3,zero
 400dd2c:	003f3f06 	br	400da2c <__alt_data_end+0xfc00da2c>
 400dd30:	ba402c36 	bltu	r23,r9,400dde4 <__divdf3+0x810>
 400dd34:	4dc05426 	beq	r9,r23,400de88 <__divdf3+0x8b4>
 400dd38:	1011883a 	mov	r8,r2
 400dd3c:	003f8906 	br	400db64 <__alt_data_end+0xfc00db64>
 400dd40:	023fffc4 	movi	r8,-1
 400dd44:	003f8806 	br	400db68 <__alt_data_end+0xfc00db68>
 400dd48:	1811883a 	mov	r8,r3
 400dd4c:	003f5406 	br	400daa0 <__alt_data_end+0xfc00daa0>
 400dd50:	1025883a 	mov	r18,r2
 400dd54:	003f6d06 	br	400db0c <__alt_data_end+0xfc00db0c>
 400dd58:	b827883a 	mov	r19,r23
 400dd5c:	003f8206 	br	400db68 <__alt_data_end+0xfc00db68>
 400dd60:	010007c4 	movi	r4,31
 400dd64:	20c02616 	blt	r4,r3,400de00 <__divdf3+0x82c>
 400dd68:	00800804 	movi	r2,32
 400dd6c:	10c5c83a 	sub	r2,r2,r3
 400dd70:	888a983a 	sll	r5,r17,r2
 400dd74:	40c8d83a 	srl	r4,r8,r3
 400dd78:	4084983a 	sll	r2,r8,r2
 400dd7c:	88e2d83a 	srl	r17,r17,r3
 400dd80:	2906b03a 	or	r3,r5,r4
 400dd84:	1004c03a 	cmpne	r2,r2,zero
 400dd88:	1886b03a 	or	r3,r3,r2
 400dd8c:	188001cc 	andi	r2,r3,7
 400dd90:	10000726 	beq	r2,zero,400ddb0 <__divdf3+0x7dc>
 400dd94:	188003cc 	andi	r2,r3,15
 400dd98:	01000104 	movi	r4,4
 400dd9c:	11000426 	beq	r2,r4,400ddb0 <__divdf3+0x7dc>
 400dda0:	1805883a 	mov	r2,r3
 400dda4:	10c00104 	addi	r3,r2,4
 400dda8:	1885803a 	cmpltu	r2,r3,r2
 400ddac:	88a3883a 	add	r17,r17,r2
 400ddb0:	8880202c 	andhi	r2,r17,128
 400ddb4:	10002726 	beq	r2,zero,400de54 <__divdf3+0x880>
 400ddb8:	98c0004c 	andi	r3,r19,1
 400ddbc:	00800044 	movi	r2,1
 400ddc0:	000b883a 	mov	r5,zero
 400ddc4:	0025883a 	mov	r18,zero
 400ddc8:	003e6106 	br	400d750 <__alt_data_end+0xfc00d750>
 400ddcc:	85a1883a 	add	r16,r16,r22
 400ddd0:	8585803a 	cmpltu	r2,r16,r22
 400ddd4:	1705883a 	add	r2,r2,fp
 400ddd8:	14a5883a 	add	r18,r2,r18
 400dddc:	8c7fff84 	addi	r17,r17,-2
 400dde0:	003f1106 	br	400da28 <__alt_data_end+0xfc00da28>
 400dde4:	b589883a 	add	r4,r22,r22
 400dde8:	25ad803a 	cmpltu	r22,r4,r22
 400ddec:	b739883a 	add	fp,r22,fp
 400ddf0:	40bfff84 	addi	r2,r8,-2
 400ddf4:	bf2f883a 	add	r23,r23,fp
 400ddf8:	202d883a 	mov	r22,r4
 400ddfc:	003f9306 	br	400dc4c <__alt_data_end+0xfc00dc4c>
 400de00:	013ff844 	movi	r4,-31
 400de04:	2085c83a 	sub	r2,r4,r2
 400de08:	8888d83a 	srl	r4,r17,r2
 400de0c:	00800804 	movi	r2,32
 400de10:	18802126 	beq	r3,r2,400de98 <__divdf3+0x8c4>
 400de14:	00801004 	movi	r2,64
 400de18:	10c5c83a 	sub	r2,r2,r3
 400de1c:	8884983a 	sll	r2,r17,r2
 400de20:	1204b03a 	or	r2,r2,r8
 400de24:	1004c03a 	cmpne	r2,r2,zero
 400de28:	2084b03a 	or	r2,r4,r2
 400de2c:	144001cc 	andi	r17,r2,7
 400de30:	88000d1e 	bne	r17,zero,400de68 <__divdf3+0x894>
 400de34:	000b883a 	mov	r5,zero
 400de38:	1024d0fa 	srli	r18,r2,3
 400de3c:	98c0004c 	andi	r3,r19,1
 400de40:	0005883a 	mov	r2,zero
 400de44:	9464b03a 	or	r18,r18,r17
 400de48:	003e4106 	br	400d750 <__alt_data_end+0xfc00d750>
 400de4c:	1007883a 	mov	r3,r2
 400de50:	0023883a 	mov	r17,zero
 400de54:	880a927a 	slli	r5,r17,9
 400de58:	1805883a 	mov	r2,r3
 400de5c:	8822977a 	slli	r17,r17,29
 400de60:	280ad33a 	srli	r5,r5,12
 400de64:	003ff406 	br	400de38 <__alt_data_end+0xfc00de38>
 400de68:	10c003cc 	andi	r3,r2,15
 400de6c:	01000104 	movi	r4,4
 400de70:	193ff626 	beq	r3,r4,400de4c <__alt_data_end+0xfc00de4c>
 400de74:	0023883a 	mov	r17,zero
 400de78:	003fca06 	br	400dda4 <__alt_data_end+0xfc00dda4>
 400de7c:	813fd336 	bltu	r16,r4,400ddcc <__alt_data_end+0xfc00ddcc>
 400de80:	1023883a 	mov	r17,r2
 400de84:	003fa806 	br	400dd28 <__alt_data_end+0xfc00dd28>
 400de88:	b0ffd636 	bltu	r22,r3,400dde4 <__alt_data_end+0xfc00dde4>
 400de8c:	1011883a 	mov	r8,r2
 400de90:	b0ff341e 	bne	r22,r3,400db64 <__alt_data_end+0xfc00db64>
 400de94:	003f3406 	br	400db68 <__alt_data_end+0xfc00db68>
 400de98:	0005883a 	mov	r2,zero
 400de9c:	003fe006 	br	400de20 <__alt_data_end+0xfc00de20>
 400dea0:	00800434 	movhi	r2,16
 400dea4:	89400234 	orhi	r5,r17,8
 400dea8:	10bfffc4 	addi	r2,r2,-1
 400deac:	b807883a 	mov	r3,r23
 400deb0:	288a703a 	and	r5,r5,r2
 400deb4:	4025883a 	mov	r18,r8
 400deb8:	003e8206 	br	400d8c4 <__alt_data_end+0xfc00d8c4>

0400debc <__eqdf2>:
 400debc:	2804d53a 	srli	r2,r5,20
 400dec0:	3806d53a 	srli	r3,r7,20
 400dec4:	02000434 	movhi	r8,16
 400dec8:	423fffc4 	addi	r8,r8,-1
 400decc:	1081ffcc 	andi	r2,r2,2047
 400ded0:	0281ffc4 	movi	r10,2047
 400ded4:	2a12703a 	and	r9,r5,r8
 400ded8:	18c1ffcc 	andi	r3,r3,2047
 400dedc:	3a10703a 	and	r8,r7,r8
 400dee0:	280ad7fa 	srli	r5,r5,31
 400dee4:	380ed7fa 	srli	r7,r7,31
 400dee8:	12801026 	beq	r2,r10,400df2c <__eqdf2+0x70>
 400deec:	0281ffc4 	movi	r10,2047
 400def0:	1a800a26 	beq	r3,r10,400df1c <__eqdf2+0x60>
 400def4:	10c00226 	beq	r2,r3,400df00 <__eqdf2+0x44>
 400def8:	00800044 	movi	r2,1
 400defc:	f800283a 	ret
 400df00:	4a3ffd1e 	bne	r9,r8,400def8 <__alt_data_end+0xfc00def8>
 400df04:	21bffc1e 	bne	r4,r6,400def8 <__alt_data_end+0xfc00def8>
 400df08:	29c00c26 	beq	r5,r7,400df3c <__eqdf2+0x80>
 400df0c:	103ffa1e 	bne	r2,zero,400def8 <__alt_data_end+0xfc00def8>
 400df10:	2244b03a 	or	r2,r4,r9
 400df14:	1004c03a 	cmpne	r2,r2,zero
 400df18:	f800283a 	ret
 400df1c:	3214b03a 	or	r10,r6,r8
 400df20:	503ff426 	beq	r10,zero,400def4 <__alt_data_end+0xfc00def4>
 400df24:	00800044 	movi	r2,1
 400df28:	f800283a 	ret
 400df2c:	2254b03a 	or	r10,r4,r9
 400df30:	503fee26 	beq	r10,zero,400deec <__alt_data_end+0xfc00deec>
 400df34:	00800044 	movi	r2,1
 400df38:	f800283a 	ret
 400df3c:	0005883a 	mov	r2,zero
 400df40:	f800283a 	ret

0400df44 <__gedf2>:
 400df44:	2804d53a 	srli	r2,r5,20
 400df48:	3806d53a 	srli	r3,r7,20
 400df4c:	02000434 	movhi	r8,16
 400df50:	423fffc4 	addi	r8,r8,-1
 400df54:	1081ffcc 	andi	r2,r2,2047
 400df58:	0241ffc4 	movi	r9,2047
 400df5c:	2a14703a 	and	r10,r5,r8
 400df60:	18c1ffcc 	andi	r3,r3,2047
 400df64:	3a10703a 	and	r8,r7,r8
 400df68:	280ad7fa 	srli	r5,r5,31
 400df6c:	380ed7fa 	srli	r7,r7,31
 400df70:	12401d26 	beq	r2,r9,400dfe8 <__gedf2+0xa4>
 400df74:	0241ffc4 	movi	r9,2047
 400df78:	1a401226 	beq	r3,r9,400dfc4 <__gedf2+0x80>
 400df7c:	1000081e 	bne	r2,zero,400dfa0 <__gedf2+0x5c>
 400df80:	2296b03a 	or	r11,r4,r10
 400df84:	5813003a 	cmpeq	r9,r11,zero
 400df88:	1800091e 	bne	r3,zero,400dfb0 <__gedf2+0x6c>
 400df8c:	3218b03a 	or	r12,r6,r8
 400df90:	6000071e 	bne	r12,zero,400dfb0 <__gedf2+0x6c>
 400df94:	0005883a 	mov	r2,zero
 400df98:	5800101e 	bne	r11,zero,400dfdc <__gedf2+0x98>
 400df9c:	f800283a 	ret
 400dfa0:	18000c1e 	bne	r3,zero,400dfd4 <__gedf2+0x90>
 400dfa4:	3212b03a 	or	r9,r6,r8
 400dfa8:	48000c26 	beq	r9,zero,400dfdc <__gedf2+0x98>
 400dfac:	0013883a 	mov	r9,zero
 400dfb0:	39c03fcc 	andi	r7,r7,255
 400dfb4:	48000826 	beq	r9,zero,400dfd8 <__gedf2+0x94>
 400dfb8:	38000926 	beq	r7,zero,400dfe0 <__gedf2+0x9c>
 400dfbc:	00800044 	movi	r2,1
 400dfc0:	f800283a 	ret
 400dfc4:	3212b03a 	or	r9,r6,r8
 400dfc8:	483fec26 	beq	r9,zero,400df7c <__alt_data_end+0xfc00df7c>
 400dfcc:	00bfff84 	movi	r2,-2
 400dfd0:	f800283a 	ret
 400dfd4:	39c03fcc 	andi	r7,r7,255
 400dfd8:	29c00626 	beq	r5,r7,400dff4 <__gedf2+0xb0>
 400dfdc:	283ff726 	beq	r5,zero,400dfbc <__alt_data_end+0xfc00dfbc>
 400dfe0:	00bfffc4 	movi	r2,-1
 400dfe4:	f800283a 	ret
 400dfe8:	2292b03a 	or	r9,r4,r10
 400dfec:	483fe126 	beq	r9,zero,400df74 <__alt_data_end+0xfc00df74>
 400dff0:	003ff606 	br	400dfcc <__alt_data_end+0xfc00dfcc>
 400dff4:	18bff916 	blt	r3,r2,400dfdc <__alt_data_end+0xfc00dfdc>
 400dff8:	10c00316 	blt	r2,r3,400e008 <__gedf2+0xc4>
 400dffc:	42bff736 	bltu	r8,r10,400dfdc <__alt_data_end+0xfc00dfdc>
 400e000:	52000326 	beq	r10,r8,400e010 <__gedf2+0xcc>
 400e004:	5200042e 	bgeu	r10,r8,400e018 <__gedf2+0xd4>
 400e008:	283fec1e 	bne	r5,zero,400dfbc <__alt_data_end+0xfc00dfbc>
 400e00c:	003ff406 	br	400dfe0 <__alt_data_end+0xfc00dfe0>
 400e010:	313ff236 	bltu	r6,r4,400dfdc <__alt_data_end+0xfc00dfdc>
 400e014:	21bffc36 	bltu	r4,r6,400e008 <__alt_data_end+0xfc00e008>
 400e018:	0005883a 	mov	r2,zero
 400e01c:	f800283a 	ret

0400e020 <__ledf2>:
 400e020:	2804d53a 	srli	r2,r5,20
 400e024:	3810d53a 	srli	r8,r7,20
 400e028:	00c00434 	movhi	r3,16
 400e02c:	18ffffc4 	addi	r3,r3,-1
 400e030:	1081ffcc 	andi	r2,r2,2047
 400e034:	0241ffc4 	movi	r9,2047
 400e038:	28d4703a 	and	r10,r5,r3
 400e03c:	4201ffcc 	andi	r8,r8,2047
 400e040:	38c6703a 	and	r3,r7,r3
 400e044:	280ad7fa 	srli	r5,r5,31
 400e048:	380ed7fa 	srli	r7,r7,31
 400e04c:	12401f26 	beq	r2,r9,400e0cc <__ledf2+0xac>
 400e050:	0241ffc4 	movi	r9,2047
 400e054:	42401426 	beq	r8,r9,400e0a8 <__ledf2+0x88>
 400e058:	1000091e 	bne	r2,zero,400e080 <__ledf2+0x60>
 400e05c:	2296b03a 	or	r11,r4,r10
 400e060:	5813003a 	cmpeq	r9,r11,zero
 400e064:	29403fcc 	andi	r5,r5,255
 400e068:	40000a1e 	bne	r8,zero,400e094 <__ledf2+0x74>
 400e06c:	30d8b03a 	or	r12,r6,r3
 400e070:	6000081e 	bne	r12,zero,400e094 <__ledf2+0x74>
 400e074:	0005883a 	mov	r2,zero
 400e078:	5800111e 	bne	r11,zero,400e0c0 <__ledf2+0xa0>
 400e07c:	f800283a 	ret
 400e080:	29403fcc 	andi	r5,r5,255
 400e084:	40000c1e 	bne	r8,zero,400e0b8 <__ledf2+0x98>
 400e088:	30d2b03a 	or	r9,r6,r3
 400e08c:	48000c26 	beq	r9,zero,400e0c0 <__ledf2+0xa0>
 400e090:	0013883a 	mov	r9,zero
 400e094:	39c03fcc 	andi	r7,r7,255
 400e098:	48000826 	beq	r9,zero,400e0bc <__ledf2+0x9c>
 400e09c:	38001126 	beq	r7,zero,400e0e4 <__ledf2+0xc4>
 400e0a0:	00800044 	movi	r2,1
 400e0a4:	f800283a 	ret
 400e0a8:	30d2b03a 	or	r9,r6,r3
 400e0ac:	483fea26 	beq	r9,zero,400e058 <__alt_data_end+0xfc00e058>
 400e0b0:	00800084 	movi	r2,2
 400e0b4:	f800283a 	ret
 400e0b8:	39c03fcc 	andi	r7,r7,255
 400e0bc:	39400726 	beq	r7,r5,400e0dc <__ledf2+0xbc>
 400e0c0:	2800081e 	bne	r5,zero,400e0e4 <__ledf2+0xc4>
 400e0c4:	00800044 	movi	r2,1
 400e0c8:	f800283a 	ret
 400e0cc:	2292b03a 	or	r9,r4,r10
 400e0d0:	483fdf26 	beq	r9,zero,400e050 <__alt_data_end+0xfc00e050>
 400e0d4:	00800084 	movi	r2,2
 400e0d8:	f800283a 	ret
 400e0dc:	4080030e 	bge	r8,r2,400e0ec <__ledf2+0xcc>
 400e0e0:	383fef26 	beq	r7,zero,400e0a0 <__alt_data_end+0xfc00e0a0>
 400e0e4:	00bfffc4 	movi	r2,-1
 400e0e8:	f800283a 	ret
 400e0ec:	123feb16 	blt	r2,r8,400e09c <__alt_data_end+0xfc00e09c>
 400e0f0:	1abff336 	bltu	r3,r10,400e0c0 <__alt_data_end+0xfc00e0c0>
 400e0f4:	50c00326 	beq	r10,r3,400e104 <__ledf2+0xe4>
 400e0f8:	50c0042e 	bgeu	r10,r3,400e10c <__ledf2+0xec>
 400e0fc:	283fe81e 	bne	r5,zero,400e0a0 <__alt_data_end+0xfc00e0a0>
 400e100:	003ff806 	br	400e0e4 <__alt_data_end+0xfc00e0e4>
 400e104:	313fee36 	bltu	r6,r4,400e0c0 <__alt_data_end+0xfc00e0c0>
 400e108:	21bffc36 	bltu	r4,r6,400e0fc <__alt_data_end+0xfc00e0fc>
 400e10c:	0005883a 	mov	r2,zero
 400e110:	f800283a 	ret

0400e114 <__muldf3>:
 400e114:	defff304 	addi	sp,sp,-52
 400e118:	2804d53a 	srli	r2,r5,20
 400e11c:	dd800915 	stw	r22,36(sp)
 400e120:	282cd7fa 	srli	r22,r5,31
 400e124:	dc000315 	stw	r16,12(sp)
 400e128:	04000434 	movhi	r16,16
 400e12c:	dd400815 	stw	r21,32(sp)
 400e130:	dc800515 	stw	r18,20(sp)
 400e134:	843fffc4 	addi	r16,r16,-1
 400e138:	dfc00c15 	stw	ra,48(sp)
 400e13c:	df000b15 	stw	fp,44(sp)
 400e140:	ddc00a15 	stw	r23,40(sp)
 400e144:	dd000715 	stw	r20,28(sp)
 400e148:	dcc00615 	stw	r19,24(sp)
 400e14c:	dc400415 	stw	r17,16(sp)
 400e150:	1481ffcc 	andi	r18,r2,2047
 400e154:	2c20703a 	and	r16,r5,r16
 400e158:	b02b883a 	mov	r21,r22
 400e15c:	b2403fcc 	andi	r9,r22,255
 400e160:	90006026 	beq	r18,zero,400e2e4 <__muldf3+0x1d0>
 400e164:	0081ffc4 	movi	r2,2047
 400e168:	2029883a 	mov	r20,r4
 400e16c:	90803626 	beq	r18,r2,400e248 <__muldf3+0x134>
 400e170:	80800434 	orhi	r2,r16,16
 400e174:	100490fa 	slli	r2,r2,3
 400e178:	2020d77a 	srli	r16,r4,29
 400e17c:	202890fa 	slli	r20,r4,3
 400e180:	94bf0044 	addi	r18,r18,-1023
 400e184:	80a0b03a 	or	r16,r16,r2
 400e188:	0027883a 	mov	r19,zero
 400e18c:	0039883a 	mov	fp,zero
 400e190:	3804d53a 	srli	r2,r7,20
 400e194:	382ed7fa 	srli	r23,r7,31
 400e198:	04400434 	movhi	r17,16
 400e19c:	8c7fffc4 	addi	r17,r17,-1
 400e1a0:	1081ffcc 	andi	r2,r2,2047
 400e1a4:	3011883a 	mov	r8,r6
 400e1a8:	3c62703a 	and	r17,r7,r17
 400e1ac:	ba803fcc 	andi	r10,r23,255
 400e1b0:	10006d26 	beq	r2,zero,400e368 <__muldf3+0x254>
 400e1b4:	00c1ffc4 	movi	r3,2047
 400e1b8:	10c06526 	beq	r2,r3,400e350 <__muldf3+0x23c>
 400e1bc:	88c00434 	orhi	r3,r17,16
 400e1c0:	180690fa 	slli	r3,r3,3
 400e1c4:	3022d77a 	srli	r17,r6,29
 400e1c8:	301090fa 	slli	r8,r6,3
 400e1cc:	10bf0044 	addi	r2,r2,-1023
 400e1d0:	88e2b03a 	or	r17,r17,r3
 400e1d4:	000b883a 	mov	r5,zero
 400e1d8:	9085883a 	add	r2,r18,r2
 400e1dc:	2cc8b03a 	or	r4,r5,r19
 400e1e0:	00c003c4 	movi	r3,15
 400e1e4:	bdacf03a 	xor	r22,r23,r22
 400e1e8:	12c00044 	addi	r11,r2,1
 400e1ec:	19009936 	bltu	r3,r4,400e454 <__muldf3+0x340>
 400e1f0:	200890ba 	slli	r4,r4,2
 400e1f4:	00c10074 	movhi	r3,1025
 400e1f8:	18f88204 	addi	r3,r3,-7672
 400e1fc:	20c9883a 	add	r4,r4,r3
 400e200:	20c00017 	ldw	r3,0(r4)
 400e204:	1800683a 	jmp	r3
 400e208:	0400e454 	movui	r16,913
 400e20c:	0400e268 	cmpgeui	r16,zero,905
 400e210:	0400e268 	cmpgeui	r16,zero,905
 400e214:	0400e264 	muli	r16,zero,905
 400e218:	0400e430 	cmpltui	r16,zero,912
 400e21c:	0400e430 	cmpltui	r16,zero,912
 400e220:	0400e418 	cmpnei	r16,zero,912
 400e224:	0400e264 	muli	r16,zero,905
 400e228:	0400e430 	cmpltui	r16,zero,912
 400e22c:	0400e418 	cmpnei	r16,zero,912
 400e230:	0400e430 	cmpltui	r16,zero,912
 400e234:	0400e264 	muli	r16,zero,905
 400e238:	0400e440 	call	400e44 <__alt_mem_dram_ctrl-0x3bff1bc>
 400e23c:	0400e440 	call	400e44 <__alt_mem_dram_ctrl-0x3bff1bc>
 400e240:	0400e440 	call	400e44 <__alt_mem_dram_ctrl-0x3bff1bc>
 400e244:	0400e65c 	xori	r16,zero,921
 400e248:	2404b03a 	or	r2,r4,r16
 400e24c:	10006f1e 	bne	r2,zero,400e40c <__muldf3+0x2f8>
 400e250:	04c00204 	movi	r19,8
 400e254:	0021883a 	mov	r16,zero
 400e258:	0029883a 	mov	r20,zero
 400e25c:	07000084 	movi	fp,2
 400e260:	003fcb06 	br	400e190 <__alt_data_end+0xfc00e190>
 400e264:	502d883a 	mov	r22,r10
 400e268:	00800084 	movi	r2,2
 400e26c:	28805726 	beq	r5,r2,400e3cc <__muldf3+0x2b8>
 400e270:	008000c4 	movi	r2,3
 400e274:	28816626 	beq	r5,r2,400e810 <__muldf3+0x6fc>
 400e278:	00800044 	movi	r2,1
 400e27c:	2881411e 	bne	r5,r2,400e784 <__muldf3+0x670>
 400e280:	b02b883a 	mov	r21,r22
 400e284:	0005883a 	mov	r2,zero
 400e288:	000b883a 	mov	r5,zero
 400e28c:	0029883a 	mov	r20,zero
 400e290:	1004953a 	slli	r2,r2,20
 400e294:	a8c03fcc 	andi	r3,r21,255
 400e298:	04400434 	movhi	r17,16
 400e29c:	8c7fffc4 	addi	r17,r17,-1
 400e2a0:	180697fa 	slli	r3,r3,31
 400e2a4:	2c4a703a 	and	r5,r5,r17
 400e2a8:	288ab03a 	or	r5,r5,r2
 400e2ac:	28c6b03a 	or	r3,r5,r3
 400e2b0:	a005883a 	mov	r2,r20
 400e2b4:	dfc00c17 	ldw	ra,48(sp)
 400e2b8:	df000b17 	ldw	fp,44(sp)
 400e2bc:	ddc00a17 	ldw	r23,40(sp)
 400e2c0:	dd800917 	ldw	r22,36(sp)
 400e2c4:	dd400817 	ldw	r21,32(sp)
 400e2c8:	dd000717 	ldw	r20,28(sp)
 400e2cc:	dcc00617 	ldw	r19,24(sp)
 400e2d0:	dc800517 	ldw	r18,20(sp)
 400e2d4:	dc400417 	ldw	r17,16(sp)
 400e2d8:	dc000317 	ldw	r16,12(sp)
 400e2dc:	dec00d04 	addi	sp,sp,52
 400e2e0:	f800283a 	ret
 400e2e4:	2404b03a 	or	r2,r4,r16
 400e2e8:	2027883a 	mov	r19,r4
 400e2ec:	10004226 	beq	r2,zero,400e3f8 <__muldf3+0x2e4>
 400e2f0:	8000fc26 	beq	r16,zero,400e6e4 <__muldf3+0x5d0>
 400e2f4:	8009883a 	mov	r4,r16
 400e2f8:	d9800215 	stw	r6,8(sp)
 400e2fc:	d9c00015 	stw	r7,0(sp)
 400e300:	da400115 	stw	r9,4(sp)
 400e304:	400f32c0 	call	400f32c <__clzsi2>
 400e308:	d9800217 	ldw	r6,8(sp)
 400e30c:	d9c00017 	ldw	r7,0(sp)
 400e310:	da400117 	ldw	r9,4(sp)
 400e314:	113ffd44 	addi	r4,r2,-11
 400e318:	00c00704 	movi	r3,28
 400e31c:	1900ed16 	blt	r3,r4,400e6d4 <__muldf3+0x5c0>
 400e320:	00c00744 	movi	r3,29
 400e324:	147ffe04 	addi	r17,r2,-8
 400e328:	1907c83a 	sub	r3,r3,r4
 400e32c:	8460983a 	sll	r16,r16,r17
 400e330:	98c6d83a 	srl	r3,r19,r3
 400e334:	9c68983a 	sll	r20,r19,r17
 400e338:	1c20b03a 	or	r16,r3,r16
 400e33c:	1080fcc4 	addi	r2,r2,1011
 400e340:	00a5c83a 	sub	r18,zero,r2
 400e344:	0027883a 	mov	r19,zero
 400e348:	0039883a 	mov	fp,zero
 400e34c:	003f9006 	br	400e190 <__alt_data_end+0xfc00e190>
 400e350:	3446b03a 	or	r3,r6,r17
 400e354:	1800261e 	bne	r3,zero,400e3f0 <__muldf3+0x2dc>
 400e358:	0023883a 	mov	r17,zero
 400e35c:	0011883a 	mov	r8,zero
 400e360:	01400084 	movi	r5,2
 400e364:	003f9c06 	br	400e1d8 <__alt_data_end+0xfc00e1d8>
 400e368:	3446b03a 	or	r3,r6,r17
 400e36c:	18001c26 	beq	r3,zero,400e3e0 <__muldf3+0x2cc>
 400e370:	8800ce26 	beq	r17,zero,400e6ac <__muldf3+0x598>
 400e374:	8809883a 	mov	r4,r17
 400e378:	d9800215 	stw	r6,8(sp)
 400e37c:	da400115 	stw	r9,4(sp)
 400e380:	da800015 	stw	r10,0(sp)
 400e384:	400f32c0 	call	400f32c <__clzsi2>
 400e388:	d9800217 	ldw	r6,8(sp)
 400e38c:	da400117 	ldw	r9,4(sp)
 400e390:	da800017 	ldw	r10,0(sp)
 400e394:	113ffd44 	addi	r4,r2,-11
 400e398:	00c00704 	movi	r3,28
 400e39c:	1900bf16 	blt	r3,r4,400e69c <__muldf3+0x588>
 400e3a0:	00c00744 	movi	r3,29
 400e3a4:	123ffe04 	addi	r8,r2,-8
 400e3a8:	1907c83a 	sub	r3,r3,r4
 400e3ac:	8a22983a 	sll	r17,r17,r8
 400e3b0:	30c6d83a 	srl	r3,r6,r3
 400e3b4:	3210983a 	sll	r8,r6,r8
 400e3b8:	1c62b03a 	or	r17,r3,r17
 400e3bc:	1080fcc4 	addi	r2,r2,1011
 400e3c0:	0085c83a 	sub	r2,zero,r2
 400e3c4:	000b883a 	mov	r5,zero
 400e3c8:	003f8306 	br	400e1d8 <__alt_data_end+0xfc00e1d8>
 400e3cc:	b02b883a 	mov	r21,r22
 400e3d0:	0081ffc4 	movi	r2,2047
 400e3d4:	000b883a 	mov	r5,zero
 400e3d8:	0029883a 	mov	r20,zero
 400e3dc:	003fac06 	br	400e290 <__alt_data_end+0xfc00e290>
 400e3e0:	0023883a 	mov	r17,zero
 400e3e4:	0011883a 	mov	r8,zero
 400e3e8:	01400044 	movi	r5,1
 400e3ec:	003f7a06 	br	400e1d8 <__alt_data_end+0xfc00e1d8>
 400e3f0:	014000c4 	movi	r5,3
 400e3f4:	003f7806 	br	400e1d8 <__alt_data_end+0xfc00e1d8>
 400e3f8:	04c00104 	movi	r19,4
 400e3fc:	0021883a 	mov	r16,zero
 400e400:	0029883a 	mov	r20,zero
 400e404:	07000044 	movi	fp,1
 400e408:	003f6106 	br	400e190 <__alt_data_end+0xfc00e190>
 400e40c:	04c00304 	movi	r19,12
 400e410:	070000c4 	movi	fp,3
 400e414:	003f5e06 	br	400e190 <__alt_data_end+0xfc00e190>
 400e418:	01400434 	movhi	r5,16
 400e41c:	002b883a 	mov	r21,zero
 400e420:	297fffc4 	addi	r5,r5,-1
 400e424:	053fffc4 	movi	r20,-1
 400e428:	0081ffc4 	movi	r2,2047
 400e42c:	003f9806 	br	400e290 <__alt_data_end+0xfc00e290>
 400e430:	8023883a 	mov	r17,r16
 400e434:	a011883a 	mov	r8,r20
 400e438:	e00b883a 	mov	r5,fp
 400e43c:	003f8a06 	br	400e268 <__alt_data_end+0xfc00e268>
 400e440:	8023883a 	mov	r17,r16
 400e444:	a011883a 	mov	r8,r20
 400e448:	482d883a 	mov	r22,r9
 400e44c:	e00b883a 	mov	r5,fp
 400e450:	003f8506 	br	400e268 <__alt_data_end+0xfc00e268>
 400e454:	a00ad43a 	srli	r5,r20,16
 400e458:	401ad43a 	srli	r13,r8,16
 400e45c:	a53fffcc 	andi	r20,r20,65535
 400e460:	423fffcc 	andi	r8,r8,65535
 400e464:	4519383a 	mul	r12,r8,r20
 400e468:	4147383a 	mul	r3,r8,r5
 400e46c:	6d09383a 	mul	r4,r13,r20
 400e470:	600cd43a 	srli	r6,r12,16
 400e474:	2b5d383a 	mul	r14,r5,r13
 400e478:	20c9883a 	add	r4,r4,r3
 400e47c:	310d883a 	add	r6,r6,r4
 400e480:	30c0022e 	bgeu	r6,r3,400e48c <__muldf3+0x378>
 400e484:	00c00074 	movhi	r3,1
 400e488:	70dd883a 	add	r14,r14,r3
 400e48c:	8826d43a 	srli	r19,r17,16
 400e490:	8bffffcc 	andi	r15,r17,65535
 400e494:	7d23383a 	mul	r17,r15,r20
 400e498:	7949383a 	mul	r4,r15,r5
 400e49c:	9d29383a 	mul	r20,r19,r20
 400e4a0:	8814d43a 	srli	r10,r17,16
 400e4a4:	3012943a 	slli	r9,r6,16
 400e4a8:	a129883a 	add	r20,r20,r4
 400e4ac:	633fffcc 	andi	r12,r12,65535
 400e4b0:	5515883a 	add	r10,r10,r20
 400e4b4:	3006d43a 	srli	r3,r6,16
 400e4b8:	4b13883a 	add	r9,r9,r12
 400e4bc:	2ccb383a 	mul	r5,r5,r19
 400e4c0:	5100022e 	bgeu	r10,r4,400e4cc <__muldf3+0x3b8>
 400e4c4:	01000074 	movhi	r4,1
 400e4c8:	290b883a 	add	r5,r5,r4
 400e4cc:	802ad43a 	srli	r21,r16,16
 400e4d0:	843fffcc 	andi	r16,r16,65535
 400e4d4:	440d383a 	mul	r6,r8,r16
 400e4d8:	4565383a 	mul	r18,r8,r21
 400e4dc:	8349383a 	mul	r4,r16,r13
 400e4e0:	500e943a 	slli	r7,r10,16
 400e4e4:	3010d43a 	srli	r8,r6,16
 400e4e8:	5028d43a 	srli	r20,r10,16
 400e4ec:	2489883a 	add	r4,r4,r18
 400e4f0:	8abfffcc 	andi	r10,r17,65535
 400e4f4:	3a95883a 	add	r10,r7,r10
 400e4f8:	4119883a 	add	r12,r8,r4
 400e4fc:	a169883a 	add	r20,r20,r5
 400e500:	1a87883a 	add	r3,r3,r10
 400e504:	6d5b383a 	mul	r13,r13,r21
 400e508:	6480022e 	bgeu	r12,r18,400e514 <__muldf3+0x400>
 400e50c:	01000074 	movhi	r4,1
 400e510:	691b883a 	add	r13,r13,r4
 400e514:	7c25383a 	mul	r18,r15,r16
 400e518:	7d4b383a 	mul	r5,r15,r21
 400e51c:	84cf383a 	mul	r7,r16,r19
 400e520:	901ed43a 	srli	r15,r18,16
 400e524:	6008d43a 	srli	r4,r12,16
 400e528:	6010943a 	slli	r8,r12,16
 400e52c:	394f883a 	add	r7,r7,r5
 400e530:	333fffcc 	andi	r12,r6,65535
 400e534:	79df883a 	add	r15,r15,r7
 400e538:	235b883a 	add	r13,r4,r13
 400e53c:	9d63383a 	mul	r17,r19,r21
 400e540:	4309883a 	add	r4,r8,r12
 400e544:	7940022e 	bgeu	r15,r5,400e550 <__muldf3+0x43c>
 400e548:	01400074 	movhi	r5,1
 400e54c:	8963883a 	add	r17,r17,r5
 400e550:	780a943a 	slli	r5,r15,16
 400e554:	91bfffcc 	andi	r6,r18,65535
 400e558:	70c7883a 	add	r3,r14,r3
 400e55c:	298d883a 	add	r6,r5,r6
 400e560:	1a8f803a 	cmpltu	r7,r3,r10
 400e564:	350b883a 	add	r5,r6,r20
 400e568:	20c7883a 	add	r3,r4,r3
 400e56c:	3955883a 	add	r10,r7,r5
 400e570:	1909803a 	cmpltu	r4,r3,r4
 400e574:	6a91883a 	add	r8,r13,r10
 400e578:	780cd43a 	srli	r6,r15,16
 400e57c:	2219883a 	add	r12,r4,r8
 400e580:	2d0b803a 	cmpltu	r5,r5,r20
 400e584:	51cf803a 	cmpltu	r7,r10,r7
 400e588:	29ceb03a 	or	r7,r5,r7
 400e58c:	4351803a 	cmpltu	r8,r8,r13
 400e590:	610b803a 	cmpltu	r5,r12,r4
 400e594:	4148b03a 	or	r4,r8,r5
 400e598:	398f883a 	add	r7,r7,r6
 400e59c:	3909883a 	add	r4,r7,r4
 400e5a0:	1810927a 	slli	r8,r3,9
 400e5a4:	2449883a 	add	r4,r4,r17
 400e5a8:	2008927a 	slli	r4,r4,9
 400e5ac:	6022d5fa 	srli	r17,r12,23
 400e5b0:	1806d5fa 	srli	r3,r3,23
 400e5b4:	4252b03a 	or	r9,r8,r9
 400e5b8:	600a927a 	slli	r5,r12,9
 400e5bc:	4810c03a 	cmpne	r8,r9,zero
 400e5c0:	2462b03a 	or	r17,r4,r17
 400e5c4:	40c6b03a 	or	r3,r8,r3
 400e5c8:	8900402c 	andhi	r4,r17,256
 400e5cc:	1950b03a 	or	r8,r3,r5
 400e5d0:	20000726 	beq	r4,zero,400e5f0 <__muldf3+0x4dc>
 400e5d4:	4006d07a 	srli	r3,r8,1
 400e5d8:	880497fa 	slli	r2,r17,31
 400e5dc:	4200004c 	andi	r8,r8,1
 400e5e0:	8822d07a 	srli	r17,r17,1
 400e5e4:	1a10b03a 	or	r8,r3,r8
 400e5e8:	1210b03a 	or	r8,r2,r8
 400e5ec:	5805883a 	mov	r2,r11
 400e5f0:	1140ffc4 	addi	r5,r2,1023
 400e5f4:	0140440e 	bge	zero,r5,400e708 <__muldf3+0x5f4>
 400e5f8:	40c001cc 	andi	r3,r8,7
 400e5fc:	18000726 	beq	r3,zero,400e61c <__muldf3+0x508>
 400e600:	40c003cc 	andi	r3,r8,15
 400e604:	01000104 	movi	r4,4
 400e608:	19000426 	beq	r3,r4,400e61c <__muldf3+0x508>
 400e60c:	4107883a 	add	r3,r8,r4
 400e610:	1a11803a 	cmpltu	r8,r3,r8
 400e614:	8a23883a 	add	r17,r17,r8
 400e618:	1811883a 	mov	r8,r3
 400e61c:	88c0402c 	andhi	r3,r17,256
 400e620:	18000426 	beq	r3,zero,400e634 <__muldf3+0x520>
 400e624:	11410004 	addi	r5,r2,1024
 400e628:	00bfc034 	movhi	r2,65280
 400e62c:	10bfffc4 	addi	r2,r2,-1
 400e630:	88a2703a 	and	r17,r17,r2
 400e634:	0081ff84 	movi	r2,2046
 400e638:	117f6416 	blt	r2,r5,400e3cc <__alt_data_end+0xfc00e3cc>
 400e63c:	8828977a 	slli	r20,r17,29
 400e640:	4010d0fa 	srli	r8,r8,3
 400e644:	8822927a 	slli	r17,r17,9
 400e648:	2881ffcc 	andi	r2,r5,2047
 400e64c:	a228b03a 	or	r20,r20,r8
 400e650:	880ad33a 	srli	r5,r17,12
 400e654:	b02b883a 	mov	r21,r22
 400e658:	003f0d06 	br	400e290 <__alt_data_end+0xfc00e290>
 400e65c:	8080022c 	andhi	r2,r16,8
 400e660:	10000926 	beq	r2,zero,400e688 <__muldf3+0x574>
 400e664:	8880022c 	andhi	r2,r17,8
 400e668:	1000071e 	bne	r2,zero,400e688 <__muldf3+0x574>
 400e66c:	00800434 	movhi	r2,16
 400e670:	89400234 	orhi	r5,r17,8
 400e674:	10bfffc4 	addi	r2,r2,-1
 400e678:	b82b883a 	mov	r21,r23
 400e67c:	288a703a 	and	r5,r5,r2
 400e680:	4029883a 	mov	r20,r8
 400e684:	003f6806 	br	400e428 <__alt_data_end+0xfc00e428>
 400e688:	00800434 	movhi	r2,16
 400e68c:	81400234 	orhi	r5,r16,8
 400e690:	10bfffc4 	addi	r2,r2,-1
 400e694:	288a703a 	and	r5,r5,r2
 400e698:	003f6306 	br	400e428 <__alt_data_end+0xfc00e428>
 400e69c:	147ff604 	addi	r17,r2,-40
 400e6a0:	3462983a 	sll	r17,r6,r17
 400e6a4:	0011883a 	mov	r8,zero
 400e6a8:	003f4406 	br	400e3bc <__alt_data_end+0xfc00e3bc>
 400e6ac:	3009883a 	mov	r4,r6
 400e6b0:	d9800215 	stw	r6,8(sp)
 400e6b4:	da400115 	stw	r9,4(sp)
 400e6b8:	da800015 	stw	r10,0(sp)
 400e6bc:	400f32c0 	call	400f32c <__clzsi2>
 400e6c0:	10800804 	addi	r2,r2,32
 400e6c4:	da800017 	ldw	r10,0(sp)
 400e6c8:	da400117 	ldw	r9,4(sp)
 400e6cc:	d9800217 	ldw	r6,8(sp)
 400e6d0:	003f3006 	br	400e394 <__alt_data_end+0xfc00e394>
 400e6d4:	143ff604 	addi	r16,r2,-40
 400e6d8:	9c20983a 	sll	r16,r19,r16
 400e6dc:	0029883a 	mov	r20,zero
 400e6e0:	003f1606 	br	400e33c <__alt_data_end+0xfc00e33c>
 400e6e4:	d9800215 	stw	r6,8(sp)
 400e6e8:	d9c00015 	stw	r7,0(sp)
 400e6ec:	da400115 	stw	r9,4(sp)
 400e6f0:	400f32c0 	call	400f32c <__clzsi2>
 400e6f4:	10800804 	addi	r2,r2,32
 400e6f8:	da400117 	ldw	r9,4(sp)
 400e6fc:	d9c00017 	ldw	r7,0(sp)
 400e700:	d9800217 	ldw	r6,8(sp)
 400e704:	003f0306 	br	400e314 <__alt_data_end+0xfc00e314>
 400e708:	00c00044 	movi	r3,1
 400e70c:	1947c83a 	sub	r3,r3,r5
 400e710:	00800e04 	movi	r2,56
 400e714:	10feda16 	blt	r2,r3,400e280 <__alt_data_end+0xfc00e280>
 400e718:	008007c4 	movi	r2,31
 400e71c:	10c01b16 	blt	r2,r3,400e78c <__muldf3+0x678>
 400e720:	00800804 	movi	r2,32
 400e724:	10c5c83a 	sub	r2,r2,r3
 400e728:	888a983a 	sll	r5,r17,r2
 400e72c:	40c8d83a 	srl	r4,r8,r3
 400e730:	4084983a 	sll	r2,r8,r2
 400e734:	88e2d83a 	srl	r17,r17,r3
 400e738:	2906b03a 	or	r3,r5,r4
 400e73c:	1004c03a 	cmpne	r2,r2,zero
 400e740:	1886b03a 	or	r3,r3,r2
 400e744:	188001cc 	andi	r2,r3,7
 400e748:	10000726 	beq	r2,zero,400e768 <__muldf3+0x654>
 400e74c:	188003cc 	andi	r2,r3,15
 400e750:	01000104 	movi	r4,4
 400e754:	11000426 	beq	r2,r4,400e768 <__muldf3+0x654>
 400e758:	1805883a 	mov	r2,r3
 400e75c:	10c00104 	addi	r3,r2,4
 400e760:	1885803a 	cmpltu	r2,r3,r2
 400e764:	88a3883a 	add	r17,r17,r2
 400e768:	8880202c 	andhi	r2,r17,128
 400e76c:	10001c26 	beq	r2,zero,400e7e0 <__muldf3+0x6cc>
 400e770:	b02b883a 	mov	r21,r22
 400e774:	00800044 	movi	r2,1
 400e778:	000b883a 	mov	r5,zero
 400e77c:	0029883a 	mov	r20,zero
 400e780:	003ec306 	br	400e290 <__alt_data_end+0xfc00e290>
 400e784:	5805883a 	mov	r2,r11
 400e788:	003f9906 	br	400e5f0 <__alt_data_end+0xfc00e5f0>
 400e78c:	00bff844 	movi	r2,-31
 400e790:	1145c83a 	sub	r2,r2,r5
 400e794:	8888d83a 	srl	r4,r17,r2
 400e798:	00800804 	movi	r2,32
 400e79c:	18801a26 	beq	r3,r2,400e808 <__muldf3+0x6f4>
 400e7a0:	00801004 	movi	r2,64
 400e7a4:	10c5c83a 	sub	r2,r2,r3
 400e7a8:	8884983a 	sll	r2,r17,r2
 400e7ac:	1204b03a 	or	r2,r2,r8
 400e7b0:	1004c03a 	cmpne	r2,r2,zero
 400e7b4:	2084b03a 	or	r2,r4,r2
 400e7b8:	144001cc 	andi	r17,r2,7
 400e7bc:	88000d1e 	bne	r17,zero,400e7f4 <__muldf3+0x6e0>
 400e7c0:	000b883a 	mov	r5,zero
 400e7c4:	1028d0fa 	srli	r20,r2,3
 400e7c8:	b02b883a 	mov	r21,r22
 400e7cc:	0005883a 	mov	r2,zero
 400e7d0:	a468b03a 	or	r20,r20,r17
 400e7d4:	003eae06 	br	400e290 <__alt_data_end+0xfc00e290>
 400e7d8:	1007883a 	mov	r3,r2
 400e7dc:	0023883a 	mov	r17,zero
 400e7e0:	880a927a 	slli	r5,r17,9
 400e7e4:	1805883a 	mov	r2,r3
 400e7e8:	8822977a 	slli	r17,r17,29
 400e7ec:	280ad33a 	srli	r5,r5,12
 400e7f0:	003ff406 	br	400e7c4 <__alt_data_end+0xfc00e7c4>
 400e7f4:	10c003cc 	andi	r3,r2,15
 400e7f8:	01000104 	movi	r4,4
 400e7fc:	193ff626 	beq	r3,r4,400e7d8 <__alt_data_end+0xfc00e7d8>
 400e800:	0023883a 	mov	r17,zero
 400e804:	003fd506 	br	400e75c <__alt_data_end+0xfc00e75c>
 400e808:	0005883a 	mov	r2,zero
 400e80c:	003fe706 	br	400e7ac <__alt_data_end+0xfc00e7ac>
 400e810:	00800434 	movhi	r2,16
 400e814:	89400234 	orhi	r5,r17,8
 400e818:	10bfffc4 	addi	r2,r2,-1
 400e81c:	b02b883a 	mov	r21,r22
 400e820:	288a703a 	and	r5,r5,r2
 400e824:	4029883a 	mov	r20,r8
 400e828:	003eff06 	br	400e428 <__alt_data_end+0xfc00e428>

0400e82c <__subdf3>:
 400e82c:	02000434 	movhi	r8,16
 400e830:	423fffc4 	addi	r8,r8,-1
 400e834:	defffb04 	addi	sp,sp,-20
 400e838:	2a14703a 	and	r10,r5,r8
 400e83c:	3812d53a 	srli	r9,r7,20
 400e840:	3a10703a 	and	r8,r7,r8
 400e844:	2006d77a 	srli	r3,r4,29
 400e848:	3004d77a 	srli	r2,r6,29
 400e84c:	dc000015 	stw	r16,0(sp)
 400e850:	501490fa 	slli	r10,r10,3
 400e854:	2820d53a 	srli	r16,r5,20
 400e858:	401090fa 	slli	r8,r8,3
 400e85c:	dc800215 	stw	r18,8(sp)
 400e860:	dc400115 	stw	r17,4(sp)
 400e864:	dfc00415 	stw	ra,16(sp)
 400e868:	202290fa 	slli	r17,r4,3
 400e86c:	dcc00315 	stw	r19,12(sp)
 400e870:	4a41ffcc 	andi	r9,r9,2047
 400e874:	0101ffc4 	movi	r4,2047
 400e878:	2824d7fa 	srli	r18,r5,31
 400e87c:	8401ffcc 	andi	r16,r16,2047
 400e880:	50c6b03a 	or	r3,r10,r3
 400e884:	380ed7fa 	srli	r7,r7,31
 400e888:	408ab03a 	or	r5,r8,r2
 400e88c:	300c90fa 	slli	r6,r6,3
 400e890:	49009626 	beq	r9,r4,400eaec <__subdf3+0x2c0>
 400e894:	39c0005c 	xori	r7,r7,1
 400e898:	8245c83a 	sub	r2,r16,r9
 400e89c:	3c807426 	beq	r7,r18,400ea70 <__subdf3+0x244>
 400e8a0:	0080af0e 	bge	zero,r2,400eb60 <__subdf3+0x334>
 400e8a4:	48002a1e 	bne	r9,zero,400e950 <__subdf3+0x124>
 400e8a8:	2988b03a 	or	r4,r5,r6
 400e8ac:	20009a1e 	bne	r4,zero,400eb18 <__subdf3+0x2ec>
 400e8b0:	888001cc 	andi	r2,r17,7
 400e8b4:	10000726 	beq	r2,zero,400e8d4 <__subdf3+0xa8>
 400e8b8:	888003cc 	andi	r2,r17,15
 400e8bc:	01000104 	movi	r4,4
 400e8c0:	11000426 	beq	r2,r4,400e8d4 <__subdf3+0xa8>
 400e8c4:	890b883a 	add	r5,r17,r4
 400e8c8:	2c63803a 	cmpltu	r17,r5,r17
 400e8cc:	1c47883a 	add	r3,r3,r17
 400e8d0:	2823883a 	mov	r17,r5
 400e8d4:	1880202c 	andhi	r2,r3,128
 400e8d8:	10005926 	beq	r2,zero,400ea40 <__subdf3+0x214>
 400e8dc:	84000044 	addi	r16,r16,1
 400e8e0:	0081ffc4 	movi	r2,2047
 400e8e4:	8080be26 	beq	r16,r2,400ebe0 <__subdf3+0x3b4>
 400e8e8:	017fe034 	movhi	r5,65408
 400e8ec:	297fffc4 	addi	r5,r5,-1
 400e8f0:	1946703a 	and	r3,r3,r5
 400e8f4:	1804977a 	slli	r2,r3,29
 400e8f8:	1806927a 	slli	r3,r3,9
 400e8fc:	8822d0fa 	srli	r17,r17,3
 400e900:	8401ffcc 	andi	r16,r16,2047
 400e904:	180ad33a 	srli	r5,r3,12
 400e908:	9100004c 	andi	r4,r18,1
 400e90c:	1444b03a 	or	r2,r2,r17
 400e910:	80c1ffcc 	andi	r3,r16,2047
 400e914:	1820953a 	slli	r16,r3,20
 400e918:	20c03fcc 	andi	r3,r4,255
 400e91c:	180897fa 	slli	r4,r3,31
 400e920:	00c00434 	movhi	r3,16
 400e924:	18ffffc4 	addi	r3,r3,-1
 400e928:	28c6703a 	and	r3,r5,r3
 400e92c:	1c06b03a 	or	r3,r3,r16
 400e930:	1906b03a 	or	r3,r3,r4
 400e934:	dfc00417 	ldw	ra,16(sp)
 400e938:	dcc00317 	ldw	r19,12(sp)
 400e93c:	dc800217 	ldw	r18,8(sp)
 400e940:	dc400117 	ldw	r17,4(sp)
 400e944:	dc000017 	ldw	r16,0(sp)
 400e948:	dec00504 	addi	sp,sp,20
 400e94c:	f800283a 	ret
 400e950:	0101ffc4 	movi	r4,2047
 400e954:	813fd626 	beq	r16,r4,400e8b0 <__alt_data_end+0xfc00e8b0>
 400e958:	29402034 	orhi	r5,r5,128
 400e95c:	01000e04 	movi	r4,56
 400e960:	2080a316 	blt	r4,r2,400ebf0 <__subdf3+0x3c4>
 400e964:	010007c4 	movi	r4,31
 400e968:	2080c616 	blt	r4,r2,400ec84 <__subdf3+0x458>
 400e96c:	01000804 	movi	r4,32
 400e970:	2089c83a 	sub	r4,r4,r2
 400e974:	2910983a 	sll	r8,r5,r4
 400e978:	308ed83a 	srl	r7,r6,r2
 400e97c:	3108983a 	sll	r4,r6,r4
 400e980:	2884d83a 	srl	r2,r5,r2
 400e984:	41ccb03a 	or	r6,r8,r7
 400e988:	2008c03a 	cmpne	r4,r4,zero
 400e98c:	310cb03a 	or	r6,r6,r4
 400e990:	898dc83a 	sub	r6,r17,r6
 400e994:	89a3803a 	cmpltu	r17,r17,r6
 400e998:	1887c83a 	sub	r3,r3,r2
 400e99c:	1c47c83a 	sub	r3,r3,r17
 400e9a0:	3023883a 	mov	r17,r6
 400e9a4:	1880202c 	andhi	r2,r3,128
 400e9a8:	10002326 	beq	r2,zero,400ea38 <__subdf3+0x20c>
 400e9ac:	04c02034 	movhi	r19,128
 400e9b0:	9cffffc4 	addi	r19,r19,-1
 400e9b4:	1ce6703a 	and	r19,r3,r19
 400e9b8:	98007a26 	beq	r19,zero,400eba4 <__subdf3+0x378>
 400e9bc:	9809883a 	mov	r4,r19
 400e9c0:	400f32c0 	call	400f32c <__clzsi2>
 400e9c4:	113ffe04 	addi	r4,r2,-8
 400e9c8:	00c007c4 	movi	r3,31
 400e9cc:	19007b16 	blt	r3,r4,400ebbc <__subdf3+0x390>
 400e9d0:	00800804 	movi	r2,32
 400e9d4:	1105c83a 	sub	r2,r2,r4
 400e9d8:	8884d83a 	srl	r2,r17,r2
 400e9dc:	9906983a 	sll	r3,r19,r4
 400e9e0:	8922983a 	sll	r17,r17,r4
 400e9e4:	10c4b03a 	or	r2,r2,r3
 400e9e8:	24007816 	blt	r4,r16,400ebcc <__subdf3+0x3a0>
 400e9ec:	2421c83a 	sub	r16,r4,r16
 400e9f0:	80c00044 	addi	r3,r16,1
 400e9f4:	010007c4 	movi	r4,31
 400e9f8:	20c09516 	blt	r4,r3,400ec50 <__subdf3+0x424>
 400e9fc:	01400804 	movi	r5,32
 400ea00:	28cbc83a 	sub	r5,r5,r3
 400ea04:	88c8d83a 	srl	r4,r17,r3
 400ea08:	8962983a 	sll	r17,r17,r5
 400ea0c:	114a983a 	sll	r5,r2,r5
 400ea10:	10c6d83a 	srl	r3,r2,r3
 400ea14:	8804c03a 	cmpne	r2,r17,zero
 400ea18:	290ab03a 	or	r5,r5,r4
 400ea1c:	28a2b03a 	or	r17,r5,r2
 400ea20:	0021883a 	mov	r16,zero
 400ea24:	003fa206 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400ea28:	2090b03a 	or	r8,r4,r2
 400ea2c:	40018e26 	beq	r8,zero,400f068 <__subdf3+0x83c>
 400ea30:	1007883a 	mov	r3,r2
 400ea34:	2023883a 	mov	r17,r4
 400ea38:	888001cc 	andi	r2,r17,7
 400ea3c:	103f9e1e 	bne	r2,zero,400e8b8 <__alt_data_end+0xfc00e8b8>
 400ea40:	1804977a 	slli	r2,r3,29
 400ea44:	8822d0fa 	srli	r17,r17,3
 400ea48:	1810d0fa 	srli	r8,r3,3
 400ea4c:	9100004c 	andi	r4,r18,1
 400ea50:	1444b03a 	or	r2,r2,r17
 400ea54:	00c1ffc4 	movi	r3,2047
 400ea58:	80c02826 	beq	r16,r3,400eafc <__subdf3+0x2d0>
 400ea5c:	01400434 	movhi	r5,16
 400ea60:	297fffc4 	addi	r5,r5,-1
 400ea64:	80e0703a 	and	r16,r16,r3
 400ea68:	414a703a 	and	r5,r8,r5
 400ea6c:	003fa806 	br	400e910 <__alt_data_end+0xfc00e910>
 400ea70:	0080630e 	bge	zero,r2,400ec00 <__subdf3+0x3d4>
 400ea74:	48003026 	beq	r9,zero,400eb38 <__subdf3+0x30c>
 400ea78:	0101ffc4 	movi	r4,2047
 400ea7c:	813f8c26 	beq	r16,r4,400e8b0 <__alt_data_end+0xfc00e8b0>
 400ea80:	29402034 	orhi	r5,r5,128
 400ea84:	01000e04 	movi	r4,56
 400ea88:	2080a90e 	bge	r4,r2,400ed30 <__subdf3+0x504>
 400ea8c:	298cb03a 	or	r6,r5,r6
 400ea90:	3012c03a 	cmpne	r9,r6,zero
 400ea94:	0005883a 	mov	r2,zero
 400ea98:	4c53883a 	add	r9,r9,r17
 400ea9c:	4c63803a 	cmpltu	r17,r9,r17
 400eaa0:	10c7883a 	add	r3,r2,r3
 400eaa4:	88c7883a 	add	r3,r17,r3
 400eaa8:	4823883a 	mov	r17,r9
 400eaac:	1880202c 	andhi	r2,r3,128
 400eab0:	1000d026 	beq	r2,zero,400edf4 <__subdf3+0x5c8>
 400eab4:	84000044 	addi	r16,r16,1
 400eab8:	0081ffc4 	movi	r2,2047
 400eabc:	8080fe26 	beq	r16,r2,400eeb8 <__subdf3+0x68c>
 400eac0:	00bfe034 	movhi	r2,65408
 400eac4:	10bfffc4 	addi	r2,r2,-1
 400eac8:	1886703a 	and	r3,r3,r2
 400eacc:	880ad07a 	srli	r5,r17,1
 400ead0:	180497fa 	slli	r2,r3,31
 400ead4:	8900004c 	andi	r4,r17,1
 400ead8:	2922b03a 	or	r17,r5,r4
 400eadc:	1806d07a 	srli	r3,r3,1
 400eae0:	1462b03a 	or	r17,r2,r17
 400eae4:	3825883a 	mov	r18,r7
 400eae8:	003f7106 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400eaec:	2984b03a 	or	r2,r5,r6
 400eaf0:	103f6826 	beq	r2,zero,400e894 <__alt_data_end+0xfc00e894>
 400eaf4:	39c03fcc 	andi	r7,r7,255
 400eaf8:	003f6706 	br	400e898 <__alt_data_end+0xfc00e898>
 400eafc:	4086b03a 	or	r3,r8,r2
 400eb00:	18015226 	beq	r3,zero,400f04c <__subdf3+0x820>
 400eb04:	00c00434 	movhi	r3,16
 400eb08:	41400234 	orhi	r5,r8,8
 400eb0c:	18ffffc4 	addi	r3,r3,-1
 400eb10:	28ca703a 	and	r5,r5,r3
 400eb14:	003f7e06 	br	400e910 <__alt_data_end+0xfc00e910>
 400eb18:	10bfffc4 	addi	r2,r2,-1
 400eb1c:	1000491e 	bne	r2,zero,400ec44 <__subdf3+0x418>
 400eb20:	898fc83a 	sub	r7,r17,r6
 400eb24:	89e3803a 	cmpltu	r17,r17,r7
 400eb28:	1947c83a 	sub	r3,r3,r5
 400eb2c:	1c47c83a 	sub	r3,r3,r17
 400eb30:	3823883a 	mov	r17,r7
 400eb34:	003f9b06 	br	400e9a4 <__alt_data_end+0xfc00e9a4>
 400eb38:	2988b03a 	or	r4,r5,r6
 400eb3c:	203f5c26 	beq	r4,zero,400e8b0 <__alt_data_end+0xfc00e8b0>
 400eb40:	10bfffc4 	addi	r2,r2,-1
 400eb44:	1000931e 	bne	r2,zero,400ed94 <__subdf3+0x568>
 400eb48:	898d883a 	add	r6,r17,r6
 400eb4c:	3463803a 	cmpltu	r17,r6,r17
 400eb50:	1947883a 	add	r3,r3,r5
 400eb54:	88c7883a 	add	r3,r17,r3
 400eb58:	3023883a 	mov	r17,r6
 400eb5c:	003fd306 	br	400eaac <__alt_data_end+0xfc00eaac>
 400eb60:	1000541e 	bne	r2,zero,400ecb4 <__subdf3+0x488>
 400eb64:	80800044 	addi	r2,r16,1
 400eb68:	1081ffcc 	andi	r2,r2,2047
 400eb6c:	01000044 	movi	r4,1
 400eb70:	2080a20e 	bge	r4,r2,400edfc <__subdf3+0x5d0>
 400eb74:	8989c83a 	sub	r4,r17,r6
 400eb78:	8905803a 	cmpltu	r2,r17,r4
 400eb7c:	1967c83a 	sub	r19,r3,r5
 400eb80:	98a7c83a 	sub	r19,r19,r2
 400eb84:	9880202c 	andhi	r2,r19,128
 400eb88:	10006326 	beq	r2,zero,400ed18 <__subdf3+0x4ec>
 400eb8c:	3463c83a 	sub	r17,r6,r17
 400eb90:	28c7c83a 	sub	r3,r5,r3
 400eb94:	344d803a 	cmpltu	r6,r6,r17
 400eb98:	19a7c83a 	sub	r19,r3,r6
 400eb9c:	3825883a 	mov	r18,r7
 400eba0:	983f861e 	bne	r19,zero,400e9bc <__alt_data_end+0xfc00e9bc>
 400eba4:	8809883a 	mov	r4,r17
 400eba8:	400f32c0 	call	400f32c <__clzsi2>
 400ebac:	10800804 	addi	r2,r2,32
 400ebb0:	113ffe04 	addi	r4,r2,-8
 400ebb4:	00c007c4 	movi	r3,31
 400ebb8:	193f850e 	bge	r3,r4,400e9d0 <__alt_data_end+0xfc00e9d0>
 400ebbc:	10bff604 	addi	r2,r2,-40
 400ebc0:	8884983a 	sll	r2,r17,r2
 400ebc4:	0023883a 	mov	r17,zero
 400ebc8:	243f880e 	bge	r4,r16,400e9ec <__alt_data_end+0xfc00e9ec>
 400ebcc:	00ffe034 	movhi	r3,65408
 400ebd0:	18ffffc4 	addi	r3,r3,-1
 400ebd4:	8121c83a 	sub	r16,r16,r4
 400ebd8:	10c6703a 	and	r3,r2,r3
 400ebdc:	003f3406 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400ebe0:	9100004c 	andi	r4,r18,1
 400ebe4:	000b883a 	mov	r5,zero
 400ebe8:	0005883a 	mov	r2,zero
 400ebec:	003f4806 	br	400e910 <__alt_data_end+0xfc00e910>
 400ebf0:	298cb03a 	or	r6,r5,r6
 400ebf4:	300cc03a 	cmpne	r6,r6,zero
 400ebf8:	0005883a 	mov	r2,zero
 400ebfc:	003f6406 	br	400e990 <__alt_data_end+0xfc00e990>
 400ec00:	10009a1e 	bne	r2,zero,400ee6c <__subdf3+0x640>
 400ec04:	82400044 	addi	r9,r16,1
 400ec08:	4881ffcc 	andi	r2,r9,2047
 400ec0c:	02800044 	movi	r10,1
 400ec10:	5080670e 	bge	r10,r2,400edb0 <__subdf3+0x584>
 400ec14:	0081ffc4 	movi	r2,2047
 400ec18:	4880af26 	beq	r9,r2,400eed8 <__subdf3+0x6ac>
 400ec1c:	898d883a 	add	r6,r17,r6
 400ec20:	1945883a 	add	r2,r3,r5
 400ec24:	3447803a 	cmpltu	r3,r6,r17
 400ec28:	1887883a 	add	r3,r3,r2
 400ec2c:	182297fa 	slli	r17,r3,31
 400ec30:	300cd07a 	srli	r6,r6,1
 400ec34:	1806d07a 	srli	r3,r3,1
 400ec38:	4821883a 	mov	r16,r9
 400ec3c:	89a2b03a 	or	r17,r17,r6
 400ec40:	003f1b06 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400ec44:	0101ffc4 	movi	r4,2047
 400ec48:	813f441e 	bne	r16,r4,400e95c <__alt_data_end+0xfc00e95c>
 400ec4c:	003f1806 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400ec50:	843ff844 	addi	r16,r16,-31
 400ec54:	01400804 	movi	r5,32
 400ec58:	1408d83a 	srl	r4,r2,r16
 400ec5c:	19405026 	beq	r3,r5,400eda0 <__subdf3+0x574>
 400ec60:	01401004 	movi	r5,64
 400ec64:	28c7c83a 	sub	r3,r5,r3
 400ec68:	10c4983a 	sll	r2,r2,r3
 400ec6c:	88a2b03a 	or	r17,r17,r2
 400ec70:	8822c03a 	cmpne	r17,r17,zero
 400ec74:	2462b03a 	or	r17,r4,r17
 400ec78:	0007883a 	mov	r3,zero
 400ec7c:	0021883a 	mov	r16,zero
 400ec80:	003f6d06 	br	400ea38 <__alt_data_end+0xfc00ea38>
 400ec84:	11fff804 	addi	r7,r2,-32
 400ec88:	01000804 	movi	r4,32
 400ec8c:	29ced83a 	srl	r7,r5,r7
 400ec90:	11004526 	beq	r2,r4,400eda8 <__subdf3+0x57c>
 400ec94:	01001004 	movi	r4,64
 400ec98:	2089c83a 	sub	r4,r4,r2
 400ec9c:	2904983a 	sll	r2,r5,r4
 400eca0:	118cb03a 	or	r6,r2,r6
 400eca4:	300cc03a 	cmpne	r6,r6,zero
 400eca8:	398cb03a 	or	r6,r7,r6
 400ecac:	0005883a 	mov	r2,zero
 400ecb0:	003f3706 	br	400e990 <__alt_data_end+0xfc00e990>
 400ecb4:	80002a26 	beq	r16,zero,400ed60 <__subdf3+0x534>
 400ecb8:	0101ffc4 	movi	r4,2047
 400ecbc:	49006626 	beq	r9,r4,400ee58 <__subdf3+0x62c>
 400ecc0:	0085c83a 	sub	r2,zero,r2
 400ecc4:	18c02034 	orhi	r3,r3,128
 400ecc8:	01000e04 	movi	r4,56
 400eccc:	20807e16 	blt	r4,r2,400eec8 <__subdf3+0x69c>
 400ecd0:	010007c4 	movi	r4,31
 400ecd4:	2080e716 	blt	r4,r2,400f074 <__subdf3+0x848>
 400ecd8:	01000804 	movi	r4,32
 400ecdc:	2089c83a 	sub	r4,r4,r2
 400ece0:	1914983a 	sll	r10,r3,r4
 400ece4:	8890d83a 	srl	r8,r17,r2
 400ece8:	8908983a 	sll	r4,r17,r4
 400ecec:	1884d83a 	srl	r2,r3,r2
 400ecf0:	5222b03a 	or	r17,r10,r8
 400ecf4:	2006c03a 	cmpne	r3,r4,zero
 400ecf8:	88e2b03a 	or	r17,r17,r3
 400ecfc:	3463c83a 	sub	r17,r6,r17
 400ed00:	2885c83a 	sub	r2,r5,r2
 400ed04:	344d803a 	cmpltu	r6,r6,r17
 400ed08:	1187c83a 	sub	r3,r2,r6
 400ed0c:	4821883a 	mov	r16,r9
 400ed10:	3825883a 	mov	r18,r7
 400ed14:	003f2306 	br	400e9a4 <__alt_data_end+0xfc00e9a4>
 400ed18:	24d0b03a 	or	r8,r4,r19
 400ed1c:	40001b1e 	bne	r8,zero,400ed8c <__subdf3+0x560>
 400ed20:	0005883a 	mov	r2,zero
 400ed24:	0009883a 	mov	r4,zero
 400ed28:	0021883a 	mov	r16,zero
 400ed2c:	003f4906 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400ed30:	010007c4 	movi	r4,31
 400ed34:	20803a16 	blt	r4,r2,400ee20 <__subdf3+0x5f4>
 400ed38:	01000804 	movi	r4,32
 400ed3c:	2089c83a 	sub	r4,r4,r2
 400ed40:	2912983a 	sll	r9,r5,r4
 400ed44:	3090d83a 	srl	r8,r6,r2
 400ed48:	3108983a 	sll	r4,r6,r4
 400ed4c:	2884d83a 	srl	r2,r5,r2
 400ed50:	4a12b03a 	or	r9,r9,r8
 400ed54:	2008c03a 	cmpne	r4,r4,zero
 400ed58:	4912b03a 	or	r9,r9,r4
 400ed5c:	003f4e06 	br	400ea98 <__alt_data_end+0xfc00ea98>
 400ed60:	1c48b03a 	or	r4,r3,r17
 400ed64:	20003c26 	beq	r4,zero,400ee58 <__subdf3+0x62c>
 400ed68:	0084303a 	nor	r2,zero,r2
 400ed6c:	1000381e 	bne	r2,zero,400ee50 <__subdf3+0x624>
 400ed70:	3463c83a 	sub	r17,r6,r17
 400ed74:	28c5c83a 	sub	r2,r5,r3
 400ed78:	344d803a 	cmpltu	r6,r6,r17
 400ed7c:	1187c83a 	sub	r3,r2,r6
 400ed80:	4821883a 	mov	r16,r9
 400ed84:	3825883a 	mov	r18,r7
 400ed88:	003f0606 	br	400e9a4 <__alt_data_end+0xfc00e9a4>
 400ed8c:	2023883a 	mov	r17,r4
 400ed90:	003f0906 	br	400e9b8 <__alt_data_end+0xfc00e9b8>
 400ed94:	0101ffc4 	movi	r4,2047
 400ed98:	813f3a1e 	bne	r16,r4,400ea84 <__alt_data_end+0xfc00ea84>
 400ed9c:	003ec406 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400eda0:	0005883a 	mov	r2,zero
 400eda4:	003fb106 	br	400ec6c <__alt_data_end+0xfc00ec6c>
 400eda8:	0005883a 	mov	r2,zero
 400edac:	003fbc06 	br	400eca0 <__alt_data_end+0xfc00eca0>
 400edb0:	1c44b03a 	or	r2,r3,r17
 400edb4:	80008e1e 	bne	r16,zero,400eff0 <__subdf3+0x7c4>
 400edb8:	1000c826 	beq	r2,zero,400f0dc <__subdf3+0x8b0>
 400edbc:	2984b03a 	or	r2,r5,r6
 400edc0:	103ebb26 	beq	r2,zero,400e8b0 <__alt_data_end+0xfc00e8b0>
 400edc4:	8989883a 	add	r4,r17,r6
 400edc8:	1945883a 	add	r2,r3,r5
 400edcc:	2447803a 	cmpltu	r3,r4,r17
 400edd0:	1887883a 	add	r3,r3,r2
 400edd4:	1880202c 	andhi	r2,r3,128
 400edd8:	2023883a 	mov	r17,r4
 400eddc:	103f1626 	beq	r2,zero,400ea38 <__alt_data_end+0xfc00ea38>
 400ede0:	00bfe034 	movhi	r2,65408
 400ede4:	10bfffc4 	addi	r2,r2,-1
 400ede8:	5021883a 	mov	r16,r10
 400edec:	1886703a 	and	r3,r3,r2
 400edf0:	003eaf06 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400edf4:	3825883a 	mov	r18,r7
 400edf8:	003f0f06 	br	400ea38 <__alt_data_end+0xfc00ea38>
 400edfc:	1c44b03a 	or	r2,r3,r17
 400ee00:	8000251e 	bne	r16,zero,400ee98 <__subdf3+0x66c>
 400ee04:	1000661e 	bne	r2,zero,400efa0 <__subdf3+0x774>
 400ee08:	2990b03a 	or	r8,r5,r6
 400ee0c:	40009626 	beq	r8,zero,400f068 <__subdf3+0x83c>
 400ee10:	2807883a 	mov	r3,r5
 400ee14:	3023883a 	mov	r17,r6
 400ee18:	3825883a 	mov	r18,r7
 400ee1c:	003ea406 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400ee20:	127ff804 	addi	r9,r2,-32
 400ee24:	01000804 	movi	r4,32
 400ee28:	2a52d83a 	srl	r9,r5,r9
 400ee2c:	11008c26 	beq	r2,r4,400f060 <__subdf3+0x834>
 400ee30:	01001004 	movi	r4,64
 400ee34:	2085c83a 	sub	r2,r4,r2
 400ee38:	2884983a 	sll	r2,r5,r2
 400ee3c:	118cb03a 	or	r6,r2,r6
 400ee40:	300cc03a 	cmpne	r6,r6,zero
 400ee44:	4992b03a 	or	r9,r9,r6
 400ee48:	0005883a 	mov	r2,zero
 400ee4c:	003f1206 	br	400ea98 <__alt_data_end+0xfc00ea98>
 400ee50:	0101ffc4 	movi	r4,2047
 400ee54:	493f9c1e 	bne	r9,r4,400ecc8 <__alt_data_end+0xfc00ecc8>
 400ee58:	2807883a 	mov	r3,r5
 400ee5c:	3023883a 	mov	r17,r6
 400ee60:	4821883a 	mov	r16,r9
 400ee64:	3825883a 	mov	r18,r7
 400ee68:	003e9106 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400ee6c:	80001f1e 	bne	r16,zero,400eeec <__subdf3+0x6c0>
 400ee70:	1c48b03a 	or	r4,r3,r17
 400ee74:	20005a26 	beq	r4,zero,400efe0 <__subdf3+0x7b4>
 400ee78:	0084303a 	nor	r2,zero,r2
 400ee7c:	1000561e 	bne	r2,zero,400efd8 <__subdf3+0x7ac>
 400ee80:	89a3883a 	add	r17,r17,r6
 400ee84:	1945883a 	add	r2,r3,r5
 400ee88:	898d803a 	cmpltu	r6,r17,r6
 400ee8c:	3087883a 	add	r3,r6,r2
 400ee90:	4821883a 	mov	r16,r9
 400ee94:	003f0506 	br	400eaac <__alt_data_end+0xfc00eaac>
 400ee98:	10002b1e 	bne	r2,zero,400ef48 <__subdf3+0x71c>
 400ee9c:	2984b03a 	or	r2,r5,r6
 400eea0:	10008026 	beq	r2,zero,400f0a4 <__subdf3+0x878>
 400eea4:	2807883a 	mov	r3,r5
 400eea8:	3023883a 	mov	r17,r6
 400eeac:	3825883a 	mov	r18,r7
 400eeb0:	0401ffc4 	movi	r16,2047
 400eeb4:	003e7e06 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400eeb8:	3809883a 	mov	r4,r7
 400eebc:	0011883a 	mov	r8,zero
 400eec0:	0005883a 	mov	r2,zero
 400eec4:	003ee306 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400eec8:	1c62b03a 	or	r17,r3,r17
 400eecc:	8822c03a 	cmpne	r17,r17,zero
 400eed0:	0005883a 	mov	r2,zero
 400eed4:	003f8906 	br	400ecfc <__alt_data_end+0xfc00ecfc>
 400eed8:	3809883a 	mov	r4,r7
 400eedc:	4821883a 	mov	r16,r9
 400eee0:	0011883a 	mov	r8,zero
 400eee4:	0005883a 	mov	r2,zero
 400eee8:	003eda06 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400eeec:	0101ffc4 	movi	r4,2047
 400eef0:	49003b26 	beq	r9,r4,400efe0 <__subdf3+0x7b4>
 400eef4:	0085c83a 	sub	r2,zero,r2
 400eef8:	18c02034 	orhi	r3,r3,128
 400eefc:	01000e04 	movi	r4,56
 400ef00:	20806e16 	blt	r4,r2,400f0bc <__subdf3+0x890>
 400ef04:	010007c4 	movi	r4,31
 400ef08:	20807716 	blt	r4,r2,400f0e8 <__subdf3+0x8bc>
 400ef0c:	01000804 	movi	r4,32
 400ef10:	2089c83a 	sub	r4,r4,r2
 400ef14:	1914983a 	sll	r10,r3,r4
 400ef18:	8890d83a 	srl	r8,r17,r2
 400ef1c:	8908983a 	sll	r4,r17,r4
 400ef20:	1884d83a 	srl	r2,r3,r2
 400ef24:	5222b03a 	or	r17,r10,r8
 400ef28:	2006c03a 	cmpne	r3,r4,zero
 400ef2c:	88e2b03a 	or	r17,r17,r3
 400ef30:	89a3883a 	add	r17,r17,r6
 400ef34:	1145883a 	add	r2,r2,r5
 400ef38:	898d803a 	cmpltu	r6,r17,r6
 400ef3c:	3087883a 	add	r3,r6,r2
 400ef40:	4821883a 	mov	r16,r9
 400ef44:	003ed906 	br	400eaac <__alt_data_end+0xfc00eaac>
 400ef48:	2984b03a 	or	r2,r5,r6
 400ef4c:	10004226 	beq	r2,zero,400f058 <__subdf3+0x82c>
 400ef50:	1808d0fa 	srli	r4,r3,3
 400ef54:	8822d0fa 	srli	r17,r17,3
 400ef58:	1806977a 	slli	r3,r3,29
 400ef5c:	2080022c 	andhi	r2,r4,8
 400ef60:	1c62b03a 	or	r17,r3,r17
 400ef64:	10000826 	beq	r2,zero,400ef88 <__subdf3+0x75c>
 400ef68:	2812d0fa 	srli	r9,r5,3
 400ef6c:	4880022c 	andhi	r2,r9,8
 400ef70:	1000051e 	bne	r2,zero,400ef88 <__subdf3+0x75c>
 400ef74:	300cd0fa 	srli	r6,r6,3
 400ef78:	2804977a 	slli	r2,r5,29
 400ef7c:	4809883a 	mov	r4,r9
 400ef80:	3825883a 	mov	r18,r7
 400ef84:	11a2b03a 	or	r17,r2,r6
 400ef88:	8806d77a 	srli	r3,r17,29
 400ef8c:	200890fa 	slli	r4,r4,3
 400ef90:	882290fa 	slli	r17,r17,3
 400ef94:	0401ffc4 	movi	r16,2047
 400ef98:	1906b03a 	or	r3,r3,r4
 400ef9c:	003e4406 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400efa0:	2984b03a 	or	r2,r5,r6
 400efa4:	103e4226 	beq	r2,zero,400e8b0 <__alt_data_end+0xfc00e8b0>
 400efa8:	8989c83a 	sub	r4,r17,r6
 400efac:	8911803a 	cmpltu	r8,r17,r4
 400efb0:	1945c83a 	sub	r2,r3,r5
 400efb4:	1205c83a 	sub	r2,r2,r8
 400efb8:	1200202c 	andhi	r8,r2,128
 400efbc:	403e9a26 	beq	r8,zero,400ea28 <__alt_data_end+0xfc00ea28>
 400efc0:	3463c83a 	sub	r17,r6,r17
 400efc4:	28c5c83a 	sub	r2,r5,r3
 400efc8:	344d803a 	cmpltu	r6,r6,r17
 400efcc:	1187c83a 	sub	r3,r2,r6
 400efd0:	3825883a 	mov	r18,r7
 400efd4:	003e3606 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400efd8:	0101ffc4 	movi	r4,2047
 400efdc:	493fc71e 	bne	r9,r4,400eefc <__alt_data_end+0xfc00eefc>
 400efe0:	2807883a 	mov	r3,r5
 400efe4:	3023883a 	mov	r17,r6
 400efe8:	4821883a 	mov	r16,r9
 400efec:	003e3006 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400eff0:	10003626 	beq	r2,zero,400f0cc <__subdf3+0x8a0>
 400eff4:	2984b03a 	or	r2,r5,r6
 400eff8:	10001726 	beq	r2,zero,400f058 <__subdf3+0x82c>
 400effc:	1808d0fa 	srli	r4,r3,3
 400f000:	8822d0fa 	srli	r17,r17,3
 400f004:	1806977a 	slli	r3,r3,29
 400f008:	2080022c 	andhi	r2,r4,8
 400f00c:	1c62b03a 	or	r17,r3,r17
 400f010:	10000726 	beq	r2,zero,400f030 <__subdf3+0x804>
 400f014:	2812d0fa 	srli	r9,r5,3
 400f018:	4880022c 	andhi	r2,r9,8
 400f01c:	1000041e 	bne	r2,zero,400f030 <__subdf3+0x804>
 400f020:	300cd0fa 	srli	r6,r6,3
 400f024:	2804977a 	slli	r2,r5,29
 400f028:	4809883a 	mov	r4,r9
 400f02c:	11a2b03a 	or	r17,r2,r6
 400f030:	8806d77a 	srli	r3,r17,29
 400f034:	200890fa 	slli	r4,r4,3
 400f038:	882290fa 	slli	r17,r17,3
 400f03c:	3825883a 	mov	r18,r7
 400f040:	1906b03a 	or	r3,r3,r4
 400f044:	0401ffc4 	movi	r16,2047
 400f048:	003e1906 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400f04c:	000b883a 	mov	r5,zero
 400f050:	0005883a 	mov	r2,zero
 400f054:	003e2e06 	br	400e910 <__alt_data_end+0xfc00e910>
 400f058:	0401ffc4 	movi	r16,2047
 400f05c:	003e1406 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400f060:	0005883a 	mov	r2,zero
 400f064:	003f7506 	br	400ee3c <__alt_data_end+0xfc00ee3c>
 400f068:	0005883a 	mov	r2,zero
 400f06c:	0009883a 	mov	r4,zero
 400f070:	003e7806 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400f074:	123ff804 	addi	r8,r2,-32
 400f078:	01000804 	movi	r4,32
 400f07c:	1a10d83a 	srl	r8,r3,r8
 400f080:	11002526 	beq	r2,r4,400f118 <__subdf3+0x8ec>
 400f084:	01001004 	movi	r4,64
 400f088:	2085c83a 	sub	r2,r4,r2
 400f08c:	1884983a 	sll	r2,r3,r2
 400f090:	1444b03a 	or	r2,r2,r17
 400f094:	1004c03a 	cmpne	r2,r2,zero
 400f098:	40a2b03a 	or	r17,r8,r2
 400f09c:	0005883a 	mov	r2,zero
 400f0a0:	003f1606 	br	400ecfc <__alt_data_end+0xfc00ecfc>
 400f0a4:	02000434 	movhi	r8,16
 400f0a8:	0009883a 	mov	r4,zero
 400f0ac:	423fffc4 	addi	r8,r8,-1
 400f0b0:	00bfffc4 	movi	r2,-1
 400f0b4:	0401ffc4 	movi	r16,2047
 400f0b8:	003e6606 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400f0bc:	1c62b03a 	or	r17,r3,r17
 400f0c0:	8822c03a 	cmpne	r17,r17,zero
 400f0c4:	0005883a 	mov	r2,zero
 400f0c8:	003f9906 	br	400ef30 <__alt_data_end+0xfc00ef30>
 400f0cc:	2807883a 	mov	r3,r5
 400f0d0:	3023883a 	mov	r17,r6
 400f0d4:	0401ffc4 	movi	r16,2047
 400f0d8:	003df506 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400f0dc:	2807883a 	mov	r3,r5
 400f0e0:	3023883a 	mov	r17,r6
 400f0e4:	003df206 	br	400e8b0 <__alt_data_end+0xfc00e8b0>
 400f0e8:	123ff804 	addi	r8,r2,-32
 400f0ec:	01000804 	movi	r4,32
 400f0f0:	1a10d83a 	srl	r8,r3,r8
 400f0f4:	11000a26 	beq	r2,r4,400f120 <__subdf3+0x8f4>
 400f0f8:	01001004 	movi	r4,64
 400f0fc:	2085c83a 	sub	r2,r4,r2
 400f100:	1884983a 	sll	r2,r3,r2
 400f104:	1444b03a 	or	r2,r2,r17
 400f108:	1004c03a 	cmpne	r2,r2,zero
 400f10c:	40a2b03a 	or	r17,r8,r2
 400f110:	0005883a 	mov	r2,zero
 400f114:	003f8606 	br	400ef30 <__alt_data_end+0xfc00ef30>
 400f118:	0005883a 	mov	r2,zero
 400f11c:	003fdc06 	br	400f090 <__alt_data_end+0xfc00f090>
 400f120:	0005883a 	mov	r2,zero
 400f124:	003ff706 	br	400f104 <__alt_data_end+0xfc00f104>

0400f128 <__fixdfsi>:
 400f128:	280cd53a 	srli	r6,r5,20
 400f12c:	00c00434 	movhi	r3,16
 400f130:	18ffffc4 	addi	r3,r3,-1
 400f134:	3181ffcc 	andi	r6,r6,2047
 400f138:	01c0ff84 	movi	r7,1022
 400f13c:	28c6703a 	and	r3,r5,r3
 400f140:	280ad7fa 	srli	r5,r5,31
 400f144:	3980120e 	bge	r7,r6,400f190 <__fixdfsi+0x68>
 400f148:	00810744 	movi	r2,1053
 400f14c:	11800c16 	blt	r2,r6,400f180 <__fixdfsi+0x58>
 400f150:	00810cc4 	movi	r2,1075
 400f154:	1185c83a 	sub	r2,r2,r6
 400f158:	01c007c4 	movi	r7,31
 400f15c:	18c00434 	orhi	r3,r3,16
 400f160:	38800d16 	blt	r7,r2,400f198 <__fixdfsi+0x70>
 400f164:	31befb44 	addi	r6,r6,-1043
 400f168:	2084d83a 	srl	r2,r4,r2
 400f16c:	1986983a 	sll	r3,r3,r6
 400f170:	1884b03a 	or	r2,r3,r2
 400f174:	28000726 	beq	r5,zero,400f194 <__fixdfsi+0x6c>
 400f178:	0085c83a 	sub	r2,zero,r2
 400f17c:	f800283a 	ret
 400f180:	00a00034 	movhi	r2,32768
 400f184:	10bfffc4 	addi	r2,r2,-1
 400f188:	2885883a 	add	r2,r5,r2
 400f18c:	f800283a 	ret
 400f190:	0005883a 	mov	r2,zero
 400f194:	f800283a 	ret
 400f198:	008104c4 	movi	r2,1043
 400f19c:	1185c83a 	sub	r2,r2,r6
 400f1a0:	1884d83a 	srl	r2,r3,r2
 400f1a4:	003ff306 	br	400f174 <__alt_data_end+0xfc00f174>

0400f1a8 <__floatsidf>:
 400f1a8:	defffd04 	addi	sp,sp,-12
 400f1ac:	dfc00215 	stw	ra,8(sp)
 400f1b0:	dc400115 	stw	r17,4(sp)
 400f1b4:	dc000015 	stw	r16,0(sp)
 400f1b8:	20002b26 	beq	r4,zero,400f268 <__floatsidf+0xc0>
 400f1bc:	2023883a 	mov	r17,r4
 400f1c0:	2020d7fa 	srli	r16,r4,31
 400f1c4:	20002d16 	blt	r4,zero,400f27c <__floatsidf+0xd4>
 400f1c8:	8809883a 	mov	r4,r17
 400f1cc:	400f32c0 	call	400f32c <__clzsi2>
 400f1d0:	01410784 	movi	r5,1054
 400f1d4:	288bc83a 	sub	r5,r5,r2
 400f1d8:	01010cc4 	movi	r4,1075
 400f1dc:	2149c83a 	sub	r4,r4,r5
 400f1e0:	00c007c4 	movi	r3,31
 400f1e4:	1900160e 	bge	r3,r4,400f240 <__floatsidf+0x98>
 400f1e8:	00c104c4 	movi	r3,1043
 400f1ec:	1947c83a 	sub	r3,r3,r5
 400f1f0:	88c6983a 	sll	r3,r17,r3
 400f1f4:	00800434 	movhi	r2,16
 400f1f8:	10bfffc4 	addi	r2,r2,-1
 400f1fc:	1886703a 	and	r3,r3,r2
 400f200:	2941ffcc 	andi	r5,r5,2047
 400f204:	800d883a 	mov	r6,r16
 400f208:	0005883a 	mov	r2,zero
 400f20c:	280a953a 	slli	r5,r5,20
 400f210:	31803fcc 	andi	r6,r6,255
 400f214:	01000434 	movhi	r4,16
 400f218:	300c97fa 	slli	r6,r6,31
 400f21c:	213fffc4 	addi	r4,r4,-1
 400f220:	1906703a 	and	r3,r3,r4
 400f224:	1946b03a 	or	r3,r3,r5
 400f228:	1986b03a 	or	r3,r3,r6
 400f22c:	dfc00217 	ldw	ra,8(sp)
 400f230:	dc400117 	ldw	r17,4(sp)
 400f234:	dc000017 	ldw	r16,0(sp)
 400f238:	dec00304 	addi	sp,sp,12
 400f23c:	f800283a 	ret
 400f240:	00c002c4 	movi	r3,11
 400f244:	1887c83a 	sub	r3,r3,r2
 400f248:	88c6d83a 	srl	r3,r17,r3
 400f24c:	8904983a 	sll	r2,r17,r4
 400f250:	01000434 	movhi	r4,16
 400f254:	213fffc4 	addi	r4,r4,-1
 400f258:	2941ffcc 	andi	r5,r5,2047
 400f25c:	1906703a 	and	r3,r3,r4
 400f260:	800d883a 	mov	r6,r16
 400f264:	003fe906 	br	400f20c <__alt_data_end+0xfc00f20c>
 400f268:	000d883a 	mov	r6,zero
 400f26c:	000b883a 	mov	r5,zero
 400f270:	0007883a 	mov	r3,zero
 400f274:	0005883a 	mov	r2,zero
 400f278:	003fe406 	br	400f20c <__alt_data_end+0xfc00f20c>
 400f27c:	0123c83a 	sub	r17,zero,r4
 400f280:	003fd106 	br	400f1c8 <__alt_data_end+0xfc00f1c8>

0400f284 <__floatunsidf>:
 400f284:	defffe04 	addi	sp,sp,-8
 400f288:	dc000015 	stw	r16,0(sp)
 400f28c:	dfc00115 	stw	ra,4(sp)
 400f290:	2021883a 	mov	r16,r4
 400f294:	20002226 	beq	r4,zero,400f320 <__floatunsidf+0x9c>
 400f298:	400f32c0 	call	400f32c <__clzsi2>
 400f29c:	01010784 	movi	r4,1054
 400f2a0:	2089c83a 	sub	r4,r4,r2
 400f2a4:	01810cc4 	movi	r6,1075
 400f2a8:	310dc83a 	sub	r6,r6,r4
 400f2ac:	00c007c4 	movi	r3,31
 400f2b0:	1980120e 	bge	r3,r6,400f2fc <__floatunsidf+0x78>
 400f2b4:	00c104c4 	movi	r3,1043
 400f2b8:	1907c83a 	sub	r3,r3,r4
 400f2bc:	80ca983a 	sll	r5,r16,r3
 400f2c0:	00800434 	movhi	r2,16
 400f2c4:	10bfffc4 	addi	r2,r2,-1
 400f2c8:	2101ffcc 	andi	r4,r4,2047
 400f2cc:	0021883a 	mov	r16,zero
 400f2d0:	288a703a 	and	r5,r5,r2
 400f2d4:	2008953a 	slli	r4,r4,20
 400f2d8:	00c00434 	movhi	r3,16
 400f2dc:	18ffffc4 	addi	r3,r3,-1
 400f2e0:	28c6703a 	and	r3,r5,r3
 400f2e4:	8005883a 	mov	r2,r16
 400f2e8:	1906b03a 	or	r3,r3,r4
 400f2ec:	dfc00117 	ldw	ra,4(sp)
 400f2f0:	dc000017 	ldw	r16,0(sp)
 400f2f4:	dec00204 	addi	sp,sp,8
 400f2f8:	f800283a 	ret
 400f2fc:	00c002c4 	movi	r3,11
 400f300:	188bc83a 	sub	r5,r3,r2
 400f304:	814ad83a 	srl	r5,r16,r5
 400f308:	00c00434 	movhi	r3,16
 400f30c:	18ffffc4 	addi	r3,r3,-1
 400f310:	81a0983a 	sll	r16,r16,r6
 400f314:	2101ffcc 	andi	r4,r4,2047
 400f318:	28ca703a 	and	r5,r5,r3
 400f31c:	003fed06 	br	400f2d4 <__alt_data_end+0xfc00f2d4>
 400f320:	0009883a 	mov	r4,zero
 400f324:	000b883a 	mov	r5,zero
 400f328:	003fea06 	br	400f2d4 <__alt_data_end+0xfc00f2d4>

0400f32c <__clzsi2>:
 400f32c:	00bfffd4 	movui	r2,65535
 400f330:	11000536 	bltu	r2,r4,400f348 <__clzsi2+0x1c>
 400f334:	00803fc4 	movi	r2,255
 400f338:	11000f36 	bltu	r2,r4,400f378 <__clzsi2+0x4c>
 400f33c:	00800804 	movi	r2,32
 400f340:	0007883a 	mov	r3,zero
 400f344:	00000506 	br	400f35c <__clzsi2+0x30>
 400f348:	00804034 	movhi	r2,256
 400f34c:	10bfffc4 	addi	r2,r2,-1
 400f350:	11000c2e 	bgeu	r2,r4,400f384 <__clzsi2+0x58>
 400f354:	00800204 	movi	r2,8
 400f358:	00c00604 	movi	r3,24
 400f35c:	20c8d83a 	srl	r4,r4,r3
 400f360:	00c100f4 	movhi	r3,1027
 400f364:	18cbd004 	addi	r3,r3,12096
 400f368:	1909883a 	add	r4,r3,r4
 400f36c:	20c00003 	ldbu	r3,0(r4)
 400f370:	10c5c83a 	sub	r2,r2,r3
 400f374:	f800283a 	ret
 400f378:	00800604 	movi	r2,24
 400f37c:	00c00204 	movi	r3,8
 400f380:	003ff606 	br	400f35c <__alt_data_end+0xfc00f35c>
 400f384:	00800404 	movi	r2,16
 400f388:	1007883a 	mov	r3,r2
 400f38c:	003ff306 	br	400f35c <__alt_data_end+0xfc00f35c>

0400f390 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400f390:	defff504 	addi	sp,sp,-44
 400f394:	df000a15 	stw	fp,40(sp)
 400f398:	df000a04 	addi	fp,sp,40
 400f39c:	e13ffc15 	stw	r4,-16(fp)
 400f3a0:	e17ffd15 	stw	r5,-12(fp)
 400f3a4:	e1bffe15 	stw	r6,-8(fp)
 400f3a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400f3ac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400f3b0:	d0acc717 	ldw	r2,-19684(gp)
  
  if (alt_ticks_per_second ())
 400f3b4:	10003c26 	beq	r2,zero,400f4a8 <alt_alarm_start+0x118>
  {
    if (alarm)
 400f3b8:	e0bffc17 	ldw	r2,-16(fp)
 400f3bc:	10003826 	beq	r2,zero,400f4a0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400f3c0:	e0bffc17 	ldw	r2,-16(fp)
 400f3c4:	e0fffe17 	ldw	r3,-8(fp)
 400f3c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400f3cc:	e0bffc17 	ldw	r2,-16(fp)
 400f3d0:	e0ffff17 	ldw	r3,-4(fp)
 400f3d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f3d8:	0005303a 	rdctl	r2,status
 400f3dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f3e0:	e0fff917 	ldw	r3,-28(fp)
 400f3e4:	00bfff84 	movi	r2,-2
 400f3e8:	1884703a 	and	r2,r3,r2
 400f3ec:	1001703a 	wrctl	status,r2
  
  return context;
 400f3f0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400f3f4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400f3f8:	d0acc817 	ldw	r2,-19680(gp)
      
      current_nticks = alt_nticks();
 400f3fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400f400:	e0fffd17 	ldw	r3,-12(fp)
 400f404:	e0bff617 	ldw	r2,-40(fp)
 400f408:	1885883a 	add	r2,r3,r2
 400f40c:	10c00044 	addi	r3,r2,1
 400f410:	e0bffc17 	ldw	r2,-16(fp)
 400f414:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400f418:	e0bffc17 	ldw	r2,-16(fp)
 400f41c:	10c00217 	ldw	r3,8(r2)
 400f420:	e0bff617 	ldw	r2,-40(fp)
 400f424:	1880042e 	bgeu	r3,r2,400f438 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400f428:	e0bffc17 	ldw	r2,-16(fp)
 400f42c:	00c00044 	movi	r3,1
 400f430:	10c00405 	stb	r3,16(r2)
 400f434:	00000206 	br	400f440 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400f438:	e0bffc17 	ldw	r2,-16(fp)
 400f43c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400f440:	e0bffc17 	ldw	r2,-16(fp)
 400f444:	d0e00f04 	addi	r3,gp,-32708
 400f448:	e0fffa15 	stw	r3,-24(fp)
 400f44c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400f450:	e0bffb17 	ldw	r2,-20(fp)
 400f454:	e0fffa17 	ldw	r3,-24(fp)
 400f458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400f45c:	e0bffa17 	ldw	r2,-24(fp)
 400f460:	10c00017 	ldw	r3,0(r2)
 400f464:	e0bffb17 	ldw	r2,-20(fp)
 400f468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400f46c:	e0bffa17 	ldw	r2,-24(fp)
 400f470:	10800017 	ldw	r2,0(r2)
 400f474:	e0fffb17 	ldw	r3,-20(fp)
 400f478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400f47c:	e0bffa17 	ldw	r2,-24(fp)
 400f480:	e0fffb17 	ldw	r3,-20(fp)
 400f484:	10c00015 	stw	r3,0(r2)
 400f488:	e0bff817 	ldw	r2,-32(fp)
 400f48c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f490:	e0bff717 	ldw	r2,-36(fp)
 400f494:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400f498:	0005883a 	mov	r2,zero
 400f49c:	00000306 	br	400f4ac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400f4a0:	00bffa84 	movi	r2,-22
 400f4a4:	00000106 	br	400f4ac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400f4a8:	00bfde84 	movi	r2,-134
  }
}
 400f4ac:	e037883a 	mov	sp,fp
 400f4b0:	df000017 	ldw	fp,0(sp)
 400f4b4:	dec00104 	addi	sp,sp,4
 400f4b8:	f800283a 	ret

0400f4bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f4bc:	defffe04 	addi	sp,sp,-8
 400f4c0:	dfc00115 	stw	ra,4(sp)
 400f4c4:	df000015 	stw	fp,0(sp)
 400f4c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f4cc:	d0a00c17 	ldw	r2,-32720(gp)
 400f4d0:	10000326 	beq	r2,zero,400f4e0 <alt_get_errno+0x24>
 400f4d4:	d0a00c17 	ldw	r2,-32720(gp)
 400f4d8:	103ee83a 	callr	r2
 400f4dc:	00000106 	br	400f4e4 <alt_get_errno+0x28>
 400f4e0:	d0acc204 	addi	r2,gp,-19704
}
 400f4e4:	e037883a 	mov	sp,fp
 400f4e8:	dfc00117 	ldw	ra,4(sp)
 400f4ec:	df000017 	ldw	fp,0(sp)
 400f4f0:	dec00204 	addi	sp,sp,8
 400f4f4:	f800283a 	ret

0400f4f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400f4f8:	defffb04 	addi	sp,sp,-20
 400f4fc:	dfc00415 	stw	ra,16(sp)
 400f500:	df000315 	stw	fp,12(sp)
 400f504:	df000304 	addi	fp,sp,12
 400f508:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400f50c:	e0bfff17 	ldw	r2,-4(fp)
 400f510:	10000616 	blt	r2,zero,400f52c <close+0x34>
 400f514:	e0bfff17 	ldw	r2,-4(fp)
 400f518:	10c00324 	muli	r3,r2,12
 400f51c:	008100f4 	movhi	r2,1027
 400f520:	10943604 	addi	r2,r2,20696
 400f524:	1885883a 	add	r2,r3,r2
 400f528:	00000106 	br	400f530 <close+0x38>
 400f52c:	0005883a 	mov	r2,zero
 400f530:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400f534:	e0bffd17 	ldw	r2,-12(fp)
 400f538:	10001926 	beq	r2,zero,400f5a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400f53c:	e0bffd17 	ldw	r2,-12(fp)
 400f540:	10800017 	ldw	r2,0(r2)
 400f544:	10800417 	ldw	r2,16(r2)
 400f548:	10000626 	beq	r2,zero,400f564 <close+0x6c>
 400f54c:	e0bffd17 	ldw	r2,-12(fp)
 400f550:	10800017 	ldw	r2,0(r2)
 400f554:	10800417 	ldw	r2,16(r2)
 400f558:	e13ffd17 	ldw	r4,-12(fp)
 400f55c:	103ee83a 	callr	r2
 400f560:	00000106 	br	400f568 <close+0x70>
 400f564:	0005883a 	mov	r2,zero
 400f568:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400f56c:	e13fff17 	ldw	r4,-4(fp)
 400f570:	400fe580 	call	400fe58 <alt_release_fd>
    if (rval < 0)
 400f574:	e0bffe17 	ldw	r2,-8(fp)
 400f578:	1000070e 	bge	r2,zero,400f598 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400f57c:	400f4bc0 	call	400f4bc <alt_get_errno>
 400f580:	1007883a 	mov	r3,r2
 400f584:	e0bffe17 	ldw	r2,-8(fp)
 400f588:	0085c83a 	sub	r2,zero,r2
 400f58c:	18800015 	stw	r2,0(r3)
      return -1;
 400f590:	00bfffc4 	movi	r2,-1
 400f594:	00000706 	br	400f5b4 <close+0xbc>
    }
    return 0;
 400f598:	0005883a 	mov	r2,zero
 400f59c:	00000506 	br	400f5b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400f5a0:	400f4bc0 	call	400f4bc <alt_get_errno>
 400f5a4:	1007883a 	mov	r3,r2
 400f5a8:	00801444 	movi	r2,81
 400f5ac:	18800015 	stw	r2,0(r3)
    return -1;
 400f5b0:	00bfffc4 	movi	r2,-1
  }
}
 400f5b4:	e037883a 	mov	sp,fp
 400f5b8:	dfc00117 	ldw	ra,4(sp)
 400f5bc:	df000017 	ldw	fp,0(sp)
 400f5c0:	dec00204 	addi	sp,sp,8
 400f5c4:	f800283a 	ret

0400f5c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400f5c8:	defffc04 	addi	sp,sp,-16
 400f5cc:	df000315 	stw	fp,12(sp)
 400f5d0:	df000304 	addi	fp,sp,12
 400f5d4:	e13ffd15 	stw	r4,-12(fp)
 400f5d8:	e17ffe15 	stw	r5,-8(fp)
 400f5dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400f5e0:	e0bfff17 	ldw	r2,-4(fp)
}
 400f5e4:	e037883a 	mov	sp,fp
 400f5e8:	df000017 	ldw	fp,0(sp)
 400f5ec:	dec00104 	addi	sp,sp,4
 400f5f0:	f800283a 	ret

0400f5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f5f4:	defffe04 	addi	sp,sp,-8
 400f5f8:	dfc00115 	stw	ra,4(sp)
 400f5fc:	df000015 	stw	fp,0(sp)
 400f600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f604:	d0a00c17 	ldw	r2,-32720(gp)
 400f608:	10000326 	beq	r2,zero,400f618 <alt_get_errno+0x24>
 400f60c:	d0a00c17 	ldw	r2,-32720(gp)
 400f610:	103ee83a 	callr	r2
 400f614:	00000106 	br	400f61c <alt_get_errno+0x28>
 400f618:	d0acc204 	addi	r2,gp,-19704
}
 400f61c:	e037883a 	mov	sp,fp
 400f620:	dfc00117 	ldw	ra,4(sp)
 400f624:	df000017 	ldw	fp,0(sp)
 400f628:	dec00204 	addi	sp,sp,8
 400f62c:	f800283a 	ret

0400f630 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400f630:	defffb04 	addi	sp,sp,-20
 400f634:	dfc00415 	stw	ra,16(sp)
 400f638:	df000315 	stw	fp,12(sp)
 400f63c:	df000304 	addi	fp,sp,12
 400f640:	e13ffe15 	stw	r4,-8(fp)
 400f644:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f648:	e0bffe17 	ldw	r2,-8(fp)
 400f64c:	10000616 	blt	r2,zero,400f668 <fstat+0x38>
 400f650:	e0bffe17 	ldw	r2,-8(fp)
 400f654:	10c00324 	muli	r3,r2,12
 400f658:	008100f4 	movhi	r2,1027
 400f65c:	10943604 	addi	r2,r2,20696
 400f660:	1885883a 	add	r2,r3,r2
 400f664:	00000106 	br	400f66c <fstat+0x3c>
 400f668:	0005883a 	mov	r2,zero
 400f66c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400f670:	e0bffd17 	ldw	r2,-12(fp)
 400f674:	10001026 	beq	r2,zero,400f6b8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400f678:	e0bffd17 	ldw	r2,-12(fp)
 400f67c:	10800017 	ldw	r2,0(r2)
 400f680:	10800817 	ldw	r2,32(r2)
 400f684:	10000726 	beq	r2,zero,400f6a4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400f688:	e0bffd17 	ldw	r2,-12(fp)
 400f68c:	10800017 	ldw	r2,0(r2)
 400f690:	10800817 	ldw	r2,32(r2)
 400f694:	e17fff17 	ldw	r5,-4(fp)
 400f698:	e13ffd17 	ldw	r4,-12(fp)
 400f69c:	103ee83a 	callr	r2
 400f6a0:	00000a06 	br	400f6cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400f6a4:	e0bfff17 	ldw	r2,-4(fp)
 400f6a8:	00c80004 	movi	r3,8192
 400f6ac:	10c00115 	stw	r3,4(r2)
      return 0;
 400f6b0:	0005883a 	mov	r2,zero
 400f6b4:	00000506 	br	400f6cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400f6b8:	400f5f40 	call	400f5f4 <alt_get_errno>
 400f6bc:	1007883a 	mov	r3,r2
 400f6c0:	00801444 	movi	r2,81
 400f6c4:	18800015 	stw	r2,0(r3)
    return -1;
 400f6c8:	00bfffc4 	movi	r2,-1
  }
}
 400f6cc:	e037883a 	mov	sp,fp
 400f6d0:	dfc00117 	ldw	ra,4(sp)
 400f6d4:	df000017 	ldw	fp,0(sp)
 400f6d8:	dec00204 	addi	sp,sp,8
 400f6dc:	f800283a 	ret

0400f6e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400f6e0:	defff904 	addi	sp,sp,-28
 400f6e4:	dfc00615 	stw	ra,24(sp)
 400f6e8:	df000515 	stw	fp,20(sp)
 400f6ec:	df000504 	addi	fp,sp,20
 400f6f0:	e13ffc15 	stw	r4,-16(fp)
 400f6f4:	e17ffd15 	stw	r5,-12(fp)
 400f6f8:	e1bffe15 	stw	r6,-8(fp)
 400f6fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400f700:	e0800217 	ldw	r2,8(fp)
 400f704:	d8800015 	stw	r2,0(sp)
 400f708:	e1ffff17 	ldw	r7,-4(fp)
 400f70c:	e1bffe17 	ldw	r6,-8(fp)
 400f710:	e17ffd17 	ldw	r5,-12(fp)
 400f714:	e13ffc17 	ldw	r4,-16(fp)
 400f718:	400f8900 	call	400f890 <alt_iic_isr_register>
}  
 400f71c:	e037883a 	mov	sp,fp
 400f720:	dfc00117 	ldw	ra,4(sp)
 400f724:	df000017 	ldw	fp,0(sp)
 400f728:	dec00204 	addi	sp,sp,8
 400f72c:	f800283a 	ret

0400f730 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400f730:	defff904 	addi	sp,sp,-28
 400f734:	df000615 	stw	fp,24(sp)
 400f738:	df000604 	addi	fp,sp,24
 400f73c:	e13ffe15 	stw	r4,-8(fp)
 400f740:	e17fff15 	stw	r5,-4(fp)
 400f744:	e0bfff17 	ldw	r2,-4(fp)
 400f748:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f74c:	0005303a 	rdctl	r2,status
 400f750:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f754:	e0fffb17 	ldw	r3,-20(fp)
 400f758:	00bfff84 	movi	r2,-2
 400f75c:	1884703a 	and	r2,r3,r2
 400f760:	1001703a 	wrctl	status,r2
  
  return context;
 400f764:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f768:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400f76c:	00c00044 	movi	r3,1
 400f770:	e0bffa17 	ldw	r2,-24(fp)
 400f774:	1884983a 	sll	r2,r3,r2
 400f778:	1007883a 	mov	r3,r2
 400f77c:	d0acc317 	ldw	r2,-19700(gp)
 400f780:	1884b03a 	or	r2,r3,r2
 400f784:	d0acc315 	stw	r2,-19700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f788:	d0acc317 	ldw	r2,-19700(gp)
 400f78c:	100170fa 	wrctl	ienable,r2
 400f790:	e0bffc17 	ldw	r2,-16(fp)
 400f794:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f798:	e0bffd17 	ldw	r2,-12(fp)
 400f79c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f7a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400f7a4:	0001883a 	nop
}
 400f7a8:	e037883a 	mov	sp,fp
 400f7ac:	df000017 	ldw	fp,0(sp)
 400f7b0:	dec00104 	addi	sp,sp,4
 400f7b4:	f800283a 	ret

0400f7b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400f7b8:	defff904 	addi	sp,sp,-28
 400f7bc:	df000615 	stw	fp,24(sp)
 400f7c0:	df000604 	addi	fp,sp,24
 400f7c4:	e13ffe15 	stw	r4,-8(fp)
 400f7c8:	e17fff15 	stw	r5,-4(fp)
 400f7cc:	e0bfff17 	ldw	r2,-4(fp)
 400f7d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f7d4:	0005303a 	rdctl	r2,status
 400f7d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f7dc:	e0fffb17 	ldw	r3,-20(fp)
 400f7e0:	00bfff84 	movi	r2,-2
 400f7e4:	1884703a 	and	r2,r3,r2
 400f7e8:	1001703a 	wrctl	status,r2
  
  return context;
 400f7ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400f7f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400f7f4:	00c00044 	movi	r3,1
 400f7f8:	e0bffa17 	ldw	r2,-24(fp)
 400f7fc:	1884983a 	sll	r2,r3,r2
 400f800:	0084303a 	nor	r2,zero,r2
 400f804:	1007883a 	mov	r3,r2
 400f808:	d0acc317 	ldw	r2,-19700(gp)
 400f80c:	1884703a 	and	r2,r3,r2
 400f810:	d0acc315 	stw	r2,-19700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400f814:	d0acc317 	ldw	r2,-19700(gp)
 400f818:	100170fa 	wrctl	ienable,r2
 400f81c:	e0bffc17 	ldw	r2,-16(fp)
 400f820:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f824:	e0bffd17 	ldw	r2,-12(fp)
 400f828:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400f82c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400f830:	0001883a 	nop
}
 400f834:	e037883a 	mov	sp,fp
 400f838:	df000017 	ldw	fp,0(sp)
 400f83c:	dec00104 	addi	sp,sp,4
 400f840:	f800283a 	ret

0400f844 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400f844:	defffc04 	addi	sp,sp,-16
 400f848:	df000315 	stw	fp,12(sp)
 400f84c:	df000304 	addi	fp,sp,12
 400f850:	e13ffe15 	stw	r4,-8(fp)
 400f854:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400f858:	000530fa 	rdctl	r2,ienable
 400f85c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400f860:	00c00044 	movi	r3,1
 400f864:	e0bfff17 	ldw	r2,-4(fp)
 400f868:	1884983a 	sll	r2,r3,r2
 400f86c:	1007883a 	mov	r3,r2
 400f870:	e0bffd17 	ldw	r2,-12(fp)
 400f874:	1884703a 	and	r2,r3,r2
 400f878:	1004c03a 	cmpne	r2,r2,zero
 400f87c:	10803fcc 	andi	r2,r2,255
}
 400f880:	e037883a 	mov	sp,fp
 400f884:	df000017 	ldw	fp,0(sp)
 400f888:	dec00104 	addi	sp,sp,4
 400f88c:	f800283a 	ret

0400f890 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400f890:	defff504 	addi	sp,sp,-44
 400f894:	dfc00a15 	stw	ra,40(sp)
 400f898:	df000915 	stw	fp,36(sp)
 400f89c:	df000904 	addi	fp,sp,36
 400f8a0:	e13ffc15 	stw	r4,-16(fp)
 400f8a4:	e17ffd15 	stw	r5,-12(fp)
 400f8a8:	e1bffe15 	stw	r6,-8(fp)
 400f8ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400f8b0:	00bffa84 	movi	r2,-22
 400f8b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400f8b8:	e0bffd17 	ldw	r2,-12(fp)
 400f8bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400f8c0:	e0bff817 	ldw	r2,-32(fp)
 400f8c4:	10800808 	cmpgei	r2,r2,32
 400f8c8:	1000271e 	bne	r2,zero,400f968 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f8cc:	0005303a 	rdctl	r2,status
 400f8d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f8d4:	e0fffb17 	ldw	r3,-20(fp)
 400f8d8:	00bfff84 	movi	r2,-2
 400f8dc:	1884703a 	and	r2,r3,r2
 400f8e0:	1001703a 	wrctl	status,r2
  
  return context;
 400f8e4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400f8e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400f8ec:	00810134 	movhi	r2,1028
 400f8f0:	10a59404 	addi	r2,r2,-27056
 400f8f4:	e0fff817 	ldw	r3,-32(fp)
 400f8f8:	180690fa 	slli	r3,r3,3
 400f8fc:	10c5883a 	add	r2,r2,r3
 400f900:	e0fffe17 	ldw	r3,-8(fp)
 400f904:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400f908:	00810134 	movhi	r2,1028
 400f90c:	10a59404 	addi	r2,r2,-27056
 400f910:	e0fff817 	ldw	r3,-32(fp)
 400f914:	180690fa 	slli	r3,r3,3
 400f918:	10c5883a 	add	r2,r2,r3
 400f91c:	10800104 	addi	r2,r2,4
 400f920:	e0ffff17 	ldw	r3,-4(fp)
 400f924:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400f928:	e0bffe17 	ldw	r2,-8(fp)
 400f92c:	10000526 	beq	r2,zero,400f944 <alt_iic_isr_register+0xb4>
 400f930:	e0bff817 	ldw	r2,-32(fp)
 400f934:	100b883a 	mov	r5,r2
 400f938:	e13ffc17 	ldw	r4,-16(fp)
 400f93c:	400f7300 	call	400f730 <alt_ic_irq_enable>
 400f940:	00000406 	br	400f954 <alt_iic_isr_register+0xc4>
 400f944:	e0bff817 	ldw	r2,-32(fp)
 400f948:	100b883a 	mov	r5,r2
 400f94c:	e13ffc17 	ldw	r4,-16(fp)
 400f950:	400f7b80 	call	400f7b8 <alt_ic_irq_disable>
 400f954:	e0bff715 	stw	r2,-36(fp)
 400f958:	e0bffa17 	ldw	r2,-24(fp)
 400f95c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f960:	e0bff917 	ldw	r2,-28(fp)
 400f964:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400f968:	e0bff717 	ldw	r2,-36(fp)
}
 400f96c:	e037883a 	mov	sp,fp
 400f970:	dfc00117 	ldw	ra,4(sp)
 400f974:	df000017 	ldw	fp,0(sp)
 400f978:	dec00204 	addi	sp,sp,8
 400f97c:	f800283a 	ret

0400f980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f980:	defffe04 	addi	sp,sp,-8
 400f984:	dfc00115 	stw	ra,4(sp)
 400f988:	df000015 	stw	fp,0(sp)
 400f98c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f990:	d0a00c17 	ldw	r2,-32720(gp)
 400f994:	10000326 	beq	r2,zero,400f9a4 <alt_get_errno+0x24>
 400f998:	d0a00c17 	ldw	r2,-32720(gp)
 400f99c:	103ee83a 	callr	r2
 400f9a0:	00000106 	br	400f9a8 <alt_get_errno+0x28>
 400f9a4:	d0acc204 	addi	r2,gp,-19704
}
 400f9a8:	e037883a 	mov	sp,fp
 400f9ac:	dfc00117 	ldw	ra,4(sp)
 400f9b0:	df000017 	ldw	fp,0(sp)
 400f9b4:	dec00204 	addi	sp,sp,8
 400f9b8:	f800283a 	ret

0400f9bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400f9bc:	deffed04 	addi	sp,sp,-76
 400f9c0:	dfc01215 	stw	ra,72(sp)
 400f9c4:	df001115 	stw	fp,68(sp)
 400f9c8:	df001104 	addi	fp,sp,68
 400f9cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f9d0:	e0bfff17 	ldw	r2,-4(fp)
 400f9d4:	10000616 	blt	r2,zero,400f9f0 <isatty+0x34>
 400f9d8:	e0bfff17 	ldw	r2,-4(fp)
 400f9dc:	10c00324 	muli	r3,r2,12
 400f9e0:	008100f4 	movhi	r2,1027
 400f9e4:	10943604 	addi	r2,r2,20696
 400f9e8:	1885883a 	add	r2,r3,r2
 400f9ec:	00000106 	br	400f9f4 <isatty+0x38>
 400f9f0:	0005883a 	mov	r2,zero
 400f9f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400f9f8:	e0bfef17 	ldw	r2,-68(fp)
 400f9fc:	10000e26 	beq	r2,zero,400fa38 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400fa00:	e0bfef17 	ldw	r2,-68(fp)
 400fa04:	10800017 	ldw	r2,0(r2)
 400fa08:	10800817 	ldw	r2,32(r2)
 400fa0c:	1000021e 	bne	r2,zero,400fa18 <isatty+0x5c>
    {
      return 1;
 400fa10:	00800044 	movi	r2,1
 400fa14:	00000d06 	br	400fa4c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400fa18:	e0bff004 	addi	r2,fp,-64
 400fa1c:	100b883a 	mov	r5,r2
 400fa20:	e13fff17 	ldw	r4,-4(fp)
 400fa24:	400f6300 	call	400f630 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400fa28:	e0bff117 	ldw	r2,-60(fp)
 400fa2c:	10880020 	cmpeqi	r2,r2,8192
 400fa30:	10803fcc 	andi	r2,r2,255
 400fa34:	00000506 	br	400fa4c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400fa38:	400f9800 	call	400f980 <alt_get_errno>
 400fa3c:	1007883a 	mov	r3,r2
 400fa40:	00801444 	movi	r2,81
 400fa44:	18800015 	stw	r2,0(r3)
    return 0;
 400fa48:	0005883a 	mov	r2,zero
  }
}
 400fa4c:	e037883a 	mov	sp,fp
 400fa50:	dfc00117 	ldw	ra,4(sp)
 400fa54:	df000017 	ldw	fp,0(sp)
 400fa58:	dec00204 	addi	sp,sp,8
 400fa5c:	f800283a 	ret

0400fa60 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400fa60:	defffc04 	addi	sp,sp,-16
 400fa64:	df000315 	stw	fp,12(sp)
 400fa68:	df000304 	addi	fp,sp,12
 400fa6c:	e13ffd15 	stw	r4,-12(fp)
 400fa70:	e17ffe15 	stw	r5,-8(fp)
 400fa74:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400fa78:	e0fffe17 	ldw	r3,-8(fp)
 400fa7c:	e0bffd17 	ldw	r2,-12(fp)
 400fa80:	18800c26 	beq	r3,r2,400fab4 <alt_load_section+0x54>
  {
    while( to != end )
 400fa84:	00000806 	br	400faa8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400fa88:	e0bffe17 	ldw	r2,-8(fp)
 400fa8c:	10c00104 	addi	r3,r2,4
 400fa90:	e0fffe15 	stw	r3,-8(fp)
 400fa94:	e0fffd17 	ldw	r3,-12(fp)
 400fa98:	19000104 	addi	r4,r3,4
 400fa9c:	e13ffd15 	stw	r4,-12(fp)
 400faa0:	18c00017 	ldw	r3,0(r3)
 400faa4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400faa8:	e0fffe17 	ldw	r3,-8(fp)
 400faac:	e0bfff17 	ldw	r2,-4(fp)
 400fab0:	18bff51e 	bne	r3,r2,400fa88 <__alt_data_end+0xfc00fa88>
    {
      *to++ = *from++;
    }
  }
}
 400fab4:	0001883a 	nop
 400fab8:	e037883a 	mov	sp,fp
 400fabc:	df000017 	ldw	fp,0(sp)
 400fac0:	dec00104 	addi	sp,sp,4
 400fac4:	f800283a 	ret

0400fac8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400fac8:	defffe04 	addi	sp,sp,-8
 400facc:	dfc00115 	stw	ra,4(sp)
 400fad0:	df000015 	stw	fp,0(sp)
 400fad4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400fad8:	018100f4 	movhi	r6,1027
 400fadc:	3198cb04 	addi	r6,r6,25388
 400fae0:	014100f4 	movhi	r5,1027
 400fae4:	294c2304 	addi	r5,r5,12428
 400fae8:	010100f4 	movhi	r4,1027
 400faec:	2118cb04 	addi	r4,r4,25388
 400faf0:	400fa600 	call	400fa60 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400faf4:	01810034 	movhi	r6,1024
 400faf8:	31809104 	addi	r6,r6,580
 400fafc:	01410034 	movhi	r5,1024
 400fb00:	29400804 	addi	r5,r5,32
 400fb04:	01010034 	movhi	r4,1024
 400fb08:	21000804 	addi	r4,r4,32
 400fb0c:	400fa600 	call	400fa60 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400fb10:	018100f4 	movhi	r6,1027
 400fb14:	318c2304 	addi	r6,r6,12428
 400fb18:	01410074 	movhi	r5,1025
 400fb1c:	294cae04 	addi	r5,r5,12984
 400fb20:	01010074 	movhi	r4,1025
 400fb24:	210cae04 	addi	r4,r4,12984
 400fb28:	400fa600 	call	400fa60 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400fb2c:	40125e80 	call	40125e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400fb30:	40128600 	call	4012860 <alt_icache_flush_all>
}
 400fb34:	0001883a 	nop
 400fb38:	e037883a 	mov	sp,fp
 400fb3c:	dfc00117 	ldw	ra,4(sp)
 400fb40:	df000017 	ldw	fp,0(sp)
 400fb44:	dec00204 	addi	sp,sp,8
 400fb48:	f800283a 	ret

0400fb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fb4c:	defffe04 	addi	sp,sp,-8
 400fb50:	dfc00115 	stw	ra,4(sp)
 400fb54:	df000015 	stw	fp,0(sp)
 400fb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fb5c:	d0a00c17 	ldw	r2,-32720(gp)
 400fb60:	10000326 	beq	r2,zero,400fb70 <alt_get_errno+0x24>
 400fb64:	d0a00c17 	ldw	r2,-32720(gp)
 400fb68:	103ee83a 	callr	r2
 400fb6c:	00000106 	br	400fb74 <alt_get_errno+0x28>
 400fb70:	d0acc204 	addi	r2,gp,-19704
}
 400fb74:	e037883a 	mov	sp,fp
 400fb78:	dfc00117 	ldw	ra,4(sp)
 400fb7c:	df000017 	ldw	fp,0(sp)
 400fb80:	dec00204 	addi	sp,sp,8
 400fb84:	f800283a 	ret

0400fb88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400fb88:	defff904 	addi	sp,sp,-28
 400fb8c:	dfc00615 	stw	ra,24(sp)
 400fb90:	df000515 	stw	fp,20(sp)
 400fb94:	df000504 	addi	fp,sp,20
 400fb98:	e13ffd15 	stw	r4,-12(fp)
 400fb9c:	e17ffe15 	stw	r5,-8(fp)
 400fba0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400fba4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400fba8:	e0bffd17 	ldw	r2,-12(fp)
 400fbac:	10000616 	blt	r2,zero,400fbc8 <lseek+0x40>
 400fbb0:	e0bffd17 	ldw	r2,-12(fp)
 400fbb4:	10c00324 	muli	r3,r2,12
 400fbb8:	008100f4 	movhi	r2,1027
 400fbbc:	10943604 	addi	r2,r2,20696
 400fbc0:	1885883a 	add	r2,r3,r2
 400fbc4:	00000106 	br	400fbcc <lseek+0x44>
 400fbc8:	0005883a 	mov	r2,zero
 400fbcc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400fbd0:	e0bffc17 	ldw	r2,-16(fp)
 400fbd4:	10001026 	beq	r2,zero,400fc18 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400fbd8:	e0bffc17 	ldw	r2,-16(fp)
 400fbdc:	10800017 	ldw	r2,0(r2)
 400fbe0:	10800717 	ldw	r2,28(r2)
 400fbe4:	10000926 	beq	r2,zero,400fc0c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400fbe8:	e0bffc17 	ldw	r2,-16(fp)
 400fbec:	10800017 	ldw	r2,0(r2)
 400fbf0:	10800717 	ldw	r2,28(r2)
 400fbf4:	e1bfff17 	ldw	r6,-4(fp)
 400fbf8:	e17ffe17 	ldw	r5,-8(fp)
 400fbfc:	e13ffc17 	ldw	r4,-16(fp)
 400fc00:	103ee83a 	callr	r2
 400fc04:	e0bffb15 	stw	r2,-20(fp)
 400fc08:	00000506 	br	400fc20 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400fc0c:	00bfde84 	movi	r2,-134
 400fc10:	e0bffb15 	stw	r2,-20(fp)
 400fc14:	00000206 	br	400fc20 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400fc18:	00bfebc4 	movi	r2,-81
 400fc1c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400fc20:	e0bffb17 	ldw	r2,-20(fp)
 400fc24:	1000070e 	bge	r2,zero,400fc44 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400fc28:	400fb4c0 	call	400fb4c <alt_get_errno>
 400fc2c:	1007883a 	mov	r3,r2
 400fc30:	e0bffb17 	ldw	r2,-20(fp)
 400fc34:	0085c83a 	sub	r2,zero,r2
 400fc38:	18800015 	stw	r2,0(r3)
    rc = -1;
 400fc3c:	00bfffc4 	movi	r2,-1
 400fc40:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400fc44:	e0bffb17 	ldw	r2,-20(fp)
}
 400fc48:	e037883a 	mov	sp,fp
 400fc4c:	dfc00117 	ldw	ra,4(sp)
 400fc50:	df000017 	ldw	fp,0(sp)
 400fc54:	dec00204 	addi	sp,sp,8
 400fc58:	f800283a 	ret

0400fc5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400fc5c:	defffd04 	addi	sp,sp,-12
 400fc60:	dfc00215 	stw	ra,8(sp)
 400fc64:	df000115 	stw	fp,4(sp)
 400fc68:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400fc6c:	0009883a 	mov	r4,zero
 400fc70:	40102a80 	call	40102a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400fc74:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400fc78:	40102e00 	call	40102e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400fc7c:	018100f4 	movhi	r6,1027
 400fc80:	318c1304 	addi	r6,r6,12364
 400fc84:	014100f4 	movhi	r5,1027
 400fc88:	294c1304 	addi	r5,r5,12364
 400fc8c:	010100f4 	movhi	r4,1027
 400fc90:	210c1304 	addi	r4,r4,12364
 400fc94:	40129f40 	call	40129f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400fc98:	40127100 	call	4012710 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400fc9c:	01010074 	movhi	r4,1025
 400fca0:	2109dc04 	addi	r4,r4,10096
 400fca4:	4012f240 	call	4012f24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400fca8:	d0acc417 	ldw	r2,-19696(gp)
 400fcac:	d0ecc517 	ldw	r3,-19692(gp)
 400fcb0:	d12cc617 	ldw	r4,-19688(gp)
 400fcb4:	200d883a 	mov	r6,r4
 400fcb8:	180b883a 	mov	r5,r3
 400fcbc:	1009883a 	mov	r4,r2
 400fcc0:	40020e80 	call	40020e8 <main>
 400fcc4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400fcc8:	01000044 	movi	r4,1
 400fccc:	400f4f80 	call	400f4f8 <close>
  exit (result);
 400fcd0:	e13fff17 	ldw	r4,-4(fp)
 400fcd4:	4012f380 	call	4012f38 <exit>

0400fcd8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400fcd8:	defffe04 	addi	sp,sp,-8
 400fcdc:	df000115 	stw	fp,4(sp)
 400fce0:	df000104 	addi	fp,sp,4
 400fce4:	e13fff15 	stw	r4,-4(fp)
}
 400fce8:	0001883a 	nop
 400fcec:	e037883a 	mov	sp,fp
 400fcf0:	df000017 	ldw	fp,0(sp)
 400fcf4:	dec00104 	addi	sp,sp,4
 400fcf8:	f800283a 	ret

0400fcfc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400fcfc:	defffe04 	addi	sp,sp,-8
 400fd00:	df000115 	stw	fp,4(sp)
 400fd04:	df000104 	addi	fp,sp,4
 400fd08:	e13fff15 	stw	r4,-4(fp)
}
 400fd0c:	0001883a 	nop
 400fd10:	e037883a 	mov	sp,fp
 400fd14:	df000017 	ldw	fp,0(sp)
 400fd18:	dec00104 	addi	sp,sp,4
 400fd1c:	f800283a 	ret

0400fd20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fd20:	defffe04 	addi	sp,sp,-8
 400fd24:	dfc00115 	stw	ra,4(sp)
 400fd28:	df000015 	stw	fp,0(sp)
 400fd2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fd30:	d0a00c17 	ldw	r2,-32720(gp)
 400fd34:	10000326 	beq	r2,zero,400fd44 <alt_get_errno+0x24>
 400fd38:	d0a00c17 	ldw	r2,-32720(gp)
 400fd3c:	103ee83a 	callr	r2
 400fd40:	00000106 	br	400fd48 <alt_get_errno+0x28>
 400fd44:	d0acc204 	addi	r2,gp,-19704
}
 400fd48:	e037883a 	mov	sp,fp
 400fd4c:	dfc00117 	ldw	ra,4(sp)
 400fd50:	df000017 	ldw	fp,0(sp)
 400fd54:	dec00204 	addi	sp,sp,8
 400fd58:	f800283a 	ret

0400fd5c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400fd5c:	defff904 	addi	sp,sp,-28
 400fd60:	dfc00615 	stw	ra,24(sp)
 400fd64:	df000515 	stw	fp,20(sp)
 400fd68:	df000504 	addi	fp,sp,20
 400fd6c:	e13ffd15 	stw	r4,-12(fp)
 400fd70:	e17ffe15 	stw	r5,-8(fp)
 400fd74:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400fd78:	e0bffd17 	ldw	r2,-12(fp)
 400fd7c:	10000616 	blt	r2,zero,400fd98 <read+0x3c>
 400fd80:	e0bffd17 	ldw	r2,-12(fp)
 400fd84:	10c00324 	muli	r3,r2,12
 400fd88:	008100f4 	movhi	r2,1027
 400fd8c:	10943604 	addi	r2,r2,20696
 400fd90:	1885883a 	add	r2,r3,r2
 400fd94:	00000106 	br	400fd9c <read+0x40>
 400fd98:	0005883a 	mov	r2,zero
 400fd9c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400fda0:	e0bffb17 	ldw	r2,-20(fp)
 400fda4:	10002226 	beq	r2,zero,400fe30 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400fda8:	e0bffb17 	ldw	r2,-20(fp)
 400fdac:	10800217 	ldw	r2,8(r2)
 400fdb0:	108000cc 	andi	r2,r2,3
 400fdb4:	10800060 	cmpeqi	r2,r2,1
 400fdb8:	1000181e 	bne	r2,zero,400fe1c <read+0xc0>
        (fd->dev->read))
 400fdbc:	e0bffb17 	ldw	r2,-20(fp)
 400fdc0:	10800017 	ldw	r2,0(r2)
 400fdc4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400fdc8:	10001426 	beq	r2,zero,400fe1c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400fdcc:	e0bffb17 	ldw	r2,-20(fp)
 400fdd0:	10800017 	ldw	r2,0(r2)
 400fdd4:	10800517 	ldw	r2,20(r2)
 400fdd8:	e0ffff17 	ldw	r3,-4(fp)
 400fddc:	180d883a 	mov	r6,r3
 400fde0:	e17ffe17 	ldw	r5,-8(fp)
 400fde4:	e13ffb17 	ldw	r4,-20(fp)
 400fde8:	103ee83a 	callr	r2
 400fdec:	e0bffc15 	stw	r2,-16(fp)
 400fdf0:	e0bffc17 	ldw	r2,-16(fp)
 400fdf4:	1000070e 	bge	r2,zero,400fe14 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400fdf8:	400fd200 	call	400fd20 <alt_get_errno>
 400fdfc:	1007883a 	mov	r3,r2
 400fe00:	e0bffc17 	ldw	r2,-16(fp)
 400fe04:	0085c83a 	sub	r2,zero,r2
 400fe08:	18800015 	stw	r2,0(r3)
          return -1;
 400fe0c:	00bfffc4 	movi	r2,-1
 400fe10:	00000c06 	br	400fe44 <read+0xe8>
        }
        return rval;
 400fe14:	e0bffc17 	ldw	r2,-16(fp)
 400fe18:	00000a06 	br	400fe44 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400fe1c:	400fd200 	call	400fd20 <alt_get_errno>
 400fe20:	1007883a 	mov	r3,r2
 400fe24:	00800344 	movi	r2,13
 400fe28:	18800015 	stw	r2,0(r3)
 400fe2c:	00000406 	br	400fe40 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400fe30:	400fd200 	call	400fd20 <alt_get_errno>
 400fe34:	1007883a 	mov	r3,r2
 400fe38:	00801444 	movi	r2,81
 400fe3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400fe40:	00bfffc4 	movi	r2,-1
}
 400fe44:	e037883a 	mov	sp,fp
 400fe48:	dfc00117 	ldw	ra,4(sp)
 400fe4c:	df000017 	ldw	fp,0(sp)
 400fe50:	dec00204 	addi	sp,sp,8
 400fe54:	f800283a 	ret

0400fe58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400fe58:	defffe04 	addi	sp,sp,-8
 400fe5c:	df000115 	stw	fp,4(sp)
 400fe60:	df000104 	addi	fp,sp,4
 400fe64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400fe68:	e0bfff17 	ldw	r2,-4(fp)
 400fe6c:	108000d0 	cmplti	r2,r2,3
 400fe70:	10000d1e 	bne	r2,zero,400fea8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400fe74:	008100f4 	movhi	r2,1027
 400fe78:	10943604 	addi	r2,r2,20696
 400fe7c:	e0ffff17 	ldw	r3,-4(fp)
 400fe80:	18c00324 	muli	r3,r3,12
 400fe84:	10c5883a 	add	r2,r2,r3
 400fe88:	10800204 	addi	r2,r2,8
 400fe8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400fe90:	008100f4 	movhi	r2,1027
 400fe94:	10943604 	addi	r2,r2,20696
 400fe98:	e0ffff17 	ldw	r3,-4(fp)
 400fe9c:	18c00324 	muli	r3,r3,12
 400fea0:	10c5883a 	add	r2,r2,r3
 400fea4:	10000015 	stw	zero,0(r2)
  }
}
 400fea8:	0001883a 	nop
 400feac:	e037883a 	mov	sp,fp
 400feb0:	df000017 	ldw	fp,0(sp)
 400feb4:	dec00104 	addi	sp,sp,4
 400feb8:	f800283a 	ret

0400febc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400febc:	defff904 	addi	sp,sp,-28
 400fec0:	df000615 	stw	fp,24(sp)
 400fec4:	df000604 	addi	fp,sp,24
 400fec8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fecc:	0005303a 	rdctl	r2,status
 400fed0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fed4:	e0fffe17 	ldw	r3,-8(fp)
 400fed8:	00bfff84 	movi	r2,-2
 400fedc:	1884703a 	and	r2,r3,r2
 400fee0:	1001703a 	wrctl	status,r2
  
  return context;
 400fee4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400fee8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400feec:	d0a00e17 	ldw	r2,-32712(gp)
 400fef0:	10c000c4 	addi	r3,r2,3
 400fef4:	00bfff04 	movi	r2,-4
 400fef8:	1884703a 	and	r2,r3,r2
 400fefc:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400ff00:	d0e00e17 	ldw	r3,-32712(gp)
 400ff04:	e0bfff17 	ldw	r2,-4(fp)
 400ff08:	1887883a 	add	r3,r3,r2
 400ff0c:	00820034 	movhi	r2,2048
 400ff10:	10800004 	addi	r2,r2,0
 400ff14:	10c0062e 	bgeu	r2,r3,400ff30 <sbrk+0x74>
 400ff18:	e0bffb17 	ldw	r2,-20(fp)
 400ff1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ff20:	e0bffa17 	ldw	r2,-24(fp)
 400ff24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400ff28:	00bfffc4 	movi	r2,-1
 400ff2c:	00000b06 	br	400ff5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400ff30:	d0a00e17 	ldw	r2,-32712(gp)
 400ff34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400ff38:	d0e00e17 	ldw	r3,-32712(gp)
 400ff3c:	e0bfff17 	ldw	r2,-4(fp)
 400ff40:	1885883a 	add	r2,r3,r2
 400ff44:	d0a00e15 	stw	r2,-32712(gp)
 400ff48:	e0bffb17 	ldw	r2,-20(fp)
 400ff4c:	e0bffc15 	stw	r2,-16(fp)
 400ff50:	e0bffc17 	ldw	r2,-16(fp)
 400ff54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400ff58:	e0bffd17 	ldw	r2,-12(fp)
} 
 400ff5c:	e037883a 	mov	sp,fp
 400ff60:	df000017 	ldw	fp,0(sp)
 400ff64:	dec00104 	addi	sp,sp,4
 400ff68:	f800283a 	ret

0400ff6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400ff6c:	defffa04 	addi	sp,sp,-24
 400ff70:	df000515 	stw	fp,20(sp)
 400ff74:	df000504 	addi	fp,sp,20
 400ff78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ff7c:	0005303a 	rdctl	r2,status
 400ff80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff84:	e0fffc17 	ldw	r3,-16(fp)
 400ff88:	00bfff84 	movi	r2,-2
 400ff8c:	1884703a 	and	r2,r3,r2
 400ff90:	1001703a 	wrctl	status,r2
  
  return context;
 400ff94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400ff98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400ff9c:	e0bfff17 	ldw	r2,-4(fp)
 400ffa0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400ffa4:	e0bffd17 	ldw	r2,-12(fp)
 400ffa8:	10800017 	ldw	r2,0(r2)
 400ffac:	e0fffd17 	ldw	r3,-12(fp)
 400ffb0:	18c00117 	ldw	r3,4(r3)
 400ffb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400ffb8:	e0bffd17 	ldw	r2,-12(fp)
 400ffbc:	10800117 	ldw	r2,4(r2)
 400ffc0:	e0fffd17 	ldw	r3,-12(fp)
 400ffc4:	18c00017 	ldw	r3,0(r3)
 400ffc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400ffcc:	e0bffd17 	ldw	r2,-12(fp)
 400ffd0:	e0fffd17 	ldw	r3,-12(fp)
 400ffd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400ffd8:	e0bffd17 	ldw	r2,-12(fp)
 400ffdc:	e0fffd17 	ldw	r3,-12(fp)
 400ffe0:	10c00015 	stw	r3,0(r2)
 400ffe4:	e0bffb17 	ldw	r2,-20(fp)
 400ffe8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ffec:	e0bffe17 	ldw	r2,-8(fp)
 400fff0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400fff4:	0001883a 	nop
 400fff8:	e037883a 	mov	sp,fp
 400fffc:	df000017 	ldw	fp,0(sp)
 4010000:	dec00104 	addi	sp,sp,4
 4010004:	f800283a 	ret

04010008 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4010008:	defffb04 	addi	sp,sp,-20
 401000c:	dfc00415 	stw	ra,16(sp)
 4010010:	df000315 	stw	fp,12(sp)
 4010014:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4010018:	d0a00f17 	ldw	r2,-32708(gp)
 401001c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4010020:	d0acc817 	ldw	r2,-19680(gp)
 4010024:	10800044 	addi	r2,r2,1
 4010028:	d0acc815 	stw	r2,-19680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401002c:	00002e06 	br	40100e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4010030:	e0bffd17 	ldw	r2,-12(fp)
 4010034:	10800017 	ldw	r2,0(r2)
 4010038:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401003c:	e0bffd17 	ldw	r2,-12(fp)
 4010040:	10800403 	ldbu	r2,16(r2)
 4010044:	10803fcc 	andi	r2,r2,255
 4010048:	10000426 	beq	r2,zero,401005c <alt_tick+0x54>
 401004c:	d0acc817 	ldw	r2,-19680(gp)
 4010050:	1000021e 	bne	r2,zero,401005c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010054:	e0bffd17 	ldw	r2,-12(fp)
 4010058:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401005c:	e0bffd17 	ldw	r2,-12(fp)
 4010060:	10800217 	ldw	r2,8(r2)
 4010064:	d0ecc817 	ldw	r3,-19680(gp)
 4010068:	18801d36 	bltu	r3,r2,40100e0 <alt_tick+0xd8>
 401006c:	e0bffd17 	ldw	r2,-12(fp)
 4010070:	10800403 	ldbu	r2,16(r2)
 4010074:	10803fcc 	andi	r2,r2,255
 4010078:	1000191e 	bne	r2,zero,40100e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401007c:	e0bffd17 	ldw	r2,-12(fp)
 4010080:	10800317 	ldw	r2,12(r2)
 4010084:	e0fffd17 	ldw	r3,-12(fp)
 4010088:	18c00517 	ldw	r3,20(r3)
 401008c:	1809883a 	mov	r4,r3
 4010090:	103ee83a 	callr	r2
 4010094:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010098:	e0bfff17 	ldw	r2,-4(fp)
 401009c:	1000031e 	bne	r2,zero,40100ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40100a0:	e13ffd17 	ldw	r4,-12(fp)
 40100a4:	400ff6c0 	call	400ff6c <alt_alarm_stop>
 40100a8:	00000d06 	br	40100e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40100ac:	e0bffd17 	ldw	r2,-12(fp)
 40100b0:	10c00217 	ldw	r3,8(r2)
 40100b4:	e0bfff17 	ldw	r2,-4(fp)
 40100b8:	1887883a 	add	r3,r3,r2
 40100bc:	e0bffd17 	ldw	r2,-12(fp)
 40100c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40100c4:	e0bffd17 	ldw	r2,-12(fp)
 40100c8:	10c00217 	ldw	r3,8(r2)
 40100cc:	d0acc817 	ldw	r2,-19680(gp)
 40100d0:	1880032e 	bgeu	r3,r2,40100e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40100d4:	e0bffd17 	ldw	r2,-12(fp)
 40100d8:	00c00044 	movi	r3,1
 40100dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40100e0:	e0bffe17 	ldw	r2,-8(fp)
 40100e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40100e8:	e0fffd17 	ldw	r3,-12(fp)
 40100ec:	d0a00f04 	addi	r2,gp,-32708
 40100f0:	18bfcf1e 	bne	r3,r2,4010030 <__alt_data_end+0xfc010030>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40100f4:	0001883a 	nop
}
 40100f8:	0001883a 	nop
 40100fc:	e037883a 	mov	sp,fp
 4010100:	dfc00117 	ldw	ra,4(sp)
 4010104:	df000017 	ldw	fp,0(sp)
 4010108:	dec00204 	addi	sp,sp,8
 401010c:	f800283a 	ret

04010110 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4010110:	defffd04 	addi	sp,sp,-12
 4010114:	dfc00215 	stw	ra,8(sp)
 4010118:	df000115 	stw	fp,4(sp)
 401011c:	df000104 	addi	fp,sp,4
 4010120:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4010124:	e13fff17 	ldw	r4,-4(fp)
 4010128:	40124900 	call	4012490 <alt_busy_sleep>
}
 401012c:	e037883a 	mov	sp,fp
 4010130:	dfc00117 	ldw	ra,4(sp)
 4010134:	df000017 	ldw	fp,0(sp)
 4010138:	dec00204 	addi	sp,sp,8
 401013c:	f800283a 	ret

04010140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010140:	defffe04 	addi	sp,sp,-8
 4010144:	dfc00115 	stw	ra,4(sp)
 4010148:	df000015 	stw	fp,0(sp)
 401014c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010150:	d0a00c17 	ldw	r2,-32720(gp)
 4010154:	10000326 	beq	r2,zero,4010164 <alt_get_errno+0x24>
 4010158:	d0a00c17 	ldw	r2,-32720(gp)
 401015c:	103ee83a 	callr	r2
 4010160:	00000106 	br	4010168 <alt_get_errno+0x28>
 4010164:	d0acc204 	addi	r2,gp,-19704
}
 4010168:	e037883a 	mov	sp,fp
 401016c:	dfc00117 	ldw	ra,4(sp)
 4010170:	df000017 	ldw	fp,0(sp)
 4010174:	dec00204 	addi	sp,sp,8
 4010178:	f800283a 	ret

0401017c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401017c:	defff904 	addi	sp,sp,-28
 4010180:	dfc00615 	stw	ra,24(sp)
 4010184:	df000515 	stw	fp,20(sp)
 4010188:	df000504 	addi	fp,sp,20
 401018c:	e13ffd15 	stw	r4,-12(fp)
 4010190:	e17ffe15 	stw	r5,-8(fp)
 4010194:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010198:	e0bffd17 	ldw	r2,-12(fp)
 401019c:	10000616 	blt	r2,zero,40101b8 <write+0x3c>
 40101a0:	e0bffd17 	ldw	r2,-12(fp)
 40101a4:	10c00324 	muli	r3,r2,12
 40101a8:	008100f4 	movhi	r2,1027
 40101ac:	10943604 	addi	r2,r2,20696
 40101b0:	1885883a 	add	r2,r3,r2
 40101b4:	00000106 	br	40101bc <write+0x40>
 40101b8:	0005883a 	mov	r2,zero
 40101bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40101c0:	e0bffb17 	ldw	r2,-20(fp)
 40101c4:	10002126 	beq	r2,zero,401024c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40101c8:	e0bffb17 	ldw	r2,-20(fp)
 40101cc:	10800217 	ldw	r2,8(r2)
 40101d0:	108000cc 	andi	r2,r2,3
 40101d4:	10001826 	beq	r2,zero,4010238 <write+0xbc>
 40101d8:	e0bffb17 	ldw	r2,-20(fp)
 40101dc:	10800017 	ldw	r2,0(r2)
 40101e0:	10800617 	ldw	r2,24(r2)
 40101e4:	10001426 	beq	r2,zero,4010238 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40101e8:	e0bffb17 	ldw	r2,-20(fp)
 40101ec:	10800017 	ldw	r2,0(r2)
 40101f0:	10800617 	ldw	r2,24(r2)
 40101f4:	e0ffff17 	ldw	r3,-4(fp)
 40101f8:	180d883a 	mov	r6,r3
 40101fc:	e17ffe17 	ldw	r5,-8(fp)
 4010200:	e13ffb17 	ldw	r4,-20(fp)
 4010204:	103ee83a 	callr	r2
 4010208:	e0bffc15 	stw	r2,-16(fp)
 401020c:	e0bffc17 	ldw	r2,-16(fp)
 4010210:	1000070e 	bge	r2,zero,4010230 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4010214:	40101400 	call	4010140 <alt_get_errno>
 4010218:	1007883a 	mov	r3,r2
 401021c:	e0bffc17 	ldw	r2,-16(fp)
 4010220:	0085c83a 	sub	r2,zero,r2
 4010224:	18800015 	stw	r2,0(r3)
        return -1;
 4010228:	00bfffc4 	movi	r2,-1
 401022c:	00000c06 	br	4010260 <write+0xe4>
      }
      return rval;
 4010230:	e0bffc17 	ldw	r2,-16(fp)
 4010234:	00000a06 	br	4010260 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4010238:	40101400 	call	4010140 <alt_get_errno>
 401023c:	1007883a 	mov	r3,r2
 4010240:	00800344 	movi	r2,13
 4010244:	18800015 	stw	r2,0(r3)
 4010248:	00000406 	br	401025c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401024c:	40101400 	call	4010140 <alt_get_errno>
 4010250:	1007883a 	mov	r3,r2
 4010254:	00801444 	movi	r2,81
 4010258:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401025c:	00bfffc4 	movi	r2,-1
}
 4010260:	e037883a 	mov	sp,fp
 4010264:	dfc00117 	ldw	ra,4(sp)
 4010268:	df000017 	ldw	fp,0(sp)
 401026c:	dec00204 	addi	sp,sp,8
 4010270:	f800283a 	ret

04010274 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4010274:	defffd04 	addi	sp,sp,-12
 4010278:	dfc00215 	stw	ra,8(sp)
 401027c:	df000115 	stw	fp,4(sp)
 4010280:	df000104 	addi	fp,sp,4
 4010284:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4010288:	d1600904 	addi	r5,gp,-32732
 401028c:	e13fff17 	ldw	r4,-4(fp)
 4010290:	401266c0 	call	401266c <alt_dev_llist_insert>
}
 4010294:	e037883a 	mov	sp,fp
 4010298:	dfc00117 	ldw	ra,4(sp)
 401029c:	df000017 	ldw	fp,0(sp)
 40102a0:	dec00204 	addi	sp,sp,8
 40102a4:	f800283a 	ret

040102a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40102a8:	defffd04 	addi	sp,sp,-12
 40102ac:	dfc00215 	stw	ra,8(sp)
 40102b0:	df000115 	stw	fp,4(sp)
 40102b4:	df000104 	addi	fp,sp,4
 40102b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 40102bc:	4012cc40 	call	4012cc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40102c0:	00800044 	movi	r2,1
 40102c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40102c8:	0001883a 	nop
 40102cc:	e037883a 	mov	sp,fp
 40102d0:	dfc00117 	ldw	ra,4(sp)
 40102d4:	df000017 	ldw	fp,0(sp)
 40102d8:	dec00204 	addi	sp,sp,8
 40102dc:	f800283a 	ret

040102e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40102e0:	defffe04 	addi	sp,sp,-8
 40102e4:	dfc00115 	stw	ra,4(sp)
 40102e8:	df000015 	stw	fp,0(sp)
 40102ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 40102f0:	01c0fa04 	movi	r7,1000
 40102f4:	01800044 	movi	r6,1
 40102f8:	000b883a 	mov	r5,zero
 40102fc:	01020034 	movhi	r4,2048
 4010300:	21040804 	addi	r4,r4,4128
 4010304:	4011d180 	call	4011d18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4010308:	000d883a 	mov	r6,zero
 401030c:	000b883a 	mov	r5,zero
 4010310:	010100f4 	movhi	r4,1027
 4010314:	2114a004 	addi	r4,r4,21120
 4010318:	40111a00 	call	40111a0 <altera_avalon_jtag_uart_init>
 401031c:	010100f4 	movhi	r4,1027
 4010320:	21149604 	addi	r4,r4,21080
 4010324:	40102740 	call	4010274 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 4010328:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 401032c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 4010330:	010100f4 	movhi	r4,1027
 4010334:	2118ae04 	addi	r4,r4,25272
 4010338:	40102740 	call	4010274 <alt_dev_reg>
    LT24_CONTROLLER_INIT ( LCD_CONTROLLER, LCD_Controller);
 401033c:	0001883a 	nop
    PITCH_DUMMY_INIT ( PITCH_DUMMY_0, Pitch_dummy_0);
 4010340:	0001883a 	nop
    VOLUME_DUMMY_INIT ( VOLUME_DUMMY_0, Volume_dummy_0);
 4010344:	0001883a 	nop
}
 4010348:	0001883a 	nop
 401034c:	e037883a 	mov	sp,fp
 4010350:	dfc00117 	ldw	ra,4(sp)
 4010354:	df000017 	ldw	fp,0(sp)
 4010358:	dec00204 	addi	sp,sp,8
 401035c:	f800283a 	ret

04010360 <Delay_Ms>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms(alt_u16 count_ms)
{
 4010360:	defffd04 	addi	sp,sp,-12
 4010364:	dfc00215 	stw	ra,8(sp)
 4010368:	df000115 	stw	fp,4(sp)
 401036c:	df000104 	addi	fp,sp,4
 4010370:	2005883a 	mov	r2,r4
 4010374:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 4010378:	00000206 	br	4010384 <Delay_Ms+0x24>
    {
        usleep(1000);
 401037c:	0100fa04 	movi	r4,1000
 4010380:	40101100 	call	4010110 <usleep>
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 4010384:	e0bfff0b 	ldhu	r2,-4(fp)
 4010388:	10ffffc4 	addi	r3,r2,-1
 401038c:	e0ffff0d 	sth	r3,-4(fp)
 4010390:	10bfffcc 	andi	r2,r2,65535
 4010394:	103ff91e 	bne	r2,zero,401037c <__alt_data_end+0xfc01037c>
    {
        usleep(1000);
    }
}
 4010398:	0001883a 	nop
 401039c:	e037883a 	mov	sp,fp
 40103a0:	dfc00117 	ldw	ra,4(sp)
 40103a4:	df000017 	ldw	fp,0(sp)
 40103a8:	dec00204 	addi	sp,sp,8
 40103ac:	f800283a 	ret

040103b0 <LCD_SetCursor>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 40103b0:	defffd04 	addi	sp,sp,-12
 40103b4:	df000215 	stw	fp,8(sp)
 40103b8:	df000204 	addi	fp,sp,8
 40103bc:	2007883a 	mov	r3,r4
 40103c0:	2805883a 	mov	r2,r5
 40103c4:	e0fffe0d 	sth	r3,-8(fp)
 40103c8:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 40103cc:	00c00a84 	movi	r3,42
 40103d0:	00820034 	movhi	r2,2048
 40103d4:	10842a04 	addi	r2,r2,4264
 40103d8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xpos>>8);
 40103dc:	e0bffe0b 	ldhu	r2,-8(fp)
 40103e0:	1004d23a 	srli	r2,r2,8
 40103e4:	10ffffcc 	andi	r3,r2,65535
 40103e8:	00820034 	movhi	r2,2048
 40103ec:	10842b04 	addi	r2,r2,4268
 40103f0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xpos&0XFF);
 40103f4:	e0bffe0b 	ldhu	r2,-8(fp)
 40103f8:	10c03fcc 	andi	r3,r2,255
 40103fc:	00820034 	movhi	r2,2048
 4010400:	10842b04 	addi	r2,r2,4268
 4010404:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 4010408:	00c00ac4 	movi	r3,43
 401040c:	00820034 	movhi	r2,2048
 4010410:	10842a04 	addi	r2,r2,4264
 4010414:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Ypos>>8);
 4010418:	e0bfff0b 	ldhu	r2,-4(fp)
 401041c:	1004d23a 	srli	r2,r2,8
 4010420:	10ffffcc 	andi	r3,r2,65535
 4010424:	00820034 	movhi	r2,2048
 4010428:	10842b04 	addi	r2,r2,4268
 401042c:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Ypos&0XFF);
 4010430:	e0bfff0b 	ldhu	r2,-4(fp)
 4010434:	10c03fcc 	andi	r3,r2,255
 4010438:	00820034 	movhi	r2,2048
 401043c:	10842b04 	addi	r2,r2,4268
 4010440:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 4010444:	00c00b04 	movi	r3,44
 4010448:	00820034 	movhi	r2,2048
 401044c:	10842a04 	addi	r2,r2,4264
 4010450:	10c00035 	stwio	r3,0(r2)

}
 4010454:	0001883a 	nop
 4010458:	e037883a 	mov	sp,fp
 401045c:	df000017 	ldw	fp,0(sp)
 4010460:	dec00104 	addi	sp,sp,4
 4010464:	f800283a 	ret

04010468 <LCD_SetRect>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_SetRect(alt_u16 Xposstart, alt_u16 Yposstart,alt_u16 Xposend, alt_u16 Yposend)
{
 4010468:	defffb04 	addi	sp,sp,-20
 401046c:	df000415 	stw	fp,16(sp)
 4010470:	df000404 	addi	fp,sp,16
 4010474:	2011883a 	mov	r8,r4
 4010478:	2809883a 	mov	r4,r5
 401047c:	3007883a 	mov	r3,r6
 4010480:	3805883a 	mov	r2,r7
 4010484:	e23ffc0d 	sth	r8,-16(fp)
 4010488:	e13ffd0d 	sth	r4,-12(fp)
 401048c:	e0fffe0d 	sth	r3,-8(fp)
 4010490:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 4010494:	00c00a84 	movi	r3,42
 4010498:	00820034 	movhi	r2,2048
 401049c:	10842a04 	addi	r2,r2,4264
 40104a0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposstart>>8);
 40104a4:	e0bffc0b 	ldhu	r2,-16(fp)
 40104a8:	1004d23a 	srli	r2,r2,8
 40104ac:	10ffffcc 	andi	r3,r2,65535
 40104b0:	00820034 	movhi	r2,2048
 40104b4:	10842b04 	addi	r2,r2,4268
 40104b8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposstart&0XFF);
 40104bc:	e0bffc0b 	ldhu	r2,-16(fp)
 40104c0:	10c03fcc 	andi	r3,r2,255
 40104c4:	00820034 	movhi	r2,2048
 40104c8:	10842b04 	addi	r2,r2,4268
 40104cc:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposend>>8);
 40104d0:	e0bffe0b 	ldhu	r2,-8(fp)
 40104d4:	1004d23a 	srli	r2,r2,8
 40104d8:	10ffffcc 	andi	r3,r2,65535
 40104dc:	00820034 	movhi	r2,2048
 40104e0:	10842b04 	addi	r2,r2,4268
 40104e4:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposend&0XFF);
 40104e8:	e0bffe0b 	ldhu	r2,-8(fp)
 40104ec:	10c03fcc 	andi	r3,r2,255
 40104f0:	00820034 	movhi	r2,2048
 40104f4:	10842b04 	addi	r2,r2,4268
 40104f8:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 40104fc:	00c00ac4 	movi	r3,43
 4010500:	00820034 	movhi	r2,2048
 4010504:	10842a04 	addi	r2,r2,4264
 4010508:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposstart>>8);
 401050c:	e0bffd0b 	ldhu	r2,-12(fp)
 4010510:	1004d23a 	srli	r2,r2,8
 4010514:	10ffffcc 	andi	r3,r2,65535
 4010518:	00820034 	movhi	r2,2048
 401051c:	10842b04 	addi	r2,r2,4268
 4010520:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposstart&0XFF);
 4010524:	e0bffd0b 	ldhu	r2,-12(fp)
 4010528:	10c03fcc 	andi	r3,r2,255
 401052c:	00820034 	movhi	r2,2048
 4010530:	10842b04 	addi	r2,r2,4268
 4010534:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposend>>8);
 4010538:	e0bfff0b 	ldhu	r2,-4(fp)
 401053c:	1004d23a 	srli	r2,r2,8
 4010540:	10ffffcc 	andi	r3,r2,65535
 4010544:	00820034 	movhi	r2,2048
 4010548:	10842b04 	addi	r2,r2,4268
 401054c:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposend&0XFF);
 4010550:	e0bfff0b 	ldhu	r2,-4(fp)
 4010554:	10c03fcc 	andi	r3,r2,255
 4010558:	00820034 	movhi	r2,2048
 401055c:	10842b04 	addi	r2,r2,4268
 4010560:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 4010564:	00c00b04 	movi	r3,44
 4010568:	00820034 	movhi	r2,2048
 401056c:	10842a04 	addi	r2,r2,4264
 4010570:	10c00035 	stwio	r3,0(r2)

}
 4010574:	0001883a 	nop
 4010578:	e037883a 	mov	sp,fp
 401057c:	df000017 	ldw	fp,0(sp)
 4010580:	dec00104 	addi	sp,sp,4
 4010584:	f800283a 	ret

04010588 <LCD_Clear>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_Clear(alt_u16 Color)
{
 4010588:	defffc04 	addi	sp,sp,-16
 401058c:	dfc00315 	stw	ra,12(sp)
 4010590:	df000215 	stw	fp,8(sp)
 4010594:	df000204 	addi	fp,sp,8
 4010598:	2005883a 	mov	r2,r4
 401059c:	e0bfff0d 	sth	r2,-4(fp)
		alt_u32 index=0;
 40105a0:	e03ffe15 	stw	zero,-8(fp)
		LCD_SetRect(0,0,240,320);
 40105a4:	01c05004 	movi	r7,320
 40105a8:	01803c04 	movi	r6,240
 40105ac:	000b883a 	mov	r5,zero
 40105b0:	0009883a 	mov	r4,zero
 40105b4:	40104680 	call	4010468 <LCD_SetRect>
        //LCD_SetCursor(0x0000,0x0000);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 40105b8:	00c00b04 	movi	r3,44
 40105bc:	00820034 	movhi	r2,2048
 40105c0:	10842a04 	addi	r2,r2,4264
 40105c4:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)//76800
 40105c8:	e03ffe15 	stw	zero,-8(fp)
 40105cc:	00000706 	br	40105ec <LCD_Clear+0x64>
        {
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Color);
 40105d0:	e0ffff0b 	ldhu	r3,-4(fp)
 40105d4:	00820034 	movhi	r2,2048
 40105d8:	10842b04 	addi	r2,r2,4268
 40105dc:	10c00035 	stwio	r3,0(r2)
{
		alt_u32 index=0;
		LCD_SetRect(0,0,240,320);
        //LCD_SetCursor(0x0000,0x0000);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
        for(index=0;index<76800;index++)//76800
 40105e0:	e0bffe17 	ldw	r2,-8(fp)
 40105e4:	10800044 	addi	r2,r2,1
 40105e8:	e0bffe15 	stw	r2,-8(fp)
 40105ec:	e0fffe17 	ldw	r3,-8(fp)
 40105f0:	00800074 	movhi	r2,1
 40105f4:	108affc4 	addi	r2,r2,11263
 40105f8:	10fff52e 	bgeu	r2,r3,40105d0 <__alt_data_end+0xfc0105d0>
        {
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Color);
        }
}
 40105fc:	0001883a 	nop
 4010600:	e037883a 	mov	sp,fp
 4010604:	dfc00117 	ldw	ra,4(sp)
 4010608:	df000017 	ldw	fp,0(sp)
 401060c:	dec00204 	addi	sp,sp,8
 4010610:	f800283a 	ret

04010614 <LCD_DrawPoint>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 4010614:	defffb04 	addi	sp,sp,-20
 4010618:	dfc00415 	stw	ra,16(sp)
 401061c:	df000315 	stw	fp,12(sp)
 4010620:	df000304 	addi	fp,sp,12
 4010624:	2807883a 	mov	r3,r5
 4010628:	3005883a 	mov	r2,r6
 401062c:	e13ffd0d 	sth	r4,-12(fp)
 4010630:	e0fffe0d 	sth	r3,-8(fp)
 4010634:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 4010638:	e0bffd0b 	ldhu	r2,-12(fp)
 401063c:	e0fffe0b 	ldhu	r3,-8(fp)
 4010640:	180b883a 	mov	r5,r3
 4010644:	1009883a 	mov	r4,r2
 4010648:	40103b00 	call	40103b0 <LCD_SetCursor>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 401064c:	00c00b04 	movi	r3,44
 4010650:	00820034 	movhi	r2,2048
 4010654:	10842a04 	addi	r2,r2,4264
 4010658:	10c00035 	stwio	r3,0(r2)
        IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
 401065c:	e0ffff0b 	ldhu	r3,-4(fp)
 4010660:	00820034 	movhi	r2,2048
 4010664:	10842b04 	addi	r2,r2,4268
 4010668:	10c00035 	stwio	r3,0(r2)
}
 401066c:	0001883a 	nop
 4010670:	e037883a 	mov	sp,fp
 4010674:	dfc00117 	ldw	ra,4(sp)
 4010678:	df000017 	ldw	fp,0(sp)
 401067c:	dec00204 	addi	sp,sp,8
 4010680:	f800283a 	ret

04010684 <LCD_DrawRect>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_DrawRect(alt_u16 xs,alt_u16 ys,alt_u16 xe,alt_u16 ye,alt_u16 color )
{
 4010684:	defff804 	addi	sp,sp,-32
 4010688:	dfc00715 	stw	ra,28(sp)
 401068c:	df000615 	stw	fp,24(sp)
 4010690:	df000604 	addi	fp,sp,24
 4010694:	2011883a 	mov	r8,r4
 4010698:	3009883a 	mov	r4,r6
 401069c:	3807883a 	mov	r3,r7
 40106a0:	e0800217 	ldw	r2,8(fp)
 40106a4:	e23ffb0d 	sth	r8,-20(fp)
 40106a8:	e17ffc0d 	sth	r5,-16(fp)
 40106ac:	e13ffd0d 	sth	r4,-12(fp)
 40106b0:	e0fffe0d 	sth	r3,-8(fp)
 40106b4:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetRect(xs,ys,xe,ye);
 40106b8:	e0bffb0b 	ldhu	r2,-20(fp)
 40106bc:	e0fffc0b 	ldhu	r3,-16(fp)
 40106c0:	e13ffd0b 	ldhu	r4,-12(fp)
 40106c4:	e17ffe0b 	ldhu	r5,-8(fp)
 40106c8:	280f883a 	mov	r7,r5
 40106cc:	200d883a 	mov	r6,r4
 40106d0:	180b883a 	mov	r5,r3
 40106d4:	1009883a 	mov	r4,r2
 40106d8:	40104680 	call	4010468 <LCD_SetRect>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 40106dc:	00c00b04 	movi	r3,44
 40106e0:	00820034 	movhi	r2,2048
 40106e4:	10842a04 	addi	r2,r2,4264
 40106e8:	10c00035 	stwio	r3,0(r2)
        for(int i = 0; i < (xe-xs+2)*(ye-ys+2);i++){
 40106ec:	e03ffa15 	stw	zero,-24(fp)
 40106f0:	00000706 	br	4010710 <LCD_DrawRect+0x8c>
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
 40106f4:	e0ffff0b 	ldhu	r3,-4(fp)
 40106f8:	00820034 	movhi	r2,2048
 40106fc:	10842b04 	addi	r2,r2,4268
 4010700:	10c00035 	stwio	r3,0(r2)

void LCD_DrawRect(alt_u16 xs,alt_u16 ys,alt_u16 xe,alt_u16 ye,alt_u16 color )
{
        LCD_SetRect(xs,ys,xe,ye);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
        for(int i = 0; i < (xe-xs+2)*(ye-ys+2);i++){
 4010704:	e0bffa17 	ldw	r2,-24(fp)
 4010708:	10800044 	addi	r2,r2,1
 401070c:	e0bffa15 	stw	r2,-24(fp)
 4010710:	e0fffd0b 	ldhu	r3,-12(fp)
 4010714:	e0bffb0b 	ldhu	r2,-20(fp)
 4010718:	1885c83a 	sub	r2,r3,r2
 401071c:	10c00084 	addi	r3,r2,2
 4010720:	e13ffe0b 	ldhu	r4,-8(fp)
 4010724:	e0bffc0b 	ldhu	r2,-16(fp)
 4010728:	2085c83a 	sub	r2,r4,r2
 401072c:	10800084 	addi	r2,r2,2
 4010730:	1885383a 	mul	r2,r3,r2
 4010734:	e0fffa17 	ldw	r3,-24(fp)
 4010738:	18bfee16 	blt	r3,r2,40106f4 <__alt_data_end+0xfc0106f4>
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
        }

}
 401073c:	0001883a 	nop
 4010740:	e037883a 	mov	sp,fp
 4010744:	dfc00117 	ldw	ra,4(sp)
 4010748:	df000017 	ldw	fp,0(sp)
 401074c:	dec00204 	addi	sp,sp,8
 4010750:	f800283a 	ret

04010754 <vid_set_pixel>:


void vid_set_pixel(int horiz, int vert, unsigned int color)
{
 4010754:	defffa04 	addi	sp,sp,-24
 4010758:	dfc00515 	stw	ra,20(sp)
 401075c:	df000415 	stw	fp,16(sp)
 4010760:	df000404 	addi	fp,sp,16
 4010764:	e13ffd15 	stw	r4,-12(fp)
 4010768:	e17ffe15 	stw	r5,-8(fp)
 401076c:	e1bfff15 	stw	r6,-4(fp)

	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 4010770:	e0bfff17 	ldw	r2,-4(fp)
 4010774:	10803fcc 	andi	r2,r2,255
 4010778:	1004d0fa 	srli	r2,r2,3
 401077c:	e0bffc0d 	sth	r2,-16(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 4010780:	e0bfff17 	ldw	r2,-4(fp)
 4010784:	10bf000c 	andi	r2,r2,64512
 4010788:	1004d17a 	srli	r2,r2,5
 401078c:	1007883a 	mov	r3,r2
 4010790:	e0bffc0b 	ldhu	r2,-16(fp)
 4010794:	1884b03a 	or	r2,r3,r2
 4010798:	e0bffc0d 	sth	r2,-16(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 401079c:	e0bfff17 	ldw	r2,-4(fp)
 40107a0:	10803e2c 	andhi	r2,r2,248
 40107a4:	1004d23a 	srli	r2,r2,8
 40107a8:	1007883a 	mov	r3,r2
 40107ac:	e0bffc0b 	ldhu	r2,-16(fp)
 40107b0:	1884b03a 	or	r2,r3,r2
 40107b4:	e0bffc0d 	sth	r2,-16(fp)
	LCD_DrawPoint(horiz, vert, color16);
 40107b8:	e0bffd17 	ldw	r2,-12(fp)
 40107bc:	10ffffcc 	andi	r3,r2,65535
 40107c0:	e0bffe17 	ldw	r2,-8(fp)
 40107c4:	10bfffcc 	andi	r2,r2,65535
 40107c8:	e13ffc0b 	ldhu	r4,-16(fp)
 40107cc:	200d883a 	mov	r6,r4
 40107d0:	100b883a 	mov	r5,r2
 40107d4:	1809883a 	mov	r4,r3
 40107d8:	40106140 	call	4010614 <LCD_DrawPoint>
}
 40107dc:	0001883a 	nop
 40107e0:	e037883a 	mov	sp,fp
 40107e4:	dfc00117 	ldw	ra,4(sp)
 40107e8:	df000017 	ldw	fp,0(sp)
 40107ec:	dec00204 	addi	sp,sp,8
 40107f0:	f800283a 	ret

040107f4 <LCD_Init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_Init()
{
 40107f4:	defffe04 	addi	sp,sp,-8
 40107f8:	dfc00115 	stw	ra,4(sp)
 40107fc:	df000015 	stw	fp,0(sp)
 4010800:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;

	IOWR_LT24_AVALON_Set_LCD_RST(LCD_RESET_N_BASE); //	Set_LCD_RST;
 4010804:	00c00044 	movi	r3,1
 4010808:	00820034 	movhi	r2,2048
 401080c:	10841c04 	addi	r2,r2,4208
 4010810:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 4010814:	01000044 	movi	r4,1
 4010818:	40103600 	call	4010360 <Delay_Ms>
	IOWR_LT24_AVALON_Clr_LCD_RST(LCD_RESET_N_BASE);
 401081c:	0007883a 	mov	r3,zero
 4010820:	00820034 	movhi	r2,2048
 4010824:	10841c04 	addi	r2,r2,4208
 4010828:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 401082c:	01000284 	movi	r4,10
 4010830:	40103600 	call	4010360 <Delay_Ms>
	IOWR_LT24_AVALON_Set_LCD_RST(LCD_RESET_N_BASE); //	Set_LCD_RST;
 4010834:	00c00044 	movi	r3,1
 4010838:	00820034 	movhi	r2,2048
 401083c:	10841c04 	addi	r2,r2,4208
 4010840:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 4010844:	01001e04 	movi	r4,120
 4010848:	40103600 	call	4010360 <Delay_Ms>
//	Clr_LCD_CS;


	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0011);//Exit Sleep
 401084c:	00c00444 	movi	r3,17
 4010850:	00820034 	movhi	r2,2048
 4010854:	10842a04 	addi	r2,r2,4264
 4010858:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00CF);//Power control B
 401085c:	00c033c4 	movi	r3,207
 4010860:	00820034 	movhi	r2,2048
 4010864:	10842a04 	addi	r2,r2,4264
 4010868:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 401086c:	0007883a 	mov	r3,zero
 4010870:	00820034 	movhi	r2,2048
 4010874:	10842b04 	addi	r2,r2,4268
 4010878:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0081);
 401087c:	00c02044 	movi	r3,129
 4010880:	00820034 	movhi	r2,2048
 4010884:	10842b04 	addi	r2,r2,4268
 4010888:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00c0);
 401088c:	00c03004 	movi	r3,192
 4010890:	00820034 	movhi	r2,2048
 4010894:	10842b04 	addi	r2,r2,4268
 4010898:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00ED); //Power on sequence control
 401089c:	00c03b44 	movi	r3,237
 40108a0:	00820034 	movhi	r2,2048
 40108a4:	10842a04 	addi	r2,r2,4264
 40108a8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0064);
 40108ac:	00c01904 	movi	r3,100
 40108b0:	00820034 	movhi	r2,2048
 40108b4:	10842b04 	addi	r2,r2,4268
 40108b8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0003);
 40108bc:	00c000c4 	movi	r3,3
 40108c0:	00820034 	movhi	r2,2048
 40108c4:	10842b04 	addi	r2,r2,4268
 40108c8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X0012);
 40108cc:	00c00484 	movi	r3,18
 40108d0:	00820034 	movhi	r2,2048
 40108d4:	10842b04 	addi	r2,r2,4268
 40108d8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X0081);
 40108dc:	00c02044 	movi	r3,129
 40108e0:	00820034 	movhi	r2,2048
 40108e4:	10842b04 	addi	r2,r2,4268
 40108e8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00E8); // driver timing control A
 40108ec:	00c03a04 	movi	r3,232
 40108f0:	00820034 	movhi	r2,2048
 40108f4:	10842a04 	addi	r2,r2,4264
 40108f8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0085);
 40108fc:	00c02144 	movi	r3,133
 4010900:	00820034 	movhi	r2,2048
 4010904:	10842b04 	addi	r2,r2,4268
 4010908:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 401090c:	00c00044 	movi	r3,1
 4010910:	00820034 	movhi	r2,2048
 4010914:	10842b04 	addi	r2,r2,4268
 4010918:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00798);
 401091c:	00c1e604 	movi	r3,1944
 4010920:	00820034 	movhi	r2,2048
 4010924:	10842b04 	addi	r2,r2,4268
 4010928:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00CB);	//Power control A
 401092c:	00c032c4 	movi	r3,203
 4010930:	00820034 	movhi	r2,2048
 4010934:	10842a04 	addi	r2,r2,4264
 4010938:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0039);
 401093c:	00c00e44 	movi	r3,57
 4010940:	00820034 	movhi	r2,2048
 4010944:	10842b04 	addi	r2,r2,4268
 4010948:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x002C);
 401094c:	00c00b04 	movi	r3,44
 4010950:	00820034 	movhi	r2,2048
 4010954:	10842b04 	addi	r2,r2,4268
 4010958:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 401095c:	0007883a 	mov	r3,zero
 4010960:	00820034 	movhi	r2,2048
 4010964:	10842b04 	addi	r2,r2,4268
 4010968:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0034);
 401096c:	00c00d04 	movi	r3,52
 4010970:	00820034 	movhi	r2,2048
 4010974:	10842b04 	addi	r2,r2,4268
 4010978:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0002);
 401097c:	00c00084 	movi	r3,2
 4010980:	00820034 	movhi	r2,2048
 4010984:	10842b04 	addi	r2,r2,4268
 4010988:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00F7); //Pump ratio
 401098c:	00c03dc4 	movi	r3,247
 4010990:	00820034 	movhi	r2,2048
 4010994:	10842a04 	addi	r2,r2,4264
 4010998:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0020);
 401099c:	00c00804 	movi	r3,32
 40109a0:	00820034 	movhi	r2,2048
 40109a4:	10842b04 	addi	r2,r2,4268
 40109a8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00EA); // driver timing control B
 40109ac:	00c03a84 	movi	r3,234
 40109b0:	00820034 	movhi	r2,2048
 40109b4:	10842a04 	addi	r2,r2,4264
 40109b8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40109bc:	0007883a 	mov	r3,zero
 40109c0:	00820034 	movhi	r2,2048
 40109c4:	10842b04 	addi	r2,r2,4268
 40109c8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40109cc:	0007883a 	mov	r3,zero
 40109d0:	00820034 	movhi	r2,2048
 40109d4:	10842b04 	addi	r2,r2,4268
 40109d8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00B1); //Frame Rate Control
 40109dc:	00c02c44 	movi	r3,177
 40109e0:	00820034 	movhi	r2,2048
 40109e4:	10842a04 	addi	r2,r2,4264
 40109e8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 40109ec:	0007883a 	mov	r3,zero
 40109f0:	00820034 	movhi	r2,2048
 40109f4:	10842b04 	addi	r2,r2,4268
 40109f8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x001b);
 40109fc:	00c006c4 	movi	r3,27
 4010a00:	00820034 	movhi	r2,2048
 4010a04:	10842b04 	addi	r2,r2,4268
 4010a08:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00B6); //Display Function Control
 4010a0c:	00c02d84 	movi	r3,182
 4010a10:	00820034 	movhi	r2,2048
 4010a14:	10842a04 	addi	r2,r2,4264
 4010a18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000A);
 4010a1c:	00c00284 	movi	r3,10
 4010a20:	00820034 	movhi	r2,2048
 4010a24:	10842b04 	addi	r2,r2,4268
 4010a28:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00A2);
 4010a2c:	00c02884 	movi	r3,162
 4010a30:	00820034 	movhi	r2,2048
 4010a34:	10842b04 	addi	r2,r2,4268
 4010a38:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C0); //Power control
 4010a3c:	00c03004 	movi	r3,192
 4010a40:	00820034 	movhi	r2,2048
 4010a44:	10842a04 	addi	r2,r2,4264
 4010a48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0005);  //VRH[5:0]
 4010a4c:	00c00144 	movi	r3,5
 4010a50:	00820034 	movhi	r2,2048
 4010a54:	10842b04 	addi	r2,r2,4268
 4010a58:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C1); //Power control
 4010a5c:	00c03044 	movi	r3,193
 4010a60:	00820034 	movhi	r2,2048
 4010a64:	10842a04 	addi	r2,r2,4264
 4010a68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0011);  //SAP[2:0];BT[3:0]
 4010a6c:	00c00444 	movi	r3,17
 4010a70:	00820034 	movhi	r2,2048
 4010a74:	10842b04 	addi	r2,r2,4268
 4010a78:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C5); //VCM control
 4010a7c:	00c03144 	movi	r3,197
 4010a80:	00820034 	movhi	r2,2048
 4010a84:	10842a04 	addi	r2,r2,4264
 4010a88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0045);  //3F
 4010a8c:	00c01144 	movi	r3,69
 4010a90:	00820034 	movhi	r2,2048
 4010a94:	10842b04 	addi	r2,r2,4268
 4010a98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0045);  //3C
 4010a9c:	00c01144 	movi	r3,69
 4010aa0:	00820034 	movhi	r2,2048
 4010aa4:	10842b04 	addi	r2,r2,4268
 4010aa8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C7); //VCM control2
 4010aac:	00c031c4 	movi	r3,199
 4010ab0:	00820034 	movhi	r2,2048
 4010ab4:	10842a04 	addi	r2,r2,4264
 4010ab8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00a2);
 4010abc:	00c02884 	movi	r3,162
 4010ac0:	00820034 	movhi	r2,2048
 4010ac4:	10842b04 	addi	r2,r2,4268
 4010ac8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0036); // Memory Access Control
 4010acc:	00c00d84 	movi	r3,54
 4010ad0:	00820034 	movhi	r2,2048
 4010ad4:	10842a04 	addi	r2,r2,4264
 4010ad8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);//48
 4010adc:	00c00204 	movi	r3,8
 4010ae0:	00820034 	movhi	r2,2048
 4010ae4:	10842b04 	addi	r2,r2,4268
 4010ae8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00F2);  // 3Gamma Function Disable
 4010aec:	00c03c84 	movi	r3,242
 4010af0:	00820034 	movhi	r2,2048
 4010af4:	10842a04 	addi	r2,r2,4264
 4010af8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010afc:	0007883a 	mov	r3,zero
 4010b00:	00820034 	movhi	r2,2048
 4010b04:	10842b04 	addi	r2,r2,4268
 4010b08:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0026);  //Gamma curve selected
 4010b0c:	00c00984 	movi	r3,38
 4010b10:	00820034 	movhi	r2,2048
 4010b14:	10842a04 	addi	r2,r2,4264
 4010b18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 4010b1c:	00c00044 	movi	r3,1
 4010b20:	00820034 	movhi	r2,2048
 4010b24:	10842b04 	addi	r2,r2,4268
 4010b28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00E0);  //Set Gamma
 4010b2c:	00c03804 	movi	r3,224
 4010b30:	00820034 	movhi	r2,2048
 4010b34:	10842a04 	addi	r2,r2,4264
 4010b38:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000F);
 4010b3c:	00c003c4 	movi	r3,15
 4010b40:	00820034 	movhi	r2,2048
 4010b44:	10842b04 	addi	r2,r2,4268
 4010b48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0026);
 4010b4c:	00c00984 	movi	r3,38
 4010b50:	00820034 	movhi	r2,2048
 4010b54:	10842b04 	addi	r2,r2,4268
 4010b58:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0024);
 4010b5c:	00c00904 	movi	r3,36
 4010b60:	00820034 	movhi	r2,2048
 4010b64:	10842b04 	addi	r2,r2,4268
 4010b68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000b);
 4010b6c:	00c002c4 	movi	r3,11
 4010b70:	00820034 	movhi	r2,2048
 4010b74:	10842b04 	addi	r2,r2,4268
 4010b78:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000E);
 4010b7c:	00c00384 	movi	r3,14
 4010b80:	00820034 	movhi	r2,2048
 4010b84:	10842b04 	addi	r2,r2,4268
 4010b88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);
 4010b8c:	00c00204 	movi	r3,8
 4010b90:	00820034 	movhi	r2,2048
 4010b94:	10842b04 	addi	r2,r2,4268
 4010b98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x004b);
 4010b9c:	00c012c4 	movi	r3,75
 4010ba0:	00820034 	movhi	r2,2048
 4010ba4:	10842b04 	addi	r2,r2,4268
 4010ba8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00a8);
 4010bac:	00c02a04 	movi	r3,168
 4010bb0:	00820034 	movhi	r2,2048
 4010bb4:	10842b04 	addi	r2,r2,4268
 4010bb8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x003b);
 4010bbc:	00c00ec4 	movi	r3,59
 4010bc0:	00820034 	movhi	r2,2048
 4010bc4:	10842b04 	addi	r2,r2,4268
 4010bc8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000a);
 4010bcc:	00c00284 	movi	r3,10
 4010bd0:	00820034 	movhi	r2,2048
 4010bd4:	10842b04 	addi	r2,r2,4268
 4010bd8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0014);
 4010bdc:	00c00504 	movi	r3,20
 4010be0:	00820034 	movhi	r2,2048
 4010be4:	10842b04 	addi	r2,r2,4268
 4010be8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0006);
 4010bec:	00c00184 	movi	r3,6
 4010bf0:	00820034 	movhi	r2,2048
 4010bf4:	10842b04 	addi	r2,r2,4268
 4010bf8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0010);
 4010bfc:	00c00404 	movi	r3,16
 4010c00:	00820034 	movhi	r2,2048
 4010c04:	10842b04 	addi	r2,r2,4268
 4010c08:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0009);
 4010c0c:	00c00244 	movi	r3,9
 4010c10:	00820034 	movhi	r2,2048
 4010c14:	10842b04 	addi	r2,r2,4268
 4010c18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010c1c:	0007883a 	mov	r3,zero
 4010c20:	00820034 	movhi	r2,2048
 4010c24:	10842b04 	addi	r2,r2,4268
 4010c28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0X00E1);  //Set Gamma
 4010c2c:	00c03844 	movi	r3,225
 4010c30:	00820034 	movhi	r2,2048
 4010c34:	10842a04 	addi	r2,r2,4264
 4010c38:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010c3c:	0007883a 	mov	r3,zero
 4010c40:	00820034 	movhi	r2,2048
 4010c44:	10842b04 	addi	r2,r2,4268
 4010c48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x001c);
 4010c4c:	00c00704 	movi	r3,28
 4010c50:	00820034 	movhi	r2,2048
 4010c54:	10842b04 	addi	r2,r2,4268
 4010c58:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0020);
 4010c5c:	00c00804 	movi	r3,32
 4010c60:	00820034 	movhi	r2,2048
 4010c64:	10842b04 	addi	r2,r2,4268
 4010c68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0004);
 4010c6c:	00c00104 	movi	r3,4
 4010c70:	00820034 	movhi	r2,2048
 4010c74:	10842b04 	addi	r2,r2,4268
 4010c78:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0010);
 4010c7c:	00c00404 	movi	r3,16
 4010c80:	00820034 	movhi	r2,2048
 4010c84:	10842b04 	addi	r2,r2,4268
 4010c88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);
 4010c8c:	00c00204 	movi	r3,8
 4010c90:	00820034 	movhi	r2,2048
 4010c94:	10842b04 	addi	r2,r2,4268
 4010c98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0034);
 4010c9c:	00c00d04 	movi	r3,52
 4010ca0:	00820034 	movhi	r2,2048
 4010ca4:	10842b04 	addi	r2,r2,4268
 4010ca8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0047);
 4010cac:	00c011c4 	movi	r3,71
 4010cb0:	00820034 	movhi	r2,2048
 4010cb4:	10842b04 	addi	r2,r2,4268
 4010cb8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0044);
 4010cbc:	00c01104 	movi	r3,68
 4010cc0:	00820034 	movhi	r2,2048
 4010cc4:	10842b04 	addi	r2,r2,4268
 4010cc8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0005);
 4010ccc:	00c00144 	movi	r3,5
 4010cd0:	00820034 	movhi	r2,2048
 4010cd4:	10842b04 	addi	r2,r2,4268
 4010cd8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000b);
 4010cdc:	00c002c4 	movi	r3,11
 4010ce0:	00820034 	movhi	r2,2048
 4010ce4:	10842b04 	addi	r2,r2,4268
 4010ce8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0009);
 4010cec:	00c00244 	movi	r3,9
 4010cf0:	00820034 	movhi	r2,2048
 4010cf4:	10842b04 	addi	r2,r2,4268
 4010cf8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x002f);
 4010cfc:	00c00bc4 	movi	r3,47
 4010d00:	00820034 	movhi	r2,2048
 4010d04:	10842b04 	addi	r2,r2,4268
 4010d08:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0036);
 4010d0c:	00c00d84 	movi	r3,54
 4010d10:	00820034 	movhi	r2,2048
 4010d14:	10842b04 	addi	r2,r2,4268
 4010d18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000f);
 4010d1c:	00c003c4 	movi	r3,15
 4010d20:	00820034 	movhi	r2,2048
 4010d24:	10842b04 	addi	r2,r2,4268
 4010d28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A); //colum address set
 4010d2c:	00c00a84 	movi	r3,42
 4010d30:	00820034 	movhi	r2,2048
 4010d34:	10842a04 	addi	r2,r2,4264
 4010d38:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010d3c:	0007883a 	mov	r3,zero
 4010d40:	00820034 	movhi	r2,2048
 4010d44:	10842b04 	addi	r2,r2,4268
 4010d48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010d4c:	0007883a 	mov	r3,zero
 4010d50:	00820034 	movhi	r2,2048
 4010d54:	10842b04 	addi	r2,r2,4268
 4010d58:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010d5c:	0007883a 	mov	r3,zero
 4010d60:	00820034 	movhi	r2,2048
 4010d64:	10842b04 	addi	r2,r2,4268
 4010d68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00ef);
 4010d6c:	00c03bc4 	movi	r3,239
 4010d70:	00820034 	movhi	r2,2048
 4010d74:	10842b04 	addi	r2,r2,4268
 4010d78:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 4010d7c:	00c00ac4 	movi	r3,43
 4010d80:	00820034 	movhi	r2,2048
 4010d84:	10842a04 	addi	r2,r2,4264
 4010d88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010d8c:	0007883a 	mov	r3,zero
 4010d90:	00820034 	movhi	r2,2048
 4010d94:	10842b04 	addi	r2,r2,4268
 4010d98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010d9c:	0007883a 	mov	r3,zero
 4010da0:	00820034 	movhi	r2,2048
 4010da4:	10842b04 	addi	r2,r2,4268
 4010da8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 4010dac:	00c00044 	movi	r3,1
 4010db0:	00820034 	movhi	r2,2048
 4010db4:	10842b04 	addi	r2,r2,4268
 4010db8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x003f);
 4010dbc:	00c00fc4 	movi	r3,63
 4010dc0:	00820034 	movhi	r2,2048
 4010dc4:	10842b04 	addi	r2,r2,4268
 4010dc8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x003A);
 4010dcc:	00c00e84 	movi	r3,58
 4010dd0:	00820034 	movhi	r2,2048
 4010dd4:	10842a04 	addi	r2,r2,4264
 4010dd8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0055);
 4010ddc:	00c01544 	movi	r3,85
 4010de0:	00820034 	movhi	r2,2048
 4010de4:	10842b04 	addi	r2,r2,4268
 4010de8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00f6);
 4010dec:	00c03d84 	movi	r3,246
 4010df0:	00820034 	movhi	r2,2048
 4010df4:	10842a04 	addi	r2,r2,4264
 4010df8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 4010dfc:	00c00044 	movi	r3,1
 4010e00:	00820034 	movhi	r2,2048
 4010e04:	10842b04 	addi	r2,r2,4268
 4010e08:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0030);
 4010e0c:	00c00c04 	movi	r3,48
 4010e10:	00820034 	movhi	r2,2048
 4010e14:	10842b04 	addi	r2,r2,4268
 4010e18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 4010e1c:	0007883a 	mov	r3,zero
 4010e20:	00820034 	movhi	r2,2048
 4010e24:	10842b04 	addi	r2,r2,4268
 4010e28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0029);  //display on
 4010e2c:	00c00a44 	movi	r3,41
 4010e30:	00820034 	movhi	r2,2048
 4010e34:	10842a04 	addi	r2,r2,4264
 4010e38:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002c);  // 0x2C
 4010e3c:	00c00b04 	movi	r3,44
 4010e40:	00820034 	movhi	r2,2048
 4010e44:	10842a04 	addi	r2,r2,4264
 4010e48:	10c00035 	stwio	r3,0(r2)


}
 4010e4c:	0001883a 	nop
 4010e50:	e037883a 	mov	sp,fp
 4010e54:	dfc00117 	ldw	ra,4(sp)
 4010e58:	df000017 	ldw	fp,0(sp)
 4010e5c:	dec00204 	addi	sp,sp,8
 4010e60:	f800283a 	ret

04010e64 <set_glissando_delay>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void set_glissando_delay(alt_u8 delay)
{
 4010e64:	defffe04 	addi	sp,sp,-8
 4010e68:	df000115 	stw	fp,4(sp)
 4010e6c:	df000104 	addi	fp,sp,4
 4010e70:	2005883a 	mov	r2,r4
 4010e74:	e0bfff05 	stb	r2,-4(fp)
	IOWR_PITCH_DUMMY_AVALON_PITCH_WR_DELAY(PITCH_DUMMY_0_BASE,(alt_u32)delay);
 4010e78:	e0ffff03 	ldbu	r3,-4(fp)
 4010e7c:	00820034 	movhi	r2,2048
 4010e80:	10841204 	addi	r2,r2,4168
 4010e84:	10c00035 	stwio	r3,0(r2)
}
 4010e88:	0001883a 	nop
 4010e8c:	e037883a 	mov	sp,fp
 4010e90:	df000017 	ldw	fp,0(sp)
 4010e94:	dec00104 	addi	sp,sp,4
 4010e98:	f800283a 	ret

04010e9c <set_glissando>:

void set_glissando(alt_u8 glissando_on_off)
{
 4010e9c:	defffe04 	addi	sp,sp,-8
 4010ea0:	df000115 	stw	fp,4(sp)
 4010ea4:	df000104 	addi	fp,sp,4
 4010ea8:	2005883a 	mov	r2,r4
 4010eac:	e0bfff05 	stb	r2,-4(fp)
	IOWR_PITCH_DUMMY_AVALON_PITCH_WR_CNTRL(PITCH_DUMMY_0_BASE,glissando_on_off);
 4010eb0:	e0ffff03 	ldbu	r3,-4(fp)
 4010eb4:	00820034 	movhi	r2,2048
 4010eb8:	10841004 	addi	r2,r2,4160
 4010ebc:	10c00035 	stwio	r3,0(r2)
}
 4010ec0:	0001883a 	nop
 4010ec4:	e037883a 	mov	sp,fp
 4010ec8:	df000017 	ldw	fp,0(sp)
 4010ecc:	dec00104 	addi	sp,sp,4
 4010ed0:	f800283a 	ret

04010ed4 <set_calibration_pitch>:

void set_calibration_pitch(void)
{
 4010ed4:	deffff04 	addi	sp,sp,-4
 4010ed8:	df000015 	stw	fp,0(sp)
 4010edc:	d839883a 	mov	fp,sp
	IOWR_PITCH_DUMMY_AVALON_PITCH_WR_CNTRL(PITCH_DUMMY_0_BASE,2);
 4010ee0:	00c00084 	movi	r3,2
 4010ee4:	00820034 	movhi	r2,2048
 4010ee8:	10841004 	addi	r2,r2,4160
 4010eec:	10c00035 	stwio	r3,0(r2)
}
 4010ef0:	0001883a 	nop
 4010ef4:	e037883a 	mov	sp,fp
 4010ef8:	df000017 	ldw	fp,0(sp)
 4010efc:	dec00104 	addi	sp,sp,4
 4010f00:	f800283a 	ret

04010f04 <done_calibration_pitch>:

alt_u32 done_calibration_pitch(void)
{
 4010f04:	deffff04 	addi	sp,sp,-4
 4010f08:	df000015 	stw	fp,0(sp)
 4010f0c:	d839883a 	mov	fp,sp
	return IORD_PITCH_DUMMY_AVALON_PITCH_RD_CNTRL(PITCH_DUMMY_0_BASE) & 2;
 4010f10:	00820034 	movhi	r2,2048
 4010f14:	10841004 	addi	r2,r2,4160
 4010f18:	10800037 	ldwio	r2,0(r2)
 4010f1c:	1080008c 	andi	r2,r2,2
}
 4010f20:	e037883a 	mov	sp,fp
 4010f24:	df000017 	ldw	fp,0(sp)
 4010f28:	dec00104 	addi	sp,sp,4
 4010f2c:	f800283a 	ret

04010f30 <read_freq_pitch>:


alt_u32 read_freq_pitch(void)
{
 4010f30:	deffff04 	addi	sp,sp,-4
 4010f34:	df000015 	stw	fp,0(sp)
 4010f38:	d839883a 	mov	fp,sp
	return IORD_PITCH_DUMMY_AVALON_PITCH_RD_freq(PITCH_DUMMY_0_BASE);
 4010f3c:	00820034 	movhi	r2,2048
 4010f40:	10841104 	addi	r2,r2,4164
 4010f44:	10800037 	ldwio	r2,0(r2)
}
 4010f48:	e037883a 	mov	sp,fp
 4010f4c:	df000017 	ldw	fp,0(sp)
 4010f50:	dec00104 	addi	sp,sp,4
 4010f54:	f800283a 	ret

04010f58 <set_calibration_vol>:
 * Return  : none
 *--------------------------------------------------*/


void set_calibration_vol(void)
{
 4010f58:	deffff04 	addi	sp,sp,-4
 4010f5c:	df000015 	stw	fp,0(sp)
 4010f60:	d839883a 	mov	fp,sp
	IOWR_VOLUME_DUMMY_AVALON_VOL_WR_CNTRL(VOLUME_DUMMY_0_BASE,2);
 4010f64:	00c00084 	movi	r3,2
 4010f68:	00820034 	movhi	r2,2048
 4010f6c:	10842604 	addi	r2,r2,4248
 4010f70:	10c00035 	stwio	r3,0(r2)
}
 4010f74:	0001883a 	nop
 4010f78:	e037883a 	mov	sp,fp
 4010f7c:	df000017 	ldw	fp,0(sp)
 4010f80:	dec00104 	addi	sp,sp,4
 4010f84:	f800283a 	ret

04010f88 <done_calibration_vol>:

alt_u32 done_calibration_vol(void)
{
 4010f88:	deffff04 	addi	sp,sp,-4
 4010f8c:	df000015 	stw	fp,0(sp)
 4010f90:	d839883a 	mov	fp,sp
	return IORD_VOLUME_DUMMY_AVALON_VOL_RD_CNTRL(VOLUME_DUMMY_0_BASE) & 2;
 4010f94:	00820034 	movhi	r2,2048
 4010f98:	10842704 	addi	r2,r2,4252
 4010f9c:	10800037 	ldwio	r2,0(r2)
 4010fa0:	1080008c 	andi	r2,r2,2
}
 4010fa4:	e037883a 	mov	sp,fp
 4010fa8:	df000017 	ldw	fp,0(sp)
 4010fac:	dec00104 	addi	sp,sp,4
 4010fb0:	f800283a 	ret

04010fb4 <set_vol>:

void set_vol(alt_u8 vol_bar)
{
 4010fb4:	defffe04 	addi	sp,sp,-8
 4010fb8:	df000115 	stw	fp,4(sp)
 4010fbc:	df000104 	addi	fp,sp,4
 4010fc0:	2005883a 	mov	r2,r4
 4010fc4:	e0bfff05 	stb	r2,-4(fp)
	IOWR_VOLUME_DUMMY_AVALON_VOL_WR_CNTRL(VOLUME_DUMMY_0_BASE,vol_bar);
 4010fc8:	e0ffff03 	ldbu	r3,-4(fp)
 4010fcc:	00820034 	movhi	r2,2048
 4010fd0:	10842604 	addi	r2,r2,4248
 4010fd4:	10c00035 	stwio	r3,0(r2)
}
 4010fd8:	0001883a 	nop
 4010fdc:	e037883a 	mov	sp,fp
 4010fe0:	df000017 	ldw	fp,0(sp)
 4010fe4:	dec00104 	addi	sp,sp,4
 4010fe8:	f800283a 	ret

04010fec <read_freq_vol>:


alt_u32 read_freq_vol(void)
{
 4010fec:	deffff04 	addi	sp,sp,-4
 4010ff0:	df000015 	stw	fp,0(sp)
 4010ff4:	d839883a 	mov	fp,sp
	return IORD_VOLUME_DUMMY_AVALON_VOL_RD_freq(VOLUME_DUMMY_0_BASE);
 4010ff8:	00820034 	movhi	r2,2048
 4010ffc:	10842604 	addi	r2,r2,4248
 4011000:	10800037 	ldwio	r2,0(r2)
}
 4011004:	e037883a 	mov	sp,fp
 4011008:	df000017 	ldw	fp,0(sp)
 401100c:	dec00104 	addi	sp,sp,4
 4011010:	f800283a 	ret

04011014 <read_cntrl_vol>:

alt_u32 read_cntrl_vol(void)
{
 4011014:	deffff04 	addi	sp,sp,-4
 4011018:	df000015 	stw	fp,0(sp)
 401101c:	d839883a 	mov	fp,sp
	return IORD_VOLUME_DUMMY_AVALON_VOL_RD_CNTRL(VOLUME_DUMMY_0_BASE);
 4011020:	00820034 	movhi	r2,2048
 4011024:	10842704 	addi	r2,r2,4252
 4011028:	10800037 	ldwio	r2,0(r2)
}
 401102c:	e037883a 	mov	sp,fp
 4011030:	df000017 	ldw	fp,0(sp)
 4011034:	dec00104 	addi	sp,sp,4
 4011038:	f800283a 	ret

0401103c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401103c:	defffa04 	addi	sp,sp,-24
 4011040:	dfc00515 	stw	ra,20(sp)
 4011044:	df000415 	stw	fp,16(sp)
 4011048:	df000404 	addi	fp,sp,16
 401104c:	e13ffd15 	stw	r4,-12(fp)
 4011050:	e17ffe15 	stw	r5,-8(fp)
 4011054:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011058:	e0bffd17 	ldw	r2,-12(fp)
 401105c:	10800017 	ldw	r2,0(r2)
 4011060:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4011064:	e0bffc17 	ldw	r2,-16(fp)
 4011068:	10c00a04 	addi	r3,r2,40
 401106c:	e0bffd17 	ldw	r2,-12(fp)
 4011070:	10800217 	ldw	r2,8(r2)
 4011074:	100f883a 	mov	r7,r2
 4011078:	e1bfff17 	ldw	r6,-4(fp)
 401107c:	e17ffe17 	ldw	r5,-8(fp)
 4011080:	1809883a 	mov	r4,r3
 4011084:	40116640 	call	4011664 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4011088:	e037883a 	mov	sp,fp
 401108c:	dfc00117 	ldw	ra,4(sp)
 4011090:	df000017 	ldw	fp,0(sp)
 4011094:	dec00204 	addi	sp,sp,8
 4011098:	f800283a 	ret

0401109c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401109c:	defffa04 	addi	sp,sp,-24
 40110a0:	dfc00515 	stw	ra,20(sp)
 40110a4:	df000415 	stw	fp,16(sp)
 40110a8:	df000404 	addi	fp,sp,16
 40110ac:	e13ffd15 	stw	r4,-12(fp)
 40110b0:	e17ffe15 	stw	r5,-8(fp)
 40110b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40110b8:	e0bffd17 	ldw	r2,-12(fp)
 40110bc:	10800017 	ldw	r2,0(r2)
 40110c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40110c4:	e0bffc17 	ldw	r2,-16(fp)
 40110c8:	10c00a04 	addi	r3,r2,40
 40110cc:	e0bffd17 	ldw	r2,-12(fp)
 40110d0:	10800217 	ldw	r2,8(r2)
 40110d4:	100f883a 	mov	r7,r2
 40110d8:	e1bfff17 	ldw	r6,-4(fp)
 40110dc:	e17ffe17 	ldw	r5,-8(fp)
 40110e0:	1809883a 	mov	r4,r3
 40110e4:	40118800 	call	4011880 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40110e8:	e037883a 	mov	sp,fp
 40110ec:	dfc00117 	ldw	ra,4(sp)
 40110f0:	df000017 	ldw	fp,0(sp)
 40110f4:	dec00204 	addi	sp,sp,8
 40110f8:	f800283a 	ret

040110fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40110fc:	defffc04 	addi	sp,sp,-16
 4011100:	dfc00315 	stw	ra,12(sp)
 4011104:	df000215 	stw	fp,8(sp)
 4011108:	df000204 	addi	fp,sp,8
 401110c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011110:	e0bfff17 	ldw	r2,-4(fp)
 4011114:	10800017 	ldw	r2,0(r2)
 4011118:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401111c:	e0bffe17 	ldw	r2,-8(fp)
 4011120:	10c00a04 	addi	r3,r2,40
 4011124:	e0bfff17 	ldw	r2,-4(fp)
 4011128:	10800217 	ldw	r2,8(r2)
 401112c:	100b883a 	mov	r5,r2
 4011130:	1809883a 	mov	r4,r3
 4011134:	401150c0 	call	401150c <altera_avalon_jtag_uart_close>
}
 4011138:	e037883a 	mov	sp,fp
 401113c:	dfc00117 	ldw	ra,4(sp)
 4011140:	df000017 	ldw	fp,0(sp)
 4011144:	dec00204 	addi	sp,sp,8
 4011148:	f800283a 	ret

0401114c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401114c:	defffa04 	addi	sp,sp,-24
 4011150:	dfc00515 	stw	ra,20(sp)
 4011154:	df000415 	stw	fp,16(sp)
 4011158:	df000404 	addi	fp,sp,16
 401115c:	e13ffd15 	stw	r4,-12(fp)
 4011160:	e17ffe15 	stw	r5,-8(fp)
 4011164:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4011168:	e0bffd17 	ldw	r2,-12(fp)
 401116c:	10800017 	ldw	r2,0(r2)
 4011170:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4011174:	e0bffc17 	ldw	r2,-16(fp)
 4011178:	10800a04 	addi	r2,r2,40
 401117c:	e1bfff17 	ldw	r6,-4(fp)
 4011180:	e17ffe17 	ldw	r5,-8(fp)
 4011184:	1009883a 	mov	r4,r2
 4011188:	40115740 	call	4011574 <altera_avalon_jtag_uart_ioctl>
}
 401118c:	e037883a 	mov	sp,fp
 4011190:	dfc00117 	ldw	ra,4(sp)
 4011194:	df000017 	ldw	fp,0(sp)
 4011198:	dec00204 	addi	sp,sp,8
 401119c:	f800283a 	ret

040111a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40111a0:	defffa04 	addi	sp,sp,-24
 40111a4:	dfc00515 	stw	ra,20(sp)
 40111a8:	df000415 	stw	fp,16(sp)
 40111ac:	df000404 	addi	fp,sp,16
 40111b0:	e13ffd15 	stw	r4,-12(fp)
 40111b4:	e17ffe15 	stw	r5,-8(fp)
 40111b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40111bc:	e0bffd17 	ldw	r2,-12(fp)
 40111c0:	00c00044 	movi	r3,1
 40111c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40111c8:	e0bffd17 	ldw	r2,-12(fp)
 40111cc:	10800017 	ldw	r2,0(r2)
 40111d0:	10800104 	addi	r2,r2,4
 40111d4:	1007883a 	mov	r3,r2
 40111d8:	e0bffd17 	ldw	r2,-12(fp)
 40111dc:	10800817 	ldw	r2,32(r2)
 40111e0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40111e4:	e0bffe17 	ldw	r2,-8(fp)
 40111e8:	e0ffff17 	ldw	r3,-4(fp)
 40111ec:	d8000015 	stw	zero,0(sp)
 40111f0:	e1fffd17 	ldw	r7,-12(fp)
 40111f4:	01810074 	movhi	r6,1025
 40111f8:	31849804 	addi	r6,r6,4704
 40111fc:	180b883a 	mov	r5,r3
 4011200:	1009883a 	mov	r4,r2
 4011204:	400f6e00 	call	400f6e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4011208:	e0bffd17 	ldw	r2,-12(fp)
 401120c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4011210:	e0bffd17 	ldw	r2,-12(fp)
 4011214:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4011218:	d0ecc717 	ldw	r3,-19684(gp)
 401121c:	e1fffd17 	ldw	r7,-12(fp)
 4011220:	01810074 	movhi	r6,1025
 4011224:	31851b04 	addi	r6,r6,5228
 4011228:	180b883a 	mov	r5,r3
 401122c:	1009883a 	mov	r4,r2
 4011230:	400f3900 	call	400f390 <alt_alarm_start>
 4011234:	1000040e 	bge	r2,zero,4011248 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4011238:	e0fffd17 	ldw	r3,-12(fp)
 401123c:	00a00034 	movhi	r2,32768
 4011240:	10bfffc4 	addi	r2,r2,-1
 4011244:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4011248:	0001883a 	nop
 401124c:	e037883a 	mov	sp,fp
 4011250:	dfc00117 	ldw	ra,4(sp)
 4011254:	df000017 	ldw	fp,0(sp)
 4011258:	dec00204 	addi	sp,sp,8
 401125c:	f800283a 	ret

04011260 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4011260:	defff804 	addi	sp,sp,-32
 4011264:	df000715 	stw	fp,28(sp)
 4011268:	df000704 	addi	fp,sp,28
 401126c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4011270:	e0bfff17 	ldw	r2,-4(fp)
 4011274:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4011278:	e0bffb17 	ldw	r2,-20(fp)
 401127c:	10800017 	ldw	r2,0(r2)
 4011280:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011284:	e0bffc17 	ldw	r2,-16(fp)
 4011288:	10800104 	addi	r2,r2,4
 401128c:	10800037 	ldwio	r2,0(r2)
 4011290:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4011294:	e0bffd17 	ldw	r2,-12(fp)
 4011298:	1080c00c 	andi	r2,r2,768
 401129c:	10006d26 	beq	r2,zero,4011454 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40112a0:	e0bffd17 	ldw	r2,-12(fp)
 40112a4:	1080400c 	andi	r2,r2,256
 40112a8:	10003526 	beq	r2,zero,4011380 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40112ac:	00800074 	movhi	r2,1
 40112b0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40112b4:	e0bffb17 	ldw	r2,-20(fp)
 40112b8:	10800a17 	ldw	r2,40(r2)
 40112bc:	10800044 	addi	r2,r2,1
 40112c0:	1081ffcc 	andi	r2,r2,2047
 40112c4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40112c8:	e0bffb17 	ldw	r2,-20(fp)
 40112cc:	10c00b17 	ldw	r3,44(r2)
 40112d0:	e0bffe17 	ldw	r2,-8(fp)
 40112d4:	18801526 	beq	r3,r2,401132c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40112d8:	e0bffc17 	ldw	r2,-16(fp)
 40112dc:	10800037 	ldwio	r2,0(r2)
 40112e0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40112e4:	e0bff917 	ldw	r2,-28(fp)
 40112e8:	10a0000c 	andi	r2,r2,32768
 40112ec:	10001126 	beq	r2,zero,4011334 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40112f0:	e0bffb17 	ldw	r2,-20(fp)
 40112f4:	10800a17 	ldw	r2,40(r2)
 40112f8:	e0fff917 	ldw	r3,-28(fp)
 40112fc:	1809883a 	mov	r4,r3
 4011300:	e0fffb17 	ldw	r3,-20(fp)
 4011304:	1885883a 	add	r2,r3,r2
 4011308:	10800e04 	addi	r2,r2,56
 401130c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011310:	e0bffb17 	ldw	r2,-20(fp)
 4011314:	10800a17 	ldw	r2,40(r2)
 4011318:	10800044 	addi	r2,r2,1
 401131c:	10c1ffcc 	andi	r3,r2,2047
 4011320:	e0bffb17 	ldw	r2,-20(fp)
 4011324:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4011328:	003fe206 	br	40112b4 <__alt_data_end+0xfc0112b4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401132c:	0001883a 	nop
 4011330:	00000106 	br	4011338 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4011334:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4011338:	e0bff917 	ldw	r2,-28(fp)
 401133c:	10bfffec 	andhi	r2,r2,65535
 4011340:	10000f26 	beq	r2,zero,4011380 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4011344:	e0bffb17 	ldw	r2,-20(fp)
 4011348:	10c00817 	ldw	r3,32(r2)
 401134c:	00bfff84 	movi	r2,-2
 4011350:	1886703a 	and	r3,r3,r2
 4011354:	e0bffb17 	ldw	r2,-20(fp)
 4011358:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401135c:	e0bffc17 	ldw	r2,-16(fp)
 4011360:	10800104 	addi	r2,r2,4
 4011364:	1007883a 	mov	r3,r2
 4011368:	e0bffb17 	ldw	r2,-20(fp)
 401136c:	10800817 	ldw	r2,32(r2)
 4011370:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011374:	e0bffc17 	ldw	r2,-16(fp)
 4011378:	10800104 	addi	r2,r2,4
 401137c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4011380:	e0bffd17 	ldw	r2,-12(fp)
 4011384:	1080800c 	andi	r2,r2,512
 4011388:	103fbe26 	beq	r2,zero,4011284 <__alt_data_end+0xfc011284>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401138c:	e0bffd17 	ldw	r2,-12(fp)
 4011390:	1004d43a 	srli	r2,r2,16
 4011394:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4011398:	00001406 	br	40113ec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401139c:	e0bffc17 	ldw	r2,-16(fp)
 40113a0:	e0fffb17 	ldw	r3,-20(fp)
 40113a4:	18c00d17 	ldw	r3,52(r3)
 40113a8:	e13ffb17 	ldw	r4,-20(fp)
 40113ac:	20c7883a 	add	r3,r4,r3
 40113b0:	18c20e04 	addi	r3,r3,2104
 40113b4:	18c00003 	ldbu	r3,0(r3)
 40113b8:	18c03fcc 	andi	r3,r3,255
 40113bc:	18c0201c 	xori	r3,r3,128
 40113c0:	18ffe004 	addi	r3,r3,-128
 40113c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40113c8:	e0bffb17 	ldw	r2,-20(fp)
 40113cc:	10800d17 	ldw	r2,52(r2)
 40113d0:	10800044 	addi	r2,r2,1
 40113d4:	10c1ffcc 	andi	r3,r2,2047
 40113d8:	e0bffb17 	ldw	r2,-20(fp)
 40113dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40113e0:	e0bffa17 	ldw	r2,-24(fp)
 40113e4:	10bfffc4 	addi	r2,r2,-1
 40113e8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40113ec:	e0bffa17 	ldw	r2,-24(fp)
 40113f0:	10000526 	beq	r2,zero,4011408 <altera_avalon_jtag_uart_irq+0x1a8>
 40113f4:	e0bffb17 	ldw	r2,-20(fp)
 40113f8:	10c00d17 	ldw	r3,52(r2)
 40113fc:	e0bffb17 	ldw	r2,-20(fp)
 4011400:	10800c17 	ldw	r2,48(r2)
 4011404:	18bfe51e 	bne	r3,r2,401139c <__alt_data_end+0xfc01139c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4011408:	e0bffa17 	ldw	r2,-24(fp)
 401140c:	103f9d26 	beq	r2,zero,4011284 <__alt_data_end+0xfc011284>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4011410:	e0bffb17 	ldw	r2,-20(fp)
 4011414:	10c00817 	ldw	r3,32(r2)
 4011418:	00bfff44 	movi	r2,-3
 401141c:	1886703a 	and	r3,r3,r2
 4011420:	e0bffb17 	ldw	r2,-20(fp)
 4011424:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4011428:	e0bffb17 	ldw	r2,-20(fp)
 401142c:	10800017 	ldw	r2,0(r2)
 4011430:	10800104 	addi	r2,r2,4
 4011434:	1007883a 	mov	r3,r2
 4011438:	e0bffb17 	ldw	r2,-20(fp)
 401143c:	10800817 	ldw	r2,32(r2)
 4011440:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011444:	e0bffc17 	ldw	r2,-16(fp)
 4011448:	10800104 	addi	r2,r2,4
 401144c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4011450:	003f8c06 	br	4011284 <__alt_data_end+0xfc011284>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4011454:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4011458:	0001883a 	nop
 401145c:	e037883a 	mov	sp,fp
 4011460:	df000017 	ldw	fp,0(sp)
 4011464:	dec00104 	addi	sp,sp,4
 4011468:	f800283a 	ret

0401146c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401146c:	defff804 	addi	sp,sp,-32
 4011470:	df000715 	stw	fp,28(sp)
 4011474:	df000704 	addi	fp,sp,28
 4011478:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401147c:	e0bffb17 	ldw	r2,-20(fp)
 4011480:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4011484:	e0bff917 	ldw	r2,-28(fp)
 4011488:	10800017 	ldw	r2,0(r2)
 401148c:	10800104 	addi	r2,r2,4
 4011490:	10800037 	ldwio	r2,0(r2)
 4011494:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4011498:	e0bffa17 	ldw	r2,-24(fp)
 401149c:	1081000c 	andi	r2,r2,1024
 40114a0:	10000b26 	beq	r2,zero,40114d0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40114a4:	e0bff917 	ldw	r2,-28(fp)
 40114a8:	10800017 	ldw	r2,0(r2)
 40114ac:	10800104 	addi	r2,r2,4
 40114b0:	1007883a 	mov	r3,r2
 40114b4:	e0bff917 	ldw	r2,-28(fp)
 40114b8:	10800817 	ldw	r2,32(r2)
 40114bc:	10810014 	ori	r2,r2,1024
 40114c0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40114c4:	e0bff917 	ldw	r2,-28(fp)
 40114c8:	10000915 	stw	zero,36(r2)
 40114cc:	00000a06 	br	40114f8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40114d0:	e0bff917 	ldw	r2,-28(fp)
 40114d4:	10c00917 	ldw	r3,36(r2)
 40114d8:	00a00034 	movhi	r2,32768
 40114dc:	10bfff04 	addi	r2,r2,-4
 40114e0:	10c00536 	bltu	r2,r3,40114f8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40114e4:	e0bff917 	ldw	r2,-28(fp)
 40114e8:	10800917 	ldw	r2,36(r2)
 40114ec:	10c00044 	addi	r3,r2,1
 40114f0:	e0bff917 	ldw	r2,-28(fp)
 40114f4:	10c00915 	stw	r3,36(r2)
 40114f8:	d0acc717 	ldw	r2,-19684(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40114fc:	e037883a 	mov	sp,fp
 4011500:	df000017 	ldw	fp,0(sp)
 4011504:	dec00104 	addi	sp,sp,4
 4011508:	f800283a 	ret

0401150c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401150c:	defffd04 	addi	sp,sp,-12
 4011510:	df000215 	stw	fp,8(sp)
 4011514:	df000204 	addi	fp,sp,8
 4011518:	e13ffe15 	stw	r4,-8(fp)
 401151c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4011520:	00000506 	br	4011538 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4011524:	e0bfff17 	ldw	r2,-4(fp)
 4011528:	1090000c 	andi	r2,r2,16384
 401152c:	10000226 	beq	r2,zero,4011538 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4011530:	00bffd44 	movi	r2,-11
 4011534:	00000b06 	br	4011564 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4011538:	e0bffe17 	ldw	r2,-8(fp)
 401153c:	10c00d17 	ldw	r3,52(r2)
 4011540:	e0bffe17 	ldw	r2,-8(fp)
 4011544:	10800c17 	ldw	r2,48(r2)
 4011548:	18800526 	beq	r3,r2,4011560 <altera_avalon_jtag_uart_close+0x54>
 401154c:	e0bffe17 	ldw	r2,-8(fp)
 4011550:	10c00917 	ldw	r3,36(r2)
 4011554:	e0bffe17 	ldw	r2,-8(fp)
 4011558:	10800117 	ldw	r2,4(r2)
 401155c:	18bff136 	bltu	r3,r2,4011524 <__alt_data_end+0xfc011524>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4011560:	0005883a 	mov	r2,zero
}
 4011564:	e037883a 	mov	sp,fp
 4011568:	df000017 	ldw	fp,0(sp)
 401156c:	dec00104 	addi	sp,sp,4
 4011570:	f800283a 	ret

04011574 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4011574:	defffa04 	addi	sp,sp,-24
 4011578:	df000515 	stw	fp,20(sp)
 401157c:	df000504 	addi	fp,sp,20
 4011580:	e13ffd15 	stw	r4,-12(fp)
 4011584:	e17ffe15 	stw	r5,-8(fp)
 4011588:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401158c:	00bff9c4 	movi	r2,-25
 4011590:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4011594:	e0bffe17 	ldw	r2,-8(fp)
 4011598:	10da8060 	cmpeqi	r3,r2,27137
 401159c:	1800031e 	bne	r3,zero,40115ac <altera_avalon_jtag_uart_ioctl+0x38>
 40115a0:	109a80a0 	cmpeqi	r2,r2,27138
 40115a4:	1000181e 	bne	r2,zero,4011608 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40115a8:	00002906 	br	4011650 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40115ac:	e0bffd17 	ldw	r2,-12(fp)
 40115b0:	10c00117 	ldw	r3,4(r2)
 40115b4:	00a00034 	movhi	r2,32768
 40115b8:	10bfffc4 	addi	r2,r2,-1
 40115bc:	18802126 	beq	r3,r2,4011644 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40115c0:	e0bfff17 	ldw	r2,-4(fp)
 40115c4:	10800017 	ldw	r2,0(r2)
 40115c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40115cc:	e0bffc17 	ldw	r2,-16(fp)
 40115d0:	10800090 	cmplti	r2,r2,2
 40115d4:	1000061e 	bne	r2,zero,40115f0 <altera_avalon_jtag_uart_ioctl+0x7c>
 40115d8:	e0fffc17 	ldw	r3,-16(fp)
 40115dc:	00a00034 	movhi	r2,32768
 40115e0:	10bfffc4 	addi	r2,r2,-1
 40115e4:	18800226 	beq	r3,r2,40115f0 <altera_avalon_jtag_uart_ioctl+0x7c>
 40115e8:	e0bffc17 	ldw	r2,-16(fp)
 40115ec:	00000206 	br	40115f8 <altera_avalon_jtag_uart_ioctl+0x84>
 40115f0:	00a00034 	movhi	r2,32768
 40115f4:	10bfff84 	addi	r2,r2,-2
 40115f8:	e0fffd17 	ldw	r3,-12(fp)
 40115fc:	18800115 	stw	r2,4(r3)
      rc = 0;
 4011600:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4011604:	00000f06 	br	4011644 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4011608:	e0bffd17 	ldw	r2,-12(fp)
 401160c:	10c00117 	ldw	r3,4(r2)
 4011610:	00a00034 	movhi	r2,32768
 4011614:	10bfffc4 	addi	r2,r2,-1
 4011618:	18800c26 	beq	r3,r2,401164c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401161c:	e0bffd17 	ldw	r2,-12(fp)
 4011620:	10c00917 	ldw	r3,36(r2)
 4011624:	e0bffd17 	ldw	r2,-12(fp)
 4011628:	10800117 	ldw	r2,4(r2)
 401162c:	1885803a 	cmpltu	r2,r3,r2
 4011630:	10c03fcc 	andi	r3,r2,255
 4011634:	e0bfff17 	ldw	r2,-4(fp)
 4011638:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401163c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4011640:	00000206 	br	401164c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4011644:	0001883a 	nop
 4011648:	00000106 	br	4011650 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401164c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4011650:	e0bffb17 	ldw	r2,-20(fp)
}
 4011654:	e037883a 	mov	sp,fp
 4011658:	df000017 	ldw	fp,0(sp)
 401165c:	dec00104 	addi	sp,sp,4
 4011660:	f800283a 	ret

04011664 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4011664:	defff304 	addi	sp,sp,-52
 4011668:	dfc00c15 	stw	ra,48(sp)
 401166c:	df000b15 	stw	fp,44(sp)
 4011670:	df000b04 	addi	fp,sp,44
 4011674:	e13ffc15 	stw	r4,-16(fp)
 4011678:	e17ffd15 	stw	r5,-12(fp)
 401167c:	e1bffe15 	stw	r6,-8(fp)
 4011680:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4011684:	e0bffd17 	ldw	r2,-12(fp)
 4011688:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401168c:	00004706 	br	40117ac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4011690:	e0bffc17 	ldw	r2,-16(fp)
 4011694:	10800a17 	ldw	r2,40(r2)
 4011698:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401169c:	e0bffc17 	ldw	r2,-16(fp)
 40116a0:	10800b17 	ldw	r2,44(r2)
 40116a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40116a8:	e0fff717 	ldw	r3,-36(fp)
 40116ac:	e0bff817 	ldw	r2,-32(fp)
 40116b0:	18800536 	bltu	r3,r2,40116c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40116b4:	e0fff717 	ldw	r3,-36(fp)
 40116b8:	e0bff817 	ldw	r2,-32(fp)
 40116bc:	1885c83a 	sub	r2,r3,r2
 40116c0:	e0bff615 	stw	r2,-40(fp)
 40116c4:	00000406 	br	40116d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40116c8:	00c20004 	movi	r3,2048
 40116cc:	e0bff817 	ldw	r2,-32(fp)
 40116d0:	1885c83a 	sub	r2,r3,r2
 40116d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40116d8:	e0bff617 	ldw	r2,-40(fp)
 40116dc:	10001e26 	beq	r2,zero,4011758 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40116e0:	e0fffe17 	ldw	r3,-8(fp)
 40116e4:	e0bff617 	ldw	r2,-40(fp)
 40116e8:	1880022e 	bgeu	r3,r2,40116f4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40116ec:	e0bffe17 	ldw	r2,-8(fp)
 40116f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40116f4:	e0bffc17 	ldw	r2,-16(fp)
 40116f8:	10c00e04 	addi	r3,r2,56
 40116fc:	e0bff817 	ldw	r2,-32(fp)
 4011700:	1885883a 	add	r2,r3,r2
 4011704:	e1bff617 	ldw	r6,-40(fp)
 4011708:	100b883a 	mov	r5,r2
 401170c:	e13ff517 	ldw	r4,-44(fp)
 4011710:	40086f00 	call	40086f0 <memcpy>
      ptr   += n;
 4011714:	e0fff517 	ldw	r3,-44(fp)
 4011718:	e0bff617 	ldw	r2,-40(fp)
 401171c:	1885883a 	add	r2,r3,r2
 4011720:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4011724:	e0fffe17 	ldw	r3,-8(fp)
 4011728:	e0bff617 	ldw	r2,-40(fp)
 401172c:	1885c83a 	sub	r2,r3,r2
 4011730:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011734:	e0fff817 	ldw	r3,-32(fp)
 4011738:	e0bff617 	ldw	r2,-40(fp)
 401173c:	1885883a 	add	r2,r3,r2
 4011740:	10c1ffcc 	andi	r3,r2,2047
 4011744:	e0bffc17 	ldw	r2,-16(fp)
 4011748:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401174c:	e0bffe17 	ldw	r2,-8(fp)
 4011750:	00bfcf16 	blt	zero,r2,4011690 <__alt_data_end+0xfc011690>
 4011754:	00000106 	br	401175c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4011758:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401175c:	e0fff517 	ldw	r3,-44(fp)
 4011760:	e0bffd17 	ldw	r2,-12(fp)
 4011764:	1880141e 	bne	r3,r2,40117b8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4011768:	e0bfff17 	ldw	r2,-4(fp)
 401176c:	1090000c 	andi	r2,r2,16384
 4011770:	1000131e 	bne	r2,zero,40117c0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4011774:	0001883a 	nop
 4011778:	e0bffc17 	ldw	r2,-16(fp)
 401177c:	10c00a17 	ldw	r3,40(r2)
 4011780:	e0bff717 	ldw	r2,-36(fp)
 4011784:	1880051e 	bne	r3,r2,401179c <altera_avalon_jtag_uart_read+0x138>
 4011788:	e0bffc17 	ldw	r2,-16(fp)
 401178c:	10c00917 	ldw	r3,36(r2)
 4011790:	e0bffc17 	ldw	r2,-16(fp)
 4011794:	10800117 	ldw	r2,4(r2)
 4011798:	18bff736 	bltu	r3,r2,4011778 <__alt_data_end+0xfc011778>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401179c:	e0bffc17 	ldw	r2,-16(fp)
 40117a0:	10c00a17 	ldw	r3,40(r2)
 40117a4:	e0bff717 	ldw	r2,-36(fp)
 40117a8:	18800726 	beq	r3,r2,40117c8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40117ac:	e0bffe17 	ldw	r2,-8(fp)
 40117b0:	00bfb716 	blt	zero,r2,4011690 <__alt_data_end+0xfc011690>
 40117b4:	00000506 	br	40117cc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40117b8:	0001883a 	nop
 40117bc:	00000306 	br	40117cc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40117c0:	0001883a 	nop
 40117c4:	00000106 	br	40117cc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40117c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40117cc:	e0fff517 	ldw	r3,-44(fp)
 40117d0:	e0bffd17 	ldw	r2,-12(fp)
 40117d4:	18801826 	beq	r3,r2,4011838 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40117d8:	0005303a 	rdctl	r2,status
 40117dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40117e0:	e0fffb17 	ldw	r3,-20(fp)
 40117e4:	00bfff84 	movi	r2,-2
 40117e8:	1884703a 	and	r2,r3,r2
 40117ec:	1001703a 	wrctl	status,r2
  
  return context;
 40117f0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40117f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40117f8:	e0bffc17 	ldw	r2,-16(fp)
 40117fc:	10800817 	ldw	r2,32(r2)
 4011800:	10c00054 	ori	r3,r2,1
 4011804:	e0bffc17 	ldw	r2,-16(fp)
 4011808:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401180c:	e0bffc17 	ldw	r2,-16(fp)
 4011810:	10800017 	ldw	r2,0(r2)
 4011814:	10800104 	addi	r2,r2,4
 4011818:	1007883a 	mov	r3,r2
 401181c:	e0bffc17 	ldw	r2,-16(fp)
 4011820:	10800817 	ldw	r2,32(r2)
 4011824:	18800035 	stwio	r2,0(r3)
 4011828:	e0bffa17 	ldw	r2,-24(fp)
 401182c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011830:	e0bff917 	ldw	r2,-28(fp)
 4011834:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4011838:	e0fff517 	ldw	r3,-44(fp)
 401183c:	e0bffd17 	ldw	r2,-12(fp)
 4011840:	18800426 	beq	r3,r2,4011854 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4011844:	e0fff517 	ldw	r3,-44(fp)
 4011848:	e0bffd17 	ldw	r2,-12(fp)
 401184c:	1885c83a 	sub	r2,r3,r2
 4011850:	00000606 	br	401186c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4011854:	e0bfff17 	ldw	r2,-4(fp)
 4011858:	1090000c 	andi	r2,r2,16384
 401185c:	10000226 	beq	r2,zero,4011868 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4011860:	00bffd44 	movi	r2,-11
 4011864:	00000106 	br	401186c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4011868:	00bffec4 	movi	r2,-5
}
 401186c:	e037883a 	mov	sp,fp
 4011870:	dfc00117 	ldw	ra,4(sp)
 4011874:	df000017 	ldw	fp,0(sp)
 4011878:	dec00204 	addi	sp,sp,8
 401187c:	f800283a 	ret

04011880 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4011880:	defff304 	addi	sp,sp,-52
 4011884:	dfc00c15 	stw	ra,48(sp)
 4011888:	df000b15 	stw	fp,44(sp)
 401188c:	df000b04 	addi	fp,sp,44
 4011890:	e13ffc15 	stw	r4,-16(fp)
 4011894:	e17ffd15 	stw	r5,-12(fp)
 4011898:	e1bffe15 	stw	r6,-8(fp)
 401189c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40118a0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40118a4:	e0bffd17 	ldw	r2,-12(fp)
 40118a8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40118ac:	00003706 	br	401198c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40118b0:	e0bffc17 	ldw	r2,-16(fp)
 40118b4:	10800c17 	ldw	r2,48(r2)
 40118b8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40118bc:	e0bffc17 	ldw	r2,-16(fp)
 40118c0:	10800d17 	ldw	r2,52(r2)
 40118c4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40118c8:	e0fff917 	ldw	r3,-28(fp)
 40118cc:	e0bff517 	ldw	r2,-44(fp)
 40118d0:	1880062e 	bgeu	r3,r2,40118ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40118d4:	e0fff517 	ldw	r3,-44(fp)
 40118d8:	e0bff917 	ldw	r2,-28(fp)
 40118dc:	1885c83a 	sub	r2,r3,r2
 40118e0:	10bfffc4 	addi	r2,r2,-1
 40118e4:	e0bff615 	stw	r2,-40(fp)
 40118e8:	00000b06 	br	4011918 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40118ec:	e0bff517 	ldw	r2,-44(fp)
 40118f0:	10000526 	beq	r2,zero,4011908 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40118f4:	00c20004 	movi	r3,2048
 40118f8:	e0bff917 	ldw	r2,-28(fp)
 40118fc:	1885c83a 	sub	r2,r3,r2
 4011900:	e0bff615 	stw	r2,-40(fp)
 4011904:	00000406 	br	4011918 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4011908:	00c1ffc4 	movi	r3,2047
 401190c:	e0bff917 	ldw	r2,-28(fp)
 4011910:	1885c83a 	sub	r2,r3,r2
 4011914:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4011918:	e0bff617 	ldw	r2,-40(fp)
 401191c:	10001e26 	beq	r2,zero,4011998 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4011920:	e0fffe17 	ldw	r3,-8(fp)
 4011924:	e0bff617 	ldw	r2,-40(fp)
 4011928:	1880022e 	bgeu	r3,r2,4011934 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401192c:	e0bffe17 	ldw	r2,-8(fp)
 4011930:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4011934:	e0bffc17 	ldw	r2,-16(fp)
 4011938:	10c20e04 	addi	r3,r2,2104
 401193c:	e0bff917 	ldw	r2,-28(fp)
 4011940:	1885883a 	add	r2,r3,r2
 4011944:	e1bff617 	ldw	r6,-40(fp)
 4011948:	e17ffd17 	ldw	r5,-12(fp)
 401194c:	1009883a 	mov	r4,r2
 4011950:	40086f00 	call	40086f0 <memcpy>
      ptr   += n;
 4011954:	e0fffd17 	ldw	r3,-12(fp)
 4011958:	e0bff617 	ldw	r2,-40(fp)
 401195c:	1885883a 	add	r2,r3,r2
 4011960:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4011964:	e0fffe17 	ldw	r3,-8(fp)
 4011968:	e0bff617 	ldw	r2,-40(fp)
 401196c:	1885c83a 	sub	r2,r3,r2
 4011970:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011974:	e0fff917 	ldw	r3,-28(fp)
 4011978:	e0bff617 	ldw	r2,-40(fp)
 401197c:	1885883a 	add	r2,r3,r2
 4011980:	10c1ffcc 	andi	r3,r2,2047
 4011984:	e0bffc17 	ldw	r2,-16(fp)
 4011988:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401198c:	e0bffe17 	ldw	r2,-8(fp)
 4011990:	00bfc716 	blt	zero,r2,40118b0 <__alt_data_end+0xfc0118b0>
 4011994:	00000106 	br	401199c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4011998:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401199c:	0005303a 	rdctl	r2,status
 40119a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40119a4:	e0fffb17 	ldw	r3,-20(fp)
 40119a8:	00bfff84 	movi	r2,-2
 40119ac:	1884703a 	and	r2,r3,r2
 40119b0:	1001703a 	wrctl	status,r2
  
  return context;
 40119b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40119b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40119bc:	e0bffc17 	ldw	r2,-16(fp)
 40119c0:	10800817 	ldw	r2,32(r2)
 40119c4:	10c00094 	ori	r3,r2,2
 40119c8:	e0bffc17 	ldw	r2,-16(fp)
 40119cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40119d0:	e0bffc17 	ldw	r2,-16(fp)
 40119d4:	10800017 	ldw	r2,0(r2)
 40119d8:	10800104 	addi	r2,r2,4
 40119dc:	1007883a 	mov	r3,r2
 40119e0:	e0bffc17 	ldw	r2,-16(fp)
 40119e4:	10800817 	ldw	r2,32(r2)
 40119e8:	18800035 	stwio	r2,0(r3)
 40119ec:	e0bffa17 	ldw	r2,-24(fp)
 40119f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40119f4:	e0bff817 	ldw	r2,-32(fp)
 40119f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40119fc:	e0bffe17 	ldw	r2,-8(fp)
 4011a00:	0080100e 	bge	zero,r2,4011a44 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4011a04:	e0bfff17 	ldw	r2,-4(fp)
 4011a08:	1090000c 	andi	r2,r2,16384
 4011a0c:	1000101e 	bne	r2,zero,4011a50 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4011a10:	0001883a 	nop
 4011a14:	e0bffc17 	ldw	r2,-16(fp)
 4011a18:	10c00d17 	ldw	r3,52(r2)
 4011a1c:	e0bff517 	ldw	r2,-44(fp)
 4011a20:	1880051e 	bne	r3,r2,4011a38 <altera_avalon_jtag_uart_write+0x1b8>
 4011a24:	e0bffc17 	ldw	r2,-16(fp)
 4011a28:	10c00917 	ldw	r3,36(r2)
 4011a2c:	e0bffc17 	ldw	r2,-16(fp)
 4011a30:	10800117 	ldw	r2,4(r2)
 4011a34:	18bff736 	bltu	r3,r2,4011a14 <__alt_data_end+0xfc011a14>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4011a38:	e0bffc17 	ldw	r2,-16(fp)
 4011a3c:	10800917 	ldw	r2,36(r2)
 4011a40:	1000051e 	bne	r2,zero,4011a58 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4011a44:	e0bffe17 	ldw	r2,-8(fp)
 4011a48:	00bfd016 	blt	zero,r2,401198c <__alt_data_end+0xfc01198c>
 4011a4c:	00000306 	br	4011a5c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4011a50:	0001883a 	nop
 4011a54:	00000106 	br	4011a5c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4011a58:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4011a5c:	e0fffd17 	ldw	r3,-12(fp)
 4011a60:	e0bff717 	ldw	r2,-36(fp)
 4011a64:	18800426 	beq	r3,r2,4011a78 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4011a68:	e0fffd17 	ldw	r3,-12(fp)
 4011a6c:	e0bff717 	ldw	r2,-36(fp)
 4011a70:	1885c83a 	sub	r2,r3,r2
 4011a74:	00000606 	br	4011a90 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4011a78:	e0bfff17 	ldw	r2,-4(fp)
 4011a7c:	1090000c 	andi	r2,r2,16384
 4011a80:	10000226 	beq	r2,zero,4011a8c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4011a84:	00bffd44 	movi	r2,-11
 4011a88:	00000106 	br	4011a90 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4011a8c:	00bffec4 	movi	r2,-5
}
 4011a90:	e037883a 	mov	sp,fp
 4011a94:	dfc00117 	ldw	ra,4(sp)
 4011a98:	df000017 	ldw	fp,0(sp)
 4011a9c:	dec00204 	addi	sp,sp,8
 4011aa0:	f800283a 	ret

04011aa4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4011aa4:	defff404 	addi	sp,sp,-48
 4011aa8:	df000b15 	stw	fp,44(sp)
 4011aac:	df000b04 	addi	fp,sp,44
 4011ab0:	e13ffc15 	stw	r4,-16(fp)
 4011ab4:	e17ffd15 	stw	r5,-12(fp)
 4011ab8:	e1bffe15 	stw	r6,-8(fp)
 4011abc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4011ac0:	e0ffff17 	ldw	r3,-4(fp)
 4011ac4:	e0bffe17 	ldw	r2,-8(fp)
 4011ac8:	1885883a 	add	r2,r3,r2
 4011acc:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4011ad0:	e0c00217 	ldw	r3,8(fp)
 4011ad4:	e0800117 	ldw	r2,4(fp)
 4011ad8:	1885883a 	add	r2,r3,r2
 4011adc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4011ae0:	e0800117 	ldw	r2,4(fp)
 4011ae4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4011ae8:	e0bffe17 	ldw	r2,-8(fp)
 4011aec:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4011af0:	00800044 	movi	r2,1
 4011af4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4011af8:	e0bffc17 	ldw	r2,-16(fp)
 4011afc:	10800504 	addi	r2,r2,20
 4011b00:	1009883a 	mov	r4,r2
 4011b04:	00c00044 	movi	r3,1
 4011b08:	e0bffd17 	ldw	r2,-12(fp)
 4011b0c:	1884983a 	sll	r2,r3,r2
 4011b10:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4011b14:	e0800317 	ldw	r2,12(fp)
 4011b18:	1080008c 	andi	r2,r2,2
 4011b1c:	1000051e 	bne	r2,zero,4011b34 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4011b20:	e0bffc17 	ldw	r2,-16(fp)
 4011b24:	10800304 	addi	r2,r2,12
 4011b28:	1007883a 	mov	r3,r2
 4011b2c:	00810004 	movi	r2,1024
 4011b30:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4011b34:	e0bffc17 	ldw	r2,-16(fp)
 4011b38:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011b3c:	e0bffc17 	ldw	r2,-16(fp)
 4011b40:	10800204 	addi	r2,r2,8
 4011b44:	10800037 	ldwio	r2,0(r2)
 4011b48:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011b4c:	e0bffa17 	ldw	r2,-24(fp)
 4011b50:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4011b54:	10000226 	beq	r2,zero,4011b60 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011b58:	e0bff717 	ldw	r2,-36(fp)
 4011b5c:	1000031e 	bne	r2,zero,4011b6c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4011b60:	e0bffa17 	ldw	r2,-24(fp)
 4011b64:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011b68:	103ff426 	beq	r2,zero,4011b3c <__alt_data_end+0xfc011b3c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4011b6c:	e0bffa17 	ldw	r2,-24(fp)
 4011b70:	1080100c 	andi	r2,r2,64
 4011b74:	10001e26 	beq	r2,zero,4011bf0 <alt_avalon_spi_command+0x14c>
 4011b78:	e0bff717 	ldw	r2,-36(fp)
 4011b7c:	00801c0e 	bge	zero,r2,4011bf0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4011b80:	e0bff717 	ldw	r2,-36(fp)
 4011b84:	10bfffc4 	addi	r2,r2,-1
 4011b88:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4011b8c:	e0ffff17 	ldw	r3,-4(fp)
 4011b90:	e0bff817 	ldw	r2,-32(fp)
 4011b94:	18800a2e 	bgeu	r3,r2,4011bc0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4011b98:	e0bffc17 	ldw	r2,-16(fp)
 4011b9c:	10800104 	addi	r2,r2,4
 4011ba0:	1009883a 	mov	r4,r2
 4011ba4:	e0bfff17 	ldw	r2,-4(fp)
 4011ba8:	10c00044 	addi	r3,r2,1
 4011bac:	e0ffff15 	stw	r3,-4(fp)
 4011bb0:	10800003 	ldbu	r2,0(r2)
 4011bb4:	10803fcc 	andi	r2,r2,255
 4011bb8:	20800035 	stwio	r2,0(r4)
 4011bbc:	00000c06 	br	4011bf0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4011bc0:	e0bff517 	ldw	r2,-44(fp)
 4011bc4:	10000826 	beq	r2,zero,4011be8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4011bc8:	e0bff517 	ldw	r2,-44(fp)
 4011bcc:	10bfffc4 	addi	r2,r2,-1
 4011bd0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4011bd4:	e0bffc17 	ldw	r2,-16(fp)
 4011bd8:	10800104 	addi	r2,r2,4
 4011bdc:	0007883a 	mov	r3,zero
 4011be0:	10c00035 	stwio	r3,0(r2)
 4011be4:	00000206 	br	4011bf0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4011be8:	00bf0004 	movi	r2,-1024
 4011bec:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4011bf0:	e0bffa17 	ldw	r2,-24(fp)
 4011bf4:	1080200c 	andi	r2,r2,128
 4011bf8:	103fd026 	beq	r2,zero,4011b3c <__alt_data_end+0xfc011b3c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4011bfc:	e0bffc17 	ldw	r2,-16(fp)
 4011c00:	10800037 	ldwio	r2,0(r2)
 4011c04:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4011c08:	e0bff617 	ldw	r2,-40(fp)
 4011c0c:	10000426 	beq	r2,zero,4011c20 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4011c10:	e0bff617 	ldw	r2,-40(fp)
 4011c14:	10bfffc4 	addi	r2,r2,-1
 4011c18:	e0bff615 	stw	r2,-40(fp)
 4011c1c:	00000506 	br	4011c34 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4011c20:	e0800217 	ldw	r2,8(fp)
 4011c24:	10c00044 	addi	r3,r2,1
 4011c28:	e0c00215 	stw	r3,8(fp)
 4011c2c:	e0fffb17 	ldw	r3,-20(fp)
 4011c30:	10c00005 	stb	r3,0(r2)
      credits++;
 4011c34:	e0bff717 	ldw	r2,-36(fp)
 4011c38:	10800044 	addi	r2,r2,1
 4011c3c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4011c40:	e0bff617 	ldw	r2,-40(fp)
 4011c44:	103fbd1e 	bne	r2,zero,4011b3c <__alt_data_end+0xfc011b3c>
 4011c48:	e0c00217 	ldw	r3,8(fp)
 4011c4c:	e0bff917 	ldw	r2,-28(fp)
 4011c50:	18bfba1e 	bne	r3,r2,4011b3c <__alt_data_end+0xfc011b3c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011c54:	e0bffc17 	ldw	r2,-16(fp)
 4011c58:	10800204 	addi	r2,r2,8
 4011c5c:	10800037 	ldwio	r2,0(r2)
 4011c60:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4011c64:	e0bffa17 	ldw	r2,-24(fp)
 4011c68:	1080080c 	andi	r2,r2,32
 4011c6c:	103ff926 	beq	r2,zero,4011c54 <__alt_data_end+0xfc011c54>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4011c70:	e0800317 	ldw	r2,12(fp)
 4011c74:	1080004c 	andi	r2,r2,1
 4011c78:	1000041e 	bne	r2,zero,4011c8c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4011c7c:	e0bffc17 	ldw	r2,-16(fp)
 4011c80:	10800304 	addi	r2,r2,12
 4011c84:	0007883a 	mov	r3,zero
 4011c88:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4011c8c:	e0800117 	ldw	r2,4(fp)
}
 4011c90:	e037883a 	mov	sp,fp
 4011c94:	df000017 	ldw	fp,0(sp)
 4011c98:	dec00104 	addi	sp,sp,4
 4011c9c:	f800283a 	ret

04011ca0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4011ca0:	defffa04 	addi	sp,sp,-24
 4011ca4:	dfc00515 	stw	ra,20(sp)
 4011ca8:	df000415 	stw	fp,16(sp)
 4011cac:	df000404 	addi	fp,sp,16
 4011cb0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4011cb4:	0007883a 	mov	r3,zero
 4011cb8:	e0bfff17 	ldw	r2,-4(fp)
 4011cbc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4011cc0:	e0bfff17 	ldw	r2,-4(fp)
 4011cc4:	10800104 	addi	r2,r2,4
 4011cc8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ccc:	0005303a 	rdctl	r2,status
 4011cd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011cd4:	e0fffd17 	ldw	r3,-12(fp)
 4011cd8:	00bfff84 	movi	r2,-2
 4011cdc:	1884703a 	and	r2,r3,r2
 4011ce0:	1001703a 	wrctl	status,r2
  
  return context;
 4011ce4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4011ce8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4011cec:	40100080 	call	4010008 <alt_tick>
 4011cf0:	e0bffc17 	ldw	r2,-16(fp)
 4011cf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011cf8:	e0bffe17 	ldw	r2,-8(fp)
 4011cfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4011d00:	0001883a 	nop
 4011d04:	e037883a 	mov	sp,fp
 4011d08:	dfc00117 	ldw	ra,4(sp)
 4011d0c:	df000017 	ldw	fp,0(sp)
 4011d10:	dec00204 	addi	sp,sp,8
 4011d14:	f800283a 	ret

04011d18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4011d18:	defff804 	addi	sp,sp,-32
 4011d1c:	dfc00715 	stw	ra,28(sp)
 4011d20:	df000615 	stw	fp,24(sp)
 4011d24:	df000604 	addi	fp,sp,24
 4011d28:	e13ffc15 	stw	r4,-16(fp)
 4011d2c:	e17ffd15 	stw	r5,-12(fp)
 4011d30:	e1bffe15 	stw	r6,-8(fp)
 4011d34:	e1ffff15 	stw	r7,-4(fp)
 4011d38:	e0bfff17 	ldw	r2,-4(fp)
 4011d3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4011d40:	d0acc717 	ldw	r2,-19684(gp)
 4011d44:	1000021e 	bne	r2,zero,4011d50 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4011d48:	e0bffb17 	ldw	r2,-20(fp)
 4011d4c:	d0acc715 	stw	r2,-19684(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4011d50:	e0bffc17 	ldw	r2,-16(fp)
 4011d54:	10800104 	addi	r2,r2,4
 4011d58:	00c001c4 	movi	r3,7
 4011d5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4011d60:	d8000015 	stw	zero,0(sp)
 4011d64:	e1fffc17 	ldw	r7,-16(fp)
 4011d68:	01810074 	movhi	r6,1025
 4011d6c:	31872804 	addi	r6,r6,7328
 4011d70:	e17ffe17 	ldw	r5,-8(fp)
 4011d74:	e13ffd17 	ldw	r4,-12(fp)
 4011d78:	400f6e00 	call	400f6e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4011d7c:	0001883a 	nop
 4011d80:	e037883a 	mov	sp,fp
 4011d84:	dfc00117 	ldw	ra,4(sp)
 4011d88:	df000017 	ldw	fp,0(sp)
 4011d8c:	dec00204 	addi	sp,sp,8
 4011d90:	f800283a 	ret

04011d94 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 4011d94:	defffc04 	addi	sp,sp,-16
 4011d98:	dfc00315 	stw	ra,12(sp)
 4011d9c:	df000215 	stw	fp,8(sp)
 4011da0:	df000204 	addi	fp,sp,8
 4011da4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 4011da8:	d1600904 	addi	r5,gp,-32732
 4011dac:	e13fff17 	ldw	r4,-4(fp)
 4011db0:	40127d00 	call	40127d0 <alt_find_dev>
 4011db4:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 4011db8:	e0bffe17 	ldw	r2,-8(fp)
 4011dbc:	10800a17 	ldw	r2,40(r2)
 4011dc0:	10800104 	addi	r2,r2,4
 4011dc4:	10800037 	ldwio	r2,0(r2)
 4011dc8:	10803fec 	andhi	r2,r2,255
 4011dcc:	1005d43a 	srai	r2,r2,16
 4011dd0:	1007883a 	mov	r3,r2
 4011dd4:	e0bffe17 	ldw	r2,-8(fp)
 4011dd8:	10c00b15 	stw	r3,44(r2)

  return dev;
 4011ddc:	e0bffe17 	ldw	r2,-8(fp)
}
 4011de0:	e037883a 	mov	sp,fp
 4011de4:	dfc00117 	ldw	ra,4(sp)
 4011de8:	df000017 	ldw	fp,0(sp)
 4011dec:	dec00204 	addi	sp,sp,8
 4011df0:	f800283a 	ret

04011df4 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4011df4:	defffc04 	addi	sp,sp,-16
 4011df8:	df000315 	stw	fp,12(sp)
 4011dfc:	df000304 	addi	fp,sp,12
 4011e00:	e13ffd15 	stw	r4,-12(fp)
 4011e04:	e17ffe15 	stw	r5,-8(fp)
 4011e08:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 4011e0c:	e0bffd17 	ldw	r2,-12(fp)
 4011e10:	10800a17 	ldw	r2,40(r2)
 4011e14:	10800204 	addi	r2,r2,8
 4011e18:	1007883a 	mov	r3,r2
 4011e1c:	e0bffe17 	ldw	r2,-8(fp)
 4011e20:	10803fcc 	andi	r2,r2,255
 4011e24:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 4011e28:	e0bffd17 	ldw	r2,-12(fp)
 4011e2c:	10800a17 	ldw	r2,40(r2)
 4011e30:	10800304 	addi	r2,r2,12
 4011e34:	1007883a 	mov	r3,r2
 4011e38:	e0bfff17 	ldw	r2,-4(fp)
 4011e3c:	10bfffcc 	andi	r2,r2,65535
 4011e40:	18800035 	stwio	r2,0(r3)

	return 0;
 4011e44:	0005883a 	mov	r2,zero
}
 4011e48:	e037883a 	mov	sp,fp
 4011e4c:	df000017 	ldw	fp,0(sp)
 4011e50:	dec00104 	addi	sp,sp,4
 4011e54:	f800283a 	ret

04011e58 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 4011e58:	defffb04 	addi	sp,sp,-20
 4011e5c:	dfc00415 	stw	ra,16(sp)
 4011e60:	df000315 	stw	fp,12(sp)
 4011e64:	df000304 	addi	fp,sp,12
 4011e68:	e13ffd15 	stw	r4,-12(fp)
 4011e6c:	e17ffe15 	stw	r5,-8(fp)
 4011e70:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 4011e74:	e0bffd17 	ldw	r2,-12(fp)
 4011e78:	10800a17 	ldw	r2,40(r2)
 4011e7c:	10800204 	addi	r2,r2,8
 4011e80:	1007883a 	mov	r3,r2
 4011e84:	e0bffe17 	ldw	r2,-8(fp)
 4011e88:	10803fcc 	andi	r2,r2,255
 4011e8c:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 4011e90:	e0bffd17 	ldw	r2,-12(fp)
 4011e94:	10800a17 	ldw	r2,40(r2)
 4011e98:	10800304 	addi	r2,r2,12
 4011e9c:	10800037 	ldwio	r2,0(r2)
 4011ea0:	1007883a 	mov	r3,r2
 4011ea4:	e0bfff17 	ldw	r2,-4(fp)
 4011ea8:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 4011eac:	e13ffd17 	ldw	r4,-12(fp)
 4011eb0:	4011f7c0 	call	4011f7c <alt_up_av_config_read_acknowledge>
 4011eb4:	10000226 	beq	r2,zero,4011ec0 <alt_up_av_config_read_data+0x68>
		return -1;
 4011eb8:	00bfffc4 	movi	r2,-1
 4011ebc:	00000106 	br	4011ec4 <alt_up_av_config_read_data+0x6c>

	return 0;
 4011ec0:	0005883a 	mov	r2,zero
}
 4011ec4:	e037883a 	mov	sp,fp
 4011ec8:	dfc00117 	ldw	ra,4(sp)
 4011ecc:	df000017 	ldw	fp,0(sp)
 4011ed0:	dec00204 	addi	sp,sp,8
 4011ed4:	f800283a 	ret

04011ed8 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 4011ed8:	defffe04 	addi	sp,sp,-8
 4011edc:	df000115 	stw	fp,4(sp)
 4011ee0:	df000104 	addi	fp,sp,4
 4011ee4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 4011ee8:	e0bfff17 	ldw	r2,-4(fp)
 4011eec:	10800a17 	ldw	r2,40(r2)
 4011ef0:	1007883a 	mov	r3,r2
 4011ef4:	00800044 	movi	r2,1
 4011ef8:	18800025 	stbio	r2,0(r3)
	return 0;
 4011efc:	0005883a 	mov	r2,zero
}
 4011f00:	e037883a 	mov	sp,fp
 4011f04:	df000017 	ldw	fp,0(sp)
 4011f08:	dec00104 	addi	sp,sp,4
 4011f0c:	f800283a 	ret

04011f10 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 4011f10:	defffe04 	addi	sp,sp,-8
 4011f14:	df000115 	stw	fp,4(sp)
 4011f18:	df000104 	addi	fp,sp,4
 4011f1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 4011f20:	e0bfff17 	ldw	r2,-4(fp)
 4011f24:	10800a17 	ldw	r2,40(r2)
 4011f28:	1007883a 	mov	r3,r2
 4011f2c:	00800084 	movi	r2,2
 4011f30:	18800025 	stbio	r2,0(r3)
	return 0;
 4011f34:	0005883a 	mov	r2,zero
}
 4011f38:	e037883a 	mov	sp,fp
 4011f3c:	df000017 	ldw	fp,0(sp)
 4011f40:	dec00104 	addi	sp,sp,4
 4011f44:	f800283a 	ret

04011f48 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 4011f48:	defffe04 	addi	sp,sp,-8
 4011f4c:	df000115 	stw	fp,4(sp)
 4011f50:	df000104 	addi	fp,sp,4
 4011f54:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 4011f58:	e0bfff17 	ldw	r2,-4(fp)
 4011f5c:	10800a17 	ldw	r2,40(r2)
 4011f60:	0007883a 	mov	r3,zero
 4011f64:	10c00025 	stbio	r3,0(r2)
	return 0;
 4011f68:	0005883a 	mov	r2,zero
}
 4011f6c:	e037883a 	mov	sp,fp
 4011f70:	df000017 	ldw	fp,0(sp)
 4011f74:	dec00104 	addi	sp,sp,4
 4011f78:	f800283a 	ret

04011f7c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 4011f7c:	defffe04 	addi	sp,sp,-8
 4011f80:	df000115 	stw	fp,4(sp)
 4011f84:	df000104 	addi	fp,sp,4
 4011f88:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 4011f8c:	e0bfff17 	ldw	r2,-4(fp)
 4011f90:	10800a17 	ldw	r2,40(r2)
 4011f94:	10800104 	addi	r2,r2,4
 4011f98:	10800037 	ldwio	r2,0(r2)
 4011f9c:	1080008c 	andi	r2,r2,2
 4011fa0:	1005d07a 	srai	r2,r2,1
 4011fa4:	10000626 	beq	r2,zero,4011fc0 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 4011fa8:	e0bfff17 	ldw	r2,-4(fp)
 4011fac:	10800a17 	ldw	r2,40(r2)
 4011fb0:	10800104 	addi	r2,r2,4
 4011fb4:	10800037 	ldwio	r2,0(r2)
 4011fb8:	1080004c 	andi	r2,r2,1
 4011fbc:	00000106 	br	4011fc4 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 4011fc0:	00bfffc4 	movi	r2,-1
}
 4011fc4:	e037883a 	mov	sp,fp
 4011fc8:	df000017 	ldw	fp,0(sp)
 4011fcc:	dec00104 	addi	sp,sp,4
 4011fd0:	f800283a 	ret

04011fd4 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 4011fd4:	defffe04 	addi	sp,sp,-8
 4011fd8:	df000115 	stw	fp,4(sp)
 4011fdc:	df000104 	addi	fp,sp,4
 4011fe0:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 4011fe4:	e0bfff17 	ldw	r2,-4(fp)
 4011fe8:	10800a17 	ldw	r2,40(r2)
 4011fec:	10800104 	addi	r2,r2,4
 4011ff0:	10800037 	ldwio	r2,0(r2)
 4011ff4:	1080008c 	andi	r2,r2,2
 4011ff8:	1005d07a 	srai	r2,r2,1
}
 4011ffc:	e037883a 	mov	sp,fp
 4012000:	df000017 	ldw	fp,0(sp)
 4012004:	dec00104 	addi	sp,sp,4
 4012008:	f800283a 	ret

0401200c <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 401200c:	defffa04 	addi	sp,sp,-24
 4012010:	dfc00515 	stw	ra,20(sp)
 4012014:	df000415 	stw	fp,16(sp)
 4012018:	df000404 	addi	fp,sp,16
 401201c:	e13ffd15 	stw	r4,-12(fp)
 4012020:	e17ffe15 	stw	r5,-8(fp)
 4012024:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4012028:	e0bffd17 	ldw	r2,-12(fp)
 401202c:	10800b17 	ldw	r2,44(r2)
 4012030:	10800060 	cmpeqi	r2,r2,1
 4012034:	10000e1e 	bne	r2,zero,4012070 <alt_up_av_config_write_audio_cfg_register+0x64>
 4012038:	e0bffd17 	ldw	r2,-12(fp)
 401203c:	10800b17 	ldw	r2,44(r2)
 4012040:	108000a0 	cmpeqi	r2,r2,2
 4012044:	10000a1e 	bne	r2,zero,4012070 <alt_up_av_config_write_audio_cfg_register+0x64>
 4012048:	e0bffd17 	ldw	r2,-12(fp)
 401204c:	10800b17 	ldw	r2,44(r2)
 4012050:	108000e0 	cmpeqi	r2,r2,3
 4012054:	1000061e 	bne	r2,zero,4012070 <alt_up_av_config_write_audio_cfg_register+0x64>
 4012058:	e0bffd17 	ldw	r2,-12(fp)
 401205c:	10800b17 	ldw	r2,44(r2)
 4012060:	10800120 	cmpeqi	r2,r2,4
 4012064:	1000021e 	bne	r2,zero,4012070 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 4012068:	00bffa84 	movi	r2,-22
 401206c:	00000b06 	br	401209c <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 4012070:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 4012074:	e0bffd17 	ldw	r2,-12(fp)
 4012078:	10800a17 	ldw	r2,40(r2)
 401207c:	10800084 	addi	r2,r2,2
 4012080:	1007883a 	mov	r3,r2
 4012084:	e0bffc17 	ldw	r2,-16(fp)
 4012088:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 401208c:	e1bfff17 	ldw	r6,-4(fp)
 4012090:	e17ffe17 	ldw	r5,-8(fp)
 4012094:	e13ffd17 	ldw	r4,-12(fp)
 4012098:	4011df40 	call	4011df4 <alt_up_av_config_write_data>
}
 401209c:	e037883a 	mov	sp,fp
 40120a0:	dfc00117 	ldw	ra,4(sp)
 40120a4:	df000017 	ldw	fp,0(sp)
 40120a8:	dec00204 	addi	sp,sp,8
 40120ac:	f800283a 	ret

040120b0 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 40120b0:	defffa04 	addi	sp,sp,-24
 40120b4:	dfc00515 	stw	ra,20(sp)
 40120b8:	df000415 	stw	fp,16(sp)
 40120bc:	df000404 	addi	fp,sp,16
 40120c0:	e13ffc15 	stw	r4,-16(fp)
 40120c4:	e17ffd15 	stw	r5,-12(fp)
 40120c8:	e1bffe15 	stw	r6,-8(fp)
 40120cc:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 40120d0:	e0bffc17 	ldw	r2,-16(fp)
 40120d4:	10800b17 	ldw	r2,44(r2)
 40120d8:	108000a0 	cmpeqi	r2,r2,2
 40120dc:	10000a1e 	bne	r2,zero,4012108 <alt_up_av_config_read_video_cfg_register+0x58>
 40120e0:	e0bffc17 	ldw	r2,-16(fp)
 40120e4:	10800b17 	ldw	r2,44(r2)
 40120e8:	108000e0 	cmpeqi	r2,r2,3
 40120ec:	1000061e 	bne	r2,zero,4012108 <alt_up_av_config_read_video_cfg_register+0x58>
 40120f0:	e0bffc17 	ldw	r2,-16(fp)
 40120f4:	10800b17 	ldw	r2,44(r2)
 40120f8:	10800120 	cmpeqi	r2,r2,4
 40120fc:	1000021e 	bne	r2,zero,4012108 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 4012100:	00bffa84 	movi	r2,-22
 4012104:	00001f06 	br	4012184 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 4012108:	e0bffc17 	ldw	r2,-16(fp)
 401210c:	10800b17 	ldw	r2,44(r2)
 4012110:	108000a0 	cmpeqi	r2,r2,2
 4012114:	1000041e 	bne	r2,zero,4012128 <alt_up_av_config_read_video_cfg_register+0x78>
 4012118:	e0bffc17 	ldw	r2,-16(fp)
 401211c:	10800b17 	ldw	r2,44(r2)
 4012120:	10800118 	cmpnei	r2,r2,4
 4012124:	1000051e 	bne	r2,zero,401213c <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 4012128:	e0bfff17 	ldw	r2,-4(fp)
 401212c:	10800060 	cmpeqi	r2,r2,1
 4012130:	10000a1e 	bne	r2,zero,401215c <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 4012134:	00bffa84 	movi	r2,-22
 4012138:	00001206 	br	4012184 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 401213c:	e0bfff17 	ldw	r2,-4(fp)
 4012140:	10800060 	cmpeqi	r2,r2,1
 4012144:	1000051e 	bne	r2,zero,401215c <alt_up_av_config_read_video_cfg_register+0xac>
 4012148:	e0bfff17 	ldw	r2,-4(fp)
 401214c:	108000a0 	cmpeqi	r2,r2,2
 4012150:	1000021e 	bne	r2,zero,401215c <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 4012154:	00bffa84 	movi	r2,-22
 4012158:	00000a06 	br	4012184 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 401215c:	e0bffc17 	ldw	r2,-16(fp)
 4012160:	10800a17 	ldw	r2,40(r2)
 4012164:	10800084 	addi	r2,r2,2
 4012168:	1007883a 	mov	r3,r2
 401216c:	e0bfff17 	ldw	r2,-4(fp)
 4012170:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 4012174:	e1bffe17 	ldw	r6,-8(fp)
 4012178:	e17ffd17 	ldw	r5,-12(fp)
 401217c:	e13ffc17 	ldw	r4,-16(fp)
 4012180:	4011e580 	call	4011e58 <alt_up_av_config_read_data>
}
 4012184:	e037883a 	mov	sp,fp
 4012188:	dfc00117 	ldw	ra,4(sp)
 401218c:	df000017 	ldw	fp,0(sp)
 4012190:	dec00204 	addi	sp,sp,8
 4012194:	f800283a 	ret

04012198 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 4012198:	defffa04 	addi	sp,sp,-24
 401219c:	dfc00515 	stw	ra,20(sp)
 40121a0:	df000415 	stw	fp,16(sp)
 40121a4:	df000404 	addi	fp,sp,16
 40121a8:	e13ffc15 	stw	r4,-16(fp)
 40121ac:	e17ffd15 	stw	r5,-12(fp)
 40121b0:	e1bffe15 	stw	r6,-8(fp)
 40121b4:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 40121b8:	e0bffc17 	ldw	r2,-16(fp)
 40121bc:	10800b17 	ldw	r2,44(r2)
 40121c0:	108000a0 	cmpeqi	r2,r2,2
 40121c4:	10000a1e 	bne	r2,zero,40121f0 <alt_up_av_config_write_video_cfg_register+0x58>
 40121c8:	e0bffc17 	ldw	r2,-16(fp)
 40121cc:	10800b17 	ldw	r2,44(r2)
 40121d0:	108000e0 	cmpeqi	r2,r2,3
 40121d4:	1000061e 	bne	r2,zero,40121f0 <alt_up_av_config_write_video_cfg_register+0x58>
 40121d8:	e0bffc17 	ldw	r2,-16(fp)
 40121dc:	10800b17 	ldw	r2,44(r2)
 40121e0:	10800120 	cmpeqi	r2,r2,4
 40121e4:	1000021e 	bne	r2,zero,40121f0 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 40121e8:	00bffa84 	movi	r2,-22
 40121ec:	00001f06 	br	401226c <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 40121f0:	e0bffc17 	ldw	r2,-16(fp)
 40121f4:	10800b17 	ldw	r2,44(r2)
 40121f8:	108000a0 	cmpeqi	r2,r2,2
 40121fc:	1000041e 	bne	r2,zero,4012210 <alt_up_av_config_write_video_cfg_register+0x78>
 4012200:	e0bffc17 	ldw	r2,-16(fp)
 4012204:	10800b17 	ldw	r2,44(r2)
 4012208:	10800118 	cmpnei	r2,r2,4
 401220c:	1000051e 	bne	r2,zero,4012224 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 4012210:	e0bfff17 	ldw	r2,-4(fp)
 4012214:	10800060 	cmpeqi	r2,r2,1
 4012218:	10000a1e 	bne	r2,zero,4012244 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 401221c:	00bffa84 	movi	r2,-22
 4012220:	00001206 	br	401226c <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 4012224:	e0bfff17 	ldw	r2,-4(fp)
 4012228:	10800060 	cmpeqi	r2,r2,1
 401222c:	1000051e 	bne	r2,zero,4012244 <alt_up_av_config_write_video_cfg_register+0xac>
 4012230:	e0bfff17 	ldw	r2,-4(fp)
 4012234:	108000a0 	cmpeqi	r2,r2,2
 4012238:	1000021e 	bne	r2,zero,4012244 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 401223c:	00bffa84 	movi	r2,-22
 4012240:	00000a06 	br	401226c <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 4012244:	e0bffc17 	ldw	r2,-16(fp)
 4012248:	10800a17 	ldw	r2,40(r2)
 401224c:	10800084 	addi	r2,r2,2
 4012250:	1007883a 	mov	r3,r2
 4012254:	e0bfff17 	ldw	r2,-4(fp)
 4012258:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 401225c:	e1bffe17 	ldw	r6,-8(fp)
 4012260:	e17ffd17 	ldw	r5,-12(fp)
 4012264:	e13ffc17 	ldw	r4,-16(fp)
 4012268:	4011df40 	call	4011df4 <alt_up_av_config_write_data>
}
 401226c:	e037883a 	mov	sp,fp
 4012270:	dfc00117 	ldw	ra,4(sp)
 4012274:	df000017 	ldw	fp,0(sp)
 4012278:	dec00204 	addi	sp,sp,8
 401227c:	f800283a 	ret

04012280 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 4012280:	defffb04 	addi	sp,sp,-20
 4012284:	dfc00415 	stw	ra,16(sp)
 4012288:	df000315 	stw	fp,12(sp)
 401228c:	df000304 	addi	fp,sp,12
 4012290:	e13ffd15 	stw	r4,-12(fp)
 4012294:	e17ffe15 	stw	r5,-8(fp)
 4012298:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 401229c:	e0bffd17 	ldw	r2,-12(fp)
 40122a0:	10800b17 	ldw	r2,44(r2)
 40122a4:	10800220 	cmpeqi	r2,r2,8
 40122a8:	1000021e 	bne	r2,zero,40122b4 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 40122ac:	00bffa84 	movi	r2,-22
 40122b0:	00000406 	br	40122c4 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 40122b4:	e1bfff17 	ldw	r6,-4(fp)
 40122b8:	e17ffe17 	ldw	r5,-8(fp)
 40122bc:	e13ffd17 	ldw	r4,-12(fp)
 40122c0:	4011e580 	call	4011e58 <alt_up_av_config_read_data>
}
 40122c4:	e037883a 	mov	sp,fp
 40122c8:	dfc00117 	ldw	ra,4(sp)
 40122cc:	df000017 	ldw	fp,0(sp)
 40122d0:	dec00204 	addi	sp,sp,8
 40122d4:	f800283a 	ret

040122d8 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 40122d8:	defffb04 	addi	sp,sp,-20
 40122dc:	dfc00415 	stw	ra,16(sp)
 40122e0:	df000315 	stw	fp,12(sp)
 40122e4:	df000304 	addi	fp,sp,12
 40122e8:	e13ffd15 	stw	r4,-12(fp)
 40122ec:	e17ffe15 	stw	r5,-8(fp)
 40122f0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 40122f4:	e0bffd17 	ldw	r2,-12(fp)
 40122f8:	10800b17 	ldw	r2,44(r2)
 40122fc:	10800220 	cmpeqi	r2,r2,8
 4012300:	1000021e 	bne	r2,zero,401230c <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 4012304:	00bffa84 	movi	r2,-22
 4012308:	00000406 	br	401231c <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 401230c:	e1bfff17 	ldw	r6,-4(fp)
 4012310:	e17ffe17 	ldw	r5,-8(fp)
 4012314:	e13ffd17 	ldw	r4,-12(fp)
 4012318:	4011df40 	call	4011df4 <alt_up_av_config_write_data>
}
 401231c:	e037883a 	mov	sp,fp
 4012320:	dfc00117 	ldw	ra,4(sp)
 4012324:	df000017 	ldw	fp,0(sp)
 4012328:	dec00204 	addi	sp,sp,8
 401232c:	f800283a 	ret

04012330 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 4012330:	defffb04 	addi	sp,sp,-20
 4012334:	dfc00415 	stw	ra,16(sp)
 4012338:	df000315 	stw	fp,12(sp)
 401233c:	df000304 	addi	fp,sp,12
 4012340:	e13ffd15 	stw	r4,-12(fp)
 4012344:	e17ffe15 	stw	r5,-8(fp)
 4012348:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 401234c:	e0bffd17 	ldw	r2,-12(fp)
 4012350:	10800b17 	ldw	r2,44(r2)
 4012354:	10800260 	cmpeqi	r2,r2,9
 4012358:	1000021e 	bne	r2,zero,4012364 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 401235c:	00bffa84 	movi	r2,-22
 4012360:	00000406 	br	4012374 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 4012364:	e1bfff17 	ldw	r6,-4(fp)
 4012368:	e17ffe17 	ldw	r5,-8(fp)
 401236c:	e13ffd17 	ldw	r4,-12(fp)
 4012370:	4011e580 	call	4011e58 <alt_up_av_config_read_data>
}
 4012374:	e037883a 	mov	sp,fp
 4012378:	dfc00117 	ldw	ra,4(sp)
 401237c:	df000017 	ldw	fp,0(sp)
 4012380:	dec00204 	addi	sp,sp,8
 4012384:	f800283a 	ret

04012388 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4012388:	defffb04 	addi	sp,sp,-20
 401238c:	dfc00415 	stw	ra,16(sp)
 4012390:	df000315 	stw	fp,12(sp)
 4012394:	df000304 	addi	fp,sp,12
 4012398:	e13ffd15 	stw	r4,-12(fp)
 401239c:	e17ffe15 	stw	r5,-8(fp)
 40123a0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 40123a4:	e0bffd17 	ldw	r2,-12(fp)
 40123a8:	10800b17 	ldw	r2,44(r2)
 40123ac:	10800260 	cmpeqi	r2,r2,9
 40123b0:	1000021e 	bne	r2,zero,40123bc <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 40123b4:	00bffa84 	movi	r2,-22
 40123b8:	00000406 	br	40123cc <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 40123bc:	e1bfff17 	ldw	r6,-4(fp)
 40123c0:	e17ffe17 	ldw	r5,-8(fp)
 40123c4:	e13ffd17 	ldw	r4,-12(fp)
 40123c8:	4011df40 	call	4011df4 <alt_up_av_config_write_data>
}
 40123cc:	e037883a 	mov	sp,fp
 40123d0:	dfc00117 	ldw	ra,4(sp)
 40123d4:	df000017 	ldw	fp,0(sp)
 40123d8:	dec00204 	addi	sp,sp,8
 40123dc:	f800283a 	ret

040123e0 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 40123e0:	defffb04 	addi	sp,sp,-20
 40123e4:	dfc00415 	stw	ra,16(sp)
 40123e8:	df000315 	stw	fp,12(sp)
 40123ec:	df000304 	addi	fp,sp,12
 40123f0:	e13ffd15 	stw	r4,-12(fp)
 40123f4:	e17ffe15 	stw	r5,-8(fp)
 40123f8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 40123fc:	e0bffd17 	ldw	r2,-12(fp)
 4012400:	10800b17 	ldw	r2,44(r2)
 4012404:	108002a0 	cmpeqi	r2,r2,10
 4012408:	1000021e 	bne	r2,zero,4012414 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 401240c:	00bffa84 	movi	r2,-22
 4012410:	00000406 	br	4012424 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 4012414:	e1bfff17 	ldw	r6,-4(fp)
 4012418:	e17ffe17 	ldw	r5,-8(fp)
 401241c:	e13ffd17 	ldw	r4,-12(fp)
 4012420:	4011e580 	call	4011e58 <alt_up_av_config_read_data>
}
 4012424:	e037883a 	mov	sp,fp
 4012428:	dfc00117 	ldw	ra,4(sp)
 401242c:	df000017 	ldw	fp,0(sp)
 4012430:	dec00204 	addi	sp,sp,8
 4012434:	f800283a 	ret

04012438 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4012438:	defffb04 	addi	sp,sp,-20
 401243c:	dfc00415 	stw	ra,16(sp)
 4012440:	df000315 	stw	fp,12(sp)
 4012444:	df000304 	addi	fp,sp,12
 4012448:	e13ffd15 	stw	r4,-12(fp)
 401244c:	e17ffe15 	stw	r5,-8(fp)
 4012450:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 4012454:	e0bffd17 	ldw	r2,-12(fp)
 4012458:	10800b17 	ldw	r2,44(r2)
 401245c:	108002a0 	cmpeqi	r2,r2,10
 4012460:	1000021e 	bne	r2,zero,401246c <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 4012464:	00bffa84 	movi	r2,-22
 4012468:	00000406 	br	401247c <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 401246c:	e1bfff17 	ldw	r6,-4(fp)
 4012470:	e17ffe17 	ldw	r5,-8(fp)
 4012474:	e13ffd17 	ldw	r4,-12(fp)
 4012478:	4011df40 	call	4011df4 <alt_up_av_config_write_data>
}
 401247c:	e037883a 	mov	sp,fp
 4012480:	dfc00117 	ldw	ra,4(sp)
 4012484:	df000017 	ldw	fp,0(sp)
 4012488:	dec00204 	addi	sp,sp,8
 401248c:	f800283a 	ret

04012490 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4012490:	defffa04 	addi	sp,sp,-24
 4012494:	dfc00515 	stw	ra,20(sp)
 4012498:	df000415 	stw	fp,16(sp)
 401249c:	df000404 	addi	fp,sp,16
 40124a0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 40124a4:	008000c4 	movi	r2,3
 40124a8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40124ac:	e0fffd17 	ldw	r3,-12(fp)
 40124b0:	008003f4 	movhi	r2,15
 40124b4:	10909004 	addi	r2,r2,16960
 40124b8:	1885383a 	mul	r2,r3,r2
 40124bc:	100b883a 	mov	r5,r2
 40124c0:	0100bef4 	movhi	r4,763
 40124c4:	213c2004 	addi	r4,r4,-3968
 40124c8:	4002b680 	call	4002b68 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40124cc:	100b883a 	mov	r5,r2
 40124d0:	01200034 	movhi	r4,32768
 40124d4:	213fffc4 	addi	r4,r4,-1
 40124d8:	4002b680 	call	4002b68 <__udivsi3>
 40124dc:	100b883a 	mov	r5,r2
 40124e0:	e13fff17 	ldw	r4,-4(fp)
 40124e4:	4002b680 	call	4002b68 <__udivsi3>
 40124e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40124ec:	e0bffe17 	ldw	r2,-8(fp)
 40124f0:	10002a26 	beq	r2,zero,401259c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40124f4:	e03ffc15 	stw	zero,-16(fp)
 40124f8:	00001706 	br	4012558 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40124fc:	00a00034 	movhi	r2,32768
 4012500:	10bfffc4 	addi	r2,r2,-1
 4012504:	10bfffc4 	addi	r2,r2,-1
 4012508:	103ffe1e 	bne	r2,zero,4012504 <__alt_data_end+0xfc012504>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401250c:	e0fffd17 	ldw	r3,-12(fp)
 4012510:	008003f4 	movhi	r2,15
 4012514:	10909004 	addi	r2,r2,16960
 4012518:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401251c:	100b883a 	mov	r5,r2
 4012520:	0100bef4 	movhi	r4,763
 4012524:	213c2004 	addi	r4,r4,-3968
 4012528:	4002b680 	call	4002b68 <__udivsi3>
 401252c:	100b883a 	mov	r5,r2
 4012530:	01200034 	movhi	r4,32768
 4012534:	213fffc4 	addi	r4,r4,-1
 4012538:	4002b680 	call	4002b68 <__udivsi3>
 401253c:	1007883a 	mov	r3,r2
 4012540:	e0bfff17 	ldw	r2,-4(fp)
 4012544:	10c5c83a 	sub	r2,r2,r3
 4012548:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401254c:	e0bffc17 	ldw	r2,-16(fp)
 4012550:	10800044 	addi	r2,r2,1
 4012554:	e0bffc15 	stw	r2,-16(fp)
 4012558:	e0fffc17 	ldw	r3,-16(fp)
 401255c:	e0bffe17 	ldw	r2,-8(fp)
 4012560:	18bfe616 	blt	r3,r2,40124fc <__alt_data_end+0xfc0124fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4012564:	e0fffd17 	ldw	r3,-12(fp)
 4012568:	008003f4 	movhi	r2,15
 401256c:	10909004 	addi	r2,r2,16960
 4012570:	1885383a 	mul	r2,r3,r2
 4012574:	100b883a 	mov	r5,r2
 4012578:	0100bef4 	movhi	r4,763
 401257c:	213c2004 	addi	r4,r4,-3968
 4012580:	4002b680 	call	4002b68 <__udivsi3>
 4012584:	1007883a 	mov	r3,r2
 4012588:	e0bfff17 	ldw	r2,-4(fp)
 401258c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012590:	10bfffc4 	addi	r2,r2,-1
 4012594:	103ffe1e 	bne	r2,zero,4012590 <__alt_data_end+0xfc012590>
 4012598:	00000d06 	br	40125d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401259c:	e0fffd17 	ldw	r3,-12(fp)
 40125a0:	008003f4 	movhi	r2,15
 40125a4:	10909004 	addi	r2,r2,16960
 40125a8:	1885383a 	mul	r2,r3,r2
 40125ac:	100b883a 	mov	r5,r2
 40125b0:	0100bef4 	movhi	r4,763
 40125b4:	213c2004 	addi	r4,r4,-3968
 40125b8:	4002b680 	call	4002b68 <__udivsi3>
 40125bc:	1007883a 	mov	r3,r2
 40125c0:	e0bfff17 	ldw	r2,-4(fp)
 40125c4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40125c8:	10bfffc4 	addi	r2,r2,-1
 40125cc:	00bffe16 	blt	zero,r2,40125c8 <__alt_data_end+0xfc0125c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40125d0:	0005883a 	mov	r2,zero
}
 40125d4:	e037883a 	mov	sp,fp
 40125d8:	dfc00117 	ldw	ra,4(sp)
 40125dc:	df000017 	ldw	fp,0(sp)
 40125e0:	dec00204 	addi	sp,sp,8
 40125e4:	f800283a 	ret

040125e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40125e8:	defffe04 	addi	sp,sp,-8
 40125ec:	df000115 	stw	fp,4(sp)
 40125f0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40125f4:	e03fff15 	stw	zero,-4(fp)
 40125f8:	00000506 	br	4012610 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40125fc:	e0bfff17 	ldw	r2,-4(fp)
 4012600:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012604:	e0bfff17 	ldw	r2,-4(fp)
 4012608:	10800804 	addi	r2,r2,32
 401260c:	e0bfff15 	stw	r2,-4(fp)
 4012610:	e0bfff17 	ldw	r2,-4(fp)
 4012614:	10820030 	cmpltui	r2,r2,2048
 4012618:	103ff81e 	bne	r2,zero,40125fc <__alt_data_end+0xfc0125fc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401261c:	0001883a 	nop
 4012620:	e037883a 	mov	sp,fp
 4012624:	df000017 	ldw	fp,0(sp)
 4012628:	dec00104 	addi	sp,sp,4
 401262c:	f800283a 	ret

04012630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012630:	defffe04 	addi	sp,sp,-8
 4012634:	dfc00115 	stw	ra,4(sp)
 4012638:	df000015 	stw	fp,0(sp)
 401263c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012640:	d0a00c17 	ldw	r2,-32720(gp)
 4012644:	10000326 	beq	r2,zero,4012654 <alt_get_errno+0x24>
 4012648:	d0a00c17 	ldw	r2,-32720(gp)
 401264c:	103ee83a 	callr	r2
 4012650:	00000106 	br	4012658 <alt_get_errno+0x28>
 4012654:	d0acc204 	addi	r2,gp,-19704
}
 4012658:	e037883a 	mov	sp,fp
 401265c:	dfc00117 	ldw	ra,4(sp)
 4012660:	df000017 	ldw	fp,0(sp)
 4012664:	dec00204 	addi	sp,sp,8
 4012668:	f800283a 	ret

0401266c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401266c:	defffa04 	addi	sp,sp,-24
 4012670:	dfc00515 	stw	ra,20(sp)
 4012674:	df000415 	stw	fp,16(sp)
 4012678:	df000404 	addi	fp,sp,16
 401267c:	e13ffe15 	stw	r4,-8(fp)
 4012680:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4012684:	e0bffe17 	ldw	r2,-8(fp)
 4012688:	10000326 	beq	r2,zero,4012698 <alt_dev_llist_insert+0x2c>
 401268c:	e0bffe17 	ldw	r2,-8(fp)
 4012690:	10800217 	ldw	r2,8(r2)
 4012694:	1000061e 	bne	r2,zero,40126b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4012698:	40126300 	call	4012630 <alt_get_errno>
 401269c:	1007883a 	mov	r3,r2
 40126a0:	00800584 	movi	r2,22
 40126a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40126a8:	00bffa84 	movi	r2,-22
 40126ac:	00001306 	br	40126fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40126b0:	e0bffe17 	ldw	r2,-8(fp)
 40126b4:	e0ffff17 	ldw	r3,-4(fp)
 40126b8:	e0fffc15 	stw	r3,-16(fp)
 40126bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40126c0:	e0bffd17 	ldw	r2,-12(fp)
 40126c4:	e0fffc17 	ldw	r3,-16(fp)
 40126c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40126cc:	e0bffc17 	ldw	r2,-16(fp)
 40126d0:	10c00017 	ldw	r3,0(r2)
 40126d4:	e0bffd17 	ldw	r2,-12(fp)
 40126d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40126dc:	e0bffc17 	ldw	r2,-16(fp)
 40126e0:	10800017 	ldw	r2,0(r2)
 40126e4:	e0fffd17 	ldw	r3,-12(fp)
 40126e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40126ec:	e0bffc17 	ldw	r2,-16(fp)
 40126f0:	e0fffd17 	ldw	r3,-12(fp)
 40126f4:	10c00015 	stw	r3,0(r2)

  return 0;  
 40126f8:	0005883a 	mov	r2,zero
}
 40126fc:	e037883a 	mov	sp,fp
 4012700:	dfc00117 	ldw	ra,4(sp)
 4012704:	df000017 	ldw	fp,0(sp)
 4012708:	dec00204 	addi	sp,sp,8
 401270c:	f800283a 	ret

04012710 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4012710:	defffd04 	addi	sp,sp,-12
 4012714:	dfc00215 	stw	ra,8(sp)
 4012718:	df000115 	stw	fp,4(sp)
 401271c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4012720:	00810074 	movhi	r2,1025
 4012724:	108cad04 	addi	r2,r2,12980
 4012728:	e0bfff15 	stw	r2,-4(fp)
 401272c:	00000606 	br	4012748 <_do_ctors+0x38>
        (*ctor) (); 
 4012730:	e0bfff17 	ldw	r2,-4(fp)
 4012734:	10800017 	ldw	r2,0(r2)
 4012738:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401273c:	e0bfff17 	ldw	r2,-4(fp)
 4012740:	10bfff04 	addi	r2,r2,-4
 4012744:	e0bfff15 	stw	r2,-4(fp)
 4012748:	e0ffff17 	ldw	r3,-4(fp)
 401274c:	00810074 	movhi	r2,1025
 4012750:	108cae04 	addi	r2,r2,12984
 4012754:	18bff62e 	bgeu	r3,r2,4012730 <__alt_data_end+0xfc012730>
        (*ctor) (); 
}
 4012758:	0001883a 	nop
 401275c:	e037883a 	mov	sp,fp
 4012760:	dfc00117 	ldw	ra,4(sp)
 4012764:	df000017 	ldw	fp,0(sp)
 4012768:	dec00204 	addi	sp,sp,8
 401276c:	f800283a 	ret

04012770 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4012770:	defffd04 	addi	sp,sp,-12
 4012774:	dfc00215 	stw	ra,8(sp)
 4012778:	df000115 	stw	fp,4(sp)
 401277c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4012780:	00810074 	movhi	r2,1025
 4012784:	108cad04 	addi	r2,r2,12980
 4012788:	e0bfff15 	stw	r2,-4(fp)
 401278c:	00000606 	br	40127a8 <_do_dtors+0x38>
        (*dtor) (); 
 4012790:	e0bfff17 	ldw	r2,-4(fp)
 4012794:	10800017 	ldw	r2,0(r2)
 4012798:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401279c:	e0bfff17 	ldw	r2,-4(fp)
 40127a0:	10bfff04 	addi	r2,r2,-4
 40127a4:	e0bfff15 	stw	r2,-4(fp)
 40127a8:	e0ffff17 	ldw	r3,-4(fp)
 40127ac:	00810074 	movhi	r2,1025
 40127b0:	108cae04 	addi	r2,r2,12984
 40127b4:	18bff62e 	bgeu	r3,r2,4012790 <__alt_data_end+0xfc012790>
        (*dtor) (); 
}
 40127b8:	0001883a 	nop
 40127bc:	e037883a 	mov	sp,fp
 40127c0:	dfc00117 	ldw	ra,4(sp)
 40127c4:	df000017 	ldw	fp,0(sp)
 40127c8:	dec00204 	addi	sp,sp,8
 40127cc:	f800283a 	ret

040127d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40127d0:	defffa04 	addi	sp,sp,-24
 40127d4:	dfc00515 	stw	ra,20(sp)
 40127d8:	df000415 	stw	fp,16(sp)
 40127dc:	df000404 	addi	fp,sp,16
 40127e0:	e13ffe15 	stw	r4,-8(fp)
 40127e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40127e8:	e0bfff17 	ldw	r2,-4(fp)
 40127ec:	10800017 	ldw	r2,0(r2)
 40127f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40127f4:	e13ffe17 	ldw	r4,-8(fp)
 40127f8:	4002d640 	call	4002d64 <strlen>
 40127fc:	10800044 	addi	r2,r2,1
 4012800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4012804:	00000d06 	br	401283c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4012808:	e0bffc17 	ldw	r2,-16(fp)
 401280c:	10800217 	ldw	r2,8(r2)
 4012810:	e0fffd17 	ldw	r3,-12(fp)
 4012814:	180d883a 	mov	r6,r3
 4012818:	e17ffe17 	ldw	r5,-8(fp)
 401281c:	1009883a 	mov	r4,r2
 4012820:	4012f700 	call	4012f70 <memcmp>
 4012824:	1000021e 	bne	r2,zero,4012830 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4012828:	e0bffc17 	ldw	r2,-16(fp)
 401282c:	00000706 	br	401284c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4012830:	e0bffc17 	ldw	r2,-16(fp)
 4012834:	10800017 	ldw	r2,0(r2)
 4012838:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401283c:	e0fffc17 	ldw	r3,-16(fp)
 4012840:	e0bfff17 	ldw	r2,-4(fp)
 4012844:	18bff01e 	bne	r3,r2,4012808 <__alt_data_end+0xfc012808>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4012848:	0005883a 	mov	r2,zero
}
 401284c:	e037883a 	mov	sp,fp
 4012850:	dfc00117 	ldw	ra,4(sp)
 4012854:	df000017 	ldw	fp,0(sp)
 4012858:	dec00204 	addi	sp,sp,8
 401285c:	f800283a 	ret

04012860 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4012860:	defffe04 	addi	sp,sp,-8
 4012864:	dfc00115 	stw	ra,4(sp)
 4012868:	df000015 	stw	fp,0(sp)
 401286c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4012870:	01440004 	movi	r5,4096
 4012874:	0009883a 	mov	r4,zero
 4012878:	4012e940 	call	4012e94 <alt_icache_flush>
#endif
}
 401287c:	0001883a 	nop
 4012880:	e037883a 	mov	sp,fp
 4012884:	dfc00117 	ldw	ra,4(sp)
 4012888:	df000017 	ldw	fp,0(sp)
 401288c:	dec00204 	addi	sp,sp,8
 4012890:	f800283a 	ret

04012894 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4012894:	defffe04 	addi	sp,sp,-8
 4012898:	df000115 	stw	fp,4(sp)
 401289c:	df000104 	addi	fp,sp,4
 40128a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40128a4:	e0bfff17 	ldw	r2,-4(fp)
 40128a8:	10bffe84 	addi	r2,r2,-6
 40128ac:	10c00428 	cmpgeui	r3,r2,16
 40128b0:	18001a1e 	bne	r3,zero,401291c <alt_exception_cause_generated_bad_addr+0x88>
 40128b4:	100690ba 	slli	r3,r2,2
 40128b8:	00810074 	movhi	r2,1025
 40128bc:	108a3304 	addi	r2,r2,10444
 40128c0:	1885883a 	add	r2,r3,r2
 40128c4:	10800017 	ldw	r2,0(r2)
 40128c8:	1000683a 	jmp	r2
 40128cc:	0401290c 	andi	r16,zero,1188
 40128d0:	0401290c 	andi	r16,zero,1188
 40128d4:	0401291c 	xori	r16,zero,1188
 40128d8:	0401291c 	xori	r16,zero,1188
 40128dc:	0401291c 	xori	r16,zero,1188
 40128e0:	0401290c 	andi	r16,zero,1188
 40128e4:	04012914 	movui	r16,1188
 40128e8:	0401291c 	xori	r16,zero,1188
 40128ec:	0401290c 	andi	r16,zero,1188
 40128f0:	0401290c 	andi	r16,zero,1188
 40128f4:	0401291c 	xori	r16,zero,1188
 40128f8:	0401290c 	andi	r16,zero,1188
 40128fc:	04012914 	movui	r16,1188
 4012900:	0401291c 	xori	r16,zero,1188
 4012904:	0401291c 	xori	r16,zero,1188
 4012908:	0401290c 	andi	r16,zero,1188
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401290c:	00800044 	movi	r2,1
 4012910:	00000306 	br	4012920 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4012914:	0005883a 	mov	r2,zero
 4012918:	00000106 	br	4012920 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401291c:	0005883a 	mov	r2,zero
  }
}
 4012920:	e037883a 	mov	sp,fp
 4012924:	df000017 	ldw	fp,0(sp)
 4012928:	dec00104 	addi	sp,sp,4
 401292c:	f800283a 	ret

04012930 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4012930:	defff904 	addi	sp,sp,-28
 4012934:	dfc00615 	stw	ra,24(sp)
 4012938:	df000515 	stw	fp,20(sp)
 401293c:	df000504 	addi	fp,sp,20
 4012940:	e13ffc15 	stw	r4,-16(fp)
 4012944:	e17ffd15 	stw	r5,-12(fp)
 4012948:	e1bffe15 	stw	r6,-8(fp)
 401294c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4012950:	e1bfff17 	ldw	r6,-4(fp)
 4012954:	e17ffe17 	ldw	r5,-8(fp)
 4012958:	e13ffd17 	ldw	r4,-12(fp)
 401295c:	4012b700 	call	4012b70 <open>
 4012960:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4012964:	e0bffb17 	ldw	r2,-20(fp)
 4012968:	10001c16 	blt	r2,zero,40129dc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 401296c:	008100f4 	movhi	r2,1027
 4012970:	10943604 	addi	r2,r2,20696
 4012974:	e0fffb17 	ldw	r3,-20(fp)
 4012978:	18c00324 	muli	r3,r3,12
 401297c:	10c5883a 	add	r2,r2,r3
 4012980:	10c00017 	ldw	r3,0(r2)
 4012984:	e0bffc17 	ldw	r2,-16(fp)
 4012988:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401298c:	008100f4 	movhi	r2,1027
 4012990:	10943604 	addi	r2,r2,20696
 4012994:	e0fffb17 	ldw	r3,-20(fp)
 4012998:	18c00324 	muli	r3,r3,12
 401299c:	10c5883a 	add	r2,r2,r3
 40129a0:	10800104 	addi	r2,r2,4
 40129a4:	10c00017 	ldw	r3,0(r2)
 40129a8:	e0bffc17 	ldw	r2,-16(fp)
 40129ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40129b0:	008100f4 	movhi	r2,1027
 40129b4:	10943604 	addi	r2,r2,20696
 40129b8:	e0fffb17 	ldw	r3,-20(fp)
 40129bc:	18c00324 	muli	r3,r3,12
 40129c0:	10c5883a 	add	r2,r2,r3
 40129c4:	10800204 	addi	r2,r2,8
 40129c8:	10c00017 	ldw	r3,0(r2)
 40129cc:	e0bffc17 	ldw	r2,-16(fp)
 40129d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40129d4:	e13ffb17 	ldw	r4,-20(fp)
 40129d8:	400fe580 	call	400fe58 <alt_release_fd>
  }
} 
 40129dc:	0001883a 	nop
 40129e0:	e037883a 	mov	sp,fp
 40129e4:	dfc00117 	ldw	ra,4(sp)
 40129e8:	df000017 	ldw	fp,0(sp)
 40129ec:	dec00204 	addi	sp,sp,8
 40129f0:	f800283a 	ret

040129f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40129f4:	defffb04 	addi	sp,sp,-20
 40129f8:	dfc00415 	stw	ra,16(sp)
 40129fc:	df000315 	stw	fp,12(sp)
 4012a00:	df000304 	addi	fp,sp,12
 4012a04:	e13ffd15 	stw	r4,-12(fp)
 4012a08:	e17ffe15 	stw	r5,-8(fp)
 4012a0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4012a10:	01c07fc4 	movi	r7,511
 4012a14:	01800044 	movi	r6,1
 4012a18:	e17ffd17 	ldw	r5,-12(fp)
 4012a1c:	010100f4 	movhi	r4,1027
 4012a20:	21143904 	addi	r4,r4,20708
 4012a24:	40129300 	call	4012930 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4012a28:	01c07fc4 	movi	r7,511
 4012a2c:	000d883a 	mov	r6,zero
 4012a30:	e17ffe17 	ldw	r5,-8(fp)
 4012a34:	010100f4 	movhi	r4,1027
 4012a38:	21143604 	addi	r4,r4,20696
 4012a3c:	40129300 	call	4012930 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4012a40:	01c07fc4 	movi	r7,511
 4012a44:	01800044 	movi	r6,1
 4012a48:	e17fff17 	ldw	r5,-4(fp)
 4012a4c:	010100f4 	movhi	r4,1027
 4012a50:	21143c04 	addi	r4,r4,20720
 4012a54:	40129300 	call	4012930 <alt_open_fd>
}  
 4012a58:	0001883a 	nop
 4012a5c:	e037883a 	mov	sp,fp
 4012a60:	dfc00117 	ldw	ra,4(sp)
 4012a64:	df000017 	ldw	fp,0(sp)
 4012a68:	dec00204 	addi	sp,sp,8
 4012a6c:	f800283a 	ret

04012a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012a70:	defffe04 	addi	sp,sp,-8
 4012a74:	dfc00115 	stw	ra,4(sp)
 4012a78:	df000015 	stw	fp,0(sp)
 4012a7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012a80:	d0a00c17 	ldw	r2,-32720(gp)
 4012a84:	10000326 	beq	r2,zero,4012a94 <alt_get_errno+0x24>
 4012a88:	d0a00c17 	ldw	r2,-32720(gp)
 4012a8c:	103ee83a 	callr	r2
 4012a90:	00000106 	br	4012a98 <alt_get_errno+0x28>
 4012a94:	d0acc204 	addi	r2,gp,-19704
}
 4012a98:	e037883a 	mov	sp,fp
 4012a9c:	dfc00117 	ldw	ra,4(sp)
 4012aa0:	df000017 	ldw	fp,0(sp)
 4012aa4:	dec00204 	addi	sp,sp,8
 4012aa8:	f800283a 	ret

04012aac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4012aac:	defffd04 	addi	sp,sp,-12
 4012ab0:	df000215 	stw	fp,8(sp)
 4012ab4:	df000204 	addi	fp,sp,8
 4012ab8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4012abc:	e0bfff17 	ldw	r2,-4(fp)
 4012ac0:	10800217 	ldw	r2,8(r2)
 4012ac4:	10d00034 	orhi	r3,r2,16384
 4012ac8:	e0bfff17 	ldw	r2,-4(fp)
 4012acc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4012ad0:	e03ffe15 	stw	zero,-8(fp)
 4012ad4:	00001d06 	br	4012b4c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012ad8:	008100f4 	movhi	r2,1027
 4012adc:	10943604 	addi	r2,r2,20696
 4012ae0:	e0fffe17 	ldw	r3,-8(fp)
 4012ae4:	18c00324 	muli	r3,r3,12
 4012ae8:	10c5883a 	add	r2,r2,r3
 4012aec:	10c00017 	ldw	r3,0(r2)
 4012af0:	e0bfff17 	ldw	r2,-4(fp)
 4012af4:	10800017 	ldw	r2,0(r2)
 4012af8:	1880111e 	bne	r3,r2,4012b40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012afc:	008100f4 	movhi	r2,1027
 4012b00:	10943604 	addi	r2,r2,20696
 4012b04:	e0fffe17 	ldw	r3,-8(fp)
 4012b08:	18c00324 	muli	r3,r3,12
 4012b0c:	10c5883a 	add	r2,r2,r3
 4012b10:	10800204 	addi	r2,r2,8
 4012b14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012b18:	1000090e 	bge	r2,zero,4012b40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4012b1c:	e0bffe17 	ldw	r2,-8(fp)
 4012b20:	10c00324 	muli	r3,r2,12
 4012b24:	008100f4 	movhi	r2,1027
 4012b28:	10943604 	addi	r2,r2,20696
 4012b2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012b30:	e0bfff17 	ldw	r2,-4(fp)
 4012b34:	18800226 	beq	r3,r2,4012b40 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4012b38:	00bffcc4 	movi	r2,-13
 4012b3c:	00000806 	br	4012b60 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4012b40:	e0bffe17 	ldw	r2,-8(fp)
 4012b44:	10800044 	addi	r2,r2,1
 4012b48:	e0bffe15 	stw	r2,-8(fp)
 4012b4c:	d0a00b17 	ldw	r2,-32724(gp)
 4012b50:	1007883a 	mov	r3,r2
 4012b54:	e0bffe17 	ldw	r2,-8(fp)
 4012b58:	18bfdf2e 	bgeu	r3,r2,4012ad8 <__alt_data_end+0xfc012ad8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4012b5c:	0005883a 	mov	r2,zero
}
 4012b60:	e037883a 	mov	sp,fp
 4012b64:	df000017 	ldw	fp,0(sp)
 4012b68:	dec00104 	addi	sp,sp,4
 4012b6c:	f800283a 	ret

04012b70 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4012b70:	defff604 	addi	sp,sp,-40
 4012b74:	dfc00915 	stw	ra,36(sp)
 4012b78:	df000815 	stw	fp,32(sp)
 4012b7c:	df000804 	addi	fp,sp,32
 4012b80:	e13ffd15 	stw	r4,-12(fp)
 4012b84:	e17ffe15 	stw	r5,-8(fp)
 4012b88:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4012b8c:	00bfffc4 	movi	r2,-1
 4012b90:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4012b94:	00bffb44 	movi	r2,-19
 4012b98:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4012b9c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4012ba0:	d1600904 	addi	r5,gp,-32732
 4012ba4:	e13ffd17 	ldw	r4,-12(fp)
 4012ba8:	40127d00 	call	40127d0 <alt_find_dev>
 4012bac:	e0bff815 	stw	r2,-32(fp)
 4012bb0:	e0bff817 	ldw	r2,-32(fp)
 4012bb4:	1000051e 	bne	r2,zero,4012bcc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4012bb8:	e13ffd17 	ldw	r4,-12(fp)
 4012bbc:	4012ce80 	call	4012ce8 <alt_find_file>
 4012bc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4012bc4:	00800044 	movi	r2,1
 4012bc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4012bcc:	e0bff817 	ldw	r2,-32(fp)
 4012bd0:	10002926 	beq	r2,zero,4012c78 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4012bd4:	e13ff817 	ldw	r4,-32(fp)
 4012bd8:	4012df00 	call	4012df0 <alt_get_fd>
 4012bdc:	e0bff915 	stw	r2,-28(fp)
 4012be0:	e0bff917 	ldw	r2,-28(fp)
 4012be4:	1000030e 	bge	r2,zero,4012bf4 <open+0x84>
    {
      status = index;
 4012be8:	e0bff917 	ldw	r2,-28(fp)
 4012bec:	e0bffa15 	stw	r2,-24(fp)
 4012bf0:	00002306 	br	4012c80 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4012bf4:	e0bff917 	ldw	r2,-28(fp)
 4012bf8:	10c00324 	muli	r3,r2,12
 4012bfc:	008100f4 	movhi	r2,1027
 4012c00:	10943604 	addi	r2,r2,20696
 4012c04:	1885883a 	add	r2,r3,r2
 4012c08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4012c0c:	e0fffe17 	ldw	r3,-8(fp)
 4012c10:	00900034 	movhi	r2,16384
 4012c14:	10bfffc4 	addi	r2,r2,-1
 4012c18:	1886703a 	and	r3,r3,r2
 4012c1c:	e0bffc17 	ldw	r2,-16(fp)
 4012c20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4012c24:	e0bffb17 	ldw	r2,-20(fp)
 4012c28:	1000051e 	bne	r2,zero,4012c40 <open+0xd0>
 4012c2c:	e13ffc17 	ldw	r4,-16(fp)
 4012c30:	4012aac0 	call	4012aac <alt_file_locked>
 4012c34:	e0bffa15 	stw	r2,-24(fp)
 4012c38:	e0bffa17 	ldw	r2,-24(fp)
 4012c3c:	10001016 	blt	r2,zero,4012c80 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4012c40:	e0bff817 	ldw	r2,-32(fp)
 4012c44:	10800317 	ldw	r2,12(r2)
 4012c48:	10000826 	beq	r2,zero,4012c6c <open+0xfc>
 4012c4c:	e0bff817 	ldw	r2,-32(fp)
 4012c50:	10800317 	ldw	r2,12(r2)
 4012c54:	e1ffff17 	ldw	r7,-4(fp)
 4012c58:	e1bffe17 	ldw	r6,-8(fp)
 4012c5c:	e17ffd17 	ldw	r5,-12(fp)
 4012c60:	e13ffc17 	ldw	r4,-16(fp)
 4012c64:	103ee83a 	callr	r2
 4012c68:	00000106 	br	4012c70 <open+0x100>
 4012c6c:	0005883a 	mov	r2,zero
 4012c70:	e0bffa15 	stw	r2,-24(fp)
 4012c74:	00000206 	br	4012c80 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4012c78:	00bffb44 	movi	r2,-19
 4012c7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4012c80:	e0bffa17 	ldw	r2,-24(fp)
 4012c84:	1000090e 	bge	r2,zero,4012cac <open+0x13c>
  {
    alt_release_fd (index);  
 4012c88:	e13ff917 	ldw	r4,-28(fp)
 4012c8c:	400fe580 	call	400fe58 <alt_release_fd>
    ALT_ERRNO = -status;
 4012c90:	4012a700 	call	4012a70 <alt_get_errno>
 4012c94:	1007883a 	mov	r3,r2
 4012c98:	e0bffa17 	ldw	r2,-24(fp)
 4012c9c:	0085c83a 	sub	r2,zero,r2
 4012ca0:	18800015 	stw	r2,0(r3)
    return -1;
 4012ca4:	00bfffc4 	movi	r2,-1
 4012ca8:	00000106 	br	4012cb0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4012cac:	e0bff917 	ldw	r2,-28(fp)
}
 4012cb0:	e037883a 	mov	sp,fp
 4012cb4:	dfc00117 	ldw	ra,4(sp)
 4012cb8:	df000017 	ldw	fp,0(sp)
 4012cbc:	dec00204 	addi	sp,sp,8
 4012cc0:	f800283a 	ret

04012cc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4012cc4:	deffff04 	addi	sp,sp,-4
 4012cc8:	df000015 	stw	fp,0(sp)
 4012ccc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4012cd0:	000170fa 	wrctl	ienable,zero
}
 4012cd4:	0001883a 	nop
 4012cd8:	e037883a 	mov	sp,fp
 4012cdc:	df000017 	ldw	fp,0(sp)
 4012ce0:	dec00104 	addi	sp,sp,4
 4012ce4:	f800283a 	ret

04012ce8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4012ce8:	defffb04 	addi	sp,sp,-20
 4012cec:	dfc00415 	stw	ra,16(sp)
 4012cf0:	df000315 	stw	fp,12(sp)
 4012cf4:	df000304 	addi	fp,sp,12
 4012cf8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4012cfc:	d0a00717 	ldw	r2,-32740(gp)
 4012d00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012d04:	00003106 	br	4012dcc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4012d08:	e0bffd17 	ldw	r2,-12(fp)
 4012d0c:	10800217 	ldw	r2,8(r2)
 4012d10:	1009883a 	mov	r4,r2
 4012d14:	4002d640 	call	4002d64 <strlen>
 4012d18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4012d1c:	e0bffd17 	ldw	r2,-12(fp)
 4012d20:	10c00217 	ldw	r3,8(r2)
 4012d24:	e0bffe17 	ldw	r2,-8(fp)
 4012d28:	10bfffc4 	addi	r2,r2,-1
 4012d2c:	1885883a 	add	r2,r3,r2
 4012d30:	10800003 	ldbu	r2,0(r2)
 4012d34:	10803fcc 	andi	r2,r2,255
 4012d38:	1080201c 	xori	r2,r2,128
 4012d3c:	10bfe004 	addi	r2,r2,-128
 4012d40:	10800bd8 	cmpnei	r2,r2,47
 4012d44:	1000031e 	bne	r2,zero,4012d54 <alt_find_file+0x6c>
    {
      len -= 1;
 4012d48:	e0bffe17 	ldw	r2,-8(fp)
 4012d4c:	10bfffc4 	addi	r2,r2,-1
 4012d50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012d54:	e0bffe17 	ldw	r2,-8(fp)
 4012d58:	e0ffff17 	ldw	r3,-4(fp)
 4012d5c:	1885883a 	add	r2,r3,r2
 4012d60:	10800003 	ldbu	r2,0(r2)
 4012d64:	10803fcc 	andi	r2,r2,255
 4012d68:	1080201c 	xori	r2,r2,128
 4012d6c:	10bfe004 	addi	r2,r2,-128
 4012d70:	10800be0 	cmpeqi	r2,r2,47
 4012d74:	1000081e 	bne	r2,zero,4012d98 <alt_find_file+0xb0>
 4012d78:	e0bffe17 	ldw	r2,-8(fp)
 4012d7c:	e0ffff17 	ldw	r3,-4(fp)
 4012d80:	1885883a 	add	r2,r3,r2
 4012d84:	10800003 	ldbu	r2,0(r2)
 4012d88:	10803fcc 	andi	r2,r2,255
 4012d8c:	1080201c 	xori	r2,r2,128
 4012d90:	10bfe004 	addi	r2,r2,-128
 4012d94:	10000a1e 	bne	r2,zero,4012dc0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4012d98:	e0bffd17 	ldw	r2,-12(fp)
 4012d9c:	10800217 	ldw	r2,8(r2)
 4012da0:	e0fffe17 	ldw	r3,-8(fp)
 4012da4:	180d883a 	mov	r6,r3
 4012da8:	e17fff17 	ldw	r5,-4(fp)
 4012dac:	1009883a 	mov	r4,r2
 4012db0:	4012f700 	call	4012f70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012db4:	1000021e 	bne	r2,zero,4012dc0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4012db8:	e0bffd17 	ldw	r2,-12(fp)
 4012dbc:	00000706 	br	4012ddc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4012dc0:	e0bffd17 	ldw	r2,-12(fp)
 4012dc4:	10800017 	ldw	r2,0(r2)
 4012dc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012dcc:	e0fffd17 	ldw	r3,-12(fp)
 4012dd0:	d0a00704 	addi	r2,gp,-32740
 4012dd4:	18bfcc1e 	bne	r3,r2,4012d08 <__alt_data_end+0xfc012d08>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4012dd8:	0005883a 	mov	r2,zero
}
 4012ddc:	e037883a 	mov	sp,fp
 4012de0:	dfc00117 	ldw	ra,4(sp)
 4012de4:	df000017 	ldw	fp,0(sp)
 4012de8:	dec00204 	addi	sp,sp,8
 4012dec:	f800283a 	ret

04012df0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4012df0:	defffc04 	addi	sp,sp,-16
 4012df4:	df000315 	stw	fp,12(sp)
 4012df8:	df000304 	addi	fp,sp,12
 4012dfc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4012e00:	00bffa04 	movi	r2,-24
 4012e04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4012e08:	e03ffd15 	stw	zero,-12(fp)
 4012e0c:	00001906 	br	4012e74 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4012e10:	008100f4 	movhi	r2,1027
 4012e14:	10943604 	addi	r2,r2,20696
 4012e18:	e0fffd17 	ldw	r3,-12(fp)
 4012e1c:	18c00324 	muli	r3,r3,12
 4012e20:	10c5883a 	add	r2,r2,r3
 4012e24:	10800017 	ldw	r2,0(r2)
 4012e28:	10000f1e 	bne	r2,zero,4012e68 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4012e2c:	008100f4 	movhi	r2,1027
 4012e30:	10943604 	addi	r2,r2,20696
 4012e34:	e0fffd17 	ldw	r3,-12(fp)
 4012e38:	18c00324 	muli	r3,r3,12
 4012e3c:	10c5883a 	add	r2,r2,r3
 4012e40:	e0ffff17 	ldw	r3,-4(fp)
 4012e44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4012e48:	d0e00b17 	ldw	r3,-32724(gp)
 4012e4c:	e0bffd17 	ldw	r2,-12(fp)
 4012e50:	1880020e 	bge	r3,r2,4012e5c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4012e54:	e0bffd17 	ldw	r2,-12(fp)
 4012e58:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 4012e5c:	e0bffd17 	ldw	r2,-12(fp)
 4012e60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4012e64:	00000606 	br	4012e80 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4012e68:	e0bffd17 	ldw	r2,-12(fp)
 4012e6c:	10800044 	addi	r2,r2,1
 4012e70:	e0bffd15 	stw	r2,-12(fp)
 4012e74:	e0bffd17 	ldw	r2,-12(fp)
 4012e78:	10800810 	cmplti	r2,r2,32
 4012e7c:	103fe41e 	bne	r2,zero,4012e10 <__alt_data_end+0xfc012e10>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4012e80:	e0bffe17 	ldw	r2,-8(fp)
}
 4012e84:	e037883a 	mov	sp,fp
 4012e88:	df000017 	ldw	fp,0(sp)
 4012e8c:	dec00104 	addi	sp,sp,4
 4012e90:	f800283a 	ret

04012e94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4012e94:	defffb04 	addi	sp,sp,-20
 4012e98:	df000415 	stw	fp,16(sp)
 4012e9c:	df000404 	addi	fp,sp,16
 4012ea0:	e13ffe15 	stw	r4,-8(fp)
 4012ea4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4012ea8:	e0bfff17 	ldw	r2,-4(fp)
 4012eac:	10840070 	cmpltui	r2,r2,4097
 4012eb0:	1000021e 	bne	r2,zero,4012ebc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4012eb4:	00840004 	movi	r2,4096
 4012eb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4012ebc:	e0fffe17 	ldw	r3,-8(fp)
 4012ec0:	e0bfff17 	ldw	r2,-4(fp)
 4012ec4:	1885883a 	add	r2,r3,r2
 4012ec8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4012ecc:	e0bffe17 	ldw	r2,-8(fp)
 4012ed0:	e0bffc15 	stw	r2,-16(fp)
 4012ed4:	00000506 	br	4012eec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4012ed8:	e0bffc17 	ldw	r2,-16(fp)
 4012edc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4012ee0:	e0bffc17 	ldw	r2,-16(fp)
 4012ee4:	10800804 	addi	r2,r2,32
 4012ee8:	e0bffc15 	stw	r2,-16(fp)
 4012eec:	e0fffc17 	ldw	r3,-16(fp)
 4012ef0:	e0bffd17 	ldw	r2,-12(fp)
 4012ef4:	18bff836 	bltu	r3,r2,4012ed8 <__alt_data_end+0xfc012ed8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4012ef8:	e0bffe17 	ldw	r2,-8(fp)
 4012efc:	108007cc 	andi	r2,r2,31
 4012f00:	10000226 	beq	r2,zero,4012f0c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4012f04:	e0bffc17 	ldw	r2,-16(fp)
 4012f08:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4012f0c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4012f10:	0001883a 	nop
 4012f14:	e037883a 	mov	sp,fp
 4012f18:	df000017 	ldw	fp,0(sp)
 4012f1c:	dec00104 	addi	sp,sp,4
 4012f20:	f800283a 	ret

04012f24 <atexit>:
 4012f24:	200b883a 	mov	r5,r4
 4012f28:	000f883a 	mov	r7,zero
 4012f2c:	000d883a 	mov	r6,zero
 4012f30:	0009883a 	mov	r4,zero
 4012f34:	4012fec1 	jmpi	4012fec <__register_exitproc>

04012f38 <exit>:
 4012f38:	defffe04 	addi	sp,sp,-8
 4012f3c:	000b883a 	mov	r5,zero
 4012f40:	dc000015 	stw	r16,0(sp)
 4012f44:	dfc00115 	stw	ra,4(sp)
 4012f48:	2021883a 	mov	r16,r4
 4012f4c:	40131040 	call	4013104 <__call_exitprocs>
 4012f50:	008100f4 	movhi	r2,1027
 4012f54:	1098bb04 	addi	r2,r2,25324
 4012f58:	11000017 	ldw	r4,0(r2)
 4012f5c:	20800f17 	ldw	r2,60(r4)
 4012f60:	10000126 	beq	r2,zero,4012f68 <exit+0x30>
 4012f64:	103ee83a 	callr	r2
 4012f68:	8009883a 	mov	r4,r16
 4012f6c:	40132840 	call	4013284 <_exit>

04012f70 <memcmp>:
 4012f70:	01c000c4 	movi	r7,3
 4012f74:	3980192e 	bgeu	r7,r6,4012fdc <memcmp+0x6c>
 4012f78:	2144b03a 	or	r2,r4,r5
 4012f7c:	11c4703a 	and	r2,r2,r7
 4012f80:	10000f26 	beq	r2,zero,4012fc0 <memcmp+0x50>
 4012f84:	20800003 	ldbu	r2,0(r4)
 4012f88:	28c00003 	ldbu	r3,0(r5)
 4012f8c:	10c0151e 	bne	r2,r3,4012fe4 <memcmp+0x74>
 4012f90:	31bfff84 	addi	r6,r6,-2
 4012f94:	01ffffc4 	movi	r7,-1
 4012f98:	00000406 	br	4012fac <memcmp+0x3c>
 4012f9c:	20800003 	ldbu	r2,0(r4)
 4012fa0:	28c00003 	ldbu	r3,0(r5)
 4012fa4:	31bfffc4 	addi	r6,r6,-1
 4012fa8:	10c00e1e 	bne	r2,r3,4012fe4 <memcmp+0x74>
 4012fac:	21000044 	addi	r4,r4,1
 4012fb0:	29400044 	addi	r5,r5,1
 4012fb4:	31fff91e 	bne	r6,r7,4012f9c <__alt_data_end+0xfc012f9c>
 4012fb8:	0005883a 	mov	r2,zero
 4012fbc:	f800283a 	ret
 4012fc0:	20c00017 	ldw	r3,0(r4)
 4012fc4:	28800017 	ldw	r2,0(r5)
 4012fc8:	18bfee1e 	bne	r3,r2,4012f84 <__alt_data_end+0xfc012f84>
 4012fcc:	31bfff04 	addi	r6,r6,-4
 4012fd0:	21000104 	addi	r4,r4,4
 4012fd4:	29400104 	addi	r5,r5,4
 4012fd8:	39bff936 	bltu	r7,r6,4012fc0 <__alt_data_end+0xfc012fc0>
 4012fdc:	303fe91e 	bne	r6,zero,4012f84 <__alt_data_end+0xfc012f84>
 4012fe0:	003ff506 	br	4012fb8 <__alt_data_end+0xfc012fb8>
 4012fe4:	10c5c83a 	sub	r2,r2,r3
 4012fe8:	f800283a 	ret

04012fec <__register_exitproc>:
 4012fec:	defffa04 	addi	sp,sp,-24
 4012ff0:	dc000315 	stw	r16,12(sp)
 4012ff4:	040100f4 	movhi	r16,1027
 4012ff8:	8418bb04 	addi	r16,r16,25324
 4012ffc:	80c00017 	ldw	r3,0(r16)
 4013000:	dc400415 	stw	r17,16(sp)
 4013004:	dfc00515 	stw	ra,20(sp)
 4013008:	18805217 	ldw	r2,328(r3)
 401300c:	2023883a 	mov	r17,r4
 4013010:	10003726 	beq	r2,zero,40130f0 <__register_exitproc+0x104>
 4013014:	10c00117 	ldw	r3,4(r2)
 4013018:	010007c4 	movi	r4,31
 401301c:	20c00e16 	blt	r4,r3,4013058 <__register_exitproc+0x6c>
 4013020:	1a000044 	addi	r8,r3,1
 4013024:	8800221e 	bne	r17,zero,40130b0 <__register_exitproc+0xc4>
 4013028:	18c00084 	addi	r3,r3,2
 401302c:	18c7883a 	add	r3,r3,r3
 4013030:	18c7883a 	add	r3,r3,r3
 4013034:	12000115 	stw	r8,4(r2)
 4013038:	10c7883a 	add	r3,r2,r3
 401303c:	19400015 	stw	r5,0(r3)
 4013040:	0005883a 	mov	r2,zero
 4013044:	dfc00517 	ldw	ra,20(sp)
 4013048:	dc400417 	ldw	r17,16(sp)
 401304c:	dc000317 	ldw	r16,12(sp)
 4013050:	dec00604 	addi	sp,sp,24
 4013054:	f800283a 	ret
 4013058:	00800034 	movhi	r2,0
 401305c:	10800004 	addi	r2,r2,0
 4013060:	10002626 	beq	r2,zero,40130fc <__register_exitproc+0x110>
 4013064:	01006404 	movi	r4,400
 4013068:	d9400015 	stw	r5,0(sp)
 401306c:	d9800115 	stw	r6,4(sp)
 4013070:	d9c00215 	stw	r7,8(sp)
 4013074:	00000000 	call	0 <__alt_mem_dram_ctrl-0x4000000>
 4013078:	d9400017 	ldw	r5,0(sp)
 401307c:	d9800117 	ldw	r6,4(sp)
 4013080:	d9c00217 	ldw	r7,8(sp)
 4013084:	10001d26 	beq	r2,zero,40130fc <__register_exitproc+0x110>
 4013088:	81000017 	ldw	r4,0(r16)
 401308c:	10000115 	stw	zero,4(r2)
 4013090:	02000044 	movi	r8,1
 4013094:	22405217 	ldw	r9,328(r4)
 4013098:	0007883a 	mov	r3,zero
 401309c:	12400015 	stw	r9,0(r2)
 40130a0:	20805215 	stw	r2,328(r4)
 40130a4:	10006215 	stw	zero,392(r2)
 40130a8:	10006315 	stw	zero,396(r2)
 40130ac:	883fde26 	beq	r17,zero,4013028 <__alt_data_end+0xfc013028>
 40130b0:	18c9883a 	add	r4,r3,r3
 40130b4:	2109883a 	add	r4,r4,r4
 40130b8:	1109883a 	add	r4,r2,r4
 40130bc:	21802215 	stw	r6,136(r4)
 40130c0:	01800044 	movi	r6,1
 40130c4:	12406217 	ldw	r9,392(r2)
 40130c8:	30cc983a 	sll	r6,r6,r3
 40130cc:	4992b03a 	or	r9,r9,r6
 40130d0:	12406215 	stw	r9,392(r2)
 40130d4:	21c04215 	stw	r7,264(r4)
 40130d8:	01000084 	movi	r4,2
 40130dc:	893fd21e 	bne	r17,r4,4013028 <__alt_data_end+0xfc013028>
 40130e0:	11006317 	ldw	r4,396(r2)
 40130e4:	218cb03a 	or	r6,r4,r6
 40130e8:	11806315 	stw	r6,396(r2)
 40130ec:	003fce06 	br	4013028 <__alt_data_end+0xfc013028>
 40130f0:	18805304 	addi	r2,r3,332
 40130f4:	18805215 	stw	r2,328(r3)
 40130f8:	003fc606 	br	4013014 <__alt_data_end+0xfc013014>
 40130fc:	00bfffc4 	movi	r2,-1
 4013100:	003fd006 	br	4013044 <__alt_data_end+0xfc013044>

04013104 <__call_exitprocs>:
 4013104:	defff504 	addi	sp,sp,-44
 4013108:	df000915 	stw	fp,36(sp)
 401310c:	dd400615 	stw	r21,24(sp)
 4013110:	dc800315 	stw	r18,12(sp)
 4013114:	dfc00a15 	stw	ra,40(sp)
 4013118:	ddc00815 	stw	r23,32(sp)
 401311c:	dd800715 	stw	r22,28(sp)
 4013120:	dd000515 	stw	r20,20(sp)
 4013124:	dcc00415 	stw	r19,16(sp)
 4013128:	dc400215 	stw	r17,8(sp)
 401312c:	dc000115 	stw	r16,4(sp)
 4013130:	d9000015 	stw	r4,0(sp)
 4013134:	2839883a 	mov	fp,r5
 4013138:	04800044 	movi	r18,1
 401313c:	057fffc4 	movi	r21,-1
 4013140:	008100f4 	movhi	r2,1027
 4013144:	1098bb04 	addi	r2,r2,25324
 4013148:	12000017 	ldw	r8,0(r2)
 401314c:	45005217 	ldw	r20,328(r8)
 4013150:	44c05204 	addi	r19,r8,328
 4013154:	a0001c26 	beq	r20,zero,40131c8 <__call_exitprocs+0xc4>
 4013158:	a0800117 	ldw	r2,4(r20)
 401315c:	15ffffc4 	addi	r23,r2,-1
 4013160:	b8000d16 	blt	r23,zero,4013198 <__call_exitprocs+0x94>
 4013164:	14000044 	addi	r16,r2,1
 4013168:	8421883a 	add	r16,r16,r16
 401316c:	8421883a 	add	r16,r16,r16
 4013170:	84402004 	addi	r17,r16,128
 4013174:	a463883a 	add	r17,r20,r17
 4013178:	a421883a 	add	r16,r20,r16
 401317c:	e0001e26 	beq	fp,zero,40131f8 <__call_exitprocs+0xf4>
 4013180:	80804017 	ldw	r2,256(r16)
 4013184:	e0801c26 	beq	fp,r2,40131f8 <__call_exitprocs+0xf4>
 4013188:	bdffffc4 	addi	r23,r23,-1
 401318c:	843fff04 	addi	r16,r16,-4
 4013190:	8c7fff04 	addi	r17,r17,-4
 4013194:	bd7ff91e 	bne	r23,r21,401317c <__alt_data_end+0xfc01317c>
 4013198:	00800034 	movhi	r2,0
 401319c:	10800004 	addi	r2,r2,0
 40131a0:	10000926 	beq	r2,zero,40131c8 <__call_exitprocs+0xc4>
 40131a4:	a0800117 	ldw	r2,4(r20)
 40131a8:	1000301e 	bne	r2,zero,401326c <__call_exitprocs+0x168>
 40131ac:	a0800017 	ldw	r2,0(r20)
 40131b0:	10003226 	beq	r2,zero,401327c <__call_exitprocs+0x178>
 40131b4:	a009883a 	mov	r4,r20
 40131b8:	98800015 	stw	r2,0(r19)
 40131bc:	00000000 	call	0 <__alt_mem_dram_ctrl-0x4000000>
 40131c0:	9d000017 	ldw	r20,0(r19)
 40131c4:	a03fe41e 	bne	r20,zero,4013158 <__alt_data_end+0xfc013158>
 40131c8:	dfc00a17 	ldw	ra,40(sp)
 40131cc:	df000917 	ldw	fp,36(sp)
 40131d0:	ddc00817 	ldw	r23,32(sp)
 40131d4:	dd800717 	ldw	r22,28(sp)
 40131d8:	dd400617 	ldw	r21,24(sp)
 40131dc:	dd000517 	ldw	r20,20(sp)
 40131e0:	dcc00417 	ldw	r19,16(sp)
 40131e4:	dc800317 	ldw	r18,12(sp)
 40131e8:	dc400217 	ldw	r17,8(sp)
 40131ec:	dc000117 	ldw	r16,4(sp)
 40131f0:	dec00b04 	addi	sp,sp,44
 40131f4:	f800283a 	ret
 40131f8:	a0800117 	ldw	r2,4(r20)
 40131fc:	80c00017 	ldw	r3,0(r16)
 4013200:	10bfffc4 	addi	r2,r2,-1
 4013204:	15c01426 	beq	r2,r23,4013258 <__call_exitprocs+0x154>
 4013208:	80000015 	stw	zero,0(r16)
 401320c:	183fde26 	beq	r3,zero,4013188 <__alt_data_end+0xfc013188>
 4013210:	95c8983a 	sll	r4,r18,r23
 4013214:	a0806217 	ldw	r2,392(r20)
 4013218:	a5800117 	ldw	r22,4(r20)
 401321c:	2084703a 	and	r2,r4,r2
 4013220:	10000b26 	beq	r2,zero,4013250 <__call_exitprocs+0x14c>
 4013224:	a0806317 	ldw	r2,396(r20)
 4013228:	2088703a 	and	r4,r4,r2
 401322c:	20000c1e 	bne	r4,zero,4013260 <__call_exitprocs+0x15c>
 4013230:	89400017 	ldw	r5,0(r17)
 4013234:	d9000017 	ldw	r4,0(sp)
 4013238:	183ee83a 	callr	r3
 401323c:	a0800117 	ldw	r2,4(r20)
 4013240:	15bfbf1e 	bne	r2,r22,4013140 <__alt_data_end+0xfc013140>
 4013244:	98800017 	ldw	r2,0(r19)
 4013248:	153fcf26 	beq	r2,r20,4013188 <__alt_data_end+0xfc013188>
 401324c:	003fbc06 	br	4013140 <__alt_data_end+0xfc013140>
 4013250:	183ee83a 	callr	r3
 4013254:	003ff906 	br	401323c <__alt_data_end+0xfc01323c>
 4013258:	a5c00115 	stw	r23,4(r20)
 401325c:	003feb06 	br	401320c <__alt_data_end+0xfc01320c>
 4013260:	89000017 	ldw	r4,0(r17)
 4013264:	183ee83a 	callr	r3
 4013268:	003ff406 	br	401323c <__alt_data_end+0xfc01323c>
 401326c:	a0800017 	ldw	r2,0(r20)
 4013270:	a027883a 	mov	r19,r20
 4013274:	1029883a 	mov	r20,r2
 4013278:	003fb606 	br	4013154 <__alt_data_end+0xfc013154>
 401327c:	0005883a 	mov	r2,zero
 4013280:	003ffb06 	br	4013270 <__alt_data_end+0xfc013270>

04013284 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4013284:	defffd04 	addi	sp,sp,-12
 4013288:	df000215 	stw	fp,8(sp)
 401328c:	df000204 	addi	fp,sp,8
 4013290:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4013294:	0001883a 	nop
 4013298:	e0bfff17 	ldw	r2,-4(fp)
 401329c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40132a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40132a4:	10000226 	beq	r2,zero,40132b0 <_exit+0x2c>
    ALT_SIM_FAIL();
 40132a8:	002af070 	cmpltui	zero,zero,43969
 40132ac:	00000106 	br	40132b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40132b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40132b4:	003fff06 	br	40132b4 <__alt_data_end+0xfc0132b4>
