
Software_LCD_Touch.elf:     file format elf32-littlenios2
Software_LCD_Touch.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000317a0 memsz 0x000317a0 flags r-x
    LOAD off    0x000327c0 vaddr 0x040317c0 paddr 0x04034a30 align 2**12
         filesz 0x00003270 memsz 0x00003270 flags rw-
    LOAD off    0x00035ca0 vaddr 0x04037ca0 paddr 0x04037ca0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000118cc  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001fcb0  04011b10  04011b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003270  040317c0  04034a30  000327c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  04037ca0  04037ca0  00035ca0  2**2
                  ALLOC, SMALL_DATA
  6 .dram_ctrl    00000000  04037e00  04037e00  00035a30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00035a30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001048  00000000  00000000  00035a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000261de  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000098bf  00000000  00000000  0005cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000beda  00000000  00000000  0006653d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002560  00000000  00000000  00072418  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c19  00000000  00000000  00074978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  00079591  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00090dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00090e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000976ca  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000976cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000976d0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000976d1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000976d2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000976d6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000976da  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000976de  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000976e7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000976f0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000976f9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000042  00000000  00000000  000976ff  2**0
                  CONTENTS, READONLY
 29 .jdi          00003575  00000000  00000000  00097741  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006f1b5  00000000  00000000  0009acb6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04011b10 l    d  .rodata	00000000 .rodata
040317c0 l    d  .rwdata	00000000 .rwdata
04037ca0 l    d  .bss	00000000 .bss
04037e00 l    d  .dram_ctrl	00000000 .dram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Software_LCD_Touch_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 arial_24.c
00000000 l    df *ABS*	00000000 bahnschriftCondensed_22.c
00000000 l    df *ABS*	00000000 bahnschriftCondensed_24.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 gui.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
040176a0 l     O .rodata	000000b6 tahomabold_20_33
04017756 l     O .rodata	00000104 tahomabold_20_34
0401785a l     O .rodata	000001a0 tahomabold_20_35
040179fa l     O .rodata	00000152 tahomabold_20_36
04017b4c l     O .rodata	00000270 tahomabold_20_37
04017dbc l     O .rodata	000001ba tahomabold_20_38
04017f76 l     O .rodata	0000009c tahomabold_20_39
04018012 l     O .rodata	000000ea tahomabold_20_40
040180fc l     O .rodata	000000ea tahomabold_20_41
040181e6 l     O .rodata	00000152 tahomabold_20_42
04018338 l     O .rodata	000001a0 tahomabold_20_43
040184d8 l     O .rodata	0000009c tahomabold_20_44
04018574 l     O .rodata	000000ea tahomabold_20_45
0401865e l     O .rodata	0000009c tahomabold_20_46
040186fa l     O .rodata	00000138 tahomabold_20_47
04018832 l     O .rodata	00000152 tahomabold_20_48
04018984 l     O .rodata	00000152 tahomabold_20_49
04018ad6 l     O .rodata	00000152 tahomabold_20_50
04018c28 l     O .rodata	00000152 tahomabold_20_51
04018d7a l     O .rodata	00000152 tahomabold_20_52
04018ecc l     O .rodata	00000152 tahomabold_20_53
0401901e l     O .rodata	00000152 tahomabold_20_54
04019170 l     O .rodata	00000152 tahomabold_20_55
040192c2 l     O .rodata	00000152 tahomabold_20_56
04019414 l     O .rodata	00000152 tahomabold_20_57
04019566 l     O .rodata	000000b6 tahomabold_20_58
0401961c l     O .rodata	000000b6 tahomabold_20_59
040196d2 l     O .rodata	000001a0 tahomabold_20_60
04019872 l     O .rodata	000001a0 tahomabold_20_61
04019a12 l     O .rodata	000001a0 tahomabold_20_62
04019bb2 l     O .rodata	0000011e tahomabold_20_63
04019cd0 l     O .rodata	000001d4 tahomabold_20_64
04019ea4 l     O .rodata	0000016c tahomabold_20_65
0401a010 l     O .rodata	0000016c tahomabold_20_66
0401a17c l     O .rodata	00000152 tahomabold_20_67
0401a2ce l     O .rodata	00000186 tahomabold_20_68
0401a454 l     O .rodata	00000138 tahomabold_20_69
0401a58c l     O .rodata	00000138 tahomabold_20_70
0401a6c4 l     O .rodata	00000186 tahomabold_20_71
0401a84a l     O .rodata	00000186 tahomabold_20_72
0401a9d0 l     O .rodata	00000104 tahomabold_20_73
0401aad4 l     O .rodata	00000104 tahomabold_20_74
0401abd8 l     O .rodata	0000016c tahomabold_20_75
0401ad44 l     O .rodata	0000011e tahomabold_20_76
0401ae62 l     O .rodata	000001d4 tahomabold_20_77
0401b036 l     O .rodata	00000186 tahomabold_20_78
0401b1bc l     O .rodata	00000186 tahomabold_20_79
0401b342 l     O .rodata	00000152 tahomabold_20_80
0401b494 l     O .rodata	00000186 tahomabold_20_81
0401b61a l     O .rodata	00000186 tahomabold_20_82
0401b7a0 l     O .rodata	00000152 tahomabold_20_83
0401b8f2 l     O .rodata	00000138 tahomabold_20_84
0401ba2a l     O .rodata	00000186 tahomabold_20_85
0401bbb0 l     O .rodata	0000016c tahomabold_20_86
0401bd1c l     O .rodata	00000222 tahomabold_20_87
0401bf3e l     O .rodata	0000016c tahomabold_20_88
0401c0aa l     O .rodata	0000016c tahomabold_20_89
0401c216 l     O .rodata	00000138 tahomabold_20_90
0401c34e l     O .rodata	000000ea tahomabold_20_91
0401c438 l     O .rodata	00000138 tahomabold_20_92
0401c570 l     O .rodata	000000ea tahomabold_20_93
0401c65a l     O .rodata	000001a0 tahomabold_20_94
0401c7fa l     O .rodata	00000152 tahomabold_20_95
0401c94c l     O .rodata	0000011e tahomabold_20_96
0401ca6a l     O .rodata	00000138 tahomabold_20_97
0401cba2 l     O .rodata	00000152 tahomabold_20_98
0401ccf4 l     O .rodata	0000011e tahomabold_20_99
0401ce12 l     O .rodata	00000152 tahomabold_20_100
0401cf64 l     O .rodata	00000138 tahomabold_20_101
0401d09c l     O .rodata	000000d0 tahomabold_20_102
0401d16c l     O .rodata	00000152 tahomabold_20_103
0401d2be l     O .rodata	00000152 tahomabold_20_104
0401d410 l     O .rodata	0000009c tahomabold_20_105
0401d4ac l     O .rodata	000000ea tahomabold_20_106
0401d596 l     O .rodata	00000138 tahomabold_20_107
0401d6ce l     O .rodata	0000009c tahomabold_20_108
0401d76a l     O .rodata	000001ee tahomabold_20_109
0401d958 l     O .rodata	00000152 tahomabold_20_110
0401daaa l     O .rodata	00000138 tahomabold_20_111
0401dbe2 l     O .rodata	00000152 tahomabold_20_112
0401dd34 l     O .rodata	00000152 tahomabold_20_113
0401de86 l     O .rodata	000000ea tahomabold_20_114
0401df70 l     O .rodata	00000104 tahomabold_20_115
0401e074 l     O .rodata	000000d0 tahomabold_20_116
0401e144 l     O .rodata	00000152 tahomabold_20_117
0401e296 l     O .rodata	00000138 tahomabold_20_118
0401e3ce l     O .rodata	000001d4 tahomabold_20_119
0401e5a2 l     O .rodata	00000138 tahomabold_20_120
0401e6da l     O .rodata	00000138 tahomabold_20_121
0401e812 l     O .rodata	0000011e tahomabold_20_122
0401e930 l     O .rodata	00000138 tahomabold_20_123
0401ea68 l     O .rodata	00000152 tahomabold_20_124
0401ebba l     O .rodata	00000138 tahomabold_20_125
0401ecf2 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0401ee92 l     O .rodata	000001b8 tahomabold_32_33
0401f04a l     O .rodata	00000280 tahomabold_32_34
0401f2ca l     O .rodata	00000410 tahomabold_32_35
0401f6da l     O .rodata	00000320 tahomabold_32_36
0401f9fa l     O .rodata	000005f0 tahomabold_32_37
0401ffea l     O .rodata	00000410 tahomabold_32_38
040203fa l     O .rodata	00000168 tahomabold_32_39
04020562 l     O .rodata	00000258 tahomabold_32_40
040207ba l     O .rodata	00000258 tahomabold_32_41
04020a12 l     O .rodata	00000320 tahomabold_32_42
04020d32 l     O .rodata	00000410 tahomabold_32_43
04021142 l     O .rodata	00000190 tahomabold_32_44
040212d2 l     O .rodata	00000230 tahomabold_32_45
04021502 l     O .rodata	00000190 tahomabold_32_46
04021692 l     O .rodata	000002d0 tahomabold_32_47
04021962 l     O .rodata	00000320 tahomabold_32_48
04021c82 l     O .rodata	00000320 tahomabold_32_49
04021fa2 l     O .rodata	00000320 tahomabold_32_50
040222c2 l     O .rodata	00000320 tahomabold_32_51
040225e2 l     O .rodata	00000320 tahomabold_32_52
04022902 l     O .rodata	00000320 tahomabold_32_53
04022c22 l     O .rodata	00000320 tahomabold_32_54
04022f42 l     O .rodata	00000320 tahomabold_32_55
04023262 l     O .rodata	00000320 tahomabold_32_56
04023582 l     O .rodata	00000320 tahomabold_32_57
040238a2 l     O .rodata	000001e0 tahomabold_32_58
04023a82 l     O .rodata	000001e0 tahomabold_32_59
04023c62 l     O .rodata	00000410 tahomabold_32_60
04024072 l     O .rodata	00000410 tahomabold_32_61
04024482 l     O .rodata	00000410 tahomabold_32_62
04024892 l     O .rodata	000002d0 tahomabold_32_63
04024b62 l     O .rodata	00000488 tahomabold_32_64
04024fea l     O .rodata	00000370 tahomabold_32_65
0402535a l     O .rodata	00000370 tahomabold_32_66
040256ca l     O .rodata	00000348 tahomabold_32_67
04025a12 l     O .rodata	000003c0 tahomabold_32_68
04025dd2 l     O .rodata	00000320 tahomabold_32_69
040260f2 l     O .rodata	000002f8 tahomabold_32_70
040263ea l     O .rodata	000003c0 tahomabold_32_71
040267aa l     O .rodata	000003c0 tahomabold_32_72
04026b6a l     O .rodata	00000258 tahomabold_32_73
04026dc2 l     O .rodata	00000280 tahomabold_32_74
04027042 l     O .rodata	00000398 tahomabold_32_75
040273da l     O .rodata	000002d0 tahomabold_32_76
040276aa l     O .rodata	00000488 tahomabold_32_77
04027b32 l     O .rodata	000003e8 tahomabold_32_78
04027f1a l     O .rodata	000003e8 tahomabold_32_79
04028302 l     O .rodata	00000348 tahomabold_32_80
0402864a l     O .rodata	000003e8 tahomabold_32_81
04028a32 l     O .rodata	000003c0 tahomabold_32_82
04028df2 l     O .rodata	00000320 tahomabold_32_83
04029112 l     O .rodata	00000320 tahomabold_32_84
04029432 l     O .rodata	000003c0 tahomabold_32_85
040297f2 l     O .rodata	00000370 tahomabold_32_86
04029b62 l     O .rodata	00000528 tahomabold_32_87
0402a08a l     O .rodata	00000370 tahomabold_32_88
0402a3fa l     O .rodata	00000370 tahomabold_32_89
0402a76a l     O .rodata	00000320 tahomabold_32_90
0402aa8a l     O .rodata	00000258 tahomabold_32_91
0402ace2 l     O .rodata	000002d0 tahomabold_32_92
0402afb2 l     O .rodata	00000258 tahomabold_32_93
0402b20a l     O .rodata	00000410 tahomabold_32_94
0402b61a l     O .rodata	00000320 tahomabold_32_95
0402b93a l     O .rodata	000002a8 tahomabold_32_96
0402bbe2 l     O .rodata	000002f8 tahomabold_32_97
0402beda l     O .rodata	00000320 tahomabold_32_98
0402c1fa l     O .rodata	000002a8 tahomabold_32_99
0402c4a2 l     O .rodata	00000320 tahomabold_32_100
0402c7c2 l     O .rodata	000002f8 tahomabold_32_101
0402caba l     O .rodata	00000230 tahomabold_32_102
0402ccea l     O .rodata	00000320 tahomabold_32_103
0402d00a l     O .rodata	00000320 tahomabold_32_104
0402d32a l     O .rodata	00000190 tahomabold_32_105
0402d4ba l     O .rodata	00000208 tahomabold_32_106
0402d6c2 l     O .rodata	000002f8 tahomabold_32_107
0402d9ba l     O .rodata	00000190 tahomabold_32_108
0402db4a l     O .rodata	000004d8 tahomabold_32_109
0402e022 l     O .rodata	00000320 tahomabold_32_110
0402e342 l     O .rodata	00000320 tahomabold_32_111
0402e662 l     O .rodata	00000320 tahomabold_32_112
0402e982 l     O .rodata	00000320 tahomabold_32_113
0402eca2 l     O .rodata	00000230 tahomabold_32_114
0402eed2 l     O .rodata	00000280 tahomabold_32_115
0402f152 l     O .rodata	00000208 tahomabold_32_116
0402f35a l     O .rodata	00000320 tahomabold_32_117
0402f67a l     O .rodata	000002f8 tahomabold_32_118
0402f972 l     O .rodata	00000460 tahomabold_32_119
0402fdd2 l     O .rodata	000002f8 tahomabold_32_120
040300ca l     O .rodata	000002d0 tahomabold_32_121
0403039a l     O .rodata	000002a8 tahomabold_32_122
04030642 l     O .rodata	00000320 tahomabold_32_123
04030962 l     O .rodata	00000320 tahomabold_32_124
04030c82 l     O .rodata	00000320 tahomabold_32_125
04030fa2 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 touch_isr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0403150e l     O .rodata	00000010 zeroes.4404
04004164 l     F .text	000000bc __sbprintf
0403151e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04004374 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04005ea4 l     F .text	00000008 __fp_unlock
04005eb8 l     F .text	0000019c __sinit.part.1
04006054 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04032f40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04033384 l     O .rwdata	00000020 lc_ctype_charset
04033364 l     O .rwdata	00000020 lc_message_charset
040333a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04031550 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04009450 l     F .text	000000fc __sprint_r.part.0
04031684 l     O .rodata	00000010 blanks.4348
04031674 l     O .rodata	00000010 zeroes.4349
0400a9dc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400e4e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400e5f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400e61c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400e9a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400ea88 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400eb74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400ed48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04034a24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400f168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400f29c l     F .text	00000034 alt_dev_reg
0403398c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 LT24_Controller.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04010088 l     F .text	0000020c altera_avalon_jtag_uart_irq
04010294 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04010ac8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04010e88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040110f8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04011238 l     F .text	0000003c alt_get_errno
04011274 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04037cd4 g     O .bss	00000004 alt_instruction_exception_handler
04008a94 g     F .text	00000074 _mprec_log10
04008b80 g     F .text	0000008c __any_on
0400af78 g     F .text	00000054 _isatty_r
0403155c g     O .rodata	00000028 __mprec_tinytens
0400f61c g     F .text	00000070 LCD_DrawPoint
0400ec84 g     F .text	0000007c alt_main
04001de4 g     F .text	000000c0 _puts_r
04037d00 g     O .bss	00000100 alt_irq
0400afcc g     F .text	00000060 _lseek_r
04034a30 g       *ABS*	00000000 __flash_rwdata_start
0400d010 g     F .text	00000088 .hidden __eqdf2
04015d7c g     O .rodata	0000017c arial_22ptDescriptors
04037e00 g       *ABS*	00000000 __alt_heap_start
04001da8 g     F .text	0000003c printf
0400b1e4 g     F .text	0000009c _wcrtomb_r
04009310 g     F .text	0000005c __sseek
040061f4 g     F .text	00000010 __sinit
0400b08c g     F .text	00000140 __swbuf_r
04006cbc g     F .text	0000007c _setlocale_r
0400605c g     F .text	00000068 __sfmoreglue
0400ed24 g     F .text	00000024 __malloc_unlock
040349ee g     O .rwdata	00000001 pen_IRS_enable
040005e4 g     F .text	000000b0 draw_line
04000a60 g     F .text	00000264 vid_print_string_alpha
0400798c g     F .text	0000015c memmove
040061dc g     F .text	00000018 _cleanup
04007c10 g     F .text	000000a8 _Balloc
0400d098 g     F .text	000000dc .hidden __gtdf2
0401148c g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
040349ed g     O .rwdata	00000001 CommandGetY
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400f598 g     F .text	00000084 LCD_Clear
0400af1c g     F .text	0000005c _fstat_r
04037cb8 g     O .bss	00000004 errno
0400928c g     F .text	00000008 __seofread
04037cc4 g     O .bss	00000004 alt_argv
0403c9ec g       *ABS*	00000000 _gp
0400f138 g     F .text	00000030 usleep
04001b38 g     F .text	00000068 touch_init
04000cc4 g     F .text	00000148 seperate_color_channels
0403380c g     O .rwdata	00000180 alt_fd_list
040114b0 g     F .text	00000090 alt_find_dev
04007844 g     F .text	00000148 memcpy
04005eac g     F .text	0000000c _cleanup_r
0400e2fc g     F .text	000000dc .hidden __floatsidf
040111bc g     F .text	0000007c alt_io_redirect
0400d174 g     F .text	000000f4 .hidden __ltdf2
04011b10 g       *ABS*	00000000 __DTOR_END__
04001ea4 g     F .text	00000014 puts
0401105c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04009170 g     F .text	00000074 __fpclassifyd
040089f0 g     F .text	000000a4 __ratio
0400a9c0 g     F .text	0000001c __vfiprintf_internal
040008e0 g     F .text	000000c0 draw_main_screen
0401048c g     F .text	0000021c altera_avalon_jtag_uart_read
04001d78 g     F .text	00000030 _printf_r
04001cbc g     F .text	00000064 .hidden __udivsi3
0400e9e4 g     F .text	000000a4 isatty
040315ac g     O .rodata	000000c8 __mprec_tens
04006d38 g     F .text	0000000c __locale_charset
040116ec g     F .text	00000090 alt_icache_flush
04037cb4 g     O .bss	00000004 __malloc_top_pad
040349f8 g     O .rwdata	00000004 __mb_cur_max
04006d68 g     F .text	0000000c _localeconv_r
0400801c g     F .text	0000003c __i2b
04006678 g     F .text	000004bc __sfvwrite_r
040091e4 g     F .text	00000054 _sbrk_r
0400b02c g     F .text	00000060 _read_r
04034a18 g     O .rwdata	00000004 alt_max_fd
0400ac10 g     F .text	000000f0 _fclose_r
04005e74 g     F .text	00000030 fflush
04037cb0 g     O .bss	00000004 __malloc_max_sbrked_mem
04032380 g     O .rwdata	00000bc0 tahomabold_32
0400be7c g     F .text	000008ac .hidden __adddf3
04008798 g     F .text	0000010c __b2d
0400b944 g     F .text	00000538 .hidden __umoddi3
0400ebb0 g     F .text	000000d4 lseek
040349f0 g     O .rwdata	00000004 _global_impure_ptr
04008c0c g     F .text	00000564 _realloc_r
04037e00 g       *ABS*	00000000 __bss_end
0400e8b8 g     F .text	000000f0 alt_iic_isr_register
0400f030 g     F .text	00000108 alt_tick
0400b3cc g     F .text	00000578 .hidden __udivdi3
0400ae78 g     F .text	00000024 _fputwc_r
04031584 g     O .rodata	00000028 __mprec_bigtens
04007e00 g     F .text	00000104 __s2b
0400e3d8 g     F .text	000000a8 .hidden __floatunsidf
040084d8 g     F .text	00000060 __mcmp
04006214 g     F .text	00000018 __fp_lock_all
0400e86c g     F .text	0000004c alt_ic_irq_enabled
04014898 g     O .rodata	000014e4 arial_22ptBitmaps
0400ef94 g     F .text	0000009c alt_alarm_stop
04037cbc g     O .bss	00000004 alt_irq_active
04015ef8 g     O .rodata	00001780 bahnschriftCondensed_24ptBitmaps
040000fc g     F .exceptions	000000d4 alt_irq_handler
040337e4 g     O .rwdata	00000028 alt_dev_null
040009a0 g     F .text	000000c0 draw_calibrating_screen
04010e40 g     F .text	00000048 alt_dcache_flush_all
04007f04 g     F .text	00000068 __hi0bits
0400e27c g     F .text	00000080 .hidden __fixdfsi
04034a30 g       *ABS*	00000000 __ram_rwdata_end
04034a10 g     O .rwdata	00000008 alt_dev_list
0400f1a4 g     F .text	000000f8 write
0400036c g     F .text	00000278 draw_sloped_line
040317c0 g       *ABS*	00000000 __ram_rodata_end
0400e658 g     F .text	000000b0 fstat
0400d174 g     F .text	000000f4 .hidden __ledf2
04008250 g     F .text	00000140 __pow5mult
04009564 g     F .text	0000145c ___vfiprintf_internal_r
04037ca8 g     O .bss	00000004 __nlocale_changed
04001d20 g     F .text	00000058 .hidden __umodsi3
0400f478 g     F .text	00000120 LCD_SetRect
04001818 g     F .text	00000320 touch_isr
04037e00 g       *ABS*	00000000 end
0400ffc8 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040014cc g     F .text	000001f0 vid_print_char
04011b10 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04010b40 g     F .text	0000007c alt_avalon_timer_sc_init
0400e480 g     F .text	00000064 .hidden __clzsi2
040106a8 g     F .text	00000224 altera_avalon_jtag_uart_write
04006204 g     F .text	00000004 __sfp_lock_acquire
04007760 g     F .text	000000e4 memchr
04001f50 g     F .text	000021f8 ___vfprintf_internal_r
04006368 g     F .text	00000310 _free_r
04006d44 g     F .text	00000010 __locale_mb_cur_max
0400f3c0 g     F .text	000000b8 LCD_SetCursor
0401195c g     F .text	00000180 __call_exitprocs
04037ca4 g     O .bss	00000004 __mlocale_changed
040349fc g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04037ccc g     O .bss	00000004 _alt_tick_rate
04008390 g     F .text	00000148 __lshift
040108cc g     F .text	000001fc alt_avalon_spi_command
04037cd0 g     O .bss	00000004 _alt_nticks
0400ed84 g     F .text	000000fc read
0400f308 g     F .text	00000068 alt_sys_init
04011844 g     F .text	00000118 __register_exitproc
04008058 g     F .text	000001f8 __multiply
04010334 g     F .text	00000068 altera_avalon_jtag_uart_close
040349ec g     O .rwdata	00000001 CommandGetX
040317c0 g       *ABS*	00000000 __ram_rwdata_start
04011b10 g       *ABS*	00000000 __ram_rodata_start
04037cd8 g     O .bss	00000028 __malloc_current_mallinfo
040088a4 g     F .text	0000014c __d2b
0400fe64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04011648 g     F .text	000000a4 alt_get_fd
04010ce8 g     F .text	00000158 alt_busy_sleep
0400aaf8 g     F .text	00000054 _close_r
04000f3c g     F .text	0000022c alpha_blending
040117c8 g     F .text	0000007c memcmp
0400ff24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04037e00 g       *ABS*	00000000 __alt_stack_base
0400ff74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400074c g     F .text	00000194 draw_box
04004220 g     F .text	00000154 __swsetup_r
0400c728 g     F .text	000008e8 .hidden __divdf3
040060c4 g     F .text	00000118 __sfp
04008b08 g     F .text	00000078 __copybits
040333dc g     O .rwdata	00000408 __malloc_av_
04006210 g     F .text	00000004 __sinit_lock_release
0400d268 g     F .text	00000718 .hidden __muldf3
04000290 g     F .text	00000050 Delay_Ms_1
04009238 g     F .text	00000054 __sread
04011540 g     F .text	00000108 alt_find_file
04010ec4 g     F .text	000000a4 alt_dev_llist_insert
0400ed00 g     F .text	00000024 __malloc_lock
0400eee4 g     F .text	000000b0 sbrk
04005e18 g     F .text	0000005c _fflush_r
0400ab4c g     F .text	000000c4 _calloc_r
04037ca0 g       *ABS*	00000000 __bss_start
0400f7f4 g     F .text	00000670 LCD_Init
04007ae8 g     F .text	00000128 memset
040016bc g     F .text	0000015c main
04037cc8 g     O .bss	00000004 alt_envp
04037cac g     O .bss	00000004 __malloc_max_total_mem
0400fec4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400b1cc g     F .text	00000018 __swbuf
040317c0 g     O .rwdata	00000bc0 tahomabold_20
0400936c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04001168 g     F .text	00000220 vid_print_char_alpha
0400ad00 g     F .text	00000014 fclose
04004574 g     F .text	00001688 _dtoa_r
04006f54 g     F .text	0000080c _malloc_r
0400b340 g     F .text	00000030 __ascii_wctomb
04000694 g     F .text	000000b8 paint_block
04034a1c g     O .rwdata	00000004 alt_errno
04006b34 g     F .text	000000c4 _fwalk
0400f370 g     F .text	00000050 Delay_Ms
04001bc4 g     F .text	00000084 .hidden __divsi3
04006244 g     F .text	00000124 _malloc_trim_r
04011b10 g       *ABS*	00000000 __CTOR_END__
04009374 g     F .text	000000dc strcmp
04011b10 g       *ABS*	00000000 __flash_rodata_start
04011b10 g       *ABS*	00000000 __DTOR_LIST__
04000000 g       *ABS*	00000000 __alt_mem_dram_ctrl
0400d010 g     F .text	00000088 .hidden __nedf2
0400f2d0 g     F .text	00000038 alt_irq_init
0400ee80 g     F .text	00000064 alt_release_fd
04031694 g     O .rodata	00000100 .hidden __clz_tab
04037ca0 g     O .bss	00000004 _PathLocale
0401177c g     F .text	00000014 atexit
0400aa98 g     F .text	00000060 _write_r
04006d74 g     F .text	00000018 setlocale
040349f4 g     O .rwdata	00000004 _impure_ptr
04037cc0 g     O .bss	00000004 alt_argc
04005bfc g     F .text	0000021c __sflush_r
04010fc8 g     F .text	00000060 _do_dtors
04006d60 g     F .text	00000008 __locale_cjk_lang
040002e0 g     F .text	0000008c draw_horiz_line
04000020 g       .exceptions	00000000 alt_irq_entry
04008734 g     F .text	00000064 __ulp
0400622c g     F .text	00000018 __fp_unlock_all
04034a08 g     O .rwdata	00000008 alt_fs_list
04001388 g     F .text	00000144 vid_print_string
04000020 g       *ABS*	00000000 __ram_exceptions_start
04006d8c g     F .text	0000000c localeconv
0400e708 g     F .text	00000050 alt_ic_isr_register
04034a30 g       *ABS*	00000000 _edata
04037e00 g       *ABS*	00000000 _end
0400ad14 g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
0401039c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04001ba0 g     F .text	00000024 get_xy
0400e7e0 g     F .text	0000008c alt_ic_irq_disable
04009294 g     F .text	0000007c __swrite
04034a00 g     O .rwdata	00000004 __malloc_trim_threshold
04006d54 g     F .text	0000000c __locale_msgcharset
04011790 g     F .text	00000038 exit
0400f68c g     F .text	000000c8 LCD_DrawRect
04006bf8 g     F .text	000000c4 _fwalk_reent
04008538 g     F .text	000001fc __mdiff
04001c48 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006208 g     F .text	00000004 __sfp_lock_release
0400f754 g     F .text	000000a0 vid_set_pixel
04011adc g     F .text	00000034 _exit
04010bbc g     F .text	0000012c alt_alarm_start
04011b10 g     O .rodata	00002d88 arial_24ptBitmaps
04006d98 g     F .text	000001bc __smakebuf_r
04001eb8 g     F .text	00000098 strlen
04011338 g     F .text	00000154 open
0400d098 g     F .text	000000dc .hidden __gedf2
04034a04 g     O .rwdata	00000004 __wctomb
0400954c g     F .text	00000018 __sprint_r
04011028 g     F .text	00000034 alt_icache_flush_all
04034a20 g     O .rwdata	00000004 alt_priority_mask
0400e758 g     F .text	00000088 alt_ic_irq_enable
04004148 g     F .text	0000001c __vfprintf_internal
0400b370 g     F .text	0000005c _wctomb_r
0400d980 g     F .text	000008fc .hidden __subdf3
04007f6c g     F .text	000000b0 __lo0bits
04034a28 g     O .rwdata	00000008 alt_alarm_list
04010f68 g     F .text	00000060 _do_ctors
04000e0c g     F .text	00000130 merge_color_channels
0400b280 g     F .text	000000c0 wcrtomb
0400e520 g     F .text	000000d0 close
0400eaf0 g     F .text	00000084 alt_load
0400ae9c g     F .text	00000080 fputwc
0400620c g     F .text	00000004 __sinit_lock_acquire
04007ce0 g     F .text	00000120 __multadd
04007cb8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	109f4004 	addi	r2,r2,32000
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	109f4004 	addi	r2,r2,32000
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0acba17 	ldw	r2,-19736(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0acba17 	ldw	r2,-19736(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4000260:	d6b27b14 	ori	gp,gp,51692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4000268:	109f2814 	ori	r2,r2,31904

    movhi r3, %hi(__bss_end)
 400026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4000270:	18df8014 	ori	r3,r3,32256

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	400eaf00 	call	400eaf0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	400ec840 	call	400ec84 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <Delay_Ms_1>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms_1(alt_u16 count_ms)
{
 4000290:	defffd04 	addi	sp,sp,-12
 4000294:	dfc00215 	stw	ra,8(sp)
 4000298:	df000115 	stw	fp,4(sp)
 400029c:	df000104 	addi	fp,sp,4
 40002a0:	2005883a 	mov	r2,r4
 40002a4:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 40002a8:	00000206 	br	40002b4 <Delay_Ms_1+0x24>
    {
        usleep(1000);
 40002ac:	0100fa04 	movi	r4,1000
 40002b0:	400f1380 	call	400f138 <usleep>
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms_1(alt_u16 count_ms)
{
    while(count_ms--)
 40002b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40002b8:	10ffffc4 	addi	r3,r2,-1
 40002bc:	e0ffff0d 	sth	r3,-4(fp)
 40002c0:	10bfffcc 	andi	r2,r2,65535
 40002c4:	103ff91e 	bne	r2,zero,40002ac <__alt_data_end+0xfc0002ac>
    {
        usleep(1000);
    }
}
 40002c8:	0001883a 	nop
 40002cc:	e037883a 	mov	sp,fp
 40002d0:	dfc00117 	ldw	ra,4(sp)
 40002d4:	df000017 	ldw	fp,0(sp)
 40002d8:	dec00204 	addi	sp,sp,8
 40002dc:	f800283a 	ret

040002e0 <draw_horiz_line>:
 * Purpose : Drawing horizontal line
 * Return  : none
 *--------------------------------------------------*/

void draw_horiz_line (alt_u16 Hstart, alt_u16 Hend, alt_u16 V, alt_u16 color)
{
 40002e0:	defff904 	addi	sp,sp,-28
 40002e4:	dfc00615 	stw	ra,24(sp)
 40002e8:	df000515 	stw	fp,20(sp)
 40002ec:	df000504 	addi	fp,sp,20
 40002f0:	2011883a 	mov	r8,r4
 40002f4:	2809883a 	mov	r4,r5
 40002f8:	3007883a 	mov	r3,r6
 40002fc:	3805883a 	mov	r2,r7
 4000300:	e23ffc0d 	sth	r8,-16(fp)
 4000304:	e13ffd0d 	sth	r4,-12(fp)
 4000308:	e0fffe0d 	sth	r3,-8(fp)
 400030c:	e0bfff0d 	sth	r2,-4(fp)
	int x;
	for(x=Hstart;x<Hend;x++){
 4000310:	e0bffc0b 	ldhu	r2,-16(fp)
 4000314:	e0bffb15 	stw	r2,-20(fp)
 4000318:	00000b06 	br	4000348 <draw_horiz_line+0x68>

		LCD_DrawPoint(x, V, color);
 400031c:	e0bffb17 	ldw	r2,-20(fp)
 4000320:	10bfffcc 	andi	r2,r2,65535
 4000324:	e0fffe0b 	ldhu	r3,-8(fp)
 4000328:	e13fff0b 	ldhu	r4,-4(fp)
 400032c:	200d883a 	mov	r6,r4
 4000330:	180b883a 	mov	r5,r3
 4000334:	1009883a 	mov	r4,r2
 4000338:	400f61c0 	call	400f61c <LCD_DrawPoint>
 *--------------------------------------------------*/

void draw_horiz_line (alt_u16 Hstart, alt_u16 Hend, alt_u16 V, alt_u16 color)
{
	int x;
	for(x=Hstart;x<Hend;x++){
 400033c:	e0bffb17 	ldw	r2,-20(fp)
 4000340:	10800044 	addi	r2,r2,1
 4000344:	e0bffb15 	stw	r2,-20(fp)
 4000348:	e0bffd0b 	ldhu	r2,-12(fp)
 400034c:	e0fffb17 	ldw	r3,-20(fp)
 4000350:	18bff216 	blt	r3,r2,400031c <__alt_data_end+0xfc00031c>

		LCD_DrawPoint(x, V, color);
	}
}
 4000354:	0001883a 	nop
 4000358:	e037883a 	mov	sp,fp
 400035c:	dfc00117 	ldw	ra,4(sp)
 4000360:	df000017 	ldw	fp,0(sp)
 4000364:	dec00204 	addi	sp,sp,8
 4000368:	f800283a 	ret

0400036c <draw_sloped_line>:
                           alt_u16 vert_start,
                           alt_u16 horiz_end,
                           alt_u16 vert_end,
                           alt_u16 width,
                           alt_u16 color)
{
 400036c:	deffee04 	addi	sp,sp,-72
 4000370:	dfc01115 	stw	ra,68(sp)
 4000374:	df001015 	stw	fp,64(sp)
 4000378:	df001004 	addi	fp,sp,64
 400037c:	2013883a 	mov	r9,r4
 4000380:	2811883a 	mov	r8,r5
 4000384:	300b883a 	mov	r5,r6
 4000388:	3809883a 	mov	r4,r7
 400038c:	e0c00217 	ldw	r3,8(fp)
 4000390:	e0800317 	ldw	r2,12(fp)
 4000394:	e27ffa0d 	sth	r9,-24(fp)
 4000398:	e23ffb0d 	sth	r8,-20(fp)
 400039c:	e17ffc0d 	sth	r5,-16(fp)
 40003a0:	e13ffd0d 	sth	r4,-12(fp)
 40003a4:	e0fffe0d 	sth	r3,-8(fp)
 40003a8:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 40003ac:	e0fffc0b 	ldhu	r3,-16(fp)
 40003b0:	e0bffa0b 	ldhu	r2,-24(fp)
 40003b4:	1885c83a 	sub	r2,r3,r2
 40003b8:	1000010e 	bge	r2,zero,40003c0 <draw_sloped_line+0x54>
 40003bc:	0085c83a 	sub	r2,zero,r2
 40003c0:	e0bff015 	stw	r2,-64(fp)
  int vert_delta = abs(vert_end-vert_start);
 40003c4:	e0fffd0b 	ldhu	r3,-12(fp)
 40003c8:	e0bffb0b 	ldhu	r2,-20(fp)
 40003cc:	1885c83a 	sub	r2,r3,r2
 40003d0:	1000010e 	bge	r2,zero,40003d8 <draw_sloped_line+0x6c>
 40003d4:	0085c83a 	sub	r2,zero,r2
 40003d8:	e0bff115 	stw	r2,-60(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 40003dc:	e0bffa0b 	ldhu	r2,-24(fp)
 40003e0:	e0fffc0b 	ldhu	r3,-16(fp)
 40003e4:	1880032e 	bgeu	r3,r2,40003f4 <draw_sloped_line+0x88>
 40003e8:	00bfffc4 	movi	r2,-1
 40003ec:	e0bff215 	stw	r2,-56(fp)
 40003f0:	00000206 	br	40003fc <draw_sloped_line+0x90>
 40003f4:	00800044 	movi	r2,1
 40003f8:	e0bff215 	stw	r2,-56(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 40003fc:	e0bffb0b 	ldhu	r2,-20(fp)
 4000400:	e0fffd0b 	ldhu	r3,-12(fp)
 4000404:	1880032e 	bgeu	r3,r2,4000414 <draw_sloped_line+0xa8>
 4000408:	00bfffc4 	movi	r2,-1
 400040c:	e0bff315 	stw	r2,-52(fp)
 4000410:	00000206 	br	400041c <draw_sloped_line+0xb0>
 4000414:	00800044 	movi	r2,1
 4000418:	e0bff315 	stw	r2,-52(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 400041c:	e0fff017 	ldw	r3,-64(fp)
 4000420:	e0bff117 	ldw	r2,-60(fp)
 4000424:	18803516 	blt	r3,r2,40004fc <draw_sloped_line+0x190>
    int dPr   = vert_delta<<1;
 4000428:	e0bff117 	ldw	r2,-60(fp)
 400042c:	1085883a 	add	r2,r2,r2
 4000430:	e0bff615 	stw	r2,-40(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4000434:	e0bff017 	ldw	r2,-64(fp)
 4000438:	1085883a 	add	r2,r2,r2
 400043c:	1007883a 	mov	r3,r2
 4000440:	e0bff617 	ldw	r2,-40(fp)
 4000444:	10c5c83a 	sub	r2,r2,r3
 4000448:	e0bff715 	stw	r2,-36(fp)
    int P     = dPr - horiz_delta;
 400044c:	e0fff617 	ldw	r3,-40(fp)
 4000450:	e0bff017 	ldw	r2,-64(fp)
 4000454:	1885c83a 	sub	r2,r3,r2
 4000458:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 400045c:	00002406 	br	40004f0 <draw_sloped_line+0x184>
      // plot the pixel
    	LCD_DrawPoint(horiz_start, vert_start, color);
 4000460:	e0bffa0b 	ldhu	r2,-24(fp)
 4000464:	e0fffb0b 	ldhu	r3,-20(fp)
 4000468:	e13fff0b 	ldhu	r4,-4(fp)
 400046c:	200d883a 	mov	r6,r4
 4000470:	180b883a 	mov	r5,r3
 4000474:	1009883a 	mov	r4,r2
 4000478:	400f61c0 	call	400f61c <LCD_DrawPoint>
      // If we're moving both up and right
      if (P > 0) {
 400047c:	e0bff417 	ldw	r2,-48(fp)
 4000480:	00800f0e 	bge	zero,r2,40004c0 <draw_sloped_line+0x154>
        horiz_start+=horiz_incr;
 4000484:	e0bff217 	ldw	r2,-56(fp)
 4000488:	1007883a 	mov	r3,r2
 400048c:	e0bffa0b 	ldhu	r2,-24(fp)
 4000490:	1885883a 	add	r2,r3,r2
 4000494:	e0bffa0d 	sth	r2,-24(fp)
        vert_start+=vert_incr;
 4000498:	e0bff317 	ldw	r2,-52(fp)
 400049c:	1007883a 	mov	r3,r2
 40004a0:	e0bffb0b 	ldhu	r2,-20(fp)
 40004a4:	1885883a 	add	r2,r3,r2
 40004a8:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPru;
 40004ac:	e0fff417 	ldw	r3,-48(fp)
 40004b0:	e0bff717 	ldw	r2,-36(fp)
 40004b4:	1885883a 	add	r2,r3,r2
 40004b8:	e0bff415 	stw	r2,-48(fp)
 40004bc:	00000906 	br	40004e4 <draw_sloped_line+0x178>
      } else {
        horiz_start+=horiz_incr;
 40004c0:	e0bff217 	ldw	r2,-56(fp)
 40004c4:	1007883a 	mov	r3,r2
 40004c8:	e0bffa0b 	ldhu	r2,-24(fp)
 40004cc:	1885883a 	add	r2,r3,r2
 40004d0:	e0bffa0d 	sth	r2,-24(fp)
        P+=dPr;
 40004d4:	e0fff417 	ldw	r3,-48(fp)
 40004d8:	e0bff617 	ldw	r2,-40(fp)
 40004dc:	1885883a 	add	r2,r3,r2
 40004e0:	e0bff415 	stw	r2,-48(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 40004e4:	e0bff017 	ldw	r2,-64(fp)
 40004e8:	10bfffc4 	addi	r2,r2,-1
 40004ec:	e0bff015 	stw	r2,-64(fp)
 40004f0:	e0bff017 	ldw	r2,-64(fp)
 40004f4:	103fda0e 	bge	r2,zero,4000460 <__alt_data_end+0xfc000460>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 40004f8:	00003406 	br	40005cc <draw_sloped_line+0x260>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 40004fc:	e0bff017 	ldw	r2,-64(fp)
 4000500:	1085883a 	add	r2,r2,r2
 4000504:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (vert_delta<<1);
 4000508:	e0bff117 	ldw	r2,-60(fp)
 400050c:	1085883a 	add	r2,r2,r2
 4000510:	1007883a 	mov	r3,r2
 4000514:	e0bff817 	ldw	r2,-32(fp)
 4000518:	10c5c83a 	sub	r2,r2,r3
 400051c:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - vert_delta;
 4000520:	e0fff817 	ldw	r3,-32(fp)
 4000524:	e0bff117 	ldw	r2,-60(fp)
 4000528:	1885c83a 	sub	r2,r3,r2
 400052c:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4000530:	00002406 	br	40005c4 <draw_sloped_line+0x258>
      // plot the pixel
    	LCD_DrawPoint(horiz_start, vert_start, color);
 4000534:	e0bffa0b 	ldhu	r2,-24(fp)
 4000538:	e0fffb0b 	ldhu	r3,-20(fp)
 400053c:	e13fff0b 	ldhu	r4,-4(fp)
 4000540:	200d883a 	mov	r6,r4
 4000544:	180b883a 	mov	r5,r3
 4000548:	1009883a 	mov	r4,r2
 400054c:	400f61c0 	call	400f61c <LCD_DrawPoint>
      // If we're moving both up and right
      if (P > 0) {
 4000550:	e0bff517 	ldw	r2,-44(fp)
 4000554:	00800f0e 	bge	zero,r2,4000594 <draw_sloped_line+0x228>
        horiz_start+=horiz_incr;
 4000558:	e0bff217 	ldw	r2,-56(fp)
 400055c:	1007883a 	mov	r3,r2
 4000560:	e0bffa0b 	ldhu	r2,-24(fp)
 4000564:	1885883a 	add	r2,r3,r2
 4000568:	e0bffa0d 	sth	r2,-24(fp)
        vert_start+=vert_incr;
 400056c:	e0bff317 	ldw	r2,-52(fp)
 4000570:	1007883a 	mov	r3,r2
 4000574:	e0bffb0b 	ldhu	r2,-20(fp)
 4000578:	1885883a 	add	r2,r3,r2
 400057c:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPru;
 4000580:	e0fff517 	ldw	r3,-44(fp)
 4000584:	e0bff917 	ldw	r2,-28(fp)
 4000588:	1885883a 	add	r2,r3,r2
 400058c:	e0bff515 	stw	r2,-44(fp)
 4000590:	00000906 	br	40005b8 <draw_sloped_line+0x24c>
      } else {
        vert_start+=vert_incr;
 4000594:	e0bff317 	ldw	r2,-52(fp)
 4000598:	1007883a 	mov	r3,r2
 400059c:	e0bffb0b 	ldhu	r2,-20(fp)
 40005a0:	1885883a 	add	r2,r3,r2
 40005a4:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 40005a8:	e0fff517 	ldw	r3,-44(fp)
 40005ac:	e0bff817 	ldw	r2,-32(fp)
 40005b0:	1885883a 	add	r2,r3,r2
 40005b4:	e0bff515 	stw	r2,-44(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 40005b8:	e0bff117 	ldw	r2,-60(fp)
 40005bc:	10bfffc4 	addi	r2,r2,-1
 40005c0:	e0bff115 	stw	r2,-60(fp)
 40005c4:	e0bff117 	ldw	r2,-60(fp)
 40005c8:	103fda0e 	bge	r2,zero,4000534 <__alt_data_end+0xfc000534>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 40005cc:	0001883a 	nop
 40005d0:	e037883a 	mov	sp,fp
 40005d4:	dfc00117 	ldw	ra,4(sp)
 40005d8:	df000017 	ldw	fp,0(sp)
 40005dc:	dec00204 	addi	sp,sp,8
 40005e0:	f800283a 	ret

040005e4 <draw_line>:
 * Return  : none
 *--------------------------------------------------*/


void draw_line(alt_u16 horiz_start, alt_u16 vert_start, alt_u16 horiz_end, alt_u16 vert_end, alt_u16 width, alt_u16 color)
{
 40005e4:	defff604 	addi	sp,sp,-40
 40005e8:	dfc00915 	stw	ra,36(sp)
 40005ec:	df000815 	stw	fp,32(sp)
 40005f0:	df000804 	addi	fp,sp,32
 40005f4:	2013883a 	mov	r9,r4
 40005f8:	2811883a 	mov	r8,r5
 40005fc:	300b883a 	mov	r5,r6
 4000600:	3809883a 	mov	r4,r7
 4000604:	e0c00217 	ldw	r3,8(fp)
 4000608:	e0800317 	ldw	r2,12(fp)
 400060c:	e27ffa0d 	sth	r9,-24(fp)
 4000610:	e23ffb0d 	sth	r8,-20(fp)
 4000614:	e17ffc0d 	sth	r5,-16(fp)
 4000618:	e13ffd0d 	sth	r4,-12(fp)
 400061c:	e0fffe0d 	sth	r3,-8(fp)
 4000620:	e0bfff0d 	sth	r2,-4(fp)

  if( vert_start == vert_end )
 4000624:	e0fffb0b 	ldhu	r3,-20(fp)
 4000628:	e0bffd0b 	ldhu	r2,-12(fp)
 400062c:	18800a1e 	bne	r3,r2,4000658 <draw_line+0x74>
  {

    draw_horiz_line( horiz_start,
 4000630:	e0bffa0b 	ldhu	r2,-24(fp)
 4000634:	e0fffc0b 	ldhu	r3,-16(fp)
 4000638:	e13ffb0b 	ldhu	r4,-20(fp)
 400063c:	e17fff0b 	ldhu	r5,-4(fp)
 4000640:	280f883a 	mov	r7,r5
 4000644:	200d883a 	mov	r6,r4
 4000648:	180b883a 	mov	r5,r3
 400064c:	1009883a 	mov	r4,r2
 4000650:	40002e00 	call	40002e0 <draw_horiz_line>
                          vert_end,
                          width,
                          color);

  }
}
 4000654:	00000906 	br	400067c <draw_line+0x98>
                         vert_start,
                         color);
  }
  else
  {
    draw_sloped_line( horiz_start,
 4000658:	e13ffa0b 	ldhu	r4,-24(fp)
 400065c:	e17ffb0b 	ldhu	r5,-20(fp)
 4000660:	e1bffc0b 	ldhu	r6,-16(fp)
 4000664:	e1fffd0b 	ldhu	r7,-12(fp)
 4000668:	e0bffe0b 	ldhu	r2,-8(fp)
 400066c:	e0ffff0b 	ldhu	r3,-4(fp)
 4000670:	d8c00115 	stw	r3,4(sp)
 4000674:	d8800015 	stw	r2,0(sp)
 4000678:	400036c0 	call	400036c <draw_sloped_line>
                          vert_end,
                          width,
                          color);

  }
}
 400067c:	0001883a 	nop
 4000680:	e037883a 	mov	sp,fp
 4000684:	dfc00117 	ldw	ra,4(sp)
 4000688:	df000017 	ldw	fp,0(sp)
 400068c:	dec00204 	addi	sp,sp,8
 4000690:	f800283a 	ret

04000694 <paint_block>:
 * Purpose : Draws a block and fills it in
 * Return  : none
 *--------------------------------------------------*/

void paint_block (alt_u16 Hstart,alt_u16 Vstart, alt_u16 Hend, alt_u16 Vend, alt_u16 color)
{
 4000694:	defff704 	addi	sp,sp,-36
 4000698:	dfc00815 	stw	ra,32(sp)
 400069c:	df000715 	stw	fp,28(sp)
 40006a0:	df000704 	addi	fp,sp,28
 40006a4:	2011883a 	mov	r8,r4
 40006a8:	3009883a 	mov	r4,r6
 40006ac:	3807883a 	mov	r3,r7
 40006b0:	e0800217 	ldw	r2,8(fp)
 40006b4:	e23ffb0d 	sth	r8,-20(fp)
 40006b8:	e17ffc0d 	sth	r5,-16(fp)
 40006bc:	e13ffd0d 	sth	r4,-12(fp)
 40006c0:	e0fffe0d 	sth	r3,-8(fp)
 40006c4:	e0bfff0d 	sth	r2,-4(fp)
	int x,y;
	for(y=Vstart;y<Vend;y++){
 40006c8:	e0bffc0b 	ldhu	r2,-16(fp)
 40006cc:	e0bffa15 	stw	r2,-24(fp)
 40006d0:	00001506 	br	4000728 <paint_block+0x94>
		for(x=Hstart;x<Hend;x++){
 40006d4:	e0bffb0b 	ldhu	r2,-20(fp)
 40006d8:	e0bff915 	stw	r2,-28(fp)
 40006dc:	00000c06 	br	4000710 <paint_block+0x7c>
			LCD_DrawPoint(x, y, color);
 40006e0:	e0bff917 	ldw	r2,-28(fp)
 40006e4:	10ffffcc 	andi	r3,r2,65535
 40006e8:	e0bffa17 	ldw	r2,-24(fp)
 40006ec:	10bfffcc 	andi	r2,r2,65535
 40006f0:	e13fff0b 	ldhu	r4,-4(fp)
 40006f4:	200d883a 	mov	r6,r4
 40006f8:	100b883a 	mov	r5,r2
 40006fc:	1809883a 	mov	r4,r3
 4000700:	400f61c0 	call	400f61c <LCD_DrawPoint>

void paint_block (alt_u16 Hstart,alt_u16 Vstart, alt_u16 Hend, alt_u16 Vend, alt_u16 color)
{
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 4000704:	e0bff917 	ldw	r2,-28(fp)
 4000708:	10800044 	addi	r2,r2,1
 400070c:	e0bff915 	stw	r2,-28(fp)
 4000710:	e0bffd0b 	ldhu	r2,-12(fp)
 4000714:	e0fff917 	ldw	r3,-28(fp)
 4000718:	18bff116 	blt	r3,r2,40006e0 <__alt_data_end+0xfc0006e0>
 *--------------------------------------------------*/

void paint_block (alt_u16 Hstart,alt_u16 Vstart, alt_u16 Hend, alt_u16 Vend, alt_u16 color)
{
	int x,y;
	for(y=Vstart;y<Vend;y++){
 400071c:	e0bffa17 	ldw	r2,-24(fp)
 4000720:	10800044 	addi	r2,r2,1
 4000724:	e0bffa15 	stw	r2,-24(fp)
 4000728:	e0bffe0b 	ldhu	r2,-8(fp)
 400072c:	e0fffa17 	ldw	r3,-24(fp)
 4000730:	18bfe816 	blt	r3,r2,40006d4 <__alt_data_end+0xfc0006d4>
		for(x=Hstart;x<Hend;x++){
			LCD_DrawPoint(x, y, color);
		}
	}
}
 4000734:	0001883a 	nop
 4000738:	e037883a 	mov	sp,fp
 400073c:	dfc00117 	ldw	ra,4(sp)
 4000740:	df000017 	ldw	fp,0(sp)
 4000744:	dec00204 	addi	sp,sp,8
 4000748:	f800283a 	ret

0400074c <draw_box>:
 * Function: drow_box
 * Purpose : A filled or empty box can be drawn
 * Return  : none
 *--------------------------------------------------*/
int draw_box (alt_u16 horiz_start, alt_u16 vert_start, alt_u16 horiz_end, alt_u16 vert_end, alt_u16 color, int fill)
{
 400074c:	defff704 	addi	sp,sp,-36
 4000750:	dfc00815 	stw	ra,32(sp)
 4000754:	df000715 	stw	fp,28(sp)
 4000758:	df000704 	addi	fp,sp,28
 400075c:	2011883a 	mov	r8,r4
 4000760:	3009883a 	mov	r4,r6
 4000764:	3807883a 	mov	r3,r7
 4000768:	e0800217 	ldw	r2,8(fp)
 400076c:	e23ffb0d 	sth	r8,-20(fp)
 4000770:	e17ffc0d 	sth	r5,-16(fp)
 4000774:	e13ffd0d 	sth	r4,-12(fp)
 4000778:	e0fffe0d 	sth	r3,-8(fp)
 400077c:	e0bfff0d 	sth	r2,-4(fp)

  // If we want to fill in our box
  if (fill) {
 4000780:	e0800317 	ldw	r2,12(fp)
 4000784:	10000c26 	beq	r2,zero,40007b8 <draw_box+0x6c>
     paint_block (horiz_start, vert_start, horiz_end, vert_end, color);
 4000788:	e0fffb0b 	ldhu	r3,-20(fp)
 400078c:	e13ffc0b 	ldhu	r4,-16(fp)
 4000790:	e17ffd0b 	ldhu	r5,-12(fp)
 4000794:	e1bffe0b 	ldhu	r6,-8(fp)
 4000798:	e0bfff0b 	ldhu	r2,-4(fp)
 400079c:	d8800015 	stw	r2,0(sp)
 40007a0:	300f883a 	mov	r7,r6
 40007a4:	280d883a 	mov	r6,r5
 40007a8:	200b883a 	mov	r5,r4
 40007ac:	1809883a 	mov	r4,r3
 40007b0:	40006940 	call	4000694 <paint_block>
 40007b4:	00004406 	br	40008c8 <draw_box+0x17c>
  // If we're not filling in the box, just draw four lines.
  } else {
    draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color);
 40007b8:	e0fffb0b 	ldhu	r3,-20(fp)
 40007bc:	e13ffc0b 	ldhu	r4,-16(fp)
 40007c0:	e17ffb0b 	ldhu	r5,-20(fp)
 40007c4:	e0bffe0b 	ldhu	r2,-8(fp)
 40007c8:	10bfffc4 	addi	r2,r2,-1
 40007cc:	11bfffcc 	andi	r6,r2,65535
 40007d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40007d4:	d8800115 	stw	r2,4(sp)
 40007d8:	00800044 	movi	r2,1
 40007dc:	d8800015 	stw	r2,0(sp)
 40007e0:	300f883a 	mov	r7,r6
 40007e4:	280d883a 	mov	r6,r5
 40007e8:	200b883a 	mov	r5,r4
 40007ec:	1809883a 	mov	r4,r3
 40007f0:	40005e40 	call	40005e4 <draw_line>
    draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color);
 40007f4:	e0bffd0b 	ldhu	r2,-12(fp)
 40007f8:	10bfffc4 	addi	r2,r2,-1
 40007fc:	10ffffcc 	andi	r3,r2,65535
 4000800:	e13ffc0b 	ldhu	r4,-16(fp)
 4000804:	e0bffd0b 	ldhu	r2,-12(fp)
 4000808:	10bfffc4 	addi	r2,r2,-1
 400080c:	117fffcc 	andi	r5,r2,65535
 4000810:	e0bffe0b 	ldhu	r2,-8(fp)
 4000814:	10bfffc4 	addi	r2,r2,-1
 4000818:	11bfffcc 	andi	r6,r2,65535
 400081c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000820:	d8800115 	stw	r2,4(sp)
 4000824:	00800044 	movi	r2,1
 4000828:	d8800015 	stw	r2,0(sp)
 400082c:	300f883a 	mov	r7,r6
 4000830:	280d883a 	mov	r6,r5
 4000834:	200b883a 	mov	r5,r4
 4000838:	1809883a 	mov	r4,r3
 400083c:	40005e40 	call	40005e4 <draw_line>
    draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color);
 4000840:	e0fffb0b 	ldhu	r3,-20(fp)
 4000844:	e13ffc0b 	ldhu	r4,-16(fp)
 4000848:	e0bffd0b 	ldhu	r2,-12(fp)
 400084c:	10bfffc4 	addi	r2,r2,-1
 4000850:	117fffcc 	andi	r5,r2,65535
 4000854:	e1bffc0b 	ldhu	r6,-16(fp)
 4000858:	e0bfff0b 	ldhu	r2,-4(fp)
 400085c:	d8800115 	stw	r2,4(sp)
 4000860:	00800044 	movi	r2,1
 4000864:	d8800015 	stw	r2,0(sp)
 4000868:	300f883a 	mov	r7,r6
 400086c:	280d883a 	mov	r6,r5
 4000870:	200b883a 	mov	r5,r4
 4000874:	1809883a 	mov	r4,r3
 4000878:	40005e40 	call	40005e4 <draw_line>
    draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color);
 400087c:	e0fffb0b 	ldhu	r3,-20(fp)
 4000880:	e0bffe0b 	ldhu	r2,-8(fp)
 4000884:	10bfffc4 	addi	r2,r2,-1
 4000888:	113fffcc 	andi	r4,r2,65535
 400088c:	e0bffd0b 	ldhu	r2,-12(fp)
 4000890:	10bfffc4 	addi	r2,r2,-1
 4000894:	117fffcc 	andi	r5,r2,65535
 4000898:	e0bffe0b 	ldhu	r2,-8(fp)
 400089c:	10bfffc4 	addi	r2,r2,-1
 40008a0:	11bfffcc 	andi	r6,r2,65535
 40008a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40008a8:	d8800115 	stw	r2,4(sp)
 40008ac:	00800044 	movi	r2,1
 40008b0:	d8800015 	stw	r2,0(sp)
 40008b4:	300f883a 	mov	r7,r6
 40008b8:	280d883a 	mov	r6,r5
 40008bc:	200b883a 	mov	r5,r4
 40008c0:	1809883a 	mov	r4,r3
 40008c4:	40005e40 	call	40005e4 <draw_line>
  }

  return (0);
 40008c8:	0005883a 	mov	r2,zero
}
 40008cc:	e037883a 	mov	sp,fp
 40008d0:	dfc00117 	ldw	ra,4(sp)
 40008d4:	df000017 	ldw	fp,0(sp)
 40008d8:	dec00204 	addi	sp,sp,8
 40008dc:	f800283a 	ret

040008e0 <draw_main_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_main_screen(void)
{
 40008e0:	defffc04 	addi	sp,sp,-16
 40008e4:	dfc00315 	stw	ra,12(sp)
 40008e8:	df000215 	stw	fp,8(sp)
 40008ec:	df000204 	addi	fp,sp,8
	LCD_DrawRect(10,10,110,310,GREEN);
 40008f0:	0081f804 	movi	r2,2016
 40008f4:	d8800015 	stw	r2,0(sp)
 40008f8:	01c04d84 	movi	r7,310
 40008fc:	01801b84 	movi	r6,110
 4000900:	01400284 	movi	r5,10
 4000904:	01000284 	movi	r4,10
 4000908:	400f68c0 	call	400f68c <LCD_DrawRect>
	vid_print_string(80,50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Kalibrieren");
 400090c:	00810074 	movhi	r2,1025
 4000910:	109d9e04 	addi	r2,r2,30328
 4000914:	d8800115 	stw	r2,4(sp)
 4000918:	00810074 	movhi	r2,1025
 400091c:	10975f04 	addi	r2,r2,23932
 4000920:	d8800015 	stw	r2,0(sp)
 4000924:	01c10074 	movhi	r7,1025
 4000928:	39d22604 	addi	r7,r7,18584
 400092c:	000d883a 	mov	r6,zero
 4000930:	01400c84 	movi	r5,50
 4000934:	01001404 	movi	r4,80
 4000938:	40013880 	call	4001388 <vid_print_string>
	LCD_DrawRect(130,10,230,310,GREEN);
 400093c:	0081f804 	movi	r2,2016
 4000940:	d8800015 	stw	r2,0(sp)
 4000944:	01c04d84 	movi	r7,310
 4000948:	01803984 	movi	r6,230
 400094c:	01400284 	movi	r5,10
 4000950:	01002084 	movi	r4,130
 4000954:	400f68c0 	call	400f68c <LCD_DrawRect>
	vid_print_string(80,170,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"Hilfseffekt");
 4000958:	00810074 	movhi	r2,1025
 400095c:	109da104 	addi	r2,r2,30340
 4000960:	d8800115 	stw	r2,4(sp)
 4000964:	00810074 	movhi	r2,1025
 4000968:	10975f04 	addi	r2,r2,23932
 400096c:	d8800015 	stw	r2,0(sp)
 4000970:	01c10074 	movhi	r7,1025
 4000974:	39d22604 	addi	r7,r7,18584
 4000978:	000d883a 	mov	r6,zero
 400097c:	01402a84 	movi	r5,170
 4000980:	01001404 	movi	r4,80
 4000984:	40013880 	call	4001388 <vid_print_string>
}
 4000988:	0001883a 	nop
 400098c:	e037883a 	mov	sp,fp
 4000990:	dfc00117 	ldw	ra,4(sp)
 4000994:	df000017 	ldw	fp,0(sp)
 4000998:	dec00204 	addi	sp,sp,8
 400099c:	f800283a 	ret

040009a0 <draw_calibrating_screen>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void draw_calibrating_screen(void)
{
 40009a0:	defffc04 	addi	sp,sp,-16
 40009a4:	dfc00315 	stw	ra,12(sp)
 40009a8:	df000215 	stw	fp,8(sp)
 40009ac:	df000204 	addi	fp,sp,8

	vid_print_string(80,50,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"calibrating");
 40009b0:	00810074 	movhi	r2,1025
 40009b4:	109da404 	addi	r2,r2,30352
 40009b8:	d8800115 	stw	r2,4(sp)
 40009bc:	00810074 	movhi	r2,1025
 40009c0:	10975f04 	addi	r2,r2,23932
 40009c4:	d8800015 	stw	r2,0(sp)
 40009c8:	01c10074 	movhi	r7,1025
 40009cc:	39d22604 	addi	r7,r7,18584
 40009d0:	000d883a 	mov	r6,zero
 40009d4:	01400c84 	movi	r5,50
 40009d8:	01001404 	movi	r4,80
 40009dc:	40013880 	call	4001388 <vid_print_string>
	vid_print_string(150,150,BLACK,&arial_22ptBitmaps,&arial_22ptDescriptors,"...");
 40009e0:	00810074 	movhi	r2,1025
 40009e4:	109da704 	addi	r2,r2,30364
 40009e8:	d8800115 	stw	r2,4(sp)
 40009ec:	00810074 	movhi	r2,1025
 40009f0:	10975f04 	addi	r2,r2,23932
 40009f4:	d8800015 	stw	r2,0(sp)
 40009f8:	01c10074 	movhi	r7,1025
 40009fc:	39d22604 	addi	r7,r7,18584
 4000a00:	000d883a 	mov	r6,zero
 4000a04:	01402584 	movi	r5,150
 4000a08:	01002584 	movi	r4,150
 4000a0c:	40013880 	call	4001388 <vid_print_string>
	LCD_DrawRect(145,5,230,95,BLUE);
 4000a10:	008007c4 	movi	r2,31
 4000a14:	d8800015 	stw	r2,0(sp)
 4000a18:	01c017c4 	movi	r7,95
 4000a1c:	01803984 	movi	r6,230
 4000a20:	01400144 	movi	r5,5
 4000a24:	01002444 	movi	r4,145
 4000a28:	400f68c0 	call	400f68c <LCD_DrawRect>
	LCD_DrawRect(150,10,225,90,GREEN);
 4000a2c:	0081f804 	movi	r2,2016
 4000a30:	d8800015 	stw	r2,0(sp)
 4000a34:	01c01684 	movi	r7,90
 4000a38:	01803844 	movi	r6,225
 4000a3c:	01400284 	movi	r5,10
 4000a40:	01002584 	movi	r4,150
 4000a44:	400f68c0 	call	400f68c <LCD_DrawRect>

}
 4000a48:	0001883a 	nop
 4000a4c:	e037883a 	mov	sp,fp
 4000a50:	dfc00117 	ldw	ra,4(sp)
 4000a54:	df000017 	ldw	fp,0(sp)
 4000a58:	dec00204 	addi	sp,sp,8
 4000a5c:	f800283a 	ret

04000a60 <vid_print_string_alpha>:




int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 4000a60:	defff404 	addi	sp,sp,-48
 4000a64:	dfc00b15 	stw	ra,44(sp)
 4000a68:	df000a15 	stw	fp,40(sp)
 4000a6c:	df000a04 	addi	fp,sp,40
 4000a70:	e13ffc15 	stw	r4,-16(fp)
 4000a74:	e17ffd15 	stw	r5,-12(fp)
 4000a78:	e1bffe15 	stw	r6,-8(fp)
 4000a7c:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4000a80:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4000a84:	e0bffc17 	ldw	r2,-16(fp)
 4000a88:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4000a8c:	00007f06 	br	4000c8c <vid_print_string_alpha+0x22c>
    //Handle newline char here.
    if (string[i] == '\n') {
 4000a90:	e0bff917 	ldw	r2,-28(fp)
 4000a94:	e0c00417 	ldw	r3,16(fp)
 4000a98:	1885883a 	add	r2,r3,r2
 4000a9c:	10800003 	ldbu	r2,0(r2)
 4000aa0:	10803fcc 	andi	r2,r2,255
 4000aa4:	1080201c 	xori	r2,r2,128
 4000aa8:	10bfe004 	addi	r2,r2,-128
 4000aac:	10800298 	cmpnei	r2,r2,10
 4000ab0:	10000c1e 	bne	r2,zero,4000ae4 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 4000ab4:	e0bffb17 	ldw	r2,-20(fp)
 4000ab8:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 4000abc:	e0800217 	ldw	r2,8(fp)
 4000ac0:	1082d804 	addi	r2,r2,2912
 4000ac4:	10c00517 	ldw	r3,20(r2)
 4000ac8:	e0bffd17 	ldw	r2,-12(fp)
 4000acc:	1885883a 	add	r2,r3,r2
 4000ad0:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4000ad4:	e0bff917 	ldw	r2,-28(fp)
 4000ad8:	10800044 	addi	r2,r2,1
 4000adc:	e0bff915 	stw	r2,-28(fp)
      continue;
 4000ae0:	00006a06 	br	4000c8c <vid_print_string_alpha+0x22c>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 4000ae4:	e0bff917 	ldw	r2,-28(fp)
 4000ae8:	e0c00417 	ldw	r3,16(fp)
 4000aec:	1885883a 	add	r2,r3,r2
 4000af0:	10800003 	ldbu	r2,0(r2)
 4000af4:	10803fcc 	andi	r2,r2,255
 4000af8:	1080201c 	xori	r2,r2,128
 4000afc:	10bfe004 	addi	r2,r2,-128
 4000b00:	10800818 	cmpnei	r2,r2,32
 4000b04:	1000151e 	bne	r2,zero,4000b5c <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4000b08:	e0bfff17 	ldw	r2,-4(fp)
 4000b0c:	10bfffe0 	cmpeqi	r2,r2,-1
 4000b10:	10000b1e 	bne	r2,zero,4000b40 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4000b14:	e0800317 	ldw	r2,12(fp)
 4000b18:	d8800215 	stw	r2,8(sp)
 4000b1c:	e0800217 	ldw	r2,8(fp)
 4000b20:	d8800115 	stw	r2,4(sp)
 4000b24:	e0bfff17 	ldw	r2,-4(fp)
 4000b28:	d8800015 	stw	r2,0(sp)
 4000b2c:	01c00b44 	movi	r7,45
 4000b30:	e1bfff17 	ldw	r6,-4(fp)
 4000b34:	e17ffd17 	ldw	r5,-12(fp)
 4000b38:	e13ffc17 	ldw	r4,-16(fp)
 4000b3c:	40011680 	call	4001168 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4000b40:	e0800217 	ldw	r2,8(fp)
 4000b44:	10806004 	addi	r2,r2,384
 4000b48:	10c00417 	ldw	r3,16(r2)
 4000b4c:	e0bffc17 	ldw	r2,-16(fp)
 4000b50:	1885883a 	add	r2,r3,r2
 4000b54:	e0bffc15 	stw	r2,-16(fp)
 4000b58:	00004906 	br	4000c80 <vid_print_string_alpha+0x220>
    }
    else if(string[i] == '\t')  // this is a tab
 4000b5c:	e0bff917 	ldw	r2,-28(fp)
 4000b60:	e0c00417 	ldw	r3,16(fp)
 4000b64:	1885883a 	add	r2,r3,r2
 4000b68:	10800003 	ldbu	r2,0(r2)
 4000b6c:	10803fcc 	andi	r2,r2,255
 4000b70:	1080201c 	xori	r2,r2,128
 4000b74:	10bfe004 	addi	r2,r2,-128
 4000b78:	10800258 	cmpnei	r2,r2,9
 4000b7c:	10001d1e 	bne	r2,zero,4000bf4 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4000b80:	e03ffa15 	stw	zero,-24(fp)
 4000b84:	00001706 	br	4000be4 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4000b88:	e0bfff17 	ldw	r2,-4(fp)
 4000b8c:	10bfffe0 	cmpeqi	r2,r2,-1
 4000b90:	10000b1e 	bne	r2,zero,4000bc0 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4000b94:	e0800317 	ldw	r2,12(fp)
 4000b98:	d8800215 	stw	r2,8(sp)
 4000b9c:	e0800217 	ldw	r2,8(fp)
 4000ba0:	d8800115 	stw	r2,4(sp)
 4000ba4:	e0bfff17 	ldw	r2,-4(fp)
 4000ba8:	d8800015 	stw	r2,0(sp)
 4000bac:	01c00b44 	movi	r7,45
 4000bb0:	e1bfff17 	ldw	r6,-4(fp)
 4000bb4:	e17ffd17 	ldw	r5,-12(fp)
 4000bb8:	e13ffc17 	ldw	r4,-16(fp)
 4000bbc:	40011680 	call	4001168 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4000bc0:	e0800217 	ldw	r2,8(fp)
 4000bc4:	10806004 	addi	r2,r2,384
 4000bc8:	10c00417 	ldw	r3,16(r2)
 4000bcc:	e0bffc17 	ldw	r2,-16(fp)
 4000bd0:	1885883a 	add	r2,r3,r2
 4000bd4:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4000bd8:	e0bffa17 	ldw	r2,-24(fp)
 4000bdc:	10800044 	addi	r2,r2,1
 4000be0:	e0bffa15 	stw	r2,-24(fp)
 4000be4:	e0bffa17 	ldw	r2,-24(fp)
 4000be8:	10800090 	cmplti	r2,r2,2
 4000bec:	103fe61e 	bne	r2,zero,4000b88 <__alt_data_end+0xfc000b88>
 4000bf0:	00002306 	br	4000c80 <vid_print_string_alpha+0x220>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 4000bf4:	e0bff917 	ldw	r2,-28(fp)
 4000bf8:	e0c00417 	ldw	r3,16(fp)
 4000bfc:	1885883a 	add	r2,r3,r2
 4000c00:	10800003 	ldbu	r2,0(r2)
 4000c04:	10c03fcc 	andi	r3,r2,255
 4000c08:	18c0201c 	xori	r3,r3,128
 4000c0c:	18ffe004 	addi	r3,r3,-128
 4000c10:	e0800317 	ldw	r2,12(fp)
 4000c14:	d8800215 	stw	r2,8(sp)
 4000c18:	e0800217 	ldw	r2,8(fp)
 4000c1c:	d8800115 	stw	r2,4(sp)
 4000c20:	e0bfff17 	ldw	r2,-4(fp)
 4000c24:	d8800015 	stw	r2,0(sp)
 4000c28:	180f883a 	mov	r7,r3
 4000c2c:	e1bffe17 	ldw	r6,-8(fp)
 4000c30:	e17ffd17 	ldw	r5,-12(fp)
 4000c34:	e13ffc17 	ldw	r4,-16(fp)
 4000c38:	40011680 	call	4001168 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 4000c3c:	e0bff917 	ldw	r2,-28(fp)
 4000c40:	e0c00417 	ldw	r3,16(fp)
 4000c44:	1885883a 	add	r2,r3,r2
 4000c48:	10800003 	ldbu	r2,0(r2)
 4000c4c:	10c03fcc 	andi	r3,r2,255
 4000c50:	18c0201c 	xori	r3,r3,128
 4000c54:	18ffe004 	addi	r3,r3,-128
 4000c58:	00820034 	movhi	r2,2048
 4000c5c:	10bff7c4 	addi	r2,r2,-33
 4000c60:	1885883a 	add	r2,r3,r2
 4000c64:	1004917a 	slli	r2,r2,5
 4000c68:	e0c00217 	ldw	r3,8(fp)
 4000c6c:	1885883a 	add	r2,r3,r2
 4000c70:	10c00417 	ldw	r3,16(r2)
 4000c74:	e0bffc17 	ldw	r2,-16(fp)
 4000c78:	1885883a 	add	r2,r3,r2
 4000c7c:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4000c80:	e0bff917 	ldw	r2,-28(fp)
 4000c84:	10800044 	addi	r2,r2,1
 4000c88:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4000c8c:	e0bff917 	ldw	r2,-28(fp)
 4000c90:	e0c00417 	ldw	r3,16(fp)
 4000c94:	1885883a 	add	r2,r3,r2
 4000c98:	10800003 	ldbu	r2,0(r2)
 4000c9c:	10803fcc 	andi	r2,r2,255
 4000ca0:	1080201c 	xori	r2,r2,128
 4000ca4:	10bfe004 	addi	r2,r2,-128
 4000ca8:	103f791e 	bne	r2,zero,4000a90 <__alt_data_end+0xfc000a90>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4000cac:	0005883a 	mov	r2,zero
}
 4000cb0:	e037883a 	mov	sp,fp
 4000cb4:	dfc00117 	ldw	ra,4(sp)
 4000cb8:	df000017 	ldw	fp,0(sp)
 4000cbc:	dec00204 	addi	sp,sp,8
 4000cc0:	f800283a 	ret

04000cc4 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 4000cc4:	defff904 	addi	sp,sp,-28
 4000cc8:	df000615 	stw	fp,24(sp)
 4000ccc:	df000604 	addi	fp,sp,24
 4000cd0:	e13ffc15 	stw	r4,-16(fp)
 4000cd4:	e17ffd15 	stw	r5,-12(fp)
 4000cd8:	e1bffe15 	stw	r6,-8(fp)
 4000cdc:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 4000ce0:	e03ffb0d 	sth	zero,-20(fp)

  if (color_depth == 16)  // R(5):G(6):B(5)
 4000ce4:	e0bffc17 	ldw	r2,-16(fp)
 4000ce8:	10800418 	cmpnei	r2,r2,16
 4000cec:	1000221e 	bne	r2,zero,4000d78 <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 4000cf0:	e0bffd17 	ldw	r2,-12(fp)
 4000cf4:	10c00044 	addi	r3,r2,1
 4000cf8:	e0fffd15 	stw	r3,-12(fp)
 4000cfc:	10800003 	ldbu	r2,0(r2)
 4000d00:	10803fcc 	andi	r2,r2,255
 4000d04:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 4000d08:	e0bffd17 	ldw	r2,-12(fp)
 4000d0c:	10800003 	ldbu	r2,0(r2)
 4000d10:	10803fcc 	andi	r2,r2,255
 4000d14:	1004923a 	slli	r2,r2,8
 4000d18:	1007883a 	mov	r3,r2
 4000d1c:	e0bffb0b 	ldhu	r2,-20(fp)
 4000d20:	1885883a 	add	r2,r3,r2
 4000d24:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F;
 4000d28:	e0bffb0b 	ldhu	r2,-20(fp)
 4000d2c:	108007cc 	andi	r2,r2,31
 4000d30:	1007883a 	mov	r3,r2
 4000d34:	e0800117 	ldw	r2,4(fp)
 4000d38:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 4000d3c:	e0bffb0b 	ldhu	r2,-20(fp)
 4000d40:	1004d17a 	srli	r2,r2,5
 4000d44:	10800fcc 	andi	r2,r2,63
 4000d48:	1007883a 	mov	r3,r2
 4000d4c:	e0bfff17 	ldw	r2,-4(fp)
 4000d50:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 4000d54:	e0bffb0b 	ldhu	r2,-20(fp)
 4000d58:	1004d2fa 	srli	r2,r2,11
 4000d5c:	108007cc 	andi	r2,r2,31
 4000d60:	1007883a 	mov	r3,r2
 4000d64:	e0bffe17 	ldw	r2,-8(fp)
 4000d68:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4000d6c:	00800044 	movi	r2,1
 4000d70:	e0bffa15 	stw	r2,-24(fp)
 4000d74:	00002006 	br	4000df8 <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4000d78:	e0bffc17 	ldw	r2,-16(fp)
 4000d7c:	10800620 	cmpeqi	r2,r2,24
 4000d80:	1000031e 	bne	r2,zero,4000d90 <seperate_color_channels+0xcc>
 4000d84:	e0bffc17 	ldw	r2,-16(fp)
 4000d88:	10800818 	cmpnei	r2,r2,32
 4000d8c:	1000131e 	bne	r2,zero,4000ddc <seperate_color_channels+0x118>
  {
    *blue = *color++;
 4000d90:	e0bffd17 	ldw	r2,-12(fp)
 4000d94:	10c00044 	addi	r3,r2,1
 4000d98:	e0fffd15 	stw	r3,-12(fp)
 4000d9c:	10c00003 	ldbu	r3,0(r2)
 4000da0:	e0800117 	ldw	r2,4(fp)
 4000da4:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 4000da8:	e0bffd17 	ldw	r2,-12(fp)
 4000dac:	10c00044 	addi	r3,r2,1
 4000db0:	e0fffd15 	stw	r3,-12(fp)
 4000db4:	10c00003 	ldbu	r3,0(r2)
 4000db8:	e0bfff17 	ldw	r2,-4(fp)
 4000dbc:	10c00005 	stb	r3,0(r2)
    *red = *color;
 4000dc0:	e0bffd17 	ldw	r2,-12(fp)
 4000dc4:	10c00003 	ldbu	r3,0(r2)
 4000dc8:	e0bffe17 	ldw	r2,-8(fp)
 4000dcc:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4000dd0:	00800044 	movi	r2,1
 4000dd4:	e0bffa15 	stw	r2,-24(fp)
 4000dd8:	00000706 	br	4000df8 <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 4000ddc:	e0bffe17 	ldw	r2,-8(fp)
 4000de0:	10000005 	stb	zero,0(r2)
    *green = 0;
 4000de4:	e0bfff17 	ldw	r2,-4(fp)
 4000de8:	10000005 	stb	zero,0(r2)
    *blue = 0;
 4000dec:	e0800117 	ldw	r2,4(fp)
 4000df0:	10000005 	stb	zero,0(r2)
    return_value = 0;
 4000df4:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 4000df8:	e0bffa17 	ldw	r2,-24(fp)
}
 4000dfc:	e037883a 	mov	sp,fp
 4000e00:	df000017 	ldw	fp,0(sp)
 4000e04:	dec00104 	addi	sp,sp,4
 4000e08:	f800283a 	ret

04000e0c <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4000e0c:	defff904 	addi	sp,sp,-28
 4000e10:	df000615 	stw	fp,24(sp)
 4000e14:	df000604 	addi	fp,sp,24
 4000e18:	e13ffc15 	stw	r4,-16(fp)
 4000e1c:	2809883a 	mov	r4,r5
 4000e20:	3007883a 	mov	r3,r6
 4000e24:	3805883a 	mov	r2,r7
 4000e28:	e13ffd05 	stb	r4,-12(fp)
 4000e2c:	e0fffe05 	stb	r3,-8(fp)
 4000e30:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;

  if (color_depth == 16)  // R(5):G(6):B(5)
 4000e34:	e0bffc17 	ldw	r2,-16(fp)
 4000e38:	10800418 	cmpnei	r2,r2,16
 4000e3c:	1000191e 	bne	r2,zero,4000ea4 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4000e40:	e0bfff03 	ldbu	r2,-4(fp)
 4000e44:	108007cc 	andi	r2,r2,31
 4000e48:	1007883a 	mov	r3,r2
 4000e4c:	e0bffe03 	ldbu	r2,-8(fp)
 4000e50:	10800fcc 	andi	r2,r2,63
 4000e54:	1004917a 	slli	r2,r2,5
 4000e58:	1884b03a 	or	r2,r3,r2
 4000e5c:	1007883a 	mov	r3,r2
 4000e60:	e0bffd03 	ldbu	r2,-12(fp)
 4000e64:	100492fa 	slli	r2,r2,11
 4000e68:	1884b03a 	or	r2,r3,r2
 4000e6c:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 4000e70:	e0800117 	ldw	r2,4(fp)
 4000e74:	10c00044 	addi	r3,r2,1
 4000e78:	e0c00115 	stw	r3,4(fp)
 4000e7c:	e0fffb0b 	ldhu	r3,-20(fp)
 4000e80:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 4000e84:	e0bffb0b 	ldhu	r2,-20(fp)
 4000e88:	1004d23a 	srli	r2,r2,8
 4000e8c:	1007883a 	mov	r3,r2
 4000e90:	e0800117 	ldw	r2,4(fp)
 4000e94:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4000e98:	00800044 	movi	r2,1
 4000e9c:	e0bffa15 	stw	r2,-24(fp)
 4000ea0:	00002106 	br	4000f28 <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4000ea4:	e0bffc17 	ldw	r2,-16(fp)
 4000ea8:	10800620 	cmpeqi	r2,r2,24
 4000eac:	1000031e 	bne	r2,zero,4000ebc <merge_color_channels+0xb0>
 4000eb0:	e0bffc17 	ldw	r2,-16(fp)
 4000eb4:	10800818 	cmpnei	r2,r2,32
 4000eb8:	1000101e 	bne	r2,zero,4000efc <merge_color_channels+0xf0>
  {
    *color++ = blue;
 4000ebc:	e0800117 	ldw	r2,4(fp)
 4000ec0:	10c00044 	addi	r3,r2,1
 4000ec4:	e0c00115 	stw	r3,4(fp)
 4000ec8:	e0ffff03 	ldbu	r3,-4(fp)
 4000ecc:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 4000ed0:	e0800117 	ldw	r2,4(fp)
 4000ed4:	10c00044 	addi	r3,r2,1
 4000ed8:	e0c00115 	stw	r3,4(fp)
 4000edc:	e0fffe03 	ldbu	r3,-8(fp)
 4000ee0:	10c00005 	stb	r3,0(r2)
    *color = red;
 4000ee4:	e0800117 	ldw	r2,4(fp)
 4000ee8:	e0fffd03 	ldbu	r3,-12(fp)
 4000eec:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4000ef0:	00800044 	movi	r2,1
 4000ef4:	e0bffa15 	stw	r2,-24(fp)
 4000ef8:	00000b06 	br	4000f28 <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4000efc:	e0800117 	ldw	r2,4(fp)
 4000f00:	10c00044 	addi	r3,r2,1
 4000f04:	e0c00115 	stw	r3,4(fp)
 4000f08:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 4000f0c:	e0800117 	ldw	r2,4(fp)
 4000f10:	10c00044 	addi	r3,r2,1
 4000f14:	e0c00115 	stw	r3,4(fp)
 4000f18:	10000005 	stb	zero,0(r2)
    *color = 0;
 4000f1c:	e0800117 	ldw	r2,4(fp)
 4000f20:	10000005 	stb	zero,0(r2)
    return_value = 0;
 4000f24:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 4000f28:	e0bffa17 	ldw	r2,-24(fp)
}
 4000f2c:	e037883a 	mov	sp,fp
 4000f30:	df000017 	ldw	fp,0(sp)
 4000f34:	dec00104 	addi	sp,sp,4
 4000f38:	f800283a 	ret

04000f3c <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4000f3c:	defff404 	addi	sp,sp,-48
 4000f40:	dfc00b15 	stw	ra,44(sp)
 4000f44:	df000a15 	stw	fp,40(sp)
 4000f48:	df000a04 	addi	fp,sp,40
 4000f4c:	e13ffc15 	stw	r4,-16(fp)
 4000f50:	e17ffd15 	stw	r5,-12(fp)
 4000f54:	e1bffe15 	stw	r6,-8(fp)
 4000f58:	3805883a 	mov	r2,r7
 4000f5c:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped

  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4000f60:	e0bffe17 	ldw	r2,-8(fp)
 4000f64:	10bfffe0 	cmpeqi	r2,r2,-1
 4000f68:	10000c1e 	bne	r2,zero,4000f9c <alpha_blending+0x60>
  {
    //read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4000f6c:	e0800517 	ldw	r2,20(fp)
 4000f70:	10c00017 	ldw	r3,0(r2)
 4000f74:	e1bffb44 	addi	r6,fp,-19
 4000f78:	e17ffb04 	addi	r5,fp,-20
 4000f7c:	e13ffe04 	addi	r4,fp,-8
 4000f80:	e0bffb84 	addi	r2,fp,-18
 4000f84:	d8800015 	stw	r2,0(sp)
 4000f88:	300f883a 	mov	r7,r6
 4000f8c:	280d883a 	mov	r6,r5
 4000f90:	200b883a 	mov	r5,r4
 4000f94:	1809883a 	mov	r4,r3
 4000f98:	4000cc40 	call	4000cc4 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4000f9c:	e0800217 	ldw	r2,8(fp)
 4000fa0:	10800003 	ldbu	r2,0(r2)
 4000fa4:	10c03fcc 	andi	r3,r2,255
 4000fa8:	e0bfff03 	ldbu	r2,-4(fp)
 4000fac:	1887383a 	mul	r3,r3,r2
 4000fb0:	e0bffb03 	ldbu	r2,-20(fp)
 4000fb4:	11003fcc 	andi	r4,r2,255
 4000fb8:	e0bfff03 	ldbu	r2,-4(fp)
 4000fbc:	01403fc4 	movi	r5,255
 4000fc0:	2885c83a 	sub	r2,r5,r2
 4000fc4:	2085383a 	mul	r2,r4,r2
 4000fc8:	1885883a 	add	r2,r3,r2
 4000fcc:	01403fc4 	movi	r5,255
 4000fd0:	1009883a 	mov	r4,r2
 4000fd4:	4001bc40 	call	4001bc4 <__divsi3>
 4000fd8:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4000fdc:	e0800317 	ldw	r2,12(fp)
 4000fe0:	10800003 	ldbu	r2,0(r2)
 4000fe4:	10c03fcc 	andi	r3,r2,255
 4000fe8:	e0bfff03 	ldbu	r2,-4(fp)
 4000fec:	1887383a 	mul	r3,r3,r2
 4000ff0:	e0bffb43 	ldbu	r2,-19(fp)
 4000ff4:	11003fcc 	andi	r4,r2,255
 4000ff8:	e0bfff03 	ldbu	r2,-4(fp)
 4000ffc:	01403fc4 	movi	r5,255
 4001000:	2885c83a 	sub	r2,r5,r2
 4001004:	2085383a 	mul	r2,r4,r2
 4001008:	1885883a 	add	r2,r3,r2
 400100c:	01403fc4 	movi	r5,255
 4001010:	1009883a 	mov	r4,r2
 4001014:	4001bc40 	call	4001bc4 <__divsi3>
 4001018:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 400101c:	e0800417 	ldw	r2,16(fp)
 4001020:	10800003 	ldbu	r2,0(r2)
 4001024:	10c03fcc 	andi	r3,r2,255
 4001028:	e0bfff03 	ldbu	r2,-4(fp)
 400102c:	1887383a 	mul	r3,r3,r2
 4001030:	e0bffb83 	ldbu	r2,-18(fp)
 4001034:	11003fcc 	andi	r4,r2,255
 4001038:	e0bfff03 	ldbu	r2,-4(fp)
 400103c:	01403fc4 	movi	r5,255
 4001040:	2885c83a 	sub	r2,r5,r2
 4001044:	2085383a 	mul	r2,r4,r2
 4001048:	1885883a 	add	r2,r3,r2
 400104c:	01403fc4 	movi	r5,255
 4001050:	1009883a 	mov	r4,r2
 4001054:	4001bc40 	call	4001bc4 <__divsi3>
 4001058:	e0bffa15 	stw	r2,-24(fp)


  if(display->color_depth == 16)
 400105c:	e0800517 	ldw	r2,20(fp)
 4001060:	10800017 	ldw	r2,0(r2)
 4001064:	10800418 	cmpnei	r2,r2,16
 4001068:	1000181e 	bne	r2,zero,40010cc <alpha_blending+0x190>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 400106c:	e0bff817 	ldw	r2,-32(fp)
 4001070:	10c00830 	cmpltui	r3,r2,32
 4001074:	1800011e 	bne	r3,zero,400107c <alpha_blending+0x140>
 4001078:	008007c4 	movi	r2,31
 400107c:	1007883a 	mov	r3,r2
 4001080:	e0800217 	ldw	r2,8(fp)
 4001084:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4001088:	e0bff917 	ldw	r2,-28(fp)
 400108c:	10c01030 	cmpltui	r3,r2,64
 4001090:	1800011e 	bne	r3,zero,4001098 <alpha_blending+0x15c>
 4001094:	00800fc4 	movi	r2,63
 4001098:	1007883a 	mov	r3,r2
 400109c:	e0800317 	ldw	r2,12(fp)
 40010a0:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue;
 40010a4:	e0bffa17 	ldw	r2,-24(fp)
 40010a8:	10c00830 	cmpltui	r3,r2,32
 40010ac:	1800011e 	bne	r3,zero,40010b4 <alpha_blending+0x178>
 40010b0:	008007c4 	movi	r2,31
 40010b4:	1007883a 	mov	r3,r2
 40010b8:	e0800417 	ldw	r2,16(fp)
 40010bc:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40010c0:	00800044 	movi	r2,1
 40010c4:	e0bff715 	stw	r2,-36(fp)
 40010c8:	00002106 	br	4001150 <alpha_blending+0x214>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 40010cc:	e0800517 	ldw	r2,20(fp)
 40010d0:	10800017 	ldw	r2,0(r2)
 40010d4:	10800620 	cmpeqi	r2,r2,24
 40010d8:	1000041e 	bne	r2,zero,40010ec <alpha_blending+0x1b0>
 40010dc:	e0800517 	ldw	r2,20(fp)
 40010e0:	10800017 	ldw	r2,0(r2)
 40010e4:	10800818 	cmpnei	r2,r2,32
 40010e8:	1000181e 	bne	r2,zero,400114c <alpha_blending+0x210>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 40010ec:	e0bff817 	ldw	r2,-32(fp)
 40010f0:	10c04030 	cmpltui	r3,r2,256
 40010f4:	1800011e 	bne	r3,zero,40010fc <alpha_blending+0x1c0>
 40010f8:	00803fc4 	movi	r2,255
 40010fc:	1007883a 	mov	r3,r2
 4001100:	e0800217 	ldw	r2,8(fp)
 4001104:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4001108:	e0bff917 	ldw	r2,-28(fp)
 400110c:	10c04030 	cmpltui	r3,r2,256
 4001110:	1800011e 	bne	r3,zero,4001118 <alpha_blending+0x1dc>
 4001114:	00803fc4 	movi	r2,255
 4001118:	1007883a 	mov	r3,r2
 400111c:	e0800317 	ldw	r2,12(fp)
 4001120:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue;
 4001124:	e0bffa17 	ldw	r2,-24(fp)
 4001128:	10c04030 	cmpltui	r3,r2,256
 400112c:	1800011e 	bne	r3,zero,4001134 <alpha_blending+0x1f8>
 4001130:	00803fc4 	movi	r2,255
 4001134:	1007883a 	mov	r3,r2
 4001138:	e0800417 	ldw	r2,16(fp)
 400113c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4001140:	00800044 	movi	r2,1
 4001144:	e0bff715 	stw	r2,-36(fp)
 4001148:	00000106 	br	4001150 <alpha_blending+0x214>
  }
  else
  {
    return_value = 0;
 400114c:	e03ff715 	stw	zero,-36(fp)
  }

  return return_value;
 4001150:	e0bff717 	ldw	r2,-36(fp)
}
 4001154:	e037883a 	mov	sp,fp
 4001158:	dfc00117 	ldw	ra,4(sp)
 400115c:	df000017 	ldw	fp,0(sp)
 4001160:	dec00204 	addi	sp,sp,8
 4001164:	f800283a 	ret

04001168 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4001168:	defff004 	addi	sp,sp,-64
 400116c:	dfc00f15 	stw	ra,60(sp)
 4001170:	df000e15 	stw	fp,56(sp)
 4001174:	df000e04 	addi	fp,sp,56
 4001178:	e13ffc15 	stw	r4,-16(fp)
 400117c:	e17ffd15 	stw	r5,-12(fp)
 4001180:	e1bffe15 	stw	r6,-8(fp)
 4001184:	3805883a 	mov	r2,r7
 4001188:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 400118c:	e0ffff07 	ldb	r3,-4(fp)
 4001190:	00820034 	movhi	r2,2048
 4001194:	10bff7c4 	addi	r2,r2,-33
 4001198:	1885883a 	add	r2,r3,r2
 400119c:	1004917a 	slli	r2,r2,5
 40011a0:	e0c00317 	ldw	r3,12(fp)
 40011a4:	1885883a 	add	r2,r3,r2
 40011a8:	10800617 	ldw	r2,24(r2)
 40011ac:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 40011b0:	e0800417 	ldw	r2,16(fp)
 40011b4:	10c00017 	ldw	r3,0(r2)
 40011b8:	e1bff984 	addi	r6,fp,-26
 40011bc:	e17ff904 	addi	r5,fp,-28
 40011c0:	e13ffe04 	addi	r4,fp,-8
 40011c4:	e0bff944 	addi	r2,fp,-27
 40011c8:	d8800015 	stw	r2,0(sp)
 40011cc:	300f883a 	mov	r7,r6
 40011d0:	280d883a 	mov	r6,r5
 40011d4:	200b883a 	mov	r5,r4
 40011d8:	1809883a 	mov	r4,r3
 40011dc:	4000cc40 	call	4000cc4 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 40011e0:	e03ff615 	stw	zero,-40(fp)
 40011e4:	00005806 	br	4001348 <vid_print_char_alpha+0x1e0>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 40011e8:	e03ff715 	stw	zero,-36(fp)
 40011ec:	00004906 	br	4001314 <vid_print_char_alpha+0x1ac>


      if (alpha == 0x00){
 40011f0:	e0bff817 	ldw	r2,-32(fp)
 40011f4:	1000031e 	bne	r2,zero,4001204 <vid_print_char_alpha+0x9c>
    	  new_color = background_color;
 40011f8:	e0800217 	ldw	r2,8(fp)
 40011fc:	e0bffb15 	stw	r2,-20(fp)
 4001200:	00003206 	br	40012cc <vid_print_char_alpha+0x164>
      }
      else if (alpha == 0xFF){
 4001204:	e0bff817 	ldw	r2,-32(fp)
 4001208:	10803fd8 	cmpnei	r2,r2,255
 400120c:	1000031e 	bne	r2,zero,400121c <vid_print_char_alpha+0xb4>
         new_color = color;
 4001210:	e0bffe17 	ldw	r2,-8(fp)
 4001214:	e0bffb15 	stw	r2,-20(fp)
 4001218:	00002c06 	br	40012cc <vid_print_char_alpha+0x164>
      }
      else{
          red = original_red;
 400121c:	e0bff903 	ldbu	r2,-28(fp)
 4001220:	e0bff9c5 	stb	r2,-25(fp)
          green = original_green;
 4001224:	e0bff983 	ldbu	r2,-26(fp)
 4001228:	e0bffa05 	stb	r2,-24(fp)
          blue = original_blue;
 400122c:	e0bff943 	ldbu	r2,-27(fp)
 4001230:	e0bffa45 	stb	r2,-23(fp)
          // send in the font alpha channel and the colour channels for the blending to occur
          alpha_blending ((vert_offset + i), (SCREEN_HEIGHT-horiz_offset - j), background_color, *alpha, &red, &green, &blue, display);
 4001234:	e0fffd17 	ldw	r3,-12(fp)
 4001238:	e0bff617 	ldw	r2,-40(fp)
 400123c:	1889883a 	add	r4,r3,r2
 4001240:	00c05004 	movi	r3,320
 4001244:	e0bffc17 	ldw	r2,-16(fp)
 4001248:	1887c83a 	sub	r3,r3,r2
 400124c:	e0bff717 	ldw	r2,-36(fp)
 4001250:	1887c83a 	sub	r3,r3,r2
 4001254:	e0bff817 	ldw	r2,-32(fp)
 4001258:	10800003 	ldbu	r2,0(r2)
 400125c:	11403fcc 	andi	r5,r2,255
 4001260:	e0800417 	ldw	r2,16(fp)
 4001264:	d8800315 	stw	r2,12(sp)
 4001268:	e0bffa44 	addi	r2,fp,-23
 400126c:	d8800215 	stw	r2,8(sp)
 4001270:	e0bffa04 	addi	r2,fp,-24
 4001274:	d8800115 	stw	r2,4(sp)
 4001278:	e0bff9c4 	addi	r2,fp,-25
 400127c:	d8800015 	stw	r2,0(sp)
 4001280:	280f883a 	mov	r7,r5
 4001284:	e1800217 	ldw	r6,8(fp)
 4001288:	180b883a 	mov	r5,r3
 400128c:	4000f3c0 	call	4000f3c <alpha_blending>

          // take the blended pixel and merge the color channels back into a single pixel value
          merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 4001290:	e0800417 	ldw	r2,16(fp)
 4001294:	10c00017 	ldw	r3,0(r2)
 4001298:	e0bff9c3 	ldbu	r2,-25(fp)
 400129c:	11003fcc 	andi	r4,r2,255
 40012a0:	e0bffa03 	ldbu	r2,-24(fp)
 40012a4:	11403fcc 	andi	r5,r2,255
 40012a8:	e0bffa43 	ldbu	r2,-23(fp)
 40012ac:	11803fcc 	andi	r6,r2,255
 40012b0:	e0bffb04 	addi	r2,fp,-20
 40012b4:	d8800015 	stw	r2,0(sp)
 40012b8:	300f883a 	mov	r7,r6
 40012bc:	280d883a 	mov	r6,r5
 40012c0:	200b883a 	mov	r5,r4
 40012c4:	1809883a 	mov	r4,r3
 40012c8:	4000e0c0 	call	4000e0c <merge_color_channels>
      }
      // write the new pixel value out to memory overwriting the current background
      vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j), new_color);
 40012cc:	e0fffd17 	ldw	r3,-12(fp)
 40012d0:	e0bff617 	ldw	r2,-40(fp)
 40012d4:	1889883a 	add	r4,r3,r2
 40012d8:	00c05004 	movi	r3,320
 40012dc:	e0bffc17 	ldw	r2,-16(fp)
 40012e0:	1887c83a 	sub	r3,r3,r2
 40012e4:	e0bff717 	ldw	r2,-36(fp)
 40012e8:	1885c83a 	sub	r2,r3,r2
 40012ec:	e0fffb17 	ldw	r3,-20(fp)
 40012f0:	180d883a 	mov	r6,r3
 40012f4:	100b883a 	mov	r5,r2
 40012f8:	400f7540 	call	400f754 <vid_set_pixel>
      //vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color);

      alpha++;
 40012fc:	e0bff817 	ldw	r2,-32(fp)
 4001300:	10800044 	addi	r2,r2,1
 4001304:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4001308:	e0bff717 	ldw	r2,-36(fp)
 400130c:	10800044 	addi	r2,r2,1
 4001310:	e0bff715 	stw	r2,-36(fp)
 4001314:	e0ffff07 	ldb	r3,-4(fp)
 4001318:	00820034 	movhi	r2,2048
 400131c:	10bff7c4 	addi	r2,r2,-33
 4001320:	1885883a 	add	r2,r3,r2
 4001324:	1004917a 	slli	r2,r2,5
 4001328:	e0c00317 	ldw	r3,12(fp)
 400132c:	1885883a 	add	r2,r3,r2
 4001330:	10800417 	ldw	r2,16(r2)
 4001334:	e0fff717 	ldw	r3,-36(fp)
 4001338:	18bfad36 	bltu	r3,r2,40011f0 <__alt_data_end+0xfc0011f0>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 400133c:	e0bff617 	ldw	r2,-40(fp)
 4001340:	10800044 	addi	r2,r2,1
 4001344:	e0bff615 	stw	r2,-40(fp)
 4001348:	e0ffff07 	ldb	r3,-4(fp)
 400134c:	00820034 	movhi	r2,2048
 4001350:	10bff7c4 	addi	r2,r2,-33
 4001354:	1885883a 	add	r2,r3,r2
 4001358:	1004917a 	slli	r2,r2,5
 400135c:	e0c00317 	ldw	r3,12(fp)
 4001360:	1885883a 	add	r2,r3,r2
 4001364:	10800517 	ldw	r2,20(r2)
 4001368:	e0fff617 	ldw	r3,-40(fp)
 400136c:	18bf9e36 	bltu	r3,r2,40011e8 <__alt_data_end+0xfc0011e8>

      alpha++;
    }
  }

  return(0);
 4001370:	0005883a 	mov	r2,zero
}
 4001374:	e037883a 	mov	sp,fp
 4001378:	dfc00117 	ldw	ra,4(sp)
 400137c:	df000017 	ldw	fp,0(sp)
 4001380:	dec00204 	addi	sp,sp,8
 4001384:	f800283a 	ret

04001388 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, const alt_u8 *font, const alt_u16 (*font_descriptor)[2], char string[])
{
 4001388:	defff604 	addi	sp,sp,-40
 400138c:	dfc00915 	stw	ra,36(sp)
 4001390:	df000815 	stw	fp,32(sp)
 4001394:	df000804 	addi	fp,sp,32
 4001398:	e13ffc15 	stw	r4,-16(fp)
 400139c:	e17ffd15 	stw	r5,-12(fp)
 40013a0:	e1bffe15 	stw	r6,-8(fp)
 40013a4:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 40013a8:	e03ffa15 	stw	zero,-24(fp)
  //int original_horiz_offset;

  //original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 40013ac:	00003906 	br	4001494 <vid_print_string+0x10c>
    //Handle newline char here.
    if (string[i] == ' ') {
 40013b0:	e0bffa17 	ldw	r2,-24(fp)
 40013b4:	e0c00317 	ldw	r3,12(fp)
 40013b8:	1885883a 	add	r2,r3,r2
 40013bc:	10800003 	ldbu	r2,0(r2)
 40013c0:	10803fcc 	andi	r2,r2,255
 40013c4:	1080201c 	xori	r2,r2,128
 40013c8:	10bfe004 	addi	r2,r2,-128
 40013cc:	10800818 	cmpnei	r2,r2,32
 40013d0:	1000071e 	bne	r2,zero,40013f0 <vid_print_string+0x68>
      horiz_offset += 10 ;
 40013d4:	e0bffc17 	ldw	r2,-16(fp)
 40013d8:	10800284 	addi	r2,r2,10
 40013dc:	e0bffc15 	stw	r2,-16(fp)
      i++;
 40013e0:	e0bffa17 	ldw	r2,-24(fp)
 40013e4:	10800044 	addi	r2,r2,1
 40013e8:	e0bffa15 	stw	r2,-24(fp)
      continue;
 40013ec:	00002906 	br	4001494 <vid_print_string+0x10c>
    }
    // Lay down that character and increment our offsets.
    temp_char = (string[i] - 0x21);
 40013f0:	e0bffa17 	ldw	r2,-24(fp)
 40013f4:	e0c00317 	ldw	r3,12(fp)
 40013f8:	1885883a 	add	r2,r3,r2
 40013fc:	10800003 	ldbu	r2,0(r2)
 4001400:	10803fcc 	andi	r2,r2,255
 4001404:	1080201c 	xori	r2,r2,128
 4001408:	10bfe004 	addi	r2,r2,-128
 400140c:	10bff7c4 	addi	r2,r2,-33
 4001410:	e0bffb0d 	sth	r2,-20(fp)
    bit_num_char = *(*(font_descriptor + temp_char));
 4001414:	e0bffb0b 	ldhu	r2,-20(fp)
 4001418:	1085883a 	add	r2,r2,r2
 400141c:	1085883a 	add	r2,r2,r2
 4001420:	1007883a 	mov	r3,r2
 4001424:	e0800217 	ldw	r2,8(fp)
 4001428:	10c5883a 	add	r2,r2,r3
 400142c:	1080000b 	ldhu	r2,0(r2)
 4001430:	e0bffb8d 	sth	r2,-18(fp)
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, font_descriptor);
 4001434:	e0bffa17 	ldw	r2,-24(fp)
 4001438:	e0c00317 	ldw	r3,12(fp)
 400143c:	1885883a 	add	r2,r3,r2
 4001440:	10800003 	ldbu	r2,0(r2)
 4001444:	10c03fcc 	andi	r3,r2,255
 4001448:	18c0201c 	xori	r3,r3,128
 400144c:	18ffe004 	addi	r3,r3,-128
 4001450:	e0800217 	ldw	r2,8(fp)
 4001454:	d8800115 	stw	r2,4(sp)
 4001458:	e0bfff17 	ldw	r2,-4(fp)
 400145c:	d8800015 	stw	r2,0(sp)
 4001460:	180f883a 	mov	r7,r3
 4001464:	e1bffe17 	ldw	r6,-8(fp)
 4001468:	e17ffd17 	ldw	r5,-12(fp)
 400146c:	e13ffc17 	ldw	r4,-16(fp)
 4001470:	40014cc0 	call	40014cc <vid_print_char>
    horiz_offset += 4 + (int)bit_num_char;
 4001474:	e0bffb8b 	ldhu	r2,-18(fp)
 4001478:	10800104 	addi	r2,r2,4
 400147c:	e0fffc17 	ldw	r3,-16(fp)
 4001480:	1885883a 	add	r2,r3,r2
 4001484:	e0bffc15 	stw	r2,-16(fp)
    i++;
 4001488:	e0bffa17 	ldw	r2,-24(fp)
 400148c:	10800044 	addi	r2,r2,1
 4001490:	e0bffa15 	stw	r2,-24(fp)
  //int original_horiz_offset;

  //original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001494:	e0bffa17 	ldw	r2,-24(fp)
 4001498:	e0c00317 	ldw	r3,12(fp)
 400149c:	1885883a 	add	r2,r3,r2
 40014a0:	10800003 	ldbu	r2,0(r2)
 40014a4:	10803fcc 	andi	r2,r2,255
 40014a8:	1080201c 	xori	r2,r2,128
 40014ac:	10bfe004 	addi	r2,r2,-128
 40014b0:	103fbf1e 	bne	r2,zero,40013b0 <__alt_data_end+0xfc0013b0>
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, font_descriptor);
    horiz_offset += 4 + (int)bit_num_char;
    i++;

  }
  return (0);
 40014b4:	0005883a 	mov	r2,zero
}
 40014b8:	e037883a 	mov	sp,fp
 40014bc:	dfc00117 	ldw	ra,4(sp)
 40014c0:	df000017 	ldw	fp,0(sp)
 40014c4:	dec00204 	addi	sp,sp,8
 40014c8:	f800283a 	ret

040014cc <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, const alt_u8 *font, const alt_u16 (*font_descriptor)[2])
{
 40014cc:	defff204 	addi	sp,sp,-56
 40014d0:	dfc00d15 	stw	ra,52(sp)
 40014d4:	df000c15 	stw	fp,48(sp)
 40014d8:	df000c04 	addi	fp,sp,48
 40014dc:	e13ffc15 	stw	r4,-16(fp)
 40014e0:	e17ffd15 	stw	r5,-12(fp)
 40014e4:	e1bffe15 	stw	r6,-8(fp)
 40014e8:	3805883a 	mov	r2,r7
 40014ec:	e0bfff05 	stb	r2,-4(fp)
  alt_u16 row_offset;
  alt_u16 bit_num_char;
  alt_u16 bit_num_char_temp;
  alt_u8 byte_offset;
  // Convert the ASCII value to an array offset
  temp_char = (character - 0x21);
 40014f0:	e0bfff07 	ldb	r2,-4(fp)
 40014f4:	10bff7c4 	addi	r2,r2,-33
 40014f8:	e0bff915 	stw	r2,-28(fp)
  row_offset = *(*(font_descriptor + temp_char)+ 1);
 40014fc:	e0bff917 	ldw	r2,-28(fp)
 4001500:	1085883a 	add	r2,r2,r2
 4001504:	1085883a 	add	r2,r2,r2
 4001508:	10800084 	addi	r2,r2,2
 400150c:	e0c00317 	ldw	r3,12(fp)
 4001510:	1885883a 	add	r2,r3,r2
 4001514:	1080000b 	ldhu	r2,0(r2)
 4001518:	e0bffa0d 	sth	r2,-24(fp)
  bit_num_char = *(*(font_descriptor + temp_char));
 400151c:	e0bff917 	ldw	r2,-28(fp)
 4001520:	1085883a 	add	r2,r2,r2
 4001524:	1085883a 	add	r2,r2,r2
 4001528:	1007883a 	mov	r3,r2
 400152c:	e0800317 	ldw	r2,12(fp)
 4001530:	10c5883a 	add	r2,r2,r3
 4001534:	1080000b 	ldhu	r2,0(r2)
 4001538:	e0bffa8d 	sth	r2,-22(fp)
  if(bit_num_char <=8){
 400153c:	e0bffa8b 	ldhu	r2,-22(fp)
 4001540:	10800268 	cmpgeui	r2,r2,9
 4001544:	1000031e 	bne	r2,zero,4001554 <vid_print_char+0x88>
	  byte_offset = 1;
 4001548:	00800044 	movi	r2,1
 400154c:	e0bff885 	stb	r2,-30(fp)
 4001550:	00000e06 	br	400158c <vid_print_char+0xc0>
  }else if(bit_num_char <= 16){
 4001554:	e0bffa8b 	ldhu	r2,-22(fp)
 4001558:	10800468 	cmpgeui	r2,r2,17
 400155c:	1000031e 	bne	r2,zero,400156c <vid_print_char+0xa0>
	  byte_offset = 2;
 4001560:	00800084 	movi	r2,2
 4001564:	e0bff885 	stb	r2,-30(fp)
 4001568:	00000806 	br	400158c <vid_print_char+0xc0>
  }else if(bit_num_char <=24){
 400156c:	e0bffa8b 	ldhu	r2,-22(fp)
 4001570:	10800668 	cmpgeui	r2,r2,25
 4001574:	1000031e 	bne	r2,zero,4001584 <vid_print_char+0xb8>
	  byte_offset = 3;
 4001578:	008000c4 	movi	r2,3
 400157c:	e0bff885 	stb	r2,-30(fp)
 4001580:	00000206 	br	400158c <vid_print_char+0xc0>
  }else{
	  byte_offset = 4;
 4001584:	00800104 	movi	r2,4
 4001588:	e0bff885 	stb	r2,-30(fp)
  }

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
 400158c:	e03ff415 	stw	zero,-48(fp)
 4001590:	00004106 	br	4001698 <vid_print_char+0x1cc>
      char_row = font + (row_offset) + i*byte_offset;//i*4 arial
 4001594:	e0bffa0b 	ldhu	r2,-24(fp)
 4001598:	e13ff883 	ldbu	r4,-30(fp)
 400159c:	e0fff417 	ldw	r3,-48(fp)
 40015a0:	20c7383a 	mul	r3,r4,r3
 40015a4:	10c5883a 	add	r2,r2,r3
 40015a8:	e0c00217 	ldw	r3,8(fp)
 40015ac:	1885883a 	add	r2,r3,r2
 40015b0:	e0bffb15 	stw	r2,-20(fp)
      bit_num_char_temp = bit_num_char;
 40015b4:	e0bffa8b 	ldhu	r2,-22(fp)
 40015b8:	e0bff80d 	sth	r2,-32(fp)
    for(k = 0; k < byte_offset; k++){//4 arila
 40015bc:	e03ff615 	stw	zero,-40(fp)
 40015c0:	00002f06 	br	4001680 <vid_print_char+0x1b4>
    	if(bit_num_char_temp > 8){
 40015c4:	e0bff80b 	ldhu	r2,-32(fp)
 40015c8:	10800270 	cmpltui	r2,r2,9
 40015cc:	1000061e 	bne	r2,zero,40015e8 <vid_print_char+0x11c>
    		j_end = 8;
 40015d0:	00800204 	movi	r2,8
 40015d4:	e0bff715 	stw	r2,-36(fp)
    		bit_num_char_temp= bit_num_char_temp - 8;
 40015d8:	e0bff80b 	ldhu	r2,-32(fp)
 40015dc:	10bffe04 	addi	r2,r2,-8
 40015e0:	e0bff80d 	sth	r2,-32(fp)
 40015e4:	00000206 	br	40015f0 <vid_print_char+0x124>
    	}else{
    		j_end = bit_num_char_temp;
 40015e8:	e0bff80b 	ldhu	r2,-32(fp)
 40015ec:	e0bff715 	stw	r2,-36(fp)
    	}
    	for (j = 0; j < j_end; j++) {
 40015f0:	e03ff515 	stw	zero,-44(fp)
 40015f4:	00001c06 	br	4001668 <vid_print_char+0x19c>
    		//If the font table says the pixel in this location is on for this character, then set it.
    		if (*(char_row+k) & (((alt_u8)0x80) >> j)) {
 40015f8:	e0bff617 	ldw	r2,-40(fp)
 40015fc:	e0fffb17 	ldw	r3,-20(fp)
 4001600:	1885883a 	add	r2,r3,r2
 4001604:	10800003 	ldbu	r2,0(r2)
 4001608:	10c03fcc 	andi	r3,r2,255
 400160c:	01002004 	movi	r4,128
 4001610:	e0bff517 	ldw	r2,-44(fp)
 4001614:	2085d83a 	sra	r2,r4,r2
 4001618:	1884703a 	and	r2,r3,r2
 400161c:	10000f26 	beq	r2,zero,400165c <vid_print_char+0x190>
    			//vid_set_pixel((horiz_offset + j + k*8), (vert_offset + i), color); // plot the pixel
    			vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j -k*8), color);
 4001620:	e0fffd17 	ldw	r3,-12(fp)
 4001624:	e0bff417 	ldw	r2,-48(fp)
 4001628:	1889883a 	add	r4,r3,r2
 400162c:	00c05004 	movi	r3,320
 4001630:	e0bffc17 	ldw	r2,-16(fp)
 4001634:	1887c83a 	sub	r3,r3,r2
 4001638:	e0bff517 	ldw	r2,-44(fp)
 400163c:	1887c83a 	sub	r3,r3,r2
 4001640:	e0bff617 	ldw	r2,-40(fp)
 4001644:	100490fa 	slli	r2,r2,3
 4001648:	1885c83a 	sub	r2,r3,r2
 400164c:	e0fffe17 	ldw	r3,-8(fp)
 4001650:	180d883a 	mov	r6,r3
 4001654:	100b883a 	mov	r5,r2
 4001658:	400f7540 	call	400f754 <vid_set_pixel>
    		j_end = 8;
    		bit_num_char_temp= bit_num_char_temp - 8;
    	}else{
    		j_end = bit_num_char_temp;
    	}
    	for (j = 0; j < j_end; j++) {
 400165c:	e0bff517 	ldw	r2,-44(fp)
 4001660:	10800044 	addi	r2,r2,1
 4001664:	e0bff515 	stw	r2,-44(fp)
 4001668:	e0fff517 	ldw	r3,-44(fp)
 400166c:	e0bff717 	ldw	r2,-36(fp)
 4001670:	18bfe116 	blt	r3,r2,40015f8 <__alt_data_end+0xfc0015f8>

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
      char_row = font + (row_offset) + i*byte_offset;//i*4 arial
      bit_num_char_temp = bit_num_char;
    for(k = 0; k < byte_offset; k++){//4 arila
 4001674:	e0bff617 	ldw	r2,-40(fp)
 4001678:	10800044 	addi	r2,r2,1
 400167c:	e0bff615 	stw	r2,-40(fp)
 4001680:	e0bff883 	ldbu	r2,-30(fp)
 4001684:	e0fff617 	ldw	r3,-40(fp)
 4001688:	18bfce16 	blt	r3,r2,40015c4 <__alt_data_end+0xfc0015c4>
  }else{
	  byte_offset = 4;
  }

  //Each character is 32 pixels wide and 31 tall.
  for(i = 0; i < 28; i++) { //31 arial
 400168c:	e0bff417 	ldw	r2,-48(fp)
 4001690:	10800044 	addi	r2,r2,1
 4001694:	e0bff415 	stw	r2,-48(fp)
 4001698:	e0bff417 	ldw	r2,-48(fp)
 400169c:	10800710 	cmplti	r2,r2,28
 40016a0:	103fbc1e 	bne	r2,zero,4001594 <__alt_data_end+0xfc001594>
    			vid_set_pixel((vert_offset +i), (SCREEN_HEIGHT-horiz_offset - j -k*8), color);
    		}
    	}
    }
  }
  return(0);
 40016a4:	0005883a 	mov	r2,zero
}
 40016a8:	e037883a 	mov	sp,fp
 40016ac:	dfc00117 	ldw	ra,4(sp)
 40016b0:	df000017 	ldw	fp,0(sp)
 40016b4:	dec00204 	addi	sp,sp,8
 40016b8:	f800283a 	ret

040016bc <main>:
	  alt_u16 y_coord;
	  alt_u8 enable_xy;
	  alt_u32 next_active_time;
  }XY;
int main()
{
 40016bc:	defff704 	addi	sp,sp,-36
 40016c0:	dfc00815 	stw	ra,32(sp)
 40016c4:	df000715 	stw	fp,28(sp)
 40016c8:	df000704 	addi	fp,sp,28
  //initialization
  XY xy;
  xy.x_coord = 0;
 40016cc:	e03ffd0d 	sth	zero,-12(fp)
  xy.y_coord = 0;
 40016d0:	e03ffd8d 	sth	zero,-10(fp)
  xy.enable_xy = 0;
 40016d4:	e03ffe05 	stb	zero,-8(fp)
  xy.next_active_time= 0;
 40016d8:	e03fff15 	stw	zero,-4(fp)
  alt_u8 cali_enable = 1;
 40016dc:	00800044 	movi	r2,1
 40016e0:	e0bff905 	stb	r2,-28(fp)
  touch_init(&xy);
 40016e4:	e0bffd04 	addi	r2,fp,-12
 40016e8:	1009883a 	mov	r4,r2
 40016ec:	4001b380 	call	4001b38 <touch_init>
  LCD_Init();
 40016f0:	400f7f40 	call	400f7f4 <LCD_Init>
  LCD_Clear(WHITE);
 40016f4:	013fffd4 	movui	r4,65535
 40016f8:	400f5980 	call	400f598 <LCD_Clear>
  printf("Hello from Nios II!\n");
 40016fc:	010100f4 	movhi	r4,1027
 4001700:	2104ed04 	addi	r4,r4,5044
 4001704:	4001ea40 	call	4001ea4 <puts>


  alt_u16 xs, ys ,xe, ye;
  int count = 0;
 4001708:	e03ffb15 	stw	zero,-20(fp)
  int enable = 0;
 400170c:	e03ffc15 	stw	zero,-16(fp)

 state state = ST_main;
 4001710:	e03ffa15 	stw	zero,-24(fp)
 draw_main_screen();
 4001714:	40008e00 	call	40008e0 <draw_main_screen>

while(1){



if(xy.enable_xy == 1){
 4001718:	e0bffe03 	ldbu	r2,-8(fp)
 400171c:	10803fcc 	andi	r2,r2,255
 4001720:	10800058 	cmpnei	r2,r2,1
 4001724:	103ffc1e 	bne	r2,zero,4001718 <__alt_data_end+0xfc001718>
 xy.enable_xy = 0;
 4001728:	e03ffe05 	stb	zero,-8(fp)

  switch(state){
 400172c:	e0bffa17 	ldw	r2,-24(fp)
 4001730:	10800168 	cmpgeui	r2,r2,5
 4001734:	103ff81e 	bne	r2,zero,4001718 <__alt_data_end+0xfc001718>
 4001738:	e0bffa17 	ldw	r2,-24(fp)
 400173c:	100690ba 	slli	r3,r2,2
 4001740:	00810034 	movhi	r2,1024
 4001744:	1085d504 	addi	r2,r2,5972
 4001748:	1885883a 	add	r2,r3,r2
 400174c:	10800017 	ldw	r2,0(r2)
 4001750:	1000683a 	jmp	r2
 4001754:	04001768 	cmpgeui	r16,zero,93
 4001758:	040017c0 	call	40017c <__reset-0x3bffe84>
 400175c:	040017f4 	movhi	r16,95
 4001760:	04001808 	cmpgei	r16,zero,96
 4001764:	04001808 	cmpgei	r16,zero,96
  	  case ST_main:
  			if(xy.y_coord<=2000){
 4001768:	e0bffd8b 	ldhu	r2,-10(fp)
 400176c:	10bfffcc 	andi	r2,r2,65535
 4001770:	1081f468 	cmpgeui	r2,r2,2001
 4001774:	1000081e 	bne	r2,zero,4001798 <main+0xdc>
  				state = ST_cali;
 4001778:	00800044 	movi	r2,1
 400177c:	e0bffa15 	stw	r2,-24(fp)
  			    LCD_Clear(WHITE);
 4001780:	013fffd4 	movui	r4,65535
 4001784:	400f5980 	call	400f598 <LCD_Clear>
  				draw_calibrating_screen();
 4001788:	40009a00 	call	40009a0 <draw_calibrating_screen>
  				cali_enable = 1;
 400178c:	00800044 	movi	r2,1
 4001790:	e0bff905 	stb	r2,-28(fp)
  			else if (xy.y_coord>2000){
  				state = ST_play_help;
  				printf("Hello from State Main >2000!\n");
  			}

  		break;
 4001794:	00001e06 	br	4001810 <main+0x154>
  				state = ST_cali;
  			    LCD_Clear(WHITE);
  				draw_calibrating_screen();
  				cali_enable = 1;
  			}
  			else if (xy.y_coord>2000){
 4001798:	e0bffd8b 	ldhu	r2,-10(fp)
 400179c:	10bfffcc 	andi	r2,r2,65535
 40017a0:	1081f470 	cmpltui	r2,r2,2001
 40017a4:	10001a1e 	bne	r2,zero,4001810 <main+0x154>
  				state = ST_play_help;
 40017a8:	00800084 	movi	r2,2
 40017ac:	e0bffa15 	stw	r2,-24(fp)
  				printf("Hello from State Main >2000!\n");
 40017b0:	010100f4 	movhi	r4,1027
 40017b4:	2104f204 	addi	r4,r4,5064
 40017b8:	4001ea40 	call	4001ea4 <puts>
  			}

  		break;
 40017bc:	00001406 	br	4001810 <main+0x154>

  	  case ST_cali:
  		if(cali_enable == 1){
 40017c0:	e0bff903 	ldbu	r2,-28(fp)
 40017c4:	10800058 	cmpnei	r2,r2,1
 40017c8:	1000051e 	bne	r2,zero,40017e0 <main+0x124>
  			cali_enable = 0;
 40017cc:	e03ff905 	stb	zero,-28(fp)
  			state = ST_main;
 40017d0:	e03ffa15 	stw	zero,-24(fp)
  			LCD_Clear(WHITE);
 40017d4:	013fffd4 	movui	r4,65535
 40017d8:	400f5980 	call	400f598 <LCD_Clear>
  			draw_main_screen();
 40017dc:	40008e00 	call	40008e0 <draw_main_screen>

  		}
  		printf("Hello from State cali!\n");
 40017e0:	010100f4 	movhi	r4,1027
 40017e4:	2104fa04 	addi	r4,r4,5096
 40017e8:	4001ea40 	call	4001ea4 <puts>
  		state = ST_main;
 40017ec:	e03ffa15 	stw	zero,-24(fp)
  		break;
 40017f0:	00000806 	br	4001814 <main+0x158>

  	  case ST_play_help:
  		printf("Hello from State help!\n");
 40017f4:	010100f4 	movhi	r4,1027
 40017f8:	21050004 	addi	r4,r4,5120
 40017fc:	4001ea40 	call	4001ea4 <puts>
  		state = ST_main;
 4001800:	e03ffa15 	stw	zero,-24(fp)
  	  	break;
 4001804:	00000306 	br	4001814 <main+0x158>

  	  case ST_glissando:
  	  	break;

  	  case ST_display_ton:
  	  	break;
 4001808:	0001883a 	nop
 400180c:	003fc206 	br	4001718 <__alt_data_end+0xfc001718>
  			else if (xy.y_coord>2000){
  				state = ST_play_help;
  				printf("Hello from State Main >2000!\n");
  			}

  		break;
 4001810:	0001883a 	nop
  	  case ST_display_ton:
  	  	break;
  }
}

}
 4001814:	003fc006 	br	4001718 <__alt_data_end+0xfc001718>

04001818 <touch_isr>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void touch_isr(void * context)
{
 4001818:	defff504 	addi	sp,sp,-44
 400181c:	dfc00a15 	stw	ra,40(sp)
 4001820:	df000915 	stw	fp,36(sp)
 4001824:	dc000815 	stw	r16,32(sp)
 4001828:	df000904 	addi	fp,sp,36
 400182c:	e13ffe15 	stw	r4,-8(fp)

	alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4001830:	014000c4 	movi	r5,3
 4001834:	0009883a 	mov	r4,zero
 4001838:	400e7e00 	call	400e7e0 <alt_ic_irq_disable>
	//Flag touched
	//alt_u8* touched = (alt_u8*)context;
	//*touched = 1;
	printf("touched!\n");
 400183c:	010100f4 	movhi	r4,1027
 4001840:	21050604 	addi	r4,r4,5144
 4001844:	4001ea40 	call	4001ea4 <puts>

	volatile XY* xy = (XY*)context;
 4001848:	e0bffe17 	ldw	r2,-8(fp)
 400184c:	e0bffa15 	stw	r2,-24(fp)

	volatile alt_u8 high_byte, low_byte;
	alt_u8 data8;
    // x
	//alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, sizeof(CommandGetX), &CommandGetX, 0, 0,ALT_AVALON_SPI_COMMAND_MERGE);
 4001850:	00800044 	movi	r2,1
 4001854:	d8800215 	stw	r2,8(sp)
 4001858:	d8000115 	stw	zero,4(sp)
 400185c:	d8000015 	stw	zero,0(sp)
 4001860:	d1e00004 	addi	r7,gp,-32768
 4001864:	01800044 	movi	r6,1
 4001868:	000b883a 	mov	r5,zero
 400186c:	01020034 	movhi	r4,2048
 4001870:	21040004 	addi	r4,r4,4096
 4001874:	40108cc0 	call	40108cc <alt_avalon_spi_command>
 4001878:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte,ALT_AVALON_SPI_COMMAND_MERGE);
 400187c:	00800044 	movi	r2,1
 4001880:	d8800215 	stw	r2,8(sp)
 4001884:	e0bffd04 	addi	r2,fp,-12
 4001888:	d8800115 	stw	r2,4(sp)
 400188c:	00800044 	movi	r2,1
 4001890:	d8800015 	stw	r2,0(sp)
 4001894:	000f883a 	mov	r7,zero
 4001898:	000d883a 	mov	r6,zero
 400189c:	000b883a 	mov	r5,zero
 40018a0:	01020034 	movhi	r4,2048
 40018a4:	21040004 	addi	r4,r4,4096
 40018a8:	40108cc0 	call	40108cc <alt_avalon_spi_command>
 40018ac:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 40018b0:	e0bffb17 	ldw	r2,-20(fp)
 40018b4:	10800060 	cmpeqi	r2,r2,1
 40018b8:	1000041e 	bne	r2,zero,40018cc <touch_isr+0xb4>
        printf(("[TOUCH] failed to get x\n row32"));
 40018bc:	010100f4 	movhi	r4,1027
 40018c0:	21050904 	addi	r4,r4,5156
 40018c4:	4001da80 	call	4001da8 <printf>
        return;
 40018c8:	00009506 	br	4001b20 <touch_isr+0x308>
    }

    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte,ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 40018cc:	00800084 	movi	r2,2
 40018d0:	d8800215 	stw	r2,8(sp)
 40018d4:	e0bffd44 	addi	r2,fp,-11
 40018d8:	d8800115 	stw	r2,4(sp)
 40018dc:	00800044 	movi	r2,1
 40018e0:	d8800015 	stw	r2,0(sp)
 40018e4:	000f883a 	mov	r7,zero
 40018e8:	000d883a 	mov	r6,zero
 40018ec:	000b883a 	mov	r5,zero
 40018f0:	01020034 	movhi	r4,2048
 40018f4:	21040004 	addi	r4,r4,4096
 40018f8:	40108cc0 	call	40108cc <alt_avalon_spi_command>
 40018fc:	e0bffb15 	stw	r2,-20(fp)

    if (result != sizeof(low_byte)){
 4001900:	e0bffb17 	ldw	r2,-20(fp)
 4001904:	10800060 	cmpeqi	r2,r2,1
 4001908:	1000041e 	bne	r2,zero,400191c <touch_isr+0x104>
        printf(("[TOUCH] failed to get x\n row39"));
 400190c:	010100f4 	movhi	r4,1027
 4001910:	21051104 	addi	r4,r4,5188
 4001914:	4001da80 	call	4001da8 <printf>
        return;
 4001918:	00008106 	br	4001b20 <touch_isr+0x308>
    }

    ResponseX = (high_byte << 8) | low_byte;
 400191c:	e0bffd03 	ldbu	r2,-12(fp)
 4001920:	10803fcc 	andi	r2,r2,255
 4001924:	1004923a 	slli	r2,r2,8
 4001928:	1007883a 	mov	r3,r2
 400192c:	e0bffd43 	ldbu	r2,-11(fp)
 4001930:	10803fcc 	andi	r2,r2,255
 4001934:	1884b03a 	or	r2,r3,r2
 4001938:	e0bffc0d 	sth	r2,-16(fp)

    // y
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 400193c:	00800044 	movi	r2,1
 4001940:	d8800215 	stw	r2,8(sp)
 4001944:	d8000115 	stw	zero,4(sp)
 4001948:	d8000015 	stw	zero,0(sp)
 400194c:	d1e00044 	addi	r7,gp,-32767
 4001950:	01800044 	movi	r6,1
 4001954:	000b883a 	mov	r5,zero
 4001958:	01020034 	movhi	r4,2048
 400195c:	21040004 	addi	r4,r4,4096
 4001960:	40108cc0 	call	40108cc <alt_avalon_spi_command>
 4001964:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4001968:	00800044 	movi	r2,1
 400196c:	d8800215 	stw	r2,8(sp)
 4001970:	e0bffd04 	addi	r2,fp,-12
 4001974:	d8800115 	stw	r2,4(sp)
 4001978:	00800044 	movi	r2,1
 400197c:	d8800015 	stw	r2,0(sp)
 4001980:	000f883a 	mov	r7,zero
 4001984:	000d883a 	mov	r6,zero
 4001988:	000b883a 	mov	r5,zero
 400198c:	01020034 	movhi	r4,2048
 4001990:	21040004 	addi	r4,r4,4096
 4001994:	40108cc0 	call	40108cc <alt_avalon_spi_command>
 4001998:	e0bffb15 	stw	r2,-20(fp)

    if (result != sizeof(high_byte)){
 400199c:	e0bffb17 	ldw	r2,-20(fp)
 40019a0:	10800060 	cmpeqi	r2,r2,1
 40019a4:	1000041e 	bne	r2,zero,40019b8 <touch_isr+0x1a0>
        printf(("[TOUCH] failed to get x\n row50"));
 40019a8:	010100f4 	movhi	r4,1027
 40019ac:	21051904 	addi	r4,r4,5220
 40019b0:	4001da80 	call	4001da8 <printf>
        return;
 40019b4:	00005a06 	br	4001b20 <touch_isr+0x308>
    }

    result = alt_avalon_spi_command(TOUCH_PANEL_SPI_BASE, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte,ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 40019b8:	00800084 	movi	r2,2
 40019bc:	d8800215 	stw	r2,8(sp)
 40019c0:	e0bffd44 	addi	r2,fp,-11
 40019c4:	d8800115 	stw	r2,4(sp)
 40019c8:	00800044 	movi	r2,1
 40019cc:	d8800015 	stw	r2,0(sp)
 40019d0:	000f883a 	mov	r7,zero
 40019d4:	000d883a 	mov	r6,zero
 40019d8:	000b883a 	mov	r5,zero
 40019dc:	01020034 	movhi	r4,2048
 40019e0:	21040004 	addi	r4,r4,4096
 40019e4:	40108cc0 	call	40108cc <alt_avalon_spi_command>
 40019e8:	e0bffb15 	stw	r2,-20(fp)

    if (result != sizeof(low_byte)){
 40019ec:	e0bffb17 	ldw	r2,-20(fp)
 40019f0:	10800060 	cmpeqi	r2,r2,1
 40019f4:	1000041e 	bne	r2,zero,4001a08 <touch_isr+0x1f0>
        printf(("[TOUCH] failed to get x\n row57"));
 40019f8:	010100f4 	movhi	r4,1027
 40019fc:	21052104 	addi	r4,r4,5252
 4001a00:	4001da80 	call	4001da8 <printf>
        return;
 4001a04:	00004606 	br	4001b20 <touch_isr+0x308>
    }


    ResponseY = (high_byte << 8) | low_byte;
 4001a08:	e0bffd03 	ldbu	r2,-12(fp)
 4001a0c:	10803fcc 	andi	r2,r2,255
 4001a10:	1004923a 	slli	r2,r2,8
 4001a14:	1007883a 	mov	r3,r2
 4001a18:	e0bffd43 	ldbu	r2,-11(fp)
 4001a1c:	10803fcc 	andi	r2,r2,255
 4001a20:	1884b03a 	or	r2,r3,r2
 4001a24:	e0bffc8d 	sth	r2,-14(fp)


    xy->x_coord = (ResponseX >> 3 ) & 0xFFF;  // 12 bits
 4001a28:	e0bffc0b 	ldhu	r2,-16(fp)
 4001a2c:	10bfffcc 	andi	r2,r2,65535
 4001a30:	1004d0fa 	srli	r2,r2,3
 4001a34:	1083ffcc 	andi	r2,r2,4095
 4001a38:	1007883a 	mov	r3,r2
 4001a3c:	e0bffa17 	ldw	r2,-24(fp)
 4001a40:	10c0000d 	sth	r3,0(r2)
    xy->y_coord = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 4001a44:	e0bffc8b 	ldhu	r2,-14(fp)
 4001a48:	10bfffcc 	andi	r2,r2,65535
 4001a4c:	1004d0fa 	srli	r2,r2,3
 4001a50:	1083ffcc 	andi	r2,r2,4095
 4001a54:	1007883a 	mov	r3,r2
 4001a58:	e0bffa17 	ldw	r2,-24(fp)
 4001a5c:	10c0008d 	sth	r3,2(r2)

    if((xy->x_coord == 0 || xy->y_coord == 0) || (alt_nticks() < xy->next_active_time) ){
 4001a60:	e0bffa17 	ldw	r2,-24(fp)
 4001a64:	1080000b 	ldhu	r2,0(r2)
 4001a68:	10bfffcc 	andi	r2,r2,65535
 4001a6c:	10000826 	beq	r2,zero,4001a90 <touch_isr+0x278>
 4001a70:	e0bffa17 	ldw	r2,-24(fp)
 4001a74:	1080008b 	ldhu	r2,2(r2)
 4001a78:	10bfffcc 	andi	r2,r2,65535
 4001a7c:	10000426 	beq	r2,zero,4001a90 <touch_isr+0x278>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001a80:	d0ecb917 	ldw	r3,-19740(gp)
 4001a84:	e0bffa17 	ldw	r2,-24(fp)
 4001a88:	10800217 	ldw	r2,8(r2)
 4001a8c:	1880032e 	bgeu	r3,r2,4001a9c <touch_isr+0x284>
    	xy->enable_xy = 0;
 4001a90:	e0bffa17 	ldw	r2,-24(fp)
 4001a94:	10000105 	stb	zero,4(r2)
 4001a98:	00000306 	br	4001aa8 <touch_isr+0x290>
    }else{
    	xy->enable_xy = 1;
 4001a9c:	e0bffa17 	ldw	r2,-24(fp)
 4001aa0:	00c00044 	movi	r3,1
 4001aa4:	10c00105 	stb	r3,4(r2)
    }
    printf("X Koordinate: %d Y Koordinate: %d\n", xy->x_coord,xy->y_coord);
 4001aa8:	e0bffa17 	ldw	r2,-24(fp)
 4001aac:	1080000b 	ldhu	r2,0(r2)
 4001ab0:	10ffffcc 	andi	r3,r2,65535
 4001ab4:	e0bffa17 	ldw	r2,-24(fp)
 4001ab8:	1080008b 	ldhu	r2,2(r2)
 4001abc:	10bfffcc 	andi	r2,r2,65535
 4001ac0:	100d883a 	mov	r6,r2
 4001ac4:	180b883a 	mov	r5,r3
 4001ac8:	010100f4 	movhi	r4,1027
 4001acc:	21052904 	addi	r4,r4,5284
 4001ad0:	4001da80 	call	4001da8 <printf>


	 //  INSERT CODE 6. Then reset that register to 0
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TOUCH_PANEL_PEN_IRQ_N_BASE,0x0);
 4001ad4:	0007883a 	mov	r3,zero
 4001ad8:	00820034 	movhi	r2,2048
 4001adc:	10840f04 	addi	r2,r2,4156
 4001ae0:	10c00035 	stwio	r3,0(r2)

    //  Reset IRQ Mask
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x01);
 4001ae4:	00c00044 	movi	r3,1
 4001ae8:	00820034 	movhi	r2,2048
 4001aec:	10840e04 	addi	r2,r2,4152
 4001af0:	10c00035 	stwio	r3,0(r2)

    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4001af4:	014000c4 	movi	r5,3
 4001af8:	0009883a 	mov	r4,zero
 4001afc:	400e7580 	call	400e758 <alt_ic_irq_enable>
 4001b00:	d42cb917 	ldw	r16,-19740(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001b04:	d0acb817 	ldw	r2,-19744(gp)

    xy->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 4001b08:	01400f04 	movi	r5,60
 4001b0c:	1009883a 	mov	r4,r2
 4001b10:	4001cbc0 	call	4001cbc <__udivsi3>
 4001b14:	8087883a 	add	r3,r16,r2
 4001b18:	e0bffa17 	ldw	r2,-24(fp)
 4001b1c:	10c00215 	stw	r3,8(r2)
}
 4001b20:	e6ffff04 	addi	sp,fp,-4
 4001b24:	dfc00217 	ldw	ra,8(sp)
 4001b28:	df000117 	ldw	fp,4(sp)
 4001b2c:	dc000017 	ldw	r16,0(sp)
 4001b30:	dec00304 	addi	sp,sp,12
 4001b34:	f800283a 	ret

04001b38 <touch_init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void touch_init(void* context)
{
 4001b38:	defffc04 	addi	sp,sp,-16
 4001b3c:	dfc00315 	stw	ra,12(sp)
 4001b40:	df000215 	stw	fp,8(sp)
 4001b44:	df000204 	addi	fp,sp,8
 4001b48:	e13fff15 	stw	r4,-4(fp)
	//
	//  - Enable touch pen irg.
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x01);
 4001b4c:	00c00044 	movi	r3,1
 4001b50:	00820034 	movhi	r2,2048
 4001b54:	10840e04 	addi	r2,r2,4152
 4001b58:	10c00035 	stwio	r3,0(r2)

	// Reset the edge capture register.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TOUCH_PANEL_PEN_IRQ_N_BASE, 0x0);
 4001b5c:	0007883a 	mov	r3,zero
 4001b60:	00820034 	movhi	r2,2048
 4001b64:	10840f04 	addi	r2,r2,4156
 4001b68:	10c00035 	stwio	r3,0(r2)

	//  Register the ISR:
	alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID, TOUCH_PANEL_PEN_IRQ_N_IRQ, touch_isr, context, 0x0);
 4001b6c:	d8000015 	stw	zero,0(sp)
 4001b70:	e1ffff17 	ldw	r7,-4(fp)
 4001b74:	01810034 	movhi	r6,1024
 4001b78:	31860604 	addi	r6,r6,6168
 4001b7c:	014000c4 	movi	r5,3
 4001b80:	0009883a 	mov	r4,zero
 4001b84:	400e7080 	call	400e708 <alt_ic_isr_register>

}
 4001b88:	0001883a 	nop
 4001b8c:	e037883a 	mov	sp,fp
 4001b90:	dfc00117 	ldw	ra,4(sp)
 4001b94:	df000017 	ldw	fp,0(sp)
 4001b98:	dec00204 	addi	sp,sp,8
 4001b9c:	f800283a 	ret

04001ba0 <get_xy>:

void get_xy (void * context)
{
 4001ba0:	defffe04 	addi	sp,sp,-8
 4001ba4:	df000115 	stw	fp,4(sp)
 4001ba8:	df000104 	addi	fp,sp,4
 4001bac:	e13fff15 	stw	r4,-4(fp)





}
 4001bb0:	0001883a 	nop
 4001bb4:	e037883a 	mov	sp,fp
 4001bb8:	df000017 	ldw	fp,0(sp)
 4001bbc:	dec00104 	addi	sp,sp,4
 4001bc0:	f800283a 	ret

04001bc4 <__divsi3>:
 4001bc4:	20001b16 	blt	r4,zero,4001c34 <__divsi3+0x70>
 4001bc8:	000f883a 	mov	r7,zero
 4001bcc:	28001616 	blt	r5,zero,4001c28 <__divsi3+0x64>
 4001bd0:	200d883a 	mov	r6,r4
 4001bd4:	29001a2e 	bgeu	r5,r4,4001c40 <__divsi3+0x7c>
 4001bd8:	00800804 	movi	r2,32
 4001bdc:	00c00044 	movi	r3,1
 4001be0:	00000106 	br	4001be8 <__divsi3+0x24>
 4001be4:	10000d26 	beq	r2,zero,4001c1c <__divsi3+0x58>
 4001be8:	294b883a 	add	r5,r5,r5
 4001bec:	10bfffc4 	addi	r2,r2,-1
 4001bf0:	18c7883a 	add	r3,r3,r3
 4001bf4:	293ffb36 	bltu	r5,r4,4001be4 <__alt_data_end+0xfc001be4>
 4001bf8:	0005883a 	mov	r2,zero
 4001bfc:	18000726 	beq	r3,zero,4001c1c <__divsi3+0x58>
 4001c00:	0005883a 	mov	r2,zero
 4001c04:	31400236 	bltu	r6,r5,4001c10 <__divsi3+0x4c>
 4001c08:	314dc83a 	sub	r6,r6,r5
 4001c0c:	10c4b03a 	or	r2,r2,r3
 4001c10:	1806d07a 	srli	r3,r3,1
 4001c14:	280ad07a 	srli	r5,r5,1
 4001c18:	183ffa1e 	bne	r3,zero,4001c04 <__alt_data_end+0xfc001c04>
 4001c1c:	38000126 	beq	r7,zero,4001c24 <__divsi3+0x60>
 4001c20:	0085c83a 	sub	r2,zero,r2
 4001c24:	f800283a 	ret
 4001c28:	014bc83a 	sub	r5,zero,r5
 4001c2c:	39c0005c 	xori	r7,r7,1
 4001c30:	003fe706 	br	4001bd0 <__alt_data_end+0xfc001bd0>
 4001c34:	0109c83a 	sub	r4,zero,r4
 4001c38:	01c00044 	movi	r7,1
 4001c3c:	003fe306 	br	4001bcc <__alt_data_end+0xfc001bcc>
 4001c40:	00c00044 	movi	r3,1
 4001c44:	003fee06 	br	4001c00 <__alt_data_end+0xfc001c00>

04001c48 <__modsi3>:
 4001c48:	20001716 	blt	r4,zero,4001ca8 <__modsi3+0x60>
 4001c4c:	000f883a 	mov	r7,zero
 4001c50:	2005883a 	mov	r2,r4
 4001c54:	28001216 	blt	r5,zero,4001ca0 <__modsi3+0x58>
 4001c58:	2900162e 	bgeu	r5,r4,4001cb4 <__modsi3+0x6c>
 4001c5c:	01800804 	movi	r6,32
 4001c60:	00c00044 	movi	r3,1
 4001c64:	00000106 	br	4001c6c <__modsi3+0x24>
 4001c68:	30000a26 	beq	r6,zero,4001c94 <__modsi3+0x4c>
 4001c6c:	294b883a 	add	r5,r5,r5
 4001c70:	31bfffc4 	addi	r6,r6,-1
 4001c74:	18c7883a 	add	r3,r3,r3
 4001c78:	293ffb36 	bltu	r5,r4,4001c68 <__alt_data_end+0xfc001c68>
 4001c7c:	18000526 	beq	r3,zero,4001c94 <__modsi3+0x4c>
 4001c80:	1806d07a 	srli	r3,r3,1
 4001c84:	11400136 	bltu	r2,r5,4001c8c <__modsi3+0x44>
 4001c88:	1145c83a 	sub	r2,r2,r5
 4001c8c:	280ad07a 	srli	r5,r5,1
 4001c90:	183ffb1e 	bne	r3,zero,4001c80 <__alt_data_end+0xfc001c80>
 4001c94:	38000126 	beq	r7,zero,4001c9c <__modsi3+0x54>
 4001c98:	0085c83a 	sub	r2,zero,r2
 4001c9c:	f800283a 	ret
 4001ca0:	014bc83a 	sub	r5,zero,r5
 4001ca4:	003fec06 	br	4001c58 <__alt_data_end+0xfc001c58>
 4001ca8:	0109c83a 	sub	r4,zero,r4
 4001cac:	01c00044 	movi	r7,1
 4001cb0:	003fe706 	br	4001c50 <__alt_data_end+0xfc001c50>
 4001cb4:	00c00044 	movi	r3,1
 4001cb8:	003ff106 	br	4001c80 <__alt_data_end+0xfc001c80>

04001cbc <__udivsi3>:
 4001cbc:	200d883a 	mov	r6,r4
 4001cc0:	2900152e 	bgeu	r5,r4,4001d18 <__udivsi3+0x5c>
 4001cc4:	28001416 	blt	r5,zero,4001d18 <__udivsi3+0x5c>
 4001cc8:	00800804 	movi	r2,32
 4001ccc:	00c00044 	movi	r3,1
 4001cd0:	00000206 	br	4001cdc <__udivsi3+0x20>
 4001cd4:	10000e26 	beq	r2,zero,4001d10 <__udivsi3+0x54>
 4001cd8:	28000516 	blt	r5,zero,4001cf0 <__udivsi3+0x34>
 4001cdc:	294b883a 	add	r5,r5,r5
 4001ce0:	10bfffc4 	addi	r2,r2,-1
 4001ce4:	18c7883a 	add	r3,r3,r3
 4001ce8:	293ffa36 	bltu	r5,r4,4001cd4 <__alt_data_end+0xfc001cd4>
 4001cec:	18000826 	beq	r3,zero,4001d10 <__udivsi3+0x54>
 4001cf0:	0005883a 	mov	r2,zero
 4001cf4:	31400236 	bltu	r6,r5,4001d00 <__udivsi3+0x44>
 4001cf8:	314dc83a 	sub	r6,r6,r5
 4001cfc:	10c4b03a 	or	r2,r2,r3
 4001d00:	1806d07a 	srli	r3,r3,1
 4001d04:	280ad07a 	srli	r5,r5,1
 4001d08:	183ffa1e 	bne	r3,zero,4001cf4 <__alt_data_end+0xfc001cf4>
 4001d0c:	f800283a 	ret
 4001d10:	0005883a 	mov	r2,zero
 4001d14:	f800283a 	ret
 4001d18:	00c00044 	movi	r3,1
 4001d1c:	003ff406 	br	4001cf0 <__alt_data_end+0xfc001cf0>

04001d20 <__umodsi3>:
 4001d20:	2005883a 	mov	r2,r4
 4001d24:	2900122e 	bgeu	r5,r4,4001d70 <__umodsi3+0x50>
 4001d28:	28001116 	blt	r5,zero,4001d70 <__umodsi3+0x50>
 4001d2c:	01800804 	movi	r6,32
 4001d30:	00c00044 	movi	r3,1
 4001d34:	00000206 	br	4001d40 <__umodsi3+0x20>
 4001d38:	30000c26 	beq	r6,zero,4001d6c <__umodsi3+0x4c>
 4001d3c:	28000516 	blt	r5,zero,4001d54 <__umodsi3+0x34>
 4001d40:	294b883a 	add	r5,r5,r5
 4001d44:	31bfffc4 	addi	r6,r6,-1
 4001d48:	18c7883a 	add	r3,r3,r3
 4001d4c:	293ffa36 	bltu	r5,r4,4001d38 <__alt_data_end+0xfc001d38>
 4001d50:	18000626 	beq	r3,zero,4001d6c <__umodsi3+0x4c>
 4001d54:	1806d07a 	srli	r3,r3,1
 4001d58:	11400136 	bltu	r2,r5,4001d60 <__umodsi3+0x40>
 4001d5c:	1145c83a 	sub	r2,r2,r5
 4001d60:	280ad07a 	srli	r5,r5,1
 4001d64:	183ffb1e 	bne	r3,zero,4001d54 <__alt_data_end+0xfc001d54>
 4001d68:	f800283a 	ret
 4001d6c:	f800283a 	ret
 4001d70:	00c00044 	movi	r3,1
 4001d74:	003ff706 	br	4001d54 <__alt_data_end+0xfc001d54>

04001d78 <_printf_r>:
 4001d78:	defffd04 	addi	sp,sp,-12
 4001d7c:	2805883a 	mov	r2,r5
 4001d80:	dfc00015 	stw	ra,0(sp)
 4001d84:	d9800115 	stw	r6,4(sp)
 4001d88:	d9c00215 	stw	r7,8(sp)
 4001d8c:	21400217 	ldw	r5,8(r4)
 4001d90:	d9c00104 	addi	r7,sp,4
 4001d94:	100d883a 	mov	r6,r2
 4001d98:	4001f500 	call	4001f50 <___vfprintf_internal_r>
 4001d9c:	dfc00017 	ldw	ra,0(sp)
 4001da0:	dec00304 	addi	sp,sp,12
 4001da4:	f800283a 	ret

04001da8 <printf>:
 4001da8:	defffc04 	addi	sp,sp,-16
 4001dac:	dfc00015 	stw	ra,0(sp)
 4001db0:	d9400115 	stw	r5,4(sp)
 4001db4:	d9800215 	stw	r6,8(sp)
 4001db8:	d9c00315 	stw	r7,12(sp)
 4001dbc:	008100f4 	movhi	r2,1027
 4001dc0:	10927d04 	addi	r2,r2,18932
 4001dc4:	10800017 	ldw	r2,0(r2)
 4001dc8:	200b883a 	mov	r5,r4
 4001dcc:	d9800104 	addi	r6,sp,4
 4001dd0:	11000217 	ldw	r4,8(r2)
 4001dd4:	40041480 	call	4004148 <__vfprintf_internal>
 4001dd8:	dfc00017 	ldw	ra,0(sp)
 4001ddc:	dec00404 	addi	sp,sp,16
 4001de0:	f800283a 	ret

04001de4 <_puts_r>:
 4001de4:	defff604 	addi	sp,sp,-40
 4001de8:	dc000715 	stw	r16,28(sp)
 4001dec:	2021883a 	mov	r16,r4
 4001df0:	2809883a 	mov	r4,r5
 4001df4:	dc400815 	stw	r17,32(sp)
 4001df8:	dfc00915 	stw	ra,36(sp)
 4001dfc:	2823883a 	mov	r17,r5
 4001e00:	4001eb80 	call	4001eb8 <strlen>
 4001e04:	10c00044 	addi	r3,r2,1
 4001e08:	d8800115 	stw	r2,4(sp)
 4001e0c:	008100f4 	movhi	r2,1027
 4001e10:	10853204 	addi	r2,r2,5320
 4001e14:	d8800215 	stw	r2,8(sp)
 4001e18:	00800044 	movi	r2,1
 4001e1c:	d8800315 	stw	r2,12(sp)
 4001e20:	00800084 	movi	r2,2
 4001e24:	dc400015 	stw	r17,0(sp)
 4001e28:	d8c00615 	stw	r3,24(sp)
 4001e2c:	dec00415 	stw	sp,16(sp)
 4001e30:	d8800515 	stw	r2,20(sp)
 4001e34:	80000226 	beq	r16,zero,4001e40 <_puts_r+0x5c>
 4001e38:	80800e17 	ldw	r2,56(r16)
 4001e3c:	10001426 	beq	r2,zero,4001e90 <_puts_r+0xac>
 4001e40:	81400217 	ldw	r5,8(r16)
 4001e44:	2880030b 	ldhu	r2,12(r5)
 4001e48:	10c8000c 	andi	r3,r2,8192
 4001e4c:	1800061e 	bne	r3,zero,4001e68 <_puts_r+0x84>
 4001e50:	29001917 	ldw	r4,100(r5)
 4001e54:	00f7ffc4 	movi	r3,-8193
 4001e58:	10880014 	ori	r2,r2,8192
 4001e5c:	20c6703a 	and	r3,r4,r3
 4001e60:	2880030d 	sth	r2,12(r5)
 4001e64:	28c01915 	stw	r3,100(r5)
 4001e68:	d9800404 	addi	r6,sp,16
 4001e6c:	8009883a 	mov	r4,r16
 4001e70:	40066780 	call	4006678 <__sfvwrite_r>
 4001e74:	1000091e 	bne	r2,zero,4001e9c <_puts_r+0xb8>
 4001e78:	00800284 	movi	r2,10
 4001e7c:	dfc00917 	ldw	ra,36(sp)
 4001e80:	dc400817 	ldw	r17,32(sp)
 4001e84:	dc000717 	ldw	r16,28(sp)
 4001e88:	dec00a04 	addi	sp,sp,40
 4001e8c:	f800283a 	ret
 4001e90:	8009883a 	mov	r4,r16
 4001e94:	40061f40 	call	40061f4 <__sinit>
 4001e98:	003fe906 	br	4001e40 <__alt_data_end+0xfc001e40>
 4001e9c:	00bfffc4 	movi	r2,-1
 4001ea0:	003ff606 	br	4001e7c <__alt_data_end+0xfc001e7c>

04001ea4 <puts>:
 4001ea4:	008100f4 	movhi	r2,1027
 4001ea8:	10927d04 	addi	r2,r2,18932
 4001eac:	200b883a 	mov	r5,r4
 4001eb0:	11000017 	ldw	r4,0(r2)
 4001eb4:	4001de41 	jmpi	4001de4 <_puts_r>

04001eb8 <strlen>:
 4001eb8:	208000cc 	andi	r2,r4,3
 4001ebc:	10002026 	beq	r2,zero,4001f40 <strlen+0x88>
 4001ec0:	20800007 	ldb	r2,0(r4)
 4001ec4:	10002026 	beq	r2,zero,4001f48 <strlen+0x90>
 4001ec8:	2005883a 	mov	r2,r4
 4001ecc:	00000206 	br	4001ed8 <strlen+0x20>
 4001ed0:	10c00007 	ldb	r3,0(r2)
 4001ed4:	18001826 	beq	r3,zero,4001f38 <strlen+0x80>
 4001ed8:	10800044 	addi	r2,r2,1
 4001edc:	10c000cc 	andi	r3,r2,3
 4001ee0:	183ffb1e 	bne	r3,zero,4001ed0 <__alt_data_end+0xfc001ed0>
 4001ee4:	10c00017 	ldw	r3,0(r2)
 4001ee8:	01ffbff4 	movhi	r7,65279
 4001eec:	39ffbfc4 	addi	r7,r7,-257
 4001ef0:	00ca303a 	nor	r5,zero,r3
 4001ef4:	01a02074 	movhi	r6,32897
 4001ef8:	19c7883a 	add	r3,r3,r7
 4001efc:	31a02004 	addi	r6,r6,-32640
 4001f00:	1946703a 	and	r3,r3,r5
 4001f04:	1986703a 	and	r3,r3,r6
 4001f08:	1800091e 	bne	r3,zero,4001f30 <strlen+0x78>
 4001f0c:	10800104 	addi	r2,r2,4
 4001f10:	10c00017 	ldw	r3,0(r2)
 4001f14:	19cb883a 	add	r5,r3,r7
 4001f18:	00c6303a 	nor	r3,zero,r3
 4001f1c:	28c6703a 	and	r3,r5,r3
 4001f20:	1986703a 	and	r3,r3,r6
 4001f24:	183ff926 	beq	r3,zero,4001f0c <__alt_data_end+0xfc001f0c>
 4001f28:	00000106 	br	4001f30 <strlen+0x78>
 4001f2c:	10800044 	addi	r2,r2,1
 4001f30:	10c00007 	ldb	r3,0(r2)
 4001f34:	183ffd1e 	bne	r3,zero,4001f2c <__alt_data_end+0xfc001f2c>
 4001f38:	1105c83a 	sub	r2,r2,r4
 4001f3c:	f800283a 	ret
 4001f40:	2005883a 	mov	r2,r4
 4001f44:	003fe706 	br	4001ee4 <__alt_data_end+0xfc001ee4>
 4001f48:	0005883a 	mov	r2,zero
 4001f4c:	f800283a 	ret

04001f50 <___vfprintf_internal_r>:
 4001f50:	deffb804 	addi	sp,sp,-288
 4001f54:	dfc04715 	stw	ra,284(sp)
 4001f58:	ddc04515 	stw	r23,276(sp)
 4001f5c:	dd404315 	stw	r21,268(sp)
 4001f60:	d9002c15 	stw	r4,176(sp)
 4001f64:	282f883a 	mov	r23,r5
 4001f68:	302b883a 	mov	r21,r6
 4001f6c:	d9c02d15 	stw	r7,180(sp)
 4001f70:	df004615 	stw	fp,280(sp)
 4001f74:	dd804415 	stw	r22,272(sp)
 4001f78:	dd004215 	stw	r20,264(sp)
 4001f7c:	dcc04115 	stw	r19,260(sp)
 4001f80:	dc804015 	stw	r18,256(sp)
 4001f84:	dc403f15 	stw	r17,252(sp)
 4001f88:	dc003e15 	stw	r16,248(sp)
 4001f8c:	4006d680 	call	4006d68 <_localeconv_r>
 4001f90:	10800017 	ldw	r2,0(r2)
 4001f94:	1009883a 	mov	r4,r2
 4001f98:	d8803415 	stw	r2,208(sp)
 4001f9c:	4001eb80 	call	4001eb8 <strlen>
 4001fa0:	d8803715 	stw	r2,220(sp)
 4001fa4:	d8802c17 	ldw	r2,176(sp)
 4001fa8:	10000226 	beq	r2,zero,4001fb4 <___vfprintf_internal_r+0x64>
 4001fac:	10800e17 	ldw	r2,56(r2)
 4001fb0:	1000f926 	beq	r2,zero,4002398 <___vfprintf_internal_r+0x448>
 4001fb4:	b880030b 	ldhu	r2,12(r23)
 4001fb8:	10c8000c 	andi	r3,r2,8192
 4001fbc:	1800061e 	bne	r3,zero,4001fd8 <___vfprintf_internal_r+0x88>
 4001fc0:	b9001917 	ldw	r4,100(r23)
 4001fc4:	00f7ffc4 	movi	r3,-8193
 4001fc8:	10880014 	ori	r2,r2,8192
 4001fcc:	20c6703a 	and	r3,r4,r3
 4001fd0:	b880030d 	sth	r2,12(r23)
 4001fd4:	b8c01915 	stw	r3,100(r23)
 4001fd8:	10c0020c 	andi	r3,r2,8
 4001fdc:	1800c126 	beq	r3,zero,40022e4 <___vfprintf_internal_r+0x394>
 4001fe0:	b8c00417 	ldw	r3,16(r23)
 4001fe4:	1800bf26 	beq	r3,zero,40022e4 <___vfprintf_internal_r+0x394>
 4001fe8:	1080068c 	andi	r2,r2,26
 4001fec:	00c00284 	movi	r3,10
 4001ff0:	10c0c426 	beq	r2,r3,4002304 <___vfprintf_internal_r+0x3b4>
 4001ff4:	d8c00404 	addi	r3,sp,16
 4001ff8:	050100f4 	movhi	r20,1027
 4001ffc:	d9001e04 	addi	r4,sp,120
 4002000:	a5054384 	addi	r20,r20,5390
 4002004:	d8c01e15 	stw	r3,120(sp)
 4002008:	d8002015 	stw	zero,128(sp)
 400200c:	d8001f15 	stw	zero,124(sp)
 4002010:	d8003315 	stw	zero,204(sp)
 4002014:	d8003615 	stw	zero,216(sp)
 4002018:	d8003815 	stw	zero,224(sp)
 400201c:	1811883a 	mov	r8,r3
 4002020:	d8003915 	stw	zero,228(sp)
 4002024:	d8003a15 	stw	zero,232(sp)
 4002028:	d8002f15 	stw	zero,188(sp)
 400202c:	d9002815 	stw	r4,160(sp)
 4002030:	a8800007 	ldb	r2,0(r21)
 4002034:	10027b26 	beq	r2,zero,4002a24 <___vfprintf_internal_r+0xad4>
 4002038:	00c00944 	movi	r3,37
 400203c:	a821883a 	mov	r16,r21
 4002040:	10c0021e 	bne	r2,r3,400204c <___vfprintf_internal_r+0xfc>
 4002044:	00001406 	br	4002098 <___vfprintf_internal_r+0x148>
 4002048:	10c00326 	beq	r2,r3,4002058 <___vfprintf_internal_r+0x108>
 400204c:	84000044 	addi	r16,r16,1
 4002050:	80800007 	ldb	r2,0(r16)
 4002054:	103ffc1e 	bne	r2,zero,4002048 <__alt_data_end+0xfc002048>
 4002058:	8563c83a 	sub	r17,r16,r21
 400205c:	88000e26 	beq	r17,zero,4002098 <___vfprintf_internal_r+0x148>
 4002060:	d8c02017 	ldw	r3,128(sp)
 4002064:	d8801f17 	ldw	r2,124(sp)
 4002068:	45400015 	stw	r21,0(r8)
 400206c:	1c47883a 	add	r3,r3,r17
 4002070:	10800044 	addi	r2,r2,1
 4002074:	d8c02015 	stw	r3,128(sp)
 4002078:	44400115 	stw	r17,4(r8)
 400207c:	d8801f15 	stw	r2,124(sp)
 4002080:	00c001c4 	movi	r3,7
 4002084:	1880a716 	blt	r3,r2,4002324 <___vfprintf_internal_r+0x3d4>
 4002088:	42000204 	addi	r8,r8,8
 400208c:	d9402f17 	ldw	r5,188(sp)
 4002090:	2c4b883a 	add	r5,r5,r17
 4002094:	d9402f15 	stw	r5,188(sp)
 4002098:	80800007 	ldb	r2,0(r16)
 400209c:	1000a826 	beq	r2,zero,4002340 <___vfprintf_internal_r+0x3f0>
 40020a0:	84400047 	ldb	r17,1(r16)
 40020a4:	00bfffc4 	movi	r2,-1
 40020a8:	85400044 	addi	r21,r16,1
 40020ac:	d8002785 	stb	zero,158(sp)
 40020b0:	0007883a 	mov	r3,zero
 40020b4:	000f883a 	mov	r7,zero
 40020b8:	d8802915 	stw	r2,164(sp)
 40020bc:	d8003115 	stw	zero,196(sp)
 40020c0:	0025883a 	mov	r18,zero
 40020c4:	01401604 	movi	r5,88
 40020c8:	01800244 	movi	r6,9
 40020cc:	02800a84 	movi	r10,42
 40020d0:	02401b04 	movi	r9,108
 40020d4:	ad400044 	addi	r21,r21,1
 40020d8:	88bff804 	addi	r2,r17,-32
 40020dc:	28830436 	bltu	r5,r2,4002cf0 <___vfprintf_internal_r+0xda0>
 40020e0:	100490ba 	slli	r2,r2,2
 40020e4:	01010034 	movhi	r4,1024
 40020e8:	21083e04 	addi	r4,r4,8440
 40020ec:	1105883a 	add	r2,r2,r4
 40020f0:	10800017 	ldw	r2,0(r2)
 40020f4:	1000683a 	jmp	r2
 40020f8:	04002c10 	cmplti	r16,zero,176
 40020fc:	04002cf0 	cmpltui	r16,zero,179
 4002100:	04002cf0 	cmpltui	r16,zero,179
 4002104:	04002c30 	cmpltui	r16,zero,176
 4002108:	04002cf0 	cmpltui	r16,zero,179
 400210c:	04002cf0 	cmpltui	r16,zero,179
 4002110:	04002cf0 	cmpltui	r16,zero,179
 4002114:	04002cf0 	cmpltui	r16,zero,179
 4002118:	04002cf0 	cmpltui	r16,zero,179
 400211c:	04002cf0 	cmpltui	r16,zero,179
 4002120:	040023a4 	muli	r16,zero,142
 4002124:	04002b4c 	andi	r16,zero,173
 4002128:	04002cf0 	cmpltui	r16,zero,179
 400212c:	0400226c 	andhi	r16,zero,137
 4002130:	040023cc 	andi	r16,zero,143
 4002134:	04002cf0 	cmpltui	r16,zero,179
 4002138:	0400240c 	andi	r16,zero,144
 400213c:	04002418 	cmpnei	r16,zero,144
 4002140:	04002418 	cmpnei	r16,zero,144
 4002144:	04002418 	cmpnei	r16,zero,144
 4002148:	04002418 	cmpnei	r16,zero,144
 400214c:	04002418 	cmpnei	r16,zero,144
 4002150:	04002418 	cmpnei	r16,zero,144
 4002154:	04002418 	cmpnei	r16,zero,144
 4002158:	04002418 	cmpnei	r16,zero,144
 400215c:	04002418 	cmpnei	r16,zero,144
 4002160:	04002cf0 	cmpltui	r16,zero,179
 4002164:	04002cf0 	cmpltui	r16,zero,179
 4002168:	04002cf0 	cmpltui	r16,zero,179
 400216c:	04002cf0 	cmpltui	r16,zero,179
 4002170:	04002cf0 	cmpltui	r16,zero,179
 4002174:	04002cf0 	cmpltui	r16,zero,179
 4002178:	04002cf0 	cmpltui	r16,zero,179
 400217c:	04002cf0 	cmpltui	r16,zero,179
 4002180:	04002cf0 	cmpltui	r16,zero,179
 4002184:	04002cf0 	cmpltui	r16,zero,179
 4002188:	0400244c 	andi	r16,zero,145
 400218c:	04002508 	cmpgei	r16,zero,148
 4002190:	04002cf0 	cmpltui	r16,zero,179
 4002194:	04002508 	cmpgei	r16,zero,148
 4002198:	04002cf0 	cmpltui	r16,zero,179
 400219c:	04002cf0 	cmpltui	r16,zero,179
 40021a0:	04002cf0 	cmpltui	r16,zero,179
 40021a4:	04002cf0 	cmpltui	r16,zero,179
 40021a8:	040025a8 	cmpgeui	r16,zero,150
 40021ac:	04002cf0 	cmpltui	r16,zero,179
 40021b0:	04002cf0 	cmpltui	r16,zero,179
 40021b4:	040025b4 	movhi	r16,150
 40021b8:	04002cf0 	cmpltui	r16,zero,179
 40021bc:	04002cf0 	cmpltui	r16,zero,179
 40021c0:	04002cf0 	cmpltui	r16,zero,179
 40021c4:	04002cf0 	cmpltui	r16,zero,179
 40021c8:	04002cf0 	cmpltui	r16,zero,179
 40021cc:	04002a2c 	andhi	r16,zero,168
 40021d0:	04002cf0 	cmpltui	r16,zero,179
 40021d4:	04002cf0 	cmpltui	r16,zero,179
 40021d8:	04002a8c 	andi	r16,zero,170
 40021dc:	04002cf0 	cmpltui	r16,zero,179
 40021e0:	04002cf0 	cmpltui	r16,zero,179
 40021e4:	04002cf0 	cmpltui	r16,zero,179
 40021e8:	04002cf0 	cmpltui	r16,zero,179
 40021ec:	04002cf0 	cmpltui	r16,zero,179
 40021f0:	04002cf0 	cmpltui	r16,zero,179
 40021f4:	04002cf0 	cmpltui	r16,zero,179
 40021f8:	04002cf0 	cmpltui	r16,zero,179
 40021fc:	04002cf0 	cmpltui	r16,zero,179
 4002200:	04002cf0 	cmpltui	r16,zero,179
 4002204:	04002c9c 	xori	r16,zero,178
 4002208:	04002c3c 	xorhi	r16,zero,176
 400220c:	04002508 	cmpgei	r16,zero,148
 4002210:	04002508 	cmpgei	r16,zero,148
 4002214:	04002508 	cmpgei	r16,zero,148
 4002218:	04002c4c 	andi	r16,zero,177
 400221c:	04002c3c 	xorhi	r16,zero,176
 4002220:	04002cf0 	cmpltui	r16,zero,179
 4002224:	04002cf0 	cmpltui	r16,zero,179
 4002228:	04002c58 	cmpnei	r16,zero,177
 400222c:	04002cf0 	cmpltui	r16,zero,179
 4002230:	04002c68 	cmpgeui	r16,zero,177
 4002234:	04002b3c 	xorhi	r16,zero,172
 4002238:	04002278 	rdprs	r16,zero,137
 400223c:	04002b5c 	xori	r16,zero,173
 4002240:	04002cf0 	cmpltui	r16,zero,179
 4002244:	04002b68 	cmpgeui	r16,zero,173
 4002248:	04002cf0 	cmpltui	r16,zero,179
 400224c:	04002bc4 	movi	r16,175
 4002250:	04002cf0 	cmpltui	r16,zero,179
 4002254:	04002cf0 	cmpltui	r16,zero,179
 4002258:	04002bd4 	movui	r16,175
 400225c:	d9003117 	ldw	r4,196(sp)
 4002260:	d8802d15 	stw	r2,180(sp)
 4002264:	0109c83a 	sub	r4,zero,r4
 4002268:	d9003115 	stw	r4,196(sp)
 400226c:	94800114 	ori	r18,r18,4
 4002270:	ac400007 	ldb	r17,0(r21)
 4002274:	003f9706 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002278:	00800c04 	movi	r2,48
 400227c:	d9002d17 	ldw	r4,180(sp)
 4002280:	d9402917 	ldw	r5,164(sp)
 4002284:	d8802705 	stb	r2,156(sp)
 4002288:	00801e04 	movi	r2,120
 400228c:	d8802745 	stb	r2,157(sp)
 4002290:	d8002785 	stb	zero,158(sp)
 4002294:	20c00104 	addi	r3,r4,4
 4002298:	24c00017 	ldw	r19,0(r4)
 400229c:	002d883a 	mov	r22,zero
 40022a0:	90800094 	ori	r2,r18,2
 40022a4:	28029a16 	blt	r5,zero,4002d10 <___vfprintf_internal_r+0xdc0>
 40022a8:	00bfdfc4 	movi	r2,-129
 40022ac:	90a4703a 	and	r18,r18,r2
 40022b0:	d8c02d15 	stw	r3,180(sp)
 40022b4:	94800094 	ori	r18,r18,2
 40022b8:	9802871e 	bne	r19,zero,4002cd8 <___vfprintf_internal_r+0xd88>
 40022bc:	008100f4 	movhi	r2,1027
 40022c0:	10853c04 	addi	r2,r2,5360
 40022c4:	d8803915 	stw	r2,228(sp)
 40022c8:	04401e04 	movi	r17,120
 40022cc:	d8802917 	ldw	r2,164(sp)
 40022d0:	0039883a 	mov	fp,zero
 40022d4:	1001e926 	beq	r2,zero,4002a7c <___vfprintf_internal_r+0xb2c>
 40022d8:	0027883a 	mov	r19,zero
 40022dc:	002d883a 	mov	r22,zero
 40022e0:	00020506 	br	4002af8 <___vfprintf_internal_r+0xba8>
 40022e4:	d9002c17 	ldw	r4,176(sp)
 40022e8:	b80b883a 	mov	r5,r23
 40022ec:	40042200 	call	4004220 <__swsetup_r>
 40022f0:	1005ac1e 	bne	r2,zero,40039a4 <___vfprintf_internal_r+0x1a54>
 40022f4:	b880030b 	ldhu	r2,12(r23)
 40022f8:	00c00284 	movi	r3,10
 40022fc:	1080068c 	andi	r2,r2,26
 4002300:	10ff3c1e 	bne	r2,r3,4001ff4 <__alt_data_end+0xfc001ff4>
 4002304:	b880038f 	ldh	r2,14(r23)
 4002308:	103f3a16 	blt	r2,zero,4001ff4 <__alt_data_end+0xfc001ff4>
 400230c:	d9c02d17 	ldw	r7,180(sp)
 4002310:	d9002c17 	ldw	r4,176(sp)
 4002314:	a80d883a 	mov	r6,r21
 4002318:	b80b883a 	mov	r5,r23
 400231c:	40041640 	call	4004164 <__sbprintf>
 4002320:	00001106 	br	4002368 <___vfprintf_internal_r+0x418>
 4002324:	d9002c17 	ldw	r4,176(sp)
 4002328:	d9801e04 	addi	r6,sp,120
 400232c:	b80b883a 	mov	r5,r23
 4002330:	400954c0 	call	400954c <__sprint_r>
 4002334:	1000081e 	bne	r2,zero,4002358 <___vfprintf_internal_r+0x408>
 4002338:	da000404 	addi	r8,sp,16
 400233c:	003f5306 	br	400208c <__alt_data_end+0xfc00208c>
 4002340:	d8802017 	ldw	r2,128(sp)
 4002344:	10000426 	beq	r2,zero,4002358 <___vfprintf_internal_r+0x408>
 4002348:	d9002c17 	ldw	r4,176(sp)
 400234c:	d9801e04 	addi	r6,sp,120
 4002350:	b80b883a 	mov	r5,r23
 4002354:	400954c0 	call	400954c <__sprint_r>
 4002358:	b880030b 	ldhu	r2,12(r23)
 400235c:	1080100c 	andi	r2,r2,64
 4002360:	1005901e 	bne	r2,zero,40039a4 <___vfprintf_internal_r+0x1a54>
 4002364:	d8802f17 	ldw	r2,188(sp)
 4002368:	dfc04717 	ldw	ra,284(sp)
 400236c:	df004617 	ldw	fp,280(sp)
 4002370:	ddc04517 	ldw	r23,276(sp)
 4002374:	dd804417 	ldw	r22,272(sp)
 4002378:	dd404317 	ldw	r21,268(sp)
 400237c:	dd004217 	ldw	r20,264(sp)
 4002380:	dcc04117 	ldw	r19,260(sp)
 4002384:	dc804017 	ldw	r18,256(sp)
 4002388:	dc403f17 	ldw	r17,252(sp)
 400238c:	dc003e17 	ldw	r16,248(sp)
 4002390:	dec04804 	addi	sp,sp,288
 4002394:	f800283a 	ret
 4002398:	d9002c17 	ldw	r4,176(sp)
 400239c:	40061f40 	call	40061f4 <__sinit>
 40023a0:	003f0406 	br	4001fb4 <__alt_data_end+0xfc001fb4>
 40023a4:	d8802d17 	ldw	r2,180(sp)
 40023a8:	d9002d17 	ldw	r4,180(sp)
 40023ac:	10800017 	ldw	r2,0(r2)
 40023b0:	d8803115 	stw	r2,196(sp)
 40023b4:	20800104 	addi	r2,r4,4
 40023b8:	d9003117 	ldw	r4,196(sp)
 40023bc:	203fa716 	blt	r4,zero,400225c <__alt_data_end+0xfc00225c>
 40023c0:	d8802d15 	stw	r2,180(sp)
 40023c4:	ac400007 	ldb	r17,0(r21)
 40023c8:	003f4206 	br	40020d4 <__alt_data_end+0xfc0020d4>
 40023cc:	ac400007 	ldb	r17,0(r21)
 40023d0:	aac00044 	addi	r11,r21,1
 40023d4:	8a872826 	beq	r17,r10,4004078 <___vfprintf_internal_r+0x2128>
 40023d8:	88bff404 	addi	r2,r17,-48
 40023dc:	0009883a 	mov	r4,zero
 40023e0:	30867d36 	bltu	r6,r2,4003dd8 <___vfprintf_internal_r+0x1e88>
 40023e4:	5c400007 	ldb	r17,0(r11)
 40023e8:	210002a4 	muli	r4,r4,10
 40023ec:	5d400044 	addi	r21,r11,1
 40023f0:	a817883a 	mov	r11,r21
 40023f4:	2089883a 	add	r4,r4,r2
 40023f8:	88bff404 	addi	r2,r17,-48
 40023fc:	30bff92e 	bgeu	r6,r2,40023e4 <__alt_data_end+0xfc0023e4>
 4002400:	2005c916 	blt	r4,zero,4003b28 <___vfprintf_internal_r+0x1bd8>
 4002404:	d9002915 	stw	r4,164(sp)
 4002408:	003f3306 	br	40020d8 <__alt_data_end+0xfc0020d8>
 400240c:	94802014 	ori	r18,r18,128
 4002410:	ac400007 	ldb	r17,0(r21)
 4002414:	003f2f06 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002418:	a809883a 	mov	r4,r21
 400241c:	d8003115 	stw	zero,196(sp)
 4002420:	88bff404 	addi	r2,r17,-48
 4002424:	0017883a 	mov	r11,zero
 4002428:	24400007 	ldb	r17,0(r4)
 400242c:	5ac002a4 	muli	r11,r11,10
 4002430:	ad400044 	addi	r21,r21,1
 4002434:	a809883a 	mov	r4,r21
 4002438:	12d7883a 	add	r11,r2,r11
 400243c:	88bff404 	addi	r2,r17,-48
 4002440:	30bff92e 	bgeu	r6,r2,4002428 <__alt_data_end+0xfc002428>
 4002444:	dac03115 	stw	r11,196(sp)
 4002448:	003f2306 	br	40020d8 <__alt_data_end+0xfc0020d8>
 400244c:	18c03fcc 	andi	r3,r3,255
 4002450:	18072b1e 	bne	r3,zero,4004100 <___vfprintf_internal_r+0x21b0>
 4002454:	94800414 	ori	r18,r18,16
 4002458:	9080080c 	andi	r2,r18,32
 400245c:	10037b26 	beq	r2,zero,400324c <___vfprintf_internal_r+0x12fc>
 4002460:	d9402d17 	ldw	r5,180(sp)
 4002464:	28800117 	ldw	r2,4(r5)
 4002468:	2cc00017 	ldw	r19,0(r5)
 400246c:	29400204 	addi	r5,r5,8
 4002470:	d9402d15 	stw	r5,180(sp)
 4002474:	102d883a 	mov	r22,r2
 4002478:	10044b16 	blt	r2,zero,40035a8 <___vfprintf_internal_r+0x1658>
 400247c:	d9402917 	ldw	r5,164(sp)
 4002480:	df002783 	ldbu	fp,158(sp)
 4002484:	2803bc16 	blt	r5,zero,4003378 <___vfprintf_internal_r+0x1428>
 4002488:	00ffdfc4 	movi	r3,-129
 400248c:	9d84b03a 	or	r2,r19,r22
 4002490:	90e4703a 	and	r18,r18,r3
 4002494:	10017726 	beq	r2,zero,4002a74 <___vfprintf_internal_r+0xb24>
 4002498:	b0038326 	beq	r22,zero,40032a8 <___vfprintf_internal_r+0x1358>
 400249c:	dc402a15 	stw	r17,168(sp)
 40024a0:	dc001e04 	addi	r16,sp,120
 40024a4:	b023883a 	mov	r17,r22
 40024a8:	402d883a 	mov	r22,r8
 40024ac:	9809883a 	mov	r4,r19
 40024b0:	880b883a 	mov	r5,r17
 40024b4:	01800284 	movi	r6,10
 40024b8:	000f883a 	mov	r7,zero
 40024bc:	400b9440 	call	400b944 <__umoddi3>
 40024c0:	10800c04 	addi	r2,r2,48
 40024c4:	843fffc4 	addi	r16,r16,-1
 40024c8:	9809883a 	mov	r4,r19
 40024cc:	880b883a 	mov	r5,r17
 40024d0:	80800005 	stb	r2,0(r16)
 40024d4:	01800284 	movi	r6,10
 40024d8:	000f883a 	mov	r7,zero
 40024dc:	400b3cc0 	call	400b3cc <__udivdi3>
 40024e0:	1027883a 	mov	r19,r2
 40024e4:	10c4b03a 	or	r2,r2,r3
 40024e8:	1823883a 	mov	r17,r3
 40024ec:	103fef1e 	bne	r2,zero,40024ac <__alt_data_end+0xfc0024ac>
 40024f0:	d8c02817 	ldw	r3,160(sp)
 40024f4:	dc402a17 	ldw	r17,168(sp)
 40024f8:	b011883a 	mov	r8,r22
 40024fc:	1c07c83a 	sub	r3,r3,r16
 4002500:	d8c02e15 	stw	r3,184(sp)
 4002504:	00005906 	br	400266c <___vfprintf_internal_r+0x71c>
 4002508:	18c03fcc 	andi	r3,r3,255
 400250c:	1806fa1e 	bne	r3,zero,40040f8 <___vfprintf_internal_r+0x21a8>
 4002510:	9080020c 	andi	r2,r18,8
 4002514:	10048a26 	beq	r2,zero,4003740 <___vfprintf_internal_r+0x17f0>
 4002518:	d8c02d17 	ldw	r3,180(sp)
 400251c:	d9002d17 	ldw	r4,180(sp)
 4002520:	d9402d17 	ldw	r5,180(sp)
 4002524:	18c00017 	ldw	r3,0(r3)
 4002528:	21000117 	ldw	r4,4(r4)
 400252c:	29400204 	addi	r5,r5,8
 4002530:	d8c03615 	stw	r3,216(sp)
 4002534:	d9003815 	stw	r4,224(sp)
 4002538:	d9402d15 	stw	r5,180(sp)
 400253c:	d9003617 	ldw	r4,216(sp)
 4002540:	d9403817 	ldw	r5,224(sp)
 4002544:	da003d15 	stw	r8,244(sp)
 4002548:	04000044 	movi	r16,1
 400254c:	40091700 	call	4009170 <__fpclassifyd>
 4002550:	da003d17 	ldw	r8,244(sp)
 4002554:	14041f1e 	bne	r2,r16,40035d4 <___vfprintf_internal_r+0x1684>
 4002558:	d9003617 	ldw	r4,216(sp)
 400255c:	d9403817 	ldw	r5,224(sp)
 4002560:	000d883a 	mov	r6,zero
 4002564:	000f883a 	mov	r7,zero
 4002568:	400d1740 	call	400d174 <__ledf2>
 400256c:	da003d17 	ldw	r8,244(sp)
 4002570:	1005be16 	blt	r2,zero,4003c6c <___vfprintf_internal_r+0x1d1c>
 4002574:	df002783 	ldbu	fp,158(sp)
 4002578:	008011c4 	movi	r2,71
 400257c:	1445330e 	bge	r2,r17,4003a4c <___vfprintf_internal_r+0x1afc>
 4002580:	040100f4 	movhi	r16,1027
 4002584:	84053404 	addi	r16,r16,5328
 4002588:	00c000c4 	movi	r3,3
 400258c:	00bfdfc4 	movi	r2,-129
 4002590:	d8c02a15 	stw	r3,168(sp)
 4002594:	90a4703a 	and	r18,r18,r2
 4002598:	d8c02e15 	stw	r3,184(sp)
 400259c:	d8002915 	stw	zero,164(sp)
 40025a0:	d8003215 	stw	zero,200(sp)
 40025a4:	00003706 	br	4002684 <___vfprintf_internal_r+0x734>
 40025a8:	94800214 	ori	r18,r18,8
 40025ac:	ac400007 	ldb	r17,0(r21)
 40025b0:	003ec806 	br	40020d4 <__alt_data_end+0xfc0020d4>
 40025b4:	18c03fcc 	andi	r3,r3,255
 40025b8:	1806db1e 	bne	r3,zero,4004128 <___vfprintf_internal_r+0x21d8>
 40025bc:	94800414 	ori	r18,r18,16
 40025c0:	9080080c 	andi	r2,r18,32
 40025c4:	1002d826 	beq	r2,zero,4003128 <___vfprintf_internal_r+0x11d8>
 40025c8:	d9402d17 	ldw	r5,180(sp)
 40025cc:	d8c02917 	ldw	r3,164(sp)
 40025d0:	d8002785 	stb	zero,158(sp)
 40025d4:	28800204 	addi	r2,r5,8
 40025d8:	2cc00017 	ldw	r19,0(r5)
 40025dc:	2d800117 	ldw	r22,4(r5)
 40025e0:	18048f16 	blt	r3,zero,4003820 <___vfprintf_internal_r+0x18d0>
 40025e4:	013fdfc4 	movi	r4,-129
 40025e8:	9d86b03a 	or	r3,r19,r22
 40025ec:	d8802d15 	stw	r2,180(sp)
 40025f0:	9124703a 	and	r18,r18,r4
 40025f4:	1802d91e 	bne	r3,zero,400315c <___vfprintf_internal_r+0x120c>
 40025f8:	d8c02917 	ldw	r3,164(sp)
 40025fc:	0039883a 	mov	fp,zero
 4002600:	1805c326 	beq	r3,zero,4003d10 <___vfprintf_internal_r+0x1dc0>
 4002604:	0027883a 	mov	r19,zero
 4002608:	002d883a 	mov	r22,zero
 400260c:	dc001e04 	addi	r16,sp,120
 4002610:	9806d0fa 	srli	r3,r19,3
 4002614:	b008977a 	slli	r4,r22,29
 4002618:	b02cd0fa 	srli	r22,r22,3
 400261c:	9cc001cc 	andi	r19,r19,7
 4002620:	98800c04 	addi	r2,r19,48
 4002624:	843fffc4 	addi	r16,r16,-1
 4002628:	20e6b03a 	or	r19,r4,r3
 400262c:	80800005 	stb	r2,0(r16)
 4002630:	9d86b03a 	or	r3,r19,r22
 4002634:	183ff61e 	bne	r3,zero,4002610 <__alt_data_end+0xfc002610>
 4002638:	90c0004c 	andi	r3,r18,1
 400263c:	18013b26 	beq	r3,zero,4002b2c <___vfprintf_internal_r+0xbdc>
 4002640:	10803fcc 	andi	r2,r2,255
 4002644:	1080201c 	xori	r2,r2,128
 4002648:	10bfe004 	addi	r2,r2,-128
 400264c:	00c00c04 	movi	r3,48
 4002650:	10c13626 	beq	r2,r3,4002b2c <___vfprintf_internal_r+0xbdc>
 4002654:	80ffffc5 	stb	r3,-1(r16)
 4002658:	d8c02817 	ldw	r3,160(sp)
 400265c:	80bfffc4 	addi	r2,r16,-1
 4002660:	1021883a 	mov	r16,r2
 4002664:	1887c83a 	sub	r3,r3,r2
 4002668:	d8c02e15 	stw	r3,184(sp)
 400266c:	d8802e17 	ldw	r2,184(sp)
 4002670:	d9002917 	ldw	r4,164(sp)
 4002674:	1100010e 	bge	r2,r4,400267c <___vfprintf_internal_r+0x72c>
 4002678:	2005883a 	mov	r2,r4
 400267c:	d8802a15 	stw	r2,168(sp)
 4002680:	d8003215 	stw	zero,200(sp)
 4002684:	e7003fcc 	andi	fp,fp,255
 4002688:	e700201c 	xori	fp,fp,128
 400268c:	e73fe004 	addi	fp,fp,-128
 4002690:	e0000326 	beq	fp,zero,40026a0 <___vfprintf_internal_r+0x750>
 4002694:	d8c02a17 	ldw	r3,168(sp)
 4002698:	18c00044 	addi	r3,r3,1
 400269c:	d8c02a15 	stw	r3,168(sp)
 40026a0:	90c0008c 	andi	r3,r18,2
 40026a4:	d8c02b15 	stw	r3,172(sp)
 40026a8:	18000326 	beq	r3,zero,40026b8 <___vfprintf_internal_r+0x768>
 40026ac:	d8c02a17 	ldw	r3,168(sp)
 40026b0:	18c00084 	addi	r3,r3,2
 40026b4:	d8c02a15 	stw	r3,168(sp)
 40026b8:	90c0210c 	andi	r3,r18,132
 40026bc:	d8c03015 	stw	r3,192(sp)
 40026c0:	1801a31e 	bne	r3,zero,4002d50 <___vfprintf_internal_r+0xe00>
 40026c4:	d9003117 	ldw	r4,196(sp)
 40026c8:	d8c02a17 	ldw	r3,168(sp)
 40026cc:	20e7c83a 	sub	r19,r4,r3
 40026d0:	04c19f0e 	bge	zero,r19,4002d50 <___vfprintf_internal_r+0xe00>
 40026d4:	02400404 	movi	r9,16
 40026d8:	d8c02017 	ldw	r3,128(sp)
 40026dc:	d8801f17 	ldw	r2,124(sp)
 40026e0:	4cc50d0e 	bge	r9,r19,4003b18 <___vfprintf_internal_r+0x1bc8>
 40026e4:	014100f4 	movhi	r5,1027
 40026e8:	29454784 	addi	r5,r5,5406
 40026ec:	dc403b15 	stw	r17,236(sp)
 40026f0:	d9403515 	stw	r5,212(sp)
 40026f4:	9823883a 	mov	r17,r19
 40026f8:	482d883a 	mov	r22,r9
 40026fc:	9027883a 	mov	r19,r18
 4002700:	070001c4 	movi	fp,7
 4002704:	8025883a 	mov	r18,r16
 4002708:	dc002c17 	ldw	r16,176(sp)
 400270c:	00000306 	br	400271c <___vfprintf_internal_r+0x7cc>
 4002710:	8c7ffc04 	addi	r17,r17,-16
 4002714:	42000204 	addi	r8,r8,8
 4002718:	b440130e 	bge	r22,r17,4002768 <___vfprintf_internal_r+0x818>
 400271c:	010100f4 	movhi	r4,1027
 4002720:	18c00404 	addi	r3,r3,16
 4002724:	10800044 	addi	r2,r2,1
 4002728:	21054784 	addi	r4,r4,5406
 400272c:	41000015 	stw	r4,0(r8)
 4002730:	45800115 	stw	r22,4(r8)
 4002734:	d8c02015 	stw	r3,128(sp)
 4002738:	d8801f15 	stw	r2,124(sp)
 400273c:	e0bff40e 	bge	fp,r2,4002710 <__alt_data_end+0xfc002710>
 4002740:	d9801e04 	addi	r6,sp,120
 4002744:	b80b883a 	mov	r5,r23
 4002748:	8009883a 	mov	r4,r16
 400274c:	400954c0 	call	400954c <__sprint_r>
 4002750:	103f011e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4002754:	8c7ffc04 	addi	r17,r17,-16
 4002758:	d8c02017 	ldw	r3,128(sp)
 400275c:	d8801f17 	ldw	r2,124(sp)
 4002760:	da000404 	addi	r8,sp,16
 4002764:	b47fed16 	blt	r22,r17,400271c <__alt_data_end+0xfc00271c>
 4002768:	9021883a 	mov	r16,r18
 400276c:	9825883a 	mov	r18,r19
 4002770:	8827883a 	mov	r19,r17
 4002774:	dc403b17 	ldw	r17,236(sp)
 4002778:	d9403517 	ldw	r5,212(sp)
 400277c:	98c7883a 	add	r3,r19,r3
 4002780:	10800044 	addi	r2,r2,1
 4002784:	41400015 	stw	r5,0(r8)
 4002788:	44c00115 	stw	r19,4(r8)
 400278c:	d8c02015 	stw	r3,128(sp)
 4002790:	d8801f15 	stw	r2,124(sp)
 4002794:	010001c4 	movi	r4,7
 4002798:	2082a316 	blt	r4,r2,4003228 <___vfprintf_internal_r+0x12d8>
 400279c:	df002787 	ldb	fp,158(sp)
 40027a0:	42000204 	addi	r8,r8,8
 40027a4:	e0000c26 	beq	fp,zero,40027d8 <___vfprintf_internal_r+0x888>
 40027a8:	d8801f17 	ldw	r2,124(sp)
 40027ac:	d9002784 	addi	r4,sp,158
 40027b0:	18c00044 	addi	r3,r3,1
 40027b4:	10800044 	addi	r2,r2,1
 40027b8:	41000015 	stw	r4,0(r8)
 40027bc:	01000044 	movi	r4,1
 40027c0:	41000115 	stw	r4,4(r8)
 40027c4:	d8c02015 	stw	r3,128(sp)
 40027c8:	d8801f15 	stw	r2,124(sp)
 40027cc:	010001c4 	movi	r4,7
 40027d0:	20823c16 	blt	r4,r2,40030c4 <___vfprintf_internal_r+0x1174>
 40027d4:	42000204 	addi	r8,r8,8
 40027d8:	d8802b17 	ldw	r2,172(sp)
 40027dc:	10000c26 	beq	r2,zero,4002810 <___vfprintf_internal_r+0x8c0>
 40027e0:	d8801f17 	ldw	r2,124(sp)
 40027e4:	d9002704 	addi	r4,sp,156
 40027e8:	18c00084 	addi	r3,r3,2
 40027ec:	10800044 	addi	r2,r2,1
 40027f0:	41000015 	stw	r4,0(r8)
 40027f4:	01000084 	movi	r4,2
 40027f8:	41000115 	stw	r4,4(r8)
 40027fc:	d8c02015 	stw	r3,128(sp)
 4002800:	d8801f15 	stw	r2,124(sp)
 4002804:	010001c4 	movi	r4,7
 4002808:	20823616 	blt	r4,r2,40030e4 <___vfprintf_internal_r+0x1194>
 400280c:	42000204 	addi	r8,r8,8
 4002810:	d9003017 	ldw	r4,192(sp)
 4002814:	00802004 	movi	r2,128
 4002818:	20819926 	beq	r4,r2,4002e80 <___vfprintf_internal_r+0xf30>
 400281c:	d9402917 	ldw	r5,164(sp)
 4002820:	d8802e17 	ldw	r2,184(sp)
 4002824:	28adc83a 	sub	r22,r5,r2
 4002828:	0580310e 	bge	zero,r22,40028f0 <___vfprintf_internal_r+0x9a0>
 400282c:	07000404 	movi	fp,16
 4002830:	d8801f17 	ldw	r2,124(sp)
 4002834:	e584140e 	bge	fp,r22,4003888 <___vfprintf_internal_r+0x1938>
 4002838:	014100f4 	movhi	r5,1027
 400283c:	29454384 	addi	r5,r5,5390
 4002840:	dc402915 	stw	r17,164(sp)
 4002844:	d9402b15 	stw	r5,172(sp)
 4002848:	b023883a 	mov	r17,r22
 400284c:	04c001c4 	movi	r19,7
 4002850:	a82d883a 	mov	r22,r21
 4002854:	902b883a 	mov	r21,r18
 4002858:	8025883a 	mov	r18,r16
 400285c:	dc002c17 	ldw	r16,176(sp)
 4002860:	00000306 	br	4002870 <___vfprintf_internal_r+0x920>
 4002864:	8c7ffc04 	addi	r17,r17,-16
 4002868:	42000204 	addi	r8,r8,8
 400286c:	e440110e 	bge	fp,r17,40028b4 <___vfprintf_internal_r+0x964>
 4002870:	18c00404 	addi	r3,r3,16
 4002874:	10800044 	addi	r2,r2,1
 4002878:	45000015 	stw	r20,0(r8)
 400287c:	47000115 	stw	fp,4(r8)
 4002880:	d8c02015 	stw	r3,128(sp)
 4002884:	d8801f15 	stw	r2,124(sp)
 4002888:	98bff60e 	bge	r19,r2,4002864 <__alt_data_end+0xfc002864>
 400288c:	d9801e04 	addi	r6,sp,120
 4002890:	b80b883a 	mov	r5,r23
 4002894:	8009883a 	mov	r4,r16
 4002898:	400954c0 	call	400954c <__sprint_r>
 400289c:	103eae1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40028a0:	8c7ffc04 	addi	r17,r17,-16
 40028a4:	d8c02017 	ldw	r3,128(sp)
 40028a8:	d8801f17 	ldw	r2,124(sp)
 40028ac:	da000404 	addi	r8,sp,16
 40028b0:	e47fef16 	blt	fp,r17,4002870 <__alt_data_end+0xfc002870>
 40028b4:	9021883a 	mov	r16,r18
 40028b8:	a825883a 	mov	r18,r21
 40028bc:	b02b883a 	mov	r21,r22
 40028c0:	882d883a 	mov	r22,r17
 40028c4:	dc402917 	ldw	r17,164(sp)
 40028c8:	d9002b17 	ldw	r4,172(sp)
 40028cc:	1d87883a 	add	r3,r3,r22
 40028d0:	10800044 	addi	r2,r2,1
 40028d4:	41000015 	stw	r4,0(r8)
 40028d8:	45800115 	stw	r22,4(r8)
 40028dc:	d8c02015 	stw	r3,128(sp)
 40028e0:	d8801f15 	stw	r2,124(sp)
 40028e4:	010001c4 	movi	r4,7
 40028e8:	2081ee16 	blt	r4,r2,40030a4 <___vfprintf_internal_r+0x1154>
 40028ec:	42000204 	addi	r8,r8,8
 40028f0:	9080400c 	andi	r2,r18,256
 40028f4:	1001181e 	bne	r2,zero,4002d58 <___vfprintf_internal_r+0xe08>
 40028f8:	d9402e17 	ldw	r5,184(sp)
 40028fc:	d8801f17 	ldw	r2,124(sp)
 4002900:	44000015 	stw	r16,0(r8)
 4002904:	1947883a 	add	r3,r3,r5
 4002908:	10800044 	addi	r2,r2,1
 400290c:	41400115 	stw	r5,4(r8)
 4002910:	d8c02015 	stw	r3,128(sp)
 4002914:	d8801f15 	stw	r2,124(sp)
 4002918:	010001c4 	movi	r4,7
 400291c:	2081d316 	blt	r4,r2,400306c <___vfprintf_internal_r+0x111c>
 4002920:	42000204 	addi	r8,r8,8
 4002924:	9480010c 	andi	r18,r18,4
 4002928:	90003226 	beq	r18,zero,40029f4 <___vfprintf_internal_r+0xaa4>
 400292c:	d9403117 	ldw	r5,196(sp)
 4002930:	d8802a17 	ldw	r2,168(sp)
 4002934:	28a1c83a 	sub	r16,r5,r2
 4002938:	04002e0e 	bge	zero,r16,40029f4 <___vfprintf_internal_r+0xaa4>
 400293c:	04400404 	movi	r17,16
 4002940:	d8801f17 	ldw	r2,124(sp)
 4002944:	8c04a20e 	bge	r17,r16,4003bd0 <___vfprintf_internal_r+0x1c80>
 4002948:	014100f4 	movhi	r5,1027
 400294c:	29454784 	addi	r5,r5,5406
 4002950:	d9403515 	stw	r5,212(sp)
 4002954:	048001c4 	movi	r18,7
 4002958:	dcc02c17 	ldw	r19,176(sp)
 400295c:	00000306 	br	400296c <___vfprintf_internal_r+0xa1c>
 4002960:	843ffc04 	addi	r16,r16,-16
 4002964:	42000204 	addi	r8,r8,8
 4002968:	8c00130e 	bge	r17,r16,40029b8 <___vfprintf_internal_r+0xa68>
 400296c:	010100f4 	movhi	r4,1027
 4002970:	18c00404 	addi	r3,r3,16
 4002974:	10800044 	addi	r2,r2,1
 4002978:	21054784 	addi	r4,r4,5406
 400297c:	41000015 	stw	r4,0(r8)
 4002980:	44400115 	stw	r17,4(r8)
 4002984:	d8c02015 	stw	r3,128(sp)
 4002988:	d8801f15 	stw	r2,124(sp)
 400298c:	90bff40e 	bge	r18,r2,4002960 <__alt_data_end+0xfc002960>
 4002990:	d9801e04 	addi	r6,sp,120
 4002994:	b80b883a 	mov	r5,r23
 4002998:	9809883a 	mov	r4,r19
 400299c:	400954c0 	call	400954c <__sprint_r>
 40029a0:	103e6d1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40029a4:	843ffc04 	addi	r16,r16,-16
 40029a8:	d8c02017 	ldw	r3,128(sp)
 40029ac:	d8801f17 	ldw	r2,124(sp)
 40029b0:	da000404 	addi	r8,sp,16
 40029b4:	8c3fed16 	blt	r17,r16,400296c <__alt_data_end+0xfc00296c>
 40029b8:	d9403517 	ldw	r5,212(sp)
 40029bc:	1c07883a 	add	r3,r3,r16
 40029c0:	10800044 	addi	r2,r2,1
 40029c4:	41400015 	stw	r5,0(r8)
 40029c8:	44000115 	stw	r16,4(r8)
 40029cc:	d8c02015 	stw	r3,128(sp)
 40029d0:	d8801f15 	stw	r2,124(sp)
 40029d4:	010001c4 	movi	r4,7
 40029d8:	2080060e 	bge	r4,r2,40029f4 <___vfprintf_internal_r+0xaa4>
 40029dc:	d9002c17 	ldw	r4,176(sp)
 40029e0:	d9801e04 	addi	r6,sp,120
 40029e4:	b80b883a 	mov	r5,r23
 40029e8:	400954c0 	call	400954c <__sprint_r>
 40029ec:	103e5a1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40029f0:	d8c02017 	ldw	r3,128(sp)
 40029f4:	d8803117 	ldw	r2,196(sp)
 40029f8:	d9002a17 	ldw	r4,168(sp)
 40029fc:	1100010e 	bge	r2,r4,4002a04 <___vfprintf_internal_r+0xab4>
 4002a00:	2005883a 	mov	r2,r4
 4002a04:	d9402f17 	ldw	r5,188(sp)
 4002a08:	288b883a 	add	r5,r5,r2
 4002a0c:	d9402f15 	stw	r5,188(sp)
 4002a10:	18019e1e 	bne	r3,zero,400308c <___vfprintf_internal_r+0x113c>
 4002a14:	a8800007 	ldb	r2,0(r21)
 4002a18:	d8001f15 	stw	zero,124(sp)
 4002a1c:	da000404 	addi	r8,sp,16
 4002a20:	103d851e 	bne	r2,zero,4002038 <__alt_data_end+0xfc002038>
 4002a24:	a821883a 	mov	r16,r21
 4002a28:	003d9b06 	br	4002098 <__alt_data_end+0xfc002098>
 4002a2c:	18c03fcc 	andi	r3,r3,255
 4002a30:	1805c11e 	bne	r3,zero,4004138 <___vfprintf_internal_r+0x21e8>
 4002a34:	94800414 	ori	r18,r18,16
 4002a38:	9080080c 	andi	r2,r18,32
 4002a3c:	10020c26 	beq	r2,zero,4003270 <___vfprintf_internal_r+0x1320>
 4002a40:	d8802d17 	ldw	r2,180(sp)
 4002a44:	d9002917 	ldw	r4,164(sp)
 4002a48:	d8002785 	stb	zero,158(sp)
 4002a4c:	10c00204 	addi	r3,r2,8
 4002a50:	14c00017 	ldw	r19,0(r2)
 4002a54:	15800117 	ldw	r22,4(r2)
 4002a58:	20040f16 	blt	r4,zero,4003a98 <___vfprintf_internal_r+0x1b48>
 4002a5c:	013fdfc4 	movi	r4,-129
 4002a60:	9d84b03a 	or	r2,r19,r22
 4002a64:	d8c02d15 	stw	r3,180(sp)
 4002a68:	9124703a 	and	r18,r18,r4
 4002a6c:	0039883a 	mov	fp,zero
 4002a70:	103e891e 	bne	r2,zero,4002498 <__alt_data_end+0xfc002498>
 4002a74:	d9002917 	ldw	r4,164(sp)
 4002a78:	2002c11e 	bne	r4,zero,4003580 <___vfprintf_internal_r+0x1630>
 4002a7c:	d8002915 	stw	zero,164(sp)
 4002a80:	d8002e15 	stw	zero,184(sp)
 4002a84:	dc001e04 	addi	r16,sp,120
 4002a88:	003ef806 	br	400266c <__alt_data_end+0xfc00266c>
 4002a8c:	18c03fcc 	andi	r3,r3,255
 4002a90:	18059d1e 	bne	r3,zero,4004108 <___vfprintf_internal_r+0x21b8>
 4002a94:	014100f4 	movhi	r5,1027
 4002a98:	29453704 	addi	r5,r5,5340
 4002a9c:	d9403915 	stw	r5,228(sp)
 4002aa0:	9080080c 	andi	r2,r18,32
 4002aa4:	10005226 	beq	r2,zero,4002bf0 <___vfprintf_internal_r+0xca0>
 4002aa8:	d8802d17 	ldw	r2,180(sp)
 4002aac:	14c00017 	ldw	r19,0(r2)
 4002ab0:	15800117 	ldw	r22,4(r2)
 4002ab4:	10800204 	addi	r2,r2,8
 4002ab8:	d8802d15 	stw	r2,180(sp)
 4002abc:	9080004c 	andi	r2,r18,1
 4002ac0:	10019026 	beq	r2,zero,4003104 <___vfprintf_internal_r+0x11b4>
 4002ac4:	9d84b03a 	or	r2,r19,r22
 4002ac8:	10036926 	beq	r2,zero,4003870 <___vfprintf_internal_r+0x1920>
 4002acc:	d8c02917 	ldw	r3,164(sp)
 4002ad0:	00800c04 	movi	r2,48
 4002ad4:	d8802705 	stb	r2,156(sp)
 4002ad8:	dc402745 	stb	r17,157(sp)
 4002adc:	d8002785 	stb	zero,158(sp)
 4002ae0:	90800094 	ori	r2,r18,2
 4002ae4:	18045d16 	blt	r3,zero,4003c5c <___vfprintf_internal_r+0x1d0c>
 4002ae8:	00bfdfc4 	movi	r2,-129
 4002aec:	90a4703a 	and	r18,r18,r2
 4002af0:	94800094 	ori	r18,r18,2
 4002af4:	0039883a 	mov	fp,zero
 4002af8:	d9003917 	ldw	r4,228(sp)
 4002afc:	dc001e04 	addi	r16,sp,120
 4002b00:	988003cc 	andi	r2,r19,15
 4002b04:	b006973a 	slli	r3,r22,28
 4002b08:	2085883a 	add	r2,r4,r2
 4002b0c:	9826d13a 	srli	r19,r19,4
 4002b10:	10800003 	ldbu	r2,0(r2)
 4002b14:	b02cd13a 	srli	r22,r22,4
 4002b18:	843fffc4 	addi	r16,r16,-1
 4002b1c:	1ce6b03a 	or	r19,r3,r19
 4002b20:	80800005 	stb	r2,0(r16)
 4002b24:	9d84b03a 	or	r2,r19,r22
 4002b28:	103ff51e 	bne	r2,zero,4002b00 <__alt_data_end+0xfc002b00>
 4002b2c:	d8c02817 	ldw	r3,160(sp)
 4002b30:	1c07c83a 	sub	r3,r3,r16
 4002b34:	d8c02e15 	stw	r3,184(sp)
 4002b38:	003ecc06 	br	400266c <__alt_data_end+0xfc00266c>
 4002b3c:	18c03fcc 	andi	r3,r3,255
 4002b40:	183e9f26 	beq	r3,zero,40025c0 <__alt_data_end+0xfc0025c0>
 4002b44:	d9c02785 	stb	r7,158(sp)
 4002b48:	003e9d06 	br	40025c0 <__alt_data_end+0xfc0025c0>
 4002b4c:	00c00044 	movi	r3,1
 4002b50:	01c00ac4 	movi	r7,43
 4002b54:	ac400007 	ldb	r17,0(r21)
 4002b58:	003d5e06 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002b5c:	94800814 	ori	r18,r18,32
 4002b60:	ac400007 	ldb	r17,0(r21)
 4002b64:	003d5b06 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002b68:	d8c02d17 	ldw	r3,180(sp)
 4002b6c:	d8002785 	stb	zero,158(sp)
 4002b70:	1c000017 	ldw	r16,0(r3)
 4002b74:	1cc00104 	addi	r19,r3,4
 4002b78:	80041926 	beq	r16,zero,4003be0 <___vfprintf_internal_r+0x1c90>
 4002b7c:	d9002917 	ldw	r4,164(sp)
 4002b80:	2003d016 	blt	r4,zero,4003ac4 <___vfprintf_internal_r+0x1b74>
 4002b84:	200d883a 	mov	r6,r4
 4002b88:	000b883a 	mov	r5,zero
 4002b8c:	8009883a 	mov	r4,r16
 4002b90:	da003d15 	stw	r8,244(sp)
 4002b94:	40077600 	call	4007760 <memchr>
 4002b98:	da003d17 	ldw	r8,244(sp)
 4002b9c:	10045426 	beq	r2,zero,4003cf0 <___vfprintf_internal_r+0x1da0>
 4002ba0:	1405c83a 	sub	r2,r2,r16
 4002ba4:	d8802e15 	stw	r2,184(sp)
 4002ba8:	1003cc16 	blt	r2,zero,4003adc <___vfprintf_internal_r+0x1b8c>
 4002bac:	df002783 	ldbu	fp,158(sp)
 4002bb0:	d8802a15 	stw	r2,168(sp)
 4002bb4:	dcc02d15 	stw	r19,180(sp)
 4002bb8:	d8002915 	stw	zero,164(sp)
 4002bbc:	d8003215 	stw	zero,200(sp)
 4002bc0:	003eb006 	br	4002684 <__alt_data_end+0xfc002684>
 4002bc4:	18c03fcc 	andi	r3,r3,255
 4002bc8:	183f9b26 	beq	r3,zero,4002a38 <__alt_data_end+0xfc002a38>
 4002bcc:	d9c02785 	stb	r7,158(sp)
 4002bd0:	003f9906 	br	4002a38 <__alt_data_end+0xfc002a38>
 4002bd4:	18c03fcc 	andi	r3,r3,255
 4002bd8:	1805551e 	bne	r3,zero,4004130 <___vfprintf_internal_r+0x21e0>
 4002bdc:	014100f4 	movhi	r5,1027
 4002be0:	29453c04 	addi	r5,r5,5360
 4002be4:	d9403915 	stw	r5,228(sp)
 4002be8:	9080080c 	andi	r2,r18,32
 4002bec:	103fae1e 	bne	r2,zero,4002aa8 <__alt_data_end+0xfc002aa8>
 4002bf0:	9080040c 	andi	r2,r18,16
 4002bf4:	1002de26 	beq	r2,zero,4003770 <___vfprintf_internal_r+0x1820>
 4002bf8:	d8c02d17 	ldw	r3,180(sp)
 4002bfc:	002d883a 	mov	r22,zero
 4002c00:	1cc00017 	ldw	r19,0(r3)
 4002c04:	18c00104 	addi	r3,r3,4
 4002c08:	d8c02d15 	stw	r3,180(sp)
 4002c0c:	003fab06 	br	4002abc <__alt_data_end+0xfc002abc>
 4002c10:	38803fcc 	andi	r2,r7,255
 4002c14:	1080201c 	xori	r2,r2,128
 4002c18:	10bfe004 	addi	r2,r2,-128
 4002c1c:	1002d21e 	bne	r2,zero,4003768 <___vfprintf_internal_r+0x1818>
 4002c20:	00c00044 	movi	r3,1
 4002c24:	01c00804 	movi	r7,32
 4002c28:	ac400007 	ldb	r17,0(r21)
 4002c2c:	003d2906 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002c30:	94800054 	ori	r18,r18,1
 4002c34:	ac400007 	ldb	r17,0(r21)
 4002c38:	003d2606 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002c3c:	18c03fcc 	andi	r3,r3,255
 4002c40:	183e0526 	beq	r3,zero,4002458 <__alt_data_end+0xfc002458>
 4002c44:	d9c02785 	stb	r7,158(sp)
 4002c48:	003e0306 	br	4002458 <__alt_data_end+0xfc002458>
 4002c4c:	94801014 	ori	r18,r18,64
 4002c50:	ac400007 	ldb	r17,0(r21)
 4002c54:	003d1f06 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002c58:	ac400007 	ldb	r17,0(r21)
 4002c5c:	8a438726 	beq	r17,r9,4003a7c <___vfprintf_internal_r+0x1b2c>
 4002c60:	94800414 	ori	r18,r18,16
 4002c64:	003d1b06 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4002c68:	18c03fcc 	andi	r3,r3,255
 4002c6c:	1805341e 	bne	r3,zero,4004140 <___vfprintf_internal_r+0x21f0>
 4002c70:	9080080c 	andi	r2,r18,32
 4002c74:	1002cd26 	beq	r2,zero,40037ac <___vfprintf_internal_r+0x185c>
 4002c78:	d9402d17 	ldw	r5,180(sp)
 4002c7c:	d9002f17 	ldw	r4,188(sp)
 4002c80:	28800017 	ldw	r2,0(r5)
 4002c84:	2007d7fa 	srai	r3,r4,31
 4002c88:	29400104 	addi	r5,r5,4
 4002c8c:	d9402d15 	stw	r5,180(sp)
 4002c90:	11000015 	stw	r4,0(r2)
 4002c94:	10c00115 	stw	r3,4(r2)
 4002c98:	003ce506 	br	4002030 <__alt_data_end+0xfc002030>
 4002c9c:	d8c02d17 	ldw	r3,180(sp)
 4002ca0:	d9002d17 	ldw	r4,180(sp)
 4002ca4:	d8002785 	stb	zero,158(sp)
 4002ca8:	18800017 	ldw	r2,0(r3)
 4002cac:	21000104 	addi	r4,r4,4
 4002cb0:	00c00044 	movi	r3,1
 4002cb4:	d8c02a15 	stw	r3,168(sp)
 4002cb8:	d8801405 	stb	r2,80(sp)
 4002cbc:	d9002d15 	stw	r4,180(sp)
 4002cc0:	d8c02e15 	stw	r3,184(sp)
 4002cc4:	d8002915 	stw	zero,164(sp)
 4002cc8:	d8003215 	stw	zero,200(sp)
 4002ccc:	dc001404 	addi	r16,sp,80
 4002cd0:	0039883a 	mov	fp,zero
 4002cd4:	003e7206 	br	40026a0 <__alt_data_end+0xfc0026a0>
 4002cd8:	010100f4 	movhi	r4,1027
 4002cdc:	21053c04 	addi	r4,r4,5360
 4002ce0:	0039883a 	mov	fp,zero
 4002ce4:	d9003915 	stw	r4,228(sp)
 4002ce8:	04401e04 	movi	r17,120
 4002cec:	003f8206 	br	4002af8 <__alt_data_end+0xfc002af8>
 4002cf0:	18c03fcc 	andi	r3,r3,255
 4002cf4:	1805061e 	bne	r3,zero,4004110 <___vfprintf_internal_r+0x21c0>
 4002cf8:	883d9126 	beq	r17,zero,4002340 <__alt_data_end+0xfc002340>
 4002cfc:	00c00044 	movi	r3,1
 4002d00:	d8c02a15 	stw	r3,168(sp)
 4002d04:	dc401405 	stb	r17,80(sp)
 4002d08:	d8002785 	stb	zero,158(sp)
 4002d0c:	003fec06 	br	4002cc0 <__alt_data_end+0xfc002cc0>
 4002d10:	014100f4 	movhi	r5,1027
 4002d14:	29453c04 	addi	r5,r5,5360
 4002d18:	d9403915 	stw	r5,228(sp)
 4002d1c:	d8c02d15 	stw	r3,180(sp)
 4002d20:	1025883a 	mov	r18,r2
 4002d24:	04401e04 	movi	r17,120
 4002d28:	9d84b03a 	or	r2,r19,r22
 4002d2c:	1000fc1e 	bne	r2,zero,4003120 <___vfprintf_internal_r+0x11d0>
 4002d30:	0039883a 	mov	fp,zero
 4002d34:	00800084 	movi	r2,2
 4002d38:	10803fcc 	andi	r2,r2,255
 4002d3c:	00c00044 	movi	r3,1
 4002d40:	10c20f26 	beq	r2,r3,4003580 <___vfprintf_internal_r+0x1630>
 4002d44:	00c00084 	movi	r3,2
 4002d48:	10fd6326 	beq	r2,r3,40022d8 <__alt_data_end+0xfc0022d8>
 4002d4c:	003e2d06 	br	4002604 <__alt_data_end+0xfc002604>
 4002d50:	d8c02017 	ldw	r3,128(sp)
 4002d54:	003e9306 	br	40027a4 <__alt_data_end+0xfc0027a4>
 4002d58:	00801944 	movi	r2,101
 4002d5c:	14407e0e 	bge	r2,r17,4002f58 <___vfprintf_internal_r+0x1008>
 4002d60:	d9003617 	ldw	r4,216(sp)
 4002d64:	d9403817 	ldw	r5,224(sp)
 4002d68:	000d883a 	mov	r6,zero
 4002d6c:	000f883a 	mov	r7,zero
 4002d70:	d8c03c15 	stw	r3,240(sp)
 4002d74:	da003d15 	stw	r8,244(sp)
 4002d78:	400d0100 	call	400d010 <__eqdf2>
 4002d7c:	d8c03c17 	ldw	r3,240(sp)
 4002d80:	da003d17 	ldw	r8,244(sp)
 4002d84:	1000f71e 	bne	r2,zero,4003164 <___vfprintf_internal_r+0x1214>
 4002d88:	d8801f17 	ldw	r2,124(sp)
 4002d8c:	010100f4 	movhi	r4,1027
 4002d90:	21054304 	addi	r4,r4,5388
 4002d94:	18c00044 	addi	r3,r3,1
 4002d98:	10800044 	addi	r2,r2,1
 4002d9c:	41000015 	stw	r4,0(r8)
 4002da0:	01000044 	movi	r4,1
 4002da4:	41000115 	stw	r4,4(r8)
 4002da8:	d8c02015 	stw	r3,128(sp)
 4002dac:	d8801f15 	stw	r2,124(sp)
 4002db0:	010001c4 	movi	r4,7
 4002db4:	2082b816 	blt	r4,r2,4003898 <___vfprintf_internal_r+0x1948>
 4002db8:	42000204 	addi	r8,r8,8
 4002dbc:	d8802617 	ldw	r2,152(sp)
 4002dc0:	d9403317 	ldw	r5,204(sp)
 4002dc4:	11400216 	blt	r2,r5,4002dd0 <___vfprintf_internal_r+0xe80>
 4002dc8:	9080004c 	andi	r2,r18,1
 4002dcc:	103ed526 	beq	r2,zero,4002924 <__alt_data_end+0xfc002924>
 4002dd0:	d8803717 	ldw	r2,220(sp)
 4002dd4:	d9003417 	ldw	r4,208(sp)
 4002dd8:	d9403717 	ldw	r5,220(sp)
 4002ddc:	1887883a 	add	r3,r3,r2
 4002de0:	d8801f17 	ldw	r2,124(sp)
 4002de4:	41000015 	stw	r4,0(r8)
 4002de8:	41400115 	stw	r5,4(r8)
 4002dec:	10800044 	addi	r2,r2,1
 4002df0:	d8c02015 	stw	r3,128(sp)
 4002df4:	d8801f15 	stw	r2,124(sp)
 4002df8:	010001c4 	movi	r4,7
 4002dfc:	20832916 	blt	r4,r2,4003aa4 <___vfprintf_internal_r+0x1b54>
 4002e00:	42000204 	addi	r8,r8,8
 4002e04:	d8803317 	ldw	r2,204(sp)
 4002e08:	143fffc4 	addi	r16,r2,-1
 4002e0c:	043ec50e 	bge	zero,r16,4002924 <__alt_data_end+0xfc002924>
 4002e10:	04400404 	movi	r17,16
 4002e14:	d8801f17 	ldw	r2,124(sp)
 4002e18:	8c00880e 	bge	r17,r16,400303c <___vfprintf_internal_r+0x10ec>
 4002e1c:	014100f4 	movhi	r5,1027
 4002e20:	29454384 	addi	r5,r5,5390
 4002e24:	d9402b15 	stw	r5,172(sp)
 4002e28:	058001c4 	movi	r22,7
 4002e2c:	dcc02c17 	ldw	r19,176(sp)
 4002e30:	00000306 	br	4002e40 <___vfprintf_internal_r+0xef0>
 4002e34:	42000204 	addi	r8,r8,8
 4002e38:	843ffc04 	addi	r16,r16,-16
 4002e3c:	8c00820e 	bge	r17,r16,4003048 <___vfprintf_internal_r+0x10f8>
 4002e40:	18c00404 	addi	r3,r3,16
 4002e44:	10800044 	addi	r2,r2,1
 4002e48:	45000015 	stw	r20,0(r8)
 4002e4c:	44400115 	stw	r17,4(r8)
 4002e50:	d8c02015 	stw	r3,128(sp)
 4002e54:	d8801f15 	stw	r2,124(sp)
 4002e58:	b0bff60e 	bge	r22,r2,4002e34 <__alt_data_end+0xfc002e34>
 4002e5c:	d9801e04 	addi	r6,sp,120
 4002e60:	b80b883a 	mov	r5,r23
 4002e64:	9809883a 	mov	r4,r19
 4002e68:	400954c0 	call	400954c <__sprint_r>
 4002e6c:	103d3a1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4002e70:	d8c02017 	ldw	r3,128(sp)
 4002e74:	d8801f17 	ldw	r2,124(sp)
 4002e78:	da000404 	addi	r8,sp,16
 4002e7c:	003fee06 	br	4002e38 <__alt_data_end+0xfc002e38>
 4002e80:	d9403117 	ldw	r5,196(sp)
 4002e84:	d8802a17 	ldw	r2,168(sp)
 4002e88:	28adc83a 	sub	r22,r5,r2
 4002e8c:	05be630e 	bge	zero,r22,400281c <__alt_data_end+0xfc00281c>
 4002e90:	07000404 	movi	fp,16
 4002e94:	d8801f17 	ldw	r2,124(sp)
 4002e98:	e5838f0e 	bge	fp,r22,4003cd8 <___vfprintf_internal_r+0x1d88>
 4002e9c:	014100f4 	movhi	r5,1027
 4002ea0:	29454384 	addi	r5,r5,5390
 4002ea4:	dc403015 	stw	r17,192(sp)
 4002ea8:	d9402b15 	stw	r5,172(sp)
 4002eac:	b023883a 	mov	r17,r22
 4002eb0:	04c001c4 	movi	r19,7
 4002eb4:	a82d883a 	mov	r22,r21
 4002eb8:	902b883a 	mov	r21,r18
 4002ebc:	8025883a 	mov	r18,r16
 4002ec0:	dc002c17 	ldw	r16,176(sp)
 4002ec4:	00000306 	br	4002ed4 <___vfprintf_internal_r+0xf84>
 4002ec8:	8c7ffc04 	addi	r17,r17,-16
 4002ecc:	42000204 	addi	r8,r8,8
 4002ed0:	e440110e 	bge	fp,r17,4002f18 <___vfprintf_internal_r+0xfc8>
 4002ed4:	18c00404 	addi	r3,r3,16
 4002ed8:	10800044 	addi	r2,r2,1
 4002edc:	45000015 	stw	r20,0(r8)
 4002ee0:	47000115 	stw	fp,4(r8)
 4002ee4:	d8c02015 	stw	r3,128(sp)
 4002ee8:	d8801f15 	stw	r2,124(sp)
 4002eec:	98bff60e 	bge	r19,r2,4002ec8 <__alt_data_end+0xfc002ec8>
 4002ef0:	d9801e04 	addi	r6,sp,120
 4002ef4:	b80b883a 	mov	r5,r23
 4002ef8:	8009883a 	mov	r4,r16
 4002efc:	400954c0 	call	400954c <__sprint_r>
 4002f00:	103d151e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4002f04:	8c7ffc04 	addi	r17,r17,-16
 4002f08:	d8c02017 	ldw	r3,128(sp)
 4002f0c:	d8801f17 	ldw	r2,124(sp)
 4002f10:	da000404 	addi	r8,sp,16
 4002f14:	e47fef16 	blt	fp,r17,4002ed4 <__alt_data_end+0xfc002ed4>
 4002f18:	9021883a 	mov	r16,r18
 4002f1c:	a825883a 	mov	r18,r21
 4002f20:	b02b883a 	mov	r21,r22
 4002f24:	882d883a 	mov	r22,r17
 4002f28:	dc403017 	ldw	r17,192(sp)
 4002f2c:	d9002b17 	ldw	r4,172(sp)
 4002f30:	1d87883a 	add	r3,r3,r22
 4002f34:	10800044 	addi	r2,r2,1
 4002f38:	41000015 	stw	r4,0(r8)
 4002f3c:	45800115 	stw	r22,4(r8)
 4002f40:	d8c02015 	stw	r3,128(sp)
 4002f44:	d8801f15 	stw	r2,124(sp)
 4002f48:	010001c4 	movi	r4,7
 4002f4c:	20818e16 	blt	r4,r2,4003588 <___vfprintf_internal_r+0x1638>
 4002f50:	42000204 	addi	r8,r8,8
 4002f54:	003e3106 	br	400281c <__alt_data_end+0xfc00281c>
 4002f58:	d9403317 	ldw	r5,204(sp)
 4002f5c:	00800044 	movi	r2,1
 4002f60:	18c00044 	addi	r3,r3,1
 4002f64:	1141530e 	bge	r2,r5,40034b4 <___vfprintf_internal_r+0x1564>
 4002f68:	dc401f17 	ldw	r17,124(sp)
 4002f6c:	00800044 	movi	r2,1
 4002f70:	40800115 	stw	r2,4(r8)
 4002f74:	8c400044 	addi	r17,r17,1
 4002f78:	44000015 	stw	r16,0(r8)
 4002f7c:	d8c02015 	stw	r3,128(sp)
 4002f80:	dc401f15 	stw	r17,124(sp)
 4002f84:	008001c4 	movi	r2,7
 4002f88:	14416b16 	blt	r2,r17,4003538 <___vfprintf_internal_r+0x15e8>
 4002f8c:	42000204 	addi	r8,r8,8
 4002f90:	d8803717 	ldw	r2,220(sp)
 4002f94:	d9003417 	ldw	r4,208(sp)
 4002f98:	8c400044 	addi	r17,r17,1
 4002f9c:	10c7883a 	add	r3,r2,r3
 4002fa0:	40800115 	stw	r2,4(r8)
 4002fa4:	41000015 	stw	r4,0(r8)
 4002fa8:	d8c02015 	stw	r3,128(sp)
 4002fac:	dc401f15 	stw	r17,124(sp)
 4002fb0:	008001c4 	movi	r2,7
 4002fb4:	14416916 	blt	r2,r17,400355c <___vfprintf_internal_r+0x160c>
 4002fb8:	45800204 	addi	r22,r8,8
 4002fbc:	d9003617 	ldw	r4,216(sp)
 4002fc0:	d9403817 	ldw	r5,224(sp)
 4002fc4:	000d883a 	mov	r6,zero
 4002fc8:	000f883a 	mov	r7,zero
 4002fcc:	d8c03c15 	stw	r3,240(sp)
 4002fd0:	400d0100 	call	400d010 <__eqdf2>
 4002fd4:	d8c03c17 	ldw	r3,240(sp)
 4002fd8:	1000bc26 	beq	r2,zero,40032cc <___vfprintf_internal_r+0x137c>
 4002fdc:	d9403317 	ldw	r5,204(sp)
 4002fe0:	84000044 	addi	r16,r16,1
 4002fe4:	8c400044 	addi	r17,r17,1
 4002fe8:	28bfffc4 	addi	r2,r5,-1
 4002fec:	1887883a 	add	r3,r3,r2
 4002ff0:	b0800115 	stw	r2,4(r22)
 4002ff4:	b4000015 	stw	r16,0(r22)
 4002ff8:	d8c02015 	stw	r3,128(sp)
 4002ffc:	dc401f15 	stw	r17,124(sp)
 4003000:	008001c4 	movi	r2,7
 4003004:	14414316 	blt	r2,r17,4003514 <___vfprintf_internal_r+0x15c4>
 4003008:	b5800204 	addi	r22,r22,8
 400300c:	d9003a17 	ldw	r4,232(sp)
 4003010:	df0022c4 	addi	fp,sp,139
 4003014:	8c400044 	addi	r17,r17,1
 4003018:	20c7883a 	add	r3,r4,r3
 400301c:	b7000015 	stw	fp,0(r22)
 4003020:	b1000115 	stw	r4,4(r22)
 4003024:	d8c02015 	stw	r3,128(sp)
 4003028:	dc401f15 	stw	r17,124(sp)
 400302c:	008001c4 	movi	r2,7
 4003030:	14400e16 	blt	r2,r17,400306c <___vfprintf_internal_r+0x111c>
 4003034:	b2000204 	addi	r8,r22,8
 4003038:	003e3a06 	br	4002924 <__alt_data_end+0xfc002924>
 400303c:	010100f4 	movhi	r4,1027
 4003040:	21054384 	addi	r4,r4,5390
 4003044:	d9002b15 	stw	r4,172(sp)
 4003048:	d9002b17 	ldw	r4,172(sp)
 400304c:	1c07883a 	add	r3,r3,r16
 4003050:	44000115 	stw	r16,4(r8)
 4003054:	41000015 	stw	r4,0(r8)
 4003058:	10800044 	addi	r2,r2,1
 400305c:	d8c02015 	stw	r3,128(sp)
 4003060:	d8801f15 	stw	r2,124(sp)
 4003064:	010001c4 	movi	r4,7
 4003068:	20be2d0e 	bge	r4,r2,4002920 <__alt_data_end+0xfc002920>
 400306c:	d9002c17 	ldw	r4,176(sp)
 4003070:	d9801e04 	addi	r6,sp,120
 4003074:	b80b883a 	mov	r5,r23
 4003078:	400954c0 	call	400954c <__sprint_r>
 400307c:	103cb61e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003080:	d8c02017 	ldw	r3,128(sp)
 4003084:	da000404 	addi	r8,sp,16
 4003088:	003e2606 	br	4002924 <__alt_data_end+0xfc002924>
 400308c:	d9002c17 	ldw	r4,176(sp)
 4003090:	d9801e04 	addi	r6,sp,120
 4003094:	b80b883a 	mov	r5,r23
 4003098:	400954c0 	call	400954c <__sprint_r>
 400309c:	103e5d26 	beq	r2,zero,4002a14 <__alt_data_end+0xfc002a14>
 40030a0:	003cad06 	br	4002358 <__alt_data_end+0xfc002358>
 40030a4:	d9002c17 	ldw	r4,176(sp)
 40030a8:	d9801e04 	addi	r6,sp,120
 40030ac:	b80b883a 	mov	r5,r23
 40030b0:	400954c0 	call	400954c <__sprint_r>
 40030b4:	103ca81e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40030b8:	d8c02017 	ldw	r3,128(sp)
 40030bc:	da000404 	addi	r8,sp,16
 40030c0:	003e0b06 	br	40028f0 <__alt_data_end+0xfc0028f0>
 40030c4:	d9002c17 	ldw	r4,176(sp)
 40030c8:	d9801e04 	addi	r6,sp,120
 40030cc:	b80b883a 	mov	r5,r23
 40030d0:	400954c0 	call	400954c <__sprint_r>
 40030d4:	103ca01e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40030d8:	d8c02017 	ldw	r3,128(sp)
 40030dc:	da000404 	addi	r8,sp,16
 40030e0:	003dbd06 	br	40027d8 <__alt_data_end+0xfc0027d8>
 40030e4:	d9002c17 	ldw	r4,176(sp)
 40030e8:	d9801e04 	addi	r6,sp,120
 40030ec:	b80b883a 	mov	r5,r23
 40030f0:	400954c0 	call	400954c <__sprint_r>
 40030f4:	103c981e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40030f8:	d8c02017 	ldw	r3,128(sp)
 40030fc:	da000404 	addi	r8,sp,16
 4003100:	003dc306 	br	4002810 <__alt_data_end+0xfc002810>
 4003104:	d8802917 	ldw	r2,164(sp)
 4003108:	d8002785 	stb	zero,158(sp)
 400310c:	103f0616 	blt	r2,zero,4002d28 <__alt_data_end+0xfc002d28>
 4003110:	00ffdfc4 	movi	r3,-129
 4003114:	9d84b03a 	or	r2,r19,r22
 4003118:	90e4703a 	and	r18,r18,r3
 400311c:	103c6b26 	beq	r2,zero,40022cc <__alt_data_end+0xfc0022cc>
 4003120:	0039883a 	mov	fp,zero
 4003124:	003e7406 	br	4002af8 <__alt_data_end+0xfc002af8>
 4003128:	9080040c 	andi	r2,r18,16
 400312c:	1001b326 	beq	r2,zero,40037fc <___vfprintf_internal_r+0x18ac>
 4003130:	d9002d17 	ldw	r4,180(sp)
 4003134:	d9402917 	ldw	r5,164(sp)
 4003138:	d8002785 	stb	zero,158(sp)
 400313c:	20800104 	addi	r2,r4,4
 4003140:	24c00017 	ldw	r19,0(r4)
 4003144:	002d883a 	mov	r22,zero
 4003148:	2801b516 	blt	r5,zero,4003820 <___vfprintf_internal_r+0x18d0>
 400314c:	00ffdfc4 	movi	r3,-129
 4003150:	d8802d15 	stw	r2,180(sp)
 4003154:	90e4703a 	and	r18,r18,r3
 4003158:	983d2726 	beq	r19,zero,40025f8 <__alt_data_end+0xfc0025f8>
 400315c:	0039883a 	mov	fp,zero
 4003160:	003d2a06 	br	400260c <__alt_data_end+0xfc00260c>
 4003164:	dc402617 	ldw	r17,152(sp)
 4003168:	0441d30e 	bge	zero,r17,40038b8 <___vfprintf_internal_r+0x1968>
 400316c:	dc403217 	ldw	r17,200(sp)
 4003170:	d8803317 	ldw	r2,204(sp)
 4003174:	1440010e 	bge	r2,r17,400317c <___vfprintf_internal_r+0x122c>
 4003178:	1023883a 	mov	r17,r2
 400317c:	04400a0e 	bge	zero,r17,40031a8 <___vfprintf_internal_r+0x1258>
 4003180:	d8801f17 	ldw	r2,124(sp)
 4003184:	1c47883a 	add	r3,r3,r17
 4003188:	44000015 	stw	r16,0(r8)
 400318c:	10800044 	addi	r2,r2,1
 4003190:	44400115 	stw	r17,4(r8)
 4003194:	d8c02015 	stw	r3,128(sp)
 4003198:	d8801f15 	stw	r2,124(sp)
 400319c:	010001c4 	movi	r4,7
 40031a0:	20826516 	blt	r4,r2,4003b38 <___vfprintf_internal_r+0x1be8>
 40031a4:	42000204 	addi	r8,r8,8
 40031a8:	88026116 	blt	r17,zero,4003b30 <___vfprintf_internal_r+0x1be0>
 40031ac:	d9003217 	ldw	r4,200(sp)
 40031b0:	2463c83a 	sub	r17,r4,r17
 40031b4:	04407b0e 	bge	zero,r17,40033a4 <___vfprintf_internal_r+0x1454>
 40031b8:	05800404 	movi	r22,16
 40031bc:	d8801f17 	ldw	r2,124(sp)
 40031c0:	b4419d0e 	bge	r22,r17,4003838 <___vfprintf_internal_r+0x18e8>
 40031c4:	010100f4 	movhi	r4,1027
 40031c8:	21054384 	addi	r4,r4,5390
 40031cc:	d9002b15 	stw	r4,172(sp)
 40031d0:	070001c4 	movi	fp,7
 40031d4:	dcc02c17 	ldw	r19,176(sp)
 40031d8:	00000306 	br	40031e8 <___vfprintf_internal_r+0x1298>
 40031dc:	42000204 	addi	r8,r8,8
 40031e0:	8c7ffc04 	addi	r17,r17,-16
 40031e4:	b441970e 	bge	r22,r17,4003844 <___vfprintf_internal_r+0x18f4>
 40031e8:	18c00404 	addi	r3,r3,16
 40031ec:	10800044 	addi	r2,r2,1
 40031f0:	45000015 	stw	r20,0(r8)
 40031f4:	45800115 	stw	r22,4(r8)
 40031f8:	d8c02015 	stw	r3,128(sp)
 40031fc:	d8801f15 	stw	r2,124(sp)
 4003200:	e0bff60e 	bge	fp,r2,40031dc <__alt_data_end+0xfc0031dc>
 4003204:	d9801e04 	addi	r6,sp,120
 4003208:	b80b883a 	mov	r5,r23
 400320c:	9809883a 	mov	r4,r19
 4003210:	400954c0 	call	400954c <__sprint_r>
 4003214:	103c501e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003218:	d8c02017 	ldw	r3,128(sp)
 400321c:	d8801f17 	ldw	r2,124(sp)
 4003220:	da000404 	addi	r8,sp,16
 4003224:	003fee06 	br	40031e0 <__alt_data_end+0xfc0031e0>
 4003228:	d9002c17 	ldw	r4,176(sp)
 400322c:	d9801e04 	addi	r6,sp,120
 4003230:	b80b883a 	mov	r5,r23
 4003234:	400954c0 	call	400954c <__sprint_r>
 4003238:	103c471e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 400323c:	d8c02017 	ldw	r3,128(sp)
 4003240:	df002787 	ldb	fp,158(sp)
 4003244:	da000404 	addi	r8,sp,16
 4003248:	003d5606 	br	40027a4 <__alt_data_end+0xfc0027a4>
 400324c:	9080040c 	andi	r2,r18,16
 4003250:	10016126 	beq	r2,zero,40037d8 <___vfprintf_internal_r+0x1888>
 4003254:	d8802d17 	ldw	r2,180(sp)
 4003258:	14c00017 	ldw	r19,0(r2)
 400325c:	10800104 	addi	r2,r2,4
 4003260:	d8802d15 	stw	r2,180(sp)
 4003264:	982dd7fa 	srai	r22,r19,31
 4003268:	b005883a 	mov	r2,r22
 400326c:	003c8206 	br	4002478 <__alt_data_end+0xfc002478>
 4003270:	9080040c 	andi	r2,r18,16
 4003274:	10003526 	beq	r2,zero,400334c <___vfprintf_internal_r+0x13fc>
 4003278:	d9402d17 	ldw	r5,180(sp)
 400327c:	d8c02917 	ldw	r3,164(sp)
 4003280:	d8002785 	stb	zero,158(sp)
 4003284:	28800104 	addi	r2,r5,4
 4003288:	2cc00017 	ldw	r19,0(r5)
 400328c:	002d883a 	mov	r22,zero
 4003290:	18003716 	blt	r3,zero,4003370 <___vfprintf_internal_r+0x1420>
 4003294:	00ffdfc4 	movi	r3,-129
 4003298:	d8802d15 	stw	r2,180(sp)
 400329c:	90e4703a 	and	r18,r18,r3
 40032a0:	0039883a 	mov	fp,zero
 40032a4:	983df326 	beq	r19,zero,4002a74 <__alt_data_end+0xfc002a74>
 40032a8:	00800244 	movi	r2,9
 40032ac:	14fc7b36 	bltu	r2,r19,400249c <__alt_data_end+0xfc00249c>
 40032b0:	d8c02817 	ldw	r3,160(sp)
 40032b4:	dc001dc4 	addi	r16,sp,119
 40032b8:	9cc00c04 	addi	r19,r19,48
 40032bc:	1c07c83a 	sub	r3,r3,r16
 40032c0:	dcc01dc5 	stb	r19,119(sp)
 40032c4:	d8c02e15 	stw	r3,184(sp)
 40032c8:	003ce806 	br	400266c <__alt_data_end+0xfc00266c>
 40032cc:	d8803317 	ldw	r2,204(sp)
 40032d0:	143fffc4 	addi	r16,r2,-1
 40032d4:	043f4d0e 	bge	zero,r16,400300c <__alt_data_end+0xfc00300c>
 40032d8:	07000404 	movi	fp,16
 40032dc:	e400810e 	bge	fp,r16,40034e4 <___vfprintf_internal_r+0x1594>
 40032e0:	014100f4 	movhi	r5,1027
 40032e4:	29454384 	addi	r5,r5,5390
 40032e8:	d9402b15 	stw	r5,172(sp)
 40032ec:	01c001c4 	movi	r7,7
 40032f0:	dcc02c17 	ldw	r19,176(sp)
 40032f4:	00000306 	br	4003304 <___vfprintf_internal_r+0x13b4>
 40032f8:	b5800204 	addi	r22,r22,8
 40032fc:	843ffc04 	addi	r16,r16,-16
 4003300:	e4007b0e 	bge	fp,r16,40034f0 <___vfprintf_internal_r+0x15a0>
 4003304:	18c00404 	addi	r3,r3,16
 4003308:	8c400044 	addi	r17,r17,1
 400330c:	b5000015 	stw	r20,0(r22)
 4003310:	b7000115 	stw	fp,4(r22)
 4003314:	d8c02015 	stw	r3,128(sp)
 4003318:	dc401f15 	stw	r17,124(sp)
 400331c:	3c7ff60e 	bge	r7,r17,40032f8 <__alt_data_end+0xfc0032f8>
 4003320:	d9801e04 	addi	r6,sp,120
 4003324:	b80b883a 	mov	r5,r23
 4003328:	9809883a 	mov	r4,r19
 400332c:	d9c03c15 	stw	r7,240(sp)
 4003330:	400954c0 	call	400954c <__sprint_r>
 4003334:	d9c03c17 	ldw	r7,240(sp)
 4003338:	103c071e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 400333c:	d8c02017 	ldw	r3,128(sp)
 4003340:	dc401f17 	ldw	r17,124(sp)
 4003344:	dd800404 	addi	r22,sp,16
 4003348:	003fec06 	br	40032fc <__alt_data_end+0xfc0032fc>
 400334c:	9080100c 	andi	r2,r18,64
 4003350:	d8002785 	stb	zero,158(sp)
 4003354:	10010e26 	beq	r2,zero,4003790 <___vfprintf_internal_r+0x1840>
 4003358:	d9002d17 	ldw	r4,180(sp)
 400335c:	d9402917 	ldw	r5,164(sp)
 4003360:	002d883a 	mov	r22,zero
 4003364:	20800104 	addi	r2,r4,4
 4003368:	24c0000b 	ldhu	r19,0(r4)
 400336c:	283fc90e 	bge	r5,zero,4003294 <__alt_data_end+0xfc003294>
 4003370:	d8802d15 	stw	r2,180(sp)
 4003374:	0039883a 	mov	fp,zero
 4003378:	9d84b03a 	or	r2,r19,r22
 400337c:	103c461e 	bne	r2,zero,4002498 <__alt_data_end+0xfc002498>
 4003380:	00800044 	movi	r2,1
 4003384:	003e6c06 	br	4002d38 <__alt_data_end+0xfc002d38>
 4003388:	d9002c17 	ldw	r4,176(sp)
 400338c:	d9801e04 	addi	r6,sp,120
 4003390:	b80b883a 	mov	r5,r23
 4003394:	400954c0 	call	400954c <__sprint_r>
 4003398:	103bef1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 400339c:	d8c02017 	ldw	r3,128(sp)
 40033a0:	da000404 	addi	r8,sp,16
 40033a4:	d9003217 	ldw	r4,200(sp)
 40033a8:	d8802617 	ldw	r2,152(sp)
 40033ac:	d9403317 	ldw	r5,204(sp)
 40033b0:	8123883a 	add	r17,r16,r4
 40033b4:	11400216 	blt	r2,r5,40033c0 <___vfprintf_internal_r+0x1470>
 40033b8:	9100004c 	andi	r4,r18,1
 40033bc:	20000d26 	beq	r4,zero,40033f4 <___vfprintf_internal_r+0x14a4>
 40033c0:	d9003717 	ldw	r4,220(sp)
 40033c4:	d9403417 	ldw	r5,208(sp)
 40033c8:	1907883a 	add	r3,r3,r4
 40033cc:	d9001f17 	ldw	r4,124(sp)
 40033d0:	41400015 	stw	r5,0(r8)
 40033d4:	d9403717 	ldw	r5,220(sp)
 40033d8:	21000044 	addi	r4,r4,1
 40033dc:	d8c02015 	stw	r3,128(sp)
 40033e0:	41400115 	stw	r5,4(r8)
 40033e4:	d9001f15 	stw	r4,124(sp)
 40033e8:	014001c4 	movi	r5,7
 40033ec:	2901e816 	blt	r5,r4,4003b90 <___vfprintf_internal_r+0x1c40>
 40033f0:	42000204 	addi	r8,r8,8
 40033f4:	d9003317 	ldw	r4,204(sp)
 40033f8:	8121883a 	add	r16,r16,r4
 40033fc:	2085c83a 	sub	r2,r4,r2
 4003400:	8461c83a 	sub	r16,r16,r17
 4003404:	1400010e 	bge	r2,r16,400340c <___vfprintf_internal_r+0x14bc>
 4003408:	1021883a 	mov	r16,r2
 400340c:	04000a0e 	bge	zero,r16,4003438 <___vfprintf_internal_r+0x14e8>
 4003410:	d9001f17 	ldw	r4,124(sp)
 4003414:	1c07883a 	add	r3,r3,r16
 4003418:	44400015 	stw	r17,0(r8)
 400341c:	21000044 	addi	r4,r4,1
 4003420:	44000115 	stw	r16,4(r8)
 4003424:	d8c02015 	stw	r3,128(sp)
 4003428:	d9001f15 	stw	r4,124(sp)
 400342c:	014001c4 	movi	r5,7
 4003430:	2901fb16 	blt	r5,r4,4003c20 <___vfprintf_internal_r+0x1cd0>
 4003434:	42000204 	addi	r8,r8,8
 4003438:	8001f716 	blt	r16,zero,4003c18 <___vfprintf_internal_r+0x1cc8>
 400343c:	1421c83a 	sub	r16,r2,r16
 4003440:	043d380e 	bge	zero,r16,4002924 <__alt_data_end+0xfc002924>
 4003444:	04400404 	movi	r17,16
 4003448:	d8801f17 	ldw	r2,124(sp)
 400344c:	8c3efb0e 	bge	r17,r16,400303c <__alt_data_end+0xfc00303c>
 4003450:	014100f4 	movhi	r5,1027
 4003454:	29454384 	addi	r5,r5,5390
 4003458:	d9402b15 	stw	r5,172(sp)
 400345c:	058001c4 	movi	r22,7
 4003460:	dcc02c17 	ldw	r19,176(sp)
 4003464:	00000306 	br	4003474 <___vfprintf_internal_r+0x1524>
 4003468:	42000204 	addi	r8,r8,8
 400346c:	843ffc04 	addi	r16,r16,-16
 4003470:	8c3ef50e 	bge	r17,r16,4003048 <__alt_data_end+0xfc003048>
 4003474:	18c00404 	addi	r3,r3,16
 4003478:	10800044 	addi	r2,r2,1
 400347c:	45000015 	stw	r20,0(r8)
 4003480:	44400115 	stw	r17,4(r8)
 4003484:	d8c02015 	stw	r3,128(sp)
 4003488:	d8801f15 	stw	r2,124(sp)
 400348c:	b0bff60e 	bge	r22,r2,4003468 <__alt_data_end+0xfc003468>
 4003490:	d9801e04 	addi	r6,sp,120
 4003494:	b80b883a 	mov	r5,r23
 4003498:	9809883a 	mov	r4,r19
 400349c:	400954c0 	call	400954c <__sprint_r>
 40034a0:	103bad1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40034a4:	d8c02017 	ldw	r3,128(sp)
 40034a8:	d8801f17 	ldw	r2,124(sp)
 40034ac:	da000404 	addi	r8,sp,16
 40034b0:	003fee06 	br	400346c <__alt_data_end+0xfc00346c>
 40034b4:	9088703a 	and	r4,r18,r2
 40034b8:	203eab1e 	bne	r4,zero,4002f68 <__alt_data_end+0xfc002f68>
 40034bc:	dc401f17 	ldw	r17,124(sp)
 40034c0:	40800115 	stw	r2,4(r8)
 40034c4:	44000015 	stw	r16,0(r8)
 40034c8:	8c400044 	addi	r17,r17,1
 40034cc:	d8c02015 	stw	r3,128(sp)
 40034d0:	dc401f15 	stw	r17,124(sp)
 40034d4:	008001c4 	movi	r2,7
 40034d8:	14400e16 	blt	r2,r17,4003514 <___vfprintf_internal_r+0x15c4>
 40034dc:	45800204 	addi	r22,r8,8
 40034e0:	003eca06 	br	400300c <__alt_data_end+0xfc00300c>
 40034e4:	010100f4 	movhi	r4,1027
 40034e8:	21054384 	addi	r4,r4,5390
 40034ec:	d9002b15 	stw	r4,172(sp)
 40034f0:	d8802b17 	ldw	r2,172(sp)
 40034f4:	1c07883a 	add	r3,r3,r16
 40034f8:	8c400044 	addi	r17,r17,1
 40034fc:	b0800015 	stw	r2,0(r22)
 4003500:	b4000115 	stw	r16,4(r22)
 4003504:	d8c02015 	stw	r3,128(sp)
 4003508:	dc401f15 	stw	r17,124(sp)
 400350c:	008001c4 	movi	r2,7
 4003510:	147ebd0e 	bge	r2,r17,4003008 <__alt_data_end+0xfc003008>
 4003514:	d9002c17 	ldw	r4,176(sp)
 4003518:	d9801e04 	addi	r6,sp,120
 400351c:	b80b883a 	mov	r5,r23
 4003520:	400954c0 	call	400954c <__sprint_r>
 4003524:	103b8c1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003528:	d8c02017 	ldw	r3,128(sp)
 400352c:	dc401f17 	ldw	r17,124(sp)
 4003530:	dd800404 	addi	r22,sp,16
 4003534:	003eb506 	br	400300c <__alt_data_end+0xfc00300c>
 4003538:	d9002c17 	ldw	r4,176(sp)
 400353c:	d9801e04 	addi	r6,sp,120
 4003540:	b80b883a 	mov	r5,r23
 4003544:	400954c0 	call	400954c <__sprint_r>
 4003548:	103b831e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 400354c:	d8c02017 	ldw	r3,128(sp)
 4003550:	dc401f17 	ldw	r17,124(sp)
 4003554:	da000404 	addi	r8,sp,16
 4003558:	003e8d06 	br	4002f90 <__alt_data_end+0xfc002f90>
 400355c:	d9002c17 	ldw	r4,176(sp)
 4003560:	d9801e04 	addi	r6,sp,120
 4003564:	b80b883a 	mov	r5,r23
 4003568:	400954c0 	call	400954c <__sprint_r>
 400356c:	103b7a1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003570:	d8c02017 	ldw	r3,128(sp)
 4003574:	dc401f17 	ldw	r17,124(sp)
 4003578:	dd800404 	addi	r22,sp,16
 400357c:	003e8f06 	br	4002fbc <__alt_data_end+0xfc002fbc>
 4003580:	0027883a 	mov	r19,zero
 4003584:	003f4a06 	br	40032b0 <__alt_data_end+0xfc0032b0>
 4003588:	d9002c17 	ldw	r4,176(sp)
 400358c:	d9801e04 	addi	r6,sp,120
 4003590:	b80b883a 	mov	r5,r23
 4003594:	400954c0 	call	400954c <__sprint_r>
 4003598:	103b6f1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 400359c:	d8c02017 	ldw	r3,128(sp)
 40035a0:	da000404 	addi	r8,sp,16
 40035a4:	003c9d06 	br	400281c <__alt_data_end+0xfc00281c>
 40035a8:	04e7c83a 	sub	r19,zero,r19
 40035ac:	9804c03a 	cmpne	r2,r19,zero
 40035b0:	05adc83a 	sub	r22,zero,r22
 40035b4:	b0adc83a 	sub	r22,r22,r2
 40035b8:	d8802917 	ldw	r2,164(sp)
 40035bc:	07000b44 	movi	fp,45
 40035c0:	df002785 	stb	fp,158(sp)
 40035c4:	10017b16 	blt	r2,zero,4003bb4 <___vfprintf_internal_r+0x1c64>
 40035c8:	00bfdfc4 	movi	r2,-129
 40035cc:	90a4703a 	and	r18,r18,r2
 40035d0:	003bb106 	br	4002498 <__alt_data_end+0xfc002498>
 40035d4:	d9003617 	ldw	r4,216(sp)
 40035d8:	d9403817 	ldw	r5,224(sp)
 40035dc:	da003d15 	stw	r8,244(sp)
 40035e0:	40091700 	call	4009170 <__fpclassifyd>
 40035e4:	da003d17 	ldw	r8,244(sp)
 40035e8:	1000f026 	beq	r2,zero,40039ac <___vfprintf_internal_r+0x1a5c>
 40035ec:	d9002917 	ldw	r4,164(sp)
 40035f0:	05bff7c4 	movi	r22,-33
 40035f4:	00bfffc4 	movi	r2,-1
 40035f8:	8dac703a 	and	r22,r17,r22
 40035fc:	20820026 	beq	r4,r2,4003e00 <___vfprintf_internal_r+0x1eb0>
 4003600:	008011c4 	movi	r2,71
 4003604:	b081f726 	beq	r22,r2,4003de4 <___vfprintf_internal_r+0x1e94>
 4003608:	d9003817 	ldw	r4,224(sp)
 400360c:	90c04014 	ori	r3,r18,256
 4003610:	d8c02b15 	stw	r3,172(sp)
 4003614:	20021516 	blt	r4,zero,4003e6c <___vfprintf_internal_r+0x1f1c>
 4003618:	dcc03817 	ldw	r19,224(sp)
 400361c:	d8002a05 	stb	zero,168(sp)
 4003620:	00801984 	movi	r2,102
 4003624:	8881f926 	beq	r17,r2,4003e0c <___vfprintf_internal_r+0x1ebc>
 4003628:	00801184 	movi	r2,70
 400362c:	88821c26 	beq	r17,r2,4003ea0 <___vfprintf_internal_r+0x1f50>
 4003630:	00801144 	movi	r2,69
 4003634:	b081ef26 	beq	r22,r2,4003df4 <___vfprintf_internal_r+0x1ea4>
 4003638:	d8c02917 	ldw	r3,164(sp)
 400363c:	d8802104 	addi	r2,sp,132
 4003640:	d8800315 	stw	r2,12(sp)
 4003644:	d9403617 	ldw	r5,216(sp)
 4003648:	d8802504 	addi	r2,sp,148
 400364c:	d9002c17 	ldw	r4,176(sp)
 4003650:	d8800215 	stw	r2,8(sp)
 4003654:	d8802604 	addi	r2,sp,152
 4003658:	d8c00015 	stw	r3,0(sp)
 400365c:	d8800115 	stw	r2,4(sp)
 4003660:	01c00084 	movi	r7,2
 4003664:	980d883a 	mov	r6,r19
 4003668:	d8c03c15 	stw	r3,240(sp)
 400366c:	da003d15 	stw	r8,244(sp)
 4003670:	40045740 	call	4004574 <_dtoa_r>
 4003674:	1021883a 	mov	r16,r2
 4003678:	008019c4 	movi	r2,103
 400367c:	d8c03c17 	ldw	r3,240(sp)
 4003680:	da003d17 	ldw	r8,244(sp)
 4003684:	88817126 	beq	r17,r2,4003c4c <___vfprintf_internal_r+0x1cfc>
 4003688:	008011c4 	movi	r2,71
 400368c:	88829226 	beq	r17,r2,40040d8 <___vfprintf_internal_r+0x2188>
 4003690:	80f9883a 	add	fp,r16,r3
 4003694:	d9003617 	ldw	r4,216(sp)
 4003698:	000d883a 	mov	r6,zero
 400369c:	000f883a 	mov	r7,zero
 40036a0:	980b883a 	mov	r5,r19
 40036a4:	da003d15 	stw	r8,244(sp)
 40036a8:	400d0100 	call	400d010 <__eqdf2>
 40036ac:	da003d17 	ldw	r8,244(sp)
 40036b0:	10018d26 	beq	r2,zero,4003ce8 <___vfprintf_internal_r+0x1d98>
 40036b4:	d8802117 	ldw	r2,132(sp)
 40036b8:	1700062e 	bgeu	r2,fp,40036d4 <___vfprintf_internal_r+0x1784>
 40036bc:	01000c04 	movi	r4,48
 40036c0:	10c00044 	addi	r3,r2,1
 40036c4:	d8c02115 	stw	r3,132(sp)
 40036c8:	11000005 	stb	r4,0(r2)
 40036cc:	d8802117 	ldw	r2,132(sp)
 40036d0:	173ffb36 	bltu	r2,fp,40036c0 <__alt_data_end+0xfc0036c0>
 40036d4:	1405c83a 	sub	r2,r2,r16
 40036d8:	d8803315 	stw	r2,204(sp)
 40036dc:	008011c4 	movi	r2,71
 40036e0:	b0817626 	beq	r22,r2,4003cbc <___vfprintf_internal_r+0x1d6c>
 40036e4:	00801944 	movi	r2,101
 40036e8:	1442810e 	bge	r2,r17,40040f0 <___vfprintf_internal_r+0x21a0>
 40036ec:	d8c02617 	ldw	r3,152(sp)
 40036f0:	00801984 	movi	r2,102
 40036f4:	d8c03215 	stw	r3,200(sp)
 40036f8:	8881fe26 	beq	r17,r2,4003ef4 <___vfprintf_internal_r+0x1fa4>
 40036fc:	d8c03217 	ldw	r3,200(sp)
 4003700:	d9003317 	ldw	r4,204(sp)
 4003704:	1901dd16 	blt	r3,r4,4003e7c <___vfprintf_internal_r+0x1f2c>
 4003708:	9480004c 	andi	r18,r18,1
 400370c:	90022b1e 	bne	r18,zero,4003fbc <___vfprintf_internal_r+0x206c>
 4003710:	1805883a 	mov	r2,r3
 4003714:	18028016 	blt	r3,zero,4004118 <___vfprintf_internal_r+0x21c8>
 4003718:	d8c03217 	ldw	r3,200(sp)
 400371c:	044019c4 	movi	r17,103
 4003720:	d8c02e15 	stw	r3,184(sp)
 4003724:	df002a07 	ldb	fp,168(sp)
 4003728:	e001531e 	bne	fp,zero,4003c78 <___vfprintf_internal_r+0x1d28>
 400372c:	df002783 	ldbu	fp,158(sp)
 4003730:	d8802a15 	stw	r2,168(sp)
 4003734:	dc802b17 	ldw	r18,172(sp)
 4003738:	d8002915 	stw	zero,164(sp)
 400373c:	003bd106 	br	4002684 <__alt_data_end+0xfc002684>
 4003740:	d8802d17 	ldw	r2,180(sp)
 4003744:	d8c02d17 	ldw	r3,180(sp)
 4003748:	d9002d17 	ldw	r4,180(sp)
 400374c:	10800017 	ldw	r2,0(r2)
 4003750:	18c00117 	ldw	r3,4(r3)
 4003754:	21000204 	addi	r4,r4,8
 4003758:	d8803615 	stw	r2,216(sp)
 400375c:	d8c03815 	stw	r3,224(sp)
 4003760:	d9002d15 	stw	r4,180(sp)
 4003764:	003b7506 	br	400253c <__alt_data_end+0xfc00253c>
 4003768:	ac400007 	ldb	r17,0(r21)
 400376c:	003a5906 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4003770:	9080100c 	andi	r2,r18,64
 4003774:	1000a826 	beq	r2,zero,4003a18 <___vfprintf_internal_r+0x1ac8>
 4003778:	d9002d17 	ldw	r4,180(sp)
 400377c:	002d883a 	mov	r22,zero
 4003780:	24c0000b 	ldhu	r19,0(r4)
 4003784:	21000104 	addi	r4,r4,4
 4003788:	d9002d15 	stw	r4,180(sp)
 400378c:	003ccb06 	br	4002abc <__alt_data_end+0xfc002abc>
 4003790:	d8c02d17 	ldw	r3,180(sp)
 4003794:	d9002917 	ldw	r4,164(sp)
 4003798:	002d883a 	mov	r22,zero
 400379c:	18800104 	addi	r2,r3,4
 40037a0:	1cc00017 	ldw	r19,0(r3)
 40037a4:	203ebb0e 	bge	r4,zero,4003294 <__alt_data_end+0xfc003294>
 40037a8:	003ef106 	br	4003370 <__alt_data_end+0xfc003370>
 40037ac:	9080040c 	andi	r2,r18,16
 40037b0:	1000921e 	bne	r2,zero,40039fc <___vfprintf_internal_r+0x1aac>
 40037b4:	9480100c 	andi	r18,r18,64
 40037b8:	90013926 	beq	r18,zero,4003ca0 <___vfprintf_internal_r+0x1d50>
 40037bc:	d9002d17 	ldw	r4,180(sp)
 40037c0:	d9402f17 	ldw	r5,188(sp)
 40037c4:	20800017 	ldw	r2,0(r4)
 40037c8:	21000104 	addi	r4,r4,4
 40037cc:	d9002d15 	stw	r4,180(sp)
 40037d0:	1140000d 	sth	r5,0(r2)
 40037d4:	003a1606 	br	4002030 <__alt_data_end+0xfc002030>
 40037d8:	9080100c 	andi	r2,r18,64
 40037dc:	10008026 	beq	r2,zero,40039e0 <___vfprintf_internal_r+0x1a90>
 40037e0:	d8c02d17 	ldw	r3,180(sp)
 40037e4:	1cc0000f 	ldh	r19,0(r3)
 40037e8:	18c00104 	addi	r3,r3,4
 40037ec:	d8c02d15 	stw	r3,180(sp)
 40037f0:	982dd7fa 	srai	r22,r19,31
 40037f4:	b005883a 	mov	r2,r22
 40037f8:	003b1f06 	br	4002478 <__alt_data_end+0xfc002478>
 40037fc:	9080100c 	andi	r2,r18,64
 4003800:	d8002785 	stb	zero,158(sp)
 4003804:	10008a1e 	bne	r2,zero,4003a30 <___vfprintf_internal_r+0x1ae0>
 4003808:	d9402d17 	ldw	r5,180(sp)
 400380c:	d8c02917 	ldw	r3,164(sp)
 4003810:	002d883a 	mov	r22,zero
 4003814:	28800104 	addi	r2,r5,4
 4003818:	2cc00017 	ldw	r19,0(r5)
 400381c:	183e4b0e 	bge	r3,zero,400314c <__alt_data_end+0xfc00314c>
 4003820:	9d86b03a 	or	r3,r19,r22
 4003824:	d8802d15 	stw	r2,180(sp)
 4003828:	183e4c1e 	bne	r3,zero,400315c <__alt_data_end+0xfc00315c>
 400382c:	0039883a 	mov	fp,zero
 4003830:	0005883a 	mov	r2,zero
 4003834:	003d4006 	br	4002d38 <__alt_data_end+0xfc002d38>
 4003838:	014100f4 	movhi	r5,1027
 400383c:	29454384 	addi	r5,r5,5390
 4003840:	d9402b15 	stw	r5,172(sp)
 4003844:	d9402b17 	ldw	r5,172(sp)
 4003848:	1c47883a 	add	r3,r3,r17
 400384c:	10800044 	addi	r2,r2,1
 4003850:	41400015 	stw	r5,0(r8)
 4003854:	44400115 	stw	r17,4(r8)
 4003858:	d8c02015 	stw	r3,128(sp)
 400385c:	d8801f15 	stw	r2,124(sp)
 4003860:	010001c4 	movi	r4,7
 4003864:	20bec816 	blt	r4,r2,4003388 <__alt_data_end+0xfc003388>
 4003868:	42000204 	addi	r8,r8,8
 400386c:	003ecd06 	br	40033a4 <__alt_data_end+0xfc0033a4>
 4003870:	d9002917 	ldw	r4,164(sp)
 4003874:	d8002785 	stb	zero,158(sp)
 4003878:	203d2d16 	blt	r4,zero,4002d30 <__alt_data_end+0xfc002d30>
 400387c:	00bfdfc4 	movi	r2,-129
 4003880:	90a4703a 	and	r18,r18,r2
 4003884:	003a9106 	br	40022cc <__alt_data_end+0xfc0022cc>
 4003888:	010100f4 	movhi	r4,1027
 400388c:	21054384 	addi	r4,r4,5390
 4003890:	d9002b15 	stw	r4,172(sp)
 4003894:	003c0c06 	br	40028c8 <__alt_data_end+0xfc0028c8>
 4003898:	d9002c17 	ldw	r4,176(sp)
 400389c:	d9801e04 	addi	r6,sp,120
 40038a0:	b80b883a 	mov	r5,r23
 40038a4:	400954c0 	call	400954c <__sprint_r>
 40038a8:	103aab1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 40038ac:	d8c02017 	ldw	r3,128(sp)
 40038b0:	da000404 	addi	r8,sp,16
 40038b4:	003d4106 	br	4002dbc <__alt_data_end+0xfc002dbc>
 40038b8:	d8801f17 	ldw	r2,124(sp)
 40038bc:	014100f4 	movhi	r5,1027
 40038c0:	01000044 	movi	r4,1
 40038c4:	18c00044 	addi	r3,r3,1
 40038c8:	10800044 	addi	r2,r2,1
 40038cc:	29454304 	addi	r5,r5,5388
 40038d0:	41000115 	stw	r4,4(r8)
 40038d4:	41400015 	stw	r5,0(r8)
 40038d8:	d8c02015 	stw	r3,128(sp)
 40038dc:	d8801f15 	stw	r2,124(sp)
 40038e0:	010001c4 	movi	r4,7
 40038e4:	20805c16 	blt	r4,r2,4003a58 <___vfprintf_internal_r+0x1b08>
 40038e8:	42000204 	addi	r8,r8,8
 40038ec:	8800041e 	bne	r17,zero,4003900 <___vfprintf_internal_r+0x19b0>
 40038f0:	d8803317 	ldw	r2,204(sp)
 40038f4:	1000021e 	bne	r2,zero,4003900 <___vfprintf_internal_r+0x19b0>
 40038f8:	9080004c 	andi	r2,r18,1
 40038fc:	103c0926 	beq	r2,zero,4002924 <__alt_data_end+0xfc002924>
 4003900:	d9003717 	ldw	r4,220(sp)
 4003904:	d8801f17 	ldw	r2,124(sp)
 4003908:	d9403417 	ldw	r5,208(sp)
 400390c:	20c7883a 	add	r3,r4,r3
 4003910:	10800044 	addi	r2,r2,1
 4003914:	41000115 	stw	r4,4(r8)
 4003918:	41400015 	stw	r5,0(r8)
 400391c:	d8c02015 	stw	r3,128(sp)
 4003920:	d8801f15 	stw	r2,124(sp)
 4003924:	010001c4 	movi	r4,7
 4003928:	20812116 	blt	r4,r2,4003db0 <___vfprintf_internal_r+0x1e60>
 400392c:	42000204 	addi	r8,r8,8
 4003930:	0463c83a 	sub	r17,zero,r17
 4003934:	0440730e 	bge	zero,r17,4003b04 <___vfprintf_internal_r+0x1bb4>
 4003938:	05800404 	movi	r22,16
 400393c:	b440860e 	bge	r22,r17,4003b58 <___vfprintf_internal_r+0x1c08>
 4003940:	014100f4 	movhi	r5,1027
 4003944:	29454384 	addi	r5,r5,5390
 4003948:	d9402b15 	stw	r5,172(sp)
 400394c:	070001c4 	movi	fp,7
 4003950:	dcc02c17 	ldw	r19,176(sp)
 4003954:	00000306 	br	4003964 <___vfprintf_internal_r+0x1a14>
 4003958:	42000204 	addi	r8,r8,8
 400395c:	8c7ffc04 	addi	r17,r17,-16
 4003960:	b440800e 	bge	r22,r17,4003b64 <___vfprintf_internal_r+0x1c14>
 4003964:	18c00404 	addi	r3,r3,16
 4003968:	10800044 	addi	r2,r2,1
 400396c:	45000015 	stw	r20,0(r8)
 4003970:	45800115 	stw	r22,4(r8)
 4003974:	d8c02015 	stw	r3,128(sp)
 4003978:	d8801f15 	stw	r2,124(sp)
 400397c:	e0bff60e 	bge	fp,r2,4003958 <__alt_data_end+0xfc003958>
 4003980:	d9801e04 	addi	r6,sp,120
 4003984:	b80b883a 	mov	r5,r23
 4003988:	9809883a 	mov	r4,r19
 400398c:	400954c0 	call	400954c <__sprint_r>
 4003990:	103a711e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003994:	d8c02017 	ldw	r3,128(sp)
 4003998:	d8801f17 	ldw	r2,124(sp)
 400399c:	da000404 	addi	r8,sp,16
 40039a0:	003fee06 	br	400395c <__alt_data_end+0xfc00395c>
 40039a4:	00bfffc4 	movi	r2,-1
 40039a8:	003a6f06 	br	4002368 <__alt_data_end+0xfc002368>
 40039ac:	008011c4 	movi	r2,71
 40039b0:	1440b816 	blt	r2,r17,4003c94 <___vfprintf_internal_r+0x1d44>
 40039b4:	040100f4 	movhi	r16,1027
 40039b8:	84053504 	addi	r16,r16,5332
 40039bc:	00c000c4 	movi	r3,3
 40039c0:	00bfdfc4 	movi	r2,-129
 40039c4:	d8c02a15 	stw	r3,168(sp)
 40039c8:	90a4703a 	and	r18,r18,r2
 40039cc:	df002783 	ldbu	fp,158(sp)
 40039d0:	d8c02e15 	stw	r3,184(sp)
 40039d4:	d8002915 	stw	zero,164(sp)
 40039d8:	d8003215 	stw	zero,200(sp)
 40039dc:	003b2906 	br	4002684 <__alt_data_end+0xfc002684>
 40039e0:	d9002d17 	ldw	r4,180(sp)
 40039e4:	24c00017 	ldw	r19,0(r4)
 40039e8:	21000104 	addi	r4,r4,4
 40039ec:	d9002d15 	stw	r4,180(sp)
 40039f0:	982dd7fa 	srai	r22,r19,31
 40039f4:	b005883a 	mov	r2,r22
 40039f8:	003a9f06 	br	4002478 <__alt_data_end+0xfc002478>
 40039fc:	d9402d17 	ldw	r5,180(sp)
 4003a00:	d8c02f17 	ldw	r3,188(sp)
 4003a04:	28800017 	ldw	r2,0(r5)
 4003a08:	29400104 	addi	r5,r5,4
 4003a0c:	d9402d15 	stw	r5,180(sp)
 4003a10:	10c00015 	stw	r3,0(r2)
 4003a14:	00398606 	br	4002030 <__alt_data_end+0xfc002030>
 4003a18:	d9402d17 	ldw	r5,180(sp)
 4003a1c:	002d883a 	mov	r22,zero
 4003a20:	2cc00017 	ldw	r19,0(r5)
 4003a24:	29400104 	addi	r5,r5,4
 4003a28:	d9402d15 	stw	r5,180(sp)
 4003a2c:	003c2306 	br	4002abc <__alt_data_end+0xfc002abc>
 4003a30:	d8c02d17 	ldw	r3,180(sp)
 4003a34:	d9002917 	ldw	r4,164(sp)
 4003a38:	002d883a 	mov	r22,zero
 4003a3c:	18800104 	addi	r2,r3,4
 4003a40:	1cc0000b 	ldhu	r19,0(r3)
 4003a44:	203dc10e 	bge	r4,zero,400314c <__alt_data_end+0xfc00314c>
 4003a48:	003f7506 	br	4003820 <__alt_data_end+0xfc003820>
 4003a4c:	040100f4 	movhi	r16,1027
 4003a50:	84053304 	addi	r16,r16,5324
 4003a54:	003acc06 	br	4002588 <__alt_data_end+0xfc002588>
 4003a58:	d9002c17 	ldw	r4,176(sp)
 4003a5c:	d9801e04 	addi	r6,sp,120
 4003a60:	b80b883a 	mov	r5,r23
 4003a64:	400954c0 	call	400954c <__sprint_r>
 4003a68:	103a3b1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003a6c:	dc402617 	ldw	r17,152(sp)
 4003a70:	d8c02017 	ldw	r3,128(sp)
 4003a74:	da000404 	addi	r8,sp,16
 4003a78:	003f9c06 	br	40038ec <__alt_data_end+0xfc0038ec>
 4003a7c:	ac400043 	ldbu	r17,1(r21)
 4003a80:	94800814 	ori	r18,r18,32
 4003a84:	ad400044 	addi	r21,r21,1
 4003a88:	8c403fcc 	andi	r17,r17,255
 4003a8c:	8c40201c 	xori	r17,r17,128
 4003a90:	8c7fe004 	addi	r17,r17,-128
 4003a94:	00398f06 	br	40020d4 <__alt_data_end+0xfc0020d4>
 4003a98:	d8c02d15 	stw	r3,180(sp)
 4003a9c:	0039883a 	mov	fp,zero
 4003aa0:	003e3506 	br	4003378 <__alt_data_end+0xfc003378>
 4003aa4:	d9002c17 	ldw	r4,176(sp)
 4003aa8:	d9801e04 	addi	r6,sp,120
 4003aac:	b80b883a 	mov	r5,r23
 4003ab0:	400954c0 	call	400954c <__sprint_r>
 4003ab4:	103a281e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003ab8:	d8c02017 	ldw	r3,128(sp)
 4003abc:	da000404 	addi	r8,sp,16
 4003ac0:	003cd006 	br	4002e04 <__alt_data_end+0xfc002e04>
 4003ac4:	8009883a 	mov	r4,r16
 4003ac8:	da003d15 	stw	r8,244(sp)
 4003acc:	4001eb80 	call	4001eb8 <strlen>
 4003ad0:	d8802e15 	stw	r2,184(sp)
 4003ad4:	da003d17 	ldw	r8,244(sp)
 4003ad8:	103c340e 	bge	r2,zero,4002bac <__alt_data_end+0xfc002bac>
 4003adc:	0005883a 	mov	r2,zero
 4003ae0:	003c3206 	br	4002bac <__alt_data_end+0xfc002bac>
 4003ae4:	d9002c17 	ldw	r4,176(sp)
 4003ae8:	d9801e04 	addi	r6,sp,120
 4003aec:	b80b883a 	mov	r5,r23
 4003af0:	400954c0 	call	400954c <__sprint_r>
 4003af4:	103a181e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003af8:	d8c02017 	ldw	r3,128(sp)
 4003afc:	d8801f17 	ldw	r2,124(sp)
 4003b00:	da000404 	addi	r8,sp,16
 4003b04:	d9403317 	ldw	r5,204(sp)
 4003b08:	10800044 	addi	r2,r2,1
 4003b0c:	44000015 	stw	r16,0(r8)
 4003b10:	28c7883a 	add	r3,r5,r3
 4003b14:	003b7d06 	br	400290c <__alt_data_end+0xfc00290c>
 4003b18:	010100f4 	movhi	r4,1027
 4003b1c:	21054784 	addi	r4,r4,5406
 4003b20:	d9003515 	stw	r4,212(sp)
 4003b24:	003b1406 	br	4002778 <__alt_data_end+0xfc002778>
 4003b28:	013fffc4 	movi	r4,-1
 4003b2c:	003a3506 	br	4002404 <__alt_data_end+0xfc002404>
 4003b30:	0023883a 	mov	r17,zero
 4003b34:	003d9d06 	br	40031ac <__alt_data_end+0xfc0031ac>
 4003b38:	d9002c17 	ldw	r4,176(sp)
 4003b3c:	d9801e04 	addi	r6,sp,120
 4003b40:	b80b883a 	mov	r5,r23
 4003b44:	400954c0 	call	400954c <__sprint_r>
 4003b48:	103a031e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003b4c:	d8c02017 	ldw	r3,128(sp)
 4003b50:	da000404 	addi	r8,sp,16
 4003b54:	003d9406 	br	40031a8 <__alt_data_end+0xfc0031a8>
 4003b58:	010100f4 	movhi	r4,1027
 4003b5c:	21054384 	addi	r4,r4,5390
 4003b60:	d9002b15 	stw	r4,172(sp)
 4003b64:	d9002b17 	ldw	r4,172(sp)
 4003b68:	1c47883a 	add	r3,r3,r17
 4003b6c:	10800044 	addi	r2,r2,1
 4003b70:	41000015 	stw	r4,0(r8)
 4003b74:	44400115 	stw	r17,4(r8)
 4003b78:	d8c02015 	stw	r3,128(sp)
 4003b7c:	d8801f15 	stw	r2,124(sp)
 4003b80:	010001c4 	movi	r4,7
 4003b84:	20bfd716 	blt	r4,r2,4003ae4 <__alt_data_end+0xfc003ae4>
 4003b88:	42000204 	addi	r8,r8,8
 4003b8c:	003fdd06 	br	4003b04 <__alt_data_end+0xfc003b04>
 4003b90:	d9002c17 	ldw	r4,176(sp)
 4003b94:	d9801e04 	addi	r6,sp,120
 4003b98:	b80b883a 	mov	r5,r23
 4003b9c:	400954c0 	call	400954c <__sprint_r>
 4003ba0:	1039ed1e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003ba4:	d8802617 	ldw	r2,152(sp)
 4003ba8:	d8c02017 	ldw	r3,128(sp)
 4003bac:	da000404 	addi	r8,sp,16
 4003bb0:	003e1006 	br	40033f4 <__alt_data_end+0xfc0033f4>
 4003bb4:	00800044 	movi	r2,1
 4003bb8:	10803fcc 	andi	r2,r2,255
 4003bbc:	00c00044 	movi	r3,1
 4003bc0:	10fa3526 	beq	r2,r3,4002498 <__alt_data_end+0xfc002498>
 4003bc4:	00c00084 	movi	r3,2
 4003bc8:	10fbcb26 	beq	r2,r3,4002af8 <__alt_data_end+0xfc002af8>
 4003bcc:	003a8f06 	br	400260c <__alt_data_end+0xfc00260c>
 4003bd0:	010100f4 	movhi	r4,1027
 4003bd4:	21054784 	addi	r4,r4,5406
 4003bd8:	d9003515 	stw	r4,212(sp)
 4003bdc:	003b7606 	br	40029b8 <__alt_data_end+0xfc0029b8>
 4003be0:	d8802917 	ldw	r2,164(sp)
 4003be4:	00c00184 	movi	r3,6
 4003be8:	1880012e 	bgeu	r3,r2,4003bf0 <___vfprintf_internal_r+0x1ca0>
 4003bec:	1805883a 	mov	r2,r3
 4003bf0:	d8802e15 	stw	r2,184(sp)
 4003bf4:	1000ef16 	blt	r2,zero,4003fb4 <___vfprintf_internal_r+0x2064>
 4003bf8:	040100f4 	movhi	r16,1027
 4003bfc:	d8802a15 	stw	r2,168(sp)
 4003c00:	dcc02d15 	stw	r19,180(sp)
 4003c04:	d8002915 	stw	zero,164(sp)
 4003c08:	d8003215 	stw	zero,200(sp)
 4003c0c:	84054104 	addi	r16,r16,5380
 4003c10:	0039883a 	mov	fp,zero
 4003c14:	003aa206 	br	40026a0 <__alt_data_end+0xfc0026a0>
 4003c18:	0021883a 	mov	r16,zero
 4003c1c:	003e0706 	br	400343c <__alt_data_end+0xfc00343c>
 4003c20:	d9002c17 	ldw	r4,176(sp)
 4003c24:	d9801e04 	addi	r6,sp,120
 4003c28:	b80b883a 	mov	r5,r23
 4003c2c:	400954c0 	call	400954c <__sprint_r>
 4003c30:	1039c91e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003c34:	d8802617 	ldw	r2,152(sp)
 4003c38:	d9403317 	ldw	r5,204(sp)
 4003c3c:	d8c02017 	ldw	r3,128(sp)
 4003c40:	da000404 	addi	r8,sp,16
 4003c44:	2885c83a 	sub	r2,r5,r2
 4003c48:	003dfb06 	br	4003438 <__alt_data_end+0xfc003438>
 4003c4c:	9080004c 	andi	r2,r18,1
 4003c50:	103e8f1e 	bne	r2,zero,4003690 <__alt_data_end+0xfc003690>
 4003c54:	d8802117 	ldw	r2,132(sp)
 4003c58:	003e9e06 	br	40036d4 <__alt_data_end+0xfc0036d4>
 4003c5c:	1025883a 	mov	r18,r2
 4003c60:	0039883a 	mov	fp,zero
 4003c64:	00800084 	movi	r2,2
 4003c68:	003fd306 	br	4003bb8 <__alt_data_end+0xfc003bb8>
 4003c6c:	07000b44 	movi	fp,45
 4003c70:	df002785 	stb	fp,158(sp)
 4003c74:	003a4006 	br	4002578 <__alt_data_end+0xfc002578>
 4003c78:	00c00b44 	movi	r3,45
 4003c7c:	d8c02785 	stb	r3,158(sp)
 4003c80:	d8802a15 	stw	r2,168(sp)
 4003c84:	dc802b17 	ldw	r18,172(sp)
 4003c88:	d8002915 	stw	zero,164(sp)
 4003c8c:	07000b44 	movi	fp,45
 4003c90:	003a8006 	br	4002694 <__alt_data_end+0xfc002694>
 4003c94:	040100f4 	movhi	r16,1027
 4003c98:	84053604 	addi	r16,r16,5336
 4003c9c:	003f4706 	br	40039bc <__alt_data_end+0xfc0039bc>
 4003ca0:	d8c02d17 	ldw	r3,180(sp)
 4003ca4:	d9002f17 	ldw	r4,188(sp)
 4003ca8:	18800017 	ldw	r2,0(r3)
 4003cac:	18c00104 	addi	r3,r3,4
 4003cb0:	d8c02d15 	stw	r3,180(sp)
 4003cb4:	11000015 	stw	r4,0(r2)
 4003cb8:	0038dd06 	br	4002030 <__alt_data_end+0xfc002030>
 4003cbc:	dd802617 	ldw	r22,152(sp)
 4003cc0:	00bfff44 	movi	r2,-3
 4003cc4:	b0801c16 	blt	r22,r2,4003d38 <___vfprintf_internal_r+0x1de8>
 4003cc8:	d9402917 	ldw	r5,164(sp)
 4003ccc:	2d801a16 	blt	r5,r22,4003d38 <___vfprintf_internal_r+0x1de8>
 4003cd0:	dd803215 	stw	r22,200(sp)
 4003cd4:	003e8906 	br	40036fc <__alt_data_end+0xfc0036fc>
 4003cd8:	010100f4 	movhi	r4,1027
 4003cdc:	21054384 	addi	r4,r4,5390
 4003ce0:	d9002b15 	stw	r4,172(sp)
 4003ce4:	003c9106 	br	4002f2c <__alt_data_end+0xfc002f2c>
 4003ce8:	e005883a 	mov	r2,fp
 4003cec:	003e7906 	br	40036d4 <__alt_data_end+0xfc0036d4>
 4003cf0:	d9402917 	ldw	r5,164(sp)
 4003cf4:	df002783 	ldbu	fp,158(sp)
 4003cf8:	dcc02d15 	stw	r19,180(sp)
 4003cfc:	d9402a15 	stw	r5,168(sp)
 4003d00:	d9402e15 	stw	r5,184(sp)
 4003d04:	d8002915 	stw	zero,164(sp)
 4003d08:	d8003215 	stw	zero,200(sp)
 4003d0c:	003a5d06 	br	4002684 <__alt_data_end+0xfc002684>
 4003d10:	9080004c 	andi	r2,r18,1
 4003d14:	0039883a 	mov	fp,zero
 4003d18:	10000426 	beq	r2,zero,4003d2c <___vfprintf_internal_r+0x1ddc>
 4003d1c:	00800c04 	movi	r2,48
 4003d20:	dc001dc4 	addi	r16,sp,119
 4003d24:	d8801dc5 	stb	r2,119(sp)
 4003d28:	003b8006 	br	4002b2c <__alt_data_end+0xfc002b2c>
 4003d2c:	d8002e15 	stw	zero,184(sp)
 4003d30:	dc001e04 	addi	r16,sp,120
 4003d34:	003a4d06 	br	400266c <__alt_data_end+0xfc00266c>
 4003d38:	8c7fff84 	addi	r17,r17,-2
 4003d3c:	b5bfffc4 	addi	r22,r22,-1
 4003d40:	dd802615 	stw	r22,152(sp)
 4003d44:	dc4022c5 	stb	r17,139(sp)
 4003d48:	b000bf16 	blt	r22,zero,4004048 <___vfprintf_internal_r+0x20f8>
 4003d4c:	00800ac4 	movi	r2,43
 4003d50:	d8802305 	stb	r2,140(sp)
 4003d54:	00800244 	movi	r2,9
 4003d58:	15807016 	blt	r2,r22,4003f1c <___vfprintf_internal_r+0x1fcc>
 4003d5c:	00800c04 	movi	r2,48
 4003d60:	b5800c04 	addi	r22,r22,48
 4003d64:	d8802345 	stb	r2,141(sp)
 4003d68:	dd802385 	stb	r22,142(sp)
 4003d6c:	d88023c4 	addi	r2,sp,143
 4003d70:	df0022c4 	addi	fp,sp,139
 4003d74:	d8c03317 	ldw	r3,204(sp)
 4003d78:	1739c83a 	sub	fp,r2,fp
 4003d7c:	d9003317 	ldw	r4,204(sp)
 4003d80:	e0c7883a 	add	r3,fp,r3
 4003d84:	df003a15 	stw	fp,232(sp)
 4003d88:	d8c02e15 	stw	r3,184(sp)
 4003d8c:	00800044 	movi	r2,1
 4003d90:	1100b30e 	bge	r2,r4,4004060 <___vfprintf_internal_r+0x2110>
 4003d94:	d8c02e17 	ldw	r3,184(sp)
 4003d98:	18c00044 	addi	r3,r3,1
 4003d9c:	d8c02e15 	stw	r3,184(sp)
 4003da0:	1805883a 	mov	r2,r3
 4003da4:	1800ac16 	blt	r3,zero,4004058 <___vfprintf_internal_r+0x2108>
 4003da8:	d8003215 	stw	zero,200(sp)
 4003dac:	003e5d06 	br	4003724 <__alt_data_end+0xfc003724>
 4003db0:	d9002c17 	ldw	r4,176(sp)
 4003db4:	d9801e04 	addi	r6,sp,120
 4003db8:	b80b883a 	mov	r5,r23
 4003dbc:	400954c0 	call	400954c <__sprint_r>
 4003dc0:	1039651e 	bne	r2,zero,4002358 <__alt_data_end+0xfc002358>
 4003dc4:	dc402617 	ldw	r17,152(sp)
 4003dc8:	d8c02017 	ldw	r3,128(sp)
 4003dcc:	d8801f17 	ldw	r2,124(sp)
 4003dd0:	da000404 	addi	r8,sp,16
 4003dd4:	003ed606 	br	4003930 <__alt_data_end+0xfc003930>
 4003dd8:	582b883a 	mov	r21,r11
 4003ddc:	d8002915 	stw	zero,164(sp)
 4003de0:	0038bd06 	br	40020d8 <__alt_data_end+0xfc0020d8>
 4003de4:	d8802917 	ldw	r2,164(sp)
 4003de8:	103e071e 	bne	r2,zero,4003608 <__alt_data_end+0xfc003608>
 4003dec:	dc002915 	stw	r16,164(sp)
 4003df0:	003e0506 	br	4003608 <__alt_data_end+0xfc003608>
 4003df4:	d9002917 	ldw	r4,164(sp)
 4003df8:	20c00044 	addi	r3,r4,1
 4003dfc:	003e0f06 	br	400363c <__alt_data_end+0xfc00363c>
 4003e00:	01400184 	movi	r5,6
 4003e04:	d9402915 	stw	r5,164(sp)
 4003e08:	003dff06 	br	4003608 <__alt_data_end+0xfc003608>
 4003e0c:	d8802104 	addi	r2,sp,132
 4003e10:	d8800315 	stw	r2,12(sp)
 4003e14:	d8802504 	addi	r2,sp,148
 4003e18:	d8800215 	stw	r2,8(sp)
 4003e1c:	d8802604 	addi	r2,sp,152
 4003e20:	d8800115 	stw	r2,4(sp)
 4003e24:	d8802917 	ldw	r2,164(sp)
 4003e28:	d9403617 	ldw	r5,216(sp)
 4003e2c:	d9002c17 	ldw	r4,176(sp)
 4003e30:	d8800015 	stw	r2,0(sp)
 4003e34:	01c000c4 	movi	r7,3
 4003e38:	980d883a 	mov	r6,r19
 4003e3c:	da003d15 	stw	r8,244(sp)
 4003e40:	40045740 	call	4004574 <_dtoa_r>
 4003e44:	d8c02917 	ldw	r3,164(sp)
 4003e48:	da003d17 	ldw	r8,244(sp)
 4003e4c:	1021883a 	mov	r16,r2
 4003e50:	10f9883a 	add	fp,r2,r3
 4003e54:	81000007 	ldb	r4,0(r16)
 4003e58:	00800c04 	movi	r2,48
 4003e5c:	20805e26 	beq	r4,r2,4003fd8 <___vfprintf_internal_r+0x2088>
 4003e60:	d8c02617 	ldw	r3,152(sp)
 4003e64:	e0f9883a 	add	fp,fp,r3
 4003e68:	003e0a06 	br	4003694 <__alt_data_end+0xfc003694>
 4003e6c:	00c00b44 	movi	r3,45
 4003e70:	24e0003c 	xorhi	r19,r4,32768
 4003e74:	d8c02a05 	stb	r3,168(sp)
 4003e78:	003de906 	br	4003620 <__alt_data_end+0xfc003620>
 4003e7c:	d8c03217 	ldw	r3,200(sp)
 4003e80:	00c07a0e 	bge	zero,r3,400406c <___vfprintf_internal_r+0x211c>
 4003e84:	00800044 	movi	r2,1
 4003e88:	d9003317 	ldw	r4,204(sp)
 4003e8c:	1105883a 	add	r2,r2,r4
 4003e90:	d8802e15 	stw	r2,184(sp)
 4003e94:	10004e16 	blt	r2,zero,4003fd0 <___vfprintf_internal_r+0x2080>
 4003e98:	044019c4 	movi	r17,103
 4003e9c:	003e2106 	br	4003724 <__alt_data_end+0xfc003724>
 4003ea0:	d9002917 	ldw	r4,164(sp)
 4003ea4:	d8802104 	addi	r2,sp,132
 4003ea8:	d8800315 	stw	r2,12(sp)
 4003eac:	d9000015 	stw	r4,0(sp)
 4003eb0:	d8802504 	addi	r2,sp,148
 4003eb4:	d9403617 	ldw	r5,216(sp)
 4003eb8:	d9002c17 	ldw	r4,176(sp)
 4003ebc:	d8800215 	stw	r2,8(sp)
 4003ec0:	d8802604 	addi	r2,sp,152
 4003ec4:	d8800115 	stw	r2,4(sp)
 4003ec8:	01c000c4 	movi	r7,3
 4003ecc:	980d883a 	mov	r6,r19
 4003ed0:	da003d15 	stw	r8,244(sp)
 4003ed4:	40045740 	call	4004574 <_dtoa_r>
 4003ed8:	d8c02917 	ldw	r3,164(sp)
 4003edc:	da003d17 	ldw	r8,244(sp)
 4003ee0:	1021883a 	mov	r16,r2
 4003ee4:	00801184 	movi	r2,70
 4003ee8:	80f9883a 	add	fp,r16,r3
 4003eec:	88bfd926 	beq	r17,r2,4003e54 <__alt_data_end+0xfc003e54>
 4003ef0:	003de806 	br	4003694 <__alt_data_end+0xfc003694>
 4003ef4:	d9002917 	ldw	r4,164(sp)
 4003ef8:	00c04d0e 	bge	zero,r3,4004030 <___vfprintf_internal_r+0x20e0>
 4003efc:	2000441e 	bne	r4,zero,4004010 <___vfprintf_internal_r+0x20c0>
 4003f00:	9480004c 	andi	r18,r18,1
 4003f04:	9000421e 	bne	r18,zero,4004010 <___vfprintf_internal_r+0x20c0>
 4003f08:	1805883a 	mov	r2,r3
 4003f0c:	18007016 	blt	r3,zero,40040d0 <___vfprintf_internal_r+0x2180>
 4003f10:	d8c03217 	ldw	r3,200(sp)
 4003f14:	d8c02e15 	stw	r3,184(sp)
 4003f18:	003e0206 	br	4003724 <__alt_data_end+0xfc003724>
 4003f1c:	df0022c4 	addi	fp,sp,139
 4003f20:	dc002915 	stw	r16,164(sp)
 4003f24:	4027883a 	mov	r19,r8
 4003f28:	e021883a 	mov	r16,fp
 4003f2c:	b009883a 	mov	r4,r22
 4003f30:	01400284 	movi	r5,10
 4003f34:	4001c480 	call	4001c48 <__modsi3>
 4003f38:	10800c04 	addi	r2,r2,48
 4003f3c:	843fffc4 	addi	r16,r16,-1
 4003f40:	b009883a 	mov	r4,r22
 4003f44:	01400284 	movi	r5,10
 4003f48:	80800005 	stb	r2,0(r16)
 4003f4c:	4001bc40 	call	4001bc4 <__divsi3>
 4003f50:	102d883a 	mov	r22,r2
 4003f54:	00800244 	movi	r2,9
 4003f58:	15bff416 	blt	r2,r22,4003f2c <__alt_data_end+0xfc003f2c>
 4003f5c:	9811883a 	mov	r8,r19
 4003f60:	b0800c04 	addi	r2,r22,48
 4003f64:	8027883a 	mov	r19,r16
 4003f68:	997fffc4 	addi	r5,r19,-1
 4003f6c:	98bfffc5 	stb	r2,-1(r19)
 4003f70:	dc002917 	ldw	r16,164(sp)
 4003f74:	2f006a2e 	bgeu	r5,fp,4004120 <___vfprintf_internal_r+0x21d0>
 4003f78:	d9c02384 	addi	r7,sp,142
 4003f7c:	3ccfc83a 	sub	r7,r7,r19
 4003f80:	d9002344 	addi	r4,sp,141
 4003f84:	e1cf883a 	add	r7,fp,r7
 4003f88:	00000106 	br	4003f90 <___vfprintf_internal_r+0x2040>
 4003f8c:	28800003 	ldbu	r2,0(r5)
 4003f90:	20800005 	stb	r2,0(r4)
 4003f94:	21000044 	addi	r4,r4,1
 4003f98:	29400044 	addi	r5,r5,1
 4003f9c:	393ffb1e 	bne	r7,r4,4003f8c <__alt_data_end+0xfc003f8c>
 4003fa0:	d8802304 	addi	r2,sp,140
 4003fa4:	14c5c83a 	sub	r2,r2,r19
 4003fa8:	d8c02344 	addi	r3,sp,141
 4003fac:	1885883a 	add	r2,r3,r2
 4003fb0:	003f7006 	br	4003d74 <__alt_data_end+0xfc003d74>
 4003fb4:	0005883a 	mov	r2,zero
 4003fb8:	003f0f06 	br	4003bf8 <__alt_data_end+0xfc003bf8>
 4003fbc:	d8c03217 	ldw	r3,200(sp)
 4003fc0:	18c00044 	addi	r3,r3,1
 4003fc4:	d8c02e15 	stw	r3,184(sp)
 4003fc8:	1805883a 	mov	r2,r3
 4003fcc:	183fb20e 	bge	r3,zero,4003e98 <__alt_data_end+0xfc003e98>
 4003fd0:	0005883a 	mov	r2,zero
 4003fd4:	003fb006 	br	4003e98 <__alt_data_end+0xfc003e98>
 4003fd8:	d9003617 	ldw	r4,216(sp)
 4003fdc:	000d883a 	mov	r6,zero
 4003fe0:	000f883a 	mov	r7,zero
 4003fe4:	980b883a 	mov	r5,r19
 4003fe8:	d8c03c15 	stw	r3,240(sp)
 4003fec:	da003d15 	stw	r8,244(sp)
 4003ff0:	400d0100 	call	400d010 <__eqdf2>
 4003ff4:	d8c03c17 	ldw	r3,240(sp)
 4003ff8:	da003d17 	ldw	r8,244(sp)
 4003ffc:	103f9826 	beq	r2,zero,4003e60 <__alt_data_end+0xfc003e60>
 4004000:	00800044 	movi	r2,1
 4004004:	10c7c83a 	sub	r3,r2,r3
 4004008:	d8c02615 	stw	r3,152(sp)
 400400c:	003f9506 	br	4003e64 <__alt_data_end+0xfc003e64>
 4004010:	d9002917 	ldw	r4,164(sp)
 4004014:	d8c03217 	ldw	r3,200(sp)
 4004018:	20800044 	addi	r2,r4,1
 400401c:	1885883a 	add	r2,r3,r2
 4004020:	d8802e15 	stw	r2,184(sp)
 4004024:	103dbf0e 	bge	r2,zero,4003724 <__alt_data_end+0xfc003724>
 4004028:	0005883a 	mov	r2,zero
 400402c:	003dbd06 	br	4003724 <__alt_data_end+0xfc003724>
 4004030:	2000211e 	bne	r4,zero,40040b8 <___vfprintf_internal_r+0x2168>
 4004034:	9480004c 	andi	r18,r18,1
 4004038:	90001f1e 	bne	r18,zero,40040b8 <___vfprintf_internal_r+0x2168>
 400403c:	00800044 	movi	r2,1
 4004040:	d8802e15 	stw	r2,184(sp)
 4004044:	003db706 	br	4003724 <__alt_data_end+0xfc003724>
 4004048:	00800b44 	movi	r2,45
 400404c:	05adc83a 	sub	r22,zero,r22
 4004050:	d8802305 	stb	r2,140(sp)
 4004054:	003f3f06 	br	4003d54 <__alt_data_end+0xfc003d54>
 4004058:	0005883a 	mov	r2,zero
 400405c:	003f5206 	br	4003da8 <__alt_data_end+0xfc003da8>
 4004060:	90a4703a 	and	r18,r18,r2
 4004064:	903f4e26 	beq	r18,zero,4003da0 <__alt_data_end+0xfc003da0>
 4004068:	003f4a06 	br	4003d94 <__alt_data_end+0xfc003d94>
 400406c:	00800084 	movi	r2,2
 4004070:	10c5c83a 	sub	r2,r2,r3
 4004074:	003f8406 	br	4003e88 <__alt_data_end+0xfc003e88>
 4004078:	d8802d17 	ldw	r2,180(sp)
 400407c:	d9002d17 	ldw	r4,180(sp)
 4004080:	ac400043 	ldbu	r17,1(r21)
 4004084:	10800017 	ldw	r2,0(r2)
 4004088:	582b883a 	mov	r21,r11
 400408c:	d8802915 	stw	r2,164(sp)
 4004090:	20800104 	addi	r2,r4,4
 4004094:	d9002917 	ldw	r4,164(sp)
 4004098:	d8802d15 	stw	r2,180(sp)
 400409c:	203e7a0e 	bge	r4,zero,4003a88 <__alt_data_end+0xfc003a88>
 40040a0:	8c403fcc 	andi	r17,r17,255
 40040a4:	00bfffc4 	movi	r2,-1
 40040a8:	8c40201c 	xori	r17,r17,128
 40040ac:	d8802915 	stw	r2,164(sp)
 40040b0:	8c7fe004 	addi	r17,r17,-128
 40040b4:	00380706 	br	40020d4 <__alt_data_end+0xfc0020d4>
 40040b8:	d8c02917 	ldw	r3,164(sp)
 40040bc:	18c00084 	addi	r3,r3,2
 40040c0:	d8c02e15 	stw	r3,184(sp)
 40040c4:	1805883a 	mov	r2,r3
 40040c8:	183d960e 	bge	r3,zero,4003724 <__alt_data_end+0xfc003724>
 40040cc:	003fd606 	br	4004028 <__alt_data_end+0xfc004028>
 40040d0:	0005883a 	mov	r2,zero
 40040d4:	003f8e06 	br	4003f10 <__alt_data_end+0xfc003f10>
 40040d8:	9080004c 	andi	r2,r18,1
 40040dc:	103f811e 	bne	r2,zero,4003ee4 <__alt_data_end+0xfc003ee4>
 40040e0:	d8802117 	ldw	r2,132(sp)
 40040e4:	1405c83a 	sub	r2,r2,r16
 40040e8:	d8803315 	stw	r2,204(sp)
 40040ec:	b47ef326 	beq	r22,r17,4003cbc <__alt_data_end+0xfc003cbc>
 40040f0:	dd802617 	ldw	r22,152(sp)
 40040f4:	003f1106 	br	4003d3c <__alt_data_end+0xfc003d3c>
 40040f8:	d9c02785 	stb	r7,158(sp)
 40040fc:	00390406 	br	4002510 <__alt_data_end+0xfc002510>
 4004100:	d9c02785 	stb	r7,158(sp)
 4004104:	0038d306 	br	4002454 <__alt_data_end+0xfc002454>
 4004108:	d9c02785 	stb	r7,158(sp)
 400410c:	003a6106 	br	4002a94 <__alt_data_end+0xfc002a94>
 4004110:	d9c02785 	stb	r7,158(sp)
 4004114:	003af806 	br	4002cf8 <__alt_data_end+0xfc002cf8>
 4004118:	0005883a 	mov	r2,zero
 400411c:	003d7e06 	br	4003718 <__alt_data_end+0xfc003718>
 4004120:	d8802344 	addi	r2,sp,141
 4004124:	003f1306 	br	4003d74 <__alt_data_end+0xfc003d74>
 4004128:	d9c02785 	stb	r7,158(sp)
 400412c:	00392306 	br	40025bc <__alt_data_end+0xfc0025bc>
 4004130:	d9c02785 	stb	r7,158(sp)
 4004134:	003aa906 	br	4002bdc <__alt_data_end+0xfc002bdc>
 4004138:	d9c02785 	stb	r7,158(sp)
 400413c:	003a3d06 	br	4002a34 <__alt_data_end+0xfc002a34>
 4004140:	d9c02785 	stb	r7,158(sp)
 4004144:	003aca06 	br	4002c70 <__alt_data_end+0xfc002c70>

04004148 <__vfprintf_internal>:
 4004148:	008100f4 	movhi	r2,1027
 400414c:	10927d04 	addi	r2,r2,18932
 4004150:	300f883a 	mov	r7,r6
 4004154:	280d883a 	mov	r6,r5
 4004158:	200b883a 	mov	r5,r4
 400415c:	11000017 	ldw	r4,0(r2)
 4004160:	4001f501 	jmpi	4001f50 <___vfprintf_internal_r>

04004164 <__sbprintf>:
 4004164:	2880030b 	ldhu	r2,12(r5)
 4004168:	2ac01917 	ldw	r11,100(r5)
 400416c:	2a80038b 	ldhu	r10,14(r5)
 4004170:	2a400717 	ldw	r9,28(r5)
 4004174:	2a000917 	ldw	r8,36(r5)
 4004178:	defee204 	addi	sp,sp,-1144
 400417c:	00c10004 	movi	r3,1024
 4004180:	dc011a15 	stw	r16,1128(sp)
 4004184:	10bfff4c 	andi	r2,r2,65533
 4004188:	2821883a 	mov	r16,r5
 400418c:	d8cb883a 	add	r5,sp,r3
 4004190:	dc811c15 	stw	r18,1136(sp)
 4004194:	dc411b15 	stw	r17,1132(sp)
 4004198:	dfc11d15 	stw	ra,1140(sp)
 400419c:	2025883a 	mov	r18,r4
 40041a0:	d881030d 	sth	r2,1036(sp)
 40041a4:	dac11915 	stw	r11,1124(sp)
 40041a8:	da81038d 	sth	r10,1038(sp)
 40041ac:	da410715 	stw	r9,1052(sp)
 40041b0:	da010915 	stw	r8,1060(sp)
 40041b4:	dec10015 	stw	sp,1024(sp)
 40041b8:	dec10415 	stw	sp,1040(sp)
 40041bc:	d8c10215 	stw	r3,1032(sp)
 40041c0:	d8c10515 	stw	r3,1044(sp)
 40041c4:	d8010615 	stw	zero,1048(sp)
 40041c8:	4001f500 	call	4001f50 <___vfprintf_internal_r>
 40041cc:	1023883a 	mov	r17,r2
 40041d0:	10000416 	blt	r2,zero,40041e4 <__sbprintf+0x80>
 40041d4:	d9410004 	addi	r5,sp,1024
 40041d8:	9009883a 	mov	r4,r18
 40041dc:	4005e180 	call	4005e18 <_fflush_r>
 40041e0:	10000d1e 	bne	r2,zero,4004218 <__sbprintf+0xb4>
 40041e4:	d881030b 	ldhu	r2,1036(sp)
 40041e8:	1080100c 	andi	r2,r2,64
 40041ec:	10000326 	beq	r2,zero,40041fc <__sbprintf+0x98>
 40041f0:	8080030b 	ldhu	r2,12(r16)
 40041f4:	10801014 	ori	r2,r2,64
 40041f8:	8080030d 	sth	r2,12(r16)
 40041fc:	8805883a 	mov	r2,r17
 4004200:	dfc11d17 	ldw	ra,1140(sp)
 4004204:	dc811c17 	ldw	r18,1136(sp)
 4004208:	dc411b17 	ldw	r17,1132(sp)
 400420c:	dc011a17 	ldw	r16,1128(sp)
 4004210:	dec11e04 	addi	sp,sp,1144
 4004214:	f800283a 	ret
 4004218:	047fffc4 	movi	r17,-1
 400421c:	003ff106 	br	40041e4 <__alt_data_end+0xfc0041e4>

04004220 <__swsetup_r>:
 4004220:	008100f4 	movhi	r2,1027
 4004224:	defffd04 	addi	sp,sp,-12
 4004228:	10927d04 	addi	r2,r2,18932
 400422c:	dc400115 	stw	r17,4(sp)
 4004230:	2023883a 	mov	r17,r4
 4004234:	11000017 	ldw	r4,0(r2)
 4004238:	dc000015 	stw	r16,0(sp)
 400423c:	dfc00215 	stw	ra,8(sp)
 4004240:	2821883a 	mov	r16,r5
 4004244:	20000226 	beq	r4,zero,4004250 <__swsetup_r+0x30>
 4004248:	20800e17 	ldw	r2,56(r4)
 400424c:	10003126 	beq	r2,zero,4004314 <__swsetup_r+0xf4>
 4004250:	8080030b 	ldhu	r2,12(r16)
 4004254:	10c0020c 	andi	r3,r2,8
 4004258:	1009883a 	mov	r4,r2
 400425c:	18000f26 	beq	r3,zero,400429c <__swsetup_r+0x7c>
 4004260:	80c00417 	ldw	r3,16(r16)
 4004264:	18001526 	beq	r3,zero,40042bc <__swsetup_r+0x9c>
 4004268:	1100004c 	andi	r4,r2,1
 400426c:	20001c1e 	bne	r4,zero,40042e0 <__swsetup_r+0xc0>
 4004270:	1080008c 	andi	r2,r2,2
 4004274:	1000291e 	bne	r2,zero,400431c <__swsetup_r+0xfc>
 4004278:	80800517 	ldw	r2,20(r16)
 400427c:	80800215 	stw	r2,8(r16)
 4004280:	18001c26 	beq	r3,zero,40042f4 <__swsetup_r+0xd4>
 4004284:	0005883a 	mov	r2,zero
 4004288:	dfc00217 	ldw	ra,8(sp)
 400428c:	dc400117 	ldw	r17,4(sp)
 4004290:	dc000017 	ldw	r16,0(sp)
 4004294:	dec00304 	addi	sp,sp,12
 4004298:	f800283a 	ret
 400429c:	2080040c 	andi	r2,r4,16
 40042a0:	10002e26 	beq	r2,zero,400435c <__swsetup_r+0x13c>
 40042a4:	2080010c 	andi	r2,r4,4
 40042a8:	10001e1e 	bne	r2,zero,4004324 <__swsetup_r+0x104>
 40042ac:	80c00417 	ldw	r3,16(r16)
 40042b0:	20800214 	ori	r2,r4,8
 40042b4:	8080030d 	sth	r2,12(r16)
 40042b8:	183feb1e 	bne	r3,zero,4004268 <__alt_data_end+0xfc004268>
 40042bc:	1100a00c 	andi	r4,r2,640
 40042c0:	01408004 	movi	r5,512
 40042c4:	217fe826 	beq	r4,r5,4004268 <__alt_data_end+0xfc004268>
 40042c8:	800b883a 	mov	r5,r16
 40042cc:	8809883a 	mov	r4,r17
 40042d0:	4006d980 	call	4006d98 <__smakebuf_r>
 40042d4:	8080030b 	ldhu	r2,12(r16)
 40042d8:	80c00417 	ldw	r3,16(r16)
 40042dc:	003fe206 	br	4004268 <__alt_data_end+0xfc004268>
 40042e0:	80800517 	ldw	r2,20(r16)
 40042e4:	80000215 	stw	zero,8(r16)
 40042e8:	0085c83a 	sub	r2,zero,r2
 40042ec:	80800615 	stw	r2,24(r16)
 40042f0:	183fe41e 	bne	r3,zero,4004284 <__alt_data_end+0xfc004284>
 40042f4:	80c0030b 	ldhu	r3,12(r16)
 40042f8:	0005883a 	mov	r2,zero
 40042fc:	1900200c 	andi	r4,r3,128
 4004300:	203fe126 	beq	r4,zero,4004288 <__alt_data_end+0xfc004288>
 4004304:	18c01014 	ori	r3,r3,64
 4004308:	80c0030d 	sth	r3,12(r16)
 400430c:	00bfffc4 	movi	r2,-1
 4004310:	003fdd06 	br	4004288 <__alt_data_end+0xfc004288>
 4004314:	40061f40 	call	40061f4 <__sinit>
 4004318:	003fcd06 	br	4004250 <__alt_data_end+0xfc004250>
 400431c:	0005883a 	mov	r2,zero
 4004320:	003fd606 	br	400427c <__alt_data_end+0xfc00427c>
 4004324:	81400c17 	ldw	r5,48(r16)
 4004328:	28000626 	beq	r5,zero,4004344 <__swsetup_r+0x124>
 400432c:	80801004 	addi	r2,r16,64
 4004330:	28800326 	beq	r5,r2,4004340 <__swsetup_r+0x120>
 4004334:	8809883a 	mov	r4,r17
 4004338:	40063680 	call	4006368 <_free_r>
 400433c:	8100030b 	ldhu	r4,12(r16)
 4004340:	80000c15 	stw	zero,48(r16)
 4004344:	80c00417 	ldw	r3,16(r16)
 4004348:	00bff6c4 	movi	r2,-37
 400434c:	1108703a 	and	r4,r2,r4
 4004350:	80000115 	stw	zero,4(r16)
 4004354:	80c00015 	stw	r3,0(r16)
 4004358:	003fd506 	br	40042b0 <__alt_data_end+0xfc0042b0>
 400435c:	00800244 	movi	r2,9
 4004360:	88800015 	stw	r2,0(r17)
 4004364:	20801014 	ori	r2,r4,64
 4004368:	8080030d 	sth	r2,12(r16)
 400436c:	00bfffc4 	movi	r2,-1
 4004370:	003fc506 	br	4004288 <__alt_data_end+0xfc004288>

04004374 <quorem>:
 4004374:	defff704 	addi	sp,sp,-36
 4004378:	dc800215 	stw	r18,8(sp)
 400437c:	20800417 	ldw	r2,16(r4)
 4004380:	2c800417 	ldw	r18,16(r5)
 4004384:	dfc00815 	stw	ra,32(sp)
 4004388:	ddc00715 	stw	r23,28(sp)
 400438c:	dd800615 	stw	r22,24(sp)
 4004390:	dd400515 	stw	r21,20(sp)
 4004394:	dd000415 	stw	r20,16(sp)
 4004398:	dcc00315 	stw	r19,12(sp)
 400439c:	dc400115 	stw	r17,4(sp)
 40043a0:	dc000015 	stw	r16,0(sp)
 40043a4:	14807116 	blt	r2,r18,400456c <quorem+0x1f8>
 40043a8:	94bfffc4 	addi	r18,r18,-1
 40043ac:	94ad883a 	add	r22,r18,r18
 40043b0:	b5ad883a 	add	r22,r22,r22
 40043b4:	2c400504 	addi	r17,r5,20
 40043b8:	8da9883a 	add	r20,r17,r22
 40043bc:	25400504 	addi	r21,r4,20
 40043c0:	282f883a 	mov	r23,r5
 40043c4:	adad883a 	add	r22,r21,r22
 40043c8:	a1400017 	ldw	r5,0(r20)
 40043cc:	2021883a 	mov	r16,r4
 40043d0:	b1000017 	ldw	r4,0(r22)
 40043d4:	29400044 	addi	r5,r5,1
 40043d8:	4001cbc0 	call	4001cbc <__udivsi3>
 40043dc:	1027883a 	mov	r19,r2
 40043e0:	10002c26 	beq	r2,zero,4004494 <quorem+0x120>
 40043e4:	a813883a 	mov	r9,r21
 40043e8:	880b883a 	mov	r5,r17
 40043ec:	0009883a 	mov	r4,zero
 40043f0:	000d883a 	mov	r6,zero
 40043f4:	2a000017 	ldw	r8,0(r5)
 40043f8:	49c00017 	ldw	r7,0(r9)
 40043fc:	29400104 	addi	r5,r5,4
 4004400:	40bfffcc 	andi	r2,r8,65535
 4004404:	14c5383a 	mul	r2,r2,r19
 4004408:	4010d43a 	srli	r8,r8,16
 400440c:	38ffffcc 	andi	r3,r7,65535
 4004410:	1105883a 	add	r2,r2,r4
 4004414:	1008d43a 	srli	r4,r2,16
 4004418:	44d1383a 	mul	r8,r8,r19
 400441c:	198d883a 	add	r6,r3,r6
 4004420:	10ffffcc 	andi	r3,r2,65535
 4004424:	30c7c83a 	sub	r3,r6,r3
 4004428:	380ed43a 	srli	r7,r7,16
 400442c:	4105883a 	add	r2,r8,r4
 4004430:	180dd43a 	srai	r6,r3,16
 4004434:	113fffcc 	andi	r4,r2,65535
 4004438:	390fc83a 	sub	r7,r7,r4
 400443c:	398d883a 	add	r6,r7,r6
 4004440:	300e943a 	slli	r7,r6,16
 4004444:	18ffffcc 	andi	r3,r3,65535
 4004448:	1008d43a 	srli	r4,r2,16
 400444c:	38ceb03a 	or	r7,r7,r3
 4004450:	49c00015 	stw	r7,0(r9)
 4004454:	300dd43a 	srai	r6,r6,16
 4004458:	4a400104 	addi	r9,r9,4
 400445c:	a17fe52e 	bgeu	r20,r5,40043f4 <__alt_data_end+0xfc0043f4>
 4004460:	b0800017 	ldw	r2,0(r22)
 4004464:	10000b1e 	bne	r2,zero,4004494 <quorem+0x120>
 4004468:	b0bfff04 	addi	r2,r22,-4
 400446c:	a880082e 	bgeu	r21,r2,4004490 <quorem+0x11c>
 4004470:	b0ffff17 	ldw	r3,-4(r22)
 4004474:	18000326 	beq	r3,zero,4004484 <quorem+0x110>
 4004478:	00000506 	br	4004490 <quorem+0x11c>
 400447c:	10c00017 	ldw	r3,0(r2)
 4004480:	1800031e 	bne	r3,zero,4004490 <quorem+0x11c>
 4004484:	10bfff04 	addi	r2,r2,-4
 4004488:	94bfffc4 	addi	r18,r18,-1
 400448c:	a8bffb36 	bltu	r21,r2,400447c <__alt_data_end+0xfc00447c>
 4004490:	84800415 	stw	r18,16(r16)
 4004494:	b80b883a 	mov	r5,r23
 4004498:	8009883a 	mov	r4,r16
 400449c:	40084d80 	call	40084d8 <__mcmp>
 40044a0:	10002616 	blt	r2,zero,400453c <quorem+0x1c8>
 40044a4:	9cc00044 	addi	r19,r19,1
 40044a8:	a805883a 	mov	r2,r21
 40044ac:	000b883a 	mov	r5,zero
 40044b0:	11000017 	ldw	r4,0(r2)
 40044b4:	89800017 	ldw	r6,0(r17)
 40044b8:	10800104 	addi	r2,r2,4
 40044bc:	20ffffcc 	andi	r3,r4,65535
 40044c0:	194b883a 	add	r5,r3,r5
 40044c4:	30ffffcc 	andi	r3,r6,65535
 40044c8:	28c7c83a 	sub	r3,r5,r3
 40044cc:	300cd43a 	srli	r6,r6,16
 40044d0:	2008d43a 	srli	r4,r4,16
 40044d4:	180bd43a 	srai	r5,r3,16
 40044d8:	18ffffcc 	andi	r3,r3,65535
 40044dc:	2189c83a 	sub	r4,r4,r6
 40044e0:	2149883a 	add	r4,r4,r5
 40044e4:	200c943a 	slli	r6,r4,16
 40044e8:	8c400104 	addi	r17,r17,4
 40044ec:	200bd43a 	srai	r5,r4,16
 40044f0:	30c6b03a 	or	r3,r6,r3
 40044f4:	10ffff15 	stw	r3,-4(r2)
 40044f8:	a47fed2e 	bgeu	r20,r17,40044b0 <__alt_data_end+0xfc0044b0>
 40044fc:	9485883a 	add	r2,r18,r18
 4004500:	1085883a 	add	r2,r2,r2
 4004504:	a887883a 	add	r3,r21,r2
 4004508:	18800017 	ldw	r2,0(r3)
 400450c:	10000b1e 	bne	r2,zero,400453c <quorem+0x1c8>
 4004510:	18bfff04 	addi	r2,r3,-4
 4004514:	a880082e 	bgeu	r21,r2,4004538 <quorem+0x1c4>
 4004518:	18ffff17 	ldw	r3,-4(r3)
 400451c:	18000326 	beq	r3,zero,400452c <quorem+0x1b8>
 4004520:	00000506 	br	4004538 <quorem+0x1c4>
 4004524:	10c00017 	ldw	r3,0(r2)
 4004528:	1800031e 	bne	r3,zero,4004538 <quorem+0x1c4>
 400452c:	10bfff04 	addi	r2,r2,-4
 4004530:	94bfffc4 	addi	r18,r18,-1
 4004534:	a8bffb36 	bltu	r21,r2,4004524 <__alt_data_end+0xfc004524>
 4004538:	84800415 	stw	r18,16(r16)
 400453c:	9805883a 	mov	r2,r19
 4004540:	dfc00817 	ldw	ra,32(sp)
 4004544:	ddc00717 	ldw	r23,28(sp)
 4004548:	dd800617 	ldw	r22,24(sp)
 400454c:	dd400517 	ldw	r21,20(sp)
 4004550:	dd000417 	ldw	r20,16(sp)
 4004554:	dcc00317 	ldw	r19,12(sp)
 4004558:	dc800217 	ldw	r18,8(sp)
 400455c:	dc400117 	ldw	r17,4(sp)
 4004560:	dc000017 	ldw	r16,0(sp)
 4004564:	dec00904 	addi	sp,sp,36
 4004568:	f800283a 	ret
 400456c:	0005883a 	mov	r2,zero
 4004570:	003ff306 	br	4004540 <__alt_data_end+0xfc004540>

04004574 <_dtoa_r>:
 4004574:	20801017 	ldw	r2,64(r4)
 4004578:	deffde04 	addi	sp,sp,-136
 400457c:	df002015 	stw	fp,128(sp)
 4004580:	dcc01b15 	stw	r19,108(sp)
 4004584:	dc801a15 	stw	r18,104(sp)
 4004588:	dc401915 	stw	r17,100(sp)
 400458c:	dc001815 	stw	r16,96(sp)
 4004590:	dfc02115 	stw	ra,132(sp)
 4004594:	ddc01f15 	stw	r23,124(sp)
 4004598:	dd801e15 	stw	r22,120(sp)
 400459c:	dd401d15 	stw	r21,116(sp)
 40045a0:	dd001c15 	stw	r20,112(sp)
 40045a4:	d9c00315 	stw	r7,12(sp)
 40045a8:	2039883a 	mov	fp,r4
 40045ac:	3023883a 	mov	r17,r6
 40045b0:	2825883a 	mov	r18,r5
 40045b4:	dc002417 	ldw	r16,144(sp)
 40045b8:	3027883a 	mov	r19,r6
 40045bc:	10000826 	beq	r2,zero,40045e0 <_dtoa_r+0x6c>
 40045c0:	21801117 	ldw	r6,68(r4)
 40045c4:	00c00044 	movi	r3,1
 40045c8:	100b883a 	mov	r5,r2
 40045cc:	1986983a 	sll	r3,r3,r6
 40045d0:	11800115 	stw	r6,4(r2)
 40045d4:	10c00215 	stw	r3,8(r2)
 40045d8:	4007cb80 	call	4007cb8 <_Bfree>
 40045dc:	e0001015 	stw	zero,64(fp)
 40045e0:	88002e16 	blt	r17,zero,400469c <_dtoa_r+0x128>
 40045e4:	80000015 	stw	zero,0(r16)
 40045e8:	889ffc2c 	andhi	r2,r17,32752
 40045ec:	00dffc34 	movhi	r3,32752
 40045f0:	10c01c26 	beq	r2,r3,4004664 <_dtoa_r+0xf0>
 40045f4:	000d883a 	mov	r6,zero
 40045f8:	000f883a 	mov	r7,zero
 40045fc:	9009883a 	mov	r4,r18
 4004600:	980b883a 	mov	r5,r19
 4004604:	400d0100 	call	400d010 <__eqdf2>
 4004608:	10002b1e 	bne	r2,zero,40046b8 <_dtoa_r+0x144>
 400460c:	d9c02317 	ldw	r7,140(sp)
 4004610:	00800044 	movi	r2,1
 4004614:	38800015 	stw	r2,0(r7)
 4004618:	d8802517 	ldw	r2,148(sp)
 400461c:	10019e26 	beq	r2,zero,4004c98 <_dtoa_r+0x724>
 4004620:	d8c02517 	ldw	r3,148(sp)
 4004624:	008100f4 	movhi	r2,1027
 4004628:	10854344 	addi	r2,r2,5389
 400462c:	18800015 	stw	r2,0(r3)
 4004630:	10bfffc4 	addi	r2,r2,-1
 4004634:	dfc02117 	ldw	ra,132(sp)
 4004638:	df002017 	ldw	fp,128(sp)
 400463c:	ddc01f17 	ldw	r23,124(sp)
 4004640:	dd801e17 	ldw	r22,120(sp)
 4004644:	dd401d17 	ldw	r21,116(sp)
 4004648:	dd001c17 	ldw	r20,112(sp)
 400464c:	dcc01b17 	ldw	r19,108(sp)
 4004650:	dc801a17 	ldw	r18,104(sp)
 4004654:	dc401917 	ldw	r17,100(sp)
 4004658:	dc001817 	ldw	r16,96(sp)
 400465c:	dec02204 	addi	sp,sp,136
 4004660:	f800283a 	ret
 4004664:	d8c02317 	ldw	r3,140(sp)
 4004668:	0089c3c4 	movi	r2,9999
 400466c:	18800015 	stw	r2,0(r3)
 4004670:	90017726 	beq	r18,zero,4004c50 <_dtoa_r+0x6dc>
 4004674:	008100f4 	movhi	r2,1027
 4004678:	10854f04 	addi	r2,r2,5436
 400467c:	d9002517 	ldw	r4,148(sp)
 4004680:	203fec26 	beq	r4,zero,4004634 <__alt_data_end+0xfc004634>
 4004684:	10c000c7 	ldb	r3,3(r2)
 4004688:	1801781e 	bne	r3,zero,4004c6c <_dtoa_r+0x6f8>
 400468c:	10c000c4 	addi	r3,r2,3
 4004690:	d9802517 	ldw	r6,148(sp)
 4004694:	30c00015 	stw	r3,0(r6)
 4004698:	003fe606 	br	4004634 <__alt_data_end+0xfc004634>
 400469c:	04e00034 	movhi	r19,32768
 40046a0:	9cffffc4 	addi	r19,r19,-1
 40046a4:	00800044 	movi	r2,1
 40046a8:	8ce6703a 	and	r19,r17,r19
 40046ac:	80800015 	stw	r2,0(r16)
 40046b0:	9823883a 	mov	r17,r19
 40046b4:	003fcc06 	br	40045e8 <__alt_data_end+0xfc0045e8>
 40046b8:	d8800204 	addi	r2,sp,8
 40046bc:	d8800015 	stw	r2,0(sp)
 40046c0:	d9c00104 	addi	r7,sp,4
 40046c4:	900b883a 	mov	r5,r18
 40046c8:	980d883a 	mov	r6,r19
 40046cc:	e009883a 	mov	r4,fp
 40046d0:	8820d53a 	srli	r16,r17,20
 40046d4:	40088a40 	call	40088a4 <__d2b>
 40046d8:	d8800915 	stw	r2,36(sp)
 40046dc:	8001651e 	bne	r16,zero,4004c74 <_dtoa_r+0x700>
 40046e0:	dd800217 	ldw	r22,8(sp)
 40046e4:	dc000117 	ldw	r16,4(sp)
 40046e8:	00800804 	movi	r2,32
 40046ec:	b421883a 	add	r16,r22,r16
 40046f0:	80c10c84 	addi	r3,r16,1074
 40046f4:	10c2d10e 	bge	r2,r3,400523c <_dtoa_r+0xcc8>
 40046f8:	00801004 	movi	r2,64
 40046fc:	81010484 	addi	r4,r16,1042
 4004700:	10c7c83a 	sub	r3,r2,r3
 4004704:	9108d83a 	srl	r4,r18,r4
 4004708:	88e2983a 	sll	r17,r17,r3
 400470c:	2448b03a 	or	r4,r4,r17
 4004710:	400e3d80 	call	400e3d8 <__floatunsidf>
 4004714:	017f8434 	movhi	r5,65040
 4004718:	01800044 	movi	r6,1
 400471c:	1009883a 	mov	r4,r2
 4004720:	194b883a 	add	r5,r3,r5
 4004724:	843fffc4 	addi	r16,r16,-1
 4004728:	d9801115 	stw	r6,68(sp)
 400472c:	000d883a 	mov	r6,zero
 4004730:	01cffe34 	movhi	r7,16376
 4004734:	400d9800 	call	400d980 <__subdf3>
 4004738:	0198dbf4 	movhi	r6,25455
 400473c:	01cff4f4 	movhi	r7,16339
 4004740:	3190d844 	addi	r6,r6,17249
 4004744:	39e1e9c4 	addi	r7,r7,-30809
 4004748:	1009883a 	mov	r4,r2
 400474c:	180b883a 	mov	r5,r3
 4004750:	400d2680 	call	400d268 <__muldf3>
 4004754:	01a2d874 	movhi	r6,35681
 4004758:	01cff1f4 	movhi	r7,16327
 400475c:	31b22cc4 	addi	r6,r6,-14157
 4004760:	39e28a04 	addi	r7,r7,-30168
 4004764:	180b883a 	mov	r5,r3
 4004768:	1009883a 	mov	r4,r2
 400476c:	400be7c0 	call	400be7c <__adddf3>
 4004770:	8009883a 	mov	r4,r16
 4004774:	1029883a 	mov	r20,r2
 4004778:	1823883a 	mov	r17,r3
 400477c:	400e2fc0 	call	400e2fc <__floatsidf>
 4004780:	019427f4 	movhi	r6,20639
 4004784:	01cff4f4 	movhi	r7,16339
 4004788:	319e7ec4 	addi	r6,r6,31227
 400478c:	39d104c4 	addi	r7,r7,17427
 4004790:	1009883a 	mov	r4,r2
 4004794:	180b883a 	mov	r5,r3
 4004798:	400d2680 	call	400d268 <__muldf3>
 400479c:	100d883a 	mov	r6,r2
 40047a0:	180f883a 	mov	r7,r3
 40047a4:	a009883a 	mov	r4,r20
 40047a8:	880b883a 	mov	r5,r17
 40047ac:	400be7c0 	call	400be7c <__adddf3>
 40047b0:	1009883a 	mov	r4,r2
 40047b4:	180b883a 	mov	r5,r3
 40047b8:	1029883a 	mov	r20,r2
 40047bc:	1823883a 	mov	r17,r3
 40047c0:	400e27c0 	call	400e27c <__fixdfsi>
 40047c4:	000d883a 	mov	r6,zero
 40047c8:	000f883a 	mov	r7,zero
 40047cc:	a009883a 	mov	r4,r20
 40047d0:	880b883a 	mov	r5,r17
 40047d4:	d8800515 	stw	r2,20(sp)
 40047d8:	400d1740 	call	400d174 <__ledf2>
 40047dc:	10028716 	blt	r2,zero,40051fc <_dtoa_r+0xc88>
 40047e0:	d8c00517 	ldw	r3,20(sp)
 40047e4:	00800584 	movi	r2,22
 40047e8:	10c27536 	bltu	r2,r3,40051c0 <_dtoa_r+0xc4c>
 40047ec:	180490fa 	slli	r2,r3,3
 40047f0:	00c100f4 	movhi	r3,1027
 40047f4:	18c56b04 	addi	r3,r3,5548
 40047f8:	1885883a 	add	r2,r3,r2
 40047fc:	11000017 	ldw	r4,0(r2)
 4004800:	11400117 	ldw	r5,4(r2)
 4004804:	900d883a 	mov	r6,r18
 4004808:	980f883a 	mov	r7,r19
 400480c:	400d0980 	call	400d098 <__gedf2>
 4004810:	00828d0e 	bge	zero,r2,4005248 <_dtoa_r+0xcd4>
 4004814:	d9000517 	ldw	r4,20(sp)
 4004818:	d8000e15 	stw	zero,56(sp)
 400481c:	213fffc4 	addi	r4,r4,-1
 4004820:	d9000515 	stw	r4,20(sp)
 4004824:	b42dc83a 	sub	r22,r22,r16
 4004828:	b5bfffc4 	addi	r22,r22,-1
 400482c:	b0026f16 	blt	r22,zero,40051ec <_dtoa_r+0xc78>
 4004830:	d8000815 	stw	zero,32(sp)
 4004834:	d9c00517 	ldw	r7,20(sp)
 4004838:	38026416 	blt	r7,zero,40051cc <_dtoa_r+0xc58>
 400483c:	b1ed883a 	add	r22,r22,r7
 4004840:	d9c00d15 	stw	r7,52(sp)
 4004844:	d8000a15 	stw	zero,40(sp)
 4004848:	d9800317 	ldw	r6,12(sp)
 400484c:	00800244 	movi	r2,9
 4004850:	11811436 	bltu	r2,r6,4004ca4 <_dtoa_r+0x730>
 4004854:	00800144 	movi	r2,5
 4004858:	1184e10e 	bge	r2,r6,4005be0 <_dtoa_r+0x166c>
 400485c:	31bfff04 	addi	r6,r6,-4
 4004860:	d9800315 	stw	r6,12(sp)
 4004864:	0023883a 	mov	r17,zero
 4004868:	d9800317 	ldw	r6,12(sp)
 400486c:	008000c4 	movi	r2,3
 4004870:	30836726 	beq	r6,r2,4005610 <_dtoa_r+0x109c>
 4004874:	1183410e 	bge	r2,r6,400557c <_dtoa_r+0x1008>
 4004878:	d9c00317 	ldw	r7,12(sp)
 400487c:	00800104 	movi	r2,4
 4004880:	38827c26 	beq	r7,r2,4005274 <_dtoa_r+0xd00>
 4004884:	00800144 	movi	r2,5
 4004888:	3884c41e 	bne	r7,r2,4005b9c <_dtoa_r+0x1628>
 400488c:	00800044 	movi	r2,1
 4004890:	d8800b15 	stw	r2,44(sp)
 4004894:	d8c00517 	ldw	r3,20(sp)
 4004898:	d9002217 	ldw	r4,136(sp)
 400489c:	1907883a 	add	r3,r3,r4
 40048a0:	19800044 	addi	r6,r3,1
 40048a4:	d8c00c15 	stw	r3,48(sp)
 40048a8:	d9800615 	stw	r6,24(sp)
 40048ac:	0183a40e 	bge	zero,r6,4005740 <_dtoa_r+0x11cc>
 40048b0:	d9800617 	ldw	r6,24(sp)
 40048b4:	3021883a 	mov	r16,r6
 40048b8:	e0001115 	stw	zero,68(fp)
 40048bc:	008005c4 	movi	r2,23
 40048c0:	1184c92e 	bgeu	r2,r6,4005be8 <_dtoa_r+0x1674>
 40048c4:	00c00044 	movi	r3,1
 40048c8:	00800104 	movi	r2,4
 40048cc:	1085883a 	add	r2,r2,r2
 40048d0:	11000504 	addi	r4,r2,20
 40048d4:	180b883a 	mov	r5,r3
 40048d8:	18c00044 	addi	r3,r3,1
 40048dc:	313ffb2e 	bgeu	r6,r4,40048cc <__alt_data_end+0xfc0048cc>
 40048e0:	e1401115 	stw	r5,68(fp)
 40048e4:	e009883a 	mov	r4,fp
 40048e8:	4007c100 	call	4007c10 <_Balloc>
 40048ec:	d8800715 	stw	r2,28(sp)
 40048f0:	e0801015 	stw	r2,64(fp)
 40048f4:	00800384 	movi	r2,14
 40048f8:	1400f736 	bltu	r2,r16,4004cd8 <_dtoa_r+0x764>
 40048fc:	8800f626 	beq	r17,zero,4004cd8 <_dtoa_r+0x764>
 4004900:	d9c00517 	ldw	r7,20(sp)
 4004904:	01c39a0e 	bge	zero,r7,4005770 <_dtoa_r+0x11fc>
 4004908:	388003cc 	andi	r2,r7,15
 400490c:	100490fa 	slli	r2,r2,3
 4004910:	382bd13a 	srai	r21,r7,4
 4004914:	00c100f4 	movhi	r3,1027
 4004918:	18c56b04 	addi	r3,r3,5548
 400491c:	1885883a 	add	r2,r3,r2
 4004920:	a8c0040c 	andi	r3,r21,16
 4004924:	12400017 	ldw	r9,0(r2)
 4004928:	12000117 	ldw	r8,4(r2)
 400492c:	18037926 	beq	r3,zero,4005714 <_dtoa_r+0x11a0>
 4004930:	008100f4 	movhi	r2,1027
 4004934:	10856104 	addi	r2,r2,5508
 4004938:	11800817 	ldw	r6,32(r2)
 400493c:	11c00917 	ldw	r7,36(r2)
 4004940:	9009883a 	mov	r4,r18
 4004944:	980b883a 	mov	r5,r19
 4004948:	da001715 	stw	r8,92(sp)
 400494c:	da401615 	stw	r9,88(sp)
 4004950:	400c7280 	call	400c728 <__divdf3>
 4004954:	da001717 	ldw	r8,92(sp)
 4004958:	da401617 	ldw	r9,88(sp)
 400495c:	ad4003cc 	andi	r21,r21,15
 4004960:	040000c4 	movi	r16,3
 4004964:	1023883a 	mov	r17,r2
 4004968:	1829883a 	mov	r20,r3
 400496c:	a8001126 	beq	r21,zero,40049b4 <_dtoa_r+0x440>
 4004970:	05c100f4 	movhi	r23,1027
 4004974:	bdc56104 	addi	r23,r23,5508
 4004978:	4805883a 	mov	r2,r9
 400497c:	4007883a 	mov	r3,r8
 4004980:	a980004c 	andi	r6,r21,1
 4004984:	1009883a 	mov	r4,r2
 4004988:	a82bd07a 	srai	r21,r21,1
 400498c:	180b883a 	mov	r5,r3
 4004990:	30000426 	beq	r6,zero,40049a4 <_dtoa_r+0x430>
 4004994:	b9800017 	ldw	r6,0(r23)
 4004998:	b9c00117 	ldw	r7,4(r23)
 400499c:	84000044 	addi	r16,r16,1
 40049a0:	400d2680 	call	400d268 <__muldf3>
 40049a4:	bdc00204 	addi	r23,r23,8
 40049a8:	a83ff51e 	bne	r21,zero,4004980 <__alt_data_end+0xfc004980>
 40049ac:	1013883a 	mov	r9,r2
 40049b0:	1811883a 	mov	r8,r3
 40049b4:	480d883a 	mov	r6,r9
 40049b8:	400f883a 	mov	r7,r8
 40049bc:	8809883a 	mov	r4,r17
 40049c0:	a00b883a 	mov	r5,r20
 40049c4:	400c7280 	call	400c728 <__divdf3>
 40049c8:	d8800f15 	stw	r2,60(sp)
 40049cc:	d8c01015 	stw	r3,64(sp)
 40049d0:	d8c00e17 	ldw	r3,56(sp)
 40049d4:	18000626 	beq	r3,zero,40049f0 <_dtoa_r+0x47c>
 40049d8:	d9000f17 	ldw	r4,60(sp)
 40049dc:	d9401017 	ldw	r5,64(sp)
 40049e0:	000d883a 	mov	r6,zero
 40049e4:	01cffc34 	movhi	r7,16368
 40049e8:	400d1740 	call	400d174 <__ledf2>
 40049ec:	10040b16 	blt	r2,zero,4005a1c <_dtoa_r+0x14a8>
 40049f0:	8009883a 	mov	r4,r16
 40049f4:	400e2fc0 	call	400e2fc <__floatsidf>
 40049f8:	d9800f17 	ldw	r6,60(sp)
 40049fc:	d9c01017 	ldw	r7,64(sp)
 4004a00:	1009883a 	mov	r4,r2
 4004a04:	180b883a 	mov	r5,r3
 4004a08:	400d2680 	call	400d268 <__muldf3>
 4004a0c:	000d883a 	mov	r6,zero
 4004a10:	01d00734 	movhi	r7,16412
 4004a14:	1009883a 	mov	r4,r2
 4004a18:	180b883a 	mov	r5,r3
 4004a1c:	400be7c0 	call	400be7c <__adddf3>
 4004a20:	1021883a 	mov	r16,r2
 4004a24:	d8800617 	ldw	r2,24(sp)
 4004a28:	047f3034 	movhi	r17,64704
 4004a2c:	1c63883a 	add	r17,r3,r17
 4004a30:	10031826 	beq	r2,zero,4005694 <_dtoa_r+0x1120>
 4004a34:	d8c00517 	ldw	r3,20(sp)
 4004a38:	db000617 	ldw	r12,24(sp)
 4004a3c:	d8c01315 	stw	r3,76(sp)
 4004a40:	d9000b17 	ldw	r4,44(sp)
 4004a44:	20038f26 	beq	r4,zero,4005884 <_dtoa_r+0x1310>
 4004a48:	60bfffc4 	addi	r2,r12,-1
 4004a4c:	100490fa 	slli	r2,r2,3
 4004a50:	00c100f4 	movhi	r3,1027
 4004a54:	18c56b04 	addi	r3,r3,5548
 4004a58:	1885883a 	add	r2,r3,r2
 4004a5c:	11800017 	ldw	r6,0(r2)
 4004a60:	11c00117 	ldw	r7,4(r2)
 4004a64:	d8800717 	ldw	r2,28(sp)
 4004a68:	0009883a 	mov	r4,zero
 4004a6c:	014ff834 	movhi	r5,16352
 4004a70:	db001615 	stw	r12,88(sp)
 4004a74:	15c00044 	addi	r23,r2,1
 4004a78:	400c7280 	call	400c728 <__divdf3>
 4004a7c:	800d883a 	mov	r6,r16
 4004a80:	880f883a 	mov	r7,r17
 4004a84:	1009883a 	mov	r4,r2
 4004a88:	180b883a 	mov	r5,r3
 4004a8c:	400d9800 	call	400d980 <__subdf3>
 4004a90:	d9401017 	ldw	r5,64(sp)
 4004a94:	d9000f17 	ldw	r4,60(sp)
 4004a98:	102b883a 	mov	r21,r2
 4004a9c:	d8c01215 	stw	r3,72(sp)
 4004aa0:	400e27c0 	call	400e27c <__fixdfsi>
 4004aa4:	1009883a 	mov	r4,r2
 4004aa8:	1029883a 	mov	r20,r2
 4004aac:	400e2fc0 	call	400e2fc <__floatsidf>
 4004ab0:	d9000f17 	ldw	r4,60(sp)
 4004ab4:	d9401017 	ldw	r5,64(sp)
 4004ab8:	100d883a 	mov	r6,r2
 4004abc:	180f883a 	mov	r7,r3
 4004ac0:	400d9800 	call	400d980 <__subdf3>
 4004ac4:	1823883a 	mov	r17,r3
 4004ac8:	d8c00717 	ldw	r3,28(sp)
 4004acc:	d9401217 	ldw	r5,72(sp)
 4004ad0:	a2000c04 	addi	r8,r20,48
 4004ad4:	1021883a 	mov	r16,r2
 4004ad8:	1a000005 	stb	r8,0(r3)
 4004adc:	800d883a 	mov	r6,r16
 4004ae0:	880f883a 	mov	r7,r17
 4004ae4:	a809883a 	mov	r4,r21
 4004ae8:	4029883a 	mov	r20,r8
 4004aec:	400d0980 	call	400d098 <__gedf2>
 4004af0:	00841d16 	blt	zero,r2,4005b68 <_dtoa_r+0x15f4>
 4004af4:	800d883a 	mov	r6,r16
 4004af8:	880f883a 	mov	r7,r17
 4004afc:	0009883a 	mov	r4,zero
 4004b00:	014ffc34 	movhi	r5,16368
 4004b04:	400d9800 	call	400d980 <__subdf3>
 4004b08:	d9401217 	ldw	r5,72(sp)
 4004b0c:	100d883a 	mov	r6,r2
 4004b10:	180f883a 	mov	r7,r3
 4004b14:	a809883a 	mov	r4,r21
 4004b18:	400d0980 	call	400d098 <__gedf2>
 4004b1c:	db001617 	ldw	r12,88(sp)
 4004b20:	00840e16 	blt	zero,r2,4005b5c <_dtoa_r+0x15e8>
 4004b24:	00800044 	movi	r2,1
 4004b28:	13006b0e 	bge	r2,r12,4004cd8 <_dtoa_r+0x764>
 4004b2c:	d9000717 	ldw	r4,28(sp)
 4004b30:	dd800f15 	stw	r22,60(sp)
 4004b34:	dcc01015 	stw	r19,64(sp)
 4004b38:	2319883a 	add	r12,r4,r12
 4004b3c:	dcc01217 	ldw	r19,72(sp)
 4004b40:	602d883a 	mov	r22,r12
 4004b44:	dc801215 	stw	r18,72(sp)
 4004b48:	b825883a 	mov	r18,r23
 4004b4c:	00000906 	br	4004b74 <_dtoa_r+0x600>
 4004b50:	400d9800 	call	400d980 <__subdf3>
 4004b54:	a80d883a 	mov	r6,r21
 4004b58:	980f883a 	mov	r7,r19
 4004b5c:	1009883a 	mov	r4,r2
 4004b60:	180b883a 	mov	r5,r3
 4004b64:	400d1740 	call	400d174 <__ledf2>
 4004b68:	1003e816 	blt	r2,zero,4005b0c <_dtoa_r+0x1598>
 4004b6c:	b825883a 	mov	r18,r23
 4004b70:	bd83e926 	beq	r23,r22,4005b18 <_dtoa_r+0x15a4>
 4004b74:	a809883a 	mov	r4,r21
 4004b78:	980b883a 	mov	r5,r19
 4004b7c:	000d883a 	mov	r6,zero
 4004b80:	01d00934 	movhi	r7,16420
 4004b84:	400d2680 	call	400d268 <__muldf3>
 4004b88:	000d883a 	mov	r6,zero
 4004b8c:	01d00934 	movhi	r7,16420
 4004b90:	8009883a 	mov	r4,r16
 4004b94:	880b883a 	mov	r5,r17
 4004b98:	102b883a 	mov	r21,r2
 4004b9c:	1827883a 	mov	r19,r3
 4004ba0:	400d2680 	call	400d268 <__muldf3>
 4004ba4:	180b883a 	mov	r5,r3
 4004ba8:	1009883a 	mov	r4,r2
 4004bac:	1821883a 	mov	r16,r3
 4004bb0:	1023883a 	mov	r17,r2
 4004bb4:	400e27c0 	call	400e27c <__fixdfsi>
 4004bb8:	1009883a 	mov	r4,r2
 4004bbc:	1029883a 	mov	r20,r2
 4004bc0:	400e2fc0 	call	400e2fc <__floatsidf>
 4004bc4:	8809883a 	mov	r4,r17
 4004bc8:	800b883a 	mov	r5,r16
 4004bcc:	100d883a 	mov	r6,r2
 4004bd0:	180f883a 	mov	r7,r3
 4004bd4:	400d9800 	call	400d980 <__subdf3>
 4004bd8:	a5000c04 	addi	r20,r20,48
 4004bdc:	a80d883a 	mov	r6,r21
 4004be0:	980f883a 	mov	r7,r19
 4004be4:	1009883a 	mov	r4,r2
 4004be8:	180b883a 	mov	r5,r3
 4004bec:	95000005 	stb	r20,0(r18)
 4004bf0:	1021883a 	mov	r16,r2
 4004bf4:	1823883a 	mov	r17,r3
 4004bf8:	400d1740 	call	400d174 <__ledf2>
 4004bfc:	bdc00044 	addi	r23,r23,1
 4004c00:	800d883a 	mov	r6,r16
 4004c04:	880f883a 	mov	r7,r17
 4004c08:	0009883a 	mov	r4,zero
 4004c0c:	014ffc34 	movhi	r5,16368
 4004c10:	103fcf0e 	bge	r2,zero,4004b50 <__alt_data_end+0xfc004b50>
 4004c14:	d8c01317 	ldw	r3,76(sp)
 4004c18:	d8c00515 	stw	r3,20(sp)
 4004c1c:	d9400917 	ldw	r5,36(sp)
 4004c20:	e009883a 	mov	r4,fp
 4004c24:	4007cb80 	call	4007cb8 <_Bfree>
 4004c28:	d9000517 	ldw	r4,20(sp)
 4004c2c:	d9802317 	ldw	r6,140(sp)
 4004c30:	d9c02517 	ldw	r7,148(sp)
 4004c34:	b8000005 	stb	zero,0(r23)
 4004c38:	20800044 	addi	r2,r4,1
 4004c3c:	30800015 	stw	r2,0(r6)
 4004c40:	3802aa26 	beq	r7,zero,40056ec <_dtoa_r+0x1178>
 4004c44:	3dc00015 	stw	r23,0(r7)
 4004c48:	d8800717 	ldw	r2,28(sp)
 4004c4c:	003e7906 	br	4004634 <__alt_data_end+0xfc004634>
 4004c50:	00800434 	movhi	r2,16
 4004c54:	10bfffc4 	addi	r2,r2,-1
 4004c58:	88a2703a 	and	r17,r17,r2
 4004c5c:	883e851e 	bne	r17,zero,4004674 <__alt_data_end+0xfc004674>
 4004c60:	008100f4 	movhi	r2,1027
 4004c64:	10854c04 	addi	r2,r2,5424
 4004c68:	003e8406 	br	400467c <__alt_data_end+0xfc00467c>
 4004c6c:	10c00204 	addi	r3,r2,8
 4004c70:	003e8706 	br	4004690 <__alt_data_end+0xfc004690>
 4004c74:	01400434 	movhi	r5,16
 4004c78:	297fffc4 	addi	r5,r5,-1
 4004c7c:	994a703a 	and	r5,r19,r5
 4004c80:	9009883a 	mov	r4,r18
 4004c84:	843f0044 	addi	r16,r16,-1023
 4004c88:	294ffc34 	orhi	r5,r5,16368
 4004c8c:	dd800217 	ldw	r22,8(sp)
 4004c90:	d8001115 	stw	zero,68(sp)
 4004c94:	003ea506 	br	400472c <__alt_data_end+0xfc00472c>
 4004c98:	008100f4 	movhi	r2,1027
 4004c9c:	10854304 	addi	r2,r2,5388
 4004ca0:	003e6406 	br	4004634 <__alt_data_end+0xfc004634>
 4004ca4:	e0001115 	stw	zero,68(fp)
 4004ca8:	000b883a 	mov	r5,zero
 4004cac:	e009883a 	mov	r4,fp
 4004cb0:	4007c100 	call	4007c10 <_Balloc>
 4004cb4:	01bfffc4 	movi	r6,-1
 4004cb8:	01c00044 	movi	r7,1
 4004cbc:	d8800715 	stw	r2,28(sp)
 4004cc0:	d9800c15 	stw	r6,48(sp)
 4004cc4:	e0801015 	stw	r2,64(fp)
 4004cc8:	d8000315 	stw	zero,12(sp)
 4004ccc:	d9c00b15 	stw	r7,44(sp)
 4004cd0:	d9800615 	stw	r6,24(sp)
 4004cd4:	d8002215 	stw	zero,136(sp)
 4004cd8:	d8800117 	ldw	r2,4(sp)
 4004cdc:	10008916 	blt	r2,zero,4004f04 <_dtoa_r+0x990>
 4004ce0:	d9000517 	ldw	r4,20(sp)
 4004ce4:	00c00384 	movi	r3,14
 4004ce8:	19008616 	blt	r3,r4,4004f04 <_dtoa_r+0x990>
 4004cec:	200490fa 	slli	r2,r4,3
 4004cf0:	00c100f4 	movhi	r3,1027
 4004cf4:	d9802217 	ldw	r6,136(sp)
 4004cf8:	18c56b04 	addi	r3,r3,5548
 4004cfc:	1885883a 	add	r2,r3,r2
 4004d00:	14000017 	ldw	r16,0(r2)
 4004d04:	14400117 	ldw	r17,4(r2)
 4004d08:	30016316 	blt	r6,zero,4005298 <_dtoa_r+0xd24>
 4004d0c:	800d883a 	mov	r6,r16
 4004d10:	880f883a 	mov	r7,r17
 4004d14:	9009883a 	mov	r4,r18
 4004d18:	980b883a 	mov	r5,r19
 4004d1c:	400c7280 	call	400c728 <__divdf3>
 4004d20:	180b883a 	mov	r5,r3
 4004d24:	1009883a 	mov	r4,r2
 4004d28:	400e27c0 	call	400e27c <__fixdfsi>
 4004d2c:	1009883a 	mov	r4,r2
 4004d30:	102b883a 	mov	r21,r2
 4004d34:	400e2fc0 	call	400e2fc <__floatsidf>
 4004d38:	800d883a 	mov	r6,r16
 4004d3c:	880f883a 	mov	r7,r17
 4004d40:	1009883a 	mov	r4,r2
 4004d44:	180b883a 	mov	r5,r3
 4004d48:	400d2680 	call	400d268 <__muldf3>
 4004d4c:	100d883a 	mov	r6,r2
 4004d50:	180f883a 	mov	r7,r3
 4004d54:	9009883a 	mov	r4,r18
 4004d58:	980b883a 	mov	r5,r19
 4004d5c:	400d9800 	call	400d980 <__subdf3>
 4004d60:	d9c00717 	ldw	r7,28(sp)
 4004d64:	1009883a 	mov	r4,r2
 4004d68:	a8800c04 	addi	r2,r21,48
 4004d6c:	38800005 	stb	r2,0(r7)
 4004d70:	3dc00044 	addi	r23,r7,1
 4004d74:	d9c00617 	ldw	r7,24(sp)
 4004d78:	01800044 	movi	r6,1
 4004d7c:	180b883a 	mov	r5,r3
 4004d80:	2005883a 	mov	r2,r4
 4004d84:	39803826 	beq	r7,r6,4004e68 <_dtoa_r+0x8f4>
 4004d88:	000d883a 	mov	r6,zero
 4004d8c:	01d00934 	movhi	r7,16420
 4004d90:	400d2680 	call	400d268 <__muldf3>
 4004d94:	000d883a 	mov	r6,zero
 4004d98:	000f883a 	mov	r7,zero
 4004d9c:	1009883a 	mov	r4,r2
 4004da0:	180b883a 	mov	r5,r3
 4004da4:	1025883a 	mov	r18,r2
 4004da8:	1827883a 	mov	r19,r3
 4004dac:	400d0100 	call	400d010 <__eqdf2>
 4004db0:	103f9a26 	beq	r2,zero,4004c1c <__alt_data_end+0xfc004c1c>
 4004db4:	d9c00617 	ldw	r7,24(sp)
 4004db8:	d8c00717 	ldw	r3,28(sp)
 4004dbc:	b829883a 	mov	r20,r23
 4004dc0:	38bfffc4 	addi	r2,r7,-1
 4004dc4:	18ad883a 	add	r22,r3,r2
 4004dc8:	00000a06 	br	4004df4 <_dtoa_r+0x880>
 4004dcc:	400d2680 	call	400d268 <__muldf3>
 4004dd0:	000d883a 	mov	r6,zero
 4004dd4:	000f883a 	mov	r7,zero
 4004dd8:	1009883a 	mov	r4,r2
 4004ddc:	180b883a 	mov	r5,r3
 4004de0:	1025883a 	mov	r18,r2
 4004de4:	1827883a 	mov	r19,r3
 4004de8:	b829883a 	mov	r20,r23
 4004dec:	400d0100 	call	400d010 <__eqdf2>
 4004df0:	103f8a26 	beq	r2,zero,4004c1c <__alt_data_end+0xfc004c1c>
 4004df4:	800d883a 	mov	r6,r16
 4004df8:	880f883a 	mov	r7,r17
 4004dfc:	9009883a 	mov	r4,r18
 4004e00:	980b883a 	mov	r5,r19
 4004e04:	400c7280 	call	400c728 <__divdf3>
 4004e08:	180b883a 	mov	r5,r3
 4004e0c:	1009883a 	mov	r4,r2
 4004e10:	400e27c0 	call	400e27c <__fixdfsi>
 4004e14:	1009883a 	mov	r4,r2
 4004e18:	102b883a 	mov	r21,r2
 4004e1c:	400e2fc0 	call	400e2fc <__floatsidf>
 4004e20:	800d883a 	mov	r6,r16
 4004e24:	880f883a 	mov	r7,r17
 4004e28:	1009883a 	mov	r4,r2
 4004e2c:	180b883a 	mov	r5,r3
 4004e30:	400d2680 	call	400d268 <__muldf3>
 4004e34:	100d883a 	mov	r6,r2
 4004e38:	180f883a 	mov	r7,r3
 4004e3c:	9009883a 	mov	r4,r18
 4004e40:	980b883a 	mov	r5,r19
 4004e44:	400d9800 	call	400d980 <__subdf3>
 4004e48:	aa000c04 	addi	r8,r21,48
 4004e4c:	a2000005 	stb	r8,0(r20)
 4004e50:	000d883a 	mov	r6,zero
 4004e54:	01d00934 	movhi	r7,16420
 4004e58:	1009883a 	mov	r4,r2
 4004e5c:	180b883a 	mov	r5,r3
 4004e60:	a5c00044 	addi	r23,r20,1
 4004e64:	b53fd91e 	bne	r22,r20,4004dcc <__alt_data_end+0xfc004dcc>
 4004e68:	100d883a 	mov	r6,r2
 4004e6c:	180f883a 	mov	r7,r3
 4004e70:	1009883a 	mov	r4,r2
 4004e74:	180b883a 	mov	r5,r3
 4004e78:	400be7c0 	call	400be7c <__adddf3>
 4004e7c:	100d883a 	mov	r6,r2
 4004e80:	180f883a 	mov	r7,r3
 4004e84:	8009883a 	mov	r4,r16
 4004e88:	880b883a 	mov	r5,r17
 4004e8c:	1027883a 	mov	r19,r2
 4004e90:	1825883a 	mov	r18,r3
 4004e94:	400d1740 	call	400d174 <__ledf2>
 4004e98:	10000816 	blt	r2,zero,4004ebc <_dtoa_r+0x948>
 4004e9c:	980d883a 	mov	r6,r19
 4004ea0:	900f883a 	mov	r7,r18
 4004ea4:	8009883a 	mov	r4,r16
 4004ea8:	880b883a 	mov	r5,r17
 4004eac:	400d0100 	call	400d010 <__eqdf2>
 4004eb0:	103f5a1e 	bne	r2,zero,4004c1c <__alt_data_end+0xfc004c1c>
 4004eb4:	ad40004c 	andi	r21,r21,1
 4004eb8:	a83f5826 	beq	r21,zero,4004c1c <__alt_data_end+0xfc004c1c>
 4004ebc:	bd3fffc3 	ldbu	r20,-1(r23)
 4004ec0:	b8bfffc4 	addi	r2,r23,-1
 4004ec4:	1007883a 	mov	r3,r2
 4004ec8:	01400e44 	movi	r5,57
 4004ecc:	d9800717 	ldw	r6,28(sp)
 4004ed0:	00000506 	br	4004ee8 <_dtoa_r+0x974>
 4004ed4:	18ffffc4 	addi	r3,r3,-1
 4004ed8:	11824726 	beq	r2,r6,40057f8 <_dtoa_r+0x1284>
 4004edc:	1d000003 	ldbu	r20,0(r3)
 4004ee0:	102f883a 	mov	r23,r2
 4004ee4:	10bfffc4 	addi	r2,r2,-1
 4004ee8:	a1003fcc 	andi	r4,r20,255
 4004eec:	2100201c 	xori	r4,r4,128
 4004ef0:	213fe004 	addi	r4,r4,-128
 4004ef4:	217ff726 	beq	r4,r5,4004ed4 <__alt_data_end+0xfc004ed4>
 4004ef8:	a2000044 	addi	r8,r20,1
 4004efc:	12000005 	stb	r8,0(r2)
 4004f00:	003f4606 	br	4004c1c <__alt_data_end+0xfc004c1c>
 4004f04:	d9000b17 	ldw	r4,44(sp)
 4004f08:	2000c826 	beq	r4,zero,400522c <_dtoa_r+0xcb8>
 4004f0c:	d9800317 	ldw	r6,12(sp)
 4004f10:	00c00044 	movi	r3,1
 4004f14:	1980f90e 	bge	r3,r6,40052fc <_dtoa_r+0xd88>
 4004f18:	d8800617 	ldw	r2,24(sp)
 4004f1c:	d8c00a17 	ldw	r3,40(sp)
 4004f20:	157fffc4 	addi	r21,r2,-1
 4004f24:	1d41f316 	blt	r3,r21,40056f4 <_dtoa_r+0x1180>
 4004f28:	1d6bc83a 	sub	r21,r3,r21
 4004f2c:	d9c00617 	ldw	r7,24(sp)
 4004f30:	3802aa16 	blt	r7,zero,40059dc <_dtoa_r+0x1468>
 4004f34:	dd000817 	ldw	r20,32(sp)
 4004f38:	d8800617 	ldw	r2,24(sp)
 4004f3c:	d8c00817 	ldw	r3,32(sp)
 4004f40:	01400044 	movi	r5,1
 4004f44:	e009883a 	mov	r4,fp
 4004f48:	1887883a 	add	r3,r3,r2
 4004f4c:	d8c00815 	stw	r3,32(sp)
 4004f50:	b0ad883a 	add	r22,r22,r2
 4004f54:	400801c0 	call	400801c <__i2b>
 4004f58:	1023883a 	mov	r17,r2
 4004f5c:	a0000826 	beq	r20,zero,4004f80 <_dtoa_r+0xa0c>
 4004f60:	0580070e 	bge	zero,r22,4004f80 <_dtoa_r+0xa0c>
 4004f64:	a005883a 	mov	r2,r20
 4004f68:	b500b916 	blt	r22,r20,4005250 <_dtoa_r+0xcdc>
 4004f6c:	d9000817 	ldw	r4,32(sp)
 4004f70:	a0a9c83a 	sub	r20,r20,r2
 4004f74:	b0adc83a 	sub	r22,r22,r2
 4004f78:	2089c83a 	sub	r4,r4,r2
 4004f7c:	d9000815 	stw	r4,32(sp)
 4004f80:	d9800a17 	ldw	r6,40(sp)
 4004f84:	0181810e 	bge	zero,r6,400558c <_dtoa_r+0x1018>
 4004f88:	d9c00b17 	ldw	r7,44(sp)
 4004f8c:	3800b326 	beq	r7,zero,400525c <_dtoa_r+0xce8>
 4004f90:	a800b226 	beq	r21,zero,400525c <_dtoa_r+0xce8>
 4004f94:	880b883a 	mov	r5,r17
 4004f98:	a80d883a 	mov	r6,r21
 4004f9c:	e009883a 	mov	r4,fp
 4004fa0:	40082500 	call	4008250 <__pow5mult>
 4004fa4:	d9800917 	ldw	r6,36(sp)
 4004fa8:	100b883a 	mov	r5,r2
 4004fac:	e009883a 	mov	r4,fp
 4004fb0:	1023883a 	mov	r17,r2
 4004fb4:	40080580 	call	4008058 <__multiply>
 4004fb8:	1021883a 	mov	r16,r2
 4004fbc:	d8800a17 	ldw	r2,40(sp)
 4004fc0:	d9400917 	ldw	r5,36(sp)
 4004fc4:	e009883a 	mov	r4,fp
 4004fc8:	1545c83a 	sub	r2,r2,r21
 4004fcc:	d8800a15 	stw	r2,40(sp)
 4004fd0:	4007cb80 	call	4007cb8 <_Bfree>
 4004fd4:	d8c00a17 	ldw	r3,40(sp)
 4004fd8:	18009f1e 	bne	r3,zero,4005258 <_dtoa_r+0xce4>
 4004fdc:	05c00044 	movi	r23,1
 4004fe0:	e009883a 	mov	r4,fp
 4004fe4:	b80b883a 	mov	r5,r23
 4004fe8:	400801c0 	call	400801c <__i2b>
 4004fec:	d9000d17 	ldw	r4,52(sp)
 4004ff0:	102b883a 	mov	r21,r2
 4004ff4:	2000ce26 	beq	r4,zero,4005330 <_dtoa_r+0xdbc>
 4004ff8:	200d883a 	mov	r6,r4
 4004ffc:	100b883a 	mov	r5,r2
 4005000:	e009883a 	mov	r4,fp
 4005004:	40082500 	call	4008250 <__pow5mult>
 4005008:	d9800317 	ldw	r6,12(sp)
 400500c:	102b883a 	mov	r21,r2
 4005010:	b981810e 	bge	r23,r6,4005618 <_dtoa_r+0x10a4>
 4005014:	0027883a 	mov	r19,zero
 4005018:	a8800417 	ldw	r2,16(r21)
 400501c:	05c00804 	movi	r23,32
 4005020:	10800104 	addi	r2,r2,4
 4005024:	1085883a 	add	r2,r2,r2
 4005028:	1085883a 	add	r2,r2,r2
 400502c:	a885883a 	add	r2,r21,r2
 4005030:	11000017 	ldw	r4,0(r2)
 4005034:	4007f040 	call	4007f04 <__hi0bits>
 4005038:	b885c83a 	sub	r2,r23,r2
 400503c:	1585883a 	add	r2,r2,r22
 4005040:	108007cc 	andi	r2,r2,31
 4005044:	1000b326 	beq	r2,zero,4005314 <_dtoa_r+0xda0>
 4005048:	00c00804 	movi	r3,32
 400504c:	1887c83a 	sub	r3,r3,r2
 4005050:	01000104 	movi	r4,4
 4005054:	20c2cd0e 	bge	r4,r3,4005b8c <_dtoa_r+0x1618>
 4005058:	00c00704 	movi	r3,28
 400505c:	1885c83a 	sub	r2,r3,r2
 4005060:	d8c00817 	ldw	r3,32(sp)
 4005064:	a0a9883a 	add	r20,r20,r2
 4005068:	b0ad883a 	add	r22,r22,r2
 400506c:	1887883a 	add	r3,r3,r2
 4005070:	d8c00815 	stw	r3,32(sp)
 4005074:	d9800817 	ldw	r6,32(sp)
 4005078:	0180040e 	bge	zero,r6,400508c <_dtoa_r+0xb18>
 400507c:	800b883a 	mov	r5,r16
 4005080:	e009883a 	mov	r4,fp
 4005084:	40083900 	call	4008390 <__lshift>
 4005088:	1021883a 	mov	r16,r2
 400508c:	0580050e 	bge	zero,r22,40050a4 <_dtoa_r+0xb30>
 4005090:	a80b883a 	mov	r5,r21
 4005094:	b00d883a 	mov	r6,r22
 4005098:	e009883a 	mov	r4,fp
 400509c:	40083900 	call	4008390 <__lshift>
 40050a0:	102b883a 	mov	r21,r2
 40050a4:	d9c00e17 	ldw	r7,56(sp)
 40050a8:	3801211e 	bne	r7,zero,4005530 <_dtoa_r+0xfbc>
 40050ac:	d9800617 	ldw	r6,24(sp)
 40050b0:	0181380e 	bge	zero,r6,4005594 <_dtoa_r+0x1020>
 40050b4:	d8c00b17 	ldw	r3,44(sp)
 40050b8:	1800ab1e 	bne	r3,zero,4005368 <_dtoa_r+0xdf4>
 40050bc:	dc800717 	ldw	r18,28(sp)
 40050c0:	dcc00617 	ldw	r19,24(sp)
 40050c4:	9029883a 	mov	r20,r18
 40050c8:	00000206 	br	40050d4 <_dtoa_r+0xb60>
 40050cc:	4007ce00 	call	4007ce0 <__multadd>
 40050d0:	1021883a 	mov	r16,r2
 40050d4:	a80b883a 	mov	r5,r21
 40050d8:	8009883a 	mov	r4,r16
 40050dc:	40043740 	call	4004374 <quorem>
 40050e0:	10800c04 	addi	r2,r2,48
 40050e4:	90800005 	stb	r2,0(r18)
 40050e8:	94800044 	addi	r18,r18,1
 40050ec:	9507c83a 	sub	r3,r18,r20
 40050f0:	000f883a 	mov	r7,zero
 40050f4:	01800284 	movi	r6,10
 40050f8:	800b883a 	mov	r5,r16
 40050fc:	e009883a 	mov	r4,fp
 4005100:	1cfff216 	blt	r3,r19,40050cc <__alt_data_end+0xfc0050cc>
 4005104:	1011883a 	mov	r8,r2
 4005108:	d8800617 	ldw	r2,24(sp)
 400510c:	0082370e 	bge	zero,r2,40059ec <_dtoa_r+0x1478>
 4005110:	d9000717 	ldw	r4,28(sp)
 4005114:	0025883a 	mov	r18,zero
 4005118:	20af883a 	add	r23,r4,r2
 400511c:	01800044 	movi	r6,1
 4005120:	800b883a 	mov	r5,r16
 4005124:	e009883a 	mov	r4,fp
 4005128:	da001715 	stw	r8,92(sp)
 400512c:	40083900 	call	4008390 <__lshift>
 4005130:	a80b883a 	mov	r5,r21
 4005134:	1009883a 	mov	r4,r2
 4005138:	d8800915 	stw	r2,36(sp)
 400513c:	40084d80 	call	40084d8 <__mcmp>
 4005140:	da001717 	ldw	r8,92(sp)
 4005144:	0081800e 	bge	zero,r2,4005748 <_dtoa_r+0x11d4>
 4005148:	b93fffc3 	ldbu	r4,-1(r23)
 400514c:	b8bfffc4 	addi	r2,r23,-1
 4005150:	1007883a 	mov	r3,r2
 4005154:	01800e44 	movi	r6,57
 4005158:	d9c00717 	ldw	r7,28(sp)
 400515c:	00000506 	br	4005174 <_dtoa_r+0xc00>
 4005160:	18ffffc4 	addi	r3,r3,-1
 4005164:	11c12326 	beq	r2,r7,40055f4 <_dtoa_r+0x1080>
 4005168:	19000003 	ldbu	r4,0(r3)
 400516c:	102f883a 	mov	r23,r2
 4005170:	10bfffc4 	addi	r2,r2,-1
 4005174:	21403fcc 	andi	r5,r4,255
 4005178:	2940201c 	xori	r5,r5,128
 400517c:	297fe004 	addi	r5,r5,-128
 4005180:	29bff726 	beq	r5,r6,4005160 <__alt_data_end+0xfc005160>
 4005184:	21000044 	addi	r4,r4,1
 4005188:	11000005 	stb	r4,0(r2)
 400518c:	a80b883a 	mov	r5,r21
 4005190:	e009883a 	mov	r4,fp
 4005194:	4007cb80 	call	4007cb8 <_Bfree>
 4005198:	883ea026 	beq	r17,zero,4004c1c <__alt_data_end+0xfc004c1c>
 400519c:	90000426 	beq	r18,zero,40051b0 <_dtoa_r+0xc3c>
 40051a0:	94400326 	beq	r18,r17,40051b0 <_dtoa_r+0xc3c>
 40051a4:	900b883a 	mov	r5,r18
 40051a8:	e009883a 	mov	r4,fp
 40051ac:	4007cb80 	call	4007cb8 <_Bfree>
 40051b0:	880b883a 	mov	r5,r17
 40051b4:	e009883a 	mov	r4,fp
 40051b8:	4007cb80 	call	4007cb8 <_Bfree>
 40051bc:	003e9706 	br	4004c1c <__alt_data_end+0xfc004c1c>
 40051c0:	01800044 	movi	r6,1
 40051c4:	d9800e15 	stw	r6,56(sp)
 40051c8:	003d9606 	br	4004824 <__alt_data_end+0xfc004824>
 40051cc:	d8800817 	ldw	r2,32(sp)
 40051d0:	d8c00517 	ldw	r3,20(sp)
 40051d4:	d8000d15 	stw	zero,52(sp)
 40051d8:	10c5c83a 	sub	r2,r2,r3
 40051dc:	00c9c83a 	sub	r4,zero,r3
 40051e0:	d8800815 	stw	r2,32(sp)
 40051e4:	d9000a15 	stw	r4,40(sp)
 40051e8:	003d9706 	br	4004848 <__alt_data_end+0xfc004848>
 40051ec:	05adc83a 	sub	r22,zero,r22
 40051f0:	dd800815 	stw	r22,32(sp)
 40051f4:	002d883a 	mov	r22,zero
 40051f8:	003d8e06 	br	4004834 <__alt_data_end+0xfc004834>
 40051fc:	d9000517 	ldw	r4,20(sp)
 4005200:	400e2fc0 	call	400e2fc <__floatsidf>
 4005204:	100d883a 	mov	r6,r2
 4005208:	180f883a 	mov	r7,r3
 400520c:	a009883a 	mov	r4,r20
 4005210:	880b883a 	mov	r5,r17
 4005214:	400d0100 	call	400d010 <__eqdf2>
 4005218:	103d7126 	beq	r2,zero,40047e0 <__alt_data_end+0xfc0047e0>
 400521c:	d9c00517 	ldw	r7,20(sp)
 4005220:	39ffffc4 	addi	r7,r7,-1
 4005224:	d9c00515 	stw	r7,20(sp)
 4005228:	003d6d06 	br	40047e0 <__alt_data_end+0xfc0047e0>
 400522c:	dd400a17 	ldw	r21,40(sp)
 4005230:	dd000817 	ldw	r20,32(sp)
 4005234:	0023883a 	mov	r17,zero
 4005238:	003f4806 	br	4004f5c <__alt_data_end+0xfc004f5c>
 400523c:	10e3c83a 	sub	r17,r2,r3
 4005240:	9448983a 	sll	r4,r18,r17
 4005244:	003d3206 	br	4004710 <__alt_data_end+0xfc004710>
 4005248:	d8000e15 	stw	zero,56(sp)
 400524c:	003d7506 	br	4004824 <__alt_data_end+0xfc004824>
 4005250:	b005883a 	mov	r2,r22
 4005254:	003f4506 	br	4004f6c <__alt_data_end+0xfc004f6c>
 4005258:	dc000915 	stw	r16,36(sp)
 400525c:	d9800a17 	ldw	r6,40(sp)
 4005260:	d9400917 	ldw	r5,36(sp)
 4005264:	e009883a 	mov	r4,fp
 4005268:	40082500 	call	4008250 <__pow5mult>
 400526c:	1021883a 	mov	r16,r2
 4005270:	003f5a06 	br	4004fdc <__alt_data_end+0xfc004fdc>
 4005274:	01c00044 	movi	r7,1
 4005278:	d9c00b15 	stw	r7,44(sp)
 400527c:	d8802217 	ldw	r2,136(sp)
 4005280:	0081280e 	bge	zero,r2,4005724 <_dtoa_r+0x11b0>
 4005284:	100d883a 	mov	r6,r2
 4005288:	1021883a 	mov	r16,r2
 400528c:	d8800c15 	stw	r2,48(sp)
 4005290:	d8800615 	stw	r2,24(sp)
 4005294:	003d8806 	br	40048b8 <__alt_data_end+0xfc0048b8>
 4005298:	d8800617 	ldw	r2,24(sp)
 400529c:	00be9b16 	blt	zero,r2,4004d0c <__alt_data_end+0xfc004d0c>
 40052a0:	10010f1e 	bne	r2,zero,40056e0 <_dtoa_r+0x116c>
 40052a4:	880b883a 	mov	r5,r17
 40052a8:	000d883a 	mov	r6,zero
 40052ac:	01d00534 	movhi	r7,16404
 40052b0:	8009883a 	mov	r4,r16
 40052b4:	400d2680 	call	400d268 <__muldf3>
 40052b8:	900d883a 	mov	r6,r18
 40052bc:	980f883a 	mov	r7,r19
 40052c0:	1009883a 	mov	r4,r2
 40052c4:	180b883a 	mov	r5,r3
 40052c8:	400d0980 	call	400d098 <__gedf2>
 40052cc:	002b883a 	mov	r21,zero
 40052d0:	0023883a 	mov	r17,zero
 40052d4:	1000bf16 	blt	r2,zero,40055d4 <_dtoa_r+0x1060>
 40052d8:	d9802217 	ldw	r6,136(sp)
 40052dc:	ddc00717 	ldw	r23,28(sp)
 40052e0:	018c303a 	nor	r6,zero,r6
 40052e4:	d9800515 	stw	r6,20(sp)
 40052e8:	a80b883a 	mov	r5,r21
 40052ec:	e009883a 	mov	r4,fp
 40052f0:	4007cb80 	call	4007cb8 <_Bfree>
 40052f4:	883e4926 	beq	r17,zero,4004c1c <__alt_data_end+0xfc004c1c>
 40052f8:	003fad06 	br	40051b0 <__alt_data_end+0xfc0051b0>
 40052fc:	d9c01117 	ldw	r7,68(sp)
 4005300:	3801bc26 	beq	r7,zero,40059f4 <_dtoa_r+0x1480>
 4005304:	10810cc4 	addi	r2,r2,1075
 4005308:	dd400a17 	ldw	r21,40(sp)
 400530c:	dd000817 	ldw	r20,32(sp)
 4005310:	003f0a06 	br	4004f3c <__alt_data_end+0xfc004f3c>
 4005314:	00800704 	movi	r2,28
 4005318:	d9000817 	ldw	r4,32(sp)
 400531c:	a0a9883a 	add	r20,r20,r2
 4005320:	b0ad883a 	add	r22,r22,r2
 4005324:	2089883a 	add	r4,r4,r2
 4005328:	d9000815 	stw	r4,32(sp)
 400532c:	003f5106 	br	4005074 <__alt_data_end+0xfc005074>
 4005330:	d8c00317 	ldw	r3,12(sp)
 4005334:	b8c1fc0e 	bge	r23,r3,4005b28 <_dtoa_r+0x15b4>
 4005338:	0027883a 	mov	r19,zero
 400533c:	b805883a 	mov	r2,r23
 4005340:	003f3e06 	br	400503c <__alt_data_end+0xfc00503c>
 4005344:	880b883a 	mov	r5,r17
 4005348:	e009883a 	mov	r4,fp
 400534c:	000f883a 	mov	r7,zero
 4005350:	01800284 	movi	r6,10
 4005354:	4007ce00 	call	4007ce0 <__multadd>
 4005358:	d9000c17 	ldw	r4,48(sp)
 400535c:	1023883a 	mov	r17,r2
 4005360:	0102040e 	bge	zero,r4,4005b74 <_dtoa_r+0x1600>
 4005364:	d9000615 	stw	r4,24(sp)
 4005368:	0500050e 	bge	zero,r20,4005380 <_dtoa_r+0xe0c>
 400536c:	880b883a 	mov	r5,r17
 4005370:	a00d883a 	mov	r6,r20
 4005374:	e009883a 	mov	r4,fp
 4005378:	40083900 	call	4008390 <__lshift>
 400537c:	1023883a 	mov	r17,r2
 4005380:	9801241e 	bne	r19,zero,4005814 <_dtoa_r+0x12a0>
 4005384:	8829883a 	mov	r20,r17
 4005388:	d9000617 	ldw	r4,24(sp)
 400538c:	dcc00717 	ldw	r19,28(sp)
 4005390:	9480004c 	andi	r18,r18,1
 4005394:	20bfffc4 	addi	r2,r4,-1
 4005398:	9885883a 	add	r2,r19,r2
 400539c:	d8800415 	stw	r2,16(sp)
 40053a0:	dc800615 	stw	r18,24(sp)
 40053a4:	a80b883a 	mov	r5,r21
 40053a8:	8009883a 	mov	r4,r16
 40053ac:	40043740 	call	4004374 <quorem>
 40053b0:	880b883a 	mov	r5,r17
 40053b4:	8009883a 	mov	r4,r16
 40053b8:	102f883a 	mov	r23,r2
 40053bc:	40084d80 	call	40084d8 <__mcmp>
 40053c0:	a80b883a 	mov	r5,r21
 40053c4:	a00d883a 	mov	r6,r20
 40053c8:	e009883a 	mov	r4,fp
 40053cc:	102d883a 	mov	r22,r2
 40053d0:	40085380 	call	4008538 <__mdiff>
 40053d4:	1007883a 	mov	r3,r2
 40053d8:	10800317 	ldw	r2,12(r2)
 40053dc:	bc800c04 	addi	r18,r23,48
 40053e0:	180b883a 	mov	r5,r3
 40053e4:	10004e1e 	bne	r2,zero,4005520 <_dtoa_r+0xfac>
 40053e8:	8009883a 	mov	r4,r16
 40053ec:	d8c01615 	stw	r3,88(sp)
 40053f0:	40084d80 	call	40084d8 <__mcmp>
 40053f4:	d8c01617 	ldw	r3,88(sp)
 40053f8:	e009883a 	mov	r4,fp
 40053fc:	d8801615 	stw	r2,88(sp)
 4005400:	180b883a 	mov	r5,r3
 4005404:	4007cb80 	call	4007cb8 <_Bfree>
 4005408:	d8801617 	ldw	r2,88(sp)
 400540c:	1000041e 	bne	r2,zero,4005420 <_dtoa_r+0xeac>
 4005410:	d9800317 	ldw	r6,12(sp)
 4005414:	3000021e 	bne	r6,zero,4005420 <_dtoa_r+0xeac>
 4005418:	d8c00617 	ldw	r3,24(sp)
 400541c:	18003726 	beq	r3,zero,40054fc <_dtoa_r+0xf88>
 4005420:	b0002016 	blt	r22,zero,40054a4 <_dtoa_r+0xf30>
 4005424:	b000041e 	bne	r22,zero,4005438 <_dtoa_r+0xec4>
 4005428:	d9000317 	ldw	r4,12(sp)
 400542c:	2000021e 	bne	r4,zero,4005438 <_dtoa_r+0xec4>
 4005430:	d8c00617 	ldw	r3,24(sp)
 4005434:	18001b26 	beq	r3,zero,40054a4 <_dtoa_r+0xf30>
 4005438:	00810716 	blt	zero,r2,4005858 <_dtoa_r+0x12e4>
 400543c:	d8c00417 	ldw	r3,16(sp)
 4005440:	9d800044 	addi	r22,r19,1
 4005444:	9c800005 	stb	r18,0(r19)
 4005448:	b02f883a 	mov	r23,r22
 400544c:	98c10626 	beq	r19,r3,4005868 <_dtoa_r+0x12f4>
 4005450:	800b883a 	mov	r5,r16
 4005454:	000f883a 	mov	r7,zero
 4005458:	01800284 	movi	r6,10
 400545c:	e009883a 	mov	r4,fp
 4005460:	4007ce00 	call	4007ce0 <__multadd>
 4005464:	1021883a 	mov	r16,r2
 4005468:	000f883a 	mov	r7,zero
 400546c:	01800284 	movi	r6,10
 4005470:	880b883a 	mov	r5,r17
 4005474:	e009883a 	mov	r4,fp
 4005478:	8d002526 	beq	r17,r20,4005510 <_dtoa_r+0xf9c>
 400547c:	4007ce00 	call	4007ce0 <__multadd>
 4005480:	a00b883a 	mov	r5,r20
 4005484:	000f883a 	mov	r7,zero
 4005488:	01800284 	movi	r6,10
 400548c:	e009883a 	mov	r4,fp
 4005490:	1023883a 	mov	r17,r2
 4005494:	4007ce00 	call	4007ce0 <__multadd>
 4005498:	1029883a 	mov	r20,r2
 400549c:	b027883a 	mov	r19,r22
 40054a0:	003fc006 	br	40053a4 <__alt_data_end+0xfc0053a4>
 40054a4:	9011883a 	mov	r8,r18
 40054a8:	00800e0e 	bge	zero,r2,40054e4 <_dtoa_r+0xf70>
 40054ac:	800b883a 	mov	r5,r16
 40054b0:	01800044 	movi	r6,1
 40054b4:	e009883a 	mov	r4,fp
 40054b8:	da001715 	stw	r8,92(sp)
 40054bc:	40083900 	call	4008390 <__lshift>
 40054c0:	a80b883a 	mov	r5,r21
 40054c4:	1009883a 	mov	r4,r2
 40054c8:	1021883a 	mov	r16,r2
 40054cc:	40084d80 	call	40084d8 <__mcmp>
 40054d0:	da001717 	ldw	r8,92(sp)
 40054d4:	0081960e 	bge	zero,r2,4005b30 <_dtoa_r+0x15bc>
 40054d8:	00800e44 	movi	r2,57
 40054dc:	40817026 	beq	r8,r2,4005aa0 <_dtoa_r+0x152c>
 40054e0:	ba000c44 	addi	r8,r23,49
 40054e4:	8825883a 	mov	r18,r17
 40054e8:	9dc00044 	addi	r23,r19,1
 40054ec:	9a000005 	stb	r8,0(r19)
 40054f0:	a023883a 	mov	r17,r20
 40054f4:	dc000915 	stw	r16,36(sp)
 40054f8:	003f2406 	br	400518c <__alt_data_end+0xfc00518c>
 40054fc:	00800e44 	movi	r2,57
 4005500:	9011883a 	mov	r8,r18
 4005504:	90816626 	beq	r18,r2,4005aa0 <_dtoa_r+0x152c>
 4005508:	05bff516 	blt	zero,r22,40054e0 <__alt_data_end+0xfc0054e0>
 400550c:	003ff506 	br	40054e4 <__alt_data_end+0xfc0054e4>
 4005510:	4007ce00 	call	4007ce0 <__multadd>
 4005514:	1023883a 	mov	r17,r2
 4005518:	1029883a 	mov	r20,r2
 400551c:	003fdf06 	br	400549c <__alt_data_end+0xfc00549c>
 4005520:	e009883a 	mov	r4,fp
 4005524:	4007cb80 	call	4007cb8 <_Bfree>
 4005528:	00800044 	movi	r2,1
 400552c:	003fbc06 	br	4005420 <__alt_data_end+0xfc005420>
 4005530:	a80b883a 	mov	r5,r21
 4005534:	8009883a 	mov	r4,r16
 4005538:	40084d80 	call	40084d8 <__mcmp>
 400553c:	103edb0e 	bge	r2,zero,40050ac <__alt_data_end+0xfc0050ac>
 4005540:	800b883a 	mov	r5,r16
 4005544:	000f883a 	mov	r7,zero
 4005548:	01800284 	movi	r6,10
 400554c:	e009883a 	mov	r4,fp
 4005550:	4007ce00 	call	4007ce0 <__multadd>
 4005554:	1021883a 	mov	r16,r2
 4005558:	d8800517 	ldw	r2,20(sp)
 400555c:	d8c00b17 	ldw	r3,44(sp)
 4005560:	10bfffc4 	addi	r2,r2,-1
 4005564:	d8800515 	stw	r2,20(sp)
 4005568:	183f761e 	bne	r3,zero,4005344 <__alt_data_end+0xfc005344>
 400556c:	d9000c17 	ldw	r4,48(sp)
 4005570:	0101730e 	bge	zero,r4,4005b40 <_dtoa_r+0x15cc>
 4005574:	d9000615 	stw	r4,24(sp)
 4005578:	003ed006 	br	40050bc <__alt_data_end+0xfc0050bc>
 400557c:	00800084 	movi	r2,2
 4005580:	3081861e 	bne	r6,r2,4005b9c <_dtoa_r+0x1628>
 4005584:	d8000b15 	stw	zero,44(sp)
 4005588:	003f3c06 	br	400527c <__alt_data_end+0xfc00527c>
 400558c:	dc000917 	ldw	r16,36(sp)
 4005590:	003e9206 	br	4004fdc <__alt_data_end+0xfc004fdc>
 4005594:	d9c00317 	ldw	r7,12(sp)
 4005598:	00800084 	movi	r2,2
 400559c:	11fec50e 	bge	r2,r7,40050b4 <__alt_data_end+0xfc0050b4>
 40055a0:	d9000617 	ldw	r4,24(sp)
 40055a4:	20013c1e 	bne	r4,zero,4005a98 <_dtoa_r+0x1524>
 40055a8:	a80b883a 	mov	r5,r21
 40055ac:	000f883a 	mov	r7,zero
 40055b0:	01800144 	movi	r6,5
 40055b4:	e009883a 	mov	r4,fp
 40055b8:	4007ce00 	call	4007ce0 <__multadd>
 40055bc:	100b883a 	mov	r5,r2
 40055c0:	8009883a 	mov	r4,r16
 40055c4:	102b883a 	mov	r21,r2
 40055c8:	40084d80 	call	40084d8 <__mcmp>
 40055cc:	dc000915 	stw	r16,36(sp)
 40055d0:	00bf410e 	bge	zero,r2,40052d8 <__alt_data_end+0xfc0052d8>
 40055d4:	d9c00717 	ldw	r7,28(sp)
 40055d8:	00800c44 	movi	r2,49
 40055dc:	38800005 	stb	r2,0(r7)
 40055e0:	d8800517 	ldw	r2,20(sp)
 40055e4:	3dc00044 	addi	r23,r7,1
 40055e8:	10800044 	addi	r2,r2,1
 40055ec:	d8800515 	stw	r2,20(sp)
 40055f0:	003f3d06 	br	40052e8 <__alt_data_end+0xfc0052e8>
 40055f4:	d9800517 	ldw	r6,20(sp)
 40055f8:	d9c00717 	ldw	r7,28(sp)
 40055fc:	00800c44 	movi	r2,49
 4005600:	31800044 	addi	r6,r6,1
 4005604:	d9800515 	stw	r6,20(sp)
 4005608:	38800005 	stb	r2,0(r7)
 400560c:	003edf06 	br	400518c <__alt_data_end+0xfc00518c>
 4005610:	d8000b15 	stw	zero,44(sp)
 4005614:	003c9f06 	br	4004894 <__alt_data_end+0xfc004894>
 4005618:	903e7e1e 	bne	r18,zero,4005014 <__alt_data_end+0xfc005014>
 400561c:	00800434 	movhi	r2,16
 4005620:	10bfffc4 	addi	r2,r2,-1
 4005624:	9884703a 	and	r2,r19,r2
 4005628:	1000ea1e 	bne	r2,zero,40059d4 <_dtoa_r+0x1460>
 400562c:	9cdffc2c 	andhi	r19,r19,32752
 4005630:	9800e826 	beq	r19,zero,40059d4 <_dtoa_r+0x1460>
 4005634:	d9c00817 	ldw	r7,32(sp)
 4005638:	b5800044 	addi	r22,r22,1
 400563c:	04c00044 	movi	r19,1
 4005640:	39c00044 	addi	r7,r7,1
 4005644:	d9c00815 	stw	r7,32(sp)
 4005648:	d8800d17 	ldw	r2,52(sp)
 400564c:	103e721e 	bne	r2,zero,4005018 <__alt_data_end+0xfc005018>
 4005650:	00800044 	movi	r2,1
 4005654:	003e7906 	br	400503c <__alt_data_end+0xfc00503c>
 4005658:	8009883a 	mov	r4,r16
 400565c:	400e2fc0 	call	400e2fc <__floatsidf>
 4005660:	d9800f17 	ldw	r6,60(sp)
 4005664:	d9c01017 	ldw	r7,64(sp)
 4005668:	1009883a 	mov	r4,r2
 400566c:	180b883a 	mov	r5,r3
 4005670:	400d2680 	call	400d268 <__muldf3>
 4005674:	000d883a 	mov	r6,zero
 4005678:	01d00734 	movhi	r7,16412
 400567c:	1009883a 	mov	r4,r2
 4005680:	180b883a 	mov	r5,r3
 4005684:	400be7c0 	call	400be7c <__adddf3>
 4005688:	047f3034 	movhi	r17,64704
 400568c:	1021883a 	mov	r16,r2
 4005690:	1c63883a 	add	r17,r3,r17
 4005694:	d9000f17 	ldw	r4,60(sp)
 4005698:	d9401017 	ldw	r5,64(sp)
 400569c:	000d883a 	mov	r6,zero
 40056a0:	01d00534 	movhi	r7,16404
 40056a4:	400d9800 	call	400d980 <__subdf3>
 40056a8:	800d883a 	mov	r6,r16
 40056ac:	880f883a 	mov	r7,r17
 40056b0:	1009883a 	mov	r4,r2
 40056b4:	180b883a 	mov	r5,r3
 40056b8:	102b883a 	mov	r21,r2
 40056bc:	1829883a 	mov	r20,r3
 40056c0:	400d0980 	call	400d098 <__gedf2>
 40056c4:	00806c16 	blt	zero,r2,4005878 <_dtoa_r+0x1304>
 40056c8:	89e0003c 	xorhi	r7,r17,32768
 40056cc:	800d883a 	mov	r6,r16
 40056d0:	a809883a 	mov	r4,r21
 40056d4:	a00b883a 	mov	r5,r20
 40056d8:	400d1740 	call	400d174 <__ledf2>
 40056dc:	103d7e0e 	bge	r2,zero,4004cd8 <__alt_data_end+0xfc004cd8>
 40056e0:	002b883a 	mov	r21,zero
 40056e4:	0023883a 	mov	r17,zero
 40056e8:	003efb06 	br	40052d8 <__alt_data_end+0xfc0052d8>
 40056ec:	d8800717 	ldw	r2,28(sp)
 40056f0:	003bd006 	br	4004634 <__alt_data_end+0xfc004634>
 40056f4:	d9000a17 	ldw	r4,40(sp)
 40056f8:	d9800d17 	ldw	r6,52(sp)
 40056fc:	dd400a15 	stw	r21,40(sp)
 4005700:	a905c83a 	sub	r2,r21,r4
 4005704:	308d883a 	add	r6,r6,r2
 4005708:	d9800d15 	stw	r6,52(sp)
 400570c:	002b883a 	mov	r21,zero
 4005710:	003e0606 	br	4004f2c <__alt_data_end+0xfc004f2c>
 4005714:	9023883a 	mov	r17,r18
 4005718:	9829883a 	mov	r20,r19
 400571c:	04000084 	movi	r16,2
 4005720:	003c9206 	br	400496c <__alt_data_end+0xfc00496c>
 4005724:	04000044 	movi	r16,1
 4005728:	dc000c15 	stw	r16,48(sp)
 400572c:	dc000615 	stw	r16,24(sp)
 4005730:	dc002215 	stw	r16,136(sp)
 4005734:	e0001115 	stw	zero,68(fp)
 4005738:	000b883a 	mov	r5,zero
 400573c:	003c6906 	br	40048e4 <__alt_data_end+0xfc0048e4>
 4005740:	3021883a 	mov	r16,r6
 4005744:	003ffb06 	br	4005734 <__alt_data_end+0xfc005734>
 4005748:	1000021e 	bne	r2,zero,4005754 <_dtoa_r+0x11e0>
 400574c:	4200004c 	andi	r8,r8,1
 4005750:	403e7d1e 	bne	r8,zero,4005148 <__alt_data_end+0xfc005148>
 4005754:	01000c04 	movi	r4,48
 4005758:	00000106 	br	4005760 <_dtoa_r+0x11ec>
 400575c:	102f883a 	mov	r23,r2
 4005760:	b8bfffc4 	addi	r2,r23,-1
 4005764:	10c00007 	ldb	r3,0(r2)
 4005768:	193ffc26 	beq	r3,r4,400575c <__alt_data_end+0xfc00575c>
 400576c:	003e8706 	br	400518c <__alt_data_end+0xfc00518c>
 4005770:	d8800517 	ldw	r2,20(sp)
 4005774:	00a3c83a 	sub	r17,zero,r2
 4005778:	8800a426 	beq	r17,zero,4005a0c <_dtoa_r+0x1498>
 400577c:	888003cc 	andi	r2,r17,15
 4005780:	100490fa 	slli	r2,r2,3
 4005784:	00c100f4 	movhi	r3,1027
 4005788:	18c56b04 	addi	r3,r3,5548
 400578c:	1885883a 	add	r2,r3,r2
 4005790:	11800017 	ldw	r6,0(r2)
 4005794:	11c00117 	ldw	r7,4(r2)
 4005798:	9009883a 	mov	r4,r18
 400579c:	980b883a 	mov	r5,r19
 40057a0:	8823d13a 	srai	r17,r17,4
 40057a4:	400d2680 	call	400d268 <__muldf3>
 40057a8:	d8800f15 	stw	r2,60(sp)
 40057ac:	d8c01015 	stw	r3,64(sp)
 40057b0:	8800e826 	beq	r17,zero,4005b54 <_dtoa_r+0x15e0>
 40057b4:	050100f4 	movhi	r20,1027
 40057b8:	a5056104 	addi	r20,r20,5508
 40057bc:	04000084 	movi	r16,2
 40057c0:	8980004c 	andi	r6,r17,1
 40057c4:	1009883a 	mov	r4,r2
 40057c8:	8823d07a 	srai	r17,r17,1
 40057cc:	180b883a 	mov	r5,r3
 40057d0:	30000426 	beq	r6,zero,40057e4 <_dtoa_r+0x1270>
 40057d4:	a1800017 	ldw	r6,0(r20)
 40057d8:	a1c00117 	ldw	r7,4(r20)
 40057dc:	84000044 	addi	r16,r16,1
 40057e0:	400d2680 	call	400d268 <__muldf3>
 40057e4:	a5000204 	addi	r20,r20,8
 40057e8:	883ff51e 	bne	r17,zero,40057c0 <__alt_data_end+0xfc0057c0>
 40057ec:	d8800f15 	stw	r2,60(sp)
 40057f0:	d8c01015 	stw	r3,64(sp)
 40057f4:	003c7606 	br	40049d0 <__alt_data_end+0xfc0049d0>
 40057f8:	00c00c04 	movi	r3,48
 40057fc:	10c00005 	stb	r3,0(r2)
 4005800:	d8c00517 	ldw	r3,20(sp)
 4005804:	bd3fffc3 	ldbu	r20,-1(r23)
 4005808:	18c00044 	addi	r3,r3,1
 400580c:	d8c00515 	stw	r3,20(sp)
 4005810:	003db906 	br	4004ef8 <__alt_data_end+0xfc004ef8>
 4005814:	89400117 	ldw	r5,4(r17)
 4005818:	e009883a 	mov	r4,fp
 400581c:	4007c100 	call	4007c10 <_Balloc>
 4005820:	89800417 	ldw	r6,16(r17)
 4005824:	89400304 	addi	r5,r17,12
 4005828:	11000304 	addi	r4,r2,12
 400582c:	31800084 	addi	r6,r6,2
 4005830:	318d883a 	add	r6,r6,r6
 4005834:	318d883a 	add	r6,r6,r6
 4005838:	1027883a 	mov	r19,r2
 400583c:	40078440 	call	4007844 <memcpy>
 4005840:	01800044 	movi	r6,1
 4005844:	980b883a 	mov	r5,r19
 4005848:	e009883a 	mov	r4,fp
 400584c:	40083900 	call	4008390 <__lshift>
 4005850:	1029883a 	mov	r20,r2
 4005854:	003ecc06 	br	4005388 <__alt_data_end+0xfc005388>
 4005858:	00800e44 	movi	r2,57
 400585c:	90809026 	beq	r18,r2,4005aa0 <_dtoa_r+0x152c>
 4005860:	92000044 	addi	r8,r18,1
 4005864:	003f1f06 	br	40054e4 <__alt_data_end+0xfc0054e4>
 4005868:	9011883a 	mov	r8,r18
 400586c:	8825883a 	mov	r18,r17
 4005870:	a023883a 	mov	r17,r20
 4005874:	003e2906 	br	400511c <__alt_data_end+0xfc00511c>
 4005878:	002b883a 	mov	r21,zero
 400587c:	0023883a 	mov	r17,zero
 4005880:	003f5406 	br	40055d4 <__alt_data_end+0xfc0055d4>
 4005884:	61bfffc4 	addi	r6,r12,-1
 4005888:	300490fa 	slli	r2,r6,3
 400588c:	00c100f4 	movhi	r3,1027
 4005890:	18c56b04 	addi	r3,r3,5548
 4005894:	1885883a 	add	r2,r3,r2
 4005898:	11000017 	ldw	r4,0(r2)
 400589c:	11400117 	ldw	r5,4(r2)
 40058a0:	d8800717 	ldw	r2,28(sp)
 40058a4:	880f883a 	mov	r7,r17
 40058a8:	d9801215 	stw	r6,72(sp)
 40058ac:	800d883a 	mov	r6,r16
 40058b0:	db001615 	stw	r12,88(sp)
 40058b4:	15c00044 	addi	r23,r2,1
 40058b8:	400d2680 	call	400d268 <__muldf3>
 40058bc:	d9401017 	ldw	r5,64(sp)
 40058c0:	d9000f17 	ldw	r4,60(sp)
 40058c4:	d8c01515 	stw	r3,84(sp)
 40058c8:	d8801415 	stw	r2,80(sp)
 40058cc:	400e27c0 	call	400e27c <__fixdfsi>
 40058d0:	1009883a 	mov	r4,r2
 40058d4:	1021883a 	mov	r16,r2
 40058d8:	400e2fc0 	call	400e2fc <__floatsidf>
 40058dc:	d9000f17 	ldw	r4,60(sp)
 40058e0:	d9401017 	ldw	r5,64(sp)
 40058e4:	100d883a 	mov	r6,r2
 40058e8:	180f883a 	mov	r7,r3
 40058ec:	400d9800 	call	400d980 <__subdf3>
 40058f0:	1829883a 	mov	r20,r3
 40058f4:	d8c00717 	ldw	r3,28(sp)
 40058f8:	84000c04 	addi	r16,r16,48
 40058fc:	1023883a 	mov	r17,r2
 4005900:	1c000005 	stb	r16,0(r3)
 4005904:	db001617 	ldw	r12,88(sp)
 4005908:	00800044 	movi	r2,1
 400590c:	60802226 	beq	r12,r2,4005998 <_dtoa_r+0x1424>
 4005910:	d9c00717 	ldw	r7,28(sp)
 4005914:	8805883a 	mov	r2,r17
 4005918:	b82b883a 	mov	r21,r23
 400591c:	3b19883a 	add	r12,r7,r12
 4005920:	6023883a 	mov	r17,r12
 4005924:	a007883a 	mov	r3,r20
 4005928:	dc800f15 	stw	r18,60(sp)
 400592c:	000d883a 	mov	r6,zero
 4005930:	01d00934 	movhi	r7,16420
 4005934:	1009883a 	mov	r4,r2
 4005938:	180b883a 	mov	r5,r3
 400593c:	400d2680 	call	400d268 <__muldf3>
 4005940:	180b883a 	mov	r5,r3
 4005944:	1009883a 	mov	r4,r2
 4005948:	1829883a 	mov	r20,r3
 400594c:	1025883a 	mov	r18,r2
 4005950:	400e27c0 	call	400e27c <__fixdfsi>
 4005954:	1009883a 	mov	r4,r2
 4005958:	1021883a 	mov	r16,r2
 400595c:	400e2fc0 	call	400e2fc <__floatsidf>
 4005960:	100d883a 	mov	r6,r2
 4005964:	180f883a 	mov	r7,r3
 4005968:	9009883a 	mov	r4,r18
 400596c:	a00b883a 	mov	r5,r20
 4005970:	84000c04 	addi	r16,r16,48
 4005974:	400d9800 	call	400d980 <__subdf3>
 4005978:	ad400044 	addi	r21,r21,1
 400597c:	ac3fffc5 	stb	r16,-1(r21)
 4005980:	ac7fea1e 	bne	r21,r17,400592c <__alt_data_end+0xfc00592c>
 4005984:	1023883a 	mov	r17,r2
 4005988:	d8801217 	ldw	r2,72(sp)
 400598c:	dc800f17 	ldw	r18,60(sp)
 4005990:	1829883a 	mov	r20,r3
 4005994:	b8af883a 	add	r23,r23,r2
 4005998:	d9001417 	ldw	r4,80(sp)
 400599c:	d9401517 	ldw	r5,84(sp)
 40059a0:	000d883a 	mov	r6,zero
 40059a4:	01cff834 	movhi	r7,16352
 40059a8:	400be7c0 	call	400be7c <__adddf3>
 40059ac:	880d883a 	mov	r6,r17
 40059b0:	a00f883a 	mov	r7,r20
 40059b4:	1009883a 	mov	r4,r2
 40059b8:	180b883a 	mov	r5,r3
 40059bc:	400d1740 	call	400d174 <__ledf2>
 40059c0:	10003e0e 	bge	r2,zero,4005abc <_dtoa_r+0x1548>
 40059c4:	d9001317 	ldw	r4,76(sp)
 40059c8:	bd3fffc3 	ldbu	r20,-1(r23)
 40059cc:	d9000515 	stw	r4,20(sp)
 40059d0:	003d3b06 	br	4004ec0 <__alt_data_end+0xfc004ec0>
 40059d4:	0027883a 	mov	r19,zero
 40059d8:	003f1b06 	br	4005648 <__alt_data_end+0xfc005648>
 40059dc:	d8800817 	ldw	r2,32(sp)
 40059e0:	11e9c83a 	sub	r20,r2,r7
 40059e4:	0005883a 	mov	r2,zero
 40059e8:	003d5406 	br	4004f3c <__alt_data_end+0xfc004f3c>
 40059ec:	00800044 	movi	r2,1
 40059f0:	003dc706 	br	4005110 <__alt_data_end+0xfc005110>
 40059f4:	d8c00217 	ldw	r3,8(sp)
 40059f8:	00800d84 	movi	r2,54
 40059fc:	dd400a17 	ldw	r21,40(sp)
 4005a00:	10c5c83a 	sub	r2,r2,r3
 4005a04:	dd000817 	ldw	r20,32(sp)
 4005a08:	003d4c06 	br	4004f3c <__alt_data_end+0xfc004f3c>
 4005a0c:	dc800f15 	stw	r18,60(sp)
 4005a10:	dcc01015 	stw	r19,64(sp)
 4005a14:	04000084 	movi	r16,2
 4005a18:	003bed06 	br	40049d0 <__alt_data_end+0xfc0049d0>
 4005a1c:	d9000617 	ldw	r4,24(sp)
 4005a20:	203f0d26 	beq	r4,zero,4005658 <__alt_data_end+0xfc005658>
 4005a24:	d9800c17 	ldw	r6,48(sp)
 4005a28:	01bcab0e 	bge	zero,r6,4004cd8 <__alt_data_end+0xfc004cd8>
 4005a2c:	d9401017 	ldw	r5,64(sp)
 4005a30:	d9000f17 	ldw	r4,60(sp)
 4005a34:	000d883a 	mov	r6,zero
 4005a38:	01d00934 	movhi	r7,16420
 4005a3c:	400d2680 	call	400d268 <__muldf3>
 4005a40:	81000044 	addi	r4,r16,1
 4005a44:	d8800f15 	stw	r2,60(sp)
 4005a48:	d8c01015 	stw	r3,64(sp)
 4005a4c:	400e2fc0 	call	400e2fc <__floatsidf>
 4005a50:	d9800f17 	ldw	r6,60(sp)
 4005a54:	d9c01017 	ldw	r7,64(sp)
 4005a58:	1009883a 	mov	r4,r2
 4005a5c:	180b883a 	mov	r5,r3
 4005a60:	400d2680 	call	400d268 <__muldf3>
 4005a64:	01d00734 	movhi	r7,16412
 4005a68:	000d883a 	mov	r6,zero
 4005a6c:	1009883a 	mov	r4,r2
 4005a70:	180b883a 	mov	r5,r3
 4005a74:	400be7c0 	call	400be7c <__adddf3>
 4005a78:	d9c00517 	ldw	r7,20(sp)
 4005a7c:	047f3034 	movhi	r17,64704
 4005a80:	1021883a 	mov	r16,r2
 4005a84:	39ffffc4 	addi	r7,r7,-1
 4005a88:	d9c01315 	stw	r7,76(sp)
 4005a8c:	1c63883a 	add	r17,r3,r17
 4005a90:	db000c17 	ldw	r12,48(sp)
 4005a94:	003bea06 	br	4004a40 <__alt_data_end+0xfc004a40>
 4005a98:	dc000915 	stw	r16,36(sp)
 4005a9c:	003e0e06 	br	40052d8 <__alt_data_end+0xfc0052d8>
 4005aa0:	01000e44 	movi	r4,57
 4005aa4:	8825883a 	mov	r18,r17
 4005aa8:	9dc00044 	addi	r23,r19,1
 4005aac:	99000005 	stb	r4,0(r19)
 4005ab0:	a023883a 	mov	r17,r20
 4005ab4:	dc000915 	stw	r16,36(sp)
 4005ab8:	003da406 	br	400514c <__alt_data_end+0xfc00514c>
 4005abc:	d9801417 	ldw	r6,80(sp)
 4005ac0:	d9c01517 	ldw	r7,84(sp)
 4005ac4:	0009883a 	mov	r4,zero
 4005ac8:	014ff834 	movhi	r5,16352
 4005acc:	400d9800 	call	400d980 <__subdf3>
 4005ad0:	880d883a 	mov	r6,r17
 4005ad4:	a00f883a 	mov	r7,r20
 4005ad8:	1009883a 	mov	r4,r2
 4005adc:	180b883a 	mov	r5,r3
 4005ae0:	400d0980 	call	400d098 <__gedf2>
 4005ae4:	00bc7c0e 	bge	zero,r2,4004cd8 <__alt_data_end+0xfc004cd8>
 4005ae8:	01000c04 	movi	r4,48
 4005aec:	00000106 	br	4005af4 <_dtoa_r+0x1580>
 4005af0:	102f883a 	mov	r23,r2
 4005af4:	b8bfffc4 	addi	r2,r23,-1
 4005af8:	10c00007 	ldb	r3,0(r2)
 4005afc:	193ffc26 	beq	r3,r4,4005af0 <__alt_data_end+0xfc005af0>
 4005b00:	d9801317 	ldw	r6,76(sp)
 4005b04:	d9800515 	stw	r6,20(sp)
 4005b08:	003c4406 	br	4004c1c <__alt_data_end+0xfc004c1c>
 4005b0c:	d9801317 	ldw	r6,76(sp)
 4005b10:	d9800515 	stw	r6,20(sp)
 4005b14:	003cea06 	br	4004ec0 <__alt_data_end+0xfc004ec0>
 4005b18:	dd800f17 	ldw	r22,60(sp)
 4005b1c:	dcc01017 	ldw	r19,64(sp)
 4005b20:	dc801217 	ldw	r18,72(sp)
 4005b24:	003c6c06 	br	4004cd8 <__alt_data_end+0xfc004cd8>
 4005b28:	903e031e 	bne	r18,zero,4005338 <__alt_data_end+0xfc005338>
 4005b2c:	003ebb06 	br	400561c <__alt_data_end+0xfc00561c>
 4005b30:	103e6c1e 	bne	r2,zero,40054e4 <__alt_data_end+0xfc0054e4>
 4005b34:	4080004c 	andi	r2,r8,1
 4005b38:	103e6a26 	beq	r2,zero,40054e4 <__alt_data_end+0xfc0054e4>
 4005b3c:	003e6606 	br	40054d8 <__alt_data_end+0xfc0054d8>
 4005b40:	d8c00317 	ldw	r3,12(sp)
 4005b44:	00800084 	movi	r2,2
 4005b48:	10c02916 	blt	r2,r3,4005bf0 <_dtoa_r+0x167c>
 4005b4c:	d9000c17 	ldw	r4,48(sp)
 4005b50:	003e8806 	br	4005574 <__alt_data_end+0xfc005574>
 4005b54:	04000084 	movi	r16,2
 4005b58:	003b9d06 	br	40049d0 <__alt_data_end+0xfc0049d0>
 4005b5c:	d9001317 	ldw	r4,76(sp)
 4005b60:	d9000515 	stw	r4,20(sp)
 4005b64:	003cd606 	br	4004ec0 <__alt_data_end+0xfc004ec0>
 4005b68:	d8801317 	ldw	r2,76(sp)
 4005b6c:	d8800515 	stw	r2,20(sp)
 4005b70:	003c2a06 	br	4004c1c <__alt_data_end+0xfc004c1c>
 4005b74:	d9800317 	ldw	r6,12(sp)
 4005b78:	00800084 	movi	r2,2
 4005b7c:	11801516 	blt	r2,r6,4005bd4 <_dtoa_r+0x1660>
 4005b80:	d9c00c17 	ldw	r7,48(sp)
 4005b84:	d9c00615 	stw	r7,24(sp)
 4005b88:	003df706 	br	4005368 <__alt_data_end+0xfc005368>
 4005b8c:	193d3926 	beq	r3,r4,4005074 <__alt_data_end+0xfc005074>
 4005b90:	00c00f04 	movi	r3,60
 4005b94:	1885c83a 	sub	r2,r3,r2
 4005b98:	003ddf06 	br	4005318 <__alt_data_end+0xfc005318>
 4005b9c:	e009883a 	mov	r4,fp
 4005ba0:	e0001115 	stw	zero,68(fp)
 4005ba4:	000b883a 	mov	r5,zero
 4005ba8:	4007c100 	call	4007c10 <_Balloc>
 4005bac:	d8800715 	stw	r2,28(sp)
 4005bb0:	d8c00717 	ldw	r3,28(sp)
 4005bb4:	00bfffc4 	movi	r2,-1
 4005bb8:	01000044 	movi	r4,1
 4005bbc:	d8800c15 	stw	r2,48(sp)
 4005bc0:	e0c01015 	stw	r3,64(fp)
 4005bc4:	d9000b15 	stw	r4,44(sp)
 4005bc8:	d8800615 	stw	r2,24(sp)
 4005bcc:	d8002215 	stw	zero,136(sp)
 4005bd0:	003c4106 	br	4004cd8 <__alt_data_end+0xfc004cd8>
 4005bd4:	d8c00c17 	ldw	r3,48(sp)
 4005bd8:	d8c00615 	stw	r3,24(sp)
 4005bdc:	003e7006 	br	40055a0 <__alt_data_end+0xfc0055a0>
 4005be0:	04400044 	movi	r17,1
 4005be4:	003b2006 	br	4004868 <__alt_data_end+0xfc004868>
 4005be8:	000b883a 	mov	r5,zero
 4005bec:	003b3d06 	br	40048e4 <__alt_data_end+0xfc0048e4>
 4005bf0:	d8800c17 	ldw	r2,48(sp)
 4005bf4:	d8800615 	stw	r2,24(sp)
 4005bf8:	003e6906 	br	40055a0 <__alt_data_end+0xfc0055a0>

04005bfc <__sflush_r>:
 4005bfc:	2880030b 	ldhu	r2,12(r5)
 4005c00:	defffb04 	addi	sp,sp,-20
 4005c04:	dcc00315 	stw	r19,12(sp)
 4005c08:	dc400115 	stw	r17,4(sp)
 4005c0c:	dfc00415 	stw	ra,16(sp)
 4005c10:	dc800215 	stw	r18,8(sp)
 4005c14:	dc000015 	stw	r16,0(sp)
 4005c18:	10c0020c 	andi	r3,r2,8
 4005c1c:	2823883a 	mov	r17,r5
 4005c20:	2027883a 	mov	r19,r4
 4005c24:	1800311e 	bne	r3,zero,4005cec <__sflush_r+0xf0>
 4005c28:	28c00117 	ldw	r3,4(r5)
 4005c2c:	10820014 	ori	r2,r2,2048
 4005c30:	2880030d 	sth	r2,12(r5)
 4005c34:	00c04b0e 	bge	zero,r3,4005d64 <__sflush_r+0x168>
 4005c38:	8a000a17 	ldw	r8,40(r17)
 4005c3c:	40002326 	beq	r8,zero,4005ccc <__sflush_r+0xd0>
 4005c40:	9c000017 	ldw	r16,0(r19)
 4005c44:	10c4000c 	andi	r3,r2,4096
 4005c48:	98000015 	stw	zero,0(r19)
 4005c4c:	18004826 	beq	r3,zero,4005d70 <__sflush_r+0x174>
 4005c50:	89801417 	ldw	r6,80(r17)
 4005c54:	10c0010c 	andi	r3,r2,4
 4005c58:	18000626 	beq	r3,zero,4005c74 <__sflush_r+0x78>
 4005c5c:	88c00117 	ldw	r3,4(r17)
 4005c60:	88800c17 	ldw	r2,48(r17)
 4005c64:	30cdc83a 	sub	r6,r6,r3
 4005c68:	10000226 	beq	r2,zero,4005c74 <__sflush_r+0x78>
 4005c6c:	88800f17 	ldw	r2,60(r17)
 4005c70:	308dc83a 	sub	r6,r6,r2
 4005c74:	89400717 	ldw	r5,28(r17)
 4005c78:	000f883a 	mov	r7,zero
 4005c7c:	9809883a 	mov	r4,r19
 4005c80:	403ee83a 	callr	r8
 4005c84:	00ffffc4 	movi	r3,-1
 4005c88:	10c04426 	beq	r2,r3,4005d9c <__sflush_r+0x1a0>
 4005c8c:	88c0030b 	ldhu	r3,12(r17)
 4005c90:	89000417 	ldw	r4,16(r17)
 4005c94:	88000115 	stw	zero,4(r17)
 4005c98:	197dffcc 	andi	r5,r3,63487
 4005c9c:	8940030d 	sth	r5,12(r17)
 4005ca0:	89000015 	stw	r4,0(r17)
 4005ca4:	18c4000c 	andi	r3,r3,4096
 4005ca8:	18002c1e 	bne	r3,zero,4005d5c <__sflush_r+0x160>
 4005cac:	89400c17 	ldw	r5,48(r17)
 4005cb0:	9c000015 	stw	r16,0(r19)
 4005cb4:	28000526 	beq	r5,zero,4005ccc <__sflush_r+0xd0>
 4005cb8:	88801004 	addi	r2,r17,64
 4005cbc:	28800226 	beq	r5,r2,4005cc8 <__sflush_r+0xcc>
 4005cc0:	9809883a 	mov	r4,r19
 4005cc4:	40063680 	call	4006368 <_free_r>
 4005cc8:	88000c15 	stw	zero,48(r17)
 4005ccc:	0005883a 	mov	r2,zero
 4005cd0:	dfc00417 	ldw	ra,16(sp)
 4005cd4:	dcc00317 	ldw	r19,12(sp)
 4005cd8:	dc800217 	ldw	r18,8(sp)
 4005cdc:	dc400117 	ldw	r17,4(sp)
 4005ce0:	dc000017 	ldw	r16,0(sp)
 4005ce4:	dec00504 	addi	sp,sp,20
 4005ce8:	f800283a 	ret
 4005cec:	2c800417 	ldw	r18,16(r5)
 4005cf0:	903ff626 	beq	r18,zero,4005ccc <__alt_data_end+0xfc005ccc>
 4005cf4:	2c000017 	ldw	r16,0(r5)
 4005cf8:	108000cc 	andi	r2,r2,3
 4005cfc:	2c800015 	stw	r18,0(r5)
 4005d00:	84a1c83a 	sub	r16,r16,r18
 4005d04:	1000131e 	bne	r2,zero,4005d54 <__sflush_r+0x158>
 4005d08:	28800517 	ldw	r2,20(r5)
 4005d0c:	88800215 	stw	r2,8(r17)
 4005d10:	04000316 	blt	zero,r16,4005d20 <__sflush_r+0x124>
 4005d14:	003fed06 	br	4005ccc <__alt_data_end+0xfc005ccc>
 4005d18:	90a5883a 	add	r18,r18,r2
 4005d1c:	043feb0e 	bge	zero,r16,4005ccc <__alt_data_end+0xfc005ccc>
 4005d20:	88800917 	ldw	r2,36(r17)
 4005d24:	89400717 	ldw	r5,28(r17)
 4005d28:	800f883a 	mov	r7,r16
 4005d2c:	900d883a 	mov	r6,r18
 4005d30:	9809883a 	mov	r4,r19
 4005d34:	103ee83a 	callr	r2
 4005d38:	80a1c83a 	sub	r16,r16,r2
 4005d3c:	00bff616 	blt	zero,r2,4005d18 <__alt_data_end+0xfc005d18>
 4005d40:	88c0030b 	ldhu	r3,12(r17)
 4005d44:	00bfffc4 	movi	r2,-1
 4005d48:	18c01014 	ori	r3,r3,64
 4005d4c:	88c0030d 	sth	r3,12(r17)
 4005d50:	003fdf06 	br	4005cd0 <__alt_data_end+0xfc005cd0>
 4005d54:	0005883a 	mov	r2,zero
 4005d58:	003fec06 	br	4005d0c <__alt_data_end+0xfc005d0c>
 4005d5c:	88801415 	stw	r2,80(r17)
 4005d60:	003fd206 	br	4005cac <__alt_data_end+0xfc005cac>
 4005d64:	28c00f17 	ldw	r3,60(r5)
 4005d68:	00ffb316 	blt	zero,r3,4005c38 <__alt_data_end+0xfc005c38>
 4005d6c:	003fd706 	br	4005ccc <__alt_data_end+0xfc005ccc>
 4005d70:	89400717 	ldw	r5,28(r17)
 4005d74:	000d883a 	mov	r6,zero
 4005d78:	01c00044 	movi	r7,1
 4005d7c:	9809883a 	mov	r4,r19
 4005d80:	403ee83a 	callr	r8
 4005d84:	100d883a 	mov	r6,r2
 4005d88:	00bfffc4 	movi	r2,-1
 4005d8c:	30801426 	beq	r6,r2,4005de0 <__sflush_r+0x1e4>
 4005d90:	8880030b 	ldhu	r2,12(r17)
 4005d94:	8a000a17 	ldw	r8,40(r17)
 4005d98:	003fae06 	br	4005c54 <__alt_data_end+0xfc005c54>
 4005d9c:	98c00017 	ldw	r3,0(r19)
 4005da0:	183fba26 	beq	r3,zero,4005c8c <__alt_data_end+0xfc005c8c>
 4005da4:	01000744 	movi	r4,29
 4005da8:	19000626 	beq	r3,r4,4005dc4 <__sflush_r+0x1c8>
 4005dac:	01000584 	movi	r4,22
 4005db0:	19000426 	beq	r3,r4,4005dc4 <__sflush_r+0x1c8>
 4005db4:	88c0030b 	ldhu	r3,12(r17)
 4005db8:	18c01014 	ori	r3,r3,64
 4005dbc:	88c0030d 	sth	r3,12(r17)
 4005dc0:	003fc306 	br	4005cd0 <__alt_data_end+0xfc005cd0>
 4005dc4:	8880030b 	ldhu	r2,12(r17)
 4005dc8:	88c00417 	ldw	r3,16(r17)
 4005dcc:	88000115 	stw	zero,4(r17)
 4005dd0:	10bdffcc 	andi	r2,r2,63487
 4005dd4:	8880030d 	sth	r2,12(r17)
 4005dd8:	88c00015 	stw	r3,0(r17)
 4005ddc:	003fb306 	br	4005cac <__alt_data_end+0xfc005cac>
 4005de0:	98800017 	ldw	r2,0(r19)
 4005de4:	103fea26 	beq	r2,zero,4005d90 <__alt_data_end+0xfc005d90>
 4005de8:	00c00744 	movi	r3,29
 4005dec:	10c00226 	beq	r2,r3,4005df8 <__sflush_r+0x1fc>
 4005df0:	00c00584 	movi	r3,22
 4005df4:	10c0031e 	bne	r2,r3,4005e04 <__sflush_r+0x208>
 4005df8:	9c000015 	stw	r16,0(r19)
 4005dfc:	0005883a 	mov	r2,zero
 4005e00:	003fb306 	br	4005cd0 <__alt_data_end+0xfc005cd0>
 4005e04:	88c0030b 	ldhu	r3,12(r17)
 4005e08:	3005883a 	mov	r2,r6
 4005e0c:	18c01014 	ori	r3,r3,64
 4005e10:	88c0030d 	sth	r3,12(r17)
 4005e14:	003fae06 	br	4005cd0 <__alt_data_end+0xfc005cd0>

04005e18 <_fflush_r>:
 4005e18:	defffd04 	addi	sp,sp,-12
 4005e1c:	dc000115 	stw	r16,4(sp)
 4005e20:	dfc00215 	stw	ra,8(sp)
 4005e24:	2021883a 	mov	r16,r4
 4005e28:	20000226 	beq	r4,zero,4005e34 <_fflush_r+0x1c>
 4005e2c:	20800e17 	ldw	r2,56(r4)
 4005e30:	10000c26 	beq	r2,zero,4005e64 <_fflush_r+0x4c>
 4005e34:	2880030f 	ldh	r2,12(r5)
 4005e38:	1000051e 	bne	r2,zero,4005e50 <_fflush_r+0x38>
 4005e3c:	0005883a 	mov	r2,zero
 4005e40:	dfc00217 	ldw	ra,8(sp)
 4005e44:	dc000117 	ldw	r16,4(sp)
 4005e48:	dec00304 	addi	sp,sp,12
 4005e4c:	f800283a 	ret
 4005e50:	8009883a 	mov	r4,r16
 4005e54:	dfc00217 	ldw	ra,8(sp)
 4005e58:	dc000117 	ldw	r16,4(sp)
 4005e5c:	dec00304 	addi	sp,sp,12
 4005e60:	4005bfc1 	jmpi	4005bfc <__sflush_r>
 4005e64:	d9400015 	stw	r5,0(sp)
 4005e68:	40061f40 	call	40061f4 <__sinit>
 4005e6c:	d9400017 	ldw	r5,0(sp)
 4005e70:	003ff006 	br	4005e34 <__alt_data_end+0xfc005e34>

04005e74 <fflush>:
 4005e74:	20000526 	beq	r4,zero,4005e8c <fflush+0x18>
 4005e78:	008100f4 	movhi	r2,1027
 4005e7c:	10927d04 	addi	r2,r2,18932
 4005e80:	200b883a 	mov	r5,r4
 4005e84:	11000017 	ldw	r4,0(r2)
 4005e88:	4005e181 	jmpi	4005e18 <_fflush_r>
 4005e8c:	008100f4 	movhi	r2,1027
 4005e90:	10927c04 	addi	r2,r2,18928
 4005e94:	11000017 	ldw	r4,0(r2)
 4005e98:	01410034 	movhi	r5,1024
 4005e9c:	29578604 	addi	r5,r5,24088
 4005ea0:	4006bf81 	jmpi	4006bf8 <_fwalk_reent>

04005ea4 <__fp_unlock>:
 4005ea4:	0005883a 	mov	r2,zero
 4005ea8:	f800283a 	ret

04005eac <_cleanup_r>:
 4005eac:	01410074 	movhi	r5,1025
 4005eb0:	296b0404 	addi	r5,r5,-21488
 4005eb4:	4006bf81 	jmpi	4006bf8 <_fwalk_reent>

04005eb8 <__sinit.part.1>:
 4005eb8:	defff704 	addi	sp,sp,-36
 4005ebc:	00c10034 	movhi	r3,1024
 4005ec0:	dfc00815 	stw	ra,32(sp)
 4005ec4:	ddc00715 	stw	r23,28(sp)
 4005ec8:	dd800615 	stw	r22,24(sp)
 4005ecc:	dd400515 	stw	r21,20(sp)
 4005ed0:	dd000415 	stw	r20,16(sp)
 4005ed4:	dcc00315 	stw	r19,12(sp)
 4005ed8:	dc800215 	stw	r18,8(sp)
 4005edc:	dc400115 	stw	r17,4(sp)
 4005ee0:	dc000015 	stw	r16,0(sp)
 4005ee4:	18d7ab04 	addi	r3,r3,24236
 4005ee8:	24000117 	ldw	r16,4(r4)
 4005eec:	20c00f15 	stw	r3,60(r4)
 4005ef0:	2080bb04 	addi	r2,r4,748
 4005ef4:	00c000c4 	movi	r3,3
 4005ef8:	20c0b915 	stw	r3,740(r4)
 4005efc:	2080ba15 	stw	r2,744(r4)
 4005f00:	2000b815 	stw	zero,736(r4)
 4005f04:	05c00204 	movi	r23,8
 4005f08:	00800104 	movi	r2,4
 4005f0c:	2025883a 	mov	r18,r4
 4005f10:	b80d883a 	mov	r6,r23
 4005f14:	81001704 	addi	r4,r16,92
 4005f18:	000b883a 	mov	r5,zero
 4005f1c:	80000015 	stw	zero,0(r16)
 4005f20:	80000115 	stw	zero,4(r16)
 4005f24:	80000215 	stw	zero,8(r16)
 4005f28:	8080030d 	sth	r2,12(r16)
 4005f2c:	80001915 	stw	zero,100(r16)
 4005f30:	8000038d 	sth	zero,14(r16)
 4005f34:	80000415 	stw	zero,16(r16)
 4005f38:	80000515 	stw	zero,20(r16)
 4005f3c:	80000615 	stw	zero,24(r16)
 4005f40:	4007ae80 	call	4007ae8 <memset>
 4005f44:	05810074 	movhi	r22,1025
 4005f48:	94400217 	ldw	r17,8(r18)
 4005f4c:	05410074 	movhi	r21,1025
 4005f50:	05010074 	movhi	r20,1025
 4005f54:	04c10074 	movhi	r19,1025
 4005f58:	b5a48e04 	addi	r22,r22,-28104
 4005f5c:	ad64a504 	addi	r21,r21,-28012
 4005f60:	a524c404 	addi	r20,r20,-27888
 4005f64:	9ce4db04 	addi	r19,r19,-27796
 4005f68:	85800815 	stw	r22,32(r16)
 4005f6c:	85400915 	stw	r21,36(r16)
 4005f70:	85000a15 	stw	r20,40(r16)
 4005f74:	84c00b15 	stw	r19,44(r16)
 4005f78:	84000715 	stw	r16,28(r16)
 4005f7c:	00800284 	movi	r2,10
 4005f80:	8880030d 	sth	r2,12(r17)
 4005f84:	00800044 	movi	r2,1
 4005f88:	b80d883a 	mov	r6,r23
 4005f8c:	89001704 	addi	r4,r17,92
 4005f90:	000b883a 	mov	r5,zero
 4005f94:	88000015 	stw	zero,0(r17)
 4005f98:	88000115 	stw	zero,4(r17)
 4005f9c:	88000215 	stw	zero,8(r17)
 4005fa0:	88001915 	stw	zero,100(r17)
 4005fa4:	8880038d 	sth	r2,14(r17)
 4005fa8:	88000415 	stw	zero,16(r17)
 4005fac:	88000515 	stw	zero,20(r17)
 4005fb0:	88000615 	stw	zero,24(r17)
 4005fb4:	4007ae80 	call	4007ae8 <memset>
 4005fb8:	94000317 	ldw	r16,12(r18)
 4005fbc:	00800484 	movi	r2,18
 4005fc0:	8c400715 	stw	r17,28(r17)
 4005fc4:	8d800815 	stw	r22,32(r17)
 4005fc8:	8d400915 	stw	r21,36(r17)
 4005fcc:	8d000a15 	stw	r20,40(r17)
 4005fd0:	8cc00b15 	stw	r19,44(r17)
 4005fd4:	8080030d 	sth	r2,12(r16)
 4005fd8:	00800084 	movi	r2,2
 4005fdc:	80000015 	stw	zero,0(r16)
 4005fe0:	80000115 	stw	zero,4(r16)
 4005fe4:	80000215 	stw	zero,8(r16)
 4005fe8:	80001915 	stw	zero,100(r16)
 4005fec:	8080038d 	sth	r2,14(r16)
 4005ff0:	80000415 	stw	zero,16(r16)
 4005ff4:	80000515 	stw	zero,20(r16)
 4005ff8:	80000615 	stw	zero,24(r16)
 4005ffc:	b80d883a 	mov	r6,r23
 4006000:	000b883a 	mov	r5,zero
 4006004:	81001704 	addi	r4,r16,92
 4006008:	4007ae80 	call	4007ae8 <memset>
 400600c:	00800044 	movi	r2,1
 4006010:	84000715 	stw	r16,28(r16)
 4006014:	85800815 	stw	r22,32(r16)
 4006018:	85400915 	stw	r21,36(r16)
 400601c:	85000a15 	stw	r20,40(r16)
 4006020:	84c00b15 	stw	r19,44(r16)
 4006024:	90800e15 	stw	r2,56(r18)
 4006028:	dfc00817 	ldw	ra,32(sp)
 400602c:	ddc00717 	ldw	r23,28(sp)
 4006030:	dd800617 	ldw	r22,24(sp)
 4006034:	dd400517 	ldw	r21,20(sp)
 4006038:	dd000417 	ldw	r20,16(sp)
 400603c:	dcc00317 	ldw	r19,12(sp)
 4006040:	dc800217 	ldw	r18,8(sp)
 4006044:	dc400117 	ldw	r17,4(sp)
 4006048:	dc000017 	ldw	r16,0(sp)
 400604c:	dec00904 	addi	sp,sp,36
 4006050:	f800283a 	ret

04006054 <__fp_lock>:
 4006054:	0005883a 	mov	r2,zero
 4006058:	f800283a 	ret

0400605c <__sfmoreglue>:
 400605c:	defffc04 	addi	sp,sp,-16
 4006060:	dc400115 	stw	r17,4(sp)
 4006064:	2c7fffc4 	addi	r17,r5,-1
 4006068:	8c401a24 	muli	r17,r17,104
 400606c:	dc800215 	stw	r18,8(sp)
 4006070:	2825883a 	mov	r18,r5
 4006074:	89401d04 	addi	r5,r17,116
 4006078:	dc000015 	stw	r16,0(sp)
 400607c:	dfc00315 	stw	ra,12(sp)
 4006080:	4006f540 	call	4006f54 <_malloc_r>
 4006084:	1021883a 	mov	r16,r2
 4006088:	10000726 	beq	r2,zero,40060a8 <__sfmoreglue+0x4c>
 400608c:	11000304 	addi	r4,r2,12
 4006090:	10000015 	stw	zero,0(r2)
 4006094:	14800115 	stw	r18,4(r2)
 4006098:	11000215 	stw	r4,8(r2)
 400609c:	89801a04 	addi	r6,r17,104
 40060a0:	000b883a 	mov	r5,zero
 40060a4:	4007ae80 	call	4007ae8 <memset>
 40060a8:	8005883a 	mov	r2,r16
 40060ac:	dfc00317 	ldw	ra,12(sp)
 40060b0:	dc800217 	ldw	r18,8(sp)
 40060b4:	dc400117 	ldw	r17,4(sp)
 40060b8:	dc000017 	ldw	r16,0(sp)
 40060bc:	dec00404 	addi	sp,sp,16
 40060c0:	f800283a 	ret

040060c4 <__sfp>:
 40060c4:	defffb04 	addi	sp,sp,-20
 40060c8:	dc000015 	stw	r16,0(sp)
 40060cc:	040100f4 	movhi	r16,1027
 40060d0:	84127c04 	addi	r16,r16,18928
 40060d4:	dcc00315 	stw	r19,12(sp)
 40060d8:	2027883a 	mov	r19,r4
 40060dc:	81000017 	ldw	r4,0(r16)
 40060e0:	dfc00415 	stw	ra,16(sp)
 40060e4:	dc800215 	stw	r18,8(sp)
 40060e8:	20800e17 	ldw	r2,56(r4)
 40060ec:	dc400115 	stw	r17,4(sp)
 40060f0:	1000021e 	bne	r2,zero,40060fc <__sfp+0x38>
 40060f4:	4005eb80 	call	4005eb8 <__sinit.part.1>
 40060f8:	81000017 	ldw	r4,0(r16)
 40060fc:	2480b804 	addi	r18,r4,736
 4006100:	047fffc4 	movi	r17,-1
 4006104:	91000117 	ldw	r4,4(r18)
 4006108:	94000217 	ldw	r16,8(r18)
 400610c:	213fffc4 	addi	r4,r4,-1
 4006110:	20000a16 	blt	r4,zero,400613c <__sfp+0x78>
 4006114:	8080030f 	ldh	r2,12(r16)
 4006118:	10000c26 	beq	r2,zero,400614c <__sfp+0x88>
 400611c:	80c01d04 	addi	r3,r16,116
 4006120:	00000206 	br	400612c <__sfp+0x68>
 4006124:	18bfe60f 	ldh	r2,-104(r3)
 4006128:	10000826 	beq	r2,zero,400614c <__sfp+0x88>
 400612c:	213fffc4 	addi	r4,r4,-1
 4006130:	1c3ffd04 	addi	r16,r3,-12
 4006134:	18c01a04 	addi	r3,r3,104
 4006138:	247ffa1e 	bne	r4,r17,4006124 <__alt_data_end+0xfc006124>
 400613c:	90800017 	ldw	r2,0(r18)
 4006140:	10001d26 	beq	r2,zero,40061b8 <__sfp+0xf4>
 4006144:	1025883a 	mov	r18,r2
 4006148:	003fee06 	br	4006104 <__alt_data_end+0xfc006104>
 400614c:	00bfffc4 	movi	r2,-1
 4006150:	8080038d 	sth	r2,14(r16)
 4006154:	00800044 	movi	r2,1
 4006158:	8080030d 	sth	r2,12(r16)
 400615c:	80001915 	stw	zero,100(r16)
 4006160:	80000015 	stw	zero,0(r16)
 4006164:	80000215 	stw	zero,8(r16)
 4006168:	80000115 	stw	zero,4(r16)
 400616c:	80000415 	stw	zero,16(r16)
 4006170:	80000515 	stw	zero,20(r16)
 4006174:	80000615 	stw	zero,24(r16)
 4006178:	01800204 	movi	r6,8
 400617c:	000b883a 	mov	r5,zero
 4006180:	81001704 	addi	r4,r16,92
 4006184:	4007ae80 	call	4007ae8 <memset>
 4006188:	8005883a 	mov	r2,r16
 400618c:	80000c15 	stw	zero,48(r16)
 4006190:	80000d15 	stw	zero,52(r16)
 4006194:	80001115 	stw	zero,68(r16)
 4006198:	80001215 	stw	zero,72(r16)
 400619c:	dfc00417 	ldw	ra,16(sp)
 40061a0:	dcc00317 	ldw	r19,12(sp)
 40061a4:	dc800217 	ldw	r18,8(sp)
 40061a8:	dc400117 	ldw	r17,4(sp)
 40061ac:	dc000017 	ldw	r16,0(sp)
 40061b0:	dec00504 	addi	sp,sp,20
 40061b4:	f800283a 	ret
 40061b8:	01400104 	movi	r5,4
 40061bc:	9809883a 	mov	r4,r19
 40061c0:	400605c0 	call	400605c <__sfmoreglue>
 40061c4:	90800015 	stw	r2,0(r18)
 40061c8:	103fde1e 	bne	r2,zero,4006144 <__alt_data_end+0xfc006144>
 40061cc:	00800304 	movi	r2,12
 40061d0:	98800015 	stw	r2,0(r19)
 40061d4:	0005883a 	mov	r2,zero
 40061d8:	003ff006 	br	400619c <__alt_data_end+0xfc00619c>

040061dc <_cleanup>:
 40061dc:	008100f4 	movhi	r2,1027
 40061e0:	10927c04 	addi	r2,r2,18928
 40061e4:	11000017 	ldw	r4,0(r2)
 40061e8:	01410074 	movhi	r5,1025
 40061ec:	296b0404 	addi	r5,r5,-21488
 40061f0:	4006bf81 	jmpi	4006bf8 <_fwalk_reent>

040061f4 <__sinit>:
 40061f4:	20800e17 	ldw	r2,56(r4)
 40061f8:	10000126 	beq	r2,zero,4006200 <__sinit+0xc>
 40061fc:	f800283a 	ret
 4006200:	4005eb81 	jmpi	4005eb8 <__sinit.part.1>

04006204 <__sfp_lock_acquire>:
 4006204:	f800283a 	ret

04006208 <__sfp_lock_release>:
 4006208:	f800283a 	ret

0400620c <__sinit_lock_acquire>:
 400620c:	f800283a 	ret

04006210 <__sinit_lock_release>:
 4006210:	f800283a 	ret

04006214 <__fp_lock_all>:
 4006214:	008100f4 	movhi	r2,1027
 4006218:	10927d04 	addi	r2,r2,18932
 400621c:	11000017 	ldw	r4,0(r2)
 4006220:	01410034 	movhi	r5,1024
 4006224:	29581504 	addi	r5,r5,24660
 4006228:	4006b341 	jmpi	4006b34 <_fwalk>

0400622c <__fp_unlock_all>:
 400622c:	008100f4 	movhi	r2,1027
 4006230:	10927d04 	addi	r2,r2,18932
 4006234:	11000017 	ldw	r4,0(r2)
 4006238:	01410034 	movhi	r5,1024
 400623c:	2957a904 	addi	r5,r5,24228
 4006240:	4006b341 	jmpi	4006b34 <_fwalk>

04006244 <_malloc_trim_r>:
 4006244:	defffb04 	addi	sp,sp,-20
 4006248:	dcc00315 	stw	r19,12(sp)
 400624c:	04c100f4 	movhi	r19,1027
 4006250:	dc800215 	stw	r18,8(sp)
 4006254:	dc400115 	stw	r17,4(sp)
 4006258:	dc000015 	stw	r16,0(sp)
 400625c:	dfc00415 	stw	ra,16(sp)
 4006260:	2821883a 	mov	r16,r5
 4006264:	9cccf704 	addi	r19,r19,13276
 4006268:	2025883a 	mov	r18,r4
 400626c:	400ed000 	call	400ed00 <__malloc_lock>
 4006270:	98800217 	ldw	r2,8(r19)
 4006274:	14400117 	ldw	r17,4(r2)
 4006278:	00bfff04 	movi	r2,-4
 400627c:	88a2703a 	and	r17,r17,r2
 4006280:	8c21c83a 	sub	r16,r17,r16
 4006284:	8403fbc4 	addi	r16,r16,4079
 4006288:	8020d33a 	srli	r16,r16,12
 400628c:	0083ffc4 	movi	r2,4095
 4006290:	843fffc4 	addi	r16,r16,-1
 4006294:	8020933a 	slli	r16,r16,12
 4006298:	1400060e 	bge	r2,r16,40062b4 <_malloc_trim_r+0x70>
 400629c:	000b883a 	mov	r5,zero
 40062a0:	9009883a 	mov	r4,r18
 40062a4:	40091e40 	call	40091e4 <_sbrk_r>
 40062a8:	98c00217 	ldw	r3,8(r19)
 40062ac:	1c47883a 	add	r3,r3,r17
 40062b0:	10c00a26 	beq	r2,r3,40062dc <_malloc_trim_r+0x98>
 40062b4:	9009883a 	mov	r4,r18
 40062b8:	400ed240 	call	400ed24 <__malloc_unlock>
 40062bc:	0005883a 	mov	r2,zero
 40062c0:	dfc00417 	ldw	ra,16(sp)
 40062c4:	dcc00317 	ldw	r19,12(sp)
 40062c8:	dc800217 	ldw	r18,8(sp)
 40062cc:	dc400117 	ldw	r17,4(sp)
 40062d0:	dc000017 	ldw	r16,0(sp)
 40062d4:	dec00504 	addi	sp,sp,20
 40062d8:	f800283a 	ret
 40062dc:	040bc83a 	sub	r5,zero,r16
 40062e0:	9009883a 	mov	r4,r18
 40062e4:	40091e40 	call	40091e4 <_sbrk_r>
 40062e8:	00ffffc4 	movi	r3,-1
 40062ec:	10c00d26 	beq	r2,r3,4006324 <_malloc_trim_r+0xe0>
 40062f0:	00c100f4 	movhi	r3,1027
 40062f4:	18df3604 	addi	r3,r3,31960
 40062f8:	18800017 	ldw	r2,0(r3)
 40062fc:	99000217 	ldw	r4,8(r19)
 4006300:	8c23c83a 	sub	r17,r17,r16
 4006304:	8c400054 	ori	r17,r17,1
 4006308:	1421c83a 	sub	r16,r2,r16
 400630c:	24400115 	stw	r17,4(r4)
 4006310:	9009883a 	mov	r4,r18
 4006314:	1c000015 	stw	r16,0(r3)
 4006318:	400ed240 	call	400ed24 <__malloc_unlock>
 400631c:	00800044 	movi	r2,1
 4006320:	003fe706 	br	40062c0 <__alt_data_end+0xfc0062c0>
 4006324:	000b883a 	mov	r5,zero
 4006328:	9009883a 	mov	r4,r18
 400632c:	40091e40 	call	40091e4 <_sbrk_r>
 4006330:	99000217 	ldw	r4,8(r19)
 4006334:	014003c4 	movi	r5,15
 4006338:	1107c83a 	sub	r3,r2,r4
 400633c:	28ffdd0e 	bge	r5,r3,40062b4 <__alt_data_end+0xfc0062b4>
 4006340:	014100f4 	movhi	r5,1027
 4006344:	29527f04 	addi	r5,r5,18940
 4006348:	29400017 	ldw	r5,0(r5)
 400634c:	18c00054 	ori	r3,r3,1
 4006350:	20c00115 	stw	r3,4(r4)
 4006354:	00c100f4 	movhi	r3,1027
 4006358:	1145c83a 	sub	r2,r2,r5
 400635c:	18df3604 	addi	r3,r3,31960
 4006360:	18800015 	stw	r2,0(r3)
 4006364:	003fd306 	br	40062b4 <__alt_data_end+0xfc0062b4>

04006368 <_free_r>:
 4006368:	28004126 	beq	r5,zero,4006470 <_free_r+0x108>
 400636c:	defffd04 	addi	sp,sp,-12
 4006370:	dc400115 	stw	r17,4(sp)
 4006374:	dc000015 	stw	r16,0(sp)
 4006378:	2023883a 	mov	r17,r4
 400637c:	2821883a 	mov	r16,r5
 4006380:	dfc00215 	stw	ra,8(sp)
 4006384:	400ed000 	call	400ed00 <__malloc_lock>
 4006388:	81ffff17 	ldw	r7,-4(r16)
 400638c:	00bfff84 	movi	r2,-2
 4006390:	010100f4 	movhi	r4,1027
 4006394:	81bffe04 	addi	r6,r16,-8
 4006398:	3884703a 	and	r2,r7,r2
 400639c:	210cf704 	addi	r4,r4,13276
 40063a0:	308b883a 	add	r5,r6,r2
 40063a4:	2a400117 	ldw	r9,4(r5)
 40063a8:	22000217 	ldw	r8,8(r4)
 40063ac:	00ffff04 	movi	r3,-4
 40063b0:	48c6703a 	and	r3,r9,r3
 40063b4:	2a005726 	beq	r5,r8,4006514 <_free_r+0x1ac>
 40063b8:	28c00115 	stw	r3,4(r5)
 40063bc:	39c0004c 	andi	r7,r7,1
 40063c0:	3800091e 	bne	r7,zero,40063e8 <_free_r+0x80>
 40063c4:	823ffe17 	ldw	r8,-8(r16)
 40063c8:	22400204 	addi	r9,r4,8
 40063cc:	320dc83a 	sub	r6,r6,r8
 40063d0:	31c00217 	ldw	r7,8(r6)
 40063d4:	1205883a 	add	r2,r2,r8
 40063d8:	3a406526 	beq	r7,r9,4006570 <_free_r+0x208>
 40063dc:	32000317 	ldw	r8,12(r6)
 40063e0:	3a000315 	stw	r8,12(r7)
 40063e4:	41c00215 	stw	r7,8(r8)
 40063e8:	28cf883a 	add	r7,r5,r3
 40063ec:	39c00117 	ldw	r7,4(r7)
 40063f0:	39c0004c 	andi	r7,r7,1
 40063f4:	38003a26 	beq	r7,zero,40064e0 <_free_r+0x178>
 40063f8:	10c00054 	ori	r3,r2,1
 40063fc:	30c00115 	stw	r3,4(r6)
 4006400:	3087883a 	add	r3,r6,r2
 4006404:	18800015 	stw	r2,0(r3)
 4006408:	00c07fc4 	movi	r3,511
 400640c:	18801936 	bltu	r3,r2,4006474 <_free_r+0x10c>
 4006410:	1004d0fa 	srli	r2,r2,3
 4006414:	01c00044 	movi	r7,1
 4006418:	21400117 	ldw	r5,4(r4)
 400641c:	10c00044 	addi	r3,r2,1
 4006420:	18c7883a 	add	r3,r3,r3
 4006424:	1005d0ba 	srai	r2,r2,2
 4006428:	18c7883a 	add	r3,r3,r3
 400642c:	18c7883a 	add	r3,r3,r3
 4006430:	1907883a 	add	r3,r3,r4
 4006434:	3884983a 	sll	r2,r7,r2
 4006438:	19c00017 	ldw	r7,0(r3)
 400643c:	1a3ffe04 	addi	r8,r3,-8
 4006440:	1144b03a 	or	r2,r2,r5
 4006444:	32000315 	stw	r8,12(r6)
 4006448:	31c00215 	stw	r7,8(r6)
 400644c:	20800115 	stw	r2,4(r4)
 4006450:	19800015 	stw	r6,0(r3)
 4006454:	39800315 	stw	r6,12(r7)
 4006458:	8809883a 	mov	r4,r17
 400645c:	dfc00217 	ldw	ra,8(sp)
 4006460:	dc400117 	ldw	r17,4(sp)
 4006464:	dc000017 	ldw	r16,0(sp)
 4006468:	dec00304 	addi	sp,sp,12
 400646c:	400ed241 	jmpi	400ed24 <__malloc_unlock>
 4006470:	f800283a 	ret
 4006474:	100ad27a 	srli	r5,r2,9
 4006478:	00c00104 	movi	r3,4
 400647c:	19404a36 	bltu	r3,r5,40065a8 <_free_r+0x240>
 4006480:	100ad1ba 	srli	r5,r2,6
 4006484:	28c00e44 	addi	r3,r5,57
 4006488:	18c7883a 	add	r3,r3,r3
 400648c:	29400e04 	addi	r5,r5,56
 4006490:	18c7883a 	add	r3,r3,r3
 4006494:	18c7883a 	add	r3,r3,r3
 4006498:	1909883a 	add	r4,r3,r4
 400649c:	20c00017 	ldw	r3,0(r4)
 40064a0:	01c100f4 	movhi	r7,1027
 40064a4:	213ffe04 	addi	r4,r4,-8
 40064a8:	39ccf704 	addi	r7,r7,13276
 40064ac:	20c04426 	beq	r4,r3,40065c0 <_free_r+0x258>
 40064b0:	01ffff04 	movi	r7,-4
 40064b4:	19400117 	ldw	r5,4(r3)
 40064b8:	29ca703a 	and	r5,r5,r7
 40064bc:	1140022e 	bgeu	r2,r5,40064c8 <_free_r+0x160>
 40064c0:	18c00217 	ldw	r3,8(r3)
 40064c4:	20fffb1e 	bne	r4,r3,40064b4 <__alt_data_end+0xfc0064b4>
 40064c8:	19000317 	ldw	r4,12(r3)
 40064cc:	31000315 	stw	r4,12(r6)
 40064d0:	30c00215 	stw	r3,8(r6)
 40064d4:	21800215 	stw	r6,8(r4)
 40064d8:	19800315 	stw	r6,12(r3)
 40064dc:	003fde06 	br	4006458 <__alt_data_end+0xfc006458>
 40064e0:	29c00217 	ldw	r7,8(r5)
 40064e4:	10c5883a 	add	r2,r2,r3
 40064e8:	00c100f4 	movhi	r3,1027
 40064ec:	18ccf904 	addi	r3,r3,13284
 40064f0:	38c03b26 	beq	r7,r3,40065e0 <_free_r+0x278>
 40064f4:	2a000317 	ldw	r8,12(r5)
 40064f8:	11400054 	ori	r5,r2,1
 40064fc:	3087883a 	add	r3,r6,r2
 4006500:	3a000315 	stw	r8,12(r7)
 4006504:	41c00215 	stw	r7,8(r8)
 4006508:	31400115 	stw	r5,4(r6)
 400650c:	18800015 	stw	r2,0(r3)
 4006510:	003fbd06 	br	4006408 <__alt_data_end+0xfc006408>
 4006514:	39c0004c 	andi	r7,r7,1
 4006518:	10c5883a 	add	r2,r2,r3
 400651c:	3800071e 	bne	r7,zero,400653c <_free_r+0x1d4>
 4006520:	81fffe17 	ldw	r7,-8(r16)
 4006524:	31cdc83a 	sub	r6,r6,r7
 4006528:	30c00317 	ldw	r3,12(r6)
 400652c:	31400217 	ldw	r5,8(r6)
 4006530:	11c5883a 	add	r2,r2,r7
 4006534:	28c00315 	stw	r3,12(r5)
 4006538:	19400215 	stw	r5,8(r3)
 400653c:	10c00054 	ori	r3,r2,1
 4006540:	30c00115 	stw	r3,4(r6)
 4006544:	00c100f4 	movhi	r3,1027
 4006548:	18d28004 	addi	r3,r3,18944
 400654c:	18c00017 	ldw	r3,0(r3)
 4006550:	21800215 	stw	r6,8(r4)
 4006554:	10ffc036 	bltu	r2,r3,4006458 <__alt_data_end+0xfc006458>
 4006558:	008100f4 	movhi	r2,1027
 400655c:	109f2d04 	addi	r2,r2,31924
 4006560:	11400017 	ldw	r5,0(r2)
 4006564:	8809883a 	mov	r4,r17
 4006568:	40062440 	call	4006244 <_malloc_trim_r>
 400656c:	003fba06 	br	4006458 <__alt_data_end+0xfc006458>
 4006570:	28c9883a 	add	r4,r5,r3
 4006574:	21000117 	ldw	r4,4(r4)
 4006578:	2100004c 	andi	r4,r4,1
 400657c:	2000391e 	bne	r4,zero,4006664 <_free_r+0x2fc>
 4006580:	29c00217 	ldw	r7,8(r5)
 4006584:	29000317 	ldw	r4,12(r5)
 4006588:	1885883a 	add	r2,r3,r2
 400658c:	10c00054 	ori	r3,r2,1
 4006590:	39000315 	stw	r4,12(r7)
 4006594:	21c00215 	stw	r7,8(r4)
 4006598:	30c00115 	stw	r3,4(r6)
 400659c:	308d883a 	add	r6,r6,r2
 40065a0:	30800015 	stw	r2,0(r6)
 40065a4:	003fac06 	br	4006458 <__alt_data_end+0xfc006458>
 40065a8:	00c00504 	movi	r3,20
 40065ac:	19401536 	bltu	r3,r5,4006604 <_free_r+0x29c>
 40065b0:	28c01704 	addi	r3,r5,92
 40065b4:	18c7883a 	add	r3,r3,r3
 40065b8:	294016c4 	addi	r5,r5,91
 40065bc:	003fb406 	br	4006490 <__alt_data_end+0xfc006490>
 40065c0:	280bd0ba 	srai	r5,r5,2
 40065c4:	00c00044 	movi	r3,1
 40065c8:	38800117 	ldw	r2,4(r7)
 40065cc:	194a983a 	sll	r5,r3,r5
 40065d0:	2007883a 	mov	r3,r4
 40065d4:	2884b03a 	or	r2,r5,r2
 40065d8:	38800115 	stw	r2,4(r7)
 40065dc:	003fbb06 	br	40064cc <__alt_data_end+0xfc0064cc>
 40065e0:	21800515 	stw	r6,20(r4)
 40065e4:	21800415 	stw	r6,16(r4)
 40065e8:	10c00054 	ori	r3,r2,1
 40065ec:	31c00315 	stw	r7,12(r6)
 40065f0:	31c00215 	stw	r7,8(r6)
 40065f4:	30c00115 	stw	r3,4(r6)
 40065f8:	308d883a 	add	r6,r6,r2
 40065fc:	30800015 	stw	r2,0(r6)
 4006600:	003f9506 	br	4006458 <__alt_data_end+0xfc006458>
 4006604:	00c01504 	movi	r3,84
 4006608:	19400536 	bltu	r3,r5,4006620 <_free_r+0x2b8>
 400660c:	100ad33a 	srli	r5,r2,12
 4006610:	28c01bc4 	addi	r3,r5,111
 4006614:	18c7883a 	add	r3,r3,r3
 4006618:	29401b84 	addi	r5,r5,110
 400661c:	003f9c06 	br	4006490 <__alt_data_end+0xfc006490>
 4006620:	00c05504 	movi	r3,340
 4006624:	19400536 	bltu	r3,r5,400663c <_free_r+0x2d4>
 4006628:	100ad3fa 	srli	r5,r2,15
 400662c:	28c01e04 	addi	r3,r5,120
 4006630:	18c7883a 	add	r3,r3,r3
 4006634:	29401dc4 	addi	r5,r5,119
 4006638:	003f9506 	br	4006490 <__alt_data_end+0xfc006490>
 400663c:	00c15504 	movi	r3,1364
 4006640:	19400536 	bltu	r3,r5,4006658 <_free_r+0x2f0>
 4006644:	100ad4ba 	srli	r5,r2,18
 4006648:	28c01f44 	addi	r3,r5,125
 400664c:	18c7883a 	add	r3,r3,r3
 4006650:	29401f04 	addi	r5,r5,124
 4006654:	003f8e06 	br	4006490 <__alt_data_end+0xfc006490>
 4006658:	00c03f84 	movi	r3,254
 400665c:	01401f84 	movi	r5,126
 4006660:	003f8b06 	br	4006490 <__alt_data_end+0xfc006490>
 4006664:	10c00054 	ori	r3,r2,1
 4006668:	30c00115 	stw	r3,4(r6)
 400666c:	308d883a 	add	r6,r6,r2
 4006670:	30800015 	stw	r2,0(r6)
 4006674:	003f7806 	br	4006458 <__alt_data_end+0xfc006458>

04006678 <__sfvwrite_r>:
 4006678:	30800217 	ldw	r2,8(r6)
 400667c:	10006726 	beq	r2,zero,400681c <__sfvwrite_r+0x1a4>
 4006680:	28c0030b 	ldhu	r3,12(r5)
 4006684:	defff404 	addi	sp,sp,-48
 4006688:	dd400715 	stw	r21,28(sp)
 400668c:	dd000615 	stw	r20,24(sp)
 4006690:	dc000215 	stw	r16,8(sp)
 4006694:	dfc00b15 	stw	ra,44(sp)
 4006698:	df000a15 	stw	fp,40(sp)
 400669c:	ddc00915 	stw	r23,36(sp)
 40066a0:	dd800815 	stw	r22,32(sp)
 40066a4:	dcc00515 	stw	r19,20(sp)
 40066a8:	dc800415 	stw	r18,16(sp)
 40066ac:	dc400315 	stw	r17,12(sp)
 40066b0:	1880020c 	andi	r2,r3,8
 40066b4:	2821883a 	mov	r16,r5
 40066b8:	202b883a 	mov	r21,r4
 40066bc:	3029883a 	mov	r20,r6
 40066c0:	10002726 	beq	r2,zero,4006760 <__sfvwrite_r+0xe8>
 40066c4:	28800417 	ldw	r2,16(r5)
 40066c8:	10002526 	beq	r2,zero,4006760 <__sfvwrite_r+0xe8>
 40066cc:	1880008c 	andi	r2,r3,2
 40066d0:	a4400017 	ldw	r17,0(r20)
 40066d4:	10002a26 	beq	r2,zero,4006780 <__sfvwrite_r+0x108>
 40066d8:	05a00034 	movhi	r22,32768
 40066dc:	0027883a 	mov	r19,zero
 40066e0:	0025883a 	mov	r18,zero
 40066e4:	b5bf0004 	addi	r22,r22,-1024
 40066e8:	980d883a 	mov	r6,r19
 40066ec:	a809883a 	mov	r4,r21
 40066f0:	90004626 	beq	r18,zero,400680c <__sfvwrite_r+0x194>
 40066f4:	900f883a 	mov	r7,r18
 40066f8:	b480022e 	bgeu	r22,r18,4006704 <__sfvwrite_r+0x8c>
 40066fc:	01e00034 	movhi	r7,32768
 4006700:	39ff0004 	addi	r7,r7,-1024
 4006704:	80800917 	ldw	r2,36(r16)
 4006708:	81400717 	ldw	r5,28(r16)
 400670c:	103ee83a 	callr	r2
 4006710:	0080570e 	bge	zero,r2,4006870 <__sfvwrite_r+0x1f8>
 4006714:	a0c00217 	ldw	r3,8(r20)
 4006718:	98a7883a 	add	r19,r19,r2
 400671c:	90a5c83a 	sub	r18,r18,r2
 4006720:	1885c83a 	sub	r2,r3,r2
 4006724:	a0800215 	stw	r2,8(r20)
 4006728:	103fef1e 	bne	r2,zero,40066e8 <__alt_data_end+0xfc0066e8>
 400672c:	0005883a 	mov	r2,zero
 4006730:	dfc00b17 	ldw	ra,44(sp)
 4006734:	df000a17 	ldw	fp,40(sp)
 4006738:	ddc00917 	ldw	r23,36(sp)
 400673c:	dd800817 	ldw	r22,32(sp)
 4006740:	dd400717 	ldw	r21,28(sp)
 4006744:	dd000617 	ldw	r20,24(sp)
 4006748:	dcc00517 	ldw	r19,20(sp)
 400674c:	dc800417 	ldw	r18,16(sp)
 4006750:	dc400317 	ldw	r17,12(sp)
 4006754:	dc000217 	ldw	r16,8(sp)
 4006758:	dec00c04 	addi	sp,sp,48
 400675c:	f800283a 	ret
 4006760:	800b883a 	mov	r5,r16
 4006764:	a809883a 	mov	r4,r21
 4006768:	40042200 	call	4004220 <__swsetup_r>
 400676c:	1000eb1e 	bne	r2,zero,4006b1c <__sfvwrite_r+0x4a4>
 4006770:	80c0030b 	ldhu	r3,12(r16)
 4006774:	a4400017 	ldw	r17,0(r20)
 4006778:	1880008c 	andi	r2,r3,2
 400677c:	103fd61e 	bne	r2,zero,40066d8 <__alt_data_end+0xfc0066d8>
 4006780:	1880004c 	andi	r2,r3,1
 4006784:	10003f1e 	bne	r2,zero,4006884 <__sfvwrite_r+0x20c>
 4006788:	0039883a 	mov	fp,zero
 400678c:	0025883a 	mov	r18,zero
 4006790:	90001a26 	beq	r18,zero,40067fc <__sfvwrite_r+0x184>
 4006794:	1880800c 	andi	r2,r3,512
 4006798:	84c00217 	ldw	r19,8(r16)
 400679c:	10002126 	beq	r2,zero,4006824 <__sfvwrite_r+0x1ac>
 40067a0:	982f883a 	mov	r23,r19
 40067a4:	94c09336 	bltu	r18,r19,40069f4 <__sfvwrite_r+0x37c>
 40067a8:	1881200c 	andi	r2,r3,1152
 40067ac:	10009e1e 	bne	r2,zero,4006a28 <__sfvwrite_r+0x3b0>
 40067b0:	81000017 	ldw	r4,0(r16)
 40067b4:	b80d883a 	mov	r6,r23
 40067b8:	e00b883a 	mov	r5,fp
 40067bc:	400798c0 	call	400798c <memmove>
 40067c0:	80c00217 	ldw	r3,8(r16)
 40067c4:	81000017 	ldw	r4,0(r16)
 40067c8:	9005883a 	mov	r2,r18
 40067cc:	1ce7c83a 	sub	r19,r3,r19
 40067d0:	25cf883a 	add	r7,r4,r23
 40067d4:	84c00215 	stw	r19,8(r16)
 40067d8:	81c00015 	stw	r7,0(r16)
 40067dc:	a0c00217 	ldw	r3,8(r20)
 40067e0:	e0b9883a 	add	fp,fp,r2
 40067e4:	90a5c83a 	sub	r18,r18,r2
 40067e8:	18a7c83a 	sub	r19,r3,r2
 40067ec:	a4c00215 	stw	r19,8(r20)
 40067f0:	983fce26 	beq	r19,zero,400672c <__alt_data_end+0xfc00672c>
 40067f4:	80c0030b 	ldhu	r3,12(r16)
 40067f8:	903fe61e 	bne	r18,zero,4006794 <__alt_data_end+0xfc006794>
 40067fc:	8f000017 	ldw	fp,0(r17)
 4006800:	8c800117 	ldw	r18,4(r17)
 4006804:	8c400204 	addi	r17,r17,8
 4006808:	003fe106 	br	4006790 <__alt_data_end+0xfc006790>
 400680c:	8cc00017 	ldw	r19,0(r17)
 4006810:	8c800117 	ldw	r18,4(r17)
 4006814:	8c400204 	addi	r17,r17,8
 4006818:	003fb306 	br	40066e8 <__alt_data_end+0xfc0066e8>
 400681c:	0005883a 	mov	r2,zero
 4006820:	f800283a 	ret
 4006824:	81000017 	ldw	r4,0(r16)
 4006828:	80800417 	ldw	r2,16(r16)
 400682c:	11005736 	bltu	r2,r4,400698c <__sfvwrite_r+0x314>
 4006830:	85c00517 	ldw	r23,20(r16)
 4006834:	95c05536 	bltu	r18,r23,400698c <__sfvwrite_r+0x314>
 4006838:	00a00034 	movhi	r2,32768
 400683c:	10bfffc4 	addi	r2,r2,-1
 4006840:	9009883a 	mov	r4,r18
 4006844:	1480012e 	bgeu	r2,r18,400684c <__sfvwrite_r+0x1d4>
 4006848:	1009883a 	mov	r4,r2
 400684c:	b80b883a 	mov	r5,r23
 4006850:	4001bc40 	call	4001bc4 <__divsi3>
 4006854:	15cf383a 	mul	r7,r2,r23
 4006858:	81400717 	ldw	r5,28(r16)
 400685c:	80800917 	ldw	r2,36(r16)
 4006860:	e00d883a 	mov	r6,fp
 4006864:	a809883a 	mov	r4,r21
 4006868:	103ee83a 	callr	r2
 400686c:	00bfdb16 	blt	zero,r2,40067dc <__alt_data_end+0xfc0067dc>
 4006870:	8080030b 	ldhu	r2,12(r16)
 4006874:	10801014 	ori	r2,r2,64
 4006878:	8080030d 	sth	r2,12(r16)
 400687c:	00bfffc4 	movi	r2,-1
 4006880:	003fab06 	br	4006730 <__alt_data_end+0xfc006730>
 4006884:	0027883a 	mov	r19,zero
 4006888:	0011883a 	mov	r8,zero
 400688c:	0039883a 	mov	fp,zero
 4006890:	0025883a 	mov	r18,zero
 4006894:	90001f26 	beq	r18,zero,4006914 <__sfvwrite_r+0x29c>
 4006898:	40005a26 	beq	r8,zero,4006a04 <__sfvwrite_r+0x38c>
 400689c:	982d883a 	mov	r22,r19
 40068a0:	94c0012e 	bgeu	r18,r19,40068a8 <__sfvwrite_r+0x230>
 40068a4:	902d883a 	mov	r22,r18
 40068a8:	81000017 	ldw	r4,0(r16)
 40068ac:	80800417 	ldw	r2,16(r16)
 40068b0:	b02f883a 	mov	r23,r22
 40068b4:	81c00517 	ldw	r7,20(r16)
 40068b8:	1100032e 	bgeu	r2,r4,40068c8 <__sfvwrite_r+0x250>
 40068bc:	80c00217 	ldw	r3,8(r16)
 40068c0:	38c7883a 	add	r3,r7,r3
 40068c4:	1d801816 	blt	r3,r22,4006928 <__sfvwrite_r+0x2b0>
 40068c8:	b1c03e16 	blt	r22,r7,40069c4 <__sfvwrite_r+0x34c>
 40068cc:	80800917 	ldw	r2,36(r16)
 40068d0:	81400717 	ldw	r5,28(r16)
 40068d4:	e00d883a 	mov	r6,fp
 40068d8:	da000115 	stw	r8,4(sp)
 40068dc:	a809883a 	mov	r4,r21
 40068e0:	103ee83a 	callr	r2
 40068e4:	102f883a 	mov	r23,r2
 40068e8:	da000117 	ldw	r8,4(sp)
 40068ec:	00bfe00e 	bge	zero,r2,4006870 <__alt_data_end+0xfc006870>
 40068f0:	9de7c83a 	sub	r19,r19,r23
 40068f4:	98001f26 	beq	r19,zero,4006974 <__sfvwrite_r+0x2fc>
 40068f8:	a0800217 	ldw	r2,8(r20)
 40068fc:	e5f9883a 	add	fp,fp,r23
 4006900:	95e5c83a 	sub	r18,r18,r23
 4006904:	15efc83a 	sub	r23,r2,r23
 4006908:	a5c00215 	stw	r23,8(r20)
 400690c:	b83f8726 	beq	r23,zero,400672c <__alt_data_end+0xfc00672c>
 4006910:	903fe11e 	bne	r18,zero,4006898 <__alt_data_end+0xfc006898>
 4006914:	8f000017 	ldw	fp,0(r17)
 4006918:	8c800117 	ldw	r18,4(r17)
 400691c:	0011883a 	mov	r8,zero
 4006920:	8c400204 	addi	r17,r17,8
 4006924:	003fdb06 	br	4006894 <__alt_data_end+0xfc006894>
 4006928:	180d883a 	mov	r6,r3
 400692c:	e00b883a 	mov	r5,fp
 4006930:	da000115 	stw	r8,4(sp)
 4006934:	d8c00015 	stw	r3,0(sp)
 4006938:	400798c0 	call	400798c <memmove>
 400693c:	d8c00017 	ldw	r3,0(sp)
 4006940:	80800017 	ldw	r2,0(r16)
 4006944:	800b883a 	mov	r5,r16
 4006948:	a809883a 	mov	r4,r21
 400694c:	10c5883a 	add	r2,r2,r3
 4006950:	80800015 	stw	r2,0(r16)
 4006954:	d8c00015 	stw	r3,0(sp)
 4006958:	4005e180 	call	4005e18 <_fflush_r>
 400695c:	d8c00017 	ldw	r3,0(sp)
 4006960:	da000117 	ldw	r8,4(sp)
 4006964:	103fc21e 	bne	r2,zero,4006870 <__alt_data_end+0xfc006870>
 4006968:	182f883a 	mov	r23,r3
 400696c:	9de7c83a 	sub	r19,r19,r23
 4006970:	983fe11e 	bne	r19,zero,40068f8 <__alt_data_end+0xfc0068f8>
 4006974:	800b883a 	mov	r5,r16
 4006978:	a809883a 	mov	r4,r21
 400697c:	4005e180 	call	4005e18 <_fflush_r>
 4006980:	103fbb1e 	bne	r2,zero,4006870 <__alt_data_end+0xfc006870>
 4006984:	0011883a 	mov	r8,zero
 4006988:	003fdb06 	br	40068f8 <__alt_data_end+0xfc0068f8>
 400698c:	94c0012e 	bgeu	r18,r19,4006994 <__sfvwrite_r+0x31c>
 4006990:	9027883a 	mov	r19,r18
 4006994:	980d883a 	mov	r6,r19
 4006998:	e00b883a 	mov	r5,fp
 400699c:	400798c0 	call	400798c <memmove>
 40069a0:	80800217 	ldw	r2,8(r16)
 40069a4:	80c00017 	ldw	r3,0(r16)
 40069a8:	14c5c83a 	sub	r2,r2,r19
 40069ac:	1cc7883a 	add	r3,r3,r19
 40069b0:	80800215 	stw	r2,8(r16)
 40069b4:	80c00015 	stw	r3,0(r16)
 40069b8:	10004326 	beq	r2,zero,4006ac8 <__sfvwrite_r+0x450>
 40069bc:	9805883a 	mov	r2,r19
 40069c0:	003f8606 	br	40067dc <__alt_data_end+0xfc0067dc>
 40069c4:	b00d883a 	mov	r6,r22
 40069c8:	e00b883a 	mov	r5,fp
 40069cc:	da000115 	stw	r8,4(sp)
 40069d0:	400798c0 	call	400798c <memmove>
 40069d4:	80800217 	ldw	r2,8(r16)
 40069d8:	80c00017 	ldw	r3,0(r16)
 40069dc:	da000117 	ldw	r8,4(sp)
 40069e0:	1585c83a 	sub	r2,r2,r22
 40069e4:	1dad883a 	add	r22,r3,r22
 40069e8:	80800215 	stw	r2,8(r16)
 40069ec:	85800015 	stw	r22,0(r16)
 40069f0:	003fbf06 	br	40068f0 <__alt_data_end+0xfc0068f0>
 40069f4:	81000017 	ldw	r4,0(r16)
 40069f8:	9027883a 	mov	r19,r18
 40069fc:	902f883a 	mov	r23,r18
 4006a00:	003f6c06 	br	40067b4 <__alt_data_end+0xfc0067b4>
 4006a04:	900d883a 	mov	r6,r18
 4006a08:	01400284 	movi	r5,10
 4006a0c:	e009883a 	mov	r4,fp
 4006a10:	40077600 	call	4007760 <memchr>
 4006a14:	10003e26 	beq	r2,zero,4006b10 <__sfvwrite_r+0x498>
 4006a18:	10800044 	addi	r2,r2,1
 4006a1c:	1727c83a 	sub	r19,r2,fp
 4006a20:	02000044 	movi	r8,1
 4006a24:	003f9d06 	br	400689c <__alt_data_end+0xfc00689c>
 4006a28:	80800517 	ldw	r2,20(r16)
 4006a2c:	81400417 	ldw	r5,16(r16)
 4006a30:	81c00017 	ldw	r7,0(r16)
 4006a34:	10a7883a 	add	r19,r2,r2
 4006a38:	9885883a 	add	r2,r19,r2
 4006a3c:	1026d7fa 	srli	r19,r2,31
 4006a40:	396dc83a 	sub	r22,r7,r5
 4006a44:	b1000044 	addi	r4,r22,1
 4006a48:	9885883a 	add	r2,r19,r2
 4006a4c:	1027d07a 	srai	r19,r2,1
 4006a50:	2485883a 	add	r2,r4,r18
 4006a54:	980d883a 	mov	r6,r19
 4006a58:	9880022e 	bgeu	r19,r2,4006a64 <__sfvwrite_r+0x3ec>
 4006a5c:	1027883a 	mov	r19,r2
 4006a60:	100d883a 	mov	r6,r2
 4006a64:	18c1000c 	andi	r3,r3,1024
 4006a68:	18001c26 	beq	r3,zero,4006adc <__sfvwrite_r+0x464>
 4006a6c:	300b883a 	mov	r5,r6
 4006a70:	a809883a 	mov	r4,r21
 4006a74:	4006f540 	call	4006f54 <_malloc_r>
 4006a78:	102f883a 	mov	r23,r2
 4006a7c:	10002926 	beq	r2,zero,4006b24 <__sfvwrite_r+0x4ac>
 4006a80:	81400417 	ldw	r5,16(r16)
 4006a84:	b00d883a 	mov	r6,r22
 4006a88:	1009883a 	mov	r4,r2
 4006a8c:	40078440 	call	4007844 <memcpy>
 4006a90:	8080030b 	ldhu	r2,12(r16)
 4006a94:	00fedfc4 	movi	r3,-1153
 4006a98:	10c4703a 	and	r2,r2,r3
 4006a9c:	10802014 	ori	r2,r2,128
 4006aa0:	8080030d 	sth	r2,12(r16)
 4006aa4:	bd89883a 	add	r4,r23,r22
 4006aa8:	9d8fc83a 	sub	r7,r19,r22
 4006aac:	85c00415 	stw	r23,16(r16)
 4006ab0:	84c00515 	stw	r19,20(r16)
 4006ab4:	81000015 	stw	r4,0(r16)
 4006ab8:	9027883a 	mov	r19,r18
 4006abc:	81c00215 	stw	r7,8(r16)
 4006ac0:	902f883a 	mov	r23,r18
 4006ac4:	003f3b06 	br	40067b4 <__alt_data_end+0xfc0067b4>
 4006ac8:	800b883a 	mov	r5,r16
 4006acc:	a809883a 	mov	r4,r21
 4006ad0:	4005e180 	call	4005e18 <_fflush_r>
 4006ad4:	103fb926 	beq	r2,zero,40069bc <__alt_data_end+0xfc0069bc>
 4006ad8:	003f6506 	br	4006870 <__alt_data_end+0xfc006870>
 4006adc:	a809883a 	mov	r4,r21
 4006ae0:	4008c0c0 	call	4008c0c <_realloc_r>
 4006ae4:	102f883a 	mov	r23,r2
 4006ae8:	103fee1e 	bne	r2,zero,4006aa4 <__alt_data_end+0xfc006aa4>
 4006aec:	81400417 	ldw	r5,16(r16)
 4006af0:	a809883a 	mov	r4,r21
 4006af4:	40063680 	call	4006368 <_free_r>
 4006af8:	8080030b 	ldhu	r2,12(r16)
 4006afc:	00ffdfc4 	movi	r3,-129
 4006b00:	1884703a 	and	r2,r3,r2
 4006b04:	00c00304 	movi	r3,12
 4006b08:	a8c00015 	stw	r3,0(r21)
 4006b0c:	003f5906 	br	4006874 <__alt_data_end+0xfc006874>
 4006b10:	94c00044 	addi	r19,r18,1
 4006b14:	02000044 	movi	r8,1
 4006b18:	003f6006 	br	400689c <__alt_data_end+0xfc00689c>
 4006b1c:	00bfffc4 	movi	r2,-1
 4006b20:	003f0306 	br	4006730 <__alt_data_end+0xfc006730>
 4006b24:	00800304 	movi	r2,12
 4006b28:	a8800015 	stw	r2,0(r21)
 4006b2c:	8080030b 	ldhu	r2,12(r16)
 4006b30:	003f5006 	br	4006874 <__alt_data_end+0xfc006874>

04006b34 <_fwalk>:
 4006b34:	defff704 	addi	sp,sp,-36
 4006b38:	dd000415 	stw	r20,16(sp)
 4006b3c:	dfc00815 	stw	ra,32(sp)
 4006b40:	ddc00715 	stw	r23,28(sp)
 4006b44:	dd800615 	stw	r22,24(sp)
 4006b48:	dd400515 	stw	r21,20(sp)
 4006b4c:	dcc00315 	stw	r19,12(sp)
 4006b50:	dc800215 	stw	r18,8(sp)
 4006b54:	dc400115 	stw	r17,4(sp)
 4006b58:	dc000015 	stw	r16,0(sp)
 4006b5c:	2500b804 	addi	r20,r4,736
 4006b60:	a0002326 	beq	r20,zero,4006bf0 <_fwalk+0xbc>
 4006b64:	282b883a 	mov	r21,r5
 4006b68:	002f883a 	mov	r23,zero
 4006b6c:	05800044 	movi	r22,1
 4006b70:	04ffffc4 	movi	r19,-1
 4006b74:	a4400117 	ldw	r17,4(r20)
 4006b78:	a4800217 	ldw	r18,8(r20)
 4006b7c:	8c7fffc4 	addi	r17,r17,-1
 4006b80:	88000d16 	blt	r17,zero,4006bb8 <_fwalk+0x84>
 4006b84:	94000304 	addi	r16,r18,12
 4006b88:	94800384 	addi	r18,r18,14
 4006b8c:	8080000b 	ldhu	r2,0(r16)
 4006b90:	8c7fffc4 	addi	r17,r17,-1
 4006b94:	813ffd04 	addi	r4,r16,-12
 4006b98:	b080042e 	bgeu	r22,r2,4006bac <_fwalk+0x78>
 4006b9c:	9080000f 	ldh	r2,0(r18)
 4006ba0:	14c00226 	beq	r2,r19,4006bac <_fwalk+0x78>
 4006ba4:	a83ee83a 	callr	r21
 4006ba8:	b8aeb03a 	or	r23,r23,r2
 4006bac:	84001a04 	addi	r16,r16,104
 4006bb0:	94801a04 	addi	r18,r18,104
 4006bb4:	8cfff51e 	bne	r17,r19,4006b8c <__alt_data_end+0xfc006b8c>
 4006bb8:	a5000017 	ldw	r20,0(r20)
 4006bbc:	a03fed1e 	bne	r20,zero,4006b74 <__alt_data_end+0xfc006b74>
 4006bc0:	b805883a 	mov	r2,r23
 4006bc4:	dfc00817 	ldw	ra,32(sp)
 4006bc8:	ddc00717 	ldw	r23,28(sp)
 4006bcc:	dd800617 	ldw	r22,24(sp)
 4006bd0:	dd400517 	ldw	r21,20(sp)
 4006bd4:	dd000417 	ldw	r20,16(sp)
 4006bd8:	dcc00317 	ldw	r19,12(sp)
 4006bdc:	dc800217 	ldw	r18,8(sp)
 4006be0:	dc400117 	ldw	r17,4(sp)
 4006be4:	dc000017 	ldw	r16,0(sp)
 4006be8:	dec00904 	addi	sp,sp,36
 4006bec:	f800283a 	ret
 4006bf0:	002f883a 	mov	r23,zero
 4006bf4:	003ff206 	br	4006bc0 <__alt_data_end+0xfc006bc0>

04006bf8 <_fwalk_reent>:
 4006bf8:	defff704 	addi	sp,sp,-36
 4006bfc:	dd000415 	stw	r20,16(sp)
 4006c00:	dfc00815 	stw	ra,32(sp)
 4006c04:	ddc00715 	stw	r23,28(sp)
 4006c08:	dd800615 	stw	r22,24(sp)
 4006c0c:	dd400515 	stw	r21,20(sp)
 4006c10:	dcc00315 	stw	r19,12(sp)
 4006c14:	dc800215 	stw	r18,8(sp)
 4006c18:	dc400115 	stw	r17,4(sp)
 4006c1c:	dc000015 	stw	r16,0(sp)
 4006c20:	2500b804 	addi	r20,r4,736
 4006c24:	a0002326 	beq	r20,zero,4006cb4 <_fwalk_reent+0xbc>
 4006c28:	282b883a 	mov	r21,r5
 4006c2c:	2027883a 	mov	r19,r4
 4006c30:	002f883a 	mov	r23,zero
 4006c34:	05800044 	movi	r22,1
 4006c38:	04bfffc4 	movi	r18,-1
 4006c3c:	a4400117 	ldw	r17,4(r20)
 4006c40:	a4000217 	ldw	r16,8(r20)
 4006c44:	8c7fffc4 	addi	r17,r17,-1
 4006c48:	88000c16 	blt	r17,zero,4006c7c <_fwalk_reent+0x84>
 4006c4c:	84000304 	addi	r16,r16,12
 4006c50:	8080000b 	ldhu	r2,0(r16)
 4006c54:	8c7fffc4 	addi	r17,r17,-1
 4006c58:	817ffd04 	addi	r5,r16,-12
 4006c5c:	b080052e 	bgeu	r22,r2,4006c74 <_fwalk_reent+0x7c>
 4006c60:	8080008f 	ldh	r2,2(r16)
 4006c64:	9809883a 	mov	r4,r19
 4006c68:	14800226 	beq	r2,r18,4006c74 <_fwalk_reent+0x7c>
 4006c6c:	a83ee83a 	callr	r21
 4006c70:	b8aeb03a 	or	r23,r23,r2
 4006c74:	84001a04 	addi	r16,r16,104
 4006c78:	8cbff51e 	bne	r17,r18,4006c50 <__alt_data_end+0xfc006c50>
 4006c7c:	a5000017 	ldw	r20,0(r20)
 4006c80:	a03fee1e 	bne	r20,zero,4006c3c <__alt_data_end+0xfc006c3c>
 4006c84:	b805883a 	mov	r2,r23
 4006c88:	dfc00817 	ldw	ra,32(sp)
 4006c8c:	ddc00717 	ldw	r23,28(sp)
 4006c90:	dd800617 	ldw	r22,24(sp)
 4006c94:	dd400517 	ldw	r21,20(sp)
 4006c98:	dd000417 	ldw	r20,16(sp)
 4006c9c:	dcc00317 	ldw	r19,12(sp)
 4006ca0:	dc800217 	ldw	r18,8(sp)
 4006ca4:	dc400117 	ldw	r17,4(sp)
 4006ca8:	dc000017 	ldw	r16,0(sp)
 4006cac:	dec00904 	addi	sp,sp,36
 4006cb0:	f800283a 	ret
 4006cb4:	002f883a 	mov	r23,zero
 4006cb8:	003ff206 	br	4006c84 <__alt_data_end+0xfc006c84>

04006cbc <_setlocale_r>:
 4006cbc:	30001b26 	beq	r6,zero,4006d2c <_setlocale_r+0x70>
 4006cc0:	014100f4 	movhi	r5,1027
 4006cc4:	defffe04 	addi	sp,sp,-8
 4006cc8:	29455104 	addi	r5,r5,5444
 4006ccc:	3009883a 	mov	r4,r6
 4006cd0:	dc000015 	stw	r16,0(sp)
 4006cd4:	dfc00115 	stw	ra,4(sp)
 4006cd8:	3021883a 	mov	r16,r6
 4006cdc:	40093740 	call	4009374 <strcmp>
 4006ce0:	1000061e 	bne	r2,zero,4006cfc <_setlocale_r+0x40>
 4006ce4:	008100f4 	movhi	r2,1027
 4006ce8:	10855004 	addi	r2,r2,5440
 4006cec:	dfc00117 	ldw	ra,4(sp)
 4006cf0:	dc000017 	ldw	r16,0(sp)
 4006cf4:	dec00204 	addi	sp,sp,8
 4006cf8:	f800283a 	ret
 4006cfc:	014100f4 	movhi	r5,1027
 4006d00:	29455004 	addi	r5,r5,5440
 4006d04:	8009883a 	mov	r4,r16
 4006d08:	40093740 	call	4009374 <strcmp>
 4006d0c:	103ff526 	beq	r2,zero,4006ce4 <__alt_data_end+0xfc006ce4>
 4006d10:	014100f4 	movhi	r5,1027
 4006d14:	29453b04 	addi	r5,r5,5356
 4006d18:	8009883a 	mov	r4,r16
 4006d1c:	40093740 	call	4009374 <strcmp>
 4006d20:	103ff026 	beq	r2,zero,4006ce4 <__alt_data_end+0xfc006ce4>
 4006d24:	0005883a 	mov	r2,zero
 4006d28:	003ff006 	br	4006cec <__alt_data_end+0xfc006cec>
 4006d2c:	008100f4 	movhi	r2,1027
 4006d30:	10855004 	addi	r2,r2,5440
 4006d34:	f800283a 	ret

04006d38 <__locale_charset>:
 4006d38:	008100f4 	movhi	r2,1027
 4006d3c:	108ce104 	addi	r2,r2,13188
 4006d40:	f800283a 	ret

04006d44 <__locale_mb_cur_max>:
 4006d44:	008100f4 	movhi	r2,1027
 4006d48:	10927e04 	addi	r2,r2,18936
 4006d4c:	10800017 	ldw	r2,0(r2)
 4006d50:	f800283a 	ret

04006d54 <__locale_msgcharset>:
 4006d54:	008100f4 	movhi	r2,1027
 4006d58:	108cd904 	addi	r2,r2,13156
 4006d5c:	f800283a 	ret

04006d60 <__locale_cjk_lang>:
 4006d60:	0005883a 	mov	r2,zero
 4006d64:	f800283a 	ret

04006d68 <_localeconv_r>:
 4006d68:	008100f4 	movhi	r2,1027
 4006d6c:	108ce904 	addi	r2,r2,13220
 4006d70:	f800283a 	ret

04006d74 <setlocale>:
 4006d74:	008100f4 	movhi	r2,1027
 4006d78:	10927d04 	addi	r2,r2,18932
 4006d7c:	280d883a 	mov	r6,r5
 4006d80:	200b883a 	mov	r5,r4
 4006d84:	11000017 	ldw	r4,0(r2)
 4006d88:	4006cbc1 	jmpi	4006cbc <_setlocale_r>

04006d8c <localeconv>:
 4006d8c:	008100f4 	movhi	r2,1027
 4006d90:	108ce904 	addi	r2,r2,13220
 4006d94:	f800283a 	ret

04006d98 <__smakebuf_r>:
 4006d98:	2880030b 	ldhu	r2,12(r5)
 4006d9c:	10c0008c 	andi	r3,r2,2
 4006da0:	1800411e 	bne	r3,zero,4006ea8 <__smakebuf_r+0x110>
 4006da4:	deffec04 	addi	sp,sp,-80
 4006da8:	dc000f15 	stw	r16,60(sp)
 4006dac:	2821883a 	mov	r16,r5
 4006db0:	2940038f 	ldh	r5,14(r5)
 4006db4:	dc401015 	stw	r17,64(sp)
 4006db8:	dfc01315 	stw	ra,76(sp)
 4006dbc:	dcc01215 	stw	r19,72(sp)
 4006dc0:	dc801115 	stw	r18,68(sp)
 4006dc4:	2023883a 	mov	r17,r4
 4006dc8:	28001c16 	blt	r5,zero,4006e3c <__smakebuf_r+0xa4>
 4006dcc:	d80d883a 	mov	r6,sp
 4006dd0:	400af1c0 	call	400af1c <_fstat_r>
 4006dd4:	10001816 	blt	r2,zero,4006e38 <__smakebuf_r+0xa0>
 4006dd8:	d8800117 	ldw	r2,4(sp)
 4006ddc:	00e00014 	movui	r3,32768
 4006de0:	10bc000c 	andi	r2,r2,61440
 4006de4:	14c80020 	cmpeqi	r19,r2,8192
 4006de8:	10c03726 	beq	r2,r3,4006ec8 <__smakebuf_r+0x130>
 4006dec:	80c0030b 	ldhu	r3,12(r16)
 4006df0:	18c20014 	ori	r3,r3,2048
 4006df4:	80c0030d 	sth	r3,12(r16)
 4006df8:	00c80004 	movi	r3,8192
 4006dfc:	10c0521e 	bne	r2,r3,4006f48 <__smakebuf_r+0x1b0>
 4006e00:	8140038f 	ldh	r5,14(r16)
 4006e04:	8809883a 	mov	r4,r17
 4006e08:	400af780 	call	400af78 <_isatty_r>
 4006e0c:	10004c26 	beq	r2,zero,4006f40 <__smakebuf_r+0x1a8>
 4006e10:	8080030b 	ldhu	r2,12(r16)
 4006e14:	80c010c4 	addi	r3,r16,67
 4006e18:	80c00015 	stw	r3,0(r16)
 4006e1c:	10800054 	ori	r2,r2,1
 4006e20:	8080030d 	sth	r2,12(r16)
 4006e24:	00800044 	movi	r2,1
 4006e28:	80c00415 	stw	r3,16(r16)
 4006e2c:	80800515 	stw	r2,20(r16)
 4006e30:	04810004 	movi	r18,1024
 4006e34:	00000706 	br	4006e54 <__smakebuf_r+0xbc>
 4006e38:	8080030b 	ldhu	r2,12(r16)
 4006e3c:	10c0200c 	andi	r3,r2,128
 4006e40:	18001f1e 	bne	r3,zero,4006ec0 <__smakebuf_r+0x128>
 4006e44:	04810004 	movi	r18,1024
 4006e48:	10820014 	ori	r2,r2,2048
 4006e4c:	8080030d 	sth	r2,12(r16)
 4006e50:	0027883a 	mov	r19,zero
 4006e54:	900b883a 	mov	r5,r18
 4006e58:	8809883a 	mov	r4,r17
 4006e5c:	4006f540 	call	4006f54 <_malloc_r>
 4006e60:	10002c26 	beq	r2,zero,4006f14 <__smakebuf_r+0x17c>
 4006e64:	80c0030b 	ldhu	r3,12(r16)
 4006e68:	01010034 	movhi	r4,1024
 4006e6c:	2117ab04 	addi	r4,r4,24236
 4006e70:	89000f15 	stw	r4,60(r17)
 4006e74:	18c02014 	ori	r3,r3,128
 4006e78:	80c0030d 	sth	r3,12(r16)
 4006e7c:	80800015 	stw	r2,0(r16)
 4006e80:	80800415 	stw	r2,16(r16)
 4006e84:	84800515 	stw	r18,20(r16)
 4006e88:	98001a1e 	bne	r19,zero,4006ef4 <__smakebuf_r+0x15c>
 4006e8c:	dfc01317 	ldw	ra,76(sp)
 4006e90:	dcc01217 	ldw	r19,72(sp)
 4006e94:	dc801117 	ldw	r18,68(sp)
 4006e98:	dc401017 	ldw	r17,64(sp)
 4006e9c:	dc000f17 	ldw	r16,60(sp)
 4006ea0:	dec01404 	addi	sp,sp,80
 4006ea4:	f800283a 	ret
 4006ea8:	288010c4 	addi	r2,r5,67
 4006eac:	28800015 	stw	r2,0(r5)
 4006eb0:	28800415 	stw	r2,16(r5)
 4006eb4:	00800044 	movi	r2,1
 4006eb8:	28800515 	stw	r2,20(r5)
 4006ebc:	f800283a 	ret
 4006ec0:	04801004 	movi	r18,64
 4006ec4:	003fe006 	br	4006e48 <__alt_data_end+0xfc006e48>
 4006ec8:	81000a17 	ldw	r4,40(r16)
 4006ecc:	00c10074 	movhi	r3,1025
 4006ed0:	18e4c404 	addi	r3,r3,-27888
 4006ed4:	20ffc51e 	bne	r4,r3,4006dec <__alt_data_end+0xfc006dec>
 4006ed8:	8080030b 	ldhu	r2,12(r16)
 4006edc:	04810004 	movi	r18,1024
 4006ee0:	84801315 	stw	r18,76(r16)
 4006ee4:	1484b03a 	or	r2,r2,r18
 4006ee8:	8080030d 	sth	r2,12(r16)
 4006eec:	0027883a 	mov	r19,zero
 4006ef0:	003fd806 	br	4006e54 <__alt_data_end+0xfc006e54>
 4006ef4:	8140038f 	ldh	r5,14(r16)
 4006ef8:	8809883a 	mov	r4,r17
 4006efc:	400af780 	call	400af78 <_isatty_r>
 4006f00:	103fe226 	beq	r2,zero,4006e8c <__alt_data_end+0xfc006e8c>
 4006f04:	8080030b 	ldhu	r2,12(r16)
 4006f08:	10800054 	ori	r2,r2,1
 4006f0c:	8080030d 	sth	r2,12(r16)
 4006f10:	003fde06 	br	4006e8c <__alt_data_end+0xfc006e8c>
 4006f14:	8080030b 	ldhu	r2,12(r16)
 4006f18:	10c0800c 	andi	r3,r2,512
 4006f1c:	183fdb1e 	bne	r3,zero,4006e8c <__alt_data_end+0xfc006e8c>
 4006f20:	10800094 	ori	r2,r2,2
 4006f24:	80c010c4 	addi	r3,r16,67
 4006f28:	8080030d 	sth	r2,12(r16)
 4006f2c:	00800044 	movi	r2,1
 4006f30:	80c00015 	stw	r3,0(r16)
 4006f34:	80c00415 	stw	r3,16(r16)
 4006f38:	80800515 	stw	r2,20(r16)
 4006f3c:	003fd306 	br	4006e8c <__alt_data_end+0xfc006e8c>
 4006f40:	04810004 	movi	r18,1024
 4006f44:	003fc306 	br	4006e54 <__alt_data_end+0xfc006e54>
 4006f48:	0027883a 	mov	r19,zero
 4006f4c:	04810004 	movi	r18,1024
 4006f50:	003fc006 	br	4006e54 <__alt_data_end+0xfc006e54>

04006f54 <_malloc_r>:
 4006f54:	defff504 	addi	sp,sp,-44
 4006f58:	dc800315 	stw	r18,12(sp)
 4006f5c:	dfc00a15 	stw	ra,40(sp)
 4006f60:	df000915 	stw	fp,36(sp)
 4006f64:	ddc00815 	stw	r23,32(sp)
 4006f68:	dd800715 	stw	r22,28(sp)
 4006f6c:	dd400615 	stw	r21,24(sp)
 4006f70:	dd000515 	stw	r20,20(sp)
 4006f74:	dcc00415 	stw	r19,16(sp)
 4006f78:	dc400215 	stw	r17,8(sp)
 4006f7c:	dc000115 	stw	r16,4(sp)
 4006f80:	288002c4 	addi	r2,r5,11
 4006f84:	00c00584 	movi	r3,22
 4006f88:	2025883a 	mov	r18,r4
 4006f8c:	18807f2e 	bgeu	r3,r2,400718c <_malloc_r+0x238>
 4006f90:	047ffe04 	movi	r17,-8
 4006f94:	1462703a 	and	r17,r2,r17
 4006f98:	8800a316 	blt	r17,zero,4007228 <_malloc_r+0x2d4>
 4006f9c:	8940a236 	bltu	r17,r5,4007228 <_malloc_r+0x2d4>
 4006fa0:	400ed000 	call	400ed00 <__malloc_lock>
 4006fa4:	00807dc4 	movi	r2,503
 4006fa8:	1441e92e 	bgeu	r2,r17,4007750 <_malloc_r+0x7fc>
 4006fac:	8804d27a 	srli	r2,r17,9
 4006fb0:	1000a126 	beq	r2,zero,4007238 <_malloc_r+0x2e4>
 4006fb4:	00c00104 	movi	r3,4
 4006fb8:	18811e36 	bltu	r3,r2,4007434 <_malloc_r+0x4e0>
 4006fbc:	8804d1ba 	srli	r2,r17,6
 4006fc0:	12000e44 	addi	r8,r2,57
 4006fc4:	11c00e04 	addi	r7,r2,56
 4006fc8:	4209883a 	add	r4,r8,r8
 4006fcc:	04c100f4 	movhi	r19,1027
 4006fd0:	2109883a 	add	r4,r4,r4
 4006fd4:	9cccf704 	addi	r19,r19,13276
 4006fd8:	2109883a 	add	r4,r4,r4
 4006fdc:	9909883a 	add	r4,r19,r4
 4006fe0:	24000117 	ldw	r16,4(r4)
 4006fe4:	213ffe04 	addi	r4,r4,-8
 4006fe8:	24009726 	beq	r4,r16,4007248 <_malloc_r+0x2f4>
 4006fec:	80800117 	ldw	r2,4(r16)
 4006ff0:	01bfff04 	movi	r6,-4
 4006ff4:	014003c4 	movi	r5,15
 4006ff8:	1184703a 	and	r2,r2,r6
 4006ffc:	1447c83a 	sub	r3,r2,r17
 4007000:	28c00716 	blt	r5,r3,4007020 <_malloc_r+0xcc>
 4007004:	1800920e 	bge	r3,zero,4007250 <_malloc_r+0x2fc>
 4007008:	84000317 	ldw	r16,12(r16)
 400700c:	24008e26 	beq	r4,r16,4007248 <_malloc_r+0x2f4>
 4007010:	80800117 	ldw	r2,4(r16)
 4007014:	1184703a 	and	r2,r2,r6
 4007018:	1447c83a 	sub	r3,r2,r17
 400701c:	28fff90e 	bge	r5,r3,4007004 <__alt_data_end+0xfc007004>
 4007020:	3809883a 	mov	r4,r7
 4007024:	018100f4 	movhi	r6,1027
 4007028:	9c000417 	ldw	r16,16(r19)
 400702c:	318cf704 	addi	r6,r6,13276
 4007030:	32000204 	addi	r8,r6,8
 4007034:	82013426 	beq	r16,r8,4007508 <_malloc_r+0x5b4>
 4007038:	80c00117 	ldw	r3,4(r16)
 400703c:	00bfff04 	movi	r2,-4
 4007040:	188e703a 	and	r7,r3,r2
 4007044:	3c45c83a 	sub	r2,r7,r17
 4007048:	00c003c4 	movi	r3,15
 400704c:	18811f16 	blt	r3,r2,40074cc <_malloc_r+0x578>
 4007050:	32000515 	stw	r8,20(r6)
 4007054:	32000415 	stw	r8,16(r6)
 4007058:	10007f0e 	bge	r2,zero,4007258 <_malloc_r+0x304>
 400705c:	00807fc4 	movi	r2,511
 4007060:	11c0fd36 	bltu	r2,r7,4007458 <_malloc_r+0x504>
 4007064:	3806d0fa 	srli	r3,r7,3
 4007068:	01c00044 	movi	r7,1
 400706c:	30800117 	ldw	r2,4(r6)
 4007070:	19400044 	addi	r5,r3,1
 4007074:	294b883a 	add	r5,r5,r5
 4007078:	1807d0ba 	srai	r3,r3,2
 400707c:	294b883a 	add	r5,r5,r5
 4007080:	294b883a 	add	r5,r5,r5
 4007084:	298b883a 	add	r5,r5,r6
 4007088:	38c6983a 	sll	r3,r7,r3
 400708c:	29c00017 	ldw	r7,0(r5)
 4007090:	2a7ffe04 	addi	r9,r5,-8
 4007094:	1886b03a 	or	r3,r3,r2
 4007098:	82400315 	stw	r9,12(r16)
 400709c:	81c00215 	stw	r7,8(r16)
 40070a0:	30c00115 	stw	r3,4(r6)
 40070a4:	2c000015 	stw	r16,0(r5)
 40070a8:	3c000315 	stw	r16,12(r7)
 40070ac:	2005d0ba 	srai	r2,r4,2
 40070b0:	01400044 	movi	r5,1
 40070b4:	288a983a 	sll	r5,r5,r2
 40070b8:	19406f36 	bltu	r3,r5,4007278 <_malloc_r+0x324>
 40070bc:	28c4703a 	and	r2,r5,r3
 40070c0:	10000a1e 	bne	r2,zero,40070ec <_malloc_r+0x198>
 40070c4:	00bfff04 	movi	r2,-4
 40070c8:	294b883a 	add	r5,r5,r5
 40070cc:	2088703a 	and	r4,r4,r2
 40070d0:	28c4703a 	and	r2,r5,r3
 40070d4:	21000104 	addi	r4,r4,4
 40070d8:	1000041e 	bne	r2,zero,40070ec <_malloc_r+0x198>
 40070dc:	294b883a 	add	r5,r5,r5
 40070e0:	28c4703a 	and	r2,r5,r3
 40070e4:	21000104 	addi	r4,r4,4
 40070e8:	103ffc26 	beq	r2,zero,40070dc <__alt_data_end+0xfc0070dc>
 40070ec:	02bfff04 	movi	r10,-4
 40070f0:	024003c4 	movi	r9,15
 40070f4:	21800044 	addi	r6,r4,1
 40070f8:	318d883a 	add	r6,r6,r6
 40070fc:	318d883a 	add	r6,r6,r6
 4007100:	318d883a 	add	r6,r6,r6
 4007104:	998d883a 	add	r6,r19,r6
 4007108:	333ffe04 	addi	r12,r6,-8
 400710c:	2017883a 	mov	r11,r4
 4007110:	31800104 	addi	r6,r6,4
 4007114:	34000017 	ldw	r16,0(r6)
 4007118:	31fffd04 	addi	r7,r6,-12
 400711c:	81c0041e 	bne	r16,r7,4007130 <_malloc_r+0x1dc>
 4007120:	0000fb06 	br	4007510 <_malloc_r+0x5bc>
 4007124:	1801030e 	bge	r3,zero,4007534 <_malloc_r+0x5e0>
 4007128:	84000317 	ldw	r16,12(r16)
 400712c:	81c0f826 	beq	r16,r7,4007510 <_malloc_r+0x5bc>
 4007130:	80800117 	ldw	r2,4(r16)
 4007134:	1284703a 	and	r2,r2,r10
 4007138:	1447c83a 	sub	r3,r2,r17
 400713c:	48fff90e 	bge	r9,r3,4007124 <__alt_data_end+0xfc007124>
 4007140:	80800317 	ldw	r2,12(r16)
 4007144:	81000217 	ldw	r4,8(r16)
 4007148:	89400054 	ori	r5,r17,1
 400714c:	81400115 	stw	r5,4(r16)
 4007150:	20800315 	stw	r2,12(r4)
 4007154:	11000215 	stw	r4,8(r2)
 4007158:	8463883a 	add	r17,r16,r17
 400715c:	9c400515 	stw	r17,20(r19)
 4007160:	9c400415 	stw	r17,16(r19)
 4007164:	18800054 	ori	r2,r3,1
 4007168:	88800115 	stw	r2,4(r17)
 400716c:	8a000315 	stw	r8,12(r17)
 4007170:	8a000215 	stw	r8,8(r17)
 4007174:	88e3883a 	add	r17,r17,r3
 4007178:	88c00015 	stw	r3,0(r17)
 400717c:	9009883a 	mov	r4,r18
 4007180:	400ed240 	call	400ed24 <__malloc_unlock>
 4007184:	80800204 	addi	r2,r16,8
 4007188:	00001b06 	br	40071f8 <_malloc_r+0x2a4>
 400718c:	04400404 	movi	r17,16
 4007190:	89402536 	bltu	r17,r5,4007228 <_malloc_r+0x2d4>
 4007194:	400ed000 	call	400ed00 <__malloc_lock>
 4007198:	00800184 	movi	r2,6
 400719c:	01000084 	movi	r4,2
 40071a0:	04c100f4 	movhi	r19,1027
 40071a4:	1085883a 	add	r2,r2,r2
 40071a8:	9cccf704 	addi	r19,r19,13276
 40071ac:	1085883a 	add	r2,r2,r2
 40071b0:	9885883a 	add	r2,r19,r2
 40071b4:	14000117 	ldw	r16,4(r2)
 40071b8:	10fffe04 	addi	r3,r2,-8
 40071bc:	80c0d926 	beq	r16,r3,4007524 <_malloc_r+0x5d0>
 40071c0:	80c00117 	ldw	r3,4(r16)
 40071c4:	81000317 	ldw	r4,12(r16)
 40071c8:	00bfff04 	movi	r2,-4
 40071cc:	1884703a 	and	r2,r3,r2
 40071d0:	81400217 	ldw	r5,8(r16)
 40071d4:	8085883a 	add	r2,r16,r2
 40071d8:	10c00117 	ldw	r3,4(r2)
 40071dc:	29000315 	stw	r4,12(r5)
 40071e0:	21400215 	stw	r5,8(r4)
 40071e4:	18c00054 	ori	r3,r3,1
 40071e8:	10c00115 	stw	r3,4(r2)
 40071ec:	9009883a 	mov	r4,r18
 40071f0:	400ed240 	call	400ed24 <__malloc_unlock>
 40071f4:	80800204 	addi	r2,r16,8
 40071f8:	dfc00a17 	ldw	ra,40(sp)
 40071fc:	df000917 	ldw	fp,36(sp)
 4007200:	ddc00817 	ldw	r23,32(sp)
 4007204:	dd800717 	ldw	r22,28(sp)
 4007208:	dd400617 	ldw	r21,24(sp)
 400720c:	dd000517 	ldw	r20,20(sp)
 4007210:	dcc00417 	ldw	r19,16(sp)
 4007214:	dc800317 	ldw	r18,12(sp)
 4007218:	dc400217 	ldw	r17,8(sp)
 400721c:	dc000117 	ldw	r16,4(sp)
 4007220:	dec00b04 	addi	sp,sp,44
 4007224:	f800283a 	ret
 4007228:	00800304 	movi	r2,12
 400722c:	90800015 	stw	r2,0(r18)
 4007230:	0005883a 	mov	r2,zero
 4007234:	003ff006 	br	40071f8 <__alt_data_end+0xfc0071f8>
 4007238:	01002004 	movi	r4,128
 400723c:	02001004 	movi	r8,64
 4007240:	01c00fc4 	movi	r7,63
 4007244:	003f6106 	br	4006fcc <__alt_data_end+0xfc006fcc>
 4007248:	4009883a 	mov	r4,r8
 400724c:	003f7506 	br	4007024 <__alt_data_end+0xfc007024>
 4007250:	81000317 	ldw	r4,12(r16)
 4007254:	003fde06 	br	40071d0 <__alt_data_end+0xfc0071d0>
 4007258:	81c5883a 	add	r2,r16,r7
 400725c:	11400117 	ldw	r5,4(r2)
 4007260:	9009883a 	mov	r4,r18
 4007264:	29400054 	ori	r5,r5,1
 4007268:	11400115 	stw	r5,4(r2)
 400726c:	400ed240 	call	400ed24 <__malloc_unlock>
 4007270:	80800204 	addi	r2,r16,8
 4007274:	003fe006 	br	40071f8 <__alt_data_end+0xfc0071f8>
 4007278:	9c000217 	ldw	r16,8(r19)
 400727c:	00bfff04 	movi	r2,-4
 4007280:	85800117 	ldw	r22,4(r16)
 4007284:	b0ac703a 	and	r22,r22,r2
 4007288:	b4400336 	bltu	r22,r17,4007298 <_malloc_r+0x344>
 400728c:	b445c83a 	sub	r2,r22,r17
 4007290:	00c003c4 	movi	r3,15
 4007294:	18805d16 	blt	r3,r2,400740c <_malloc_r+0x4b8>
 4007298:	05c100f4 	movhi	r23,1027
 400729c:	008100f4 	movhi	r2,1027
 40072a0:	109f2d04 	addi	r2,r2,31924
 40072a4:	bdd27f04 	addi	r23,r23,18940
 40072a8:	15400017 	ldw	r21,0(r2)
 40072ac:	b8c00017 	ldw	r3,0(r23)
 40072b0:	00bfffc4 	movi	r2,-1
 40072b4:	858d883a 	add	r6,r16,r22
 40072b8:	8d6b883a 	add	r21,r17,r21
 40072bc:	1880ea26 	beq	r3,r2,4007668 <_malloc_r+0x714>
 40072c0:	ad4403c4 	addi	r21,r21,4111
 40072c4:	00bc0004 	movi	r2,-4096
 40072c8:	a8aa703a 	and	r21,r21,r2
 40072cc:	a80b883a 	mov	r5,r21
 40072d0:	9009883a 	mov	r4,r18
 40072d4:	d9800015 	stw	r6,0(sp)
 40072d8:	40091e40 	call	40091e4 <_sbrk_r>
 40072dc:	1029883a 	mov	r20,r2
 40072e0:	00bfffc4 	movi	r2,-1
 40072e4:	d9800017 	ldw	r6,0(sp)
 40072e8:	a080e826 	beq	r20,r2,400768c <_malloc_r+0x738>
 40072ec:	a180a636 	bltu	r20,r6,4007588 <_malloc_r+0x634>
 40072f0:	070100f4 	movhi	fp,1027
 40072f4:	e71f3604 	addi	fp,fp,31960
 40072f8:	e0800017 	ldw	r2,0(fp)
 40072fc:	a887883a 	add	r3,r21,r2
 4007300:	e0c00015 	stw	r3,0(fp)
 4007304:	3500e626 	beq	r6,r20,40076a0 <_malloc_r+0x74c>
 4007308:	b9000017 	ldw	r4,0(r23)
 400730c:	00bfffc4 	movi	r2,-1
 4007310:	2080ee26 	beq	r4,r2,40076cc <_malloc_r+0x778>
 4007314:	a185c83a 	sub	r2,r20,r6
 4007318:	10c5883a 	add	r2,r2,r3
 400731c:	e0800015 	stw	r2,0(fp)
 4007320:	a0c001cc 	andi	r3,r20,7
 4007324:	1800bc26 	beq	r3,zero,4007618 <_malloc_r+0x6c4>
 4007328:	a0e9c83a 	sub	r20,r20,r3
 400732c:	00840204 	movi	r2,4104
 4007330:	a5000204 	addi	r20,r20,8
 4007334:	10c7c83a 	sub	r3,r2,r3
 4007338:	a545883a 	add	r2,r20,r21
 400733c:	1083ffcc 	andi	r2,r2,4095
 4007340:	18abc83a 	sub	r21,r3,r2
 4007344:	a80b883a 	mov	r5,r21
 4007348:	9009883a 	mov	r4,r18
 400734c:	40091e40 	call	40091e4 <_sbrk_r>
 4007350:	00ffffc4 	movi	r3,-1
 4007354:	10c0e126 	beq	r2,r3,40076dc <_malloc_r+0x788>
 4007358:	1505c83a 	sub	r2,r2,r20
 400735c:	1545883a 	add	r2,r2,r21
 4007360:	10800054 	ori	r2,r2,1
 4007364:	e0c00017 	ldw	r3,0(fp)
 4007368:	9d000215 	stw	r20,8(r19)
 400736c:	a0800115 	stw	r2,4(r20)
 4007370:	a8c7883a 	add	r3,r21,r3
 4007374:	e0c00015 	stw	r3,0(fp)
 4007378:	84c00e26 	beq	r16,r19,40073b4 <_malloc_r+0x460>
 400737c:	018003c4 	movi	r6,15
 4007380:	3580a72e 	bgeu	r6,r22,4007620 <_malloc_r+0x6cc>
 4007384:	81400117 	ldw	r5,4(r16)
 4007388:	013ffe04 	movi	r4,-8
 400738c:	b0bffd04 	addi	r2,r22,-12
 4007390:	1104703a 	and	r2,r2,r4
 4007394:	2900004c 	andi	r4,r5,1
 4007398:	2088b03a 	or	r4,r4,r2
 400739c:	81000115 	stw	r4,4(r16)
 40073a0:	01400144 	movi	r5,5
 40073a4:	8089883a 	add	r4,r16,r2
 40073a8:	21400115 	stw	r5,4(r4)
 40073ac:	21400215 	stw	r5,8(r4)
 40073b0:	3080cd36 	bltu	r6,r2,40076e8 <_malloc_r+0x794>
 40073b4:	008100f4 	movhi	r2,1027
 40073b8:	109f2c04 	addi	r2,r2,31920
 40073bc:	11000017 	ldw	r4,0(r2)
 40073c0:	20c0012e 	bgeu	r4,r3,40073c8 <_malloc_r+0x474>
 40073c4:	10c00015 	stw	r3,0(r2)
 40073c8:	008100f4 	movhi	r2,1027
 40073cc:	109f2b04 	addi	r2,r2,31916
 40073d0:	11000017 	ldw	r4,0(r2)
 40073d4:	9c000217 	ldw	r16,8(r19)
 40073d8:	20c0012e 	bgeu	r4,r3,40073e0 <_malloc_r+0x48c>
 40073dc:	10c00015 	stw	r3,0(r2)
 40073e0:	80c00117 	ldw	r3,4(r16)
 40073e4:	00bfff04 	movi	r2,-4
 40073e8:	1886703a 	and	r3,r3,r2
 40073ec:	1c45c83a 	sub	r2,r3,r17
 40073f0:	1c400236 	bltu	r3,r17,40073fc <_malloc_r+0x4a8>
 40073f4:	00c003c4 	movi	r3,15
 40073f8:	18800416 	blt	r3,r2,400740c <_malloc_r+0x4b8>
 40073fc:	9009883a 	mov	r4,r18
 4007400:	400ed240 	call	400ed24 <__malloc_unlock>
 4007404:	0005883a 	mov	r2,zero
 4007408:	003f7b06 	br	40071f8 <__alt_data_end+0xfc0071f8>
 400740c:	88c00054 	ori	r3,r17,1
 4007410:	80c00115 	stw	r3,4(r16)
 4007414:	8463883a 	add	r17,r16,r17
 4007418:	10800054 	ori	r2,r2,1
 400741c:	9c400215 	stw	r17,8(r19)
 4007420:	88800115 	stw	r2,4(r17)
 4007424:	9009883a 	mov	r4,r18
 4007428:	400ed240 	call	400ed24 <__malloc_unlock>
 400742c:	80800204 	addi	r2,r16,8
 4007430:	003f7106 	br	40071f8 <__alt_data_end+0xfc0071f8>
 4007434:	00c00504 	movi	r3,20
 4007438:	18804a2e 	bgeu	r3,r2,4007564 <_malloc_r+0x610>
 400743c:	00c01504 	movi	r3,84
 4007440:	18806e36 	bltu	r3,r2,40075fc <_malloc_r+0x6a8>
 4007444:	8804d33a 	srli	r2,r17,12
 4007448:	12001bc4 	addi	r8,r2,111
 400744c:	11c01b84 	addi	r7,r2,110
 4007450:	4209883a 	add	r4,r8,r8
 4007454:	003edd06 	br	4006fcc <__alt_data_end+0xfc006fcc>
 4007458:	3804d27a 	srli	r2,r7,9
 400745c:	00c00104 	movi	r3,4
 4007460:	1880442e 	bgeu	r3,r2,4007574 <_malloc_r+0x620>
 4007464:	00c00504 	movi	r3,20
 4007468:	18808136 	bltu	r3,r2,4007670 <_malloc_r+0x71c>
 400746c:	11401704 	addi	r5,r2,92
 4007470:	10c016c4 	addi	r3,r2,91
 4007474:	294b883a 	add	r5,r5,r5
 4007478:	294b883a 	add	r5,r5,r5
 400747c:	294b883a 	add	r5,r5,r5
 4007480:	994b883a 	add	r5,r19,r5
 4007484:	28800017 	ldw	r2,0(r5)
 4007488:	018100f4 	movhi	r6,1027
 400748c:	297ffe04 	addi	r5,r5,-8
 4007490:	318cf704 	addi	r6,r6,13276
 4007494:	28806526 	beq	r5,r2,400762c <_malloc_r+0x6d8>
 4007498:	01bfff04 	movi	r6,-4
 400749c:	10c00117 	ldw	r3,4(r2)
 40074a0:	1986703a 	and	r3,r3,r6
 40074a4:	38c0022e 	bgeu	r7,r3,40074b0 <_malloc_r+0x55c>
 40074a8:	10800217 	ldw	r2,8(r2)
 40074ac:	28bffb1e 	bne	r5,r2,400749c <__alt_data_end+0xfc00749c>
 40074b0:	11400317 	ldw	r5,12(r2)
 40074b4:	98c00117 	ldw	r3,4(r19)
 40074b8:	81400315 	stw	r5,12(r16)
 40074bc:	80800215 	stw	r2,8(r16)
 40074c0:	2c000215 	stw	r16,8(r5)
 40074c4:	14000315 	stw	r16,12(r2)
 40074c8:	003ef806 	br	40070ac <__alt_data_end+0xfc0070ac>
 40074cc:	88c00054 	ori	r3,r17,1
 40074d0:	80c00115 	stw	r3,4(r16)
 40074d4:	8463883a 	add	r17,r16,r17
 40074d8:	34400515 	stw	r17,20(r6)
 40074dc:	34400415 	stw	r17,16(r6)
 40074e0:	10c00054 	ori	r3,r2,1
 40074e4:	8a000315 	stw	r8,12(r17)
 40074e8:	8a000215 	stw	r8,8(r17)
 40074ec:	88c00115 	stw	r3,4(r17)
 40074f0:	88a3883a 	add	r17,r17,r2
 40074f4:	88800015 	stw	r2,0(r17)
 40074f8:	9009883a 	mov	r4,r18
 40074fc:	400ed240 	call	400ed24 <__malloc_unlock>
 4007500:	80800204 	addi	r2,r16,8
 4007504:	003f3c06 	br	40071f8 <__alt_data_end+0xfc0071f8>
 4007508:	30c00117 	ldw	r3,4(r6)
 400750c:	003ee706 	br	40070ac <__alt_data_end+0xfc0070ac>
 4007510:	5ac00044 	addi	r11,r11,1
 4007514:	588000cc 	andi	r2,r11,3
 4007518:	31800204 	addi	r6,r6,8
 400751c:	103efd1e 	bne	r2,zero,4007114 <__alt_data_end+0xfc007114>
 4007520:	00002406 	br	40075b4 <_malloc_r+0x660>
 4007524:	14000317 	ldw	r16,12(r2)
 4007528:	143f251e 	bne	r2,r16,40071c0 <__alt_data_end+0xfc0071c0>
 400752c:	21000084 	addi	r4,r4,2
 4007530:	003ebc06 	br	4007024 <__alt_data_end+0xfc007024>
 4007534:	8085883a 	add	r2,r16,r2
 4007538:	10c00117 	ldw	r3,4(r2)
 400753c:	81000317 	ldw	r4,12(r16)
 4007540:	81400217 	ldw	r5,8(r16)
 4007544:	18c00054 	ori	r3,r3,1
 4007548:	10c00115 	stw	r3,4(r2)
 400754c:	29000315 	stw	r4,12(r5)
 4007550:	21400215 	stw	r5,8(r4)
 4007554:	9009883a 	mov	r4,r18
 4007558:	400ed240 	call	400ed24 <__malloc_unlock>
 400755c:	80800204 	addi	r2,r16,8
 4007560:	003f2506 	br	40071f8 <__alt_data_end+0xfc0071f8>
 4007564:	12001704 	addi	r8,r2,92
 4007568:	11c016c4 	addi	r7,r2,91
 400756c:	4209883a 	add	r4,r8,r8
 4007570:	003e9606 	br	4006fcc <__alt_data_end+0xfc006fcc>
 4007574:	3804d1ba 	srli	r2,r7,6
 4007578:	11400e44 	addi	r5,r2,57
 400757c:	10c00e04 	addi	r3,r2,56
 4007580:	294b883a 	add	r5,r5,r5
 4007584:	003fbc06 	br	4007478 <__alt_data_end+0xfc007478>
 4007588:	84ff5926 	beq	r16,r19,40072f0 <__alt_data_end+0xfc0072f0>
 400758c:	008100f4 	movhi	r2,1027
 4007590:	108cf704 	addi	r2,r2,13276
 4007594:	14000217 	ldw	r16,8(r2)
 4007598:	00bfff04 	movi	r2,-4
 400759c:	80c00117 	ldw	r3,4(r16)
 40075a0:	1886703a 	and	r3,r3,r2
 40075a4:	003f9106 	br	40073ec <__alt_data_end+0xfc0073ec>
 40075a8:	60800217 	ldw	r2,8(r12)
 40075ac:	213fffc4 	addi	r4,r4,-1
 40075b0:	1300651e 	bne	r2,r12,4007748 <_malloc_r+0x7f4>
 40075b4:	208000cc 	andi	r2,r4,3
 40075b8:	633ffe04 	addi	r12,r12,-8
 40075bc:	103ffa1e 	bne	r2,zero,40075a8 <__alt_data_end+0xfc0075a8>
 40075c0:	98800117 	ldw	r2,4(r19)
 40075c4:	0146303a 	nor	r3,zero,r5
 40075c8:	1884703a 	and	r2,r3,r2
 40075cc:	98800115 	stw	r2,4(r19)
 40075d0:	294b883a 	add	r5,r5,r5
 40075d4:	117f2836 	bltu	r2,r5,4007278 <__alt_data_end+0xfc007278>
 40075d8:	283f2726 	beq	r5,zero,4007278 <__alt_data_end+0xfc007278>
 40075dc:	2886703a 	and	r3,r5,r2
 40075e0:	5809883a 	mov	r4,r11
 40075e4:	183ec31e 	bne	r3,zero,40070f4 <__alt_data_end+0xfc0070f4>
 40075e8:	294b883a 	add	r5,r5,r5
 40075ec:	2886703a 	and	r3,r5,r2
 40075f0:	21000104 	addi	r4,r4,4
 40075f4:	183ffc26 	beq	r3,zero,40075e8 <__alt_data_end+0xfc0075e8>
 40075f8:	003ebe06 	br	40070f4 <__alt_data_end+0xfc0070f4>
 40075fc:	00c05504 	movi	r3,340
 4007600:	18801236 	bltu	r3,r2,400764c <_malloc_r+0x6f8>
 4007604:	8804d3fa 	srli	r2,r17,15
 4007608:	12001e04 	addi	r8,r2,120
 400760c:	11c01dc4 	addi	r7,r2,119
 4007610:	4209883a 	add	r4,r8,r8
 4007614:	003e6d06 	br	4006fcc <__alt_data_end+0xfc006fcc>
 4007618:	00c40004 	movi	r3,4096
 400761c:	003f4606 	br	4007338 <__alt_data_end+0xfc007338>
 4007620:	00800044 	movi	r2,1
 4007624:	a0800115 	stw	r2,4(r20)
 4007628:	003f7406 	br	40073fc <__alt_data_end+0xfc0073fc>
 400762c:	1805d0ba 	srai	r2,r3,2
 4007630:	01c00044 	movi	r7,1
 4007634:	30c00117 	ldw	r3,4(r6)
 4007638:	388e983a 	sll	r7,r7,r2
 400763c:	2805883a 	mov	r2,r5
 4007640:	38c6b03a 	or	r3,r7,r3
 4007644:	30c00115 	stw	r3,4(r6)
 4007648:	003f9b06 	br	40074b8 <__alt_data_end+0xfc0074b8>
 400764c:	00c15504 	movi	r3,1364
 4007650:	18801a36 	bltu	r3,r2,40076bc <_malloc_r+0x768>
 4007654:	8804d4ba 	srli	r2,r17,18
 4007658:	12001f44 	addi	r8,r2,125
 400765c:	11c01f04 	addi	r7,r2,124
 4007660:	4209883a 	add	r4,r8,r8
 4007664:	003e5906 	br	4006fcc <__alt_data_end+0xfc006fcc>
 4007668:	ad400404 	addi	r21,r21,16
 400766c:	003f1706 	br	40072cc <__alt_data_end+0xfc0072cc>
 4007670:	00c01504 	movi	r3,84
 4007674:	18802336 	bltu	r3,r2,4007704 <_malloc_r+0x7b0>
 4007678:	3804d33a 	srli	r2,r7,12
 400767c:	11401bc4 	addi	r5,r2,111
 4007680:	10c01b84 	addi	r3,r2,110
 4007684:	294b883a 	add	r5,r5,r5
 4007688:	003f7b06 	br	4007478 <__alt_data_end+0xfc007478>
 400768c:	9c000217 	ldw	r16,8(r19)
 4007690:	00bfff04 	movi	r2,-4
 4007694:	80c00117 	ldw	r3,4(r16)
 4007698:	1886703a 	and	r3,r3,r2
 400769c:	003f5306 	br	40073ec <__alt_data_end+0xfc0073ec>
 40076a0:	3083ffcc 	andi	r2,r6,4095
 40076a4:	103f181e 	bne	r2,zero,4007308 <__alt_data_end+0xfc007308>
 40076a8:	99000217 	ldw	r4,8(r19)
 40076ac:	b545883a 	add	r2,r22,r21
 40076b0:	10800054 	ori	r2,r2,1
 40076b4:	20800115 	stw	r2,4(r4)
 40076b8:	003f3e06 	br	40073b4 <__alt_data_end+0xfc0073b4>
 40076bc:	01003f84 	movi	r4,254
 40076c0:	02001fc4 	movi	r8,127
 40076c4:	01c01f84 	movi	r7,126
 40076c8:	003e4006 	br	4006fcc <__alt_data_end+0xfc006fcc>
 40076cc:	008100f4 	movhi	r2,1027
 40076d0:	10927f04 	addi	r2,r2,18940
 40076d4:	15000015 	stw	r20,0(r2)
 40076d8:	003f1106 	br	4007320 <__alt_data_end+0xfc007320>
 40076dc:	00800044 	movi	r2,1
 40076e0:	002b883a 	mov	r21,zero
 40076e4:	003f1f06 	br	4007364 <__alt_data_end+0xfc007364>
 40076e8:	81400204 	addi	r5,r16,8
 40076ec:	9009883a 	mov	r4,r18
 40076f0:	40063680 	call	4006368 <_free_r>
 40076f4:	008100f4 	movhi	r2,1027
 40076f8:	109f3604 	addi	r2,r2,31960
 40076fc:	10c00017 	ldw	r3,0(r2)
 4007700:	003f2c06 	br	40073b4 <__alt_data_end+0xfc0073b4>
 4007704:	00c05504 	movi	r3,340
 4007708:	18800536 	bltu	r3,r2,4007720 <_malloc_r+0x7cc>
 400770c:	3804d3fa 	srli	r2,r7,15
 4007710:	11401e04 	addi	r5,r2,120
 4007714:	10c01dc4 	addi	r3,r2,119
 4007718:	294b883a 	add	r5,r5,r5
 400771c:	003f5606 	br	4007478 <__alt_data_end+0xfc007478>
 4007720:	00c15504 	movi	r3,1364
 4007724:	18800536 	bltu	r3,r2,400773c <_malloc_r+0x7e8>
 4007728:	3804d4ba 	srli	r2,r7,18
 400772c:	11401f44 	addi	r5,r2,125
 4007730:	10c01f04 	addi	r3,r2,124
 4007734:	294b883a 	add	r5,r5,r5
 4007738:	003f4f06 	br	4007478 <__alt_data_end+0xfc007478>
 400773c:	01403f84 	movi	r5,254
 4007740:	00c01f84 	movi	r3,126
 4007744:	003f4c06 	br	4007478 <__alt_data_end+0xfc007478>
 4007748:	98800117 	ldw	r2,4(r19)
 400774c:	003fa006 	br	40075d0 <__alt_data_end+0xfc0075d0>
 4007750:	8808d0fa 	srli	r4,r17,3
 4007754:	20800044 	addi	r2,r4,1
 4007758:	1085883a 	add	r2,r2,r2
 400775c:	003e9006 	br	40071a0 <__alt_data_end+0xfc0071a0>

04007760 <memchr>:
 4007760:	208000cc 	andi	r2,r4,3
 4007764:	280f883a 	mov	r7,r5
 4007768:	10003426 	beq	r2,zero,400783c <memchr+0xdc>
 400776c:	30bfffc4 	addi	r2,r6,-1
 4007770:	30001a26 	beq	r6,zero,40077dc <memchr+0x7c>
 4007774:	20c00003 	ldbu	r3,0(r4)
 4007778:	29803fcc 	andi	r6,r5,255
 400777c:	30c0051e 	bne	r6,r3,4007794 <memchr+0x34>
 4007780:	00001806 	br	40077e4 <memchr+0x84>
 4007784:	10001526 	beq	r2,zero,40077dc <memchr+0x7c>
 4007788:	20c00003 	ldbu	r3,0(r4)
 400778c:	10bfffc4 	addi	r2,r2,-1
 4007790:	30c01426 	beq	r6,r3,40077e4 <memchr+0x84>
 4007794:	21000044 	addi	r4,r4,1
 4007798:	20c000cc 	andi	r3,r4,3
 400779c:	183ff91e 	bne	r3,zero,4007784 <__alt_data_end+0xfc007784>
 40077a0:	020000c4 	movi	r8,3
 40077a4:	40801136 	bltu	r8,r2,40077ec <memchr+0x8c>
 40077a8:	10000c26 	beq	r2,zero,40077dc <memchr+0x7c>
 40077ac:	20c00003 	ldbu	r3,0(r4)
 40077b0:	29403fcc 	andi	r5,r5,255
 40077b4:	28c00b26 	beq	r5,r3,40077e4 <memchr+0x84>
 40077b8:	20c00044 	addi	r3,r4,1
 40077bc:	39803fcc 	andi	r6,r7,255
 40077c0:	2089883a 	add	r4,r4,r2
 40077c4:	00000306 	br	40077d4 <memchr+0x74>
 40077c8:	18c00044 	addi	r3,r3,1
 40077cc:	197fffc3 	ldbu	r5,-1(r3)
 40077d0:	31400526 	beq	r6,r5,40077e8 <memchr+0x88>
 40077d4:	1805883a 	mov	r2,r3
 40077d8:	20fffb1e 	bne	r4,r3,40077c8 <__alt_data_end+0xfc0077c8>
 40077dc:	0005883a 	mov	r2,zero
 40077e0:	f800283a 	ret
 40077e4:	2005883a 	mov	r2,r4
 40077e8:	f800283a 	ret
 40077ec:	28c03fcc 	andi	r3,r5,255
 40077f0:	1812923a 	slli	r9,r3,8
 40077f4:	02ffbff4 	movhi	r11,65279
 40077f8:	02a02074 	movhi	r10,32897
 40077fc:	48d2b03a 	or	r9,r9,r3
 4007800:	4806943a 	slli	r3,r9,16
 4007804:	5affbfc4 	addi	r11,r11,-257
 4007808:	52a02004 	addi	r10,r10,-32640
 400780c:	48d2b03a 	or	r9,r9,r3
 4007810:	20c00017 	ldw	r3,0(r4)
 4007814:	48c6f03a 	xor	r3,r9,r3
 4007818:	1acd883a 	add	r6,r3,r11
 400781c:	00c6303a 	nor	r3,zero,r3
 4007820:	30c6703a 	and	r3,r6,r3
 4007824:	1a86703a 	and	r3,r3,r10
 4007828:	183fe01e 	bne	r3,zero,40077ac <__alt_data_end+0xfc0077ac>
 400782c:	10bfff04 	addi	r2,r2,-4
 4007830:	21000104 	addi	r4,r4,4
 4007834:	40bff636 	bltu	r8,r2,4007810 <__alt_data_end+0xfc007810>
 4007838:	003fdb06 	br	40077a8 <__alt_data_end+0xfc0077a8>
 400783c:	3005883a 	mov	r2,r6
 4007840:	003fd706 	br	40077a0 <__alt_data_end+0xfc0077a0>

04007844 <memcpy>:
 4007844:	defffd04 	addi	sp,sp,-12
 4007848:	dfc00215 	stw	ra,8(sp)
 400784c:	dc400115 	stw	r17,4(sp)
 4007850:	dc000015 	stw	r16,0(sp)
 4007854:	00c003c4 	movi	r3,15
 4007858:	2005883a 	mov	r2,r4
 400785c:	1980452e 	bgeu	r3,r6,4007974 <memcpy+0x130>
 4007860:	2906b03a 	or	r3,r5,r4
 4007864:	18c000cc 	andi	r3,r3,3
 4007868:	1800441e 	bne	r3,zero,400797c <memcpy+0x138>
 400786c:	347ffc04 	addi	r17,r6,-16
 4007870:	8822d13a 	srli	r17,r17,4
 4007874:	28c00104 	addi	r3,r5,4
 4007878:	23400104 	addi	r13,r4,4
 400787c:	8820913a 	slli	r16,r17,4
 4007880:	2b000204 	addi	r12,r5,8
 4007884:	22c00204 	addi	r11,r4,8
 4007888:	84000504 	addi	r16,r16,20
 400788c:	2a800304 	addi	r10,r5,12
 4007890:	22400304 	addi	r9,r4,12
 4007894:	2c21883a 	add	r16,r5,r16
 4007898:	2811883a 	mov	r8,r5
 400789c:	200f883a 	mov	r7,r4
 40078a0:	41000017 	ldw	r4,0(r8)
 40078a4:	1fc00017 	ldw	ra,0(r3)
 40078a8:	63c00017 	ldw	r15,0(r12)
 40078ac:	39000015 	stw	r4,0(r7)
 40078b0:	53800017 	ldw	r14,0(r10)
 40078b4:	6fc00015 	stw	ra,0(r13)
 40078b8:	5bc00015 	stw	r15,0(r11)
 40078bc:	4b800015 	stw	r14,0(r9)
 40078c0:	18c00404 	addi	r3,r3,16
 40078c4:	39c00404 	addi	r7,r7,16
 40078c8:	42000404 	addi	r8,r8,16
 40078cc:	6b400404 	addi	r13,r13,16
 40078d0:	63000404 	addi	r12,r12,16
 40078d4:	5ac00404 	addi	r11,r11,16
 40078d8:	52800404 	addi	r10,r10,16
 40078dc:	4a400404 	addi	r9,r9,16
 40078e0:	1c3fef1e 	bne	r3,r16,40078a0 <__alt_data_end+0xfc0078a0>
 40078e4:	89c00044 	addi	r7,r17,1
 40078e8:	380e913a 	slli	r7,r7,4
 40078ec:	310003cc 	andi	r4,r6,15
 40078f0:	02c000c4 	movi	r11,3
 40078f4:	11c7883a 	add	r3,r2,r7
 40078f8:	29cb883a 	add	r5,r5,r7
 40078fc:	5900212e 	bgeu	r11,r4,4007984 <memcpy+0x140>
 4007900:	1813883a 	mov	r9,r3
 4007904:	2811883a 	mov	r8,r5
 4007908:	200f883a 	mov	r7,r4
 400790c:	42800017 	ldw	r10,0(r8)
 4007910:	4a400104 	addi	r9,r9,4
 4007914:	39ffff04 	addi	r7,r7,-4
 4007918:	4abfff15 	stw	r10,-4(r9)
 400791c:	42000104 	addi	r8,r8,4
 4007920:	59fffa36 	bltu	r11,r7,400790c <__alt_data_end+0xfc00790c>
 4007924:	213fff04 	addi	r4,r4,-4
 4007928:	2008d0ba 	srli	r4,r4,2
 400792c:	318000cc 	andi	r6,r6,3
 4007930:	21000044 	addi	r4,r4,1
 4007934:	2109883a 	add	r4,r4,r4
 4007938:	2109883a 	add	r4,r4,r4
 400793c:	1907883a 	add	r3,r3,r4
 4007940:	290b883a 	add	r5,r5,r4
 4007944:	30000626 	beq	r6,zero,4007960 <memcpy+0x11c>
 4007948:	198d883a 	add	r6,r3,r6
 400794c:	29c00003 	ldbu	r7,0(r5)
 4007950:	18c00044 	addi	r3,r3,1
 4007954:	29400044 	addi	r5,r5,1
 4007958:	19ffffc5 	stb	r7,-1(r3)
 400795c:	19bffb1e 	bne	r3,r6,400794c <__alt_data_end+0xfc00794c>
 4007960:	dfc00217 	ldw	ra,8(sp)
 4007964:	dc400117 	ldw	r17,4(sp)
 4007968:	dc000017 	ldw	r16,0(sp)
 400796c:	dec00304 	addi	sp,sp,12
 4007970:	f800283a 	ret
 4007974:	2007883a 	mov	r3,r4
 4007978:	003ff206 	br	4007944 <__alt_data_end+0xfc007944>
 400797c:	2007883a 	mov	r3,r4
 4007980:	003ff106 	br	4007948 <__alt_data_end+0xfc007948>
 4007984:	200d883a 	mov	r6,r4
 4007988:	003fee06 	br	4007944 <__alt_data_end+0xfc007944>

0400798c <memmove>:
 400798c:	2005883a 	mov	r2,r4
 4007990:	29000b2e 	bgeu	r5,r4,40079c0 <memmove+0x34>
 4007994:	298f883a 	add	r7,r5,r6
 4007998:	21c0092e 	bgeu	r4,r7,40079c0 <memmove+0x34>
 400799c:	2187883a 	add	r3,r4,r6
 40079a0:	198bc83a 	sub	r5,r3,r6
 40079a4:	30004826 	beq	r6,zero,4007ac8 <memmove+0x13c>
 40079a8:	39ffffc4 	addi	r7,r7,-1
 40079ac:	39000003 	ldbu	r4,0(r7)
 40079b0:	18ffffc4 	addi	r3,r3,-1
 40079b4:	19000005 	stb	r4,0(r3)
 40079b8:	28fffb1e 	bne	r5,r3,40079a8 <__alt_data_end+0xfc0079a8>
 40079bc:	f800283a 	ret
 40079c0:	00c003c4 	movi	r3,15
 40079c4:	1980412e 	bgeu	r3,r6,4007acc <memmove+0x140>
 40079c8:	2886b03a 	or	r3,r5,r2
 40079cc:	18c000cc 	andi	r3,r3,3
 40079d0:	1800401e 	bne	r3,zero,4007ad4 <memmove+0x148>
 40079d4:	33fffc04 	addi	r15,r6,-16
 40079d8:	781ed13a 	srli	r15,r15,4
 40079dc:	28c00104 	addi	r3,r5,4
 40079e0:	13400104 	addi	r13,r2,4
 40079e4:	781c913a 	slli	r14,r15,4
 40079e8:	2b000204 	addi	r12,r5,8
 40079ec:	12c00204 	addi	r11,r2,8
 40079f0:	73800504 	addi	r14,r14,20
 40079f4:	2a800304 	addi	r10,r5,12
 40079f8:	12400304 	addi	r9,r2,12
 40079fc:	2b9d883a 	add	r14,r5,r14
 4007a00:	2811883a 	mov	r8,r5
 4007a04:	100f883a 	mov	r7,r2
 4007a08:	41000017 	ldw	r4,0(r8)
 4007a0c:	39c00404 	addi	r7,r7,16
 4007a10:	18c00404 	addi	r3,r3,16
 4007a14:	393ffc15 	stw	r4,-16(r7)
 4007a18:	193ffc17 	ldw	r4,-16(r3)
 4007a1c:	6b400404 	addi	r13,r13,16
 4007a20:	5ac00404 	addi	r11,r11,16
 4007a24:	693ffc15 	stw	r4,-16(r13)
 4007a28:	61000017 	ldw	r4,0(r12)
 4007a2c:	4a400404 	addi	r9,r9,16
 4007a30:	42000404 	addi	r8,r8,16
 4007a34:	593ffc15 	stw	r4,-16(r11)
 4007a38:	51000017 	ldw	r4,0(r10)
 4007a3c:	63000404 	addi	r12,r12,16
 4007a40:	52800404 	addi	r10,r10,16
 4007a44:	493ffc15 	stw	r4,-16(r9)
 4007a48:	1bbfef1e 	bne	r3,r14,4007a08 <__alt_data_end+0xfc007a08>
 4007a4c:	79000044 	addi	r4,r15,1
 4007a50:	2008913a 	slli	r4,r4,4
 4007a54:	328003cc 	andi	r10,r6,15
 4007a58:	02c000c4 	movi	r11,3
 4007a5c:	1107883a 	add	r3,r2,r4
 4007a60:	290b883a 	add	r5,r5,r4
 4007a64:	5a801e2e 	bgeu	r11,r10,4007ae0 <memmove+0x154>
 4007a68:	1813883a 	mov	r9,r3
 4007a6c:	2811883a 	mov	r8,r5
 4007a70:	500f883a 	mov	r7,r10
 4007a74:	41000017 	ldw	r4,0(r8)
 4007a78:	4a400104 	addi	r9,r9,4
 4007a7c:	39ffff04 	addi	r7,r7,-4
 4007a80:	493fff15 	stw	r4,-4(r9)
 4007a84:	42000104 	addi	r8,r8,4
 4007a88:	59fffa36 	bltu	r11,r7,4007a74 <__alt_data_end+0xfc007a74>
 4007a8c:	513fff04 	addi	r4,r10,-4
 4007a90:	2008d0ba 	srli	r4,r4,2
 4007a94:	318000cc 	andi	r6,r6,3
 4007a98:	21000044 	addi	r4,r4,1
 4007a9c:	2109883a 	add	r4,r4,r4
 4007aa0:	2109883a 	add	r4,r4,r4
 4007aa4:	1907883a 	add	r3,r3,r4
 4007aa8:	290b883a 	add	r5,r5,r4
 4007aac:	30000b26 	beq	r6,zero,4007adc <memmove+0x150>
 4007ab0:	198d883a 	add	r6,r3,r6
 4007ab4:	29c00003 	ldbu	r7,0(r5)
 4007ab8:	18c00044 	addi	r3,r3,1
 4007abc:	29400044 	addi	r5,r5,1
 4007ac0:	19ffffc5 	stb	r7,-1(r3)
 4007ac4:	19bffb1e 	bne	r3,r6,4007ab4 <__alt_data_end+0xfc007ab4>
 4007ac8:	f800283a 	ret
 4007acc:	1007883a 	mov	r3,r2
 4007ad0:	003ff606 	br	4007aac <__alt_data_end+0xfc007aac>
 4007ad4:	1007883a 	mov	r3,r2
 4007ad8:	003ff506 	br	4007ab0 <__alt_data_end+0xfc007ab0>
 4007adc:	f800283a 	ret
 4007ae0:	500d883a 	mov	r6,r10
 4007ae4:	003ff106 	br	4007aac <__alt_data_end+0xfc007aac>

04007ae8 <memset>:
 4007ae8:	20c000cc 	andi	r3,r4,3
 4007aec:	2005883a 	mov	r2,r4
 4007af0:	18004426 	beq	r3,zero,4007c04 <memset+0x11c>
 4007af4:	31ffffc4 	addi	r7,r6,-1
 4007af8:	30004026 	beq	r6,zero,4007bfc <memset+0x114>
 4007afc:	2813883a 	mov	r9,r5
 4007b00:	200d883a 	mov	r6,r4
 4007b04:	2007883a 	mov	r3,r4
 4007b08:	00000406 	br	4007b1c <memset+0x34>
 4007b0c:	3a3fffc4 	addi	r8,r7,-1
 4007b10:	31800044 	addi	r6,r6,1
 4007b14:	38003926 	beq	r7,zero,4007bfc <memset+0x114>
 4007b18:	400f883a 	mov	r7,r8
 4007b1c:	18c00044 	addi	r3,r3,1
 4007b20:	32400005 	stb	r9,0(r6)
 4007b24:	1a0000cc 	andi	r8,r3,3
 4007b28:	403ff81e 	bne	r8,zero,4007b0c <__alt_data_end+0xfc007b0c>
 4007b2c:	010000c4 	movi	r4,3
 4007b30:	21c02d2e 	bgeu	r4,r7,4007be8 <memset+0x100>
 4007b34:	29003fcc 	andi	r4,r5,255
 4007b38:	200c923a 	slli	r6,r4,8
 4007b3c:	3108b03a 	or	r4,r6,r4
 4007b40:	200c943a 	slli	r6,r4,16
 4007b44:	218cb03a 	or	r6,r4,r6
 4007b48:	010003c4 	movi	r4,15
 4007b4c:	21c0182e 	bgeu	r4,r7,4007bb0 <memset+0xc8>
 4007b50:	3b3ffc04 	addi	r12,r7,-16
 4007b54:	6018d13a 	srli	r12,r12,4
 4007b58:	1a000104 	addi	r8,r3,4
 4007b5c:	1ac00204 	addi	r11,r3,8
 4007b60:	6008913a 	slli	r4,r12,4
 4007b64:	1a800304 	addi	r10,r3,12
 4007b68:	1813883a 	mov	r9,r3
 4007b6c:	21000504 	addi	r4,r4,20
 4007b70:	1909883a 	add	r4,r3,r4
 4007b74:	49800015 	stw	r6,0(r9)
 4007b78:	41800015 	stw	r6,0(r8)
 4007b7c:	59800015 	stw	r6,0(r11)
 4007b80:	51800015 	stw	r6,0(r10)
 4007b84:	42000404 	addi	r8,r8,16
 4007b88:	4a400404 	addi	r9,r9,16
 4007b8c:	5ac00404 	addi	r11,r11,16
 4007b90:	52800404 	addi	r10,r10,16
 4007b94:	413ff71e 	bne	r8,r4,4007b74 <__alt_data_end+0xfc007b74>
 4007b98:	63000044 	addi	r12,r12,1
 4007b9c:	6018913a 	slli	r12,r12,4
 4007ba0:	39c003cc 	andi	r7,r7,15
 4007ba4:	010000c4 	movi	r4,3
 4007ba8:	1b07883a 	add	r3,r3,r12
 4007bac:	21c00e2e 	bgeu	r4,r7,4007be8 <memset+0x100>
 4007bb0:	1813883a 	mov	r9,r3
 4007bb4:	3811883a 	mov	r8,r7
 4007bb8:	010000c4 	movi	r4,3
 4007bbc:	49800015 	stw	r6,0(r9)
 4007bc0:	423fff04 	addi	r8,r8,-4
 4007bc4:	4a400104 	addi	r9,r9,4
 4007bc8:	223ffc36 	bltu	r4,r8,4007bbc <__alt_data_end+0xfc007bbc>
 4007bcc:	393fff04 	addi	r4,r7,-4
 4007bd0:	2008d0ba 	srli	r4,r4,2
 4007bd4:	39c000cc 	andi	r7,r7,3
 4007bd8:	21000044 	addi	r4,r4,1
 4007bdc:	2109883a 	add	r4,r4,r4
 4007be0:	2109883a 	add	r4,r4,r4
 4007be4:	1907883a 	add	r3,r3,r4
 4007be8:	38000526 	beq	r7,zero,4007c00 <memset+0x118>
 4007bec:	19cf883a 	add	r7,r3,r7
 4007bf0:	19400005 	stb	r5,0(r3)
 4007bf4:	18c00044 	addi	r3,r3,1
 4007bf8:	38fffd1e 	bne	r7,r3,4007bf0 <__alt_data_end+0xfc007bf0>
 4007bfc:	f800283a 	ret
 4007c00:	f800283a 	ret
 4007c04:	2007883a 	mov	r3,r4
 4007c08:	300f883a 	mov	r7,r6
 4007c0c:	003fc706 	br	4007b2c <__alt_data_end+0xfc007b2c>

04007c10 <_Balloc>:
 4007c10:	20801317 	ldw	r2,76(r4)
 4007c14:	defffc04 	addi	sp,sp,-16
 4007c18:	dc400115 	stw	r17,4(sp)
 4007c1c:	dc000015 	stw	r16,0(sp)
 4007c20:	dfc00315 	stw	ra,12(sp)
 4007c24:	dc800215 	stw	r18,8(sp)
 4007c28:	2023883a 	mov	r17,r4
 4007c2c:	2821883a 	mov	r16,r5
 4007c30:	10000f26 	beq	r2,zero,4007c70 <_Balloc+0x60>
 4007c34:	8407883a 	add	r3,r16,r16
 4007c38:	18c7883a 	add	r3,r3,r3
 4007c3c:	10c7883a 	add	r3,r2,r3
 4007c40:	18800017 	ldw	r2,0(r3)
 4007c44:	10001126 	beq	r2,zero,4007c8c <_Balloc+0x7c>
 4007c48:	11000017 	ldw	r4,0(r2)
 4007c4c:	19000015 	stw	r4,0(r3)
 4007c50:	10000415 	stw	zero,16(r2)
 4007c54:	10000315 	stw	zero,12(r2)
 4007c58:	dfc00317 	ldw	ra,12(sp)
 4007c5c:	dc800217 	ldw	r18,8(sp)
 4007c60:	dc400117 	ldw	r17,4(sp)
 4007c64:	dc000017 	ldw	r16,0(sp)
 4007c68:	dec00404 	addi	sp,sp,16
 4007c6c:	f800283a 	ret
 4007c70:	01800844 	movi	r6,33
 4007c74:	01400104 	movi	r5,4
 4007c78:	400ab4c0 	call	400ab4c <_calloc_r>
 4007c7c:	88801315 	stw	r2,76(r17)
 4007c80:	103fec1e 	bne	r2,zero,4007c34 <__alt_data_end+0xfc007c34>
 4007c84:	0005883a 	mov	r2,zero
 4007c88:	003ff306 	br	4007c58 <__alt_data_end+0xfc007c58>
 4007c8c:	01400044 	movi	r5,1
 4007c90:	2c24983a 	sll	r18,r5,r16
 4007c94:	8809883a 	mov	r4,r17
 4007c98:	91800144 	addi	r6,r18,5
 4007c9c:	318d883a 	add	r6,r6,r6
 4007ca0:	318d883a 	add	r6,r6,r6
 4007ca4:	400ab4c0 	call	400ab4c <_calloc_r>
 4007ca8:	103ff626 	beq	r2,zero,4007c84 <__alt_data_end+0xfc007c84>
 4007cac:	14000115 	stw	r16,4(r2)
 4007cb0:	14800215 	stw	r18,8(r2)
 4007cb4:	003fe606 	br	4007c50 <__alt_data_end+0xfc007c50>

04007cb8 <_Bfree>:
 4007cb8:	28000826 	beq	r5,zero,4007cdc <_Bfree+0x24>
 4007cbc:	28c00117 	ldw	r3,4(r5)
 4007cc0:	20801317 	ldw	r2,76(r4)
 4007cc4:	18c7883a 	add	r3,r3,r3
 4007cc8:	18c7883a 	add	r3,r3,r3
 4007ccc:	10c5883a 	add	r2,r2,r3
 4007cd0:	10c00017 	ldw	r3,0(r2)
 4007cd4:	28c00015 	stw	r3,0(r5)
 4007cd8:	11400015 	stw	r5,0(r2)
 4007cdc:	f800283a 	ret

04007ce0 <__multadd>:
 4007ce0:	defffa04 	addi	sp,sp,-24
 4007ce4:	dc800315 	stw	r18,12(sp)
 4007ce8:	dc400215 	stw	r17,8(sp)
 4007cec:	dc000115 	stw	r16,4(sp)
 4007cf0:	2823883a 	mov	r17,r5
 4007cf4:	2c000417 	ldw	r16,16(r5)
 4007cf8:	dfc00515 	stw	ra,20(sp)
 4007cfc:	dcc00415 	stw	r19,16(sp)
 4007d00:	2025883a 	mov	r18,r4
 4007d04:	29400504 	addi	r5,r5,20
 4007d08:	0011883a 	mov	r8,zero
 4007d0c:	28c00017 	ldw	r3,0(r5)
 4007d10:	29400104 	addi	r5,r5,4
 4007d14:	42000044 	addi	r8,r8,1
 4007d18:	18bfffcc 	andi	r2,r3,65535
 4007d1c:	1185383a 	mul	r2,r2,r6
 4007d20:	1806d43a 	srli	r3,r3,16
 4007d24:	11cf883a 	add	r7,r2,r7
 4007d28:	3808d43a 	srli	r4,r7,16
 4007d2c:	1987383a 	mul	r3,r3,r6
 4007d30:	38bfffcc 	andi	r2,r7,65535
 4007d34:	1907883a 	add	r3,r3,r4
 4007d38:	1808943a 	slli	r4,r3,16
 4007d3c:	180ed43a 	srli	r7,r3,16
 4007d40:	2085883a 	add	r2,r4,r2
 4007d44:	28bfff15 	stw	r2,-4(r5)
 4007d48:	443ff016 	blt	r8,r16,4007d0c <__alt_data_end+0xfc007d0c>
 4007d4c:	38000926 	beq	r7,zero,4007d74 <__multadd+0x94>
 4007d50:	88800217 	ldw	r2,8(r17)
 4007d54:	80800f0e 	bge	r16,r2,4007d94 <__multadd+0xb4>
 4007d58:	80800144 	addi	r2,r16,5
 4007d5c:	1085883a 	add	r2,r2,r2
 4007d60:	1085883a 	add	r2,r2,r2
 4007d64:	8885883a 	add	r2,r17,r2
 4007d68:	11c00015 	stw	r7,0(r2)
 4007d6c:	84000044 	addi	r16,r16,1
 4007d70:	8c000415 	stw	r16,16(r17)
 4007d74:	8805883a 	mov	r2,r17
 4007d78:	dfc00517 	ldw	ra,20(sp)
 4007d7c:	dcc00417 	ldw	r19,16(sp)
 4007d80:	dc800317 	ldw	r18,12(sp)
 4007d84:	dc400217 	ldw	r17,8(sp)
 4007d88:	dc000117 	ldw	r16,4(sp)
 4007d8c:	dec00604 	addi	sp,sp,24
 4007d90:	f800283a 	ret
 4007d94:	89400117 	ldw	r5,4(r17)
 4007d98:	9009883a 	mov	r4,r18
 4007d9c:	d9c00015 	stw	r7,0(sp)
 4007da0:	29400044 	addi	r5,r5,1
 4007da4:	4007c100 	call	4007c10 <_Balloc>
 4007da8:	89800417 	ldw	r6,16(r17)
 4007dac:	89400304 	addi	r5,r17,12
 4007db0:	11000304 	addi	r4,r2,12
 4007db4:	31800084 	addi	r6,r6,2
 4007db8:	318d883a 	add	r6,r6,r6
 4007dbc:	318d883a 	add	r6,r6,r6
 4007dc0:	1027883a 	mov	r19,r2
 4007dc4:	40078440 	call	4007844 <memcpy>
 4007dc8:	d9c00017 	ldw	r7,0(sp)
 4007dcc:	88000a26 	beq	r17,zero,4007df8 <__multadd+0x118>
 4007dd0:	88c00117 	ldw	r3,4(r17)
 4007dd4:	90801317 	ldw	r2,76(r18)
 4007dd8:	18c7883a 	add	r3,r3,r3
 4007ddc:	18c7883a 	add	r3,r3,r3
 4007de0:	10c5883a 	add	r2,r2,r3
 4007de4:	10c00017 	ldw	r3,0(r2)
 4007de8:	88c00015 	stw	r3,0(r17)
 4007dec:	14400015 	stw	r17,0(r2)
 4007df0:	9823883a 	mov	r17,r19
 4007df4:	003fd806 	br	4007d58 <__alt_data_end+0xfc007d58>
 4007df8:	9823883a 	mov	r17,r19
 4007dfc:	003fd606 	br	4007d58 <__alt_data_end+0xfc007d58>

04007e00 <__s2b>:
 4007e00:	defff904 	addi	sp,sp,-28
 4007e04:	dc400115 	stw	r17,4(sp)
 4007e08:	dc000015 	stw	r16,0(sp)
 4007e0c:	2023883a 	mov	r17,r4
 4007e10:	2821883a 	mov	r16,r5
 4007e14:	39000204 	addi	r4,r7,8
 4007e18:	01400244 	movi	r5,9
 4007e1c:	dcc00315 	stw	r19,12(sp)
 4007e20:	dc800215 	stw	r18,8(sp)
 4007e24:	dfc00615 	stw	ra,24(sp)
 4007e28:	dd400515 	stw	r21,20(sp)
 4007e2c:	dd000415 	stw	r20,16(sp)
 4007e30:	3825883a 	mov	r18,r7
 4007e34:	3027883a 	mov	r19,r6
 4007e38:	4001bc40 	call	4001bc4 <__divsi3>
 4007e3c:	00c00044 	movi	r3,1
 4007e40:	000b883a 	mov	r5,zero
 4007e44:	1880030e 	bge	r3,r2,4007e54 <__s2b+0x54>
 4007e48:	18c7883a 	add	r3,r3,r3
 4007e4c:	29400044 	addi	r5,r5,1
 4007e50:	18bffd16 	blt	r3,r2,4007e48 <__alt_data_end+0xfc007e48>
 4007e54:	8809883a 	mov	r4,r17
 4007e58:	4007c100 	call	4007c10 <_Balloc>
 4007e5c:	d8c00717 	ldw	r3,28(sp)
 4007e60:	10c00515 	stw	r3,20(r2)
 4007e64:	00c00044 	movi	r3,1
 4007e68:	10c00415 	stw	r3,16(r2)
 4007e6c:	00c00244 	movi	r3,9
 4007e70:	1cc0210e 	bge	r3,r19,4007ef8 <__s2b+0xf8>
 4007e74:	80eb883a 	add	r21,r16,r3
 4007e78:	a829883a 	mov	r20,r21
 4007e7c:	84e1883a 	add	r16,r16,r19
 4007e80:	a1c00007 	ldb	r7,0(r20)
 4007e84:	01800284 	movi	r6,10
 4007e88:	a5000044 	addi	r20,r20,1
 4007e8c:	100b883a 	mov	r5,r2
 4007e90:	39fff404 	addi	r7,r7,-48
 4007e94:	8809883a 	mov	r4,r17
 4007e98:	4007ce00 	call	4007ce0 <__multadd>
 4007e9c:	a43ff81e 	bne	r20,r16,4007e80 <__alt_data_end+0xfc007e80>
 4007ea0:	ace1883a 	add	r16,r21,r19
 4007ea4:	843ffe04 	addi	r16,r16,-8
 4007ea8:	9c800a0e 	bge	r19,r18,4007ed4 <__s2b+0xd4>
 4007eac:	94e5c83a 	sub	r18,r18,r19
 4007eb0:	84a5883a 	add	r18,r16,r18
 4007eb4:	81c00007 	ldb	r7,0(r16)
 4007eb8:	01800284 	movi	r6,10
 4007ebc:	84000044 	addi	r16,r16,1
 4007ec0:	100b883a 	mov	r5,r2
 4007ec4:	39fff404 	addi	r7,r7,-48
 4007ec8:	8809883a 	mov	r4,r17
 4007ecc:	4007ce00 	call	4007ce0 <__multadd>
 4007ed0:	84bff81e 	bne	r16,r18,4007eb4 <__alt_data_end+0xfc007eb4>
 4007ed4:	dfc00617 	ldw	ra,24(sp)
 4007ed8:	dd400517 	ldw	r21,20(sp)
 4007edc:	dd000417 	ldw	r20,16(sp)
 4007ee0:	dcc00317 	ldw	r19,12(sp)
 4007ee4:	dc800217 	ldw	r18,8(sp)
 4007ee8:	dc400117 	ldw	r17,4(sp)
 4007eec:	dc000017 	ldw	r16,0(sp)
 4007ef0:	dec00704 	addi	sp,sp,28
 4007ef4:	f800283a 	ret
 4007ef8:	84000284 	addi	r16,r16,10
 4007efc:	1827883a 	mov	r19,r3
 4007f00:	003fe906 	br	4007ea8 <__alt_data_end+0xfc007ea8>

04007f04 <__hi0bits>:
 4007f04:	20bfffec 	andhi	r2,r4,65535
 4007f08:	1000141e 	bne	r2,zero,4007f5c <__hi0bits+0x58>
 4007f0c:	2008943a 	slli	r4,r4,16
 4007f10:	00800404 	movi	r2,16
 4007f14:	20ffc02c 	andhi	r3,r4,65280
 4007f18:	1800021e 	bne	r3,zero,4007f24 <__hi0bits+0x20>
 4007f1c:	2008923a 	slli	r4,r4,8
 4007f20:	10800204 	addi	r2,r2,8
 4007f24:	20fc002c 	andhi	r3,r4,61440
 4007f28:	1800021e 	bne	r3,zero,4007f34 <__hi0bits+0x30>
 4007f2c:	2008913a 	slli	r4,r4,4
 4007f30:	10800104 	addi	r2,r2,4
 4007f34:	20f0002c 	andhi	r3,r4,49152
 4007f38:	1800031e 	bne	r3,zero,4007f48 <__hi0bits+0x44>
 4007f3c:	2109883a 	add	r4,r4,r4
 4007f40:	10800084 	addi	r2,r2,2
 4007f44:	2109883a 	add	r4,r4,r4
 4007f48:	20000316 	blt	r4,zero,4007f58 <__hi0bits+0x54>
 4007f4c:	2110002c 	andhi	r4,r4,16384
 4007f50:	2000041e 	bne	r4,zero,4007f64 <__hi0bits+0x60>
 4007f54:	00800804 	movi	r2,32
 4007f58:	f800283a 	ret
 4007f5c:	0005883a 	mov	r2,zero
 4007f60:	003fec06 	br	4007f14 <__alt_data_end+0xfc007f14>
 4007f64:	10800044 	addi	r2,r2,1
 4007f68:	f800283a 	ret

04007f6c <__lo0bits>:
 4007f6c:	20c00017 	ldw	r3,0(r4)
 4007f70:	188001cc 	andi	r2,r3,7
 4007f74:	10000826 	beq	r2,zero,4007f98 <__lo0bits+0x2c>
 4007f78:	1880004c 	andi	r2,r3,1
 4007f7c:	1000211e 	bne	r2,zero,4008004 <__lo0bits+0x98>
 4007f80:	1880008c 	andi	r2,r3,2
 4007f84:	1000211e 	bne	r2,zero,400800c <__lo0bits+0xa0>
 4007f88:	1806d0ba 	srli	r3,r3,2
 4007f8c:	00800084 	movi	r2,2
 4007f90:	20c00015 	stw	r3,0(r4)
 4007f94:	f800283a 	ret
 4007f98:	18bfffcc 	andi	r2,r3,65535
 4007f9c:	10001326 	beq	r2,zero,4007fec <__lo0bits+0x80>
 4007fa0:	0005883a 	mov	r2,zero
 4007fa4:	19403fcc 	andi	r5,r3,255
 4007fa8:	2800021e 	bne	r5,zero,4007fb4 <__lo0bits+0x48>
 4007fac:	1806d23a 	srli	r3,r3,8
 4007fb0:	10800204 	addi	r2,r2,8
 4007fb4:	194003cc 	andi	r5,r3,15
 4007fb8:	2800021e 	bne	r5,zero,4007fc4 <__lo0bits+0x58>
 4007fbc:	1806d13a 	srli	r3,r3,4
 4007fc0:	10800104 	addi	r2,r2,4
 4007fc4:	194000cc 	andi	r5,r3,3
 4007fc8:	2800021e 	bne	r5,zero,4007fd4 <__lo0bits+0x68>
 4007fcc:	1806d0ba 	srli	r3,r3,2
 4007fd0:	10800084 	addi	r2,r2,2
 4007fd4:	1940004c 	andi	r5,r3,1
 4007fd8:	2800081e 	bne	r5,zero,4007ffc <__lo0bits+0x90>
 4007fdc:	1806d07a 	srli	r3,r3,1
 4007fe0:	1800051e 	bne	r3,zero,4007ff8 <__lo0bits+0x8c>
 4007fe4:	00800804 	movi	r2,32
 4007fe8:	f800283a 	ret
 4007fec:	1806d43a 	srli	r3,r3,16
 4007ff0:	00800404 	movi	r2,16
 4007ff4:	003feb06 	br	4007fa4 <__alt_data_end+0xfc007fa4>
 4007ff8:	10800044 	addi	r2,r2,1
 4007ffc:	20c00015 	stw	r3,0(r4)
 4008000:	f800283a 	ret
 4008004:	0005883a 	mov	r2,zero
 4008008:	f800283a 	ret
 400800c:	1806d07a 	srli	r3,r3,1
 4008010:	00800044 	movi	r2,1
 4008014:	20c00015 	stw	r3,0(r4)
 4008018:	f800283a 	ret

0400801c <__i2b>:
 400801c:	defffd04 	addi	sp,sp,-12
 4008020:	dc000015 	stw	r16,0(sp)
 4008024:	04000044 	movi	r16,1
 4008028:	dc400115 	stw	r17,4(sp)
 400802c:	2823883a 	mov	r17,r5
 4008030:	800b883a 	mov	r5,r16
 4008034:	dfc00215 	stw	ra,8(sp)
 4008038:	4007c100 	call	4007c10 <_Balloc>
 400803c:	14400515 	stw	r17,20(r2)
 4008040:	14000415 	stw	r16,16(r2)
 4008044:	dfc00217 	ldw	ra,8(sp)
 4008048:	dc400117 	ldw	r17,4(sp)
 400804c:	dc000017 	ldw	r16,0(sp)
 4008050:	dec00304 	addi	sp,sp,12
 4008054:	f800283a 	ret

04008058 <__multiply>:
 4008058:	defffa04 	addi	sp,sp,-24
 400805c:	dcc00315 	stw	r19,12(sp)
 4008060:	dc800215 	stw	r18,8(sp)
 4008064:	34c00417 	ldw	r19,16(r6)
 4008068:	2c800417 	ldw	r18,16(r5)
 400806c:	dd000415 	stw	r20,16(sp)
 4008070:	dc400115 	stw	r17,4(sp)
 4008074:	dfc00515 	stw	ra,20(sp)
 4008078:	dc000015 	stw	r16,0(sp)
 400807c:	2829883a 	mov	r20,r5
 4008080:	3023883a 	mov	r17,r6
 4008084:	94c0050e 	bge	r18,r19,400809c <__multiply+0x44>
 4008088:	9007883a 	mov	r3,r18
 400808c:	3029883a 	mov	r20,r6
 4008090:	9825883a 	mov	r18,r19
 4008094:	2823883a 	mov	r17,r5
 4008098:	1827883a 	mov	r19,r3
 400809c:	a0800217 	ldw	r2,8(r20)
 40080a0:	94e1883a 	add	r16,r18,r19
 40080a4:	a1400117 	ldw	r5,4(r20)
 40080a8:	1400010e 	bge	r2,r16,40080b0 <__multiply+0x58>
 40080ac:	29400044 	addi	r5,r5,1
 40080b0:	4007c100 	call	4007c10 <_Balloc>
 40080b4:	8415883a 	add	r10,r16,r16
 40080b8:	12c00504 	addi	r11,r2,20
 40080bc:	5295883a 	add	r10,r10,r10
 40080c0:	5a95883a 	add	r10,r11,r10
 40080c4:	5807883a 	mov	r3,r11
 40080c8:	5a80032e 	bgeu	r11,r10,40080d8 <__multiply+0x80>
 40080cc:	18000015 	stw	zero,0(r3)
 40080d0:	18c00104 	addi	r3,r3,4
 40080d4:	1abffd36 	bltu	r3,r10,40080cc <__alt_data_end+0xfc0080cc>
 40080d8:	9ce7883a 	add	r19,r19,r19
 40080dc:	94a5883a 	add	r18,r18,r18
 40080e0:	89800504 	addi	r6,r17,20
 40080e4:	9ce7883a 	add	r19,r19,r19
 40080e8:	a3400504 	addi	r13,r20,20
 40080ec:	94a5883a 	add	r18,r18,r18
 40080f0:	34d9883a 	add	r12,r6,r19
 40080f4:	6c93883a 	add	r9,r13,r18
 40080f8:	3300422e 	bgeu	r6,r12,4008204 <__multiply+0x1ac>
 40080fc:	37c00017 	ldw	ra,0(r6)
 4008100:	fbffffcc 	andi	r15,ra,65535
 4008104:	78001b26 	beq	r15,zero,4008174 <__multiply+0x11c>
 4008108:	5811883a 	mov	r8,r11
 400810c:	681d883a 	mov	r14,r13
 4008110:	000f883a 	mov	r7,zero
 4008114:	71000017 	ldw	r4,0(r14)
 4008118:	40c00017 	ldw	r3,0(r8)
 400811c:	73800104 	addi	r14,r14,4
 4008120:	217fffcc 	andi	r5,r4,65535
 4008124:	2bcb383a 	mul	r5,r5,r15
 4008128:	2008d43a 	srli	r4,r4,16
 400812c:	1c7fffcc 	andi	r17,r3,65535
 4008130:	2c4b883a 	add	r5,r5,r17
 4008134:	29cb883a 	add	r5,r5,r7
 4008138:	23c9383a 	mul	r4,r4,r15
 400813c:	1806d43a 	srli	r3,r3,16
 4008140:	280ed43a 	srli	r7,r5,16
 4008144:	297fffcc 	andi	r5,r5,65535
 4008148:	20c7883a 	add	r3,r4,r3
 400814c:	19c7883a 	add	r3,r3,r7
 4008150:	1808943a 	slli	r4,r3,16
 4008154:	4023883a 	mov	r17,r8
 4008158:	180ed43a 	srli	r7,r3,16
 400815c:	214ab03a 	or	r5,r4,r5
 4008160:	41400015 	stw	r5,0(r8)
 4008164:	42000104 	addi	r8,r8,4
 4008168:	727fea36 	bltu	r14,r9,4008114 <__alt_data_end+0xfc008114>
 400816c:	89c00115 	stw	r7,4(r17)
 4008170:	37c00017 	ldw	ra,0(r6)
 4008174:	f83ed43a 	srli	ra,ra,16
 4008178:	f8001f26 	beq	ra,zero,40081f8 <__multiply+0x1a0>
 400817c:	58c00017 	ldw	r3,0(r11)
 4008180:	681d883a 	mov	r14,r13
 4008184:	581f883a 	mov	r15,r11
 4008188:	1811883a 	mov	r8,r3
 400818c:	5825883a 	mov	r18,r11
 4008190:	000f883a 	mov	r7,zero
 4008194:	00000106 	br	400819c <__multiply+0x144>
 4008198:	8825883a 	mov	r18,r17
 400819c:	7140000b 	ldhu	r5,0(r14)
 40081a0:	4010d43a 	srli	r8,r8,16
 40081a4:	193fffcc 	andi	r4,r3,65535
 40081a8:	2fcb383a 	mul	r5,r5,ra
 40081ac:	7bc00104 	addi	r15,r15,4
 40081b0:	73800104 	addi	r14,r14,4
 40081b4:	2a0b883a 	add	r5,r5,r8
 40081b8:	29cb883a 	add	r5,r5,r7
 40081bc:	2806943a 	slli	r3,r5,16
 40081c0:	94400104 	addi	r17,r18,4
 40081c4:	280ad43a 	srli	r5,r5,16
 40081c8:	1908b03a 	or	r4,r3,r4
 40081cc:	793fff15 	stw	r4,-4(r15)
 40081d0:	70ffff17 	ldw	r3,-4(r14)
 40081d4:	8a000017 	ldw	r8,0(r17)
 40081d8:	1806d43a 	srli	r3,r3,16
 40081dc:	413fffcc 	andi	r4,r8,65535
 40081e0:	1fc7383a 	mul	r3,r3,ra
 40081e4:	1907883a 	add	r3,r3,r4
 40081e8:	1947883a 	add	r3,r3,r5
 40081ec:	180ed43a 	srli	r7,r3,16
 40081f0:	727fe936 	bltu	r14,r9,4008198 <__alt_data_end+0xfc008198>
 40081f4:	90c00115 	stw	r3,4(r18)
 40081f8:	31800104 	addi	r6,r6,4
 40081fc:	5ac00104 	addi	r11,r11,4
 4008200:	333fbe36 	bltu	r6,r12,40080fc <__alt_data_end+0xfc0080fc>
 4008204:	0400090e 	bge	zero,r16,400822c <__multiply+0x1d4>
 4008208:	50ffff17 	ldw	r3,-4(r10)
 400820c:	52bfff04 	addi	r10,r10,-4
 4008210:	18000326 	beq	r3,zero,4008220 <__multiply+0x1c8>
 4008214:	00000506 	br	400822c <__multiply+0x1d4>
 4008218:	50c00017 	ldw	r3,0(r10)
 400821c:	1800031e 	bne	r3,zero,400822c <__multiply+0x1d4>
 4008220:	843fffc4 	addi	r16,r16,-1
 4008224:	52bfff04 	addi	r10,r10,-4
 4008228:	803ffb1e 	bne	r16,zero,4008218 <__alt_data_end+0xfc008218>
 400822c:	14000415 	stw	r16,16(r2)
 4008230:	dfc00517 	ldw	ra,20(sp)
 4008234:	dd000417 	ldw	r20,16(sp)
 4008238:	dcc00317 	ldw	r19,12(sp)
 400823c:	dc800217 	ldw	r18,8(sp)
 4008240:	dc400117 	ldw	r17,4(sp)
 4008244:	dc000017 	ldw	r16,0(sp)
 4008248:	dec00604 	addi	sp,sp,24
 400824c:	f800283a 	ret

04008250 <__pow5mult>:
 4008250:	defffa04 	addi	sp,sp,-24
 4008254:	dcc00315 	stw	r19,12(sp)
 4008258:	dc000015 	stw	r16,0(sp)
 400825c:	dfc00515 	stw	ra,20(sp)
 4008260:	dd000415 	stw	r20,16(sp)
 4008264:	dc800215 	stw	r18,8(sp)
 4008268:	dc400115 	stw	r17,4(sp)
 400826c:	308000cc 	andi	r2,r6,3
 4008270:	3021883a 	mov	r16,r6
 4008274:	2027883a 	mov	r19,r4
 4008278:	10002f1e 	bne	r2,zero,4008338 <__pow5mult+0xe8>
 400827c:	2825883a 	mov	r18,r5
 4008280:	8021d0ba 	srai	r16,r16,2
 4008284:	80001a26 	beq	r16,zero,40082f0 <__pow5mult+0xa0>
 4008288:	9c401217 	ldw	r17,72(r19)
 400828c:	8800061e 	bne	r17,zero,40082a8 <__pow5mult+0x58>
 4008290:	00003406 	br	4008364 <__pow5mult+0x114>
 4008294:	8021d07a 	srai	r16,r16,1
 4008298:	80001526 	beq	r16,zero,40082f0 <__pow5mult+0xa0>
 400829c:	88800017 	ldw	r2,0(r17)
 40082a0:	10001c26 	beq	r2,zero,4008314 <__pow5mult+0xc4>
 40082a4:	1023883a 	mov	r17,r2
 40082a8:	8080004c 	andi	r2,r16,1
 40082ac:	103ff926 	beq	r2,zero,4008294 <__alt_data_end+0xfc008294>
 40082b0:	880d883a 	mov	r6,r17
 40082b4:	900b883a 	mov	r5,r18
 40082b8:	9809883a 	mov	r4,r19
 40082bc:	40080580 	call	4008058 <__multiply>
 40082c0:	90001b26 	beq	r18,zero,4008330 <__pow5mult+0xe0>
 40082c4:	91000117 	ldw	r4,4(r18)
 40082c8:	98c01317 	ldw	r3,76(r19)
 40082cc:	8021d07a 	srai	r16,r16,1
 40082d0:	2109883a 	add	r4,r4,r4
 40082d4:	2109883a 	add	r4,r4,r4
 40082d8:	1907883a 	add	r3,r3,r4
 40082dc:	19000017 	ldw	r4,0(r3)
 40082e0:	91000015 	stw	r4,0(r18)
 40082e4:	1c800015 	stw	r18,0(r3)
 40082e8:	1025883a 	mov	r18,r2
 40082ec:	803feb1e 	bne	r16,zero,400829c <__alt_data_end+0xfc00829c>
 40082f0:	9005883a 	mov	r2,r18
 40082f4:	dfc00517 	ldw	ra,20(sp)
 40082f8:	dd000417 	ldw	r20,16(sp)
 40082fc:	dcc00317 	ldw	r19,12(sp)
 4008300:	dc800217 	ldw	r18,8(sp)
 4008304:	dc400117 	ldw	r17,4(sp)
 4008308:	dc000017 	ldw	r16,0(sp)
 400830c:	dec00604 	addi	sp,sp,24
 4008310:	f800283a 	ret
 4008314:	880d883a 	mov	r6,r17
 4008318:	880b883a 	mov	r5,r17
 400831c:	9809883a 	mov	r4,r19
 4008320:	40080580 	call	4008058 <__multiply>
 4008324:	88800015 	stw	r2,0(r17)
 4008328:	10000015 	stw	zero,0(r2)
 400832c:	003fdd06 	br	40082a4 <__alt_data_end+0xfc0082a4>
 4008330:	1025883a 	mov	r18,r2
 4008334:	003fd706 	br	4008294 <__alt_data_end+0xfc008294>
 4008338:	10bfffc4 	addi	r2,r2,-1
 400833c:	1085883a 	add	r2,r2,r2
 4008340:	00c100f4 	movhi	r3,1027
 4008344:	18c55404 	addi	r3,r3,5456
 4008348:	1085883a 	add	r2,r2,r2
 400834c:	1885883a 	add	r2,r3,r2
 4008350:	11800017 	ldw	r6,0(r2)
 4008354:	000f883a 	mov	r7,zero
 4008358:	4007ce00 	call	4007ce0 <__multadd>
 400835c:	1025883a 	mov	r18,r2
 4008360:	003fc706 	br	4008280 <__alt_data_end+0xfc008280>
 4008364:	05000044 	movi	r20,1
 4008368:	a00b883a 	mov	r5,r20
 400836c:	9809883a 	mov	r4,r19
 4008370:	4007c100 	call	4007c10 <_Balloc>
 4008374:	1023883a 	mov	r17,r2
 4008378:	00809c44 	movi	r2,625
 400837c:	88800515 	stw	r2,20(r17)
 4008380:	8d000415 	stw	r20,16(r17)
 4008384:	9c401215 	stw	r17,72(r19)
 4008388:	88000015 	stw	zero,0(r17)
 400838c:	003fc606 	br	40082a8 <__alt_data_end+0xfc0082a8>

04008390 <__lshift>:
 4008390:	defff904 	addi	sp,sp,-28
 4008394:	dd400515 	stw	r21,20(sp)
 4008398:	dcc00315 	stw	r19,12(sp)
 400839c:	302bd17a 	srai	r21,r6,5
 40083a0:	2cc00417 	ldw	r19,16(r5)
 40083a4:	28800217 	ldw	r2,8(r5)
 40083a8:	dd000415 	stw	r20,16(sp)
 40083ac:	ace7883a 	add	r19,r21,r19
 40083b0:	dc800215 	stw	r18,8(sp)
 40083b4:	dc400115 	stw	r17,4(sp)
 40083b8:	dc000015 	stw	r16,0(sp)
 40083bc:	dfc00615 	stw	ra,24(sp)
 40083c0:	9c000044 	addi	r16,r19,1
 40083c4:	2823883a 	mov	r17,r5
 40083c8:	3029883a 	mov	r20,r6
 40083cc:	2025883a 	mov	r18,r4
 40083d0:	29400117 	ldw	r5,4(r5)
 40083d4:	1400030e 	bge	r2,r16,40083e4 <__lshift+0x54>
 40083d8:	1085883a 	add	r2,r2,r2
 40083dc:	29400044 	addi	r5,r5,1
 40083e0:	143ffd16 	blt	r2,r16,40083d8 <__alt_data_end+0xfc0083d8>
 40083e4:	9009883a 	mov	r4,r18
 40083e8:	4007c100 	call	4007c10 <_Balloc>
 40083ec:	10c00504 	addi	r3,r2,20
 40083f0:	0540070e 	bge	zero,r21,4008410 <__lshift+0x80>
 40083f4:	ad6b883a 	add	r21,r21,r21
 40083f8:	ad6b883a 	add	r21,r21,r21
 40083fc:	1809883a 	mov	r4,r3
 4008400:	1d47883a 	add	r3,r3,r21
 4008404:	20000015 	stw	zero,0(r4)
 4008408:	21000104 	addi	r4,r4,4
 400840c:	193ffd1e 	bne	r3,r4,4008404 <__alt_data_end+0xfc008404>
 4008410:	8a000417 	ldw	r8,16(r17)
 4008414:	89000504 	addi	r4,r17,20
 4008418:	a18007cc 	andi	r6,r20,31
 400841c:	4211883a 	add	r8,r8,r8
 4008420:	4211883a 	add	r8,r8,r8
 4008424:	2211883a 	add	r8,r4,r8
 4008428:	30002326 	beq	r6,zero,40084b8 <__lshift+0x128>
 400842c:	02400804 	movi	r9,32
 4008430:	4993c83a 	sub	r9,r9,r6
 4008434:	000b883a 	mov	r5,zero
 4008438:	21c00017 	ldw	r7,0(r4)
 400843c:	1815883a 	mov	r10,r3
 4008440:	18c00104 	addi	r3,r3,4
 4008444:	398e983a 	sll	r7,r7,r6
 4008448:	21000104 	addi	r4,r4,4
 400844c:	394ab03a 	or	r5,r7,r5
 4008450:	197fff15 	stw	r5,-4(r3)
 4008454:	217fff17 	ldw	r5,-4(r4)
 4008458:	2a4ad83a 	srl	r5,r5,r9
 400845c:	223ff636 	bltu	r4,r8,4008438 <__alt_data_end+0xfc008438>
 4008460:	51400115 	stw	r5,4(r10)
 4008464:	28001a1e 	bne	r5,zero,40084d0 <__lshift+0x140>
 4008468:	843fffc4 	addi	r16,r16,-1
 400846c:	14000415 	stw	r16,16(r2)
 4008470:	88000826 	beq	r17,zero,4008494 <__lshift+0x104>
 4008474:	89000117 	ldw	r4,4(r17)
 4008478:	90c01317 	ldw	r3,76(r18)
 400847c:	2109883a 	add	r4,r4,r4
 4008480:	2109883a 	add	r4,r4,r4
 4008484:	1907883a 	add	r3,r3,r4
 4008488:	19000017 	ldw	r4,0(r3)
 400848c:	89000015 	stw	r4,0(r17)
 4008490:	1c400015 	stw	r17,0(r3)
 4008494:	dfc00617 	ldw	ra,24(sp)
 4008498:	dd400517 	ldw	r21,20(sp)
 400849c:	dd000417 	ldw	r20,16(sp)
 40084a0:	dcc00317 	ldw	r19,12(sp)
 40084a4:	dc800217 	ldw	r18,8(sp)
 40084a8:	dc400117 	ldw	r17,4(sp)
 40084ac:	dc000017 	ldw	r16,0(sp)
 40084b0:	dec00704 	addi	sp,sp,28
 40084b4:	f800283a 	ret
 40084b8:	21400017 	ldw	r5,0(r4)
 40084bc:	18c00104 	addi	r3,r3,4
 40084c0:	21000104 	addi	r4,r4,4
 40084c4:	197fff15 	stw	r5,-4(r3)
 40084c8:	223ffb36 	bltu	r4,r8,40084b8 <__alt_data_end+0xfc0084b8>
 40084cc:	003fe606 	br	4008468 <__alt_data_end+0xfc008468>
 40084d0:	9c000084 	addi	r16,r19,2
 40084d4:	003fe406 	br	4008468 <__alt_data_end+0xfc008468>

040084d8 <__mcmp>:
 40084d8:	20800417 	ldw	r2,16(r4)
 40084dc:	28c00417 	ldw	r3,16(r5)
 40084e0:	10c5c83a 	sub	r2,r2,r3
 40084e4:	1000111e 	bne	r2,zero,400852c <__mcmp+0x54>
 40084e8:	18c7883a 	add	r3,r3,r3
 40084ec:	18c7883a 	add	r3,r3,r3
 40084f0:	21000504 	addi	r4,r4,20
 40084f4:	29400504 	addi	r5,r5,20
 40084f8:	20c5883a 	add	r2,r4,r3
 40084fc:	28cb883a 	add	r5,r5,r3
 4008500:	00000106 	br	4008508 <__mcmp+0x30>
 4008504:	20800a2e 	bgeu	r4,r2,4008530 <__mcmp+0x58>
 4008508:	10bfff04 	addi	r2,r2,-4
 400850c:	297fff04 	addi	r5,r5,-4
 4008510:	11800017 	ldw	r6,0(r2)
 4008514:	28c00017 	ldw	r3,0(r5)
 4008518:	30fffa26 	beq	r6,r3,4008504 <__alt_data_end+0xfc008504>
 400851c:	30c00236 	bltu	r6,r3,4008528 <__mcmp+0x50>
 4008520:	00800044 	movi	r2,1
 4008524:	f800283a 	ret
 4008528:	00bfffc4 	movi	r2,-1
 400852c:	f800283a 	ret
 4008530:	0005883a 	mov	r2,zero
 4008534:	f800283a 	ret

04008538 <__mdiff>:
 4008538:	28c00417 	ldw	r3,16(r5)
 400853c:	30800417 	ldw	r2,16(r6)
 4008540:	defffa04 	addi	sp,sp,-24
 4008544:	dcc00315 	stw	r19,12(sp)
 4008548:	dc800215 	stw	r18,8(sp)
 400854c:	dfc00515 	stw	ra,20(sp)
 4008550:	dd000415 	stw	r20,16(sp)
 4008554:	dc400115 	stw	r17,4(sp)
 4008558:	dc000015 	stw	r16,0(sp)
 400855c:	1887c83a 	sub	r3,r3,r2
 4008560:	2825883a 	mov	r18,r5
 4008564:	3027883a 	mov	r19,r6
 4008568:	1800141e 	bne	r3,zero,40085bc <__mdiff+0x84>
 400856c:	1085883a 	add	r2,r2,r2
 4008570:	1085883a 	add	r2,r2,r2
 4008574:	2a000504 	addi	r8,r5,20
 4008578:	34000504 	addi	r16,r6,20
 400857c:	4087883a 	add	r3,r8,r2
 4008580:	8085883a 	add	r2,r16,r2
 4008584:	00000106 	br	400858c <__mdiff+0x54>
 4008588:	40c0592e 	bgeu	r8,r3,40086f0 <__mdiff+0x1b8>
 400858c:	18ffff04 	addi	r3,r3,-4
 4008590:	10bfff04 	addi	r2,r2,-4
 4008594:	19c00017 	ldw	r7,0(r3)
 4008598:	11400017 	ldw	r5,0(r2)
 400859c:	397ffa26 	beq	r7,r5,4008588 <__alt_data_end+0xfc008588>
 40085a0:	3940592e 	bgeu	r7,r5,4008708 <__mdiff+0x1d0>
 40085a4:	9005883a 	mov	r2,r18
 40085a8:	4023883a 	mov	r17,r8
 40085ac:	9825883a 	mov	r18,r19
 40085b0:	05000044 	movi	r20,1
 40085b4:	1027883a 	mov	r19,r2
 40085b8:	00000406 	br	40085cc <__mdiff+0x94>
 40085bc:	18005616 	blt	r3,zero,4008718 <__mdiff+0x1e0>
 40085c0:	34400504 	addi	r17,r6,20
 40085c4:	2c000504 	addi	r16,r5,20
 40085c8:	0029883a 	mov	r20,zero
 40085cc:	91400117 	ldw	r5,4(r18)
 40085d0:	4007c100 	call	4007c10 <_Balloc>
 40085d4:	92400417 	ldw	r9,16(r18)
 40085d8:	9b000417 	ldw	r12,16(r19)
 40085dc:	12c00504 	addi	r11,r2,20
 40085e0:	4a51883a 	add	r8,r9,r9
 40085e4:	6319883a 	add	r12,r12,r12
 40085e8:	4211883a 	add	r8,r8,r8
 40085ec:	6319883a 	add	r12,r12,r12
 40085f0:	15000315 	stw	r20,12(r2)
 40085f4:	8211883a 	add	r8,r16,r8
 40085f8:	8b19883a 	add	r12,r17,r12
 40085fc:	0007883a 	mov	r3,zero
 4008600:	81400017 	ldw	r5,0(r16)
 4008604:	89c00017 	ldw	r7,0(r17)
 4008608:	59800104 	addi	r6,r11,4
 400860c:	293fffcc 	andi	r4,r5,65535
 4008610:	20c7883a 	add	r3,r4,r3
 4008614:	393fffcc 	andi	r4,r7,65535
 4008618:	1909c83a 	sub	r4,r3,r4
 400861c:	280ad43a 	srli	r5,r5,16
 4008620:	380ed43a 	srli	r7,r7,16
 4008624:	2007d43a 	srai	r3,r4,16
 4008628:	213fffcc 	andi	r4,r4,65535
 400862c:	29cbc83a 	sub	r5,r5,r7
 4008630:	28c7883a 	add	r3,r5,r3
 4008634:	180a943a 	slli	r5,r3,16
 4008638:	8c400104 	addi	r17,r17,4
 400863c:	84000104 	addi	r16,r16,4
 4008640:	2908b03a 	or	r4,r5,r4
 4008644:	59000015 	stw	r4,0(r11)
 4008648:	1807d43a 	srai	r3,r3,16
 400864c:	3015883a 	mov	r10,r6
 4008650:	3017883a 	mov	r11,r6
 4008654:	8b3fea36 	bltu	r17,r12,4008600 <__alt_data_end+0xfc008600>
 4008658:	8200162e 	bgeu	r16,r8,40086b4 <__mdiff+0x17c>
 400865c:	8017883a 	mov	r11,r16
 4008660:	59400017 	ldw	r5,0(r11)
 4008664:	31800104 	addi	r6,r6,4
 4008668:	5ac00104 	addi	r11,r11,4
 400866c:	293fffcc 	andi	r4,r5,65535
 4008670:	20c7883a 	add	r3,r4,r3
 4008674:	280ed43a 	srli	r7,r5,16
 4008678:	180bd43a 	srai	r5,r3,16
 400867c:	193fffcc 	andi	r4,r3,65535
 4008680:	3947883a 	add	r3,r7,r5
 4008684:	180a943a 	slli	r5,r3,16
 4008688:	1807d43a 	srai	r3,r3,16
 400868c:	2908b03a 	or	r4,r5,r4
 4008690:	313fff15 	stw	r4,-4(r6)
 4008694:	5a3ff236 	bltu	r11,r8,4008660 <__alt_data_end+0xfc008660>
 4008698:	0406303a 	nor	r3,zero,r16
 400869c:	1a07883a 	add	r3,r3,r8
 40086a0:	1806d0ba 	srli	r3,r3,2
 40086a4:	18c00044 	addi	r3,r3,1
 40086a8:	18c7883a 	add	r3,r3,r3
 40086ac:	18c7883a 	add	r3,r3,r3
 40086b0:	50d5883a 	add	r10,r10,r3
 40086b4:	50ffff04 	addi	r3,r10,-4
 40086b8:	2000041e 	bne	r4,zero,40086cc <__mdiff+0x194>
 40086bc:	18ffff04 	addi	r3,r3,-4
 40086c0:	19000017 	ldw	r4,0(r3)
 40086c4:	4a7fffc4 	addi	r9,r9,-1
 40086c8:	203ffc26 	beq	r4,zero,40086bc <__alt_data_end+0xfc0086bc>
 40086cc:	12400415 	stw	r9,16(r2)
 40086d0:	dfc00517 	ldw	ra,20(sp)
 40086d4:	dd000417 	ldw	r20,16(sp)
 40086d8:	dcc00317 	ldw	r19,12(sp)
 40086dc:	dc800217 	ldw	r18,8(sp)
 40086e0:	dc400117 	ldw	r17,4(sp)
 40086e4:	dc000017 	ldw	r16,0(sp)
 40086e8:	dec00604 	addi	sp,sp,24
 40086ec:	f800283a 	ret
 40086f0:	000b883a 	mov	r5,zero
 40086f4:	4007c100 	call	4007c10 <_Balloc>
 40086f8:	00c00044 	movi	r3,1
 40086fc:	10c00415 	stw	r3,16(r2)
 4008700:	10000515 	stw	zero,20(r2)
 4008704:	003ff206 	br	40086d0 <__alt_data_end+0xfc0086d0>
 4008708:	8023883a 	mov	r17,r16
 400870c:	0029883a 	mov	r20,zero
 4008710:	4021883a 	mov	r16,r8
 4008714:	003fad06 	br	40085cc <__alt_data_end+0xfc0085cc>
 4008718:	9005883a 	mov	r2,r18
 400871c:	94400504 	addi	r17,r18,20
 4008720:	9c000504 	addi	r16,r19,20
 4008724:	9825883a 	mov	r18,r19
 4008728:	05000044 	movi	r20,1
 400872c:	1027883a 	mov	r19,r2
 4008730:	003fa606 	br	40085cc <__alt_data_end+0xfc0085cc>

04008734 <__ulp>:
 4008734:	295ffc2c 	andhi	r5,r5,32752
 4008738:	00bf3034 	movhi	r2,64704
 400873c:	2887883a 	add	r3,r5,r2
 4008740:	00c0020e 	bge	zero,r3,400874c <__ulp+0x18>
 4008744:	0005883a 	mov	r2,zero
 4008748:	f800283a 	ret
 400874c:	00c7c83a 	sub	r3,zero,r3
 4008750:	1807d53a 	srai	r3,r3,20
 4008754:	008004c4 	movi	r2,19
 4008758:	10c00b0e 	bge	r2,r3,4008788 <__ulp+0x54>
 400875c:	18bffb04 	addi	r2,r3,-20
 4008760:	01000784 	movi	r4,30
 4008764:	0007883a 	mov	r3,zero
 4008768:	20800516 	blt	r4,r2,4008780 <__ulp+0x4c>
 400876c:	010007c4 	movi	r4,31
 4008770:	2089c83a 	sub	r4,r4,r2
 4008774:	00800044 	movi	r2,1
 4008778:	1104983a 	sll	r2,r2,r4
 400877c:	f800283a 	ret
 4008780:	00800044 	movi	r2,1
 4008784:	f800283a 	ret
 4008788:	01400234 	movhi	r5,8
 400878c:	28c7d83a 	sra	r3,r5,r3
 4008790:	0005883a 	mov	r2,zero
 4008794:	f800283a 	ret

04008798 <__b2d>:
 4008798:	defffa04 	addi	sp,sp,-24
 400879c:	dc000015 	stw	r16,0(sp)
 40087a0:	24000417 	ldw	r16,16(r4)
 40087a4:	dc400115 	stw	r17,4(sp)
 40087a8:	24400504 	addi	r17,r4,20
 40087ac:	8421883a 	add	r16,r16,r16
 40087b0:	8421883a 	add	r16,r16,r16
 40087b4:	8c21883a 	add	r16,r17,r16
 40087b8:	dc800215 	stw	r18,8(sp)
 40087bc:	84bfff17 	ldw	r18,-4(r16)
 40087c0:	dd000415 	stw	r20,16(sp)
 40087c4:	dcc00315 	stw	r19,12(sp)
 40087c8:	9009883a 	mov	r4,r18
 40087cc:	2829883a 	mov	r20,r5
 40087d0:	dfc00515 	stw	ra,20(sp)
 40087d4:	4007f040 	call	4007f04 <__hi0bits>
 40087d8:	00c00804 	movi	r3,32
 40087dc:	1889c83a 	sub	r4,r3,r2
 40087e0:	a1000015 	stw	r4,0(r20)
 40087e4:	01000284 	movi	r4,10
 40087e8:	84ffff04 	addi	r19,r16,-4
 40087ec:	20801216 	blt	r4,r2,4008838 <__b2d+0xa0>
 40087f0:	018002c4 	movi	r6,11
 40087f4:	308dc83a 	sub	r6,r6,r2
 40087f8:	9186d83a 	srl	r3,r18,r6
 40087fc:	18cffc34 	orhi	r3,r3,16368
 4008800:	8cc0212e 	bgeu	r17,r19,4008888 <__b2d+0xf0>
 4008804:	813ffe17 	ldw	r4,-8(r16)
 4008808:	218cd83a 	srl	r6,r4,r6
 400880c:	10800544 	addi	r2,r2,21
 4008810:	9084983a 	sll	r2,r18,r2
 4008814:	1184b03a 	or	r2,r2,r6
 4008818:	dfc00517 	ldw	ra,20(sp)
 400881c:	dd000417 	ldw	r20,16(sp)
 4008820:	dcc00317 	ldw	r19,12(sp)
 4008824:	dc800217 	ldw	r18,8(sp)
 4008828:	dc400117 	ldw	r17,4(sp)
 400882c:	dc000017 	ldw	r16,0(sp)
 4008830:	dec00604 	addi	sp,sp,24
 4008834:	f800283a 	ret
 4008838:	8cc00f2e 	bgeu	r17,r19,4008878 <__b2d+0xe0>
 400883c:	117ffd44 	addi	r5,r2,-11
 4008840:	80bffe17 	ldw	r2,-8(r16)
 4008844:	28000e26 	beq	r5,zero,4008880 <__b2d+0xe8>
 4008848:	1949c83a 	sub	r4,r3,r5
 400884c:	9164983a 	sll	r18,r18,r5
 4008850:	1106d83a 	srl	r3,r2,r4
 4008854:	81bffe04 	addi	r6,r16,-8
 4008858:	948ffc34 	orhi	r18,r18,16368
 400885c:	90c6b03a 	or	r3,r18,r3
 4008860:	89800e2e 	bgeu	r17,r6,400889c <__b2d+0x104>
 4008864:	81bffd17 	ldw	r6,-12(r16)
 4008868:	1144983a 	sll	r2,r2,r5
 400886c:	310ad83a 	srl	r5,r6,r4
 4008870:	2884b03a 	or	r2,r5,r2
 4008874:	003fe806 	br	4008818 <__alt_data_end+0xfc008818>
 4008878:	10bffd44 	addi	r2,r2,-11
 400887c:	1000041e 	bne	r2,zero,4008890 <__b2d+0xf8>
 4008880:	90cffc34 	orhi	r3,r18,16368
 4008884:	003fe406 	br	4008818 <__alt_data_end+0xfc008818>
 4008888:	000d883a 	mov	r6,zero
 400888c:	003fdf06 	br	400880c <__alt_data_end+0xfc00880c>
 4008890:	90a4983a 	sll	r18,r18,r2
 4008894:	0005883a 	mov	r2,zero
 4008898:	003ff906 	br	4008880 <__alt_data_end+0xfc008880>
 400889c:	1144983a 	sll	r2,r2,r5
 40088a0:	003fdd06 	br	4008818 <__alt_data_end+0xfc008818>

040088a4 <__d2b>:
 40088a4:	defff804 	addi	sp,sp,-32
 40088a8:	dc000215 	stw	r16,8(sp)
 40088ac:	3021883a 	mov	r16,r6
 40088b0:	dc400315 	stw	r17,12(sp)
 40088b4:	8022907a 	slli	r17,r16,1
 40088b8:	dd000615 	stw	r20,24(sp)
 40088bc:	2829883a 	mov	r20,r5
 40088c0:	01400044 	movi	r5,1
 40088c4:	dcc00515 	stw	r19,20(sp)
 40088c8:	dc800415 	stw	r18,16(sp)
 40088cc:	dfc00715 	stw	ra,28(sp)
 40088d0:	3825883a 	mov	r18,r7
 40088d4:	8822d57a 	srli	r17,r17,21
 40088d8:	4007c100 	call	4007c10 <_Balloc>
 40088dc:	1027883a 	mov	r19,r2
 40088e0:	00800434 	movhi	r2,16
 40088e4:	10bfffc4 	addi	r2,r2,-1
 40088e8:	808c703a 	and	r6,r16,r2
 40088ec:	88000126 	beq	r17,zero,40088f4 <__d2b+0x50>
 40088f0:	31800434 	orhi	r6,r6,16
 40088f4:	d9800015 	stw	r6,0(sp)
 40088f8:	a0002426 	beq	r20,zero,400898c <__d2b+0xe8>
 40088fc:	d9000104 	addi	r4,sp,4
 4008900:	dd000115 	stw	r20,4(sp)
 4008904:	4007f6c0 	call	4007f6c <__lo0bits>
 4008908:	d8c00017 	ldw	r3,0(sp)
 400890c:	10002f1e 	bne	r2,zero,40089cc <__d2b+0x128>
 4008910:	d9000117 	ldw	r4,4(sp)
 4008914:	99000515 	stw	r4,20(r19)
 4008918:	1821003a 	cmpeq	r16,r3,zero
 400891c:	01000084 	movi	r4,2
 4008920:	2421c83a 	sub	r16,r4,r16
 4008924:	98c00615 	stw	r3,24(r19)
 4008928:	9c000415 	stw	r16,16(r19)
 400892c:	88001f1e 	bne	r17,zero,40089ac <__d2b+0x108>
 4008930:	10bef384 	addi	r2,r2,-1074
 4008934:	90800015 	stw	r2,0(r18)
 4008938:	00900034 	movhi	r2,16384
 400893c:	10bfffc4 	addi	r2,r2,-1
 4008940:	8085883a 	add	r2,r16,r2
 4008944:	1085883a 	add	r2,r2,r2
 4008948:	1085883a 	add	r2,r2,r2
 400894c:	9885883a 	add	r2,r19,r2
 4008950:	11000517 	ldw	r4,20(r2)
 4008954:	8020917a 	slli	r16,r16,5
 4008958:	4007f040 	call	4007f04 <__hi0bits>
 400895c:	d8c00817 	ldw	r3,32(sp)
 4008960:	8085c83a 	sub	r2,r16,r2
 4008964:	18800015 	stw	r2,0(r3)
 4008968:	9805883a 	mov	r2,r19
 400896c:	dfc00717 	ldw	ra,28(sp)
 4008970:	dd000617 	ldw	r20,24(sp)
 4008974:	dcc00517 	ldw	r19,20(sp)
 4008978:	dc800417 	ldw	r18,16(sp)
 400897c:	dc400317 	ldw	r17,12(sp)
 4008980:	dc000217 	ldw	r16,8(sp)
 4008984:	dec00804 	addi	sp,sp,32
 4008988:	f800283a 	ret
 400898c:	d809883a 	mov	r4,sp
 4008990:	4007f6c0 	call	4007f6c <__lo0bits>
 4008994:	d8c00017 	ldw	r3,0(sp)
 4008998:	04000044 	movi	r16,1
 400899c:	9c000415 	stw	r16,16(r19)
 40089a0:	98c00515 	stw	r3,20(r19)
 40089a4:	10800804 	addi	r2,r2,32
 40089a8:	883fe126 	beq	r17,zero,4008930 <__alt_data_end+0xfc008930>
 40089ac:	00c00d44 	movi	r3,53
 40089b0:	8c7ef344 	addi	r17,r17,-1075
 40089b4:	88a3883a 	add	r17,r17,r2
 40089b8:	1885c83a 	sub	r2,r3,r2
 40089bc:	d8c00817 	ldw	r3,32(sp)
 40089c0:	94400015 	stw	r17,0(r18)
 40089c4:	18800015 	stw	r2,0(r3)
 40089c8:	003fe706 	br	4008968 <__alt_data_end+0xfc008968>
 40089cc:	01000804 	movi	r4,32
 40089d0:	2089c83a 	sub	r4,r4,r2
 40089d4:	1908983a 	sll	r4,r3,r4
 40089d8:	d9400117 	ldw	r5,4(sp)
 40089dc:	1886d83a 	srl	r3,r3,r2
 40089e0:	2148b03a 	or	r4,r4,r5
 40089e4:	99000515 	stw	r4,20(r19)
 40089e8:	d8c00015 	stw	r3,0(sp)
 40089ec:	003fca06 	br	4008918 <__alt_data_end+0xfc008918>

040089f0 <__ratio>:
 40089f0:	defff904 	addi	sp,sp,-28
 40089f4:	dc400315 	stw	r17,12(sp)
 40089f8:	2823883a 	mov	r17,r5
 40089fc:	d9400104 	addi	r5,sp,4
 4008a00:	dfc00615 	stw	ra,24(sp)
 4008a04:	dcc00515 	stw	r19,20(sp)
 4008a08:	dc800415 	stw	r18,16(sp)
 4008a0c:	2027883a 	mov	r19,r4
 4008a10:	dc000215 	stw	r16,8(sp)
 4008a14:	40087980 	call	4008798 <__b2d>
 4008a18:	d80b883a 	mov	r5,sp
 4008a1c:	8809883a 	mov	r4,r17
 4008a20:	1025883a 	mov	r18,r2
 4008a24:	1821883a 	mov	r16,r3
 4008a28:	40087980 	call	4008798 <__b2d>
 4008a2c:	8a000417 	ldw	r8,16(r17)
 4008a30:	99000417 	ldw	r4,16(r19)
 4008a34:	d9400117 	ldw	r5,4(sp)
 4008a38:	2209c83a 	sub	r4,r4,r8
 4008a3c:	2010917a 	slli	r8,r4,5
 4008a40:	d9000017 	ldw	r4,0(sp)
 4008a44:	2909c83a 	sub	r4,r5,r4
 4008a48:	4109883a 	add	r4,r8,r4
 4008a4c:	01000e0e 	bge	zero,r4,4008a88 <__ratio+0x98>
 4008a50:	2008953a 	slli	r4,r4,20
 4008a54:	2421883a 	add	r16,r4,r16
 4008a58:	100d883a 	mov	r6,r2
 4008a5c:	180f883a 	mov	r7,r3
 4008a60:	9009883a 	mov	r4,r18
 4008a64:	800b883a 	mov	r5,r16
 4008a68:	400c7280 	call	400c728 <__divdf3>
 4008a6c:	dfc00617 	ldw	ra,24(sp)
 4008a70:	dcc00517 	ldw	r19,20(sp)
 4008a74:	dc800417 	ldw	r18,16(sp)
 4008a78:	dc400317 	ldw	r17,12(sp)
 4008a7c:	dc000217 	ldw	r16,8(sp)
 4008a80:	dec00704 	addi	sp,sp,28
 4008a84:	f800283a 	ret
 4008a88:	2008953a 	slli	r4,r4,20
 4008a8c:	1907c83a 	sub	r3,r3,r4
 4008a90:	003ff106 	br	4008a58 <__alt_data_end+0xfc008a58>

04008a94 <_mprec_log10>:
 4008a94:	defffe04 	addi	sp,sp,-8
 4008a98:	dc000015 	stw	r16,0(sp)
 4008a9c:	dfc00115 	stw	ra,4(sp)
 4008aa0:	008005c4 	movi	r2,23
 4008aa4:	2021883a 	mov	r16,r4
 4008aa8:	11000d0e 	bge	r2,r4,4008ae0 <_mprec_log10+0x4c>
 4008aac:	0005883a 	mov	r2,zero
 4008ab0:	00cffc34 	movhi	r3,16368
 4008ab4:	843fffc4 	addi	r16,r16,-1
 4008ab8:	000d883a 	mov	r6,zero
 4008abc:	01d00934 	movhi	r7,16420
 4008ac0:	1009883a 	mov	r4,r2
 4008ac4:	180b883a 	mov	r5,r3
 4008ac8:	400d2680 	call	400d268 <__muldf3>
 4008acc:	803ff91e 	bne	r16,zero,4008ab4 <__alt_data_end+0xfc008ab4>
 4008ad0:	dfc00117 	ldw	ra,4(sp)
 4008ad4:	dc000017 	ldw	r16,0(sp)
 4008ad8:	dec00204 	addi	sp,sp,8
 4008adc:	f800283a 	ret
 4008ae0:	202090fa 	slli	r16,r4,3
 4008ae4:	008100f4 	movhi	r2,1027
 4008ae8:	10856b04 	addi	r2,r2,5548
 4008aec:	1421883a 	add	r16,r2,r16
 4008af0:	80800017 	ldw	r2,0(r16)
 4008af4:	80c00117 	ldw	r3,4(r16)
 4008af8:	dfc00117 	ldw	ra,4(sp)
 4008afc:	dc000017 	ldw	r16,0(sp)
 4008b00:	dec00204 	addi	sp,sp,8
 4008b04:	f800283a 	ret

04008b08 <__copybits>:
 4008b08:	297fffc4 	addi	r5,r5,-1
 4008b0c:	280fd17a 	srai	r7,r5,5
 4008b10:	30c00417 	ldw	r3,16(r6)
 4008b14:	30800504 	addi	r2,r6,20
 4008b18:	39c00044 	addi	r7,r7,1
 4008b1c:	18c7883a 	add	r3,r3,r3
 4008b20:	39cf883a 	add	r7,r7,r7
 4008b24:	18c7883a 	add	r3,r3,r3
 4008b28:	39cf883a 	add	r7,r7,r7
 4008b2c:	10c7883a 	add	r3,r2,r3
 4008b30:	21cf883a 	add	r7,r4,r7
 4008b34:	10c00d2e 	bgeu	r2,r3,4008b6c <__copybits+0x64>
 4008b38:	200b883a 	mov	r5,r4
 4008b3c:	12000017 	ldw	r8,0(r2)
 4008b40:	29400104 	addi	r5,r5,4
 4008b44:	10800104 	addi	r2,r2,4
 4008b48:	2a3fff15 	stw	r8,-4(r5)
 4008b4c:	10fffb36 	bltu	r2,r3,4008b3c <__alt_data_end+0xfc008b3c>
 4008b50:	1985c83a 	sub	r2,r3,r6
 4008b54:	10bffac4 	addi	r2,r2,-21
 4008b58:	1004d0ba 	srli	r2,r2,2
 4008b5c:	10800044 	addi	r2,r2,1
 4008b60:	1085883a 	add	r2,r2,r2
 4008b64:	1085883a 	add	r2,r2,r2
 4008b68:	2089883a 	add	r4,r4,r2
 4008b6c:	21c0032e 	bgeu	r4,r7,4008b7c <__copybits+0x74>
 4008b70:	20000015 	stw	zero,0(r4)
 4008b74:	21000104 	addi	r4,r4,4
 4008b78:	21fffd36 	bltu	r4,r7,4008b70 <__alt_data_end+0xfc008b70>
 4008b7c:	f800283a 	ret

04008b80 <__any_on>:
 4008b80:	20c00417 	ldw	r3,16(r4)
 4008b84:	2805d17a 	srai	r2,r5,5
 4008b88:	21000504 	addi	r4,r4,20
 4008b8c:	18800d0e 	bge	r3,r2,4008bc4 <__any_on+0x44>
 4008b90:	18c7883a 	add	r3,r3,r3
 4008b94:	18c7883a 	add	r3,r3,r3
 4008b98:	20c7883a 	add	r3,r4,r3
 4008b9c:	20c0192e 	bgeu	r4,r3,4008c04 <__any_on+0x84>
 4008ba0:	18bfff17 	ldw	r2,-4(r3)
 4008ba4:	18ffff04 	addi	r3,r3,-4
 4008ba8:	1000041e 	bne	r2,zero,4008bbc <__any_on+0x3c>
 4008bac:	20c0142e 	bgeu	r4,r3,4008c00 <__any_on+0x80>
 4008bb0:	18ffff04 	addi	r3,r3,-4
 4008bb4:	19400017 	ldw	r5,0(r3)
 4008bb8:	283ffc26 	beq	r5,zero,4008bac <__alt_data_end+0xfc008bac>
 4008bbc:	00800044 	movi	r2,1
 4008bc0:	f800283a 	ret
 4008bc4:	10c00a0e 	bge	r2,r3,4008bf0 <__any_on+0x70>
 4008bc8:	1085883a 	add	r2,r2,r2
 4008bcc:	1085883a 	add	r2,r2,r2
 4008bd0:	294007cc 	andi	r5,r5,31
 4008bd4:	2087883a 	add	r3,r4,r2
 4008bd8:	283ff026 	beq	r5,zero,4008b9c <__alt_data_end+0xfc008b9c>
 4008bdc:	19800017 	ldw	r6,0(r3)
 4008be0:	3144d83a 	srl	r2,r6,r5
 4008be4:	114a983a 	sll	r5,r2,r5
 4008be8:	317ff41e 	bne	r6,r5,4008bbc <__alt_data_end+0xfc008bbc>
 4008bec:	003feb06 	br	4008b9c <__alt_data_end+0xfc008b9c>
 4008bf0:	1085883a 	add	r2,r2,r2
 4008bf4:	1085883a 	add	r2,r2,r2
 4008bf8:	2087883a 	add	r3,r4,r2
 4008bfc:	003fe706 	br	4008b9c <__alt_data_end+0xfc008b9c>
 4008c00:	f800283a 	ret
 4008c04:	0005883a 	mov	r2,zero
 4008c08:	f800283a 	ret

04008c0c <_realloc_r>:
 4008c0c:	defff604 	addi	sp,sp,-40
 4008c10:	dc800215 	stw	r18,8(sp)
 4008c14:	dfc00915 	stw	ra,36(sp)
 4008c18:	df000815 	stw	fp,32(sp)
 4008c1c:	ddc00715 	stw	r23,28(sp)
 4008c20:	dd800615 	stw	r22,24(sp)
 4008c24:	dd400515 	stw	r21,20(sp)
 4008c28:	dd000415 	stw	r20,16(sp)
 4008c2c:	dcc00315 	stw	r19,12(sp)
 4008c30:	dc400115 	stw	r17,4(sp)
 4008c34:	dc000015 	stw	r16,0(sp)
 4008c38:	3025883a 	mov	r18,r6
 4008c3c:	2800b726 	beq	r5,zero,4008f1c <_realloc_r+0x310>
 4008c40:	282b883a 	mov	r21,r5
 4008c44:	2029883a 	mov	r20,r4
 4008c48:	400ed000 	call	400ed00 <__malloc_lock>
 4008c4c:	a8bfff17 	ldw	r2,-4(r21)
 4008c50:	043fff04 	movi	r16,-4
 4008c54:	90c002c4 	addi	r3,r18,11
 4008c58:	01000584 	movi	r4,22
 4008c5c:	acfffe04 	addi	r19,r21,-8
 4008c60:	1420703a 	and	r16,r2,r16
 4008c64:	20c0332e 	bgeu	r4,r3,4008d34 <_realloc_r+0x128>
 4008c68:	047ffe04 	movi	r17,-8
 4008c6c:	1c62703a 	and	r17,r3,r17
 4008c70:	8807883a 	mov	r3,r17
 4008c74:	88005816 	blt	r17,zero,4008dd8 <_realloc_r+0x1cc>
 4008c78:	8c805736 	bltu	r17,r18,4008dd8 <_realloc_r+0x1cc>
 4008c7c:	80c0300e 	bge	r16,r3,4008d40 <_realloc_r+0x134>
 4008c80:	070100f4 	movhi	fp,1027
 4008c84:	e70cf704 	addi	fp,fp,13276
 4008c88:	e1c00217 	ldw	r7,8(fp)
 4008c8c:	9c09883a 	add	r4,r19,r16
 4008c90:	22000117 	ldw	r8,4(r4)
 4008c94:	21c06326 	beq	r4,r7,4008e24 <_realloc_r+0x218>
 4008c98:	017fff84 	movi	r5,-2
 4008c9c:	414a703a 	and	r5,r8,r5
 4008ca0:	214b883a 	add	r5,r4,r5
 4008ca4:	29800117 	ldw	r6,4(r5)
 4008ca8:	3180004c 	andi	r6,r6,1
 4008cac:	30003f26 	beq	r6,zero,4008dac <_realloc_r+0x1a0>
 4008cb0:	1080004c 	andi	r2,r2,1
 4008cb4:	10008326 	beq	r2,zero,4008ec4 <_realloc_r+0x2b8>
 4008cb8:	900b883a 	mov	r5,r18
 4008cbc:	a009883a 	mov	r4,r20
 4008cc0:	4006f540 	call	4006f54 <_malloc_r>
 4008cc4:	1025883a 	mov	r18,r2
 4008cc8:	10011e26 	beq	r2,zero,4009144 <_realloc_r+0x538>
 4008ccc:	a93fff17 	ldw	r4,-4(r21)
 4008cd0:	10fffe04 	addi	r3,r2,-8
 4008cd4:	00bfff84 	movi	r2,-2
 4008cd8:	2084703a 	and	r2,r4,r2
 4008cdc:	9885883a 	add	r2,r19,r2
 4008ce0:	1880ee26 	beq	r3,r2,400909c <_realloc_r+0x490>
 4008ce4:	81bfff04 	addi	r6,r16,-4
 4008ce8:	00800904 	movi	r2,36
 4008cec:	1180b836 	bltu	r2,r6,4008fd0 <_realloc_r+0x3c4>
 4008cf0:	00c004c4 	movi	r3,19
 4008cf4:	19809636 	bltu	r3,r6,4008f50 <_realloc_r+0x344>
 4008cf8:	9005883a 	mov	r2,r18
 4008cfc:	a807883a 	mov	r3,r21
 4008d00:	19000017 	ldw	r4,0(r3)
 4008d04:	11000015 	stw	r4,0(r2)
 4008d08:	19000117 	ldw	r4,4(r3)
 4008d0c:	11000115 	stw	r4,4(r2)
 4008d10:	18c00217 	ldw	r3,8(r3)
 4008d14:	10c00215 	stw	r3,8(r2)
 4008d18:	a80b883a 	mov	r5,r21
 4008d1c:	a009883a 	mov	r4,r20
 4008d20:	40063680 	call	4006368 <_free_r>
 4008d24:	a009883a 	mov	r4,r20
 4008d28:	400ed240 	call	400ed24 <__malloc_unlock>
 4008d2c:	9005883a 	mov	r2,r18
 4008d30:	00001206 	br	4008d7c <_realloc_r+0x170>
 4008d34:	00c00404 	movi	r3,16
 4008d38:	1823883a 	mov	r17,r3
 4008d3c:	003fce06 	br	4008c78 <__alt_data_end+0xfc008c78>
 4008d40:	a825883a 	mov	r18,r21
 4008d44:	8445c83a 	sub	r2,r16,r17
 4008d48:	00c003c4 	movi	r3,15
 4008d4c:	18802636 	bltu	r3,r2,4008de8 <_realloc_r+0x1dc>
 4008d50:	99800117 	ldw	r6,4(r19)
 4008d54:	9c07883a 	add	r3,r19,r16
 4008d58:	3180004c 	andi	r6,r6,1
 4008d5c:	3420b03a 	or	r16,r6,r16
 4008d60:	9c000115 	stw	r16,4(r19)
 4008d64:	18800117 	ldw	r2,4(r3)
 4008d68:	10800054 	ori	r2,r2,1
 4008d6c:	18800115 	stw	r2,4(r3)
 4008d70:	a009883a 	mov	r4,r20
 4008d74:	400ed240 	call	400ed24 <__malloc_unlock>
 4008d78:	9005883a 	mov	r2,r18
 4008d7c:	dfc00917 	ldw	ra,36(sp)
 4008d80:	df000817 	ldw	fp,32(sp)
 4008d84:	ddc00717 	ldw	r23,28(sp)
 4008d88:	dd800617 	ldw	r22,24(sp)
 4008d8c:	dd400517 	ldw	r21,20(sp)
 4008d90:	dd000417 	ldw	r20,16(sp)
 4008d94:	dcc00317 	ldw	r19,12(sp)
 4008d98:	dc800217 	ldw	r18,8(sp)
 4008d9c:	dc400117 	ldw	r17,4(sp)
 4008da0:	dc000017 	ldw	r16,0(sp)
 4008da4:	dec00a04 	addi	sp,sp,40
 4008da8:	f800283a 	ret
 4008dac:	017fff04 	movi	r5,-4
 4008db0:	414a703a 	and	r5,r8,r5
 4008db4:	814d883a 	add	r6,r16,r5
 4008db8:	30c01f16 	blt	r6,r3,4008e38 <_realloc_r+0x22c>
 4008dbc:	20800317 	ldw	r2,12(r4)
 4008dc0:	20c00217 	ldw	r3,8(r4)
 4008dc4:	a825883a 	mov	r18,r21
 4008dc8:	3021883a 	mov	r16,r6
 4008dcc:	18800315 	stw	r2,12(r3)
 4008dd0:	10c00215 	stw	r3,8(r2)
 4008dd4:	003fdb06 	br	4008d44 <__alt_data_end+0xfc008d44>
 4008dd8:	00800304 	movi	r2,12
 4008ddc:	a0800015 	stw	r2,0(r20)
 4008de0:	0005883a 	mov	r2,zero
 4008de4:	003fe506 	br	4008d7c <__alt_data_end+0xfc008d7c>
 4008de8:	98c00117 	ldw	r3,4(r19)
 4008dec:	9c4b883a 	add	r5,r19,r17
 4008df0:	11000054 	ori	r4,r2,1
 4008df4:	18c0004c 	andi	r3,r3,1
 4008df8:	1c62b03a 	or	r17,r3,r17
 4008dfc:	9c400115 	stw	r17,4(r19)
 4008e00:	29000115 	stw	r4,4(r5)
 4008e04:	2885883a 	add	r2,r5,r2
 4008e08:	10c00117 	ldw	r3,4(r2)
 4008e0c:	29400204 	addi	r5,r5,8
 4008e10:	a009883a 	mov	r4,r20
 4008e14:	18c00054 	ori	r3,r3,1
 4008e18:	10c00115 	stw	r3,4(r2)
 4008e1c:	40063680 	call	4006368 <_free_r>
 4008e20:	003fd306 	br	4008d70 <__alt_data_end+0xfc008d70>
 4008e24:	017fff04 	movi	r5,-4
 4008e28:	414a703a 	and	r5,r8,r5
 4008e2c:	89800404 	addi	r6,r17,16
 4008e30:	8151883a 	add	r8,r16,r5
 4008e34:	4180590e 	bge	r8,r6,4008f9c <_realloc_r+0x390>
 4008e38:	1080004c 	andi	r2,r2,1
 4008e3c:	103f9e1e 	bne	r2,zero,4008cb8 <__alt_data_end+0xfc008cb8>
 4008e40:	adbffe17 	ldw	r22,-8(r21)
 4008e44:	00bfff04 	movi	r2,-4
 4008e48:	9dadc83a 	sub	r22,r19,r22
 4008e4c:	b1800117 	ldw	r6,4(r22)
 4008e50:	3084703a 	and	r2,r6,r2
 4008e54:	20002026 	beq	r4,zero,4008ed8 <_realloc_r+0x2cc>
 4008e58:	80af883a 	add	r23,r16,r2
 4008e5c:	b96f883a 	add	r23,r23,r5
 4008e60:	21c05f26 	beq	r4,r7,4008fe0 <_realloc_r+0x3d4>
 4008e64:	b8c01c16 	blt	r23,r3,4008ed8 <_realloc_r+0x2cc>
 4008e68:	20800317 	ldw	r2,12(r4)
 4008e6c:	20c00217 	ldw	r3,8(r4)
 4008e70:	81bfff04 	addi	r6,r16,-4
 4008e74:	01000904 	movi	r4,36
 4008e78:	18800315 	stw	r2,12(r3)
 4008e7c:	10c00215 	stw	r3,8(r2)
 4008e80:	b0c00217 	ldw	r3,8(r22)
 4008e84:	b0800317 	ldw	r2,12(r22)
 4008e88:	b4800204 	addi	r18,r22,8
 4008e8c:	18800315 	stw	r2,12(r3)
 4008e90:	10c00215 	stw	r3,8(r2)
 4008e94:	21801b36 	bltu	r4,r6,4008f04 <_realloc_r+0x2f8>
 4008e98:	008004c4 	movi	r2,19
 4008e9c:	1180352e 	bgeu	r2,r6,4008f74 <_realloc_r+0x368>
 4008ea0:	a8800017 	ldw	r2,0(r21)
 4008ea4:	b0800215 	stw	r2,8(r22)
 4008ea8:	a8800117 	ldw	r2,4(r21)
 4008eac:	b0800315 	stw	r2,12(r22)
 4008eb0:	008006c4 	movi	r2,27
 4008eb4:	11807f36 	bltu	r2,r6,40090b4 <_realloc_r+0x4a8>
 4008eb8:	b0800404 	addi	r2,r22,16
 4008ebc:	ad400204 	addi	r21,r21,8
 4008ec0:	00002d06 	br	4008f78 <_realloc_r+0x36c>
 4008ec4:	adbffe17 	ldw	r22,-8(r21)
 4008ec8:	00bfff04 	movi	r2,-4
 4008ecc:	9dadc83a 	sub	r22,r19,r22
 4008ed0:	b1000117 	ldw	r4,4(r22)
 4008ed4:	2084703a 	and	r2,r4,r2
 4008ed8:	b03f7726 	beq	r22,zero,4008cb8 <__alt_data_end+0xfc008cb8>
 4008edc:	80af883a 	add	r23,r16,r2
 4008ee0:	b8ff7516 	blt	r23,r3,4008cb8 <__alt_data_end+0xfc008cb8>
 4008ee4:	b0800317 	ldw	r2,12(r22)
 4008ee8:	b0c00217 	ldw	r3,8(r22)
 4008eec:	81bfff04 	addi	r6,r16,-4
 4008ef0:	01000904 	movi	r4,36
 4008ef4:	18800315 	stw	r2,12(r3)
 4008ef8:	10c00215 	stw	r3,8(r2)
 4008efc:	b4800204 	addi	r18,r22,8
 4008f00:	21bfe52e 	bgeu	r4,r6,4008e98 <__alt_data_end+0xfc008e98>
 4008f04:	a80b883a 	mov	r5,r21
 4008f08:	9009883a 	mov	r4,r18
 4008f0c:	400798c0 	call	400798c <memmove>
 4008f10:	b821883a 	mov	r16,r23
 4008f14:	b027883a 	mov	r19,r22
 4008f18:	003f8a06 	br	4008d44 <__alt_data_end+0xfc008d44>
 4008f1c:	300b883a 	mov	r5,r6
 4008f20:	dfc00917 	ldw	ra,36(sp)
 4008f24:	df000817 	ldw	fp,32(sp)
 4008f28:	ddc00717 	ldw	r23,28(sp)
 4008f2c:	dd800617 	ldw	r22,24(sp)
 4008f30:	dd400517 	ldw	r21,20(sp)
 4008f34:	dd000417 	ldw	r20,16(sp)
 4008f38:	dcc00317 	ldw	r19,12(sp)
 4008f3c:	dc800217 	ldw	r18,8(sp)
 4008f40:	dc400117 	ldw	r17,4(sp)
 4008f44:	dc000017 	ldw	r16,0(sp)
 4008f48:	dec00a04 	addi	sp,sp,40
 4008f4c:	4006f541 	jmpi	4006f54 <_malloc_r>
 4008f50:	a8c00017 	ldw	r3,0(r21)
 4008f54:	90c00015 	stw	r3,0(r18)
 4008f58:	a8c00117 	ldw	r3,4(r21)
 4008f5c:	90c00115 	stw	r3,4(r18)
 4008f60:	00c006c4 	movi	r3,27
 4008f64:	19804536 	bltu	r3,r6,400907c <_realloc_r+0x470>
 4008f68:	90800204 	addi	r2,r18,8
 4008f6c:	a8c00204 	addi	r3,r21,8
 4008f70:	003f6306 	br	4008d00 <__alt_data_end+0xfc008d00>
 4008f74:	9005883a 	mov	r2,r18
 4008f78:	a8c00017 	ldw	r3,0(r21)
 4008f7c:	b821883a 	mov	r16,r23
 4008f80:	b027883a 	mov	r19,r22
 4008f84:	10c00015 	stw	r3,0(r2)
 4008f88:	a8c00117 	ldw	r3,4(r21)
 4008f8c:	10c00115 	stw	r3,4(r2)
 4008f90:	a8c00217 	ldw	r3,8(r21)
 4008f94:	10c00215 	stw	r3,8(r2)
 4008f98:	003f6a06 	br	4008d44 <__alt_data_end+0xfc008d44>
 4008f9c:	9c67883a 	add	r19,r19,r17
 4008fa0:	4445c83a 	sub	r2,r8,r17
 4008fa4:	e4c00215 	stw	r19,8(fp)
 4008fa8:	10800054 	ori	r2,r2,1
 4008fac:	98800115 	stw	r2,4(r19)
 4008fb0:	a8bfff17 	ldw	r2,-4(r21)
 4008fb4:	a009883a 	mov	r4,r20
 4008fb8:	1080004c 	andi	r2,r2,1
 4008fbc:	1462b03a 	or	r17,r2,r17
 4008fc0:	ac7fff15 	stw	r17,-4(r21)
 4008fc4:	400ed240 	call	400ed24 <__malloc_unlock>
 4008fc8:	a805883a 	mov	r2,r21
 4008fcc:	003f6b06 	br	4008d7c <__alt_data_end+0xfc008d7c>
 4008fd0:	a80b883a 	mov	r5,r21
 4008fd4:	9009883a 	mov	r4,r18
 4008fd8:	400798c0 	call	400798c <memmove>
 4008fdc:	003f4e06 	br	4008d18 <__alt_data_end+0xfc008d18>
 4008fe0:	89000404 	addi	r4,r17,16
 4008fe4:	b93fbc16 	blt	r23,r4,4008ed8 <__alt_data_end+0xfc008ed8>
 4008fe8:	b0800317 	ldw	r2,12(r22)
 4008fec:	b0c00217 	ldw	r3,8(r22)
 4008ff0:	81bfff04 	addi	r6,r16,-4
 4008ff4:	01000904 	movi	r4,36
 4008ff8:	18800315 	stw	r2,12(r3)
 4008ffc:	10c00215 	stw	r3,8(r2)
 4009000:	b4800204 	addi	r18,r22,8
 4009004:	21804336 	bltu	r4,r6,4009114 <_realloc_r+0x508>
 4009008:	008004c4 	movi	r2,19
 400900c:	11803f2e 	bgeu	r2,r6,400910c <_realloc_r+0x500>
 4009010:	a8800017 	ldw	r2,0(r21)
 4009014:	b0800215 	stw	r2,8(r22)
 4009018:	a8800117 	ldw	r2,4(r21)
 400901c:	b0800315 	stw	r2,12(r22)
 4009020:	008006c4 	movi	r2,27
 4009024:	11803f36 	bltu	r2,r6,4009124 <_realloc_r+0x518>
 4009028:	b0800404 	addi	r2,r22,16
 400902c:	ad400204 	addi	r21,r21,8
 4009030:	a8c00017 	ldw	r3,0(r21)
 4009034:	10c00015 	stw	r3,0(r2)
 4009038:	a8c00117 	ldw	r3,4(r21)
 400903c:	10c00115 	stw	r3,4(r2)
 4009040:	a8c00217 	ldw	r3,8(r21)
 4009044:	10c00215 	stw	r3,8(r2)
 4009048:	b447883a 	add	r3,r22,r17
 400904c:	bc45c83a 	sub	r2,r23,r17
 4009050:	e0c00215 	stw	r3,8(fp)
 4009054:	10800054 	ori	r2,r2,1
 4009058:	18800115 	stw	r2,4(r3)
 400905c:	b0800117 	ldw	r2,4(r22)
 4009060:	a009883a 	mov	r4,r20
 4009064:	1080004c 	andi	r2,r2,1
 4009068:	1462b03a 	or	r17,r2,r17
 400906c:	b4400115 	stw	r17,4(r22)
 4009070:	400ed240 	call	400ed24 <__malloc_unlock>
 4009074:	9005883a 	mov	r2,r18
 4009078:	003f4006 	br	4008d7c <__alt_data_end+0xfc008d7c>
 400907c:	a8c00217 	ldw	r3,8(r21)
 4009080:	90c00215 	stw	r3,8(r18)
 4009084:	a8c00317 	ldw	r3,12(r21)
 4009088:	90c00315 	stw	r3,12(r18)
 400908c:	30801126 	beq	r6,r2,40090d4 <_realloc_r+0x4c8>
 4009090:	90800404 	addi	r2,r18,16
 4009094:	a8c00404 	addi	r3,r21,16
 4009098:	003f1906 	br	4008d00 <__alt_data_end+0xfc008d00>
 400909c:	90ffff17 	ldw	r3,-4(r18)
 40090a0:	00bfff04 	movi	r2,-4
 40090a4:	a825883a 	mov	r18,r21
 40090a8:	1884703a 	and	r2,r3,r2
 40090ac:	80a1883a 	add	r16,r16,r2
 40090b0:	003f2406 	br	4008d44 <__alt_data_end+0xfc008d44>
 40090b4:	a8800217 	ldw	r2,8(r21)
 40090b8:	b0800415 	stw	r2,16(r22)
 40090bc:	a8800317 	ldw	r2,12(r21)
 40090c0:	b0800515 	stw	r2,20(r22)
 40090c4:	31000a26 	beq	r6,r4,40090f0 <_realloc_r+0x4e4>
 40090c8:	b0800604 	addi	r2,r22,24
 40090cc:	ad400404 	addi	r21,r21,16
 40090d0:	003fa906 	br	4008f78 <__alt_data_end+0xfc008f78>
 40090d4:	a9000417 	ldw	r4,16(r21)
 40090d8:	90800604 	addi	r2,r18,24
 40090dc:	a8c00604 	addi	r3,r21,24
 40090e0:	91000415 	stw	r4,16(r18)
 40090e4:	a9000517 	ldw	r4,20(r21)
 40090e8:	91000515 	stw	r4,20(r18)
 40090ec:	003f0406 	br	4008d00 <__alt_data_end+0xfc008d00>
 40090f0:	a8c00417 	ldw	r3,16(r21)
 40090f4:	ad400604 	addi	r21,r21,24
 40090f8:	b0800804 	addi	r2,r22,32
 40090fc:	b0c00615 	stw	r3,24(r22)
 4009100:	a8ffff17 	ldw	r3,-4(r21)
 4009104:	b0c00715 	stw	r3,28(r22)
 4009108:	003f9b06 	br	4008f78 <__alt_data_end+0xfc008f78>
 400910c:	9005883a 	mov	r2,r18
 4009110:	003fc706 	br	4009030 <__alt_data_end+0xfc009030>
 4009114:	a80b883a 	mov	r5,r21
 4009118:	9009883a 	mov	r4,r18
 400911c:	400798c0 	call	400798c <memmove>
 4009120:	003fc906 	br	4009048 <__alt_data_end+0xfc009048>
 4009124:	a8800217 	ldw	r2,8(r21)
 4009128:	b0800415 	stw	r2,16(r22)
 400912c:	a8800317 	ldw	r2,12(r21)
 4009130:	b0800515 	stw	r2,20(r22)
 4009134:	31000726 	beq	r6,r4,4009154 <_realloc_r+0x548>
 4009138:	b0800604 	addi	r2,r22,24
 400913c:	ad400404 	addi	r21,r21,16
 4009140:	003fbb06 	br	4009030 <__alt_data_end+0xfc009030>
 4009144:	a009883a 	mov	r4,r20
 4009148:	400ed240 	call	400ed24 <__malloc_unlock>
 400914c:	0005883a 	mov	r2,zero
 4009150:	003f0a06 	br	4008d7c <__alt_data_end+0xfc008d7c>
 4009154:	a8c00417 	ldw	r3,16(r21)
 4009158:	ad400604 	addi	r21,r21,24
 400915c:	b0800804 	addi	r2,r22,32
 4009160:	b0c00615 	stw	r3,24(r22)
 4009164:	a8ffff17 	ldw	r3,-4(r21)
 4009168:	b0c00715 	stw	r3,28(r22)
 400916c:	003fb006 	br	4009030 <__alt_data_end+0xfc009030>

04009170 <__fpclassifyd>:
 4009170:	00a00034 	movhi	r2,32768
 4009174:	10bfffc4 	addi	r2,r2,-1
 4009178:	2884703a 	and	r2,r5,r2
 400917c:	10000726 	beq	r2,zero,400919c <__fpclassifyd+0x2c>
 4009180:	00fffc34 	movhi	r3,65520
 4009184:	019ff834 	movhi	r6,32736
 4009188:	28c7883a 	add	r3,r5,r3
 400918c:	31bfffc4 	addi	r6,r6,-1
 4009190:	30c00536 	bltu	r6,r3,40091a8 <__fpclassifyd+0x38>
 4009194:	00800104 	movi	r2,4
 4009198:	f800283a 	ret
 400919c:	2000021e 	bne	r4,zero,40091a8 <__fpclassifyd+0x38>
 40091a0:	00800084 	movi	r2,2
 40091a4:	f800283a 	ret
 40091a8:	00dffc34 	movhi	r3,32752
 40091ac:	019ff834 	movhi	r6,32736
 40091b0:	28cb883a 	add	r5,r5,r3
 40091b4:	31bfffc4 	addi	r6,r6,-1
 40091b8:	317ff62e 	bgeu	r6,r5,4009194 <__alt_data_end+0xfc009194>
 40091bc:	01400434 	movhi	r5,16
 40091c0:	297fffc4 	addi	r5,r5,-1
 40091c4:	28800236 	bltu	r5,r2,40091d0 <__fpclassifyd+0x60>
 40091c8:	008000c4 	movi	r2,3
 40091cc:	f800283a 	ret
 40091d0:	10c00226 	beq	r2,r3,40091dc <__fpclassifyd+0x6c>
 40091d4:	0005883a 	mov	r2,zero
 40091d8:	f800283a 	ret
 40091dc:	2005003a 	cmpeq	r2,r4,zero
 40091e0:	f800283a 	ret

040091e4 <_sbrk_r>:
 40091e4:	defffd04 	addi	sp,sp,-12
 40091e8:	dc000015 	stw	r16,0(sp)
 40091ec:	040100f4 	movhi	r16,1027
 40091f0:	dc400115 	stw	r17,4(sp)
 40091f4:	841f2e04 	addi	r16,r16,31928
 40091f8:	2023883a 	mov	r17,r4
 40091fc:	2809883a 	mov	r4,r5
 4009200:	dfc00215 	stw	ra,8(sp)
 4009204:	80000015 	stw	zero,0(r16)
 4009208:	400eee40 	call	400eee4 <sbrk>
 400920c:	00ffffc4 	movi	r3,-1
 4009210:	10c00526 	beq	r2,r3,4009228 <_sbrk_r+0x44>
 4009214:	dfc00217 	ldw	ra,8(sp)
 4009218:	dc400117 	ldw	r17,4(sp)
 400921c:	dc000017 	ldw	r16,0(sp)
 4009220:	dec00304 	addi	sp,sp,12
 4009224:	f800283a 	ret
 4009228:	80c00017 	ldw	r3,0(r16)
 400922c:	183ff926 	beq	r3,zero,4009214 <__alt_data_end+0xfc009214>
 4009230:	88c00015 	stw	r3,0(r17)
 4009234:	003ff706 	br	4009214 <__alt_data_end+0xfc009214>

04009238 <__sread>:
 4009238:	defffe04 	addi	sp,sp,-8
 400923c:	dc000015 	stw	r16,0(sp)
 4009240:	2821883a 	mov	r16,r5
 4009244:	2940038f 	ldh	r5,14(r5)
 4009248:	dfc00115 	stw	ra,4(sp)
 400924c:	400b02c0 	call	400b02c <_read_r>
 4009250:	10000716 	blt	r2,zero,4009270 <__sread+0x38>
 4009254:	80c01417 	ldw	r3,80(r16)
 4009258:	1887883a 	add	r3,r3,r2
 400925c:	80c01415 	stw	r3,80(r16)
 4009260:	dfc00117 	ldw	ra,4(sp)
 4009264:	dc000017 	ldw	r16,0(sp)
 4009268:	dec00204 	addi	sp,sp,8
 400926c:	f800283a 	ret
 4009270:	80c0030b 	ldhu	r3,12(r16)
 4009274:	18fbffcc 	andi	r3,r3,61439
 4009278:	80c0030d 	sth	r3,12(r16)
 400927c:	dfc00117 	ldw	ra,4(sp)
 4009280:	dc000017 	ldw	r16,0(sp)
 4009284:	dec00204 	addi	sp,sp,8
 4009288:	f800283a 	ret

0400928c <__seofread>:
 400928c:	0005883a 	mov	r2,zero
 4009290:	f800283a 	ret

04009294 <__swrite>:
 4009294:	2880030b 	ldhu	r2,12(r5)
 4009298:	defffb04 	addi	sp,sp,-20
 400929c:	dcc00315 	stw	r19,12(sp)
 40092a0:	dc800215 	stw	r18,8(sp)
 40092a4:	dc400115 	stw	r17,4(sp)
 40092a8:	dc000015 	stw	r16,0(sp)
 40092ac:	dfc00415 	stw	ra,16(sp)
 40092b0:	10c0400c 	andi	r3,r2,256
 40092b4:	2821883a 	mov	r16,r5
 40092b8:	2023883a 	mov	r17,r4
 40092bc:	3025883a 	mov	r18,r6
 40092c0:	3827883a 	mov	r19,r7
 40092c4:	18000526 	beq	r3,zero,40092dc <__swrite+0x48>
 40092c8:	2940038f 	ldh	r5,14(r5)
 40092cc:	01c00084 	movi	r7,2
 40092d0:	000d883a 	mov	r6,zero
 40092d4:	400afcc0 	call	400afcc <_lseek_r>
 40092d8:	8080030b 	ldhu	r2,12(r16)
 40092dc:	8140038f 	ldh	r5,14(r16)
 40092e0:	10bbffcc 	andi	r2,r2,61439
 40092e4:	980f883a 	mov	r7,r19
 40092e8:	900d883a 	mov	r6,r18
 40092ec:	8809883a 	mov	r4,r17
 40092f0:	8080030d 	sth	r2,12(r16)
 40092f4:	dfc00417 	ldw	ra,16(sp)
 40092f8:	dcc00317 	ldw	r19,12(sp)
 40092fc:	dc800217 	ldw	r18,8(sp)
 4009300:	dc400117 	ldw	r17,4(sp)
 4009304:	dc000017 	ldw	r16,0(sp)
 4009308:	dec00504 	addi	sp,sp,20
 400930c:	400aa981 	jmpi	400aa98 <_write_r>

04009310 <__sseek>:
 4009310:	defffe04 	addi	sp,sp,-8
 4009314:	dc000015 	stw	r16,0(sp)
 4009318:	2821883a 	mov	r16,r5
 400931c:	2940038f 	ldh	r5,14(r5)
 4009320:	dfc00115 	stw	ra,4(sp)
 4009324:	400afcc0 	call	400afcc <_lseek_r>
 4009328:	00ffffc4 	movi	r3,-1
 400932c:	10c00826 	beq	r2,r3,4009350 <__sseek+0x40>
 4009330:	80c0030b 	ldhu	r3,12(r16)
 4009334:	80801415 	stw	r2,80(r16)
 4009338:	18c40014 	ori	r3,r3,4096
 400933c:	80c0030d 	sth	r3,12(r16)
 4009340:	dfc00117 	ldw	ra,4(sp)
 4009344:	dc000017 	ldw	r16,0(sp)
 4009348:	dec00204 	addi	sp,sp,8
 400934c:	f800283a 	ret
 4009350:	80c0030b 	ldhu	r3,12(r16)
 4009354:	18fbffcc 	andi	r3,r3,61439
 4009358:	80c0030d 	sth	r3,12(r16)
 400935c:	dfc00117 	ldw	ra,4(sp)
 4009360:	dc000017 	ldw	r16,0(sp)
 4009364:	dec00204 	addi	sp,sp,8
 4009368:	f800283a 	ret

0400936c <__sclose>:
 400936c:	2940038f 	ldh	r5,14(r5)
 4009370:	400aaf81 	jmpi	400aaf8 <_close_r>

04009374 <strcmp>:
 4009374:	2144b03a 	or	r2,r4,r5
 4009378:	108000cc 	andi	r2,r2,3
 400937c:	1000171e 	bne	r2,zero,40093dc <strcmp+0x68>
 4009380:	20800017 	ldw	r2,0(r4)
 4009384:	28c00017 	ldw	r3,0(r5)
 4009388:	10c0141e 	bne	r2,r3,40093dc <strcmp+0x68>
 400938c:	027fbff4 	movhi	r9,65279
 4009390:	4a7fbfc4 	addi	r9,r9,-257
 4009394:	0086303a 	nor	r3,zero,r2
 4009398:	02202074 	movhi	r8,32897
 400939c:	1245883a 	add	r2,r2,r9
 40093a0:	42202004 	addi	r8,r8,-32640
 40093a4:	10c4703a 	and	r2,r2,r3
 40093a8:	1204703a 	and	r2,r2,r8
 40093ac:	10000226 	beq	r2,zero,40093b8 <strcmp+0x44>
 40093b0:	00002306 	br	4009440 <strcmp+0xcc>
 40093b4:	1000221e 	bne	r2,zero,4009440 <strcmp+0xcc>
 40093b8:	21000104 	addi	r4,r4,4
 40093bc:	20c00017 	ldw	r3,0(r4)
 40093c0:	29400104 	addi	r5,r5,4
 40093c4:	29800017 	ldw	r6,0(r5)
 40093c8:	1a4f883a 	add	r7,r3,r9
 40093cc:	00c4303a 	nor	r2,zero,r3
 40093d0:	3884703a 	and	r2,r7,r2
 40093d4:	1204703a 	and	r2,r2,r8
 40093d8:	19bff626 	beq	r3,r6,40093b4 <__alt_data_end+0xfc0093b4>
 40093dc:	20800003 	ldbu	r2,0(r4)
 40093e0:	10c03fcc 	andi	r3,r2,255
 40093e4:	18c0201c 	xori	r3,r3,128
 40093e8:	18ffe004 	addi	r3,r3,-128
 40093ec:	18000c26 	beq	r3,zero,4009420 <strcmp+0xac>
 40093f0:	29800007 	ldb	r6,0(r5)
 40093f4:	19800326 	beq	r3,r6,4009404 <strcmp+0x90>
 40093f8:	00001306 	br	4009448 <strcmp+0xd4>
 40093fc:	29800007 	ldb	r6,0(r5)
 4009400:	11800b1e 	bne	r2,r6,4009430 <strcmp+0xbc>
 4009404:	21000044 	addi	r4,r4,1
 4009408:	20c00003 	ldbu	r3,0(r4)
 400940c:	29400044 	addi	r5,r5,1
 4009410:	18803fcc 	andi	r2,r3,255
 4009414:	1080201c 	xori	r2,r2,128
 4009418:	10bfe004 	addi	r2,r2,-128
 400941c:	103ff71e 	bne	r2,zero,40093fc <__alt_data_end+0xfc0093fc>
 4009420:	0007883a 	mov	r3,zero
 4009424:	28800003 	ldbu	r2,0(r5)
 4009428:	1885c83a 	sub	r2,r3,r2
 400942c:	f800283a 	ret
 4009430:	28800003 	ldbu	r2,0(r5)
 4009434:	18c03fcc 	andi	r3,r3,255
 4009438:	1885c83a 	sub	r2,r3,r2
 400943c:	f800283a 	ret
 4009440:	0005883a 	mov	r2,zero
 4009444:	f800283a 	ret
 4009448:	10c03fcc 	andi	r3,r2,255
 400944c:	003ff506 	br	4009424 <__alt_data_end+0xfc009424>

04009450 <__sprint_r.part.0>:
 4009450:	28801917 	ldw	r2,100(r5)
 4009454:	defff604 	addi	sp,sp,-40
 4009458:	dd400515 	stw	r21,20(sp)
 400945c:	dfc00915 	stw	ra,36(sp)
 4009460:	df000815 	stw	fp,32(sp)
 4009464:	ddc00715 	stw	r23,28(sp)
 4009468:	dd800615 	stw	r22,24(sp)
 400946c:	dd000415 	stw	r20,16(sp)
 4009470:	dcc00315 	stw	r19,12(sp)
 4009474:	dc800215 	stw	r18,8(sp)
 4009478:	dc400115 	stw	r17,4(sp)
 400947c:	dc000015 	stw	r16,0(sp)
 4009480:	1088000c 	andi	r2,r2,8192
 4009484:	302b883a 	mov	r21,r6
 4009488:	10002e26 	beq	r2,zero,4009544 <__sprint_r.part.0+0xf4>
 400948c:	30800217 	ldw	r2,8(r6)
 4009490:	35800017 	ldw	r22,0(r6)
 4009494:	10002926 	beq	r2,zero,400953c <__sprint_r.part.0+0xec>
 4009498:	2827883a 	mov	r19,r5
 400949c:	2029883a 	mov	r20,r4
 40094a0:	b5c00104 	addi	r23,r22,4
 40094a4:	04bfffc4 	movi	r18,-1
 40094a8:	bc400017 	ldw	r17,0(r23)
 40094ac:	b4000017 	ldw	r16,0(r22)
 40094b0:	0039883a 	mov	fp,zero
 40094b4:	8822d0ba 	srli	r17,r17,2
 40094b8:	8800031e 	bne	r17,zero,40094c8 <__sprint_r.part.0+0x78>
 40094bc:	00001806 	br	4009520 <__sprint_r.part.0+0xd0>
 40094c0:	84000104 	addi	r16,r16,4
 40094c4:	8f001526 	beq	r17,fp,400951c <__sprint_r.part.0+0xcc>
 40094c8:	81400017 	ldw	r5,0(r16)
 40094cc:	980d883a 	mov	r6,r19
 40094d0:	a009883a 	mov	r4,r20
 40094d4:	400ae780 	call	400ae78 <_fputwc_r>
 40094d8:	e7000044 	addi	fp,fp,1
 40094dc:	14bff81e 	bne	r2,r18,40094c0 <__alt_data_end+0xfc0094c0>
 40094e0:	9005883a 	mov	r2,r18
 40094e4:	a8000215 	stw	zero,8(r21)
 40094e8:	a8000115 	stw	zero,4(r21)
 40094ec:	dfc00917 	ldw	ra,36(sp)
 40094f0:	df000817 	ldw	fp,32(sp)
 40094f4:	ddc00717 	ldw	r23,28(sp)
 40094f8:	dd800617 	ldw	r22,24(sp)
 40094fc:	dd400517 	ldw	r21,20(sp)
 4009500:	dd000417 	ldw	r20,16(sp)
 4009504:	dcc00317 	ldw	r19,12(sp)
 4009508:	dc800217 	ldw	r18,8(sp)
 400950c:	dc400117 	ldw	r17,4(sp)
 4009510:	dc000017 	ldw	r16,0(sp)
 4009514:	dec00a04 	addi	sp,sp,40
 4009518:	f800283a 	ret
 400951c:	a8800217 	ldw	r2,8(r21)
 4009520:	8c63883a 	add	r17,r17,r17
 4009524:	8c63883a 	add	r17,r17,r17
 4009528:	1445c83a 	sub	r2,r2,r17
 400952c:	a8800215 	stw	r2,8(r21)
 4009530:	b5800204 	addi	r22,r22,8
 4009534:	bdc00204 	addi	r23,r23,8
 4009538:	103fdb1e 	bne	r2,zero,40094a8 <__alt_data_end+0xfc0094a8>
 400953c:	0005883a 	mov	r2,zero
 4009540:	003fe806 	br	40094e4 <__alt_data_end+0xfc0094e4>
 4009544:	40066780 	call	4006678 <__sfvwrite_r>
 4009548:	003fe606 	br	40094e4 <__alt_data_end+0xfc0094e4>

0400954c <__sprint_r>:
 400954c:	30c00217 	ldw	r3,8(r6)
 4009550:	18000126 	beq	r3,zero,4009558 <__sprint_r+0xc>
 4009554:	40094501 	jmpi	4009450 <__sprint_r.part.0>
 4009558:	30000115 	stw	zero,4(r6)
 400955c:	0005883a 	mov	r2,zero
 4009560:	f800283a 	ret

04009564 <___vfiprintf_internal_r>:
 4009564:	deffc904 	addi	sp,sp,-220
 4009568:	df003515 	stw	fp,212(sp)
 400956c:	dd003115 	stw	r20,196(sp)
 4009570:	dfc03615 	stw	ra,216(sp)
 4009574:	ddc03415 	stw	r23,208(sp)
 4009578:	dd803315 	stw	r22,204(sp)
 400957c:	dd403215 	stw	r21,200(sp)
 4009580:	dcc03015 	stw	r19,192(sp)
 4009584:	dc802f15 	stw	r18,188(sp)
 4009588:	dc402e15 	stw	r17,184(sp)
 400958c:	dc002d15 	stw	r16,180(sp)
 4009590:	d9002015 	stw	r4,128(sp)
 4009594:	d9c02215 	stw	r7,136(sp)
 4009598:	2829883a 	mov	r20,r5
 400959c:	3039883a 	mov	fp,r6
 40095a0:	20000226 	beq	r4,zero,40095ac <___vfiprintf_internal_r+0x48>
 40095a4:	20800e17 	ldw	r2,56(r4)
 40095a8:	1000cf26 	beq	r2,zero,40098e8 <___vfiprintf_internal_r+0x384>
 40095ac:	a080030b 	ldhu	r2,12(r20)
 40095b0:	10c8000c 	andi	r3,r2,8192
 40095b4:	1800061e 	bne	r3,zero,40095d0 <___vfiprintf_internal_r+0x6c>
 40095b8:	a1001917 	ldw	r4,100(r20)
 40095bc:	00f7ffc4 	movi	r3,-8193
 40095c0:	10880014 	ori	r2,r2,8192
 40095c4:	20c6703a 	and	r3,r4,r3
 40095c8:	a080030d 	sth	r2,12(r20)
 40095cc:	a0c01915 	stw	r3,100(r20)
 40095d0:	10c0020c 	andi	r3,r2,8
 40095d4:	1800a926 	beq	r3,zero,400987c <___vfiprintf_internal_r+0x318>
 40095d8:	a0c00417 	ldw	r3,16(r20)
 40095dc:	1800a726 	beq	r3,zero,400987c <___vfiprintf_internal_r+0x318>
 40095e0:	1080068c 	andi	r2,r2,26
 40095e4:	00c00284 	movi	r3,10
 40095e8:	10c0ac26 	beq	r2,r3,400989c <___vfiprintf_internal_r+0x338>
 40095ec:	da801a04 	addi	r10,sp,104
 40095f0:	da801e15 	stw	r10,120(sp)
 40095f4:	d8801e17 	ldw	r2,120(sp)
 40095f8:	da8019c4 	addi	r10,sp,103
 40095fc:	058100f4 	movhi	r22,1027
 4009600:	05c100f4 	movhi	r23,1027
 4009604:	da801f15 	stw	r10,124(sp)
 4009608:	1295c83a 	sub	r10,r2,r10
 400960c:	b585a104 	addi	r22,r22,5764
 4009610:	bdc59d04 	addi	r23,r23,5748
 4009614:	dec01a15 	stw	sp,104(sp)
 4009618:	d8001c15 	stw	zero,112(sp)
 400961c:	d8001b15 	stw	zero,108(sp)
 4009620:	d8002615 	stw	zero,152(sp)
 4009624:	d8002315 	stw	zero,140(sp)
 4009628:	da802715 	stw	r10,156(sp)
 400962c:	d811883a 	mov	r8,sp
 4009630:	dd002115 	stw	r20,132(sp)
 4009634:	e021883a 	mov	r16,fp
 4009638:	80800007 	ldb	r2,0(r16)
 400963c:	1003ea26 	beq	r2,zero,400a5e8 <___vfiprintf_internal_r+0x1084>
 4009640:	00c00944 	movi	r3,37
 4009644:	8025883a 	mov	r18,r16
 4009648:	10c0021e 	bne	r2,r3,4009654 <___vfiprintf_internal_r+0xf0>
 400964c:	00001606 	br	40096a8 <___vfiprintf_internal_r+0x144>
 4009650:	10c00326 	beq	r2,r3,4009660 <___vfiprintf_internal_r+0xfc>
 4009654:	94800044 	addi	r18,r18,1
 4009658:	90800007 	ldb	r2,0(r18)
 400965c:	103ffc1e 	bne	r2,zero,4009650 <__alt_data_end+0xfc009650>
 4009660:	9423c83a 	sub	r17,r18,r16
 4009664:	88001026 	beq	r17,zero,40096a8 <___vfiprintf_internal_r+0x144>
 4009668:	d8c01c17 	ldw	r3,112(sp)
 400966c:	d8801b17 	ldw	r2,108(sp)
 4009670:	44000015 	stw	r16,0(r8)
 4009674:	88c7883a 	add	r3,r17,r3
 4009678:	10800044 	addi	r2,r2,1
 400967c:	44400115 	stw	r17,4(r8)
 4009680:	d8c01c15 	stw	r3,112(sp)
 4009684:	d8801b15 	stw	r2,108(sp)
 4009688:	010001c4 	movi	r4,7
 400968c:	2080760e 	bge	r4,r2,4009868 <___vfiprintf_internal_r+0x304>
 4009690:	1803821e 	bne	r3,zero,400a49c <___vfiprintf_internal_r+0xf38>
 4009694:	da802317 	ldw	r10,140(sp)
 4009698:	d8001b15 	stw	zero,108(sp)
 400969c:	d811883a 	mov	r8,sp
 40096a0:	5455883a 	add	r10,r10,r17
 40096a4:	da802315 	stw	r10,140(sp)
 40096a8:	90800007 	ldb	r2,0(r18)
 40096ac:	10044626 	beq	r2,zero,400a7c8 <___vfiprintf_internal_r+0x1264>
 40096b0:	90c00047 	ldb	r3,1(r18)
 40096b4:	94000044 	addi	r16,r18,1
 40096b8:	d8001d85 	stb	zero,118(sp)
 40096bc:	0009883a 	mov	r4,zero
 40096c0:	000f883a 	mov	r7,zero
 40096c4:	027fffc4 	movi	r9,-1
 40096c8:	0023883a 	mov	r17,zero
 40096cc:	0029883a 	mov	r20,zero
 40096d0:	01401604 	movi	r5,88
 40096d4:	01800244 	movi	r6,9
 40096d8:	03400a84 	movi	r13,42
 40096dc:	03001b04 	movi	r12,108
 40096e0:	84000044 	addi	r16,r16,1
 40096e4:	18bff804 	addi	r2,r3,-32
 40096e8:	28827336 	bltu	r5,r2,400a0b8 <___vfiprintf_internal_r+0xb54>
 40096ec:	100490ba 	slli	r2,r2,2
 40096f0:	02810074 	movhi	r10,1025
 40096f4:	52a5c104 	addi	r10,r10,-26876
 40096f8:	1285883a 	add	r2,r2,r10
 40096fc:	10800017 	ldw	r2,0(r2)
 4009700:	1000683a 	jmp	r2
 4009704:	04009dec 	andhi	r16,zero,631
 4009708:	0400a0b8 	rdprs	r16,zero,642
 400970c:	0400a0b8 	rdprs	r16,zero,642
 4009710:	04009e0c 	andi	r16,zero,632
 4009714:	0400a0b8 	rdprs	r16,zero,642
 4009718:	0400a0b8 	rdprs	r16,zero,642
 400971c:	0400a0b8 	rdprs	r16,zero,642
 4009720:	0400a0b8 	rdprs	r16,zero,642
 4009724:	0400a0b8 	rdprs	r16,zero,642
 4009728:	0400a0b8 	rdprs	r16,zero,642
 400972c:	04009ff4 	movhi	r16,639
 4009730:	0400a010 	cmplti	r16,zero,640
 4009734:	0400a0b8 	rdprs	r16,zero,642
 4009738:	040098f8 	rdprs	r16,zero,611
 400973c:	0400a020 	cmpeqi	r16,zero,640
 4009740:	0400a0b8 	rdprs	r16,zero,642
 4009744:	04009e18 	cmpnei	r16,zero,632
 4009748:	04009e24 	muli	r16,zero,632
 400974c:	04009e24 	muli	r16,zero,632
 4009750:	04009e24 	muli	r16,zero,632
 4009754:	04009e24 	muli	r16,zero,632
 4009758:	04009e24 	muli	r16,zero,632
 400975c:	04009e24 	muli	r16,zero,632
 4009760:	04009e24 	muli	r16,zero,632
 4009764:	04009e24 	muli	r16,zero,632
 4009768:	04009e24 	muli	r16,zero,632
 400976c:	0400a0b8 	rdprs	r16,zero,642
 4009770:	0400a0b8 	rdprs	r16,zero,642
 4009774:	0400a0b8 	rdprs	r16,zero,642
 4009778:	0400a0b8 	rdprs	r16,zero,642
 400977c:	0400a0b8 	rdprs	r16,zero,642
 4009780:	0400a0b8 	rdprs	r16,zero,642
 4009784:	0400a0b8 	rdprs	r16,zero,642
 4009788:	0400a0b8 	rdprs	r16,zero,642
 400978c:	0400a0b8 	rdprs	r16,zero,642
 4009790:	0400a0b8 	rdprs	r16,zero,642
 4009794:	04009e50 	cmplti	r16,zero,633
 4009798:	0400a0b8 	rdprs	r16,zero,642
 400979c:	0400a0b8 	rdprs	r16,zero,642
 40097a0:	0400a0b8 	rdprs	r16,zero,642
 40097a4:	0400a0b8 	rdprs	r16,zero,642
 40097a8:	0400a0b8 	rdprs	r16,zero,642
 40097ac:	0400a0b8 	rdprs	r16,zero,642
 40097b0:	0400a0b8 	rdprs	r16,zero,642
 40097b4:	0400a0b8 	rdprs	r16,zero,642
 40097b8:	0400a0b8 	rdprs	r16,zero,642
 40097bc:	0400a0b8 	rdprs	r16,zero,642
 40097c0:	04009e88 	cmpgei	r16,zero,634
 40097c4:	0400a0b8 	rdprs	r16,zero,642
 40097c8:	0400a0b8 	rdprs	r16,zero,642
 40097cc:	0400a0b8 	rdprs	r16,zero,642
 40097d0:	0400a0b8 	rdprs	r16,zero,642
 40097d4:	0400a0b8 	rdprs	r16,zero,642
 40097d8:	04009ee0 	cmpeqi	r16,zero,635
 40097dc:	0400a0b8 	rdprs	r16,zero,642
 40097e0:	0400a0b8 	rdprs	r16,zero,642
 40097e4:	04009f50 	cmplti	r16,zero,637
 40097e8:	0400a0b8 	rdprs	r16,zero,642
 40097ec:	0400a0b8 	rdprs	r16,zero,642
 40097f0:	0400a0b8 	rdprs	r16,zero,642
 40097f4:	0400a0b8 	rdprs	r16,zero,642
 40097f8:	0400a0b8 	rdprs	r16,zero,642
 40097fc:	0400a0b8 	rdprs	r16,zero,642
 4009800:	0400a0b8 	rdprs	r16,zero,642
 4009804:	0400a0b8 	rdprs	r16,zero,642
 4009808:	0400a0b8 	rdprs	r16,zero,642
 400980c:	0400a0b8 	rdprs	r16,zero,642
 4009810:	04009cfc 	xorhi	r16,zero,627
 4009814:	04009d28 	cmpgeui	r16,zero,628
 4009818:	0400a0b8 	rdprs	r16,zero,642
 400981c:	0400a0b8 	rdprs	r16,zero,642
 4009820:	0400a0b8 	rdprs	r16,zero,642
 4009824:	0400a060 	cmpeqi	r16,zero,641
 4009828:	04009d28 	cmpgeui	r16,zero,628
 400982c:	0400a0b8 	rdprs	r16,zero,642
 4009830:	0400a0b8 	rdprs	r16,zero,642
 4009834:	04009bbc 	xorhi	r16,zero,622
 4009838:	0400a0b8 	rdprs	r16,zero,642
 400983c:	04009bcc 	andi	r16,zero,623
 4009840:	04009c08 	cmpgei	r16,zero,624
 4009844:	04009904 	movi	r16,612
 4009848:	04009bb0 	cmpltui	r16,zero,622
 400984c:	0400a0b8 	rdprs	r16,zero,642
 4009850:	04009f8c 	andi	r16,zero,638
 4009854:	0400a0b8 	rdprs	r16,zero,642
 4009858:	04009fe4 	muli	r16,zero,639
 400985c:	0400a0b8 	rdprs	r16,zero,642
 4009860:	0400a0b8 	rdprs	r16,zero,642
 4009864:	04009ca8 	cmpgeui	r16,zero,626
 4009868:	42000204 	addi	r8,r8,8
 400986c:	da802317 	ldw	r10,140(sp)
 4009870:	5455883a 	add	r10,r10,r17
 4009874:	da802315 	stw	r10,140(sp)
 4009878:	003f8b06 	br	40096a8 <__alt_data_end+0xfc0096a8>
 400987c:	d9002017 	ldw	r4,128(sp)
 4009880:	a00b883a 	mov	r5,r20
 4009884:	40042200 	call	4004220 <__swsetup_r>
 4009888:	1003b11e 	bne	r2,zero,400a750 <___vfiprintf_internal_r+0x11ec>
 400988c:	a080030b 	ldhu	r2,12(r20)
 4009890:	00c00284 	movi	r3,10
 4009894:	1080068c 	andi	r2,r2,26
 4009898:	10ff541e 	bne	r2,r3,40095ec <__alt_data_end+0xfc0095ec>
 400989c:	a080038f 	ldh	r2,14(r20)
 40098a0:	103f5216 	blt	r2,zero,40095ec <__alt_data_end+0xfc0095ec>
 40098a4:	d9c02217 	ldw	r7,136(sp)
 40098a8:	d9002017 	ldw	r4,128(sp)
 40098ac:	e00d883a 	mov	r6,fp
 40098b0:	a00b883a 	mov	r5,r20
 40098b4:	400a9dc0 	call	400a9dc <__sbprintf>
 40098b8:	dfc03617 	ldw	ra,216(sp)
 40098bc:	df003517 	ldw	fp,212(sp)
 40098c0:	ddc03417 	ldw	r23,208(sp)
 40098c4:	dd803317 	ldw	r22,204(sp)
 40098c8:	dd403217 	ldw	r21,200(sp)
 40098cc:	dd003117 	ldw	r20,196(sp)
 40098d0:	dcc03017 	ldw	r19,192(sp)
 40098d4:	dc802f17 	ldw	r18,188(sp)
 40098d8:	dc402e17 	ldw	r17,184(sp)
 40098dc:	dc002d17 	ldw	r16,180(sp)
 40098e0:	dec03704 	addi	sp,sp,220
 40098e4:	f800283a 	ret
 40098e8:	40061f40 	call	40061f4 <__sinit>
 40098ec:	003f2f06 	br	40095ac <__alt_data_end+0xfc0095ac>
 40098f0:	0463c83a 	sub	r17,zero,r17
 40098f4:	d8802215 	stw	r2,136(sp)
 40098f8:	a5000114 	ori	r20,r20,4
 40098fc:	80c00007 	ldb	r3,0(r16)
 4009900:	003f7706 	br	40096e0 <__alt_data_end+0xfc0096e0>
 4009904:	00800c04 	movi	r2,48
 4009908:	da802217 	ldw	r10,136(sp)
 400990c:	d8801d05 	stb	r2,116(sp)
 4009910:	00801e04 	movi	r2,120
 4009914:	d8801d45 	stb	r2,117(sp)
 4009918:	d8001d85 	stb	zero,118(sp)
 400991c:	50c00104 	addi	r3,r10,4
 4009920:	54800017 	ldw	r18,0(r10)
 4009924:	0027883a 	mov	r19,zero
 4009928:	a0800094 	ori	r2,r20,2
 400992c:	48030b16 	blt	r9,zero,400a55c <___vfiprintf_internal_r+0xff8>
 4009930:	00bfdfc4 	movi	r2,-129
 4009934:	a096703a 	and	r11,r20,r2
 4009938:	d8c02215 	stw	r3,136(sp)
 400993c:	5d000094 	ori	r20,r11,2
 4009940:	90032b1e 	bne	r18,zero,400a5f0 <___vfiprintf_internal_r+0x108c>
 4009944:	008100f4 	movhi	r2,1027
 4009948:	10853c04 	addi	r2,r2,5360
 400994c:	d8802615 	stw	r2,152(sp)
 4009950:	0039883a 	mov	fp,zero
 4009954:	48017b1e 	bne	r9,zero,4009f44 <___vfiprintf_internal_r+0x9e0>
 4009958:	0013883a 	mov	r9,zero
 400995c:	0027883a 	mov	r19,zero
 4009960:	dd401a04 	addi	r21,sp,104
 4009964:	4825883a 	mov	r18,r9
 4009968:	4cc0010e 	bge	r9,r19,4009970 <___vfiprintf_internal_r+0x40c>
 400996c:	9825883a 	mov	r18,r19
 4009970:	e7003fcc 	andi	fp,fp,255
 4009974:	e700201c 	xori	fp,fp,128
 4009978:	e73fe004 	addi	fp,fp,-128
 400997c:	e0000126 	beq	fp,zero,4009984 <___vfiprintf_internal_r+0x420>
 4009980:	94800044 	addi	r18,r18,1
 4009984:	a380008c 	andi	r14,r20,2
 4009988:	70000126 	beq	r14,zero,4009990 <___vfiprintf_internal_r+0x42c>
 400998c:	94800084 	addi	r18,r18,2
 4009990:	a700210c 	andi	fp,r20,132
 4009994:	e001df1e 	bne	fp,zero,400a114 <___vfiprintf_internal_r+0xbb0>
 4009998:	8c87c83a 	sub	r3,r17,r18
 400999c:	00c1dd0e 	bge	zero,r3,400a114 <___vfiprintf_internal_r+0xbb0>
 40099a0:	01c00404 	movi	r7,16
 40099a4:	d8801c17 	ldw	r2,112(sp)
 40099a8:	38c3ad0e 	bge	r7,r3,400a860 <___vfiprintf_internal_r+0x12fc>
 40099ac:	028100f4 	movhi	r10,1027
 40099b0:	5285a104 	addi	r10,r10,5764
 40099b4:	dc002915 	stw	r16,164(sp)
 40099b8:	d9801b17 	ldw	r6,108(sp)
 40099bc:	da802415 	stw	r10,144(sp)
 40099c0:	03c001c4 	movi	r15,7
 40099c4:	da402515 	stw	r9,148(sp)
 40099c8:	db802815 	stw	r14,160(sp)
 40099cc:	1821883a 	mov	r16,r3
 40099d0:	00000506 	br	40099e8 <___vfiprintf_internal_r+0x484>
 40099d4:	31400084 	addi	r5,r6,2
 40099d8:	42000204 	addi	r8,r8,8
 40099dc:	200d883a 	mov	r6,r4
 40099e0:	843ffc04 	addi	r16,r16,-16
 40099e4:	3c000d0e 	bge	r7,r16,4009a1c <___vfiprintf_internal_r+0x4b8>
 40099e8:	10800404 	addi	r2,r2,16
 40099ec:	31000044 	addi	r4,r6,1
 40099f0:	45800015 	stw	r22,0(r8)
 40099f4:	41c00115 	stw	r7,4(r8)
 40099f8:	d8801c15 	stw	r2,112(sp)
 40099fc:	d9001b15 	stw	r4,108(sp)
 4009a00:	793ff40e 	bge	r15,r4,40099d4 <__alt_data_end+0xfc0099d4>
 4009a04:	1001b51e 	bne	r2,zero,400a0dc <___vfiprintf_internal_r+0xb78>
 4009a08:	843ffc04 	addi	r16,r16,-16
 4009a0c:	000d883a 	mov	r6,zero
 4009a10:	01400044 	movi	r5,1
 4009a14:	d811883a 	mov	r8,sp
 4009a18:	3c3ff316 	blt	r7,r16,40099e8 <__alt_data_end+0xfc0099e8>
 4009a1c:	8007883a 	mov	r3,r16
 4009a20:	da402517 	ldw	r9,148(sp)
 4009a24:	db802817 	ldw	r14,160(sp)
 4009a28:	dc002917 	ldw	r16,164(sp)
 4009a2c:	da802417 	ldw	r10,144(sp)
 4009a30:	1885883a 	add	r2,r3,r2
 4009a34:	40c00115 	stw	r3,4(r8)
 4009a38:	42800015 	stw	r10,0(r8)
 4009a3c:	d8801c15 	stw	r2,112(sp)
 4009a40:	d9401b15 	stw	r5,108(sp)
 4009a44:	00c001c4 	movi	r3,7
 4009a48:	19426016 	blt	r3,r5,400a3cc <___vfiprintf_internal_r+0xe68>
 4009a4c:	d8c01d87 	ldb	r3,118(sp)
 4009a50:	42000204 	addi	r8,r8,8
 4009a54:	29000044 	addi	r4,r5,1
 4009a58:	1801b31e 	bne	r3,zero,400a128 <___vfiprintf_internal_r+0xbc4>
 4009a5c:	7001c026 	beq	r14,zero,400a160 <___vfiprintf_internal_r+0xbfc>
 4009a60:	d8c01d04 	addi	r3,sp,116
 4009a64:	10800084 	addi	r2,r2,2
 4009a68:	40c00015 	stw	r3,0(r8)
 4009a6c:	00c00084 	movi	r3,2
 4009a70:	40c00115 	stw	r3,4(r8)
 4009a74:	d8801c15 	stw	r2,112(sp)
 4009a78:	d9001b15 	stw	r4,108(sp)
 4009a7c:	00c001c4 	movi	r3,7
 4009a80:	1902650e 	bge	r3,r4,400a418 <___vfiprintf_internal_r+0xeb4>
 4009a84:	10029a1e 	bne	r2,zero,400a4f0 <___vfiprintf_internal_r+0xf8c>
 4009a88:	00c02004 	movi	r3,128
 4009a8c:	01000044 	movi	r4,1
 4009a90:	000b883a 	mov	r5,zero
 4009a94:	d811883a 	mov	r8,sp
 4009a98:	e0c1b31e 	bne	fp,r3,400a168 <___vfiprintf_internal_r+0xc04>
 4009a9c:	8cb9c83a 	sub	fp,r17,r18
 4009aa0:	0701b10e 	bge	zero,fp,400a168 <___vfiprintf_internal_r+0xc04>
 4009aa4:	01c00404 	movi	r7,16
 4009aa8:	3f03890e 	bge	r7,fp,400a8d0 <___vfiprintf_internal_r+0x136c>
 4009aac:	00c100f4 	movhi	r3,1027
 4009ab0:	18c59d04 	addi	r3,r3,5748
 4009ab4:	d8c02415 	stw	r3,144(sp)
 4009ab8:	8007883a 	mov	r3,r16
 4009abc:	034001c4 	movi	r13,7
 4009ac0:	e021883a 	mov	r16,fp
 4009ac4:	da402515 	stw	r9,148(sp)
 4009ac8:	1839883a 	mov	fp,r3
 4009acc:	00000506 	br	4009ae4 <___vfiprintf_internal_r+0x580>
 4009ad0:	29800084 	addi	r6,r5,2
 4009ad4:	42000204 	addi	r8,r8,8
 4009ad8:	180b883a 	mov	r5,r3
 4009adc:	843ffc04 	addi	r16,r16,-16
 4009ae0:	3c000d0e 	bge	r7,r16,4009b18 <___vfiprintf_internal_r+0x5b4>
 4009ae4:	10800404 	addi	r2,r2,16
 4009ae8:	28c00044 	addi	r3,r5,1
 4009aec:	45c00015 	stw	r23,0(r8)
 4009af0:	41c00115 	stw	r7,4(r8)
 4009af4:	d8801c15 	stw	r2,112(sp)
 4009af8:	d8c01b15 	stw	r3,108(sp)
 4009afc:	68fff40e 	bge	r13,r3,4009ad0 <__alt_data_end+0xfc009ad0>
 4009b00:	1002241e 	bne	r2,zero,400a394 <___vfiprintf_internal_r+0xe30>
 4009b04:	843ffc04 	addi	r16,r16,-16
 4009b08:	01800044 	movi	r6,1
 4009b0c:	000b883a 	mov	r5,zero
 4009b10:	d811883a 	mov	r8,sp
 4009b14:	3c3ff316 	blt	r7,r16,4009ae4 <__alt_data_end+0xfc009ae4>
 4009b18:	da402517 	ldw	r9,148(sp)
 4009b1c:	e007883a 	mov	r3,fp
 4009b20:	8039883a 	mov	fp,r16
 4009b24:	1821883a 	mov	r16,r3
 4009b28:	d8c02417 	ldw	r3,144(sp)
 4009b2c:	1705883a 	add	r2,r2,fp
 4009b30:	47000115 	stw	fp,4(r8)
 4009b34:	40c00015 	stw	r3,0(r8)
 4009b38:	d8801c15 	stw	r2,112(sp)
 4009b3c:	d9801b15 	stw	r6,108(sp)
 4009b40:	00c001c4 	movi	r3,7
 4009b44:	19827616 	blt	r3,r6,400a520 <___vfiprintf_internal_r+0xfbc>
 4009b48:	4cf9c83a 	sub	fp,r9,r19
 4009b4c:	42000204 	addi	r8,r8,8
 4009b50:	31000044 	addi	r4,r6,1
 4009b54:	300b883a 	mov	r5,r6
 4009b58:	07018516 	blt	zero,fp,400a170 <___vfiprintf_internal_r+0xc0c>
 4009b5c:	9885883a 	add	r2,r19,r2
 4009b60:	45400015 	stw	r21,0(r8)
 4009b64:	44c00115 	stw	r19,4(r8)
 4009b68:	d8801c15 	stw	r2,112(sp)
 4009b6c:	d9001b15 	stw	r4,108(sp)
 4009b70:	00c001c4 	movi	r3,7
 4009b74:	1901dd0e 	bge	r3,r4,400a2ec <___vfiprintf_internal_r+0xd88>
 4009b78:	1002401e 	bne	r2,zero,400a47c <___vfiprintf_internal_r+0xf18>
 4009b7c:	d8001b15 	stw	zero,108(sp)
 4009b80:	a2c0010c 	andi	r11,r20,4
 4009b84:	58000226 	beq	r11,zero,4009b90 <___vfiprintf_internal_r+0x62c>
 4009b88:	8ca7c83a 	sub	r19,r17,r18
 4009b8c:	04c2f216 	blt	zero,r19,400a758 <___vfiprintf_internal_r+0x11f4>
 4009b90:	8c80010e 	bge	r17,r18,4009b98 <___vfiprintf_internal_r+0x634>
 4009b94:	9023883a 	mov	r17,r18
 4009b98:	da802317 	ldw	r10,140(sp)
 4009b9c:	5455883a 	add	r10,r10,r17
 4009ba0:	da802315 	stw	r10,140(sp)
 4009ba4:	d8001b15 	stw	zero,108(sp)
 4009ba8:	d811883a 	mov	r8,sp
 4009bac:	003ea206 	br	4009638 <__alt_data_end+0xfc009638>
 4009bb0:	a5000814 	ori	r20,r20,32
 4009bb4:	80c00007 	ldb	r3,0(r16)
 4009bb8:	003ec906 	br	40096e0 <__alt_data_end+0xfc0096e0>
 4009bbc:	80c00007 	ldb	r3,0(r16)
 4009bc0:	1b030926 	beq	r3,r12,400a7e8 <___vfiprintf_internal_r+0x1284>
 4009bc4:	a5000414 	ori	r20,r20,16
 4009bc8:	003ec506 	br	40096e0 <__alt_data_end+0xfc0096e0>
 4009bcc:	21003fcc 	andi	r4,r4,255
 4009bd0:	20035e1e 	bne	r4,zero,400a94c <___vfiprintf_internal_r+0x13e8>
 4009bd4:	a080080c 	andi	r2,r20,32
 4009bd8:	1002a526 	beq	r2,zero,400a670 <___vfiprintf_internal_r+0x110c>
 4009bdc:	da802217 	ldw	r10,136(sp)
 4009be0:	50800017 	ldw	r2,0(r10)
 4009be4:	da802317 	ldw	r10,140(sp)
 4009be8:	5007d7fa 	srai	r3,r10,31
 4009bec:	da802217 	ldw	r10,136(sp)
 4009bf0:	10c00115 	stw	r3,4(r2)
 4009bf4:	52800104 	addi	r10,r10,4
 4009bf8:	da802215 	stw	r10,136(sp)
 4009bfc:	da802317 	ldw	r10,140(sp)
 4009c00:	12800015 	stw	r10,0(r2)
 4009c04:	003e8c06 	br	4009638 <__alt_data_end+0xfc009638>
 4009c08:	21003fcc 	andi	r4,r4,255
 4009c0c:	2003511e 	bne	r4,zero,400a954 <___vfiprintf_internal_r+0x13f0>
 4009c10:	a080080c 	andi	r2,r20,32
 4009c14:	1000a126 	beq	r2,zero,4009e9c <___vfiprintf_internal_r+0x938>
 4009c18:	da802217 	ldw	r10,136(sp)
 4009c1c:	d8001d85 	stb	zero,118(sp)
 4009c20:	50800204 	addi	r2,r10,8
 4009c24:	54800017 	ldw	r18,0(r10)
 4009c28:	54c00117 	ldw	r19,4(r10)
 4009c2c:	4802b416 	blt	r9,zero,400a700 <___vfiprintf_internal_r+0x119c>
 4009c30:	013fdfc4 	movi	r4,-129
 4009c34:	94c6b03a 	or	r3,r18,r19
 4009c38:	d8802215 	stw	r2,136(sp)
 4009c3c:	a128703a 	and	r20,r20,r4
 4009c40:	1800a226 	beq	r3,zero,4009ecc <___vfiprintf_internal_r+0x968>
 4009c44:	0039883a 	mov	fp,zero
 4009c48:	dd401a04 	addi	r21,sp,104
 4009c4c:	9006d0fa 	srli	r3,r18,3
 4009c50:	9808977a 	slli	r4,r19,29
 4009c54:	9826d0fa 	srli	r19,r19,3
 4009c58:	948001cc 	andi	r18,r18,7
 4009c5c:	90800c04 	addi	r2,r18,48
 4009c60:	ad7fffc4 	addi	r21,r21,-1
 4009c64:	20e4b03a 	or	r18,r4,r3
 4009c68:	a8800005 	stb	r2,0(r21)
 4009c6c:	94c6b03a 	or	r3,r18,r19
 4009c70:	183ff61e 	bne	r3,zero,4009c4c <__alt_data_end+0xfc009c4c>
 4009c74:	a0c0004c 	andi	r3,r20,1
 4009c78:	18005926 	beq	r3,zero,4009de0 <___vfiprintf_internal_r+0x87c>
 4009c7c:	10803fcc 	andi	r2,r2,255
 4009c80:	1080201c 	xori	r2,r2,128
 4009c84:	10bfe004 	addi	r2,r2,-128
 4009c88:	00c00c04 	movi	r3,48
 4009c8c:	10c05426 	beq	r2,r3,4009de0 <___vfiprintf_internal_r+0x87c>
 4009c90:	da801e17 	ldw	r10,120(sp)
 4009c94:	a8bfffc4 	addi	r2,r21,-1
 4009c98:	a8ffffc5 	stb	r3,-1(r21)
 4009c9c:	50a7c83a 	sub	r19,r10,r2
 4009ca0:	102b883a 	mov	r21,r2
 4009ca4:	003f2f06 	br	4009964 <__alt_data_end+0xfc009964>
 4009ca8:	21003fcc 	andi	r4,r4,255
 4009cac:	2003421e 	bne	r4,zero,400a9b8 <___vfiprintf_internal_r+0x1454>
 4009cb0:	008100f4 	movhi	r2,1027
 4009cb4:	10853c04 	addi	r2,r2,5360
 4009cb8:	d8802615 	stw	r2,152(sp)
 4009cbc:	a080080c 	andi	r2,r20,32
 4009cc0:	1000aa26 	beq	r2,zero,4009f6c <___vfiprintf_internal_r+0xa08>
 4009cc4:	da802217 	ldw	r10,136(sp)
 4009cc8:	54800017 	ldw	r18,0(r10)
 4009ccc:	54c00117 	ldw	r19,4(r10)
 4009cd0:	52800204 	addi	r10,r10,8
 4009cd4:	da802215 	stw	r10,136(sp)
 4009cd8:	a080004c 	andi	r2,r20,1
 4009cdc:	1001d226 	beq	r2,zero,400a428 <___vfiprintf_internal_r+0xec4>
 4009ce0:	94c4b03a 	or	r2,r18,r19
 4009ce4:	1002351e 	bne	r2,zero,400a5bc <___vfiprintf_internal_r+0x1058>
 4009ce8:	d8001d85 	stb	zero,118(sp)
 4009cec:	48022216 	blt	r9,zero,400a578 <___vfiprintf_internal_r+0x1014>
 4009cf0:	00bfdfc4 	movi	r2,-129
 4009cf4:	a0a8703a 	and	r20,r20,r2
 4009cf8:	003f1506 	br	4009950 <__alt_data_end+0xfc009950>
 4009cfc:	da802217 	ldw	r10,136(sp)
 4009d00:	04800044 	movi	r18,1
 4009d04:	d8001d85 	stb	zero,118(sp)
 4009d08:	50800017 	ldw	r2,0(r10)
 4009d0c:	52800104 	addi	r10,r10,4
 4009d10:	da802215 	stw	r10,136(sp)
 4009d14:	d8801005 	stb	r2,64(sp)
 4009d18:	9027883a 	mov	r19,r18
 4009d1c:	dd401004 	addi	r21,sp,64
 4009d20:	0013883a 	mov	r9,zero
 4009d24:	003f1706 	br	4009984 <__alt_data_end+0xfc009984>
 4009d28:	21003fcc 	andi	r4,r4,255
 4009d2c:	2003201e 	bne	r4,zero,400a9b0 <___vfiprintf_internal_r+0x144c>
 4009d30:	a080080c 	andi	r2,r20,32
 4009d34:	10004b26 	beq	r2,zero,4009e64 <___vfiprintf_internal_r+0x900>
 4009d38:	da802217 	ldw	r10,136(sp)
 4009d3c:	50800117 	ldw	r2,4(r10)
 4009d40:	54800017 	ldw	r18,0(r10)
 4009d44:	52800204 	addi	r10,r10,8
 4009d48:	da802215 	stw	r10,136(sp)
 4009d4c:	1027883a 	mov	r19,r2
 4009d50:	10022c16 	blt	r2,zero,400a604 <___vfiprintf_internal_r+0x10a0>
 4009d54:	df001d83 	ldbu	fp,118(sp)
 4009d58:	48007216 	blt	r9,zero,4009f24 <___vfiprintf_internal_r+0x9c0>
 4009d5c:	00ffdfc4 	movi	r3,-129
 4009d60:	94c4b03a 	or	r2,r18,r19
 4009d64:	a0e8703a 	and	r20,r20,r3
 4009d68:	1000cc26 	beq	r2,zero,400a09c <___vfiprintf_internal_r+0xb38>
 4009d6c:	98021026 	beq	r19,zero,400a5b0 <___vfiprintf_internal_r+0x104c>
 4009d70:	dc402415 	stw	r17,144(sp)
 4009d74:	dc002515 	stw	r16,148(sp)
 4009d78:	9823883a 	mov	r17,r19
 4009d7c:	9021883a 	mov	r16,r18
 4009d80:	dd401a04 	addi	r21,sp,104
 4009d84:	4825883a 	mov	r18,r9
 4009d88:	4027883a 	mov	r19,r8
 4009d8c:	8009883a 	mov	r4,r16
 4009d90:	880b883a 	mov	r5,r17
 4009d94:	01800284 	movi	r6,10
 4009d98:	000f883a 	mov	r7,zero
 4009d9c:	400b9440 	call	400b944 <__umoddi3>
 4009da0:	10800c04 	addi	r2,r2,48
 4009da4:	ad7fffc4 	addi	r21,r21,-1
 4009da8:	8009883a 	mov	r4,r16
 4009dac:	880b883a 	mov	r5,r17
 4009db0:	a8800005 	stb	r2,0(r21)
 4009db4:	01800284 	movi	r6,10
 4009db8:	000f883a 	mov	r7,zero
 4009dbc:	400b3cc0 	call	400b3cc <__udivdi3>
 4009dc0:	1021883a 	mov	r16,r2
 4009dc4:	10c4b03a 	or	r2,r2,r3
 4009dc8:	1823883a 	mov	r17,r3
 4009dcc:	103fef1e 	bne	r2,zero,4009d8c <__alt_data_end+0xfc009d8c>
 4009dd0:	dc402417 	ldw	r17,144(sp)
 4009dd4:	dc002517 	ldw	r16,148(sp)
 4009dd8:	9013883a 	mov	r9,r18
 4009ddc:	9811883a 	mov	r8,r19
 4009de0:	da801e17 	ldw	r10,120(sp)
 4009de4:	5567c83a 	sub	r19,r10,r21
 4009de8:	003ede06 	br	4009964 <__alt_data_end+0xfc009964>
 4009dec:	38803fcc 	andi	r2,r7,255
 4009df0:	1080201c 	xori	r2,r2,128
 4009df4:	10bfe004 	addi	r2,r2,-128
 4009df8:	1002371e 	bne	r2,zero,400a6d8 <___vfiprintf_internal_r+0x1174>
 4009dfc:	01000044 	movi	r4,1
 4009e00:	01c00804 	movi	r7,32
 4009e04:	80c00007 	ldb	r3,0(r16)
 4009e08:	003e3506 	br	40096e0 <__alt_data_end+0xfc0096e0>
 4009e0c:	a5000054 	ori	r20,r20,1
 4009e10:	80c00007 	ldb	r3,0(r16)
 4009e14:	003e3206 	br	40096e0 <__alt_data_end+0xfc0096e0>
 4009e18:	a5002014 	ori	r20,r20,128
 4009e1c:	80c00007 	ldb	r3,0(r16)
 4009e20:	003e2f06 	br	40096e0 <__alt_data_end+0xfc0096e0>
 4009e24:	8015883a 	mov	r10,r16
 4009e28:	0023883a 	mov	r17,zero
 4009e2c:	18bff404 	addi	r2,r3,-48
 4009e30:	50c00007 	ldb	r3,0(r10)
 4009e34:	8c4002a4 	muli	r17,r17,10
 4009e38:	84000044 	addi	r16,r16,1
 4009e3c:	8015883a 	mov	r10,r16
 4009e40:	1463883a 	add	r17,r2,r17
 4009e44:	18bff404 	addi	r2,r3,-48
 4009e48:	30bff92e 	bgeu	r6,r2,4009e30 <__alt_data_end+0xfc009e30>
 4009e4c:	003e2506 	br	40096e4 <__alt_data_end+0xfc0096e4>
 4009e50:	21003fcc 	andi	r4,r4,255
 4009e54:	2002d41e 	bne	r4,zero,400a9a8 <___vfiprintf_internal_r+0x1444>
 4009e58:	a5000414 	ori	r20,r20,16
 4009e5c:	a080080c 	andi	r2,r20,32
 4009e60:	103fb51e 	bne	r2,zero,4009d38 <__alt_data_end+0xfc009d38>
 4009e64:	a080040c 	andi	r2,r20,16
 4009e68:	1001f826 	beq	r2,zero,400a64c <___vfiprintf_internal_r+0x10e8>
 4009e6c:	da802217 	ldw	r10,136(sp)
 4009e70:	54800017 	ldw	r18,0(r10)
 4009e74:	52800104 	addi	r10,r10,4
 4009e78:	da802215 	stw	r10,136(sp)
 4009e7c:	9027d7fa 	srai	r19,r18,31
 4009e80:	9805883a 	mov	r2,r19
 4009e84:	003fb206 	br	4009d50 <__alt_data_end+0xfc009d50>
 4009e88:	21003fcc 	andi	r4,r4,255
 4009e8c:	2002c41e 	bne	r4,zero,400a9a0 <___vfiprintf_internal_r+0x143c>
 4009e90:	a5000414 	ori	r20,r20,16
 4009e94:	a080080c 	andi	r2,r20,32
 4009e98:	103f5f1e 	bne	r2,zero,4009c18 <__alt_data_end+0xfc009c18>
 4009e9c:	a080040c 	andi	r2,r20,16
 4009ea0:	10020f26 	beq	r2,zero,400a6e0 <___vfiprintf_internal_r+0x117c>
 4009ea4:	da802217 	ldw	r10,136(sp)
 4009ea8:	d8001d85 	stb	zero,118(sp)
 4009eac:	0027883a 	mov	r19,zero
 4009eb0:	50800104 	addi	r2,r10,4
 4009eb4:	54800017 	ldw	r18,0(r10)
 4009eb8:	48021116 	blt	r9,zero,400a700 <___vfiprintf_internal_r+0x119c>
 4009ebc:	00ffdfc4 	movi	r3,-129
 4009ec0:	d8802215 	stw	r2,136(sp)
 4009ec4:	a0e8703a 	and	r20,r20,r3
 4009ec8:	903f5e1e 	bne	r18,zero,4009c44 <__alt_data_end+0xfc009c44>
 4009ecc:	0039883a 	mov	fp,zero
 4009ed0:	4802a626 	beq	r9,zero,400a96c <___vfiprintf_internal_r+0x1408>
 4009ed4:	0025883a 	mov	r18,zero
 4009ed8:	0027883a 	mov	r19,zero
 4009edc:	003f5a06 	br	4009c48 <__alt_data_end+0xfc009c48>
 4009ee0:	21003fcc 	andi	r4,r4,255
 4009ee4:	20029f1e 	bne	r4,zero,400a964 <___vfiprintf_internal_r+0x1400>
 4009ee8:	a5000414 	ori	r20,r20,16
 4009eec:	a080080c 	andi	r2,r20,32
 4009ef0:	10005e1e 	bne	r2,zero,400a06c <___vfiprintf_internal_r+0xb08>
 4009ef4:	a080040c 	andi	r2,r20,16
 4009ef8:	1001a21e 	bne	r2,zero,400a584 <___vfiprintf_internal_r+0x1020>
 4009efc:	a080100c 	andi	r2,r20,64
 4009f00:	d8001d85 	stb	zero,118(sp)
 4009f04:	da802217 	ldw	r10,136(sp)
 4009f08:	1002231e 	bne	r2,zero,400a798 <___vfiprintf_internal_r+0x1234>
 4009f0c:	50800104 	addi	r2,r10,4
 4009f10:	54800017 	ldw	r18,0(r10)
 4009f14:	0027883a 	mov	r19,zero
 4009f18:	4801a00e 	bge	r9,zero,400a59c <___vfiprintf_internal_r+0x1038>
 4009f1c:	d8802215 	stw	r2,136(sp)
 4009f20:	0039883a 	mov	fp,zero
 4009f24:	94c4b03a 	or	r2,r18,r19
 4009f28:	103f901e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 4009f2c:	00800044 	movi	r2,1
 4009f30:	10803fcc 	andi	r2,r2,255
 4009f34:	00c00044 	movi	r3,1
 4009f38:	10c05926 	beq	r2,r3,400a0a0 <___vfiprintf_internal_r+0xb3c>
 4009f3c:	00c00084 	movi	r3,2
 4009f40:	10ffe41e 	bne	r2,r3,4009ed4 <__alt_data_end+0xfc009ed4>
 4009f44:	0025883a 	mov	r18,zero
 4009f48:	0027883a 	mov	r19,zero
 4009f4c:	00013d06 	br	400a444 <___vfiprintf_internal_r+0xee0>
 4009f50:	21003fcc 	andi	r4,r4,255
 4009f54:	2002811e 	bne	r4,zero,400a95c <___vfiprintf_internal_r+0x13f8>
 4009f58:	008100f4 	movhi	r2,1027
 4009f5c:	10853704 	addi	r2,r2,5340
 4009f60:	d8802615 	stw	r2,152(sp)
 4009f64:	a080080c 	andi	r2,r20,32
 4009f68:	103f561e 	bne	r2,zero,4009cc4 <__alt_data_end+0xfc009cc4>
 4009f6c:	a080040c 	andi	r2,r20,16
 4009f70:	1001d126 	beq	r2,zero,400a6b8 <___vfiprintf_internal_r+0x1154>
 4009f74:	da802217 	ldw	r10,136(sp)
 4009f78:	0027883a 	mov	r19,zero
 4009f7c:	54800017 	ldw	r18,0(r10)
 4009f80:	52800104 	addi	r10,r10,4
 4009f84:	da802215 	stw	r10,136(sp)
 4009f88:	003f5306 	br	4009cd8 <__alt_data_end+0xfc009cd8>
 4009f8c:	da802217 	ldw	r10,136(sp)
 4009f90:	d8001d85 	stb	zero,118(sp)
 4009f94:	55400017 	ldw	r21,0(r10)
 4009f98:	50c00104 	addi	r3,r10,4
 4009f9c:	a8024226 	beq	r21,zero,400a8a8 <___vfiprintf_internal_r+0x1344>
 4009fa0:	48021816 	blt	r9,zero,400a804 <___vfiprintf_internal_r+0x12a0>
 4009fa4:	480d883a 	mov	r6,r9
 4009fa8:	000b883a 	mov	r5,zero
 4009fac:	a809883a 	mov	r4,r21
 4009fb0:	d8c02a15 	stw	r3,168(sp)
 4009fb4:	da002b15 	stw	r8,172(sp)
 4009fb8:	da402c15 	stw	r9,176(sp)
 4009fbc:	40077600 	call	4007760 <memchr>
 4009fc0:	d8c02a17 	ldw	r3,168(sp)
 4009fc4:	da002b17 	ldw	r8,172(sp)
 4009fc8:	da402c17 	ldw	r9,176(sp)
 4009fcc:	10024826 	beq	r2,zero,400a8f0 <___vfiprintf_internal_r+0x138c>
 4009fd0:	1567c83a 	sub	r19,r2,r21
 4009fd4:	df001d83 	ldbu	fp,118(sp)
 4009fd8:	d8c02215 	stw	r3,136(sp)
 4009fdc:	0013883a 	mov	r9,zero
 4009fe0:	003e6006 	br	4009964 <__alt_data_end+0xfc009964>
 4009fe4:	21003fcc 	andi	r4,r4,255
 4009fe8:	203fc026 	beq	r4,zero,4009eec <__alt_data_end+0xfc009eec>
 4009fec:	d9c01d85 	stb	r7,118(sp)
 4009ff0:	003fbe06 	br	4009eec <__alt_data_end+0xfc009eec>
 4009ff4:	da802217 	ldw	r10,136(sp)
 4009ff8:	54400017 	ldw	r17,0(r10)
 4009ffc:	50800104 	addi	r2,r10,4
 400a000:	883e3b16 	blt	r17,zero,40098f0 <__alt_data_end+0xfc0098f0>
 400a004:	d8802215 	stw	r2,136(sp)
 400a008:	80c00007 	ldb	r3,0(r16)
 400a00c:	003db406 	br	40096e0 <__alt_data_end+0xfc0096e0>
 400a010:	01000044 	movi	r4,1
 400a014:	01c00ac4 	movi	r7,43
 400a018:	80c00007 	ldb	r3,0(r16)
 400a01c:	003db006 	br	40096e0 <__alt_data_end+0xfc0096e0>
 400a020:	80c00007 	ldb	r3,0(r16)
 400a024:	82800044 	addi	r10,r16,1
 400a028:	1b423c26 	beq	r3,r13,400a91c <___vfiprintf_internal_r+0x13b8>
 400a02c:	18bff404 	addi	r2,r3,-48
 400a030:	0013883a 	mov	r9,zero
 400a034:	30822b36 	bltu	r6,r2,400a8e4 <___vfiprintf_internal_r+0x1380>
 400a038:	50c00007 	ldb	r3,0(r10)
 400a03c:	4a4002a4 	muli	r9,r9,10
 400a040:	54000044 	addi	r16,r10,1
 400a044:	8015883a 	mov	r10,r16
 400a048:	4893883a 	add	r9,r9,r2
 400a04c:	18bff404 	addi	r2,r3,-48
 400a050:	30bff92e 	bgeu	r6,r2,400a038 <__alt_data_end+0xfc00a038>
 400a054:	483da30e 	bge	r9,zero,40096e4 <__alt_data_end+0xfc0096e4>
 400a058:	027fffc4 	movi	r9,-1
 400a05c:	003da106 	br	40096e4 <__alt_data_end+0xfc0096e4>
 400a060:	a5001014 	ori	r20,r20,64
 400a064:	80c00007 	ldb	r3,0(r16)
 400a068:	003d9d06 	br	40096e0 <__alt_data_end+0xfc0096e0>
 400a06c:	da802217 	ldw	r10,136(sp)
 400a070:	d8001d85 	stb	zero,118(sp)
 400a074:	50c00204 	addi	r3,r10,8
 400a078:	54800017 	ldw	r18,0(r10)
 400a07c:	54c00117 	ldw	r19,4(r10)
 400a080:	4801ca16 	blt	r9,zero,400a7ac <___vfiprintf_internal_r+0x1248>
 400a084:	013fdfc4 	movi	r4,-129
 400a088:	94c4b03a 	or	r2,r18,r19
 400a08c:	d8c02215 	stw	r3,136(sp)
 400a090:	a128703a 	and	r20,r20,r4
 400a094:	0039883a 	mov	fp,zero
 400a098:	103f341e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a09c:	483e2e26 	beq	r9,zero,4009958 <__alt_data_end+0xfc009958>
 400a0a0:	0025883a 	mov	r18,zero
 400a0a4:	94800c04 	addi	r18,r18,48
 400a0a8:	dc8019c5 	stb	r18,103(sp)
 400a0ac:	dcc02717 	ldw	r19,156(sp)
 400a0b0:	dd4019c4 	addi	r21,sp,103
 400a0b4:	003e2b06 	br	4009964 <__alt_data_end+0xfc009964>
 400a0b8:	21003fcc 	andi	r4,r4,255
 400a0bc:	2002361e 	bne	r4,zero,400a998 <___vfiprintf_internal_r+0x1434>
 400a0c0:	1801c126 	beq	r3,zero,400a7c8 <___vfiprintf_internal_r+0x1264>
 400a0c4:	04800044 	movi	r18,1
 400a0c8:	d8c01005 	stb	r3,64(sp)
 400a0cc:	d8001d85 	stb	zero,118(sp)
 400a0d0:	9027883a 	mov	r19,r18
 400a0d4:	dd401004 	addi	r21,sp,64
 400a0d8:	003f1106 	br	4009d20 <__alt_data_end+0xfc009d20>
 400a0dc:	d9402117 	ldw	r5,132(sp)
 400a0e0:	d9002017 	ldw	r4,128(sp)
 400a0e4:	d9801a04 	addi	r6,sp,104
 400a0e8:	d9c02b15 	stw	r7,172(sp)
 400a0ec:	dbc02a15 	stw	r15,168(sp)
 400a0f0:	40094500 	call	4009450 <__sprint_r.part.0>
 400a0f4:	d9c02b17 	ldw	r7,172(sp)
 400a0f8:	dbc02a17 	ldw	r15,168(sp)
 400a0fc:	10006d1e 	bne	r2,zero,400a2b4 <___vfiprintf_internal_r+0xd50>
 400a100:	d9801b17 	ldw	r6,108(sp)
 400a104:	d8801c17 	ldw	r2,112(sp)
 400a108:	d811883a 	mov	r8,sp
 400a10c:	31400044 	addi	r5,r6,1
 400a110:	003e3306 	br	40099e0 <__alt_data_end+0xfc0099e0>
 400a114:	d9401b17 	ldw	r5,108(sp)
 400a118:	d8801c17 	ldw	r2,112(sp)
 400a11c:	29000044 	addi	r4,r5,1
 400a120:	d8c01d87 	ldb	r3,118(sp)
 400a124:	183e4d26 	beq	r3,zero,4009a5c <__alt_data_end+0xfc009a5c>
 400a128:	00c00044 	movi	r3,1
 400a12c:	d9401d84 	addi	r5,sp,118
 400a130:	10c5883a 	add	r2,r2,r3
 400a134:	41400015 	stw	r5,0(r8)
 400a138:	40c00115 	stw	r3,4(r8)
 400a13c:	d8801c15 	stw	r2,112(sp)
 400a140:	d9001b15 	stw	r4,108(sp)
 400a144:	014001c4 	movi	r5,7
 400a148:	2900a90e 	bge	r5,r4,400a3f0 <___vfiprintf_internal_r+0xe8c>
 400a14c:	1000da1e 	bne	r2,zero,400a4b8 <___vfiprintf_internal_r+0xf54>
 400a150:	7000ab1e 	bne	r14,zero,400a400 <___vfiprintf_internal_r+0xe9c>
 400a154:	000b883a 	mov	r5,zero
 400a158:	1809883a 	mov	r4,r3
 400a15c:	d811883a 	mov	r8,sp
 400a160:	00c02004 	movi	r3,128
 400a164:	e0fe4d26 	beq	fp,r3,4009a9c <__alt_data_end+0xfc009a9c>
 400a168:	4cf9c83a 	sub	fp,r9,r19
 400a16c:	073e7b0e 	bge	zero,fp,4009b5c <__alt_data_end+0xfc009b5c>
 400a170:	01c00404 	movi	r7,16
 400a174:	3f01900e 	bge	r7,fp,400a7b8 <___vfiprintf_internal_r+0x1254>
 400a178:	00c100f4 	movhi	r3,1027
 400a17c:	18c59d04 	addi	r3,r3,5748
 400a180:	d8c02415 	stw	r3,144(sp)
 400a184:	034001c4 	movi	r13,7
 400a188:	00000506 	br	400a1a0 <___vfiprintf_internal_r+0xc3c>
 400a18c:	29000084 	addi	r4,r5,2
 400a190:	42000204 	addi	r8,r8,8
 400a194:	180b883a 	mov	r5,r3
 400a198:	e73ffc04 	addi	fp,fp,-16
 400a19c:	3f000d0e 	bge	r7,fp,400a1d4 <___vfiprintf_internal_r+0xc70>
 400a1a0:	10800404 	addi	r2,r2,16
 400a1a4:	28c00044 	addi	r3,r5,1
 400a1a8:	45c00015 	stw	r23,0(r8)
 400a1ac:	41c00115 	stw	r7,4(r8)
 400a1b0:	d8801c15 	stw	r2,112(sp)
 400a1b4:	d8c01b15 	stw	r3,108(sp)
 400a1b8:	68fff40e 	bge	r13,r3,400a18c <__alt_data_end+0xfc00a18c>
 400a1bc:	1000101e 	bne	r2,zero,400a200 <___vfiprintf_internal_r+0xc9c>
 400a1c0:	e73ffc04 	addi	fp,fp,-16
 400a1c4:	01000044 	movi	r4,1
 400a1c8:	000b883a 	mov	r5,zero
 400a1cc:	d811883a 	mov	r8,sp
 400a1d0:	3f3ff316 	blt	r7,fp,400a1a0 <__alt_data_end+0xfc00a1a0>
 400a1d4:	da802417 	ldw	r10,144(sp)
 400a1d8:	1705883a 	add	r2,r2,fp
 400a1dc:	47000115 	stw	fp,4(r8)
 400a1e0:	42800015 	stw	r10,0(r8)
 400a1e4:	d8801c15 	stw	r2,112(sp)
 400a1e8:	d9001b15 	stw	r4,108(sp)
 400a1ec:	00c001c4 	movi	r3,7
 400a1f0:	19003616 	blt	r3,r4,400a2cc <___vfiprintf_internal_r+0xd68>
 400a1f4:	42000204 	addi	r8,r8,8
 400a1f8:	21000044 	addi	r4,r4,1
 400a1fc:	003e5706 	br	4009b5c <__alt_data_end+0xfc009b5c>
 400a200:	d9402117 	ldw	r5,132(sp)
 400a204:	d9002017 	ldw	r4,128(sp)
 400a208:	d9801a04 	addi	r6,sp,104
 400a20c:	d9c02b15 	stw	r7,172(sp)
 400a210:	db402a15 	stw	r13,168(sp)
 400a214:	40094500 	call	4009450 <__sprint_r.part.0>
 400a218:	d9c02b17 	ldw	r7,172(sp)
 400a21c:	db402a17 	ldw	r13,168(sp)
 400a220:	1000241e 	bne	r2,zero,400a2b4 <___vfiprintf_internal_r+0xd50>
 400a224:	d9401b17 	ldw	r5,108(sp)
 400a228:	d8801c17 	ldw	r2,112(sp)
 400a22c:	d811883a 	mov	r8,sp
 400a230:	29000044 	addi	r4,r5,1
 400a234:	003fd806 	br	400a198 <__alt_data_end+0xfc00a198>
 400a238:	d9401b17 	ldw	r5,108(sp)
 400a23c:	00c100f4 	movhi	r3,1027
 400a240:	18c5a104 	addi	r3,r3,5764
 400a244:	d8c02415 	stw	r3,144(sp)
 400a248:	29400044 	addi	r5,r5,1
 400a24c:	d8c02417 	ldw	r3,144(sp)
 400a250:	14c5883a 	add	r2,r2,r19
 400a254:	44c00115 	stw	r19,4(r8)
 400a258:	40c00015 	stw	r3,0(r8)
 400a25c:	d8801c15 	stw	r2,112(sp)
 400a260:	d9401b15 	stw	r5,108(sp)
 400a264:	00c001c4 	movi	r3,7
 400a268:	1940070e 	bge	r3,r5,400a288 <___vfiprintf_internal_r+0xd24>
 400a26c:	103e4826 	beq	r2,zero,4009b90 <__alt_data_end+0xfc009b90>
 400a270:	d9402117 	ldw	r5,132(sp)
 400a274:	d9002017 	ldw	r4,128(sp)
 400a278:	d9801a04 	addi	r6,sp,104
 400a27c:	40094500 	call	4009450 <__sprint_r.part.0>
 400a280:	10000c1e 	bne	r2,zero,400a2b4 <___vfiprintf_internal_r+0xd50>
 400a284:	d8801c17 	ldw	r2,112(sp)
 400a288:	8c80010e 	bge	r17,r18,400a290 <___vfiprintf_internal_r+0xd2c>
 400a28c:	9023883a 	mov	r17,r18
 400a290:	da802317 	ldw	r10,140(sp)
 400a294:	5455883a 	add	r10,r10,r17
 400a298:	da802315 	stw	r10,140(sp)
 400a29c:	103e4126 	beq	r2,zero,4009ba4 <__alt_data_end+0xfc009ba4>
 400a2a0:	d9402117 	ldw	r5,132(sp)
 400a2a4:	d9002017 	ldw	r4,128(sp)
 400a2a8:	d9801a04 	addi	r6,sp,104
 400a2ac:	40094500 	call	4009450 <__sprint_r.part.0>
 400a2b0:	103e3c26 	beq	r2,zero,4009ba4 <__alt_data_end+0xfc009ba4>
 400a2b4:	dd002117 	ldw	r20,132(sp)
 400a2b8:	a080030b 	ldhu	r2,12(r20)
 400a2bc:	1080100c 	andi	r2,r2,64
 400a2c0:	1001231e 	bne	r2,zero,400a750 <___vfiprintf_internal_r+0x11ec>
 400a2c4:	d8802317 	ldw	r2,140(sp)
 400a2c8:	003d7b06 	br	40098b8 <__alt_data_end+0xfc0098b8>
 400a2cc:	1000991e 	bne	r2,zero,400a534 <___vfiprintf_internal_r+0xfd0>
 400a2d0:	00c00044 	movi	r3,1
 400a2d4:	9805883a 	mov	r2,r19
 400a2d8:	dd400015 	stw	r21,0(sp)
 400a2dc:	dcc00115 	stw	r19,4(sp)
 400a2e0:	dcc01c15 	stw	r19,112(sp)
 400a2e4:	d8c01b15 	stw	r3,108(sp)
 400a2e8:	d811883a 	mov	r8,sp
 400a2ec:	42000204 	addi	r8,r8,8
 400a2f0:	a2c0010c 	andi	r11,r20,4
 400a2f4:	583fe426 	beq	r11,zero,400a288 <__alt_data_end+0xfc00a288>
 400a2f8:	8ca7c83a 	sub	r19,r17,r18
 400a2fc:	04ffe20e 	bge	zero,r19,400a288 <__alt_data_end+0xfc00a288>
 400a300:	01c00404 	movi	r7,16
 400a304:	3cffcc0e 	bge	r7,r19,400a238 <__alt_data_end+0xfc00a238>
 400a308:	028100f4 	movhi	r10,1027
 400a30c:	5285a104 	addi	r10,r10,5764
 400a310:	d9001b17 	ldw	r4,108(sp)
 400a314:	da802415 	stw	r10,144(sp)
 400a318:	382b883a 	mov	r21,r7
 400a31c:	050001c4 	movi	r20,7
 400a320:	df002017 	ldw	fp,128(sp)
 400a324:	00000506 	br	400a33c <___vfiprintf_internal_r+0xdd8>
 400a328:	21400084 	addi	r5,r4,2
 400a32c:	42000204 	addi	r8,r8,8
 400a330:	1809883a 	mov	r4,r3
 400a334:	9cfffc04 	addi	r19,r19,-16
 400a338:	acffc40e 	bge	r21,r19,400a24c <__alt_data_end+0xfc00a24c>
 400a33c:	10800404 	addi	r2,r2,16
 400a340:	20c00044 	addi	r3,r4,1
 400a344:	45800015 	stw	r22,0(r8)
 400a348:	45400115 	stw	r21,4(r8)
 400a34c:	d8801c15 	stw	r2,112(sp)
 400a350:	d8c01b15 	stw	r3,108(sp)
 400a354:	a0fff40e 	bge	r20,r3,400a328 <__alt_data_end+0xfc00a328>
 400a358:	1000041e 	bne	r2,zero,400a36c <___vfiprintf_internal_r+0xe08>
 400a35c:	01400044 	movi	r5,1
 400a360:	0009883a 	mov	r4,zero
 400a364:	d811883a 	mov	r8,sp
 400a368:	003ff206 	br	400a334 <__alt_data_end+0xfc00a334>
 400a36c:	d9402117 	ldw	r5,132(sp)
 400a370:	d9801a04 	addi	r6,sp,104
 400a374:	e009883a 	mov	r4,fp
 400a378:	40094500 	call	4009450 <__sprint_r.part.0>
 400a37c:	103fcd1e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a380:	d9001b17 	ldw	r4,108(sp)
 400a384:	d8801c17 	ldw	r2,112(sp)
 400a388:	d811883a 	mov	r8,sp
 400a38c:	21400044 	addi	r5,r4,1
 400a390:	003fe806 	br	400a334 <__alt_data_end+0xfc00a334>
 400a394:	d9402117 	ldw	r5,132(sp)
 400a398:	d9002017 	ldw	r4,128(sp)
 400a39c:	d9801a04 	addi	r6,sp,104
 400a3a0:	d9c02b15 	stw	r7,172(sp)
 400a3a4:	db402a15 	stw	r13,168(sp)
 400a3a8:	40094500 	call	4009450 <__sprint_r.part.0>
 400a3ac:	d9c02b17 	ldw	r7,172(sp)
 400a3b0:	db402a17 	ldw	r13,168(sp)
 400a3b4:	103fbf1e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a3b8:	d9401b17 	ldw	r5,108(sp)
 400a3bc:	d8801c17 	ldw	r2,112(sp)
 400a3c0:	d811883a 	mov	r8,sp
 400a3c4:	29800044 	addi	r6,r5,1
 400a3c8:	003dc406 	br	4009adc <__alt_data_end+0xfc009adc>
 400a3cc:	1000d21e 	bne	r2,zero,400a718 <___vfiprintf_internal_r+0x11b4>
 400a3d0:	d8c01d87 	ldb	r3,118(sp)
 400a3d4:	18009526 	beq	r3,zero,400a62c <___vfiprintf_internal_r+0x10c8>
 400a3d8:	00800044 	movi	r2,1
 400a3dc:	d8c01d84 	addi	r3,sp,118
 400a3e0:	1009883a 	mov	r4,r2
 400a3e4:	d8c00015 	stw	r3,0(sp)
 400a3e8:	d8800115 	stw	r2,4(sp)
 400a3ec:	d811883a 	mov	r8,sp
 400a3f0:	200b883a 	mov	r5,r4
 400a3f4:	42000204 	addi	r8,r8,8
 400a3f8:	21000044 	addi	r4,r4,1
 400a3fc:	003d9706 	br	4009a5c <__alt_data_end+0xfc009a5c>
 400a400:	d9001d04 	addi	r4,sp,116
 400a404:	00800084 	movi	r2,2
 400a408:	d9000015 	stw	r4,0(sp)
 400a40c:	d8800115 	stw	r2,4(sp)
 400a410:	1809883a 	mov	r4,r3
 400a414:	d811883a 	mov	r8,sp
 400a418:	200b883a 	mov	r5,r4
 400a41c:	42000204 	addi	r8,r8,8
 400a420:	21000044 	addi	r4,r4,1
 400a424:	003f4e06 	br	400a160 <__alt_data_end+0xfc00a160>
 400a428:	d8001d85 	stb	zero,118(sp)
 400a42c:	48005016 	blt	r9,zero,400a570 <___vfiprintf_internal_r+0x100c>
 400a430:	00ffdfc4 	movi	r3,-129
 400a434:	94c4b03a 	or	r2,r18,r19
 400a438:	a0e8703a 	and	r20,r20,r3
 400a43c:	103d4426 	beq	r2,zero,4009950 <__alt_data_end+0xfc009950>
 400a440:	0039883a 	mov	fp,zero
 400a444:	d9002617 	ldw	r4,152(sp)
 400a448:	dd401a04 	addi	r21,sp,104
 400a44c:	908003cc 	andi	r2,r18,15
 400a450:	9806973a 	slli	r3,r19,28
 400a454:	2085883a 	add	r2,r4,r2
 400a458:	9024d13a 	srli	r18,r18,4
 400a45c:	10800003 	ldbu	r2,0(r2)
 400a460:	9826d13a 	srli	r19,r19,4
 400a464:	ad7fffc4 	addi	r21,r21,-1
 400a468:	1ca4b03a 	or	r18,r3,r18
 400a46c:	a8800005 	stb	r2,0(r21)
 400a470:	94c4b03a 	or	r2,r18,r19
 400a474:	103ff51e 	bne	r2,zero,400a44c <__alt_data_end+0xfc00a44c>
 400a478:	003e5906 	br	4009de0 <__alt_data_end+0xfc009de0>
 400a47c:	d9402117 	ldw	r5,132(sp)
 400a480:	d9002017 	ldw	r4,128(sp)
 400a484:	d9801a04 	addi	r6,sp,104
 400a488:	40094500 	call	4009450 <__sprint_r.part.0>
 400a48c:	103f891e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a490:	d8801c17 	ldw	r2,112(sp)
 400a494:	d811883a 	mov	r8,sp
 400a498:	003f9506 	br	400a2f0 <__alt_data_end+0xfc00a2f0>
 400a49c:	d9402117 	ldw	r5,132(sp)
 400a4a0:	d9002017 	ldw	r4,128(sp)
 400a4a4:	d9801a04 	addi	r6,sp,104
 400a4a8:	40094500 	call	4009450 <__sprint_r.part.0>
 400a4ac:	103f811e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a4b0:	d811883a 	mov	r8,sp
 400a4b4:	003ced06 	br	400986c <__alt_data_end+0xfc00986c>
 400a4b8:	d9402117 	ldw	r5,132(sp)
 400a4bc:	d9002017 	ldw	r4,128(sp)
 400a4c0:	d9801a04 	addi	r6,sp,104
 400a4c4:	da402c15 	stw	r9,176(sp)
 400a4c8:	db802a15 	stw	r14,168(sp)
 400a4cc:	40094500 	call	4009450 <__sprint_r.part.0>
 400a4d0:	da402c17 	ldw	r9,176(sp)
 400a4d4:	db802a17 	ldw	r14,168(sp)
 400a4d8:	103f761e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a4dc:	d9401b17 	ldw	r5,108(sp)
 400a4e0:	d8801c17 	ldw	r2,112(sp)
 400a4e4:	d811883a 	mov	r8,sp
 400a4e8:	29000044 	addi	r4,r5,1
 400a4ec:	003d5b06 	br	4009a5c <__alt_data_end+0xfc009a5c>
 400a4f0:	d9402117 	ldw	r5,132(sp)
 400a4f4:	d9002017 	ldw	r4,128(sp)
 400a4f8:	d9801a04 	addi	r6,sp,104
 400a4fc:	da402c15 	stw	r9,176(sp)
 400a500:	40094500 	call	4009450 <__sprint_r.part.0>
 400a504:	da402c17 	ldw	r9,176(sp)
 400a508:	103f6a1e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a50c:	d9401b17 	ldw	r5,108(sp)
 400a510:	d8801c17 	ldw	r2,112(sp)
 400a514:	d811883a 	mov	r8,sp
 400a518:	29000044 	addi	r4,r5,1
 400a51c:	003f1006 	br	400a160 <__alt_data_end+0xfc00a160>
 400a520:	1000c31e 	bne	r2,zero,400a830 <___vfiprintf_internal_r+0x12cc>
 400a524:	01000044 	movi	r4,1
 400a528:	000b883a 	mov	r5,zero
 400a52c:	d811883a 	mov	r8,sp
 400a530:	003f0d06 	br	400a168 <__alt_data_end+0xfc00a168>
 400a534:	d9402117 	ldw	r5,132(sp)
 400a538:	d9002017 	ldw	r4,128(sp)
 400a53c:	d9801a04 	addi	r6,sp,104
 400a540:	40094500 	call	4009450 <__sprint_r.part.0>
 400a544:	103f5b1e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a548:	d9001b17 	ldw	r4,108(sp)
 400a54c:	d8801c17 	ldw	r2,112(sp)
 400a550:	d811883a 	mov	r8,sp
 400a554:	21000044 	addi	r4,r4,1
 400a558:	003d8006 	br	4009b5c <__alt_data_end+0xfc009b5c>
 400a55c:	010100f4 	movhi	r4,1027
 400a560:	21053c04 	addi	r4,r4,5360
 400a564:	d9002615 	stw	r4,152(sp)
 400a568:	d8c02215 	stw	r3,136(sp)
 400a56c:	1029883a 	mov	r20,r2
 400a570:	94c4b03a 	or	r2,r18,r19
 400a574:	103fb21e 	bne	r2,zero,400a440 <__alt_data_end+0xfc00a440>
 400a578:	0039883a 	mov	fp,zero
 400a57c:	00800084 	movi	r2,2
 400a580:	003e6b06 	br	4009f30 <__alt_data_end+0xfc009f30>
 400a584:	da802217 	ldw	r10,136(sp)
 400a588:	d8001d85 	stb	zero,118(sp)
 400a58c:	0027883a 	mov	r19,zero
 400a590:	50800104 	addi	r2,r10,4
 400a594:	54800017 	ldw	r18,0(r10)
 400a598:	483e6016 	blt	r9,zero,4009f1c <__alt_data_end+0xfc009f1c>
 400a59c:	00ffdfc4 	movi	r3,-129
 400a5a0:	d8802215 	stw	r2,136(sp)
 400a5a4:	a0e8703a 	and	r20,r20,r3
 400a5a8:	0039883a 	mov	fp,zero
 400a5ac:	903ebb26 	beq	r18,zero,400a09c <__alt_data_end+0xfc00a09c>
 400a5b0:	00800244 	movi	r2,9
 400a5b4:	14bdee36 	bltu	r2,r18,4009d70 <__alt_data_end+0xfc009d70>
 400a5b8:	003eba06 	br	400a0a4 <__alt_data_end+0xfc00a0a4>
 400a5bc:	00800c04 	movi	r2,48
 400a5c0:	d8c01d45 	stb	r3,117(sp)
 400a5c4:	d8801d05 	stb	r2,116(sp)
 400a5c8:	d8001d85 	stb	zero,118(sp)
 400a5cc:	a0c00094 	ori	r3,r20,2
 400a5d0:	4800a916 	blt	r9,zero,400a878 <___vfiprintf_internal_r+0x1314>
 400a5d4:	00bfdfc4 	movi	r2,-129
 400a5d8:	a096703a 	and	r11,r20,r2
 400a5dc:	5d000094 	ori	r20,r11,2
 400a5e0:	0039883a 	mov	fp,zero
 400a5e4:	003f9706 	br	400a444 <__alt_data_end+0xfc00a444>
 400a5e8:	8025883a 	mov	r18,r16
 400a5ec:	003c2e06 	br	40096a8 <__alt_data_end+0xfc0096a8>
 400a5f0:	008100f4 	movhi	r2,1027
 400a5f4:	10853c04 	addi	r2,r2,5360
 400a5f8:	0039883a 	mov	fp,zero
 400a5fc:	d8802615 	stw	r2,152(sp)
 400a600:	003f9006 	br	400a444 <__alt_data_end+0xfc00a444>
 400a604:	04a5c83a 	sub	r18,zero,r18
 400a608:	07000b44 	movi	fp,45
 400a60c:	9004c03a 	cmpne	r2,r18,zero
 400a610:	04e7c83a 	sub	r19,zero,r19
 400a614:	df001d85 	stb	fp,118(sp)
 400a618:	98a7c83a 	sub	r19,r19,r2
 400a61c:	48009f16 	blt	r9,zero,400a89c <___vfiprintf_internal_r+0x1338>
 400a620:	00bfdfc4 	movi	r2,-129
 400a624:	a0a8703a 	and	r20,r20,r2
 400a628:	003dd006 	br	4009d6c <__alt_data_end+0xfc009d6c>
 400a62c:	70004c26 	beq	r14,zero,400a760 <___vfiprintf_internal_r+0x11fc>
 400a630:	00800084 	movi	r2,2
 400a634:	d8c01d04 	addi	r3,sp,116
 400a638:	d8c00015 	stw	r3,0(sp)
 400a63c:	d8800115 	stw	r2,4(sp)
 400a640:	01000044 	movi	r4,1
 400a644:	d811883a 	mov	r8,sp
 400a648:	003f7306 	br	400a418 <__alt_data_end+0xfc00a418>
 400a64c:	a080100c 	andi	r2,r20,64
 400a650:	da802217 	ldw	r10,136(sp)
 400a654:	103e0626 	beq	r2,zero,4009e70 <__alt_data_end+0xfc009e70>
 400a658:	5480000f 	ldh	r18,0(r10)
 400a65c:	52800104 	addi	r10,r10,4
 400a660:	da802215 	stw	r10,136(sp)
 400a664:	9027d7fa 	srai	r19,r18,31
 400a668:	9805883a 	mov	r2,r19
 400a66c:	003db806 	br	4009d50 <__alt_data_end+0xfc009d50>
 400a670:	a080040c 	andi	r2,r20,16
 400a674:	1000091e 	bne	r2,zero,400a69c <___vfiprintf_internal_r+0x1138>
 400a678:	a2c0100c 	andi	r11,r20,64
 400a67c:	58000726 	beq	r11,zero,400a69c <___vfiprintf_internal_r+0x1138>
 400a680:	da802217 	ldw	r10,136(sp)
 400a684:	50800017 	ldw	r2,0(r10)
 400a688:	52800104 	addi	r10,r10,4
 400a68c:	da802215 	stw	r10,136(sp)
 400a690:	da802317 	ldw	r10,140(sp)
 400a694:	1280000d 	sth	r10,0(r2)
 400a698:	003be706 	br	4009638 <__alt_data_end+0xfc009638>
 400a69c:	da802217 	ldw	r10,136(sp)
 400a6a0:	50800017 	ldw	r2,0(r10)
 400a6a4:	52800104 	addi	r10,r10,4
 400a6a8:	da802215 	stw	r10,136(sp)
 400a6ac:	da802317 	ldw	r10,140(sp)
 400a6b0:	12800015 	stw	r10,0(r2)
 400a6b4:	003be006 	br	4009638 <__alt_data_end+0xfc009638>
 400a6b8:	a080100c 	andi	r2,r20,64
 400a6bc:	da802217 	ldw	r10,136(sp)
 400a6c0:	10003026 	beq	r2,zero,400a784 <___vfiprintf_internal_r+0x1220>
 400a6c4:	5480000b 	ldhu	r18,0(r10)
 400a6c8:	52800104 	addi	r10,r10,4
 400a6cc:	0027883a 	mov	r19,zero
 400a6d0:	da802215 	stw	r10,136(sp)
 400a6d4:	003d8006 	br	4009cd8 <__alt_data_end+0xfc009cd8>
 400a6d8:	80c00007 	ldb	r3,0(r16)
 400a6dc:	003c0006 	br	40096e0 <__alt_data_end+0xfc0096e0>
 400a6e0:	a080100c 	andi	r2,r20,64
 400a6e4:	d8001d85 	stb	zero,118(sp)
 400a6e8:	da802217 	ldw	r10,136(sp)
 400a6ec:	1000201e 	bne	r2,zero,400a770 <___vfiprintf_internal_r+0x120c>
 400a6f0:	50800104 	addi	r2,r10,4
 400a6f4:	54800017 	ldw	r18,0(r10)
 400a6f8:	0027883a 	mov	r19,zero
 400a6fc:	483def0e 	bge	r9,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a700:	94c6b03a 	or	r3,r18,r19
 400a704:	d8802215 	stw	r2,136(sp)
 400a708:	183d4e1e 	bne	r3,zero,4009c44 <__alt_data_end+0xfc009c44>
 400a70c:	0039883a 	mov	fp,zero
 400a710:	0005883a 	mov	r2,zero
 400a714:	003e0606 	br	4009f30 <__alt_data_end+0xfc009f30>
 400a718:	d9402117 	ldw	r5,132(sp)
 400a71c:	d9002017 	ldw	r4,128(sp)
 400a720:	d9801a04 	addi	r6,sp,104
 400a724:	da402c15 	stw	r9,176(sp)
 400a728:	db802a15 	stw	r14,168(sp)
 400a72c:	40094500 	call	4009450 <__sprint_r.part.0>
 400a730:	da402c17 	ldw	r9,176(sp)
 400a734:	db802a17 	ldw	r14,168(sp)
 400a738:	103ede1e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a73c:	d9401b17 	ldw	r5,108(sp)
 400a740:	d8801c17 	ldw	r2,112(sp)
 400a744:	d811883a 	mov	r8,sp
 400a748:	29000044 	addi	r4,r5,1
 400a74c:	003e7406 	br	400a120 <__alt_data_end+0xfc00a120>
 400a750:	00bfffc4 	movi	r2,-1
 400a754:	003c5806 	br	40098b8 <__alt_data_end+0xfc0098b8>
 400a758:	d811883a 	mov	r8,sp
 400a75c:	003ee806 	br	400a300 <__alt_data_end+0xfc00a300>
 400a760:	000b883a 	mov	r5,zero
 400a764:	01000044 	movi	r4,1
 400a768:	d811883a 	mov	r8,sp
 400a76c:	003e7c06 	br	400a160 <__alt_data_end+0xfc00a160>
 400a770:	50800104 	addi	r2,r10,4
 400a774:	5480000b 	ldhu	r18,0(r10)
 400a778:	0027883a 	mov	r19,zero
 400a77c:	483dcf0e 	bge	r9,zero,4009ebc <__alt_data_end+0xfc009ebc>
 400a780:	003fdf06 	br	400a700 <__alt_data_end+0xfc00a700>
 400a784:	54800017 	ldw	r18,0(r10)
 400a788:	52800104 	addi	r10,r10,4
 400a78c:	0027883a 	mov	r19,zero
 400a790:	da802215 	stw	r10,136(sp)
 400a794:	003d5006 	br	4009cd8 <__alt_data_end+0xfc009cd8>
 400a798:	50800104 	addi	r2,r10,4
 400a79c:	5480000b 	ldhu	r18,0(r10)
 400a7a0:	0027883a 	mov	r19,zero
 400a7a4:	483f7d0e 	bge	r9,zero,400a59c <__alt_data_end+0xfc00a59c>
 400a7a8:	003ddc06 	br	4009f1c <__alt_data_end+0xfc009f1c>
 400a7ac:	d8c02215 	stw	r3,136(sp)
 400a7b0:	0039883a 	mov	fp,zero
 400a7b4:	003ddb06 	br	4009f24 <__alt_data_end+0xfc009f24>
 400a7b8:	028100f4 	movhi	r10,1027
 400a7bc:	52859d04 	addi	r10,r10,5748
 400a7c0:	da802415 	stw	r10,144(sp)
 400a7c4:	003e8306 	br	400a1d4 <__alt_data_end+0xfc00a1d4>
 400a7c8:	d8801c17 	ldw	r2,112(sp)
 400a7cc:	dd002117 	ldw	r20,132(sp)
 400a7d0:	103eb926 	beq	r2,zero,400a2b8 <__alt_data_end+0xfc00a2b8>
 400a7d4:	d9002017 	ldw	r4,128(sp)
 400a7d8:	d9801a04 	addi	r6,sp,104
 400a7dc:	a00b883a 	mov	r5,r20
 400a7e0:	40094500 	call	4009450 <__sprint_r.part.0>
 400a7e4:	003eb406 	br	400a2b8 <__alt_data_end+0xfc00a2b8>
 400a7e8:	80c00043 	ldbu	r3,1(r16)
 400a7ec:	a5000814 	ori	r20,r20,32
 400a7f0:	84000044 	addi	r16,r16,1
 400a7f4:	18c03fcc 	andi	r3,r3,255
 400a7f8:	18c0201c 	xori	r3,r3,128
 400a7fc:	18ffe004 	addi	r3,r3,-128
 400a800:	003bb706 	br	40096e0 <__alt_data_end+0xfc0096e0>
 400a804:	a809883a 	mov	r4,r21
 400a808:	d8c02a15 	stw	r3,168(sp)
 400a80c:	da002b15 	stw	r8,172(sp)
 400a810:	4001eb80 	call	4001eb8 <strlen>
 400a814:	d8c02a17 	ldw	r3,168(sp)
 400a818:	1027883a 	mov	r19,r2
 400a81c:	df001d83 	ldbu	fp,118(sp)
 400a820:	d8c02215 	stw	r3,136(sp)
 400a824:	0013883a 	mov	r9,zero
 400a828:	da002b17 	ldw	r8,172(sp)
 400a82c:	003c4d06 	br	4009964 <__alt_data_end+0xfc009964>
 400a830:	d9402117 	ldw	r5,132(sp)
 400a834:	d9002017 	ldw	r4,128(sp)
 400a838:	d9801a04 	addi	r6,sp,104
 400a83c:	da402c15 	stw	r9,176(sp)
 400a840:	40094500 	call	4009450 <__sprint_r.part.0>
 400a844:	da402c17 	ldw	r9,176(sp)
 400a848:	103e9a1e 	bne	r2,zero,400a2b4 <__alt_data_end+0xfc00a2b4>
 400a84c:	d9401b17 	ldw	r5,108(sp)
 400a850:	d8801c17 	ldw	r2,112(sp)
 400a854:	d811883a 	mov	r8,sp
 400a858:	29000044 	addi	r4,r5,1
 400a85c:	003e4206 	br	400a168 <__alt_data_end+0xfc00a168>
 400a860:	d9401b17 	ldw	r5,108(sp)
 400a864:	010100f4 	movhi	r4,1027
 400a868:	2105a104 	addi	r4,r4,5764
 400a86c:	d9002415 	stw	r4,144(sp)
 400a870:	29400044 	addi	r5,r5,1
 400a874:	003c6d06 	br	4009a2c <__alt_data_end+0xfc009a2c>
 400a878:	0039883a 	mov	fp,zero
 400a87c:	00800084 	movi	r2,2
 400a880:	10803fcc 	andi	r2,r2,255
 400a884:	01000044 	movi	r4,1
 400a888:	11001e26 	beq	r2,r4,400a904 <___vfiprintf_internal_r+0x13a0>
 400a88c:	01000084 	movi	r4,2
 400a890:	11001e1e 	bne	r2,r4,400a90c <___vfiprintf_internal_r+0x13a8>
 400a894:	1829883a 	mov	r20,r3
 400a898:	003eea06 	br	400a444 <__alt_data_end+0xfc00a444>
 400a89c:	a007883a 	mov	r3,r20
 400a8a0:	00800044 	movi	r2,1
 400a8a4:	003ff606 	br	400a880 <__alt_data_end+0xfc00a880>
 400a8a8:	00800184 	movi	r2,6
 400a8ac:	1240012e 	bgeu	r2,r9,400a8b4 <___vfiprintf_internal_r+0x1350>
 400a8b0:	1013883a 	mov	r9,r2
 400a8b4:	4827883a 	mov	r19,r9
 400a8b8:	4825883a 	mov	r18,r9
 400a8bc:	48001516 	blt	r9,zero,400a914 <___vfiprintf_internal_r+0x13b0>
 400a8c0:	054100f4 	movhi	r21,1027
 400a8c4:	d8c02215 	stw	r3,136(sp)
 400a8c8:	ad454104 	addi	r21,r21,5380
 400a8cc:	003d1406 	br	4009d20 <__alt_data_end+0xfc009d20>
 400a8d0:	028100f4 	movhi	r10,1027
 400a8d4:	52859d04 	addi	r10,r10,5748
 400a8d8:	da802415 	stw	r10,144(sp)
 400a8dc:	200d883a 	mov	r6,r4
 400a8e0:	003c9106 	br	4009b28 <__alt_data_end+0xfc009b28>
 400a8e4:	5021883a 	mov	r16,r10
 400a8e8:	0013883a 	mov	r9,zero
 400a8ec:	003b7d06 	br	40096e4 <__alt_data_end+0xfc0096e4>
 400a8f0:	4827883a 	mov	r19,r9
 400a8f4:	df001d83 	ldbu	fp,118(sp)
 400a8f8:	d8c02215 	stw	r3,136(sp)
 400a8fc:	0013883a 	mov	r9,zero
 400a900:	003c1806 	br	4009964 <__alt_data_end+0xfc009964>
 400a904:	1829883a 	mov	r20,r3
 400a908:	003d1806 	br	4009d6c <__alt_data_end+0xfc009d6c>
 400a90c:	1829883a 	mov	r20,r3
 400a910:	003ccd06 	br	4009c48 <__alt_data_end+0xfc009c48>
 400a914:	0025883a 	mov	r18,zero
 400a918:	003fe906 	br	400a8c0 <__alt_data_end+0xfc00a8c0>
 400a91c:	d8802217 	ldw	r2,136(sp)
 400a920:	80c00043 	ldbu	r3,1(r16)
 400a924:	5021883a 	mov	r16,r10
 400a928:	12400017 	ldw	r9,0(r2)
 400a92c:	10800104 	addi	r2,r2,4
 400a930:	d8802215 	stw	r2,136(sp)
 400a934:	483faf0e 	bge	r9,zero,400a7f4 <__alt_data_end+0xfc00a7f4>
 400a938:	18c03fcc 	andi	r3,r3,255
 400a93c:	18c0201c 	xori	r3,r3,128
 400a940:	027fffc4 	movi	r9,-1
 400a944:	18ffe004 	addi	r3,r3,-128
 400a948:	003b6506 	br	40096e0 <__alt_data_end+0xfc0096e0>
 400a94c:	d9c01d85 	stb	r7,118(sp)
 400a950:	003ca006 	br	4009bd4 <__alt_data_end+0xfc009bd4>
 400a954:	d9c01d85 	stb	r7,118(sp)
 400a958:	003cad06 	br	4009c10 <__alt_data_end+0xfc009c10>
 400a95c:	d9c01d85 	stb	r7,118(sp)
 400a960:	003d7d06 	br	4009f58 <__alt_data_end+0xfc009f58>
 400a964:	d9c01d85 	stb	r7,118(sp)
 400a968:	003d5f06 	br	4009ee8 <__alt_data_end+0xfc009ee8>
 400a96c:	a080004c 	andi	r2,r20,1
 400a970:	0039883a 	mov	fp,zero
 400a974:	10000526 	beq	r2,zero,400a98c <___vfiprintf_internal_r+0x1428>
 400a978:	00800c04 	movi	r2,48
 400a97c:	d88019c5 	stb	r2,103(sp)
 400a980:	dcc02717 	ldw	r19,156(sp)
 400a984:	dd4019c4 	addi	r21,sp,103
 400a988:	003bf606 	br	4009964 <__alt_data_end+0xfc009964>
 400a98c:	0027883a 	mov	r19,zero
 400a990:	dd401a04 	addi	r21,sp,104
 400a994:	003bf306 	br	4009964 <__alt_data_end+0xfc009964>
 400a998:	d9c01d85 	stb	r7,118(sp)
 400a99c:	003dc806 	br	400a0c0 <__alt_data_end+0xfc00a0c0>
 400a9a0:	d9c01d85 	stb	r7,118(sp)
 400a9a4:	003d3a06 	br	4009e90 <__alt_data_end+0xfc009e90>
 400a9a8:	d9c01d85 	stb	r7,118(sp)
 400a9ac:	003d2a06 	br	4009e58 <__alt_data_end+0xfc009e58>
 400a9b0:	d9c01d85 	stb	r7,118(sp)
 400a9b4:	003cde06 	br	4009d30 <__alt_data_end+0xfc009d30>
 400a9b8:	d9c01d85 	stb	r7,118(sp)
 400a9bc:	003cbc06 	br	4009cb0 <__alt_data_end+0xfc009cb0>

0400a9c0 <__vfiprintf_internal>:
 400a9c0:	008100f4 	movhi	r2,1027
 400a9c4:	10927d04 	addi	r2,r2,18932
 400a9c8:	300f883a 	mov	r7,r6
 400a9cc:	280d883a 	mov	r6,r5
 400a9d0:	200b883a 	mov	r5,r4
 400a9d4:	11000017 	ldw	r4,0(r2)
 400a9d8:	40095641 	jmpi	4009564 <___vfiprintf_internal_r>

0400a9dc <__sbprintf>:
 400a9dc:	2880030b 	ldhu	r2,12(r5)
 400a9e0:	2ac01917 	ldw	r11,100(r5)
 400a9e4:	2a80038b 	ldhu	r10,14(r5)
 400a9e8:	2a400717 	ldw	r9,28(r5)
 400a9ec:	2a000917 	ldw	r8,36(r5)
 400a9f0:	defee204 	addi	sp,sp,-1144
 400a9f4:	00c10004 	movi	r3,1024
 400a9f8:	dc011a15 	stw	r16,1128(sp)
 400a9fc:	10bfff4c 	andi	r2,r2,65533
 400aa00:	2821883a 	mov	r16,r5
 400aa04:	d8cb883a 	add	r5,sp,r3
 400aa08:	dc811c15 	stw	r18,1136(sp)
 400aa0c:	dc411b15 	stw	r17,1132(sp)
 400aa10:	dfc11d15 	stw	ra,1140(sp)
 400aa14:	2025883a 	mov	r18,r4
 400aa18:	d881030d 	sth	r2,1036(sp)
 400aa1c:	dac11915 	stw	r11,1124(sp)
 400aa20:	da81038d 	sth	r10,1038(sp)
 400aa24:	da410715 	stw	r9,1052(sp)
 400aa28:	da010915 	stw	r8,1060(sp)
 400aa2c:	dec10015 	stw	sp,1024(sp)
 400aa30:	dec10415 	stw	sp,1040(sp)
 400aa34:	d8c10215 	stw	r3,1032(sp)
 400aa38:	d8c10515 	stw	r3,1044(sp)
 400aa3c:	d8010615 	stw	zero,1048(sp)
 400aa40:	40095640 	call	4009564 <___vfiprintf_internal_r>
 400aa44:	1023883a 	mov	r17,r2
 400aa48:	10000416 	blt	r2,zero,400aa5c <__sbprintf+0x80>
 400aa4c:	d9410004 	addi	r5,sp,1024
 400aa50:	9009883a 	mov	r4,r18
 400aa54:	4005e180 	call	4005e18 <_fflush_r>
 400aa58:	10000d1e 	bne	r2,zero,400aa90 <__sbprintf+0xb4>
 400aa5c:	d881030b 	ldhu	r2,1036(sp)
 400aa60:	1080100c 	andi	r2,r2,64
 400aa64:	10000326 	beq	r2,zero,400aa74 <__sbprintf+0x98>
 400aa68:	8080030b 	ldhu	r2,12(r16)
 400aa6c:	10801014 	ori	r2,r2,64
 400aa70:	8080030d 	sth	r2,12(r16)
 400aa74:	8805883a 	mov	r2,r17
 400aa78:	dfc11d17 	ldw	ra,1140(sp)
 400aa7c:	dc811c17 	ldw	r18,1136(sp)
 400aa80:	dc411b17 	ldw	r17,1132(sp)
 400aa84:	dc011a17 	ldw	r16,1128(sp)
 400aa88:	dec11e04 	addi	sp,sp,1144
 400aa8c:	f800283a 	ret
 400aa90:	047fffc4 	movi	r17,-1
 400aa94:	003ff106 	br	400aa5c <__alt_data_end+0xfc00aa5c>

0400aa98 <_write_r>:
 400aa98:	defffd04 	addi	sp,sp,-12
 400aa9c:	2805883a 	mov	r2,r5
 400aaa0:	dc000015 	stw	r16,0(sp)
 400aaa4:	040100f4 	movhi	r16,1027
 400aaa8:	dc400115 	stw	r17,4(sp)
 400aaac:	300b883a 	mov	r5,r6
 400aab0:	841f2e04 	addi	r16,r16,31928
 400aab4:	2023883a 	mov	r17,r4
 400aab8:	380d883a 	mov	r6,r7
 400aabc:	1009883a 	mov	r4,r2
 400aac0:	dfc00215 	stw	ra,8(sp)
 400aac4:	80000015 	stw	zero,0(r16)
 400aac8:	400f1a40 	call	400f1a4 <write>
 400aacc:	00ffffc4 	movi	r3,-1
 400aad0:	10c00526 	beq	r2,r3,400aae8 <_write_r+0x50>
 400aad4:	dfc00217 	ldw	ra,8(sp)
 400aad8:	dc400117 	ldw	r17,4(sp)
 400aadc:	dc000017 	ldw	r16,0(sp)
 400aae0:	dec00304 	addi	sp,sp,12
 400aae4:	f800283a 	ret
 400aae8:	80c00017 	ldw	r3,0(r16)
 400aaec:	183ff926 	beq	r3,zero,400aad4 <__alt_data_end+0xfc00aad4>
 400aaf0:	88c00015 	stw	r3,0(r17)
 400aaf4:	003ff706 	br	400aad4 <__alt_data_end+0xfc00aad4>

0400aaf8 <_close_r>:
 400aaf8:	defffd04 	addi	sp,sp,-12
 400aafc:	dc000015 	stw	r16,0(sp)
 400ab00:	040100f4 	movhi	r16,1027
 400ab04:	dc400115 	stw	r17,4(sp)
 400ab08:	841f2e04 	addi	r16,r16,31928
 400ab0c:	2023883a 	mov	r17,r4
 400ab10:	2809883a 	mov	r4,r5
 400ab14:	dfc00215 	stw	ra,8(sp)
 400ab18:	80000015 	stw	zero,0(r16)
 400ab1c:	400e5200 	call	400e520 <close>
 400ab20:	00ffffc4 	movi	r3,-1
 400ab24:	10c00526 	beq	r2,r3,400ab3c <_close_r+0x44>
 400ab28:	dfc00217 	ldw	ra,8(sp)
 400ab2c:	dc400117 	ldw	r17,4(sp)
 400ab30:	dc000017 	ldw	r16,0(sp)
 400ab34:	dec00304 	addi	sp,sp,12
 400ab38:	f800283a 	ret
 400ab3c:	80c00017 	ldw	r3,0(r16)
 400ab40:	183ff926 	beq	r3,zero,400ab28 <__alt_data_end+0xfc00ab28>
 400ab44:	88c00015 	stw	r3,0(r17)
 400ab48:	003ff706 	br	400ab28 <__alt_data_end+0xfc00ab28>

0400ab4c <_calloc_r>:
 400ab4c:	298b383a 	mul	r5,r5,r6
 400ab50:	defffe04 	addi	sp,sp,-8
 400ab54:	dfc00115 	stw	ra,4(sp)
 400ab58:	dc000015 	stw	r16,0(sp)
 400ab5c:	4006f540 	call	4006f54 <_malloc_r>
 400ab60:	10002926 	beq	r2,zero,400ac08 <_calloc_r+0xbc>
 400ab64:	11bfff17 	ldw	r6,-4(r2)
 400ab68:	1021883a 	mov	r16,r2
 400ab6c:	00bfff04 	movi	r2,-4
 400ab70:	308c703a 	and	r6,r6,r2
 400ab74:	00c00904 	movi	r3,36
 400ab78:	308d883a 	add	r6,r6,r2
 400ab7c:	19801636 	bltu	r3,r6,400abd8 <_calloc_r+0x8c>
 400ab80:	008004c4 	movi	r2,19
 400ab84:	11800b2e 	bgeu	r2,r6,400abb4 <_calloc_r+0x68>
 400ab88:	80000015 	stw	zero,0(r16)
 400ab8c:	80000115 	stw	zero,4(r16)
 400ab90:	008006c4 	movi	r2,27
 400ab94:	11801a2e 	bgeu	r2,r6,400ac00 <_calloc_r+0xb4>
 400ab98:	80000215 	stw	zero,8(r16)
 400ab9c:	80000315 	stw	zero,12(r16)
 400aba0:	30c0151e 	bne	r6,r3,400abf8 <_calloc_r+0xac>
 400aba4:	80000415 	stw	zero,16(r16)
 400aba8:	80800604 	addi	r2,r16,24
 400abac:	80000515 	stw	zero,20(r16)
 400abb0:	00000106 	br	400abb8 <_calloc_r+0x6c>
 400abb4:	8005883a 	mov	r2,r16
 400abb8:	10000015 	stw	zero,0(r2)
 400abbc:	10000115 	stw	zero,4(r2)
 400abc0:	10000215 	stw	zero,8(r2)
 400abc4:	8005883a 	mov	r2,r16
 400abc8:	dfc00117 	ldw	ra,4(sp)
 400abcc:	dc000017 	ldw	r16,0(sp)
 400abd0:	dec00204 	addi	sp,sp,8
 400abd4:	f800283a 	ret
 400abd8:	000b883a 	mov	r5,zero
 400abdc:	8009883a 	mov	r4,r16
 400abe0:	4007ae80 	call	4007ae8 <memset>
 400abe4:	8005883a 	mov	r2,r16
 400abe8:	dfc00117 	ldw	ra,4(sp)
 400abec:	dc000017 	ldw	r16,0(sp)
 400abf0:	dec00204 	addi	sp,sp,8
 400abf4:	f800283a 	ret
 400abf8:	80800404 	addi	r2,r16,16
 400abfc:	003fee06 	br	400abb8 <__alt_data_end+0xfc00abb8>
 400ac00:	80800204 	addi	r2,r16,8
 400ac04:	003fec06 	br	400abb8 <__alt_data_end+0xfc00abb8>
 400ac08:	0005883a 	mov	r2,zero
 400ac0c:	003fee06 	br	400abc8 <__alt_data_end+0xfc00abc8>

0400ac10 <_fclose_r>:
 400ac10:	28003926 	beq	r5,zero,400acf8 <_fclose_r+0xe8>
 400ac14:	defffc04 	addi	sp,sp,-16
 400ac18:	dc400115 	stw	r17,4(sp)
 400ac1c:	dc000015 	stw	r16,0(sp)
 400ac20:	dfc00315 	stw	ra,12(sp)
 400ac24:	dc800215 	stw	r18,8(sp)
 400ac28:	2023883a 	mov	r17,r4
 400ac2c:	2821883a 	mov	r16,r5
 400ac30:	20000226 	beq	r4,zero,400ac3c <_fclose_r+0x2c>
 400ac34:	20800e17 	ldw	r2,56(r4)
 400ac38:	10002726 	beq	r2,zero,400acd8 <_fclose_r+0xc8>
 400ac3c:	8080030f 	ldh	r2,12(r16)
 400ac40:	1000071e 	bne	r2,zero,400ac60 <_fclose_r+0x50>
 400ac44:	0005883a 	mov	r2,zero
 400ac48:	dfc00317 	ldw	ra,12(sp)
 400ac4c:	dc800217 	ldw	r18,8(sp)
 400ac50:	dc400117 	ldw	r17,4(sp)
 400ac54:	dc000017 	ldw	r16,0(sp)
 400ac58:	dec00404 	addi	sp,sp,16
 400ac5c:	f800283a 	ret
 400ac60:	800b883a 	mov	r5,r16
 400ac64:	8809883a 	mov	r4,r17
 400ac68:	4005bfc0 	call	4005bfc <__sflush_r>
 400ac6c:	1025883a 	mov	r18,r2
 400ac70:	80800b17 	ldw	r2,44(r16)
 400ac74:	10000426 	beq	r2,zero,400ac88 <_fclose_r+0x78>
 400ac78:	81400717 	ldw	r5,28(r16)
 400ac7c:	8809883a 	mov	r4,r17
 400ac80:	103ee83a 	callr	r2
 400ac84:	10001616 	blt	r2,zero,400ace0 <_fclose_r+0xd0>
 400ac88:	8080030b 	ldhu	r2,12(r16)
 400ac8c:	1080200c 	andi	r2,r2,128
 400ac90:	1000151e 	bne	r2,zero,400ace8 <_fclose_r+0xd8>
 400ac94:	81400c17 	ldw	r5,48(r16)
 400ac98:	28000526 	beq	r5,zero,400acb0 <_fclose_r+0xa0>
 400ac9c:	80801004 	addi	r2,r16,64
 400aca0:	28800226 	beq	r5,r2,400acac <_fclose_r+0x9c>
 400aca4:	8809883a 	mov	r4,r17
 400aca8:	40063680 	call	4006368 <_free_r>
 400acac:	80000c15 	stw	zero,48(r16)
 400acb0:	81401117 	ldw	r5,68(r16)
 400acb4:	28000326 	beq	r5,zero,400acc4 <_fclose_r+0xb4>
 400acb8:	8809883a 	mov	r4,r17
 400acbc:	40063680 	call	4006368 <_free_r>
 400acc0:	80001115 	stw	zero,68(r16)
 400acc4:	40062040 	call	4006204 <__sfp_lock_acquire>
 400acc8:	8000030d 	sth	zero,12(r16)
 400accc:	40062080 	call	4006208 <__sfp_lock_release>
 400acd0:	9005883a 	mov	r2,r18
 400acd4:	003fdc06 	br	400ac48 <__alt_data_end+0xfc00ac48>
 400acd8:	40061f40 	call	40061f4 <__sinit>
 400acdc:	003fd706 	br	400ac3c <__alt_data_end+0xfc00ac3c>
 400ace0:	04bfffc4 	movi	r18,-1
 400ace4:	003fe806 	br	400ac88 <__alt_data_end+0xfc00ac88>
 400ace8:	81400417 	ldw	r5,16(r16)
 400acec:	8809883a 	mov	r4,r17
 400acf0:	40063680 	call	4006368 <_free_r>
 400acf4:	003fe706 	br	400ac94 <__alt_data_end+0xfc00ac94>
 400acf8:	0005883a 	mov	r2,zero
 400acfc:	f800283a 	ret

0400ad00 <fclose>:
 400ad00:	008100f4 	movhi	r2,1027
 400ad04:	10927d04 	addi	r2,r2,18932
 400ad08:	200b883a 	mov	r5,r4
 400ad0c:	11000017 	ldw	r4,0(r2)
 400ad10:	400ac101 	jmpi	400ac10 <_fclose_r>

0400ad14 <__fputwc>:
 400ad14:	defff804 	addi	sp,sp,-32
 400ad18:	dcc00415 	stw	r19,16(sp)
 400ad1c:	dc800315 	stw	r18,12(sp)
 400ad20:	dc000115 	stw	r16,4(sp)
 400ad24:	dfc00715 	stw	ra,28(sp)
 400ad28:	dd400615 	stw	r21,24(sp)
 400ad2c:	dd000515 	stw	r20,20(sp)
 400ad30:	dc400215 	stw	r17,8(sp)
 400ad34:	2027883a 	mov	r19,r4
 400ad38:	2825883a 	mov	r18,r5
 400ad3c:	3021883a 	mov	r16,r6
 400ad40:	4006d440 	call	4006d44 <__locale_mb_cur_max>
 400ad44:	00c00044 	movi	r3,1
 400ad48:	10c03e26 	beq	r2,r3,400ae44 <__fputwc+0x130>
 400ad4c:	81c01704 	addi	r7,r16,92
 400ad50:	900d883a 	mov	r6,r18
 400ad54:	d80b883a 	mov	r5,sp
 400ad58:	9809883a 	mov	r4,r19
 400ad5c:	400b1e40 	call	400b1e4 <_wcrtomb_r>
 400ad60:	1029883a 	mov	r20,r2
 400ad64:	00bfffc4 	movi	r2,-1
 400ad68:	a0802026 	beq	r20,r2,400adec <__fputwc+0xd8>
 400ad6c:	d9400003 	ldbu	r5,0(sp)
 400ad70:	a0001c26 	beq	r20,zero,400ade4 <__fputwc+0xd0>
 400ad74:	0023883a 	mov	r17,zero
 400ad78:	05400284 	movi	r21,10
 400ad7c:	00000906 	br	400ada4 <__fputwc+0x90>
 400ad80:	80800017 	ldw	r2,0(r16)
 400ad84:	11400005 	stb	r5,0(r2)
 400ad88:	80c00017 	ldw	r3,0(r16)
 400ad8c:	18c00044 	addi	r3,r3,1
 400ad90:	80c00015 	stw	r3,0(r16)
 400ad94:	8c400044 	addi	r17,r17,1
 400ad98:	dc45883a 	add	r2,sp,r17
 400ad9c:	8d00112e 	bgeu	r17,r20,400ade4 <__fputwc+0xd0>
 400ada0:	11400003 	ldbu	r5,0(r2)
 400ada4:	80c00217 	ldw	r3,8(r16)
 400ada8:	18ffffc4 	addi	r3,r3,-1
 400adac:	80c00215 	stw	r3,8(r16)
 400adb0:	183ff30e 	bge	r3,zero,400ad80 <__alt_data_end+0xfc00ad80>
 400adb4:	80800617 	ldw	r2,24(r16)
 400adb8:	18801916 	blt	r3,r2,400ae20 <__fputwc+0x10c>
 400adbc:	80800017 	ldw	r2,0(r16)
 400adc0:	11400005 	stb	r5,0(r2)
 400adc4:	80800017 	ldw	r2,0(r16)
 400adc8:	10c00003 	ldbu	r3,0(r2)
 400adcc:	10800044 	addi	r2,r2,1
 400add0:	1d402326 	beq	r3,r21,400ae60 <__fputwc+0x14c>
 400add4:	80800015 	stw	r2,0(r16)
 400add8:	8c400044 	addi	r17,r17,1
 400addc:	dc45883a 	add	r2,sp,r17
 400ade0:	8d3fef36 	bltu	r17,r20,400ada0 <__alt_data_end+0xfc00ada0>
 400ade4:	9005883a 	mov	r2,r18
 400ade8:	00000406 	br	400adfc <__fputwc+0xe8>
 400adec:	80c0030b 	ldhu	r3,12(r16)
 400adf0:	a005883a 	mov	r2,r20
 400adf4:	18c01014 	ori	r3,r3,64
 400adf8:	80c0030d 	sth	r3,12(r16)
 400adfc:	dfc00717 	ldw	ra,28(sp)
 400ae00:	dd400617 	ldw	r21,24(sp)
 400ae04:	dd000517 	ldw	r20,20(sp)
 400ae08:	dcc00417 	ldw	r19,16(sp)
 400ae0c:	dc800317 	ldw	r18,12(sp)
 400ae10:	dc400217 	ldw	r17,8(sp)
 400ae14:	dc000117 	ldw	r16,4(sp)
 400ae18:	dec00804 	addi	sp,sp,32
 400ae1c:	f800283a 	ret
 400ae20:	800d883a 	mov	r6,r16
 400ae24:	29403fcc 	andi	r5,r5,255
 400ae28:	9809883a 	mov	r4,r19
 400ae2c:	400b08c0 	call	400b08c <__swbuf_r>
 400ae30:	10bfffe0 	cmpeqi	r2,r2,-1
 400ae34:	10803fcc 	andi	r2,r2,255
 400ae38:	103fd626 	beq	r2,zero,400ad94 <__alt_data_end+0xfc00ad94>
 400ae3c:	00bfffc4 	movi	r2,-1
 400ae40:	003fee06 	br	400adfc <__alt_data_end+0xfc00adfc>
 400ae44:	90ffffc4 	addi	r3,r18,-1
 400ae48:	01003f84 	movi	r4,254
 400ae4c:	20ffbf36 	bltu	r4,r3,400ad4c <__alt_data_end+0xfc00ad4c>
 400ae50:	900b883a 	mov	r5,r18
 400ae54:	dc800005 	stb	r18,0(sp)
 400ae58:	1029883a 	mov	r20,r2
 400ae5c:	003fc506 	br	400ad74 <__alt_data_end+0xfc00ad74>
 400ae60:	800d883a 	mov	r6,r16
 400ae64:	a80b883a 	mov	r5,r21
 400ae68:	9809883a 	mov	r4,r19
 400ae6c:	400b08c0 	call	400b08c <__swbuf_r>
 400ae70:	10bfffe0 	cmpeqi	r2,r2,-1
 400ae74:	003fef06 	br	400ae34 <__alt_data_end+0xfc00ae34>

0400ae78 <_fputwc_r>:
 400ae78:	3080030b 	ldhu	r2,12(r6)
 400ae7c:	10c8000c 	andi	r3,r2,8192
 400ae80:	1800051e 	bne	r3,zero,400ae98 <_fputwc_r+0x20>
 400ae84:	30c01917 	ldw	r3,100(r6)
 400ae88:	10880014 	ori	r2,r2,8192
 400ae8c:	3080030d 	sth	r2,12(r6)
 400ae90:	18880014 	ori	r2,r3,8192
 400ae94:	30801915 	stw	r2,100(r6)
 400ae98:	400ad141 	jmpi	400ad14 <__fputwc>

0400ae9c <fputwc>:
 400ae9c:	008100f4 	movhi	r2,1027
 400aea0:	defffc04 	addi	sp,sp,-16
 400aea4:	10927d04 	addi	r2,r2,18932
 400aea8:	dc000115 	stw	r16,4(sp)
 400aeac:	14000017 	ldw	r16,0(r2)
 400aeb0:	dc400215 	stw	r17,8(sp)
 400aeb4:	dfc00315 	stw	ra,12(sp)
 400aeb8:	2023883a 	mov	r17,r4
 400aebc:	80000226 	beq	r16,zero,400aec8 <fputwc+0x2c>
 400aec0:	80800e17 	ldw	r2,56(r16)
 400aec4:	10001026 	beq	r2,zero,400af08 <fputwc+0x6c>
 400aec8:	2880030b 	ldhu	r2,12(r5)
 400aecc:	10c8000c 	andi	r3,r2,8192
 400aed0:	1800051e 	bne	r3,zero,400aee8 <fputwc+0x4c>
 400aed4:	28c01917 	ldw	r3,100(r5)
 400aed8:	10880014 	ori	r2,r2,8192
 400aedc:	2880030d 	sth	r2,12(r5)
 400aee0:	18880014 	ori	r2,r3,8192
 400aee4:	28801915 	stw	r2,100(r5)
 400aee8:	280d883a 	mov	r6,r5
 400aeec:	8009883a 	mov	r4,r16
 400aef0:	880b883a 	mov	r5,r17
 400aef4:	dfc00317 	ldw	ra,12(sp)
 400aef8:	dc400217 	ldw	r17,8(sp)
 400aefc:	dc000117 	ldw	r16,4(sp)
 400af00:	dec00404 	addi	sp,sp,16
 400af04:	400ad141 	jmpi	400ad14 <__fputwc>
 400af08:	8009883a 	mov	r4,r16
 400af0c:	d9400015 	stw	r5,0(sp)
 400af10:	40061f40 	call	40061f4 <__sinit>
 400af14:	d9400017 	ldw	r5,0(sp)
 400af18:	003feb06 	br	400aec8 <__alt_data_end+0xfc00aec8>

0400af1c <_fstat_r>:
 400af1c:	defffd04 	addi	sp,sp,-12
 400af20:	2805883a 	mov	r2,r5
 400af24:	dc000015 	stw	r16,0(sp)
 400af28:	040100f4 	movhi	r16,1027
 400af2c:	dc400115 	stw	r17,4(sp)
 400af30:	841f2e04 	addi	r16,r16,31928
 400af34:	2023883a 	mov	r17,r4
 400af38:	300b883a 	mov	r5,r6
 400af3c:	1009883a 	mov	r4,r2
 400af40:	dfc00215 	stw	ra,8(sp)
 400af44:	80000015 	stw	zero,0(r16)
 400af48:	400e6580 	call	400e658 <fstat>
 400af4c:	00ffffc4 	movi	r3,-1
 400af50:	10c00526 	beq	r2,r3,400af68 <_fstat_r+0x4c>
 400af54:	dfc00217 	ldw	ra,8(sp)
 400af58:	dc400117 	ldw	r17,4(sp)
 400af5c:	dc000017 	ldw	r16,0(sp)
 400af60:	dec00304 	addi	sp,sp,12
 400af64:	f800283a 	ret
 400af68:	80c00017 	ldw	r3,0(r16)
 400af6c:	183ff926 	beq	r3,zero,400af54 <__alt_data_end+0xfc00af54>
 400af70:	88c00015 	stw	r3,0(r17)
 400af74:	003ff706 	br	400af54 <__alt_data_end+0xfc00af54>

0400af78 <_isatty_r>:
 400af78:	defffd04 	addi	sp,sp,-12
 400af7c:	dc000015 	stw	r16,0(sp)
 400af80:	040100f4 	movhi	r16,1027
 400af84:	dc400115 	stw	r17,4(sp)
 400af88:	841f2e04 	addi	r16,r16,31928
 400af8c:	2023883a 	mov	r17,r4
 400af90:	2809883a 	mov	r4,r5
 400af94:	dfc00215 	stw	ra,8(sp)
 400af98:	80000015 	stw	zero,0(r16)
 400af9c:	400e9e40 	call	400e9e4 <isatty>
 400afa0:	00ffffc4 	movi	r3,-1
 400afa4:	10c00526 	beq	r2,r3,400afbc <_isatty_r+0x44>
 400afa8:	dfc00217 	ldw	ra,8(sp)
 400afac:	dc400117 	ldw	r17,4(sp)
 400afb0:	dc000017 	ldw	r16,0(sp)
 400afb4:	dec00304 	addi	sp,sp,12
 400afb8:	f800283a 	ret
 400afbc:	80c00017 	ldw	r3,0(r16)
 400afc0:	183ff926 	beq	r3,zero,400afa8 <__alt_data_end+0xfc00afa8>
 400afc4:	88c00015 	stw	r3,0(r17)
 400afc8:	003ff706 	br	400afa8 <__alt_data_end+0xfc00afa8>

0400afcc <_lseek_r>:
 400afcc:	defffd04 	addi	sp,sp,-12
 400afd0:	2805883a 	mov	r2,r5
 400afd4:	dc000015 	stw	r16,0(sp)
 400afd8:	040100f4 	movhi	r16,1027
 400afdc:	dc400115 	stw	r17,4(sp)
 400afe0:	300b883a 	mov	r5,r6
 400afe4:	841f2e04 	addi	r16,r16,31928
 400afe8:	2023883a 	mov	r17,r4
 400afec:	380d883a 	mov	r6,r7
 400aff0:	1009883a 	mov	r4,r2
 400aff4:	dfc00215 	stw	ra,8(sp)
 400aff8:	80000015 	stw	zero,0(r16)
 400affc:	400ebb00 	call	400ebb0 <lseek>
 400b000:	00ffffc4 	movi	r3,-1
 400b004:	10c00526 	beq	r2,r3,400b01c <_lseek_r+0x50>
 400b008:	dfc00217 	ldw	ra,8(sp)
 400b00c:	dc400117 	ldw	r17,4(sp)
 400b010:	dc000017 	ldw	r16,0(sp)
 400b014:	dec00304 	addi	sp,sp,12
 400b018:	f800283a 	ret
 400b01c:	80c00017 	ldw	r3,0(r16)
 400b020:	183ff926 	beq	r3,zero,400b008 <__alt_data_end+0xfc00b008>
 400b024:	88c00015 	stw	r3,0(r17)
 400b028:	003ff706 	br	400b008 <__alt_data_end+0xfc00b008>

0400b02c <_read_r>:
 400b02c:	defffd04 	addi	sp,sp,-12
 400b030:	2805883a 	mov	r2,r5
 400b034:	dc000015 	stw	r16,0(sp)
 400b038:	040100f4 	movhi	r16,1027
 400b03c:	dc400115 	stw	r17,4(sp)
 400b040:	300b883a 	mov	r5,r6
 400b044:	841f2e04 	addi	r16,r16,31928
 400b048:	2023883a 	mov	r17,r4
 400b04c:	380d883a 	mov	r6,r7
 400b050:	1009883a 	mov	r4,r2
 400b054:	dfc00215 	stw	ra,8(sp)
 400b058:	80000015 	stw	zero,0(r16)
 400b05c:	400ed840 	call	400ed84 <read>
 400b060:	00ffffc4 	movi	r3,-1
 400b064:	10c00526 	beq	r2,r3,400b07c <_read_r+0x50>
 400b068:	dfc00217 	ldw	ra,8(sp)
 400b06c:	dc400117 	ldw	r17,4(sp)
 400b070:	dc000017 	ldw	r16,0(sp)
 400b074:	dec00304 	addi	sp,sp,12
 400b078:	f800283a 	ret
 400b07c:	80c00017 	ldw	r3,0(r16)
 400b080:	183ff926 	beq	r3,zero,400b068 <__alt_data_end+0xfc00b068>
 400b084:	88c00015 	stw	r3,0(r17)
 400b088:	003ff706 	br	400b068 <__alt_data_end+0xfc00b068>

0400b08c <__swbuf_r>:
 400b08c:	defffb04 	addi	sp,sp,-20
 400b090:	dcc00315 	stw	r19,12(sp)
 400b094:	dc800215 	stw	r18,8(sp)
 400b098:	dc000015 	stw	r16,0(sp)
 400b09c:	dfc00415 	stw	ra,16(sp)
 400b0a0:	dc400115 	stw	r17,4(sp)
 400b0a4:	2025883a 	mov	r18,r4
 400b0a8:	2827883a 	mov	r19,r5
 400b0ac:	3021883a 	mov	r16,r6
 400b0b0:	20000226 	beq	r4,zero,400b0bc <__swbuf_r+0x30>
 400b0b4:	20800e17 	ldw	r2,56(r4)
 400b0b8:	10004226 	beq	r2,zero,400b1c4 <__swbuf_r+0x138>
 400b0bc:	80800617 	ldw	r2,24(r16)
 400b0c0:	8100030b 	ldhu	r4,12(r16)
 400b0c4:	80800215 	stw	r2,8(r16)
 400b0c8:	2080020c 	andi	r2,r4,8
 400b0cc:	10003626 	beq	r2,zero,400b1a8 <__swbuf_r+0x11c>
 400b0d0:	80c00417 	ldw	r3,16(r16)
 400b0d4:	18003426 	beq	r3,zero,400b1a8 <__swbuf_r+0x11c>
 400b0d8:	2088000c 	andi	r2,r4,8192
 400b0dc:	9c403fcc 	andi	r17,r19,255
 400b0e0:	10001a26 	beq	r2,zero,400b14c <__swbuf_r+0xc0>
 400b0e4:	80800017 	ldw	r2,0(r16)
 400b0e8:	81000517 	ldw	r4,20(r16)
 400b0ec:	10c7c83a 	sub	r3,r2,r3
 400b0f0:	1900200e 	bge	r3,r4,400b174 <__swbuf_r+0xe8>
 400b0f4:	18c00044 	addi	r3,r3,1
 400b0f8:	81000217 	ldw	r4,8(r16)
 400b0fc:	11400044 	addi	r5,r2,1
 400b100:	81400015 	stw	r5,0(r16)
 400b104:	213fffc4 	addi	r4,r4,-1
 400b108:	81000215 	stw	r4,8(r16)
 400b10c:	14c00005 	stb	r19,0(r2)
 400b110:	80800517 	ldw	r2,20(r16)
 400b114:	10c01e26 	beq	r2,r3,400b190 <__swbuf_r+0x104>
 400b118:	8080030b 	ldhu	r2,12(r16)
 400b11c:	1080004c 	andi	r2,r2,1
 400b120:	10000226 	beq	r2,zero,400b12c <__swbuf_r+0xa0>
 400b124:	00800284 	movi	r2,10
 400b128:	88801926 	beq	r17,r2,400b190 <__swbuf_r+0x104>
 400b12c:	8805883a 	mov	r2,r17
 400b130:	dfc00417 	ldw	ra,16(sp)
 400b134:	dcc00317 	ldw	r19,12(sp)
 400b138:	dc800217 	ldw	r18,8(sp)
 400b13c:	dc400117 	ldw	r17,4(sp)
 400b140:	dc000017 	ldw	r16,0(sp)
 400b144:	dec00504 	addi	sp,sp,20
 400b148:	f800283a 	ret
 400b14c:	81401917 	ldw	r5,100(r16)
 400b150:	00b7ffc4 	movi	r2,-8193
 400b154:	21080014 	ori	r4,r4,8192
 400b158:	2884703a 	and	r2,r5,r2
 400b15c:	80801915 	stw	r2,100(r16)
 400b160:	80800017 	ldw	r2,0(r16)
 400b164:	8100030d 	sth	r4,12(r16)
 400b168:	81000517 	ldw	r4,20(r16)
 400b16c:	10c7c83a 	sub	r3,r2,r3
 400b170:	193fe016 	blt	r3,r4,400b0f4 <__alt_data_end+0xfc00b0f4>
 400b174:	800b883a 	mov	r5,r16
 400b178:	9009883a 	mov	r4,r18
 400b17c:	4005e180 	call	4005e18 <_fflush_r>
 400b180:	1000071e 	bne	r2,zero,400b1a0 <__swbuf_r+0x114>
 400b184:	80800017 	ldw	r2,0(r16)
 400b188:	00c00044 	movi	r3,1
 400b18c:	003fda06 	br	400b0f8 <__alt_data_end+0xfc00b0f8>
 400b190:	800b883a 	mov	r5,r16
 400b194:	9009883a 	mov	r4,r18
 400b198:	4005e180 	call	4005e18 <_fflush_r>
 400b19c:	103fe326 	beq	r2,zero,400b12c <__alt_data_end+0xfc00b12c>
 400b1a0:	00bfffc4 	movi	r2,-1
 400b1a4:	003fe206 	br	400b130 <__alt_data_end+0xfc00b130>
 400b1a8:	800b883a 	mov	r5,r16
 400b1ac:	9009883a 	mov	r4,r18
 400b1b0:	40042200 	call	4004220 <__swsetup_r>
 400b1b4:	103ffa1e 	bne	r2,zero,400b1a0 <__alt_data_end+0xfc00b1a0>
 400b1b8:	8100030b 	ldhu	r4,12(r16)
 400b1bc:	80c00417 	ldw	r3,16(r16)
 400b1c0:	003fc506 	br	400b0d8 <__alt_data_end+0xfc00b0d8>
 400b1c4:	40061f40 	call	40061f4 <__sinit>
 400b1c8:	003fbc06 	br	400b0bc <__alt_data_end+0xfc00b0bc>

0400b1cc <__swbuf>:
 400b1cc:	008100f4 	movhi	r2,1027
 400b1d0:	10927d04 	addi	r2,r2,18932
 400b1d4:	280d883a 	mov	r6,r5
 400b1d8:	200b883a 	mov	r5,r4
 400b1dc:	11000017 	ldw	r4,0(r2)
 400b1e0:	400b08c1 	jmpi	400b08c <__swbuf_r>

0400b1e4 <_wcrtomb_r>:
 400b1e4:	defff604 	addi	sp,sp,-40
 400b1e8:	008100f4 	movhi	r2,1027
 400b1ec:	dc800815 	stw	r18,32(sp)
 400b1f0:	dc400715 	stw	r17,28(sp)
 400b1f4:	dc000615 	stw	r16,24(sp)
 400b1f8:	10928104 	addi	r2,r2,18948
 400b1fc:	dfc00915 	stw	ra,36(sp)
 400b200:	2021883a 	mov	r16,r4
 400b204:	3823883a 	mov	r17,r7
 400b208:	14800017 	ldw	r18,0(r2)
 400b20c:	28001426 	beq	r5,zero,400b260 <_wcrtomb_r+0x7c>
 400b210:	d9400415 	stw	r5,16(sp)
 400b214:	d9800515 	stw	r6,20(sp)
 400b218:	4006d380 	call	4006d38 <__locale_charset>
 400b21c:	d9800517 	ldw	r6,20(sp)
 400b220:	d9400417 	ldw	r5,16(sp)
 400b224:	100f883a 	mov	r7,r2
 400b228:	dc400015 	stw	r17,0(sp)
 400b22c:	8009883a 	mov	r4,r16
 400b230:	903ee83a 	callr	r18
 400b234:	00ffffc4 	movi	r3,-1
 400b238:	10c0031e 	bne	r2,r3,400b248 <_wcrtomb_r+0x64>
 400b23c:	88000015 	stw	zero,0(r17)
 400b240:	00c02284 	movi	r3,138
 400b244:	80c00015 	stw	r3,0(r16)
 400b248:	dfc00917 	ldw	ra,36(sp)
 400b24c:	dc800817 	ldw	r18,32(sp)
 400b250:	dc400717 	ldw	r17,28(sp)
 400b254:	dc000617 	ldw	r16,24(sp)
 400b258:	dec00a04 	addi	sp,sp,40
 400b25c:	f800283a 	ret
 400b260:	4006d380 	call	4006d38 <__locale_charset>
 400b264:	100f883a 	mov	r7,r2
 400b268:	dc400015 	stw	r17,0(sp)
 400b26c:	000d883a 	mov	r6,zero
 400b270:	d9400104 	addi	r5,sp,4
 400b274:	8009883a 	mov	r4,r16
 400b278:	903ee83a 	callr	r18
 400b27c:	003fed06 	br	400b234 <__alt_data_end+0xfc00b234>

0400b280 <wcrtomb>:
 400b280:	defff604 	addi	sp,sp,-40
 400b284:	008100f4 	movhi	r2,1027
 400b288:	dc800615 	stw	r18,24(sp)
 400b28c:	dc400515 	stw	r17,20(sp)
 400b290:	10927d04 	addi	r2,r2,18932
 400b294:	dfc00915 	stw	ra,36(sp)
 400b298:	dd000815 	stw	r20,32(sp)
 400b29c:	dcc00715 	stw	r19,28(sp)
 400b2a0:	dc000415 	stw	r16,16(sp)
 400b2a4:	3025883a 	mov	r18,r6
 400b2a8:	14400017 	ldw	r17,0(r2)
 400b2ac:	20001926 	beq	r4,zero,400b314 <wcrtomb+0x94>
 400b2b0:	008100f4 	movhi	r2,1027
 400b2b4:	10928104 	addi	r2,r2,18948
 400b2b8:	15000017 	ldw	r20,0(r2)
 400b2bc:	2021883a 	mov	r16,r4
 400b2c0:	2827883a 	mov	r19,r5
 400b2c4:	4006d380 	call	4006d38 <__locale_charset>
 400b2c8:	100f883a 	mov	r7,r2
 400b2cc:	dc800015 	stw	r18,0(sp)
 400b2d0:	980d883a 	mov	r6,r19
 400b2d4:	800b883a 	mov	r5,r16
 400b2d8:	8809883a 	mov	r4,r17
 400b2dc:	a03ee83a 	callr	r20
 400b2e0:	00ffffc4 	movi	r3,-1
 400b2e4:	10c0031e 	bne	r2,r3,400b2f4 <wcrtomb+0x74>
 400b2e8:	90000015 	stw	zero,0(r18)
 400b2ec:	00c02284 	movi	r3,138
 400b2f0:	88c00015 	stw	r3,0(r17)
 400b2f4:	dfc00917 	ldw	ra,36(sp)
 400b2f8:	dd000817 	ldw	r20,32(sp)
 400b2fc:	dcc00717 	ldw	r19,28(sp)
 400b300:	dc800617 	ldw	r18,24(sp)
 400b304:	dc400517 	ldw	r17,20(sp)
 400b308:	dc000417 	ldw	r16,16(sp)
 400b30c:	dec00a04 	addi	sp,sp,40
 400b310:	f800283a 	ret
 400b314:	008100f4 	movhi	r2,1027
 400b318:	10928104 	addi	r2,r2,18948
 400b31c:	14000017 	ldw	r16,0(r2)
 400b320:	4006d380 	call	4006d38 <__locale_charset>
 400b324:	100f883a 	mov	r7,r2
 400b328:	dc800015 	stw	r18,0(sp)
 400b32c:	000d883a 	mov	r6,zero
 400b330:	d9400104 	addi	r5,sp,4
 400b334:	8809883a 	mov	r4,r17
 400b338:	803ee83a 	callr	r16
 400b33c:	003fe806 	br	400b2e0 <__alt_data_end+0xfc00b2e0>

0400b340 <__ascii_wctomb>:
 400b340:	28000526 	beq	r5,zero,400b358 <__ascii_wctomb+0x18>
 400b344:	00803fc4 	movi	r2,255
 400b348:	11800536 	bltu	r2,r6,400b360 <__ascii_wctomb+0x20>
 400b34c:	29800005 	stb	r6,0(r5)
 400b350:	00800044 	movi	r2,1
 400b354:	f800283a 	ret
 400b358:	0005883a 	mov	r2,zero
 400b35c:	f800283a 	ret
 400b360:	00802284 	movi	r2,138
 400b364:	20800015 	stw	r2,0(r4)
 400b368:	00bfffc4 	movi	r2,-1
 400b36c:	f800283a 	ret

0400b370 <_wctomb_r>:
 400b370:	008100f4 	movhi	r2,1027
 400b374:	defff904 	addi	sp,sp,-28
 400b378:	10928104 	addi	r2,r2,18948
 400b37c:	dfc00615 	stw	ra,24(sp)
 400b380:	dc400515 	stw	r17,20(sp)
 400b384:	dc000415 	stw	r16,16(sp)
 400b388:	3823883a 	mov	r17,r7
 400b38c:	14000017 	ldw	r16,0(r2)
 400b390:	d9000115 	stw	r4,4(sp)
 400b394:	d9400215 	stw	r5,8(sp)
 400b398:	d9800315 	stw	r6,12(sp)
 400b39c:	4006d380 	call	4006d38 <__locale_charset>
 400b3a0:	d9800317 	ldw	r6,12(sp)
 400b3a4:	d9400217 	ldw	r5,8(sp)
 400b3a8:	d9000117 	ldw	r4,4(sp)
 400b3ac:	100f883a 	mov	r7,r2
 400b3b0:	dc400015 	stw	r17,0(sp)
 400b3b4:	803ee83a 	callr	r16
 400b3b8:	dfc00617 	ldw	ra,24(sp)
 400b3bc:	dc400517 	ldw	r17,20(sp)
 400b3c0:	dc000417 	ldw	r16,16(sp)
 400b3c4:	dec00704 	addi	sp,sp,28
 400b3c8:	f800283a 	ret

0400b3cc <__udivdi3>:
 400b3cc:	defff504 	addi	sp,sp,-44
 400b3d0:	dcc00415 	stw	r19,16(sp)
 400b3d4:	dc000115 	stw	r16,4(sp)
 400b3d8:	dfc00a15 	stw	ra,40(sp)
 400b3dc:	df000915 	stw	fp,36(sp)
 400b3e0:	ddc00815 	stw	r23,32(sp)
 400b3e4:	dd800715 	stw	r22,28(sp)
 400b3e8:	dd400615 	stw	r21,24(sp)
 400b3ec:	dd000515 	stw	r20,20(sp)
 400b3f0:	dc800315 	stw	r18,12(sp)
 400b3f4:	dc400215 	stw	r17,8(sp)
 400b3f8:	2027883a 	mov	r19,r4
 400b3fc:	2821883a 	mov	r16,r5
 400b400:	3800411e 	bne	r7,zero,400b508 <__udivdi3+0x13c>
 400b404:	3023883a 	mov	r17,r6
 400b408:	2025883a 	mov	r18,r4
 400b40c:	2980522e 	bgeu	r5,r6,400b558 <__udivdi3+0x18c>
 400b410:	00bfffd4 	movui	r2,65535
 400b414:	282d883a 	mov	r22,r5
 400b418:	1180a836 	bltu	r2,r6,400b6bc <__udivdi3+0x2f0>
 400b41c:	00803fc4 	movi	r2,255
 400b420:	1185803a 	cmpltu	r2,r2,r6
 400b424:	100490fa 	slli	r2,r2,3
 400b428:	3086d83a 	srl	r3,r6,r2
 400b42c:	010100f4 	movhi	r4,1027
 400b430:	2105a504 	addi	r4,r4,5780
 400b434:	20c7883a 	add	r3,r4,r3
 400b438:	18c00003 	ldbu	r3,0(r3)
 400b43c:	1885883a 	add	r2,r3,r2
 400b440:	00c00804 	movi	r3,32
 400b444:	1887c83a 	sub	r3,r3,r2
 400b448:	18000526 	beq	r3,zero,400b460 <__udivdi3+0x94>
 400b44c:	80e0983a 	sll	r16,r16,r3
 400b450:	9884d83a 	srl	r2,r19,r2
 400b454:	30e2983a 	sll	r17,r6,r3
 400b458:	98e4983a 	sll	r18,r19,r3
 400b45c:	142cb03a 	or	r22,r2,r16
 400b460:	882ad43a 	srli	r21,r17,16
 400b464:	b009883a 	mov	r4,r22
 400b468:	8d3fffcc 	andi	r20,r17,65535
 400b46c:	a80b883a 	mov	r5,r21
 400b470:	4001d200 	call	4001d20 <__umodsi3>
 400b474:	b009883a 	mov	r4,r22
 400b478:	a80b883a 	mov	r5,r21
 400b47c:	1027883a 	mov	r19,r2
 400b480:	4001cbc0 	call	4001cbc <__udivsi3>
 400b484:	102d883a 	mov	r22,r2
 400b488:	9826943a 	slli	r19,r19,16
 400b48c:	9004d43a 	srli	r2,r18,16
 400b490:	a5a1383a 	mul	r16,r20,r22
 400b494:	14c4b03a 	or	r2,r2,r19
 400b498:	1400052e 	bgeu	r2,r16,400b4b0 <__udivdi3+0xe4>
 400b49c:	1445883a 	add	r2,r2,r17
 400b4a0:	b0ffffc4 	addi	r3,r22,-1
 400b4a4:	14400136 	bltu	r2,r17,400b4ac <__udivdi3+0xe0>
 400b4a8:	14012336 	bltu	r2,r16,400b938 <__udivdi3+0x56c>
 400b4ac:	182d883a 	mov	r22,r3
 400b4b0:	1421c83a 	sub	r16,r2,r16
 400b4b4:	a80b883a 	mov	r5,r21
 400b4b8:	8009883a 	mov	r4,r16
 400b4bc:	4001d200 	call	4001d20 <__umodsi3>
 400b4c0:	1027883a 	mov	r19,r2
 400b4c4:	a80b883a 	mov	r5,r21
 400b4c8:	8009883a 	mov	r4,r16
 400b4cc:	4001cbc0 	call	4001cbc <__udivsi3>
 400b4d0:	9826943a 	slli	r19,r19,16
 400b4d4:	a0a9383a 	mul	r20,r20,r2
 400b4d8:	94bfffcc 	andi	r18,r18,65535
 400b4dc:	94e4b03a 	or	r18,r18,r19
 400b4e0:	9500052e 	bgeu	r18,r20,400b4f8 <__udivdi3+0x12c>
 400b4e4:	8ca5883a 	add	r18,r17,r18
 400b4e8:	10ffffc4 	addi	r3,r2,-1
 400b4ec:	9440f136 	bltu	r18,r17,400b8b4 <__udivdi3+0x4e8>
 400b4f0:	9500f02e 	bgeu	r18,r20,400b8b4 <__udivdi3+0x4e8>
 400b4f4:	10bfff84 	addi	r2,r2,-2
 400b4f8:	b00c943a 	slli	r6,r22,16
 400b4fc:	0007883a 	mov	r3,zero
 400b500:	3084b03a 	or	r2,r6,r2
 400b504:	00005906 	br	400b66c <__udivdi3+0x2a0>
 400b508:	29c05636 	bltu	r5,r7,400b664 <__udivdi3+0x298>
 400b50c:	00bfffd4 	movui	r2,65535
 400b510:	11c0622e 	bgeu	r2,r7,400b69c <__udivdi3+0x2d0>
 400b514:	00804034 	movhi	r2,256
 400b518:	10bfffc4 	addi	r2,r2,-1
 400b51c:	11c0ee36 	bltu	r2,r7,400b8d8 <__udivdi3+0x50c>
 400b520:	00800404 	movi	r2,16
 400b524:	3886d83a 	srl	r3,r7,r2
 400b528:	010100f4 	movhi	r4,1027
 400b52c:	2105a504 	addi	r4,r4,5780
 400b530:	20c7883a 	add	r3,r4,r3
 400b534:	18c00003 	ldbu	r3,0(r3)
 400b538:	05400804 	movi	r21,32
 400b53c:	1885883a 	add	r2,r3,r2
 400b540:	a8abc83a 	sub	r21,r21,r2
 400b544:	a800621e 	bne	r21,zero,400b6d0 <__udivdi3+0x304>
 400b548:	3c00e936 	bltu	r7,r16,400b8f0 <__udivdi3+0x524>
 400b54c:	9985403a 	cmpgeu	r2,r19,r6
 400b550:	0007883a 	mov	r3,zero
 400b554:	00004506 	br	400b66c <__udivdi3+0x2a0>
 400b558:	3000041e 	bne	r6,zero,400b56c <__udivdi3+0x1a0>
 400b55c:	000b883a 	mov	r5,zero
 400b560:	01000044 	movi	r4,1
 400b564:	4001cbc0 	call	4001cbc <__udivsi3>
 400b568:	1023883a 	mov	r17,r2
 400b56c:	00bfffd4 	movui	r2,65535
 400b570:	14404e2e 	bgeu	r2,r17,400b6ac <__udivdi3+0x2e0>
 400b574:	00804034 	movhi	r2,256
 400b578:	10bfffc4 	addi	r2,r2,-1
 400b57c:	1440d836 	bltu	r2,r17,400b8e0 <__udivdi3+0x514>
 400b580:	00800404 	movi	r2,16
 400b584:	8886d83a 	srl	r3,r17,r2
 400b588:	010100f4 	movhi	r4,1027
 400b58c:	2105a504 	addi	r4,r4,5780
 400b590:	20c7883a 	add	r3,r4,r3
 400b594:	18c00003 	ldbu	r3,0(r3)
 400b598:	1885883a 	add	r2,r3,r2
 400b59c:	00c00804 	movi	r3,32
 400b5a0:	1887c83a 	sub	r3,r3,r2
 400b5a4:	18008f1e 	bne	r3,zero,400b7e4 <__udivdi3+0x418>
 400b5a8:	882ad43a 	srli	r21,r17,16
 400b5ac:	8461c83a 	sub	r16,r16,r17
 400b5b0:	8d3fffcc 	andi	r20,r17,65535
 400b5b4:	00c00044 	movi	r3,1
 400b5b8:	8009883a 	mov	r4,r16
 400b5bc:	a80b883a 	mov	r5,r21
 400b5c0:	d8c00015 	stw	r3,0(sp)
 400b5c4:	4001d200 	call	4001d20 <__umodsi3>
 400b5c8:	8009883a 	mov	r4,r16
 400b5cc:	a80b883a 	mov	r5,r21
 400b5d0:	1027883a 	mov	r19,r2
 400b5d4:	4001cbc0 	call	4001cbc <__udivsi3>
 400b5d8:	9826943a 	slli	r19,r19,16
 400b5dc:	9008d43a 	srli	r4,r18,16
 400b5e0:	1521383a 	mul	r16,r2,r20
 400b5e4:	102d883a 	mov	r22,r2
 400b5e8:	24c8b03a 	or	r4,r4,r19
 400b5ec:	d8c00017 	ldw	r3,0(sp)
 400b5f0:	2400052e 	bgeu	r4,r16,400b608 <__udivdi3+0x23c>
 400b5f4:	2449883a 	add	r4,r4,r17
 400b5f8:	b0bfffc4 	addi	r2,r22,-1
 400b5fc:	24400136 	bltu	r4,r17,400b604 <__udivdi3+0x238>
 400b600:	2400ca36 	bltu	r4,r16,400b92c <__udivdi3+0x560>
 400b604:	102d883a 	mov	r22,r2
 400b608:	2421c83a 	sub	r16,r4,r16
 400b60c:	a80b883a 	mov	r5,r21
 400b610:	8009883a 	mov	r4,r16
 400b614:	d8c00015 	stw	r3,0(sp)
 400b618:	4001d200 	call	4001d20 <__umodsi3>
 400b61c:	1027883a 	mov	r19,r2
 400b620:	a80b883a 	mov	r5,r21
 400b624:	8009883a 	mov	r4,r16
 400b628:	4001cbc0 	call	4001cbc <__udivsi3>
 400b62c:	9826943a 	slli	r19,r19,16
 400b630:	1529383a 	mul	r20,r2,r20
 400b634:	94bfffcc 	andi	r18,r18,65535
 400b638:	94e4b03a 	or	r18,r18,r19
 400b63c:	d8c00017 	ldw	r3,0(sp)
 400b640:	9500052e 	bgeu	r18,r20,400b658 <__udivdi3+0x28c>
 400b644:	8ca5883a 	add	r18,r17,r18
 400b648:	113fffc4 	addi	r4,r2,-1
 400b64c:	94409736 	bltu	r18,r17,400b8ac <__udivdi3+0x4e0>
 400b650:	9500962e 	bgeu	r18,r20,400b8ac <__udivdi3+0x4e0>
 400b654:	10bfff84 	addi	r2,r2,-2
 400b658:	b00c943a 	slli	r6,r22,16
 400b65c:	3084b03a 	or	r2,r6,r2
 400b660:	00000206 	br	400b66c <__udivdi3+0x2a0>
 400b664:	0007883a 	mov	r3,zero
 400b668:	0005883a 	mov	r2,zero
 400b66c:	dfc00a17 	ldw	ra,40(sp)
 400b670:	df000917 	ldw	fp,36(sp)
 400b674:	ddc00817 	ldw	r23,32(sp)
 400b678:	dd800717 	ldw	r22,28(sp)
 400b67c:	dd400617 	ldw	r21,24(sp)
 400b680:	dd000517 	ldw	r20,20(sp)
 400b684:	dcc00417 	ldw	r19,16(sp)
 400b688:	dc800317 	ldw	r18,12(sp)
 400b68c:	dc400217 	ldw	r17,8(sp)
 400b690:	dc000117 	ldw	r16,4(sp)
 400b694:	dec00b04 	addi	sp,sp,44
 400b698:	f800283a 	ret
 400b69c:	00803fc4 	movi	r2,255
 400b6a0:	11c5803a 	cmpltu	r2,r2,r7
 400b6a4:	100490fa 	slli	r2,r2,3
 400b6a8:	003f9e06 	br	400b524 <__alt_data_end+0xfc00b524>
 400b6ac:	00803fc4 	movi	r2,255
 400b6b0:	1445803a 	cmpltu	r2,r2,r17
 400b6b4:	100490fa 	slli	r2,r2,3
 400b6b8:	003fb206 	br	400b584 <__alt_data_end+0xfc00b584>
 400b6bc:	00804034 	movhi	r2,256
 400b6c0:	10bfffc4 	addi	r2,r2,-1
 400b6c4:	11808836 	bltu	r2,r6,400b8e8 <__udivdi3+0x51c>
 400b6c8:	00800404 	movi	r2,16
 400b6cc:	003f5606 	br	400b428 <__alt_data_end+0xfc00b428>
 400b6d0:	30aed83a 	srl	r23,r6,r2
 400b6d4:	3d4e983a 	sll	r7,r7,r21
 400b6d8:	80acd83a 	srl	r22,r16,r2
 400b6dc:	9884d83a 	srl	r2,r19,r2
 400b6e0:	3deeb03a 	or	r23,r7,r23
 400b6e4:	b824d43a 	srli	r18,r23,16
 400b6e8:	8560983a 	sll	r16,r16,r21
 400b6ec:	b009883a 	mov	r4,r22
 400b6f0:	900b883a 	mov	r5,r18
 400b6f4:	3568983a 	sll	r20,r6,r21
 400b6f8:	1420b03a 	or	r16,r2,r16
 400b6fc:	4001d200 	call	4001d20 <__umodsi3>
 400b700:	b009883a 	mov	r4,r22
 400b704:	900b883a 	mov	r5,r18
 400b708:	1023883a 	mov	r17,r2
 400b70c:	4001cbc0 	call	4001cbc <__udivsi3>
 400b710:	8808943a 	slli	r4,r17,16
 400b714:	bf3fffcc 	andi	fp,r23,65535
 400b718:	8006d43a 	srli	r3,r16,16
 400b71c:	e0a3383a 	mul	r17,fp,r2
 400b720:	100d883a 	mov	r6,r2
 400b724:	1906b03a 	or	r3,r3,r4
 400b728:	1c40042e 	bgeu	r3,r17,400b73c <__udivdi3+0x370>
 400b72c:	1dc7883a 	add	r3,r3,r23
 400b730:	10bfffc4 	addi	r2,r2,-1
 400b734:	1dc0752e 	bgeu	r3,r23,400b90c <__udivdi3+0x540>
 400b738:	100d883a 	mov	r6,r2
 400b73c:	1c63c83a 	sub	r17,r3,r17
 400b740:	900b883a 	mov	r5,r18
 400b744:	8809883a 	mov	r4,r17
 400b748:	d9800015 	stw	r6,0(sp)
 400b74c:	4001d200 	call	4001d20 <__umodsi3>
 400b750:	102d883a 	mov	r22,r2
 400b754:	8809883a 	mov	r4,r17
 400b758:	900b883a 	mov	r5,r18
 400b75c:	4001cbc0 	call	4001cbc <__udivsi3>
 400b760:	b02c943a 	slli	r22,r22,16
 400b764:	e089383a 	mul	r4,fp,r2
 400b768:	843fffcc 	andi	r16,r16,65535
 400b76c:	85a0b03a 	or	r16,r16,r22
 400b770:	d9800017 	ldw	r6,0(sp)
 400b774:	8100042e 	bgeu	r16,r4,400b788 <__udivdi3+0x3bc>
 400b778:	85e1883a 	add	r16,r16,r23
 400b77c:	10ffffc4 	addi	r3,r2,-1
 400b780:	85c05e2e 	bgeu	r16,r23,400b8fc <__udivdi3+0x530>
 400b784:	1805883a 	mov	r2,r3
 400b788:	300c943a 	slli	r6,r6,16
 400b78c:	a17fffcc 	andi	r5,r20,65535
 400b790:	a028d43a 	srli	r20,r20,16
 400b794:	3084b03a 	or	r2,r6,r2
 400b798:	10ffffcc 	andi	r3,r2,65535
 400b79c:	100cd43a 	srli	r6,r2,16
 400b7a0:	194f383a 	mul	r7,r3,r5
 400b7a4:	1d07383a 	mul	r3,r3,r20
 400b7a8:	314b383a 	mul	r5,r6,r5
 400b7ac:	3810d43a 	srli	r8,r7,16
 400b7b0:	8121c83a 	sub	r16,r16,r4
 400b7b4:	1947883a 	add	r3,r3,r5
 400b7b8:	40c7883a 	add	r3,r8,r3
 400b7bc:	350d383a 	mul	r6,r6,r20
 400b7c0:	1940022e 	bgeu	r3,r5,400b7cc <__udivdi3+0x400>
 400b7c4:	01000074 	movhi	r4,1
 400b7c8:	310d883a 	add	r6,r6,r4
 400b7cc:	1828d43a 	srli	r20,r3,16
 400b7d0:	a18d883a 	add	r6,r20,r6
 400b7d4:	81803e36 	bltu	r16,r6,400b8d0 <__udivdi3+0x504>
 400b7d8:	81803826 	beq	r16,r6,400b8bc <__udivdi3+0x4f0>
 400b7dc:	0007883a 	mov	r3,zero
 400b7e0:	003fa206 	br	400b66c <__alt_data_end+0xfc00b66c>
 400b7e4:	88e2983a 	sll	r17,r17,r3
 400b7e8:	80a8d83a 	srl	r20,r16,r2
 400b7ec:	80e0983a 	sll	r16,r16,r3
 400b7f0:	882ad43a 	srli	r21,r17,16
 400b7f4:	9884d83a 	srl	r2,r19,r2
 400b7f8:	a009883a 	mov	r4,r20
 400b7fc:	a80b883a 	mov	r5,r21
 400b800:	142eb03a 	or	r23,r2,r16
 400b804:	98e4983a 	sll	r18,r19,r3
 400b808:	4001d200 	call	4001d20 <__umodsi3>
 400b80c:	a009883a 	mov	r4,r20
 400b810:	a80b883a 	mov	r5,r21
 400b814:	1021883a 	mov	r16,r2
 400b818:	4001cbc0 	call	4001cbc <__udivsi3>
 400b81c:	1039883a 	mov	fp,r2
 400b820:	8d3fffcc 	andi	r20,r17,65535
 400b824:	8020943a 	slli	r16,r16,16
 400b828:	b804d43a 	srli	r2,r23,16
 400b82c:	a72d383a 	mul	r22,r20,fp
 400b830:	1404b03a 	or	r2,r2,r16
 400b834:	1580062e 	bgeu	r2,r22,400b850 <__udivdi3+0x484>
 400b838:	1445883a 	add	r2,r2,r17
 400b83c:	e0ffffc4 	addi	r3,fp,-1
 400b840:	14403836 	bltu	r2,r17,400b924 <__udivdi3+0x558>
 400b844:	1580372e 	bgeu	r2,r22,400b924 <__udivdi3+0x558>
 400b848:	e73fff84 	addi	fp,fp,-2
 400b84c:	1445883a 	add	r2,r2,r17
 400b850:	15adc83a 	sub	r22,r2,r22
 400b854:	a80b883a 	mov	r5,r21
 400b858:	b009883a 	mov	r4,r22
 400b85c:	4001d200 	call	4001d20 <__umodsi3>
 400b860:	1027883a 	mov	r19,r2
 400b864:	b009883a 	mov	r4,r22
 400b868:	a80b883a 	mov	r5,r21
 400b86c:	4001cbc0 	call	4001cbc <__udivsi3>
 400b870:	9826943a 	slli	r19,r19,16
 400b874:	a0a1383a 	mul	r16,r20,r2
 400b878:	b93fffcc 	andi	r4,r23,65535
 400b87c:	24c8b03a 	or	r4,r4,r19
 400b880:	2400062e 	bgeu	r4,r16,400b89c <__udivdi3+0x4d0>
 400b884:	2449883a 	add	r4,r4,r17
 400b888:	10ffffc4 	addi	r3,r2,-1
 400b88c:	24402336 	bltu	r4,r17,400b91c <__udivdi3+0x550>
 400b890:	2400222e 	bgeu	r4,r16,400b91c <__udivdi3+0x550>
 400b894:	10bfff84 	addi	r2,r2,-2
 400b898:	2449883a 	add	r4,r4,r17
 400b89c:	e038943a 	slli	fp,fp,16
 400b8a0:	2421c83a 	sub	r16,r4,r16
 400b8a4:	e086b03a 	or	r3,fp,r2
 400b8a8:	003f4306 	br	400b5b8 <__alt_data_end+0xfc00b5b8>
 400b8ac:	2005883a 	mov	r2,r4
 400b8b0:	003f6906 	br	400b658 <__alt_data_end+0xfc00b658>
 400b8b4:	1805883a 	mov	r2,r3
 400b8b8:	003f0f06 	br	400b4f8 <__alt_data_end+0xfc00b4f8>
 400b8bc:	1806943a 	slli	r3,r3,16
 400b8c0:	9d66983a 	sll	r19,r19,r21
 400b8c4:	39ffffcc 	andi	r7,r7,65535
 400b8c8:	19c7883a 	add	r3,r3,r7
 400b8cc:	98ffc32e 	bgeu	r19,r3,400b7dc <__alt_data_end+0xfc00b7dc>
 400b8d0:	10bfffc4 	addi	r2,r2,-1
 400b8d4:	003fc106 	br	400b7dc <__alt_data_end+0xfc00b7dc>
 400b8d8:	00800604 	movi	r2,24
 400b8dc:	003f1106 	br	400b524 <__alt_data_end+0xfc00b524>
 400b8e0:	00800604 	movi	r2,24
 400b8e4:	003f2706 	br	400b584 <__alt_data_end+0xfc00b584>
 400b8e8:	00800604 	movi	r2,24
 400b8ec:	003ece06 	br	400b428 <__alt_data_end+0xfc00b428>
 400b8f0:	0007883a 	mov	r3,zero
 400b8f4:	00800044 	movi	r2,1
 400b8f8:	003f5c06 	br	400b66c <__alt_data_end+0xfc00b66c>
 400b8fc:	813fa12e 	bgeu	r16,r4,400b784 <__alt_data_end+0xfc00b784>
 400b900:	10bfff84 	addi	r2,r2,-2
 400b904:	85e1883a 	add	r16,r16,r23
 400b908:	003f9f06 	br	400b788 <__alt_data_end+0xfc00b788>
 400b90c:	1c7f8a2e 	bgeu	r3,r17,400b738 <__alt_data_end+0xfc00b738>
 400b910:	31bfff84 	addi	r6,r6,-2
 400b914:	1dc7883a 	add	r3,r3,r23
 400b918:	003f8806 	br	400b73c <__alt_data_end+0xfc00b73c>
 400b91c:	1805883a 	mov	r2,r3
 400b920:	003fde06 	br	400b89c <__alt_data_end+0xfc00b89c>
 400b924:	1839883a 	mov	fp,r3
 400b928:	003fc906 	br	400b850 <__alt_data_end+0xfc00b850>
 400b92c:	b5bfff84 	addi	r22,r22,-2
 400b930:	2449883a 	add	r4,r4,r17
 400b934:	003f3406 	br	400b608 <__alt_data_end+0xfc00b608>
 400b938:	b5bfff84 	addi	r22,r22,-2
 400b93c:	1445883a 	add	r2,r2,r17
 400b940:	003edb06 	br	400b4b0 <__alt_data_end+0xfc00b4b0>

0400b944 <__umoddi3>:
 400b944:	defff404 	addi	sp,sp,-48
 400b948:	df000a15 	stw	fp,40(sp)
 400b94c:	dc400315 	stw	r17,12(sp)
 400b950:	dc000215 	stw	r16,8(sp)
 400b954:	dfc00b15 	stw	ra,44(sp)
 400b958:	ddc00915 	stw	r23,36(sp)
 400b95c:	dd800815 	stw	r22,32(sp)
 400b960:	dd400715 	stw	r21,28(sp)
 400b964:	dd000615 	stw	r20,24(sp)
 400b968:	dcc00515 	stw	r19,20(sp)
 400b96c:	dc800415 	stw	r18,16(sp)
 400b970:	2021883a 	mov	r16,r4
 400b974:	2823883a 	mov	r17,r5
 400b978:	2839883a 	mov	fp,r5
 400b97c:	38003c1e 	bne	r7,zero,400ba70 <__umoddi3+0x12c>
 400b980:	3027883a 	mov	r19,r6
 400b984:	2029883a 	mov	r20,r4
 400b988:	2980512e 	bgeu	r5,r6,400bad0 <__umoddi3+0x18c>
 400b98c:	00bfffd4 	movui	r2,65535
 400b990:	11809a36 	bltu	r2,r6,400bbfc <__umoddi3+0x2b8>
 400b994:	01003fc4 	movi	r4,255
 400b998:	2189803a 	cmpltu	r4,r4,r6
 400b99c:	200890fa 	slli	r4,r4,3
 400b9a0:	3104d83a 	srl	r2,r6,r4
 400b9a4:	00c100f4 	movhi	r3,1027
 400b9a8:	18c5a504 	addi	r3,r3,5780
 400b9ac:	1885883a 	add	r2,r3,r2
 400b9b0:	10c00003 	ldbu	r3,0(r2)
 400b9b4:	00800804 	movi	r2,32
 400b9b8:	1909883a 	add	r4,r3,r4
 400b9bc:	1125c83a 	sub	r18,r2,r4
 400b9c0:	90000526 	beq	r18,zero,400b9d8 <__umoddi3+0x94>
 400b9c4:	8ca2983a 	sll	r17,r17,r18
 400b9c8:	8108d83a 	srl	r4,r16,r4
 400b9cc:	34a6983a 	sll	r19,r6,r18
 400b9d0:	84a8983a 	sll	r20,r16,r18
 400b9d4:	2478b03a 	or	fp,r4,r17
 400b9d8:	982ed43a 	srli	r23,r19,16
 400b9dc:	e009883a 	mov	r4,fp
 400b9e0:	9dbfffcc 	andi	r22,r19,65535
 400b9e4:	b80b883a 	mov	r5,r23
 400b9e8:	4001d200 	call	4001d20 <__umodsi3>
 400b9ec:	e009883a 	mov	r4,fp
 400b9f0:	b80b883a 	mov	r5,r23
 400b9f4:	102b883a 	mov	r21,r2
 400b9f8:	4001cbc0 	call	4001cbc <__udivsi3>
 400b9fc:	a806943a 	slli	r3,r21,16
 400ba00:	a008d43a 	srli	r4,r20,16
 400ba04:	b085383a 	mul	r2,r22,r2
 400ba08:	20c8b03a 	or	r4,r4,r3
 400ba0c:	2080032e 	bgeu	r4,r2,400ba1c <__umoddi3+0xd8>
 400ba10:	24c9883a 	add	r4,r4,r19
 400ba14:	24c00136 	bltu	r4,r19,400ba1c <__umoddi3+0xd8>
 400ba18:	20811036 	bltu	r4,r2,400be5c <__umoddi3+0x518>
 400ba1c:	20abc83a 	sub	r21,r4,r2
 400ba20:	b80b883a 	mov	r5,r23
 400ba24:	a809883a 	mov	r4,r21
 400ba28:	4001d200 	call	4001d20 <__umodsi3>
 400ba2c:	1023883a 	mov	r17,r2
 400ba30:	b80b883a 	mov	r5,r23
 400ba34:	a809883a 	mov	r4,r21
 400ba38:	4001cbc0 	call	4001cbc <__udivsi3>
 400ba3c:	8822943a 	slli	r17,r17,16
 400ba40:	b085383a 	mul	r2,r22,r2
 400ba44:	a0ffffcc 	andi	r3,r20,65535
 400ba48:	1c46b03a 	or	r3,r3,r17
 400ba4c:	1880042e 	bgeu	r3,r2,400ba60 <__umoddi3+0x11c>
 400ba50:	1cc7883a 	add	r3,r3,r19
 400ba54:	1cc00236 	bltu	r3,r19,400ba60 <__umoddi3+0x11c>
 400ba58:	1880012e 	bgeu	r3,r2,400ba60 <__umoddi3+0x11c>
 400ba5c:	1cc7883a 	add	r3,r3,r19
 400ba60:	1885c83a 	sub	r2,r3,r2
 400ba64:	1484d83a 	srl	r2,r2,r18
 400ba68:	0007883a 	mov	r3,zero
 400ba6c:	00004f06 	br	400bbac <__umoddi3+0x268>
 400ba70:	29c04c36 	bltu	r5,r7,400bba4 <__umoddi3+0x260>
 400ba74:	00bfffd4 	movui	r2,65535
 400ba78:	11c0582e 	bgeu	r2,r7,400bbdc <__umoddi3+0x298>
 400ba7c:	00804034 	movhi	r2,256
 400ba80:	10bfffc4 	addi	r2,r2,-1
 400ba84:	11c0e736 	bltu	r2,r7,400be24 <__umoddi3+0x4e0>
 400ba88:	01000404 	movi	r4,16
 400ba8c:	3904d83a 	srl	r2,r7,r4
 400ba90:	00c100f4 	movhi	r3,1027
 400ba94:	18c5a504 	addi	r3,r3,5780
 400ba98:	1885883a 	add	r2,r3,r2
 400ba9c:	14c00003 	ldbu	r19,0(r2)
 400baa0:	00c00804 	movi	r3,32
 400baa4:	9927883a 	add	r19,r19,r4
 400baa8:	1ce9c83a 	sub	r20,r3,r19
 400baac:	a000581e 	bne	r20,zero,400bc10 <__umoddi3+0x2cc>
 400bab0:	3c400136 	bltu	r7,r17,400bab8 <__umoddi3+0x174>
 400bab4:	8180eb36 	bltu	r16,r6,400be64 <__umoddi3+0x520>
 400bab8:	8185c83a 	sub	r2,r16,r6
 400babc:	89e3c83a 	sub	r17,r17,r7
 400bac0:	8089803a 	cmpltu	r4,r16,r2
 400bac4:	8939c83a 	sub	fp,r17,r4
 400bac8:	e007883a 	mov	r3,fp
 400bacc:	00003706 	br	400bbac <__umoddi3+0x268>
 400bad0:	3000041e 	bne	r6,zero,400bae4 <__umoddi3+0x1a0>
 400bad4:	000b883a 	mov	r5,zero
 400bad8:	01000044 	movi	r4,1
 400badc:	4001cbc0 	call	4001cbc <__udivsi3>
 400bae0:	1027883a 	mov	r19,r2
 400bae4:	00bfffd4 	movui	r2,65535
 400bae8:	14c0402e 	bgeu	r2,r19,400bbec <__umoddi3+0x2a8>
 400baec:	00804034 	movhi	r2,256
 400baf0:	10bfffc4 	addi	r2,r2,-1
 400baf4:	14c0cd36 	bltu	r2,r19,400be2c <__umoddi3+0x4e8>
 400baf8:	00800404 	movi	r2,16
 400bafc:	9886d83a 	srl	r3,r19,r2
 400bb00:	010100f4 	movhi	r4,1027
 400bb04:	2105a504 	addi	r4,r4,5780
 400bb08:	20c7883a 	add	r3,r4,r3
 400bb0c:	18c00003 	ldbu	r3,0(r3)
 400bb10:	1887883a 	add	r3,r3,r2
 400bb14:	00800804 	movi	r2,32
 400bb18:	10e5c83a 	sub	r18,r2,r3
 400bb1c:	9000901e 	bne	r18,zero,400bd60 <__umoddi3+0x41c>
 400bb20:	982cd43a 	srli	r22,r19,16
 400bb24:	8ce3c83a 	sub	r17,r17,r19
 400bb28:	9d7fffcc 	andi	r21,r19,65535
 400bb2c:	b00b883a 	mov	r5,r22
 400bb30:	8809883a 	mov	r4,r17
 400bb34:	4001d200 	call	4001d20 <__umodsi3>
 400bb38:	8809883a 	mov	r4,r17
 400bb3c:	b00b883a 	mov	r5,r22
 400bb40:	1021883a 	mov	r16,r2
 400bb44:	4001cbc0 	call	4001cbc <__udivsi3>
 400bb48:	8006943a 	slli	r3,r16,16
 400bb4c:	a008d43a 	srli	r4,r20,16
 400bb50:	1545383a 	mul	r2,r2,r21
 400bb54:	20c8b03a 	or	r4,r4,r3
 400bb58:	2080042e 	bgeu	r4,r2,400bb6c <__umoddi3+0x228>
 400bb5c:	24c9883a 	add	r4,r4,r19
 400bb60:	24c00236 	bltu	r4,r19,400bb6c <__umoddi3+0x228>
 400bb64:	2080012e 	bgeu	r4,r2,400bb6c <__umoddi3+0x228>
 400bb68:	24c9883a 	add	r4,r4,r19
 400bb6c:	20a1c83a 	sub	r16,r4,r2
 400bb70:	b00b883a 	mov	r5,r22
 400bb74:	8009883a 	mov	r4,r16
 400bb78:	4001d200 	call	4001d20 <__umodsi3>
 400bb7c:	1023883a 	mov	r17,r2
 400bb80:	b00b883a 	mov	r5,r22
 400bb84:	8009883a 	mov	r4,r16
 400bb88:	4001cbc0 	call	4001cbc <__udivsi3>
 400bb8c:	8822943a 	slli	r17,r17,16
 400bb90:	1545383a 	mul	r2,r2,r21
 400bb94:	a53fffcc 	andi	r20,r20,65535
 400bb98:	a446b03a 	or	r3,r20,r17
 400bb9c:	18bfb02e 	bgeu	r3,r2,400ba60 <__alt_data_end+0xfc00ba60>
 400bba0:	003fab06 	br	400ba50 <__alt_data_end+0xfc00ba50>
 400bba4:	2005883a 	mov	r2,r4
 400bba8:	2807883a 	mov	r3,r5
 400bbac:	dfc00b17 	ldw	ra,44(sp)
 400bbb0:	df000a17 	ldw	fp,40(sp)
 400bbb4:	ddc00917 	ldw	r23,36(sp)
 400bbb8:	dd800817 	ldw	r22,32(sp)
 400bbbc:	dd400717 	ldw	r21,28(sp)
 400bbc0:	dd000617 	ldw	r20,24(sp)
 400bbc4:	dcc00517 	ldw	r19,20(sp)
 400bbc8:	dc800417 	ldw	r18,16(sp)
 400bbcc:	dc400317 	ldw	r17,12(sp)
 400bbd0:	dc000217 	ldw	r16,8(sp)
 400bbd4:	dec00c04 	addi	sp,sp,48
 400bbd8:	f800283a 	ret
 400bbdc:	04c03fc4 	movi	r19,255
 400bbe0:	99c9803a 	cmpltu	r4,r19,r7
 400bbe4:	200890fa 	slli	r4,r4,3
 400bbe8:	003fa806 	br	400ba8c <__alt_data_end+0xfc00ba8c>
 400bbec:	00803fc4 	movi	r2,255
 400bbf0:	14c5803a 	cmpltu	r2,r2,r19
 400bbf4:	100490fa 	slli	r2,r2,3
 400bbf8:	003fc006 	br	400bafc <__alt_data_end+0xfc00bafc>
 400bbfc:	00804034 	movhi	r2,256
 400bc00:	10bfffc4 	addi	r2,r2,-1
 400bc04:	11808b36 	bltu	r2,r6,400be34 <__umoddi3+0x4f0>
 400bc08:	01000404 	movi	r4,16
 400bc0c:	003f6406 	br	400b9a0 <__alt_data_end+0xfc00b9a0>
 400bc10:	34c4d83a 	srl	r2,r6,r19
 400bc14:	3d0e983a 	sll	r7,r7,r20
 400bc18:	8cf8d83a 	srl	fp,r17,r19
 400bc1c:	8d10983a 	sll	r8,r17,r20
 400bc20:	38aab03a 	or	r21,r7,r2
 400bc24:	a82cd43a 	srli	r22,r21,16
 400bc28:	84e2d83a 	srl	r17,r16,r19
 400bc2c:	e009883a 	mov	r4,fp
 400bc30:	b00b883a 	mov	r5,r22
 400bc34:	8a22b03a 	or	r17,r17,r8
 400bc38:	3524983a 	sll	r18,r6,r20
 400bc3c:	4001d200 	call	4001d20 <__umodsi3>
 400bc40:	e009883a 	mov	r4,fp
 400bc44:	b00b883a 	mov	r5,r22
 400bc48:	102f883a 	mov	r23,r2
 400bc4c:	4001cbc0 	call	4001cbc <__udivsi3>
 400bc50:	100d883a 	mov	r6,r2
 400bc54:	b808943a 	slli	r4,r23,16
 400bc58:	aa3fffcc 	andi	r8,r21,65535
 400bc5c:	8804d43a 	srli	r2,r17,16
 400bc60:	41af383a 	mul	r23,r8,r6
 400bc64:	8520983a 	sll	r16,r16,r20
 400bc68:	1104b03a 	or	r2,r2,r4
 400bc6c:	15c0042e 	bgeu	r2,r23,400bc80 <__umoddi3+0x33c>
 400bc70:	1545883a 	add	r2,r2,r21
 400bc74:	30ffffc4 	addi	r3,r6,-1
 400bc78:	1540742e 	bgeu	r2,r21,400be4c <__umoddi3+0x508>
 400bc7c:	180d883a 	mov	r6,r3
 400bc80:	15efc83a 	sub	r23,r2,r23
 400bc84:	b00b883a 	mov	r5,r22
 400bc88:	b809883a 	mov	r4,r23
 400bc8c:	d9800115 	stw	r6,4(sp)
 400bc90:	da000015 	stw	r8,0(sp)
 400bc94:	4001d200 	call	4001d20 <__umodsi3>
 400bc98:	b00b883a 	mov	r5,r22
 400bc9c:	b809883a 	mov	r4,r23
 400bca0:	1039883a 	mov	fp,r2
 400bca4:	4001cbc0 	call	4001cbc <__udivsi3>
 400bca8:	da000017 	ldw	r8,0(sp)
 400bcac:	e038943a 	slli	fp,fp,16
 400bcb0:	100b883a 	mov	r5,r2
 400bcb4:	4089383a 	mul	r4,r8,r2
 400bcb8:	8a3fffcc 	andi	r8,r17,65535
 400bcbc:	4710b03a 	or	r8,r8,fp
 400bcc0:	d9800117 	ldw	r6,4(sp)
 400bcc4:	4100042e 	bgeu	r8,r4,400bcd8 <__umoddi3+0x394>
 400bcc8:	4551883a 	add	r8,r8,r21
 400bccc:	10bfffc4 	addi	r2,r2,-1
 400bcd0:	45405a2e 	bgeu	r8,r21,400be3c <__umoddi3+0x4f8>
 400bcd4:	100b883a 	mov	r5,r2
 400bcd8:	300c943a 	slli	r6,r6,16
 400bcdc:	91ffffcc 	andi	r7,r18,65535
 400bce0:	9004d43a 	srli	r2,r18,16
 400bce4:	314cb03a 	or	r6,r6,r5
 400bce8:	317fffcc 	andi	r5,r6,65535
 400bcec:	300cd43a 	srli	r6,r6,16
 400bcf0:	29d3383a 	mul	r9,r5,r7
 400bcf4:	288b383a 	mul	r5,r5,r2
 400bcf8:	31cf383a 	mul	r7,r6,r7
 400bcfc:	4806d43a 	srli	r3,r9,16
 400bd00:	4111c83a 	sub	r8,r8,r4
 400bd04:	29cb883a 	add	r5,r5,r7
 400bd08:	194b883a 	add	r5,r3,r5
 400bd0c:	3085383a 	mul	r2,r6,r2
 400bd10:	29c0022e 	bgeu	r5,r7,400bd1c <__umoddi3+0x3d8>
 400bd14:	00c00074 	movhi	r3,1
 400bd18:	10c5883a 	add	r2,r2,r3
 400bd1c:	2808d43a 	srli	r4,r5,16
 400bd20:	280a943a 	slli	r5,r5,16
 400bd24:	4a7fffcc 	andi	r9,r9,65535
 400bd28:	2085883a 	add	r2,r4,r2
 400bd2c:	2a4b883a 	add	r5,r5,r9
 400bd30:	40803636 	bltu	r8,r2,400be0c <__umoddi3+0x4c8>
 400bd34:	40804d26 	beq	r8,r2,400be6c <__umoddi3+0x528>
 400bd38:	4089c83a 	sub	r4,r8,r2
 400bd3c:	280f883a 	mov	r7,r5
 400bd40:	81cfc83a 	sub	r7,r16,r7
 400bd44:	81c7803a 	cmpltu	r3,r16,r7
 400bd48:	20c7c83a 	sub	r3,r4,r3
 400bd4c:	1cc4983a 	sll	r2,r3,r19
 400bd50:	3d0ed83a 	srl	r7,r7,r20
 400bd54:	1d06d83a 	srl	r3,r3,r20
 400bd58:	11c4b03a 	or	r2,r2,r7
 400bd5c:	003f9306 	br	400bbac <__alt_data_end+0xfc00bbac>
 400bd60:	9ca6983a 	sll	r19,r19,r18
 400bd64:	88e8d83a 	srl	r20,r17,r3
 400bd68:	80c4d83a 	srl	r2,r16,r3
 400bd6c:	982cd43a 	srli	r22,r19,16
 400bd70:	8ca2983a 	sll	r17,r17,r18
 400bd74:	a009883a 	mov	r4,r20
 400bd78:	b00b883a 	mov	r5,r22
 400bd7c:	1478b03a 	or	fp,r2,r17
 400bd80:	4001d200 	call	4001d20 <__umodsi3>
 400bd84:	a009883a 	mov	r4,r20
 400bd88:	b00b883a 	mov	r5,r22
 400bd8c:	1023883a 	mov	r17,r2
 400bd90:	4001cbc0 	call	4001cbc <__udivsi3>
 400bd94:	9d7fffcc 	andi	r21,r19,65535
 400bd98:	880a943a 	slli	r5,r17,16
 400bd9c:	e008d43a 	srli	r4,fp,16
 400bda0:	a885383a 	mul	r2,r21,r2
 400bda4:	84a8983a 	sll	r20,r16,r18
 400bda8:	2148b03a 	or	r4,r4,r5
 400bdac:	2080042e 	bgeu	r4,r2,400bdc0 <__umoddi3+0x47c>
 400bdb0:	24c9883a 	add	r4,r4,r19
 400bdb4:	24c00236 	bltu	r4,r19,400bdc0 <__umoddi3+0x47c>
 400bdb8:	2080012e 	bgeu	r4,r2,400bdc0 <__umoddi3+0x47c>
 400bdbc:	24c9883a 	add	r4,r4,r19
 400bdc0:	20a3c83a 	sub	r17,r4,r2
 400bdc4:	b00b883a 	mov	r5,r22
 400bdc8:	8809883a 	mov	r4,r17
 400bdcc:	4001d200 	call	4001d20 <__umodsi3>
 400bdd0:	102f883a 	mov	r23,r2
 400bdd4:	8809883a 	mov	r4,r17
 400bdd8:	b00b883a 	mov	r5,r22
 400bddc:	4001cbc0 	call	4001cbc <__udivsi3>
 400bde0:	b82e943a 	slli	r23,r23,16
 400bde4:	a885383a 	mul	r2,r21,r2
 400bde8:	e13fffcc 	andi	r4,fp,65535
 400bdec:	25c8b03a 	or	r4,r4,r23
 400bdf0:	2080042e 	bgeu	r4,r2,400be04 <__umoddi3+0x4c0>
 400bdf4:	24c9883a 	add	r4,r4,r19
 400bdf8:	24c00236 	bltu	r4,r19,400be04 <__umoddi3+0x4c0>
 400bdfc:	2080012e 	bgeu	r4,r2,400be04 <__umoddi3+0x4c0>
 400be00:	24c9883a 	add	r4,r4,r19
 400be04:	20a3c83a 	sub	r17,r4,r2
 400be08:	003f4806 	br	400bb2c <__alt_data_end+0xfc00bb2c>
 400be0c:	2c8fc83a 	sub	r7,r5,r18
 400be10:	1545c83a 	sub	r2,r2,r21
 400be14:	29cb803a 	cmpltu	r5,r5,r7
 400be18:	1145c83a 	sub	r2,r2,r5
 400be1c:	4089c83a 	sub	r4,r8,r2
 400be20:	003fc706 	br	400bd40 <__alt_data_end+0xfc00bd40>
 400be24:	01000604 	movi	r4,24
 400be28:	003f1806 	br	400ba8c <__alt_data_end+0xfc00ba8c>
 400be2c:	00800604 	movi	r2,24
 400be30:	003f3206 	br	400bafc <__alt_data_end+0xfc00bafc>
 400be34:	01000604 	movi	r4,24
 400be38:	003ed906 	br	400b9a0 <__alt_data_end+0xfc00b9a0>
 400be3c:	413fa52e 	bgeu	r8,r4,400bcd4 <__alt_data_end+0xfc00bcd4>
 400be40:	297fff84 	addi	r5,r5,-2
 400be44:	4551883a 	add	r8,r8,r21
 400be48:	003fa306 	br	400bcd8 <__alt_data_end+0xfc00bcd8>
 400be4c:	15ff8b2e 	bgeu	r2,r23,400bc7c <__alt_data_end+0xfc00bc7c>
 400be50:	31bfff84 	addi	r6,r6,-2
 400be54:	1545883a 	add	r2,r2,r21
 400be58:	003f8906 	br	400bc80 <__alt_data_end+0xfc00bc80>
 400be5c:	24c9883a 	add	r4,r4,r19
 400be60:	003eee06 	br	400ba1c <__alt_data_end+0xfc00ba1c>
 400be64:	8005883a 	mov	r2,r16
 400be68:	003f1706 	br	400bac8 <__alt_data_end+0xfc00bac8>
 400be6c:	817fe736 	bltu	r16,r5,400be0c <__alt_data_end+0xfc00be0c>
 400be70:	280f883a 	mov	r7,r5
 400be74:	0009883a 	mov	r4,zero
 400be78:	003fb106 	br	400bd40 <__alt_data_end+0xfc00bd40>

0400be7c <__adddf3>:
 400be7c:	02c00434 	movhi	r11,16
 400be80:	5affffc4 	addi	r11,r11,-1
 400be84:	2806d7fa 	srli	r3,r5,31
 400be88:	2ad4703a 	and	r10,r5,r11
 400be8c:	3ad2703a 	and	r9,r7,r11
 400be90:	3804d53a 	srli	r2,r7,20
 400be94:	3018d77a 	srli	r12,r6,29
 400be98:	280ad53a 	srli	r5,r5,20
 400be9c:	501490fa 	slli	r10,r10,3
 400bea0:	2010d77a 	srli	r8,r4,29
 400bea4:	481290fa 	slli	r9,r9,3
 400bea8:	380ed7fa 	srli	r7,r7,31
 400beac:	defffb04 	addi	sp,sp,-20
 400beb0:	dc800215 	stw	r18,8(sp)
 400beb4:	dc400115 	stw	r17,4(sp)
 400beb8:	dc000015 	stw	r16,0(sp)
 400bebc:	dfc00415 	stw	ra,16(sp)
 400bec0:	dcc00315 	stw	r19,12(sp)
 400bec4:	1c803fcc 	andi	r18,r3,255
 400bec8:	2c01ffcc 	andi	r16,r5,2047
 400becc:	5210b03a 	or	r8,r10,r8
 400bed0:	202290fa 	slli	r17,r4,3
 400bed4:	1081ffcc 	andi	r2,r2,2047
 400bed8:	4b12b03a 	or	r9,r9,r12
 400bedc:	300c90fa 	slli	r6,r6,3
 400bee0:	91c07526 	beq	r18,r7,400c0b8 <__adddf3+0x23c>
 400bee4:	8087c83a 	sub	r3,r16,r2
 400bee8:	00c0ab0e 	bge	zero,r3,400c198 <__adddf3+0x31c>
 400beec:	10002a1e 	bne	r2,zero,400bf98 <__adddf3+0x11c>
 400bef0:	4984b03a 	or	r2,r9,r6
 400bef4:	1000961e 	bne	r2,zero,400c150 <__adddf3+0x2d4>
 400bef8:	888001cc 	andi	r2,r17,7
 400befc:	10000726 	beq	r2,zero,400bf1c <__adddf3+0xa0>
 400bf00:	888003cc 	andi	r2,r17,15
 400bf04:	00c00104 	movi	r3,4
 400bf08:	10c00426 	beq	r2,r3,400bf1c <__adddf3+0xa0>
 400bf0c:	88c7883a 	add	r3,r17,r3
 400bf10:	1c63803a 	cmpltu	r17,r3,r17
 400bf14:	4451883a 	add	r8,r8,r17
 400bf18:	1823883a 	mov	r17,r3
 400bf1c:	4080202c 	andhi	r2,r8,128
 400bf20:	10005926 	beq	r2,zero,400c088 <__adddf3+0x20c>
 400bf24:	84000044 	addi	r16,r16,1
 400bf28:	0081ffc4 	movi	r2,2047
 400bf2c:	8080ba26 	beq	r16,r2,400c218 <__adddf3+0x39c>
 400bf30:	00bfe034 	movhi	r2,65408
 400bf34:	10bfffc4 	addi	r2,r2,-1
 400bf38:	4090703a 	and	r8,r8,r2
 400bf3c:	4004977a 	slli	r2,r8,29
 400bf40:	4010927a 	slli	r8,r8,9
 400bf44:	8822d0fa 	srli	r17,r17,3
 400bf48:	8401ffcc 	andi	r16,r16,2047
 400bf4c:	4010d33a 	srli	r8,r8,12
 400bf50:	9007883a 	mov	r3,r18
 400bf54:	1444b03a 	or	r2,r2,r17
 400bf58:	8401ffcc 	andi	r16,r16,2047
 400bf5c:	8020953a 	slli	r16,r16,20
 400bf60:	18c03fcc 	andi	r3,r3,255
 400bf64:	01000434 	movhi	r4,16
 400bf68:	213fffc4 	addi	r4,r4,-1
 400bf6c:	180697fa 	slli	r3,r3,31
 400bf70:	4110703a 	and	r8,r8,r4
 400bf74:	4410b03a 	or	r8,r8,r16
 400bf78:	40c6b03a 	or	r3,r8,r3
 400bf7c:	dfc00417 	ldw	ra,16(sp)
 400bf80:	dcc00317 	ldw	r19,12(sp)
 400bf84:	dc800217 	ldw	r18,8(sp)
 400bf88:	dc400117 	ldw	r17,4(sp)
 400bf8c:	dc000017 	ldw	r16,0(sp)
 400bf90:	dec00504 	addi	sp,sp,20
 400bf94:	f800283a 	ret
 400bf98:	0081ffc4 	movi	r2,2047
 400bf9c:	80bfd626 	beq	r16,r2,400bef8 <__alt_data_end+0xfc00bef8>
 400bfa0:	4a402034 	orhi	r9,r9,128
 400bfa4:	00800e04 	movi	r2,56
 400bfa8:	10c09f16 	blt	r2,r3,400c228 <__adddf3+0x3ac>
 400bfac:	008007c4 	movi	r2,31
 400bfb0:	10c0c216 	blt	r2,r3,400c2bc <__adddf3+0x440>
 400bfb4:	00800804 	movi	r2,32
 400bfb8:	10c5c83a 	sub	r2,r2,r3
 400bfbc:	488a983a 	sll	r5,r9,r2
 400bfc0:	30c8d83a 	srl	r4,r6,r3
 400bfc4:	3084983a 	sll	r2,r6,r2
 400bfc8:	48c6d83a 	srl	r3,r9,r3
 400bfcc:	290cb03a 	or	r6,r5,r4
 400bfd0:	1004c03a 	cmpne	r2,r2,zero
 400bfd4:	308cb03a 	or	r6,r6,r2
 400bfd8:	898dc83a 	sub	r6,r17,r6
 400bfdc:	89a3803a 	cmpltu	r17,r17,r6
 400bfe0:	40d1c83a 	sub	r8,r8,r3
 400bfe4:	4451c83a 	sub	r8,r8,r17
 400bfe8:	3023883a 	mov	r17,r6
 400bfec:	4080202c 	andhi	r2,r8,128
 400bff0:	10002326 	beq	r2,zero,400c080 <__adddf3+0x204>
 400bff4:	04c02034 	movhi	r19,128
 400bff8:	9cffffc4 	addi	r19,r19,-1
 400bffc:	44e6703a 	and	r19,r8,r19
 400c000:	98007626 	beq	r19,zero,400c1dc <__adddf3+0x360>
 400c004:	9809883a 	mov	r4,r19
 400c008:	400e4800 	call	400e480 <__clzsi2>
 400c00c:	10fffe04 	addi	r3,r2,-8
 400c010:	010007c4 	movi	r4,31
 400c014:	20c07716 	blt	r4,r3,400c1f4 <__adddf3+0x378>
 400c018:	00800804 	movi	r2,32
 400c01c:	10c5c83a 	sub	r2,r2,r3
 400c020:	8884d83a 	srl	r2,r17,r2
 400c024:	98d0983a 	sll	r8,r19,r3
 400c028:	88e2983a 	sll	r17,r17,r3
 400c02c:	1204b03a 	or	r2,r2,r8
 400c030:	1c007416 	blt	r3,r16,400c204 <__adddf3+0x388>
 400c034:	1c21c83a 	sub	r16,r3,r16
 400c038:	82000044 	addi	r8,r16,1
 400c03c:	00c007c4 	movi	r3,31
 400c040:	1a009116 	blt	r3,r8,400c288 <__adddf3+0x40c>
 400c044:	00c00804 	movi	r3,32
 400c048:	1a07c83a 	sub	r3,r3,r8
 400c04c:	8a08d83a 	srl	r4,r17,r8
 400c050:	88e2983a 	sll	r17,r17,r3
 400c054:	10c6983a 	sll	r3,r2,r3
 400c058:	1210d83a 	srl	r8,r2,r8
 400c05c:	8804c03a 	cmpne	r2,r17,zero
 400c060:	1906b03a 	or	r3,r3,r4
 400c064:	18a2b03a 	or	r17,r3,r2
 400c068:	0021883a 	mov	r16,zero
 400c06c:	003fa206 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c070:	1890b03a 	or	r8,r3,r2
 400c074:	40017d26 	beq	r8,zero,400c66c <__adddf3+0x7f0>
 400c078:	1011883a 	mov	r8,r2
 400c07c:	1823883a 	mov	r17,r3
 400c080:	888001cc 	andi	r2,r17,7
 400c084:	103f9e1e 	bne	r2,zero,400bf00 <__alt_data_end+0xfc00bf00>
 400c088:	4004977a 	slli	r2,r8,29
 400c08c:	8822d0fa 	srli	r17,r17,3
 400c090:	4010d0fa 	srli	r8,r8,3
 400c094:	9007883a 	mov	r3,r18
 400c098:	1444b03a 	or	r2,r2,r17
 400c09c:	0101ffc4 	movi	r4,2047
 400c0a0:	81002426 	beq	r16,r4,400c134 <__adddf3+0x2b8>
 400c0a4:	8120703a 	and	r16,r16,r4
 400c0a8:	01000434 	movhi	r4,16
 400c0ac:	213fffc4 	addi	r4,r4,-1
 400c0b0:	4110703a 	and	r8,r8,r4
 400c0b4:	003fa806 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c0b8:	8089c83a 	sub	r4,r16,r2
 400c0bc:	01005e0e 	bge	zero,r4,400c238 <__adddf3+0x3bc>
 400c0c0:	10002b26 	beq	r2,zero,400c170 <__adddf3+0x2f4>
 400c0c4:	0081ffc4 	movi	r2,2047
 400c0c8:	80bf8b26 	beq	r16,r2,400bef8 <__alt_data_end+0xfc00bef8>
 400c0cc:	4a402034 	orhi	r9,r9,128
 400c0d0:	00800e04 	movi	r2,56
 400c0d4:	1100a40e 	bge	r2,r4,400c368 <__adddf3+0x4ec>
 400c0d8:	498cb03a 	or	r6,r9,r6
 400c0dc:	300ac03a 	cmpne	r5,r6,zero
 400c0e0:	0013883a 	mov	r9,zero
 400c0e4:	2c4b883a 	add	r5,r5,r17
 400c0e8:	2c63803a 	cmpltu	r17,r5,r17
 400c0ec:	4a11883a 	add	r8,r9,r8
 400c0f0:	8a11883a 	add	r8,r17,r8
 400c0f4:	2823883a 	mov	r17,r5
 400c0f8:	4080202c 	andhi	r2,r8,128
 400c0fc:	103fe026 	beq	r2,zero,400c080 <__alt_data_end+0xfc00c080>
 400c100:	84000044 	addi	r16,r16,1
 400c104:	0081ffc4 	movi	r2,2047
 400c108:	8080d226 	beq	r16,r2,400c454 <__adddf3+0x5d8>
 400c10c:	00bfe034 	movhi	r2,65408
 400c110:	10bfffc4 	addi	r2,r2,-1
 400c114:	4090703a 	and	r8,r8,r2
 400c118:	880ad07a 	srli	r5,r17,1
 400c11c:	400897fa 	slli	r4,r8,31
 400c120:	88c0004c 	andi	r3,r17,1
 400c124:	28e2b03a 	or	r17,r5,r3
 400c128:	4010d07a 	srli	r8,r8,1
 400c12c:	2462b03a 	or	r17,r4,r17
 400c130:	003f7106 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c134:	4088b03a 	or	r4,r8,r2
 400c138:	20014526 	beq	r4,zero,400c650 <__adddf3+0x7d4>
 400c13c:	01000434 	movhi	r4,16
 400c140:	42000234 	orhi	r8,r8,8
 400c144:	213fffc4 	addi	r4,r4,-1
 400c148:	4110703a 	and	r8,r8,r4
 400c14c:	003f8206 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c150:	18ffffc4 	addi	r3,r3,-1
 400c154:	1800491e 	bne	r3,zero,400c27c <__adddf3+0x400>
 400c158:	898bc83a 	sub	r5,r17,r6
 400c15c:	8963803a 	cmpltu	r17,r17,r5
 400c160:	4251c83a 	sub	r8,r8,r9
 400c164:	4451c83a 	sub	r8,r8,r17
 400c168:	2823883a 	mov	r17,r5
 400c16c:	003f9f06 	br	400bfec <__alt_data_end+0xfc00bfec>
 400c170:	4984b03a 	or	r2,r9,r6
 400c174:	103f6026 	beq	r2,zero,400bef8 <__alt_data_end+0xfc00bef8>
 400c178:	213fffc4 	addi	r4,r4,-1
 400c17c:	2000931e 	bne	r4,zero,400c3cc <__adddf3+0x550>
 400c180:	898d883a 	add	r6,r17,r6
 400c184:	3463803a 	cmpltu	r17,r6,r17
 400c188:	4251883a 	add	r8,r8,r9
 400c18c:	8a11883a 	add	r8,r17,r8
 400c190:	3023883a 	mov	r17,r6
 400c194:	003fd806 	br	400c0f8 <__alt_data_end+0xfc00c0f8>
 400c198:	1800541e 	bne	r3,zero,400c2ec <__adddf3+0x470>
 400c19c:	80800044 	addi	r2,r16,1
 400c1a0:	1081ffcc 	andi	r2,r2,2047
 400c1a4:	00c00044 	movi	r3,1
 400c1a8:	1880a00e 	bge	r3,r2,400c42c <__adddf3+0x5b0>
 400c1ac:	8989c83a 	sub	r4,r17,r6
 400c1b0:	8905803a 	cmpltu	r2,r17,r4
 400c1b4:	4267c83a 	sub	r19,r8,r9
 400c1b8:	98a7c83a 	sub	r19,r19,r2
 400c1bc:	9880202c 	andhi	r2,r19,128
 400c1c0:	10006326 	beq	r2,zero,400c350 <__adddf3+0x4d4>
 400c1c4:	3463c83a 	sub	r17,r6,r17
 400c1c8:	4a07c83a 	sub	r3,r9,r8
 400c1cc:	344d803a 	cmpltu	r6,r6,r17
 400c1d0:	19a7c83a 	sub	r19,r3,r6
 400c1d4:	3825883a 	mov	r18,r7
 400c1d8:	983f8a1e 	bne	r19,zero,400c004 <__alt_data_end+0xfc00c004>
 400c1dc:	8809883a 	mov	r4,r17
 400c1e0:	400e4800 	call	400e480 <__clzsi2>
 400c1e4:	10800804 	addi	r2,r2,32
 400c1e8:	10fffe04 	addi	r3,r2,-8
 400c1ec:	010007c4 	movi	r4,31
 400c1f0:	20ff890e 	bge	r4,r3,400c018 <__alt_data_end+0xfc00c018>
 400c1f4:	10bff604 	addi	r2,r2,-40
 400c1f8:	8884983a 	sll	r2,r17,r2
 400c1fc:	0023883a 	mov	r17,zero
 400c200:	1c3f8c0e 	bge	r3,r16,400c034 <__alt_data_end+0xfc00c034>
 400c204:	023fe034 	movhi	r8,65408
 400c208:	423fffc4 	addi	r8,r8,-1
 400c20c:	80e1c83a 	sub	r16,r16,r3
 400c210:	1210703a 	and	r8,r2,r8
 400c214:	003f3806 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c218:	9007883a 	mov	r3,r18
 400c21c:	0011883a 	mov	r8,zero
 400c220:	0005883a 	mov	r2,zero
 400c224:	003f4c06 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c228:	498cb03a 	or	r6,r9,r6
 400c22c:	300cc03a 	cmpne	r6,r6,zero
 400c230:	0007883a 	mov	r3,zero
 400c234:	003f6806 	br	400bfd8 <__alt_data_end+0xfc00bfd8>
 400c238:	20009c1e 	bne	r4,zero,400c4ac <__adddf3+0x630>
 400c23c:	80800044 	addi	r2,r16,1
 400c240:	1141ffcc 	andi	r5,r2,2047
 400c244:	01000044 	movi	r4,1
 400c248:	2140670e 	bge	r4,r5,400c3e8 <__adddf3+0x56c>
 400c24c:	0101ffc4 	movi	r4,2047
 400c250:	11007f26 	beq	r2,r4,400c450 <__adddf3+0x5d4>
 400c254:	898d883a 	add	r6,r17,r6
 400c258:	4247883a 	add	r3,r8,r9
 400c25c:	3451803a 	cmpltu	r8,r6,r17
 400c260:	40d1883a 	add	r8,r8,r3
 400c264:	402297fa 	slli	r17,r8,31
 400c268:	300cd07a 	srli	r6,r6,1
 400c26c:	4010d07a 	srli	r8,r8,1
 400c270:	1021883a 	mov	r16,r2
 400c274:	89a2b03a 	or	r17,r17,r6
 400c278:	003f1f06 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c27c:	0081ffc4 	movi	r2,2047
 400c280:	80bf481e 	bne	r16,r2,400bfa4 <__alt_data_end+0xfc00bfa4>
 400c284:	003f1c06 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c288:	843ff844 	addi	r16,r16,-31
 400c28c:	01000804 	movi	r4,32
 400c290:	1406d83a 	srl	r3,r2,r16
 400c294:	41005026 	beq	r8,r4,400c3d8 <__adddf3+0x55c>
 400c298:	01001004 	movi	r4,64
 400c29c:	2211c83a 	sub	r8,r4,r8
 400c2a0:	1204983a 	sll	r2,r2,r8
 400c2a4:	88a2b03a 	or	r17,r17,r2
 400c2a8:	8822c03a 	cmpne	r17,r17,zero
 400c2ac:	1c62b03a 	or	r17,r3,r17
 400c2b0:	0011883a 	mov	r8,zero
 400c2b4:	0021883a 	mov	r16,zero
 400c2b8:	003f7106 	br	400c080 <__alt_data_end+0xfc00c080>
 400c2bc:	193ff804 	addi	r4,r3,-32
 400c2c0:	00800804 	movi	r2,32
 400c2c4:	4908d83a 	srl	r4,r9,r4
 400c2c8:	18804526 	beq	r3,r2,400c3e0 <__adddf3+0x564>
 400c2cc:	00801004 	movi	r2,64
 400c2d0:	10c5c83a 	sub	r2,r2,r3
 400c2d4:	4886983a 	sll	r3,r9,r2
 400c2d8:	198cb03a 	or	r6,r3,r6
 400c2dc:	300cc03a 	cmpne	r6,r6,zero
 400c2e0:	218cb03a 	or	r6,r4,r6
 400c2e4:	0007883a 	mov	r3,zero
 400c2e8:	003f3b06 	br	400bfd8 <__alt_data_end+0xfc00bfd8>
 400c2ec:	80002a26 	beq	r16,zero,400c398 <__adddf3+0x51c>
 400c2f0:	0101ffc4 	movi	r4,2047
 400c2f4:	11006826 	beq	r2,r4,400c498 <__adddf3+0x61c>
 400c2f8:	00c7c83a 	sub	r3,zero,r3
 400c2fc:	42002034 	orhi	r8,r8,128
 400c300:	01000e04 	movi	r4,56
 400c304:	20c07c16 	blt	r4,r3,400c4f8 <__adddf3+0x67c>
 400c308:	010007c4 	movi	r4,31
 400c30c:	20c0da16 	blt	r4,r3,400c678 <__adddf3+0x7fc>
 400c310:	01000804 	movi	r4,32
 400c314:	20c9c83a 	sub	r4,r4,r3
 400c318:	4114983a 	sll	r10,r8,r4
 400c31c:	88cad83a 	srl	r5,r17,r3
 400c320:	8908983a 	sll	r4,r17,r4
 400c324:	40c6d83a 	srl	r3,r8,r3
 400c328:	5162b03a 	or	r17,r10,r5
 400c32c:	2008c03a 	cmpne	r4,r4,zero
 400c330:	8922b03a 	or	r17,r17,r4
 400c334:	3463c83a 	sub	r17,r6,r17
 400c338:	48c7c83a 	sub	r3,r9,r3
 400c33c:	344d803a 	cmpltu	r6,r6,r17
 400c340:	1991c83a 	sub	r8,r3,r6
 400c344:	1021883a 	mov	r16,r2
 400c348:	3825883a 	mov	r18,r7
 400c34c:	003f2706 	br	400bfec <__alt_data_end+0xfc00bfec>
 400c350:	24d0b03a 	or	r8,r4,r19
 400c354:	40001b1e 	bne	r8,zero,400c3c4 <__adddf3+0x548>
 400c358:	0005883a 	mov	r2,zero
 400c35c:	0007883a 	mov	r3,zero
 400c360:	0021883a 	mov	r16,zero
 400c364:	003f4d06 	br	400c09c <__alt_data_end+0xfc00c09c>
 400c368:	008007c4 	movi	r2,31
 400c36c:	11003c16 	blt	r2,r4,400c460 <__adddf3+0x5e4>
 400c370:	00800804 	movi	r2,32
 400c374:	1105c83a 	sub	r2,r2,r4
 400c378:	488e983a 	sll	r7,r9,r2
 400c37c:	310ad83a 	srl	r5,r6,r4
 400c380:	3084983a 	sll	r2,r6,r2
 400c384:	4912d83a 	srl	r9,r9,r4
 400c388:	394ab03a 	or	r5,r7,r5
 400c38c:	1004c03a 	cmpne	r2,r2,zero
 400c390:	288ab03a 	or	r5,r5,r2
 400c394:	003f5306 	br	400c0e4 <__alt_data_end+0xfc00c0e4>
 400c398:	4448b03a 	or	r4,r8,r17
 400c39c:	20003e26 	beq	r4,zero,400c498 <__adddf3+0x61c>
 400c3a0:	00c6303a 	nor	r3,zero,r3
 400c3a4:	18003a1e 	bne	r3,zero,400c490 <__adddf3+0x614>
 400c3a8:	3463c83a 	sub	r17,r6,r17
 400c3ac:	4a07c83a 	sub	r3,r9,r8
 400c3b0:	344d803a 	cmpltu	r6,r6,r17
 400c3b4:	1991c83a 	sub	r8,r3,r6
 400c3b8:	1021883a 	mov	r16,r2
 400c3bc:	3825883a 	mov	r18,r7
 400c3c0:	003f0a06 	br	400bfec <__alt_data_end+0xfc00bfec>
 400c3c4:	2023883a 	mov	r17,r4
 400c3c8:	003f0d06 	br	400c000 <__alt_data_end+0xfc00c000>
 400c3cc:	0081ffc4 	movi	r2,2047
 400c3d0:	80bf3f1e 	bne	r16,r2,400c0d0 <__alt_data_end+0xfc00c0d0>
 400c3d4:	003ec806 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c3d8:	0005883a 	mov	r2,zero
 400c3dc:	003fb106 	br	400c2a4 <__alt_data_end+0xfc00c2a4>
 400c3e0:	0007883a 	mov	r3,zero
 400c3e4:	003fbc06 	br	400c2d8 <__alt_data_end+0xfc00c2d8>
 400c3e8:	4444b03a 	or	r2,r8,r17
 400c3ec:	8000871e 	bne	r16,zero,400c60c <__adddf3+0x790>
 400c3f0:	1000ba26 	beq	r2,zero,400c6dc <__adddf3+0x860>
 400c3f4:	4984b03a 	or	r2,r9,r6
 400c3f8:	103ebf26 	beq	r2,zero,400bef8 <__alt_data_end+0xfc00bef8>
 400c3fc:	8985883a 	add	r2,r17,r6
 400c400:	4247883a 	add	r3,r8,r9
 400c404:	1451803a 	cmpltu	r8,r2,r17
 400c408:	40d1883a 	add	r8,r8,r3
 400c40c:	40c0202c 	andhi	r3,r8,128
 400c410:	1023883a 	mov	r17,r2
 400c414:	183f1a26 	beq	r3,zero,400c080 <__alt_data_end+0xfc00c080>
 400c418:	00bfe034 	movhi	r2,65408
 400c41c:	10bfffc4 	addi	r2,r2,-1
 400c420:	2021883a 	mov	r16,r4
 400c424:	4090703a 	and	r8,r8,r2
 400c428:	003eb306 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c42c:	4444b03a 	or	r2,r8,r17
 400c430:	8000291e 	bne	r16,zero,400c4d8 <__adddf3+0x65c>
 400c434:	10004b1e 	bne	r2,zero,400c564 <__adddf3+0x6e8>
 400c438:	4990b03a 	or	r8,r9,r6
 400c43c:	40008b26 	beq	r8,zero,400c66c <__adddf3+0x7f0>
 400c440:	4811883a 	mov	r8,r9
 400c444:	3023883a 	mov	r17,r6
 400c448:	3825883a 	mov	r18,r7
 400c44c:	003eaa06 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c450:	1021883a 	mov	r16,r2
 400c454:	0011883a 	mov	r8,zero
 400c458:	0005883a 	mov	r2,zero
 400c45c:	003f0f06 	br	400c09c <__alt_data_end+0xfc00c09c>
 400c460:	217ff804 	addi	r5,r4,-32
 400c464:	00800804 	movi	r2,32
 400c468:	494ad83a 	srl	r5,r9,r5
 400c46c:	20807d26 	beq	r4,r2,400c664 <__adddf3+0x7e8>
 400c470:	00801004 	movi	r2,64
 400c474:	1109c83a 	sub	r4,r2,r4
 400c478:	4912983a 	sll	r9,r9,r4
 400c47c:	498cb03a 	or	r6,r9,r6
 400c480:	300cc03a 	cmpne	r6,r6,zero
 400c484:	298ab03a 	or	r5,r5,r6
 400c488:	0013883a 	mov	r9,zero
 400c48c:	003f1506 	br	400c0e4 <__alt_data_end+0xfc00c0e4>
 400c490:	0101ffc4 	movi	r4,2047
 400c494:	113f9a1e 	bne	r2,r4,400c300 <__alt_data_end+0xfc00c300>
 400c498:	4811883a 	mov	r8,r9
 400c49c:	3023883a 	mov	r17,r6
 400c4a0:	1021883a 	mov	r16,r2
 400c4a4:	3825883a 	mov	r18,r7
 400c4a8:	003e9306 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c4ac:	8000161e 	bne	r16,zero,400c508 <__adddf3+0x68c>
 400c4b0:	444ab03a 	or	r5,r8,r17
 400c4b4:	28005126 	beq	r5,zero,400c5fc <__adddf3+0x780>
 400c4b8:	0108303a 	nor	r4,zero,r4
 400c4bc:	20004d1e 	bne	r4,zero,400c5f4 <__adddf3+0x778>
 400c4c0:	89a3883a 	add	r17,r17,r6
 400c4c4:	4253883a 	add	r9,r8,r9
 400c4c8:	898d803a 	cmpltu	r6,r17,r6
 400c4cc:	3251883a 	add	r8,r6,r9
 400c4d0:	1021883a 	mov	r16,r2
 400c4d4:	003f0806 	br	400c0f8 <__alt_data_end+0xfc00c0f8>
 400c4d8:	1000301e 	bne	r2,zero,400c59c <__adddf3+0x720>
 400c4dc:	4984b03a 	or	r2,r9,r6
 400c4e0:	10007126 	beq	r2,zero,400c6a8 <__adddf3+0x82c>
 400c4e4:	4811883a 	mov	r8,r9
 400c4e8:	3023883a 	mov	r17,r6
 400c4ec:	3825883a 	mov	r18,r7
 400c4f0:	0401ffc4 	movi	r16,2047
 400c4f4:	003e8006 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c4f8:	4462b03a 	or	r17,r8,r17
 400c4fc:	8822c03a 	cmpne	r17,r17,zero
 400c500:	0007883a 	mov	r3,zero
 400c504:	003f8b06 	br	400c334 <__alt_data_end+0xfc00c334>
 400c508:	0141ffc4 	movi	r5,2047
 400c50c:	11403b26 	beq	r2,r5,400c5fc <__adddf3+0x780>
 400c510:	0109c83a 	sub	r4,zero,r4
 400c514:	42002034 	orhi	r8,r8,128
 400c518:	01400e04 	movi	r5,56
 400c51c:	29006716 	blt	r5,r4,400c6bc <__adddf3+0x840>
 400c520:	014007c4 	movi	r5,31
 400c524:	29007016 	blt	r5,r4,400c6e8 <__adddf3+0x86c>
 400c528:	01400804 	movi	r5,32
 400c52c:	290bc83a 	sub	r5,r5,r4
 400c530:	4154983a 	sll	r10,r8,r5
 400c534:	890ed83a 	srl	r7,r17,r4
 400c538:	894a983a 	sll	r5,r17,r5
 400c53c:	4108d83a 	srl	r4,r8,r4
 400c540:	51e2b03a 	or	r17,r10,r7
 400c544:	280ac03a 	cmpne	r5,r5,zero
 400c548:	8962b03a 	or	r17,r17,r5
 400c54c:	89a3883a 	add	r17,r17,r6
 400c550:	2253883a 	add	r9,r4,r9
 400c554:	898d803a 	cmpltu	r6,r17,r6
 400c558:	3251883a 	add	r8,r6,r9
 400c55c:	1021883a 	mov	r16,r2
 400c560:	003ee506 	br	400c0f8 <__alt_data_end+0xfc00c0f8>
 400c564:	4984b03a 	or	r2,r9,r6
 400c568:	103e6326 	beq	r2,zero,400bef8 <__alt_data_end+0xfc00bef8>
 400c56c:	8987c83a 	sub	r3,r17,r6
 400c570:	88c9803a 	cmpltu	r4,r17,r3
 400c574:	4245c83a 	sub	r2,r8,r9
 400c578:	1105c83a 	sub	r2,r2,r4
 400c57c:	1100202c 	andhi	r4,r2,128
 400c580:	203ebb26 	beq	r4,zero,400c070 <__alt_data_end+0xfc00c070>
 400c584:	3463c83a 	sub	r17,r6,r17
 400c588:	4a07c83a 	sub	r3,r9,r8
 400c58c:	344d803a 	cmpltu	r6,r6,r17
 400c590:	1991c83a 	sub	r8,r3,r6
 400c594:	3825883a 	mov	r18,r7
 400c598:	003e5706 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c59c:	4984b03a 	or	r2,r9,r6
 400c5a0:	10002e26 	beq	r2,zero,400c65c <__adddf3+0x7e0>
 400c5a4:	4004d0fa 	srli	r2,r8,3
 400c5a8:	8822d0fa 	srli	r17,r17,3
 400c5ac:	4010977a 	slli	r8,r8,29
 400c5b0:	10c0022c 	andhi	r3,r2,8
 400c5b4:	4462b03a 	or	r17,r8,r17
 400c5b8:	18000826 	beq	r3,zero,400c5dc <__adddf3+0x760>
 400c5bc:	4808d0fa 	srli	r4,r9,3
 400c5c0:	20c0022c 	andhi	r3,r4,8
 400c5c4:	1800051e 	bne	r3,zero,400c5dc <__adddf3+0x760>
 400c5c8:	300cd0fa 	srli	r6,r6,3
 400c5cc:	4806977a 	slli	r3,r9,29
 400c5d0:	2005883a 	mov	r2,r4
 400c5d4:	3825883a 	mov	r18,r7
 400c5d8:	19a2b03a 	or	r17,r3,r6
 400c5dc:	8810d77a 	srli	r8,r17,29
 400c5e0:	100490fa 	slli	r2,r2,3
 400c5e4:	882290fa 	slli	r17,r17,3
 400c5e8:	0401ffc4 	movi	r16,2047
 400c5ec:	4090b03a 	or	r8,r8,r2
 400c5f0:	003e4106 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c5f4:	0141ffc4 	movi	r5,2047
 400c5f8:	117fc71e 	bne	r2,r5,400c518 <__alt_data_end+0xfc00c518>
 400c5fc:	4811883a 	mov	r8,r9
 400c600:	3023883a 	mov	r17,r6
 400c604:	1021883a 	mov	r16,r2
 400c608:	003e3b06 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c60c:	10002f26 	beq	r2,zero,400c6cc <__adddf3+0x850>
 400c610:	4984b03a 	or	r2,r9,r6
 400c614:	10001126 	beq	r2,zero,400c65c <__adddf3+0x7e0>
 400c618:	4004d0fa 	srli	r2,r8,3
 400c61c:	8822d0fa 	srli	r17,r17,3
 400c620:	4010977a 	slli	r8,r8,29
 400c624:	10c0022c 	andhi	r3,r2,8
 400c628:	4462b03a 	or	r17,r8,r17
 400c62c:	183feb26 	beq	r3,zero,400c5dc <__alt_data_end+0xfc00c5dc>
 400c630:	4808d0fa 	srli	r4,r9,3
 400c634:	20c0022c 	andhi	r3,r4,8
 400c638:	183fe81e 	bne	r3,zero,400c5dc <__alt_data_end+0xfc00c5dc>
 400c63c:	300cd0fa 	srli	r6,r6,3
 400c640:	4806977a 	slli	r3,r9,29
 400c644:	2005883a 	mov	r2,r4
 400c648:	19a2b03a 	or	r17,r3,r6
 400c64c:	003fe306 	br	400c5dc <__alt_data_end+0xfc00c5dc>
 400c650:	0011883a 	mov	r8,zero
 400c654:	0005883a 	mov	r2,zero
 400c658:	003e3f06 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c65c:	0401ffc4 	movi	r16,2047
 400c660:	003e2506 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c664:	0013883a 	mov	r9,zero
 400c668:	003f8406 	br	400c47c <__alt_data_end+0xfc00c47c>
 400c66c:	0005883a 	mov	r2,zero
 400c670:	0007883a 	mov	r3,zero
 400c674:	003e8906 	br	400c09c <__alt_data_end+0xfc00c09c>
 400c678:	197ff804 	addi	r5,r3,-32
 400c67c:	01000804 	movi	r4,32
 400c680:	414ad83a 	srl	r5,r8,r5
 400c684:	19002426 	beq	r3,r4,400c718 <__adddf3+0x89c>
 400c688:	01001004 	movi	r4,64
 400c68c:	20c7c83a 	sub	r3,r4,r3
 400c690:	40c6983a 	sll	r3,r8,r3
 400c694:	1c46b03a 	or	r3,r3,r17
 400c698:	1806c03a 	cmpne	r3,r3,zero
 400c69c:	28e2b03a 	or	r17,r5,r3
 400c6a0:	0007883a 	mov	r3,zero
 400c6a4:	003f2306 	br	400c334 <__alt_data_end+0xfc00c334>
 400c6a8:	0007883a 	mov	r3,zero
 400c6ac:	5811883a 	mov	r8,r11
 400c6b0:	00bfffc4 	movi	r2,-1
 400c6b4:	0401ffc4 	movi	r16,2047
 400c6b8:	003e7806 	br	400c09c <__alt_data_end+0xfc00c09c>
 400c6bc:	4462b03a 	or	r17,r8,r17
 400c6c0:	8822c03a 	cmpne	r17,r17,zero
 400c6c4:	0009883a 	mov	r4,zero
 400c6c8:	003fa006 	br	400c54c <__alt_data_end+0xfc00c54c>
 400c6cc:	4811883a 	mov	r8,r9
 400c6d0:	3023883a 	mov	r17,r6
 400c6d4:	0401ffc4 	movi	r16,2047
 400c6d8:	003e0706 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c6dc:	4811883a 	mov	r8,r9
 400c6e0:	3023883a 	mov	r17,r6
 400c6e4:	003e0406 	br	400bef8 <__alt_data_end+0xfc00bef8>
 400c6e8:	21fff804 	addi	r7,r4,-32
 400c6ec:	01400804 	movi	r5,32
 400c6f0:	41ced83a 	srl	r7,r8,r7
 400c6f4:	21400a26 	beq	r4,r5,400c720 <__adddf3+0x8a4>
 400c6f8:	01401004 	movi	r5,64
 400c6fc:	2909c83a 	sub	r4,r5,r4
 400c700:	4108983a 	sll	r4,r8,r4
 400c704:	2448b03a 	or	r4,r4,r17
 400c708:	2008c03a 	cmpne	r4,r4,zero
 400c70c:	3922b03a 	or	r17,r7,r4
 400c710:	0009883a 	mov	r4,zero
 400c714:	003f8d06 	br	400c54c <__alt_data_end+0xfc00c54c>
 400c718:	0007883a 	mov	r3,zero
 400c71c:	003fdd06 	br	400c694 <__alt_data_end+0xfc00c694>
 400c720:	0009883a 	mov	r4,zero
 400c724:	003ff706 	br	400c704 <__alt_data_end+0xfc00c704>

0400c728 <__divdf3>:
 400c728:	defff204 	addi	sp,sp,-56
 400c72c:	dd400915 	stw	r21,36(sp)
 400c730:	282ad53a 	srli	r21,r5,20
 400c734:	dd000815 	stw	r20,32(sp)
 400c738:	2828d7fa 	srli	r20,r5,31
 400c73c:	dc000415 	stw	r16,16(sp)
 400c740:	04000434 	movhi	r16,16
 400c744:	df000c15 	stw	fp,48(sp)
 400c748:	843fffc4 	addi	r16,r16,-1
 400c74c:	dfc00d15 	stw	ra,52(sp)
 400c750:	ddc00b15 	stw	r23,44(sp)
 400c754:	dd800a15 	stw	r22,40(sp)
 400c758:	dcc00715 	stw	r19,28(sp)
 400c75c:	dc800615 	stw	r18,24(sp)
 400c760:	dc400515 	stw	r17,20(sp)
 400c764:	ad41ffcc 	andi	r21,r21,2047
 400c768:	2c20703a 	and	r16,r5,r16
 400c76c:	a7003fcc 	andi	fp,r20,255
 400c770:	a8006126 	beq	r21,zero,400c8f8 <__divdf3+0x1d0>
 400c774:	0081ffc4 	movi	r2,2047
 400c778:	2025883a 	mov	r18,r4
 400c77c:	a8803726 	beq	r21,r2,400c85c <__divdf3+0x134>
 400c780:	80800434 	orhi	r2,r16,16
 400c784:	100490fa 	slli	r2,r2,3
 400c788:	2020d77a 	srli	r16,r4,29
 400c78c:	202490fa 	slli	r18,r4,3
 400c790:	ad7f0044 	addi	r21,r21,-1023
 400c794:	80a0b03a 	or	r16,r16,r2
 400c798:	0027883a 	mov	r19,zero
 400c79c:	0013883a 	mov	r9,zero
 400c7a0:	3804d53a 	srli	r2,r7,20
 400c7a4:	382cd7fa 	srli	r22,r7,31
 400c7a8:	04400434 	movhi	r17,16
 400c7ac:	8c7fffc4 	addi	r17,r17,-1
 400c7b0:	1081ffcc 	andi	r2,r2,2047
 400c7b4:	3011883a 	mov	r8,r6
 400c7b8:	3c62703a 	and	r17,r7,r17
 400c7bc:	b5c03fcc 	andi	r23,r22,255
 400c7c0:	10006c26 	beq	r2,zero,400c974 <__divdf3+0x24c>
 400c7c4:	00c1ffc4 	movi	r3,2047
 400c7c8:	10c06426 	beq	r2,r3,400c95c <__divdf3+0x234>
 400c7cc:	88c00434 	orhi	r3,r17,16
 400c7d0:	180690fa 	slli	r3,r3,3
 400c7d4:	3022d77a 	srli	r17,r6,29
 400c7d8:	301090fa 	slli	r8,r6,3
 400c7dc:	10bf0044 	addi	r2,r2,-1023
 400c7e0:	88e2b03a 	or	r17,r17,r3
 400c7e4:	000f883a 	mov	r7,zero
 400c7e8:	a58cf03a 	xor	r6,r20,r22
 400c7ec:	3cc8b03a 	or	r4,r7,r19
 400c7f0:	a8abc83a 	sub	r21,r21,r2
 400c7f4:	008003c4 	movi	r2,15
 400c7f8:	3007883a 	mov	r3,r6
 400c7fc:	34c03fcc 	andi	r19,r6,255
 400c800:	11009036 	bltu	r2,r4,400ca44 <__divdf3+0x31c>
 400c804:	200890ba 	slli	r4,r4,2
 400c808:	00810074 	movhi	r2,1025
 400c80c:	10b20704 	addi	r2,r2,-14308
 400c810:	2089883a 	add	r4,r4,r2
 400c814:	20800017 	ldw	r2,0(r4)
 400c818:	1000683a 	jmp	r2
 400c81c:	0400ca44 	movi	r16,809
 400c820:	0400c894 	movui	r16,802
 400c824:	0400ca34 	movhi	r16,808
 400c828:	0400c888 	cmpgei	r16,zero,802
 400c82c:	0400ca34 	movhi	r16,808
 400c830:	0400ca08 	cmpgei	r16,zero,808
 400c834:	0400ca34 	movhi	r16,808
 400c838:	0400c888 	cmpgei	r16,zero,802
 400c83c:	0400c894 	movui	r16,802
 400c840:	0400c894 	movui	r16,802
 400c844:	0400ca08 	cmpgei	r16,zero,808
 400c848:	0400c888 	cmpgei	r16,zero,802
 400c84c:	0400c878 	rdprs	r16,zero,801
 400c850:	0400c878 	rdprs	r16,zero,801
 400c854:	0400c878 	rdprs	r16,zero,801
 400c858:	0400cd28 	cmpgeui	r16,zero,820
 400c85c:	2404b03a 	or	r2,r4,r16
 400c860:	1000661e 	bne	r2,zero,400c9fc <__divdf3+0x2d4>
 400c864:	04c00204 	movi	r19,8
 400c868:	0021883a 	mov	r16,zero
 400c86c:	0025883a 	mov	r18,zero
 400c870:	02400084 	movi	r9,2
 400c874:	003fca06 	br	400c7a0 <__alt_data_end+0xfc00c7a0>
 400c878:	8023883a 	mov	r17,r16
 400c87c:	9011883a 	mov	r8,r18
 400c880:	e02f883a 	mov	r23,fp
 400c884:	480f883a 	mov	r7,r9
 400c888:	00800084 	movi	r2,2
 400c88c:	3881311e 	bne	r7,r2,400cd54 <__divdf3+0x62c>
 400c890:	b827883a 	mov	r19,r23
 400c894:	98c0004c 	andi	r3,r19,1
 400c898:	0081ffc4 	movi	r2,2047
 400c89c:	000b883a 	mov	r5,zero
 400c8a0:	0025883a 	mov	r18,zero
 400c8a4:	1004953a 	slli	r2,r2,20
 400c8a8:	18c03fcc 	andi	r3,r3,255
 400c8ac:	04400434 	movhi	r17,16
 400c8b0:	8c7fffc4 	addi	r17,r17,-1
 400c8b4:	180697fa 	slli	r3,r3,31
 400c8b8:	2c4a703a 	and	r5,r5,r17
 400c8bc:	288ab03a 	or	r5,r5,r2
 400c8c0:	28c6b03a 	or	r3,r5,r3
 400c8c4:	9005883a 	mov	r2,r18
 400c8c8:	dfc00d17 	ldw	ra,52(sp)
 400c8cc:	df000c17 	ldw	fp,48(sp)
 400c8d0:	ddc00b17 	ldw	r23,44(sp)
 400c8d4:	dd800a17 	ldw	r22,40(sp)
 400c8d8:	dd400917 	ldw	r21,36(sp)
 400c8dc:	dd000817 	ldw	r20,32(sp)
 400c8e0:	dcc00717 	ldw	r19,28(sp)
 400c8e4:	dc800617 	ldw	r18,24(sp)
 400c8e8:	dc400517 	ldw	r17,20(sp)
 400c8ec:	dc000417 	ldw	r16,16(sp)
 400c8f0:	dec00e04 	addi	sp,sp,56
 400c8f4:	f800283a 	ret
 400c8f8:	2404b03a 	or	r2,r4,r16
 400c8fc:	2027883a 	mov	r19,r4
 400c900:	10003926 	beq	r2,zero,400c9e8 <__divdf3+0x2c0>
 400c904:	80012e26 	beq	r16,zero,400cdc0 <__divdf3+0x698>
 400c908:	8009883a 	mov	r4,r16
 400c90c:	d9800315 	stw	r6,12(sp)
 400c910:	d9c00215 	stw	r7,8(sp)
 400c914:	400e4800 	call	400e480 <__clzsi2>
 400c918:	d9800317 	ldw	r6,12(sp)
 400c91c:	d9c00217 	ldw	r7,8(sp)
 400c920:	113ffd44 	addi	r4,r2,-11
 400c924:	00c00704 	movi	r3,28
 400c928:	19012116 	blt	r3,r4,400cdb0 <__divdf3+0x688>
 400c92c:	00c00744 	movi	r3,29
 400c930:	147ffe04 	addi	r17,r2,-8
 400c934:	1907c83a 	sub	r3,r3,r4
 400c938:	8460983a 	sll	r16,r16,r17
 400c93c:	98c6d83a 	srl	r3,r19,r3
 400c940:	9c64983a 	sll	r18,r19,r17
 400c944:	1c20b03a 	or	r16,r3,r16
 400c948:	1080fcc4 	addi	r2,r2,1011
 400c94c:	00abc83a 	sub	r21,zero,r2
 400c950:	0027883a 	mov	r19,zero
 400c954:	0013883a 	mov	r9,zero
 400c958:	003f9106 	br	400c7a0 <__alt_data_end+0xfc00c7a0>
 400c95c:	3446b03a 	or	r3,r6,r17
 400c960:	18001f1e 	bne	r3,zero,400c9e0 <__divdf3+0x2b8>
 400c964:	0023883a 	mov	r17,zero
 400c968:	0011883a 	mov	r8,zero
 400c96c:	01c00084 	movi	r7,2
 400c970:	003f9d06 	br	400c7e8 <__alt_data_end+0xfc00c7e8>
 400c974:	3446b03a 	or	r3,r6,r17
 400c978:	18001526 	beq	r3,zero,400c9d0 <__divdf3+0x2a8>
 400c97c:	88011b26 	beq	r17,zero,400cdec <__divdf3+0x6c4>
 400c980:	8809883a 	mov	r4,r17
 400c984:	d9800315 	stw	r6,12(sp)
 400c988:	da400115 	stw	r9,4(sp)
 400c98c:	400e4800 	call	400e480 <__clzsi2>
 400c990:	d9800317 	ldw	r6,12(sp)
 400c994:	da400117 	ldw	r9,4(sp)
 400c998:	113ffd44 	addi	r4,r2,-11
 400c99c:	00c00704 	movi	r3,28
 400c9a0:	19010e16 	blt	r3,r4,400cddc <__divdf3+0x6b4>
 400c9a4:	00c00744 	movi	r3,29
 400c9a8:	123ffe04 	addi	r8,r2,-8
 400c9ac:	1907c83a 	sub	r3,r3,r4
 400c9b0:	8a22983a 	sll	r17,r17,r8
 400c9b4:	30c6d83a 	srl	r3,r6,r3
 400c9b8:	3210983a 	sll	r8,r6,r8
 400c9bc:	1c62b03a 	or	r17,r3,r17
 400c9c0:	1080fcc4 	addi	r2,r2,1011
 400c9c4:	0085c83a 	sub	r2,zero,r2
 400c9c8:	000f883a 	mov	r7,zero
 400c9cc:	003f8606 	br	400c7e8 <__alt_data_end+0xfc00c7e8>
 400c9d0:	0023883a 	mov	r17,zero
 400c9d4:	0011883a 	mov	r8,zero
 400c9d8:	01c00044 	movi	r7,1
 400c9dc:	003f8206 	br	400c7e8 <__alt_data_end+0xfc00c7e8>
 400c9e0:	01c000c4 	movi	r7,3
 400c9e4:	003f8006 	br	400c7e8 <__alt_data_end+0xfc00c7e8>
 400c9e8:	04c00104 	movi	r19,4
 400c9ec:	0021883a 	mov	r16,zero
 400c9f0:	0025883a 	mov	r18,zero
 400c9f4:	02400044 	movi	r9,1
 400c9f8:	003f6906 	br	400c7a0 <__alt_data_end+0xfc00c7a0>
 400c9fc:	04c00304 	movi	r19,12
 400ca00:	024000c4 	movi	r9,3
 400ca04:	003f6606 	br	400c7a0 <__alt_data_end+0xfc00c7a0>
 400ca08:	01400434 	movhi	r5,16
 400ca0c:	0007883a 	mov	r3,zero
 400ca10:	297fffc4 	addi	r5,r5,-1
 400ca14:	04bfffc4 	movi	r18,-1
 400ca18:	0081ffc4 	movi	r2,2047
 400ca1c:	003fa106 	br	400c8a4 <__alt_data_end+0xfc00c8a4>
 400ca20:	00c00044 	movi	r3,1
 400ca24:	1887c83a 	sub	r3,r3,r2
 400ca28:	01000e04 	movi	r4,56
 400ca2c:	20c1210e 	bge	r4,r3,400ceb4 <__divdf3+0x78c>
 400ca30:	98c0004c 	andi	r3,r19,1
 400ca34:	0005883a 	mov	r2,zero
 400ca38:	000b883a 	mov	r5,zero
 400ca3c:	0025883a 	mov	r18,zero
 400ca40:	003f9806 	br	400c8a4 <__alt_data_end+0xfc00c8a4>
 400ca44:	8c00fd36 	bltu	r17,r16,400ce3c <__divdf3+0x714>
 400ca48:	8440fb26 	beq	r16,r17,400ce38 <__divdf3+0x710>
 400ca4c:	8007883a 	mov	r3,r16
 400ca50:	ad7fffc4 	addi	r21,r21,-1
 400ca54:	0021883a 	mov	r16,zero
 400ca58:	4004d63a 	srli	r2,r8,24
 400ca5c:	8822923a 	slli	r17,r17,8
 400ca60:	1809883a 	mov	r4,r3
 400ca64:	402c923a 	slli	r22,r8,8
 400ca68:	88b8b03a 	or	fp,r17,r2
 400ca6c:	e028d43a 	srli	r20,fp,16
 400ca70:	d8c00015 	stw	r3,0(sp)
 400ca74:	e5ffffcc 	andi	r23,fp,65535
 400ca78:	a00b883a 	mov	r5,r20
 400ca7c:	4001cbc0 	call	4001cbc <__udivsi3>
 400ca80:	d8c00017 	ldw	r3,0(sp)
 400ca84:	a00b883a 	mov	r5,r20
 400ca88:	d8800315 	stw	r2,12(sp)
 400ca8c:	1809883a 	mov	r4,r3
 400ca90:	4001d200 	call	4001d20 <__umodsi3>
 400ca94:	d9800317 	ldw	r6,12(sp)
 400ca98:	1006943a 	slli	r3,r2,16
 400ca9c:	9004d43a 	srli	r2,r18,16
 400caa0:	b9a3383a 	mul	r17,r23,r6
 400caa4:	10c4b03a 	or	r2,r2,r3
 400caa8:	1440062e 	bgeu	r2,r17,400cac4 <__divdf3+0x39c>
 400caac:	1705883a 	add	r2,r2,fp
 400cab0:	30ffffc4 	addi	r3,r6,-1
 400cab4:	1700ee36 	bltu	r2,fp,400ce70 <__divdf3+0x748>
 400cab8:	1440ed2e 	bgeu	r2,r17,400ce70 <__divdf3+0x748>
 400cabc:	31bfff84 	addi	r6,r6,-2
 400cac0:	1705883a 	add	r2,r2,fp
 400cac4:	1463c83a 	sub	r17,r2,r17
 400cac8:	a00b883a 	mov	r5,r20
 400cacc:	8809883a 	mov	r4,r17
 400cad0:	d9800315 	stw	r6,12(sp)
 400cad4:	4001cbc0 	call	4001cbc <__udivsi3>
 400cad8:	a00b883a 	mov	r5,r20
 400cadc:	8809883a 	mov	r4,r17
 400cae0:	d8800215 	stw	r2,8(sp)
 400cae4:	4001d200 	call	4001d20 <__umodsi3>
 400cae8:	d9c00217 	ldw	r7,8(sp)
 400caec:	1004943a 	slli	r2,r2,16
 400caf0:	94bfffcc 	andi	r18,r18,65535
 400caf4:	b9d1383a 	mul	r8,r23,r7
 400caf8:	90a4b03a 	or	r18,r18,r2
 400cafc:	d9800317 	ldw	r6,12(sp)
 400cb00:	9200062e 	bgeu	r18,r8,400cb1c <__divdf3+0x3f4>
 400cb04:	9725883a 	add	r18,r18,fp
 400cb08:	38bfffc4 	addi	r2,r7,-1
 400cb0c:	9700d636 	bltu	r18,fp,400ce68 <__divdf3+0x740>
 400cb10:	9200d52e 	bgeu	r18,r8,400ce68 <__divdf3+0x740>
 400cb14:	39ffff84 	addi	r7,r7,-2
 400cb18:	9725883a 	add	r18,r18,fp
 400cb1c:	3004943a 	slli	r2,r6,16
 400cb20:	b012d43a 	srli	r9,r22,16
 400cb24:	b1bfffcc 	andi	r6,r22,65535
 400cb28:	11e2b03a 	or	r17,r2,r7
 400cb2c:	8806d43a 	srli	r3,r17,16
 400cb30:	893fffcc 	andi	r4,r17,65535
 400cb34:	218b383a 	mul	r5,r4,r6
 400cb38:	30c5383a 	mul	r2,r6,r3
 400cb3c:	2249383a 	mul	r4,r4,r9
 400cb40:	280ed43a 	srli	r7,r5,16
 400cb44:	9225c83a 	sub	r18,r18,r8
 400cb48:	2089883a 	add	r4,r4,r2
 400cb4c:	3909883a 	add	r4,r7,r4
 400cb50:	1a47383a 	mul	r3,r3,r9
 400cb54:	2080022e 	bgeu	r4,r2,400cb60 <__divdf3+0x438>
 400cb58:	00800074 	movhi	r2,1
 400cb5c:	1887883a 	add	r3,r3,r2
 400cb60:	2004d43a 	srli	r2,r4,16
 400cb64:	2008943a 	slli	r4,r4,16
 400cb68:	297fffcc 	andi	r5,r5,65535
 400cb6c:	10c7883a 	add	r3,r2,r3
 400cb70:	2149883a 	add	r4,r4,r5
 400cb74:	90c0a536 	bltu	r18,r3,400ce0c <__divdf3+0x6e4>
 400cb78:	90c0bf26 	beq	r18,r3,400ce78 <__divdf3+0x750>
 400cb7c:	90c7c83a 	sub	r3,r18,r3
 400cb80:	810fc83a 	sub	r7,r16,r4
 400cb84:	81e5803a 	cmpltu	r18,r16,r7
 400cb88:	1ca5c83a 	sub	r18,r3,r18
 400cb8c:	e480c126 	beq	fp,r18,400ce94 <__divdf3+0x76c>
 400cb90:	a00b883a 	mov	r5,r20
 400cb94:	9009883a 	mov	r4,r18
 400cb98:	d9800315 	stw	r6,12(sp)
 400cb9c:	d9c00215 	stw	r7,8(sp)
 400cba0:	da400115 	stw	r9,4(sp)
 400cba4:	4001cbc0 	call	4001cbc <__udivsi3>
 400cba8:	a00b883a 	mov	r5,r20
 400cbac:	9009883a 	mov	r4,r18
 400cbb0:	d8800015 	stw	r2,0(sp)
 400cbb4:	4001d200 	call	4001d20 <__umodsi3>
 400cbb8:	d9c00217 	ldw	r7,8(sp)
 400cbbc:	da000017 	ldw	r8,0(sp)
 400cbc0:	1006943a 	slli	r3,r2,16
 400cbc4:	3804d43a 	srli	r2,r7,16
 400cbc8:	ba21383a 	mul	r16,r23,r8
 400cbcc:	d9800317 	ldw	r6,12(sp)
 400cbd0:	10c4b03a 	or	r2,r2,r3
 400cbd4:	da400117 	ldw	r9,4(sp)
 400cbd8:	1400062e 	bgeu	r2,r16,400cbf4 <__divdf3+0x4cc>
 400cbdc:	1705883a 	add	r2,r2,fp
 400cbe0:	40ffffc4 	addi	r3,r8,-1
 400cbe4:	1700ad36 	bltu	r2,fp,400ce9c <__divdf3+0x774>
 400cbe8:	1400ac2e 	bgeu	r2,r16,400ce9c <__divdf3+0x774>
 400cbec:	423fff84 	addi	r8,r8,-2
 400cbf0:	1705883a 	add	r2,r2,fp
 400cbf4:	1421c83a 	sub	r16,r2,r16
 400cbf8:	a00b883a 	mov	r5,r20
 400cbfc:	8009883a 	mov	r4,r16
 400cc00:	d9800315 	stw	r6,12(sp)
 400cc04:	d9c00215 	stw	r7,8(sp)
 400cc08:	da000015 	stw	r8,0(sp)
 400cc0c:	da400115 	stw	r9,4(sp)
 400cc10:	4001cbc0 	call	4001cbc <__udivsi3>
 400cc14:	8009883a 	mov	r4,r16
 400cc18:	a00b883a 	mov	r5,r20
 400cc1c:	1025883a 	mov	r18,r2
 400cc20:	4001d200 	call	4001d20 <__umodsi3>
 400cc24:	d9c00217 	ldw	r7,8(sp)
 400cc28:	1004943a 	slli	r2,r2,16
 400cc2c:	bcaf383a 	mul	r23,r23,r18
 400cc30:	393fffcc 	andi	r4,r7,65535
 400cc34:	2088b03a 	or	r4,r4,r2
 400cc38:	d9800317 	ldw	r6,12(sp)
 400cc3c:	da000017 	ldw	r8,0(sp)
 400cc40:	da400117 	ldw	r9,4(sp)
 400cc44:	25c0062e 	bgeu	r4,r23,400cc60 <__divdf3+0x538>
 400cc48:	2709883a 	add	r4,r4,fp
 400cc4c:	90bfffc4 	addi	r2,r18,-1
 400cc50:	27009436 	bltu	r4,fp,400cea4 <__divdf3+0x77c>
 400cc54:	25c0932e 	bgeu	r4,r23,400cea4 <__divdf3+0x77c>
 400cc58:	94bfff84 	addi	r18,r18,-2
 400cc5c:	2709883a 	add	r4,r4,fp
 400cc60:	4004943a 	slli	r2,r8,16
 400cc64:	25efc83a 	sub	r23,r4,r23
 400cc68:	1490b03a 	or	r8,r2,r18
 400cc6c:	4008d43a 	srli	r4,r8,16
 400cc70:	40ffffcc 	andi	r3,r8,65535
 400cc74:	30c5383a 	mul	r2,r6,r3
 400cc78:	1a47383a 	mul	r3,r3,r9
 400cc7c:	310d383a 	mul	r6,r6,r4
 400cc80:	100ad43a 	srli	r5,r2,16
 400cc84:	4913383a 	mul	r9,r9,r4
 400cc88:	1987883a 	add	r3,r3,r6
 400cc8c:	28c7883a 	add	r3,r5,r3
 400cc90:	1980022e 	bgeu	r3,r6,400cc9c <__divdf3+0x574>
 400cc94:	01000074 	movhi	r4,1
 400cc98:	4913883a 	add	r9,r9,r4
 400cc9c:	1808d43a 	srli	r4,r3,16
 400cca0:	1806943a 	slli	r3,r3,16
 400cca4:	10bfffcc 	andi	r2,r2,65535
 400cca8:	2253883a 	add	r9,r4,r9
 400ccac:	1887883a 	add	r3,r3,r2
 400ccb0:	ba403836 	bltu	r23,r9,400cd94 <__divdf3+0x66c>
 400ccb4:	ba403626 	beq	r23,r9,400cd90 <__divdf3+0x668>
 400ccb8:	42000054 	ori	r8,r8,1
 400ccbc:	a880ffc4 	addi	r2,r21,1023
 400ccc0:	00bf570e 	bge	zero,r2,400ca20 <__alt_data_end+0xfc00ca20>
 400ccc4:	40c001cc 	andi	r3,r8,7
 400ccc8:	18000726 	beq	r3,zero,400cce8 <__divdf3+0x5c0>
 400cccc:	40c003cc 	andi	r3,r8,15
 400ccd0:	01000104 	movi	r4,4
 400ccd4:	19000426 	beq	r3,r4,400cce8 <__divdf3+0x5c0>
 400ccd8:	4107883a 	add	r3,r8,r4
 400ccdc:	1a11803a 	cmpltu	r8,r3,r8
 400cce0:	8a23883a 	add	r17,r17,r8
 400cce4:	1811883a 	mov	r8,r3
 400cce8:	88c0402c 	andhi	r3,r17,256
 400ccec:	18000426 	beq	r3,zero,400cd00 <__divdf3+0x5d8>
 400ccf0:	00ffc034 	movhi	r3,65280
 400ccf4:	18ffffc4 	addi	r3,r3,-1
 400ccf8:	a8810004 	addi	r2,r21,1024
 400ccfc:	88e2703a 	and	r17,r17,r3
 400cd00:	00c1ff84 	movi	r3,2046
 400cd04:	18bee316 	blt	r3,r2,400c894 <__alt_data_end+0xfc00c894>
 400cd08:	8824977a 	slli	r18,r17,29
 400cd0c:	4010d0fa 	srli	r8,r8,3
 400cd10:	8822927a 	slli	r17,r17,9
 400cd14:	1081ffcc 	andi	r2,r2,2047
 400cd18:	9224b03a 	or	r18,r18,r8
 400cd1c:	880ad33a 	srli	r5,r17,12
 400cd20:	98c0004c 	andi	r3,r19,1
 400cd24:	003edf06 	br	400c8a4 <__alt_data_end+0xfc00c8a4>
 400cd28:	8080022c 	andhi	r2,r16,8
 400cd2c:	10001226 	beq	r2,zero,400cd78 <__divdf3+0x650>
 400cd30:	8880022c 	andhi	r2,r17,8
 400cd34:	1000101e 	bne	r2,zero,400cd78 <__divdf3+0x650>
 400cd38:	00800434 	movhi	r2,16
 400cd3c:	89400234 	orhi	r5,r17,8
 400cd40:	10bfffc4 	addi	r2,r2,-1
 400cd44:	b007883a 	mov	r3,r22
 400cd48:	288a703a 	and	r5,r5,r2
 400cd4c:	4025883a 	mov	r18,r8
 400cd50:	003f3106 	br	400ca18 <__alt_data_end+0xfc00ca18>
 400cd54:	008000c4 	movi	r2,3
 400cd58:	3880a626 	beq	r7,r2,400cff4 <__divdf3+0x8cc>
 400cd5c:	00800044 	movi	r2,1
 400cd60:	3880521e 	bne	r7,r2,400ceac <__divdf3+0x784>
 400cd64:	b807883a 	mov	r3,r23
 400cd68:	0005883a 	mov	r2,zero
 400cd6c:	000b883a 	mov	r5,zero
 400cd70:	0025883a 	mov	r18,zero
 400cd74:	003ecb06 	br	400c8a4 <__alt_data_end+0xfc00c8a4>
 400cd78:	00800434 	movhi	r2,16
 400cd7c:	81400234 	orhi	r5,r16,8
 400cd80:	10bfffc4 	addi	r2,r2,-1
 400cd84:	a007883a 	mov	r3,r20
 400cd88:	288a703a 	and	r5,r5,r2
 400cd8c:	003f2206 	br	400ca18 <__alt_data_end+0xfc00ca18>
 400cd90:	183fca26 	beq	r3,zero,400ccbc <__alt_data_end+0xfc00ccbc>
 400cd94:	e5ef883a 	add	r23,fp,r23
 400cd98:	40bfffc4 	addi	r2,r8,-1
 400cd9c:	bf00392e 	bgeu	r23,fp,400ce84 <__divdf3+0x75c>
 400cda0:	1011883a 	mov	r8,r2
 400cda4:	ba7fc41e 	bne	r23,r9,400ccb8 <__alt_data_end+0xfc00ccb8>
 400cda8:	b0ffc31e 	bne	r22,r3,400ccb8 <__alt_data_end+0xfc00ccb8>
 400cdac:	003fc306 	br	400ccbc <__alt_data_end+0xfc00ccbc>
 400cdb0:	143ff604 	addi	r16,r2,-40
 400cdb4:	9c20983a 	sll	r16,r19,r16
 400cdb8:	0025883a 	mov	r18,zero
 400cdbc:	003ee206 	br	400c948 <__alt_data_end+0xfc00c948>
 400cdc0:	d9800315 	stw	r6,12(sp)
 400cdc4:	d9c00215 	stw	r7,8(sp)
 400cdc8:	400e4800 	call	400e480 <__clzsi2>
 400cdcc:	10800804 	addi	r2,r2,32
 400cdd0:	d9c00217 	ldw	r7,8(sp)
 400cdd4:	d9800317 	ldw	r6,12(sp)
 400cdd8:	003ed106 	br	400c920 <__alt_data_end+0xfc00c920>
 400cddc:	147ff604 	addi	r17,r2,-40
 400cde0:	3462983a 	sll	r17,r6,r17
 400cde4:	0011883a 	mov	r8,zero
 400cde8:	003ef506 	br	400c9c0 <__alt_data_end+0xfc00c9c0>
 400cdec:	3009883a 	mov	r4,r6
 400cdf0:	d9800315 	stw	r6,12(sp)
 400cdf4:	da400115 	stw	r9,4(sp)
 400cdf8:	400e4800 	call	400e480 <__clzsi2>
 400cdfc:	10800804 	addi	r2,r2,32
 400ce00:	da400117 	ldw	r9,4(sp)
 400ce04:	d9800317 	ldw	r6,12(sp)
 400ce08:	003ee306 	br	400c998 <__alt_data_end+0xfc00c998>
 400ce0c:	85a1883a 	add	r16,r16,r22
 400ce10:	8585803a 	cmpltu	r2,r16,r22
 400ce14:	1705883a 	add	r2,r2,fp
 400ce18:	14a5883a 	add	r18,r2,r18
 400ce1c:	88bfffc4 	addi	r2,r17,-1
 400ce20:	e4800c2e 	bgeu	fp,r18,400ce54 <__divdf3+0x72c>
 400ce24:	90c03e36 	bltu	r18,r3,400cf20 <__divdf3+0x7f8>
 400ce28:	1c806926 	beq	r3,r18,400cfd0 <__divdf3+0x8a8>
 400ce2c:	90c7c83a 	sub	r3,r18,r3
 400ce30:	1023883a 	mov	r17,r2
 400ce34:	003f5206 	br	400cb80 <__alt_data_end+0xfc00cb80>
 400ce38:	923f0436 	bltu	r18,r8,400ca4c <__alt_data_end+0xfc00ca4c>
 400ce3c:	800897fa 	slli	r4,r16,31
 400ce40:	9004d07a 	srli	r2,r18,1
 400ce44:	8006d07a 	srli	r3,r16,1
 400ce48:	902097fa 	slli	r16,r18,31
 400ce4c:	20a4b03a 	or	r18,r4,r2
 400ce50:	003f0106 	br	400ca58 <__alt_data_end+0xfc00ca58>
 400ce54:	e4bff51e 	bne	fp,r18,400ce2c <__alt_data_end+0xfc00ce2c>
 400ce58:	85bff22e 	bgeu	r16,r22,400ce24 <__alt_data_end+0xfc00ce24>
 400ce5c:	e0c7c83a 	sub	r3,fp,r3
 400ce60:	1023883a 	mov	r17,r2
 400ce64:	003f4606 	br	400cb80 <__alt_data_end+0xfc00cb80>
 400ce68:	100f883a 	mov	r7,r2
 400ce6c:	003f2b06 	br	400cb1c <__alt_data_end+0xfc00cb1c>
 400ce70:	180d883a 	mov	r6,r3
 400ce74:	003f1306 	br	400cac4 <__alt_data_end+0xfc00cac4>
 400ce78:	813fe436 	bltu	r16,r4,400ce0c <__alt_data_end+0xfc00ce0c>
 400ce7c:	0007883a 	mov	r3,zero
 400ce80:	003f3f06 	br	400cb80 <__alt_data_end+0xfc00cb80>
 400ce84:	ba402c36 	bltu	r23,r9,400cf38 <__divdf3+0x810>
 400ce88:	4dc05426 	beq	r9,r23,400cfdc <__divdf3+0x8b4>
 400ce8c:	1011883a 	mov	r8,r2
 400ce90:	003f8906 	br	400ccb8 <__alt_data_end+0xfc00ccb8>
 400ce94:	023fffc4 	movi	r8,-1
 400ce98:	003f8806 	br	400ccbc <__alt_data_end+0xfc00ccbc>
 400ce9c:	1811883a 	mov	r8,r3
 400cea0:	003f5406 	br	400cbf4 <__alt_data_end+0xfc00cbf4>
 400cea4:	1025883a 	mov	r18,r2
 400cea8:	003f6d06 	br	400cc60 <__alt_data_end+0xfc00cc60>
 400ceac:	b827883a 	mov	r19,r23
 400ceb0:	003f8206 	br	400ccbc <__alt_data_end+0xfc00ccbc>
 400ceb4:	010007c4 	movi	r4,31
 400ceb8:	20c02616 	blt	r4,r3,400cf54 <__divdf3+0x82c>
 400cebc:	00800804 	movi	r2,32
 400cec0:	10c5c83a 	sub	r2,r2,r3
 400cec4:	888a983a 	sll	r5,r17,r2
 400cec8:	40c8d83a 	srl	r4,r8,r3
 400cecc:	4084983a 	sll	r2,r8,r2
 400ced0:	88e2d83a 	srl	r17,r17,r3
 400ced4:	2906b03a 	or	r3,r5,r4
 400ced8:	1004c03a 	cmpne	r2,r2,zero
 400cedc:	1886b03a 	or	r3,r3,r2
 400cee0:	188001cc 	andi	r2,r3,7
 400cee4:	10000726 	beq	r2,zero,400cf04 <__divdf3+0x7dc>
 400cee8:	188003cc 	andi	r2,r3,15
 400ceec:	01000104 	movi	r4,4
 400cef0:	11000426 	beq	r2,r4,400cf04 <__divdf3+0x7dc>
 400cef4:	1805883a 	mov	r2,r3
 400cef8:	10c00104 	addi	r3,r2,4
 400cefc:	1885803a 	cmpltu	r2,r3,r2
 400cf00:	88a3883a 	add	r17,r17,r2
 400cf04:	8880202c 	andhi	r2,r17,128
 400cf08:	10002726 	beq	r2,zero,400cfa8 <__divdf3+0x880>
 400cf0c:	98c0004c 	andi	r3,r19,1
 400cf10:	00800044 	movi	r2,1
 400cf14:	000b883a 	mov	r5,zero
 400cf18:	0025883a 	mov	r18,zero
 400cf1c:	003e6106 	br	400c8a4 <__alt_data_end+0xfc00c8a4>
 400cf20:	85a1883a 	add	r16,r16,r22
 400cf24:	8585803a 	cmpltu	r2,r16,r22
 400cf28:	1705883a 	add	r2,r2,fp
 400cf2c:	14a5883a 	add	r18,r2,r18
 400cf30:	8c7fff84 	addi	r17,r17,-2
 400cf34:	003f1106 	br	400cb7c <__alt_data_end+0xfc00cb7c>
 400cf38:	b589883a 	add	r4,r22,r22
 400cf3c:	25ad803a 	cmpltu	r22,r4,r22
 400cf40:	b739883a 	add	fp,r22,fp
 400cf44:	40bfff84 	addi	r2,r8,-2
 400cf48:	bf2f883a 	add	r23,r23,fp
 400cf4c:	202d883a 	mov	r22,r4
 400cf50:	003f9306 	br	400cda0 <__alt_data_end+0xfc00cda0>
 400cf54:	013ff844 	movi	r4,-31
 400cf58:	2085c83a 	sub	r2,r4,r2
 400cf5c:	8888d83a 	srl	r4,r17,r2
 400cf60:	00800804 	movi	r2,32
 400cf64:	18802126 	beq	r3,r2,400cfec <__divdf3+0x8c4>
 400cf68:	00801004 	movi	r2,64
 400cf6c:	10c5c83a 	sub	r2,r2,r3
 400cf70:	8884983a 	sll	r2,r17,r2
 400cf74:	1204b03a 	or	r2,r2,r8
 400cf78:	1004c03a 	cmpne	r2,r2,zero
 400cf7c:	2084b03a 	or	r2,r4,r2
 400cf80:	144001cc 	andi	r17,r2,7
 400cf84:	88000d1e 	bne	r17,zero,400cfbc <__divdf3+0x894>
 400cf88:	000b883a 	mov	r5,zero
 400cf8c:	1024d0fa 	srli	r18,r2,3
 400cf90:	98c0004c 	andi	r3,r19,1
 400cf94:	0005883a 	mov	r2,zero
 400cf98:	9464b03a 	or	r18,r18,r17
 400cf9c:	003e4106 	br	400c8a4 <__alt_data_end+0xfc00c8a4>
 400cfa0:	1007883a 	mov	r3,r2
 400cfa4:	0023883a 	mov	r17,zero
 400cfa8:	880a927a 	slli	r5,r17,9
 400cfac:	1805883a 	mov	r2,r3
 400cfb0:	8822977a 	slli	r17,r17,29
 400cfb4:	280ad33a 	srli	r5,r5,12
 400cfb8:	003ff406 	br	400cf8c <__alt_data_end+0xfc00cf8c>
 400cfbc:	10c003cc 	andi	r3,r2,15
 400cfc0:	01000104 	movi	r4,4
 400cfc4:	193ff626 	beq	r3,r4,400cfa0 <__alt_data_end+0xfc00cfa0>
 400cfc8:	0023883a 	mov	r17,zero
 400cfcc:	003fca06 	br	400cef8 <__alt_data_end+0xfc00cef8>
 400cfd0:	813fd336 	bltu	r16,r4,400cf20 <__alt_data_end+0xfc00cf20>
 400cfd4:	1023883a 	mov	r17,r2
 400cfd8:	003fa806 	br	400ce7c <__alt_data_end+0xfc00ce7c>
 400cfdc:	b0ffd636 	bltu	r22,r3,400cf38 <__alt_data_end+0xfc00cf38>
 400cfe0:	1011883a 	mov	r8,r2
 400cfe4:	b0ff341e 	bne	r22,r3,400ccb8 <__alt_data_end+0xfc00ccb8>
 400cfe8:	003f3406 	br	400ccbc <__alt_data_end+0xfc00ccbc>
 400cfec:	0005883a 	mov	r2,zero
 400cff0:	003fe006 	br	400cf74 <__alt_data_end+0xfc00cf74>
 400cff4:	00800434 	movhi	r2,16
 400cff8:	89400234 	orhi	r5,r17,8
 400cffc:	10bfffc4 	addi	r2,r2,-1
 400d000:	b807883a 	mov	r3,r23
 400d004:	288a703a 	and	r5,r5,r2
 400d008:	4025883a 	mov	r18,r8
 400d00c:	003e8206 	br	400ca18 <__alt_data_end+0xfc00ca18>

0400d010 <__eqdf2>:
 400d010:	2804d53a 	srli	r2,r5,20
 400d014:	3806d53a 	srli	r3,r7,20
 400d018:	02000434 	movhi	r8,16
 400d01c:	423fffc4 	addi	r8,r8,-1
 400d020:	1081ffcc 	andi	r2,r2,2047
 400d024:	0281ffc4 	movi	r10,2047
 400d028:	2a12703a 	and	r9,r5,r8
 400d02c:	18c1ffcc 	andi	r3,r3,2047
 400d030:	3a10703a 	and	r8,r7,r8
 400d034:	280ad7fa 	srli	r5,r5,31
 400d038:	380ed7fa 	srli	r7,r7,31
 400d03c:	12801026 	beq	r2,r10,400d080 <__eqdf2+0x70>
 400d040:	0281ffc4 	movi	r10,2047
 400d044:	1a800a26 	beq	r3,r10,400d070 <__eqdf2+0x60>
 400d048:	10c00226 	beq	r2,r3,400d054 <__eqdf2+0x44>
 400d04c:	00800044 	movi	r2,1
 400d050:	f800283a 	ret
 400d054:	4a3ffd1e 	bne	r9,r8,400d04c <__alt_data_end+0xfc00d04c>
 400d058:	21bffc1e 	bne	r4,r6,400d04c <__alt_data_end+0xfc00d04c>
 400d05c:	29c00c26 	beq	r5,r7,400d090 <__eqdf2+0x80>
 400d060:	103ffa1e 	bne	r2,zero,400d04c <__alt_data_end+0xfc00d04c>
 400d064:	2244b03a 	or	r2,r4,r9
 400d068:	1004c03a 	cmpne	r2,r2,zero
 400d06c:	f800283a 	ret
 400d070:	3214b03a 	or	r10,r6,r8
 400d074:	503ff426 	beq	r10,zero,400d048 <__alt_data_end+0xfc00d048>
 400d078:	00800044 	movi	r2,1
 400d07c:	f800283a 	ret
 400d080:	2254b03a 	or	r10,r4,r9
 400d084:	503fee26 	beq	r10,zero,400d040 <__alt_data_end+0xfc00d040>
 400d088:	00800044 	movi	r2,1
 400d08c:	f800283a 	ret
 400d090:	0005883a 	mov	r2,zero
 400d094:	f800283a 	ret

0400d098 <__gedf2>:
 400d098:	2804d53a 	srli	r2,r5,20
 400d09c:	3806d53a 	srli	r3,r7,20
 400d0a0:	02000434 	movhi	r8,16
 400d0a4:	423fffc4 	addi	r8,r8,-1
 400d0a8:	1081ffcc 	andi	r2,r2,2047
 400d0ac:	0241ffc4 	movi	r9,2047
 400d0b0:	2a14703a 	and	r10,r5,r8
 400d0b4:	18c1ffcc 	andi	r3,r3,2047
 400d0b8:	3a10703a 	and	r8,r7,r8
 400d0bc:	280ad7fa 	srli	r5,r5,31
 400d0c0:	380ed7fa 	srli	r7,r7,31
 400d0c4:	12401d26 	beq	r2,r9,400d13c <__gedf2+0xa4>
 400d0c8:	0241ffc4 	movi	r9,2047
 400d0cc:	1a401226 	beq	r3,r9,400d118 <__gedf2+0x80>
 400d0d0:	1000081e 	bne	r2,zero,400d0f4 <__gedf2+0x5c>
 400d0d4:	2296b03a 	or	r11,r4,r10
 400d0d8:	5813003a 	cmpeq	r9,r11,zero
 400d0dc:	1800091e 	bne	r3,zero,400d104 <__gedf2+0x6c>
 400d0e0:	3218b03a 	or	r12,r6,r8
 400d0e4:	6000071e 	bne	r12,zero,400d104 <__gedf2+0x6c>
 400d0e8:	0005883a 	mov	r2,zero
 400d0ec:	5800101e 	bne	r11,zero,400d130 <__gedf2+0x98>
 400d0f0:	f800283a 	ret
 400d0f4:	18000c1e 	bne	r3,zero,400d128 <__gedf2+0x90>
 400d0f8:	3212b03a 	or	r9,r6,r8
 400d0fc:	48000c26 	beq	r9,zero,400d130 <__gedf2+0x98>
 400d100:	0013883a 	mov	r9,zero
 400d104:	39c03fcc 	andi	r7,r7,255
 400d108:	48000826 	beq	r9,zero,400d12c <__gedf2+0x94>
 400d10c:	38000926 	beq	r7,zero,400d134 <__gedf2+0x9c>
 400d110:	00800044 	movi	r2,1
 400d114:	f800283a 	ret
 400d118:	3212b03a 	or	r9,r6,r8
 400d11c:	483fec26 	beq	r9,zero,400d0d0 <__alt_data_end+0xfc00d0d0>
 400d120:	00bfff84 	movi	r2,-2
 400d124:	f800283a 	ret
 400d128:	39c03fcc 	andi	r7,r7,255
 400d12c:	29c00626 	beq	r5,r7,400d148 <__gedf2+0xb0>
 400d130:	283ff726 	beq	r5,zero,400d110 <__alt_data_end+0xfc00d110>
 400d134:	00bfffc4 	movi	r2,-1
 400d138:	f800283a 	ret
 400d13c:	2292b03a 	or	r9,r4,r10
 400d140:	483fe126 	beq	r9,zero,400d0c8 <__alt_data_end+0xfc00d0c8>
 400d144:	003ff606 	br	400d120 <__alt_data_end+0xfc00d120>
 400d148:	18bff916 	blt	r3,r2,400d130 <__alt_data_end+0xfc00d130>
 400d14c:	10c00316 	blt	r2,r3,400d15c <__gedf2+0xc4>
 400d150:	42bff736 	bltu	r8,r10,400d130 <__alt_data_end+0xfc00d130>
 400d154:	52000326 	beq	r10,r8,400d164 <__gedf2+0xcc>
 400d158:	5200042e 	bgeu	r10,r8,400d16c <__gedf2+0xd4>
 400d15c:	283fec1e 	bne	r5,zero,400d110 <__alt_data_end+0xfc00d110>
 400d160:	003ff406 	br	400d134 <__alt_data_end+0xfc00d134>
 400d164:	313ff236 	bltu	r6,r4,400d130 <__alt_data_end+0xfc00d130>
 400d168:	21bffc36 	bltu	r4,r6,400d15c <__alt_data_end+0xfc00d15c>
 400d16c:	0005883a 	mov	r2,zero
 400d170:	f800283a 	ret

0400d174 <__ledf2>:
 400d174:	2804d53a 	srli	r2,r5,20
 400d178:	3810d53a 	srli	r8,r7,20
 400d17c:	00c00434 	movhi	r3,16
 400d180:	18ffffc4 	addi	r3,r3,-1
 400d184:	1081ffcc 	andi	r2,r2,2047
 400d188:	0241ffc4 	movi	r9,2047
 400d18c:	28d4703a 	and	r10,r5,r3
 400d190:	4201ffcc 	andi	r8,r8,2047
 400d194:	38c6703a 	and	r3,r7,r3
 400d198:	280ad7fa 	srli	r5,r5,31
 400d19c:	380ed7fa 	srli	r7,r7,31
 400d1a0:	12401f26 	beq	r2,r9,400d220 <__ledf2+0xac>
 400d1a4:	0241ffc4 	movi	r9,2047
 400d1a8:	42401426 	beq	r8,r9,400d1fc <__ledf2+0x88>
 400d1ac:	1000091e 	bne	r2,zero,400d1d4 <__ledf2+0x60>
 400d1b0:	2296b03a 	or	r11,r4,r10
 400d1b4:	5813003a 	cmpeq	r9,r11,zero
 400d1b8:	29403fcc 	andi	r5,r5,255
 400d1bc:	40000a1e 	bne	r8,zero,400d1e8 <__ledf2+0x74>
 400d1c0:	30d8b03a 	or	r12,r6,r3
 400d1c4:	6000081e 	bne	r12,zero,400d1e8 <__ledf2+0x74>
 400d1c8:	0005883a 	mov	r2,zero
 400d1cc:	5800111e 	bne	r11,zero,400d214 <__ledf2+0xa0>
 400d1d0:	f800283a 	ret
 400d1d4:	29403fcc 	andi	r5,r5,255
 400d1d8:	40000c1e 	bne	r8,zero,400d20c <__ledf2+0x98>
 400d1dc:	30d2b03a 	or	r9,r6,r3
 400d1e0:	48000c26 	beq	r9,zero,400d214 <__ledf2+0xa0>
 400d1e4:	0013883a 	mov	r9,zero
 400d1e8:	39c03fcc 	andi	r7,r7,255
 400d1ec:	48000826 	beq	r9,zero,400d210 <__ledf2+0x9c>
 400d1f0:	38001126 	beq	r7,zero,400d238 <__ledf2+0xc4>
 400d1f4:	00800044 	movi	r2,1
 400d1f8:	f800283a 	ret
 400d1fc:	30d2b03a 	or	r9,r6,r3
 400d200:	483fea26 	beq	r9,zero,400d1ac <__alt_data_end+0xfc00d1ac>
 400d204:	00800084 	movi	r2,2
 400d208:	f800283a 	ret
 400d20c:	39c03fcc 	andi	r7,r7,255
 400d210:	39400726 	beq	r7,r5,400d230 <__ledf2+0xbc>
 400d214:	2800081e 	bne	r5,zero,400d238 <__ledf2+0xc4>
 400d218:	00800044 	movi	r2,1
 400d21c:	f800283a 	ret
 400d220:	2292b03a 	or	r9,r4,r10
 400d224:	483fdf26 	beq	r9,zero,400d1a4 <__alt_data_end+0xfc00d1a4>
 400d228:	00800084 	movi	r2,2
 400d22c:	f800283a 	ret
 400d230:	4080030e 	bge	r8,r2,400d240 <__ledf2+0xcc>
 400d234:	383fef26 	beq	r7,zero,400d1f4 <__alt_data_end+0xfc00d1f4>
 400d238:	00bfffc4 	movi	r2,-1
 400d23c:	f800283a 	ret
 400d240:	123feb16 	blt	r2,r8,400d1f0 <__alt_data_end+0xfc00d1f0>
 400d244:	1abff336 	bltu	r3,r10,400d214 <__alt_data_end+0xfc00d214>
 400d248:	50c00326 	beq	r10,r3,400d258 <__ledf2+0xe4>
 400d24c:	50c0042e 	bgeu	r10,r3,400d260 <__ledf2+0xec>
 400d250:	283fe81e 	bne	r5,zero,400d1f4 <__alt_data_end+0xfc00d1f4>
 400d254:	003ff806 	br	400d238 <__alt_data_end+0xfc00d238>
 400d258:	313fee36 	bltu	r6,r4,400d214 <__alt_data_end+0xfc00d214>
 400d25c:	21bffc36 	bltu	r4,r6,400d250 <__alt_data_end+0xfc00d250>
 400d260:	0005883a 	mov	r2,zero
 400d264:	f800283a 	ret

0400d268 <__muldf3>:
 400d268:	defff304 	addi	sp,sp,-52
 400d26c:	2804d53a 	srli	r2,r5,20
 400d270:	dd800915 	stw	r22,36(sp)
 400d274:	282cd7fa 	srli	r22,r5,31
 400d278:	dc000315 	stw	r16,12(sp)
 400d27c:	04000434 	movhi	r16,16
 400d280:	dd400815 	stw	r21,32(sp)
 400d284:	dc800515 	stw	r18,20(sp)
 400d288:	843fffc4 	addi	r16,r16,-1
 400d28c:	dfc00c15 	stw	ra,48(sp)
 400d290:	df000b15 	stw	fp,44(sp)
 400d294:	ddc00a15 	stw	r23,40(sp)
 400d298:	dd000715 	stw	r20,28(sp)
 400d29c:	dcc00615 	stw	r19,24(sp)
 400d2a0:	dc400415 	stw	r17,16(sp)
 400d2a4:	1481ffcc 	andi	r18,r2,2047
 400d2a8:	2c20703a 	and	r16,r5,r16
 400d2ac:	b02b883a 	mov	r21,r22
 400d2b0:	b2403fcc 	andi	r9,r22,255
 400d2b4:	90006026 	beq	r18,zero,400d438 <__muldf3+0x1d0>
 400d2b8:	0081ffc4 	movi	r2,2047
 400d2bc:	2029883a 	mov	r20,r4
 400d2c0:	90803626 	beq	r18,r2,400d39c <__muldf3+0x134>
 400d2c4:	80800434 	orhi	r2,r16,16
 400d2c8:	100490fa 	slli	r2,r2,3
 400d2cc:	2020d77a 	srli	r16,r4,29
 400d2d0:	202890fa 	slli	r20,r4,3
 400d2d4:	94bf0044 	addi	r18,r18,-1023
 400d2d8:	80a0b03a 	or	r16,r16,r2
 400d2dc:	0027883a 	mov	r19,zero
 400d2e0:	0039883a 	mov	fp,zero
 400d2e4:	3804d53a 	srli	r2,r7,20
 400d2e8:	382ed7fa 	srli	r23,r7,31
 400d2ec:	04400434 	movhi	r17,16
 400d2f0:	8c7fffc4 	addi	r17,r17,-1
 400d2f4:	1081ffcc 	andi	r2,r2,2047
 400d2f8:	3011883a 	mov	r8,r6
 400d2fc:	3c62703a 	and	r17,r7,r17
 400d300:	ba803fcc 	andi	r10,r23,255
 400d304:	10006d26 	beq	r2,zero,400d4bc <__muldf3+0x254>
 400d308:	00c1ffc4 	movi	r3,2047
 400d30c:	10c06526 	beq	r2,r3,400d4a4 <__muldf3+0x23c>
 400d310:	88c00434 	orhi	r3,r17,16
 400d314:	180690fa 	slli	r3,r3,3
 400d318:	3022d77a 	srli	r17,r6,29
 400d31c:	301090fa 	slli	r8,r6,3
 400d320:	10bf0044 	addi	r2,r2,-1023
 400d324:	88e2b03a 	or	r17,r17,r3
 400d328:	000b883a 	mov	r5,zero
 400d32c:	9085883a 	add	r2,r18,r2
 400d330:	2cc8b03a 	or	r4,r5,r19
 400d334:	00c003c4 	movi	r3,15
 400d338:	bdacf03a 	xor	r22,r23,r22
 400d33c:	12c00044 	addi	r11,r2,1
 400d340:	19009936 	bltu	r3,r4,400d5a8 <__muldf3+0x340>
 400d344:	200890ba 	slli	r4,r4,2
 400d348:	00c10074 	movhi	r3,1025
 400d34c:	18f4d704 	addi	r3,r3,-11428
 400d350:	20c9883a 	add	r4,r4,r3
 400d354:	20c00017 	ldw	r3,0(r4)
 400d358:	1800683a 	jmp	r3
 400d35c:	0400d5a8 	cmpgeui	r16,zero,854
 400d360:	0400d3bc 	xorhi	r16,zero,846
 400d364:	0400d3bc 	xorhi	r16,zero,846
 400d368:	0400d3b8 	rdprs	r16,zero,846
 400d36c:	0400d584 	movi	r16,854
 400d370:	0400d584 	movi	r16,854
 400d374:	0400d56c 	andhi	r16,zero,853
 400d378:	0400d3b8 	rdprs	r16,zero,846
 400d37c:	0400d584 	movi	r16,854
 400d380:	0400d56c 	andhi	r16,zero,853
 400d384:	0400d584 	movi	r16,854
 400d388:	0400d3b8 	rdprs	r16,zero,846
 400d38c:	0400d594 	movui	r16,854
 400d390:	0400d594 	movui	r16,854
 400d394:	0400d594 	movui	r16,854
 400d398:	0400d7b0 	cmpltui	r16,zero,862
 400d39c:	2404b03a 	or	r2,r4,r16
 400d3a0:	10006f1e 	bne	r2,zero,400d560 <__muldf3+0x2f8>
 400d3a4:	04c00204 	movi	r19,8
 400d3a8:	0021883a 	mov	r16,zero
 400d3ac:	0029883a 	mov	r20,zero
 400d3b0:	07000084 	movi	fp,2
 400d3b4:	003fcb06 	br	400d2e4 <__alt_data_end+0xfc00d2e4>
 400d3b8:	502d883a 	mov	r22,r10
 400d3bc:	00800084 	movi	r2,2
 400d3c0:	28805726 	beq	r5,r2,400d520 <__muldf3+0x2b8>
 400d3c4:	008000c4 	movi	r2,3
 400d3c8:	28816626 	beq	r5,r2,400d964 <__muldf3+0x6fc>
 400d3cc:	00800044 	movi	r2,1
 400d3d0:	2881411e 	bne	r5,r2,400d8d8 <__muldf3+0x670>
 400d3d4:	b02b883a 	mov	r21,r22
 400d3d8:	0005883a 	mov	r2,zero
 400d3dc:	000b883a 	mov	r5,zero
 400d3e0:	0029883a 	mov	r20,zero
 400d3e4:	1004953a 	slli	r2,r2,20
 400d3e8:	a8c03fcc 	andi	r3,r21,255
 400d3ec:	04400434 	movhi	r17,16
 400d3f0:	8c7fffc4 	addi	r17,r17,-1
 400d3f4:	180697fa 	slli	r3,r3,31
 400d3f8:	2c4a703a 	and	r5,r5,r17
 400d3fc:	288ab03a 	or	r5,r5,r2
 400d400:	28c6b03a 	or	r3,r5,r3
 400d404:	a005883a 	mov	r2,r20
 400d408:	dfc00c17 	ldw	ra,48(sp)
 400d40c:	df000b17 	ldw	fp,44(sp)
 400d410:	ddc00a17 	ldw	r23,40(sp)
 400d414:	dd800917 	ldw	r22,36(sp)
 400d418:	dd400817 	ldw	r21,32(sp)
 400d41c:	dd000717 	ldw	r20,28(sp)
 400d420:	dcc00617 	ldw	r19,24(sp)
 400d424:	dc800517 	ldw	r18,20(sp)
 400d428:	dc400417 	ldw	r17,16(sp)
 400d42c:	dc000317 	ldw	r16,12(sp)
 400d430:	dec00d04 	addi	sp,sp,52
 400d434:	f800283a 	ret
 400d438:	2404b03a 	or	r2,r4,r16
 400d43c:	2027883a 	mov	r19,r4
 400d440:	10004226 	beq	r2,zero,400d54c <__muldf3+0x2e4>
 400d444:	8000fc26 	beq	r16,zero,400d838 <__muldf3+0x5d0>
 400d448:	8009883a 	mov	r4,r16
 400d44c:	d9800215 	stw	r6,8(sp)
 400d450:	d9c00015 	stw	r7,0(sp)
 400d454:	da400115 	stw	r9,4(sp)
 400d458:	400e4800 	call	400e480 <__clzsi2>
 400d45c:	d9800217 	ldw	r6,8(sp)
 400d460:	d9c00017 	ldw	r7,0(sp)
 400d464:	da400117 	ldw	r9,4(sp)
 400d468:	113ffd44 	addi	r4,r2,-11
 400d46c:	00c00704 	movi	r3,28
 400d470:	1900ed16 	blt	r3,r4,400d828 <__muldf3+0x5c0>
 400d474:	00c00744 	movi	r3,29
 400d478:	147ffe04 	addi	r17,r2,-8
 400d47c:	1907c83a 	sub	r3,r3,r4
 400d480:	8460983a 	sll	r16,r16,r17
 400d484:	98c6d83a 	srl	r3,r19,r3
 400d488:	9c68983a 	sll	r20,r19,r17
 400d48c:	1c20b03a 	or	r16,r3,r16
 400d490:	1080fcc4 	addi	r2,r2,1011
 400d494:	00a5c83a 	sub	r18,zero,r2
 400d498:	0027883a 	mov	r19,zero
 400d49c:	0039883a 	mov	fp,zero
 400d4a0:	003f9006 	br	400d2e4 <__alt_data_end+0xfc00d2e4>
 400d4a4:	3446b03a 	or	r3,r6,r17
 400d4a8:	1800261e 	bne	r3,zero,400d544 <__muldf3+0x2dc>
 400d4ac:	0023883a 	mov	r17,zero
 400d4b0:	0011883a 	mov	r8,zero
 400d4b4:	01400084 	movi	r5,2
 400d4b8:	003f9c06 	br	400d32c <__alt_data_end+0xfc00d32c>
 400d4bc:	3446b03a 	or	r3,r6,r17
 400d4c0:	18001c26 	beq	r3,zero,400d534 <__muldf3+0x2cc>
 400d4c4:	8800ce26 	beq	r17,zero,400d800 <__muldf3+0x598>
 400d4c8:	8809883a 	mov	r4,r17
 400d4cc:	d9800215 	stw	r6,8(sp)
 400d4d0:	da400115 	stw	r9,4(sp)
 400d4d4:	da800015 	stw	r10,0(sp)
 400d4d8:	400e4800 	call	400e480 <__clzsi2>
 400d4dc:	d9800217 	ldw	r6,8(sp)
 400d4e0:	da400117 	ldw	r9,4(sp)
 400d4e4:	da800017 	ldw	r10,0(sp)
 400d4e8:	113ffd44 	addi	r4,r2,-11
 400d4ec:	00c00704 	movi	r3,28
 400d4f0:	1900bf16 	blt	r3,r4,400d7f0 <__muldf3+0x588>
 400d4f4:	00c00744 	movi	r3,29
 400d4f8:	123ffe04 	addi	r8,r2,-8
 400d4fc:	1907c83a 	sub	r3,r3,r4
 400d500:	8a22983a 	sll	r17,r17,r8
 400d504:	30c6d83a 	srl	r3,r6,r3
 400d508:	3210983a 	sll	r8,r6,r8
 400d50c:	1c62b03a 	or	r17,r3,r17
 400d510:	1080fcc4 	addi	r2,r2,1011
 400d514:	0085c83a 	sub	r2,zero,r2
 400d518:	000b883a 	mov	r5,zero
 400d51c:	003f8306 	br	400d32c <__alt_data_end+0xfc00d32c>
 400d520:	b02b883a 	mov	r21,r22
 400d524:	0081ffc4 	movi	r2,2047
 400d528:	000b883a 	mov	r5,zero
 400d52c:	0029883a 	mov	r20,zero
 400d530:	003fac06 	br	400d3e4 <__alt_data_end+0xfc00d3e4>
 400d534:	0023883a 	mov	r17,zero
 400d538:	0011883a 	mov	r8,zero
 400d53c:	01400044 	movi	r5,1
 400d540:	003f7a06 	br	400d32c <__alt_data_end+0xfc00d32c>
 400d544:	014000c4 	movi	r5,3
 400d548:	003f7806 	br	400d32c <__alt_data_end+0xfc00d32c>
 400d54c:	04c00104 	movi	r19,4
 400d550:	0021883a 	mov	r16,zero
 400d554:	0029883a 	mov	r20,zero
 400d558:	07000044 	movi	fp,1
 400d55c:	003f6106 	br	400d2e4 <__alt_data_end+0xfc00d2e4>
 400d560:	04c00304 	movi	r19,12
 400d564:	070000c4 	movi	fp,3
 400d568:	003f5e06 	br	400d2e4 <__alt_data_end+0xfc00d2e4>
 400d56c:	01400434 	movhi	r5,16
 400d570:	002b883a 	mov	r21,zero
 400d574:	297fffc4 	addi	r5,r5,-1
 400d578:	053fffc4 	movi	r20,-1
 400d57c:	0081ffc4 	movi	r2,2047
 400d580:	003f9806 	br	400d3e4 <__alt_data_end+0xfc00d3e4>
 400d584:	8023883a 	mov	r17,r16
 400d588:	a011883a 	mov	r8,r20
 400d58c:	e00b883a 	mov	r5,fp
 400d590:	003f8a06 	br	400d3bc <__alt_data_end+0xfc00d3bc>
 400d594:	8023883a 	mov	r17,r16
 400d598:	a011883a 	mov	r8,r20
 400d59c:	482d883a 	mov	r22,r9
 400d5a0:	e00b883a 	mov	r5,fp
 400d5a4:	003f8506 	br	400d3bc <__alt_data_end+0xfc00d3bc>
 400d5a8:	a00ad43a 	srli	r5,r20,16
 400d5ac:	401ad43a 	srli	r13,r8,16
 400d5b0:	a53fffcc 	andi	r20,r20,65535
 400d5b4:	423fffcc 	andi	r8,r8,65535
 400d5b8:	4519383a 	mul	r12,r8,r20
 400d5bc:	4147383a 	mul	r3,r8,r5
 400d5c0:	6d09383a 	mul	r4,r13,r20
 400d5c4:	600cd43a 	srli	r6,r12,16
 400d5c8:	2b5d383a 	mul	r14,r5,r13
 400d5cc:	20c9883a 	add	r4,r4,r3
 400d5d0:	310d883a 	add	r6,r6,r4
 400d5d4:	30c0022e 	bgeu	r6,r3,400d5e0 <__muldf3+0x378>
 400d5d8:	00c00074 	movhi	r3,1
 400d5dc:	70dd883a 	add	r14,r14,r3
 400d5e0:	8826d43a 	srli	r19,r17,16
 400d5e4:	8bffffcc 	andi	r15,r17,65535
 400d5e8:	7d23383a 	mul	r17,r15,r20
 400d5ec:	7949383a 	mul	r4,r15,r5
 400d5f0:	9d29383a 	mul	r20,r19,r20
 400d5f4:	8814d43a 	srli	r10,r17,16
 400d5f8:	3012943a 	slli	r9,r6,16
 400d5fc:	a129883a 	add	r20,r20,r4
 400d600:	633fffcc 	andi	r12,r12,65535
 400d604:	5515883a 	add	r10,r10,r20
 400d608:	3006d43a 	srli	r3,r6,16
 400d60c:	4b13883a 	add	r9,r9,r12
 400d610:	2ccb383a 	mul	r5,r5,r19
 400d614:	5100022e 	bgeu	r10,r4,400d620 <__muldf3+0x3b8>
 400d618:	01000074 	movhi	r4,1
 400d61c:	290b883a 	add	r5,r5,r4
 400d620:	802ad43a 	srli	r21,r16,16
 400d624:	843fffcc 	andi	r16,r16,65535
 400d628:	440d383a 	mul	r6,r8,r16
 400d62c:	4565383a 	mul	r18,r8,r21
 400d630:	8349383a 	mul	r4,r16,r13
 400d634:	500e943a 	slli	r7,r10,16
 400d638:	3010d43a 	srli	r8,r6,16
 400d63c:	5028d43a 	srli	r20,r10,16
 400d640:	2489883a 	add	r4,r4,r18
 400d644:	8abfffcc 	andi	r10,r17,65535
 400d648:	3a95883a 	add	r10,r7,r10
 400d64c:	4119883a 	add	r12,r8,r4
 400d650:	a169883a 	add	r20,r20,r5
 400d654:	1a87883a 	add	r3,r3,r10
 400d658:	6d5b383a 	mul	r13,r13,r21
 400d65c:	6480022e 	bgeu	r12,r18,400d668 <__muldf3+0x400>
 400d660:	01000074 	movhi	r4,1
 400d664:	691b883a 	add	r13,r13,r4
 400d668:	7c25383a 	mul	r18,r15,r16
 400d66c:	7d4b383a 	mul	r5,r15,r21
 400d670:	84cf383a 	mul	r7,r16,r19
 400d674:	901ed43a 	srli	r15,r18,16
 400d678:	6008d43a 	srli	r4,r12,16
 400d67c:	6010943a 	slli	r8,r12,16
 400d680:	394f883a 	add	r7,r7,r5
 400d684:	333fffcc 	andi	r12,r6,65535
 400d688:	79df883a 	add	r15,r15,r7
 400d68c:	235b883a 	add	r13,r4,r13
 400d690:	9d63383a 	mul	r17,r19,r21
 400d694:	4309883a 	add	r4,r8,r12
 400d698:	7940022e 	bgeu	r15,r5,400d6a4 <__muldf3+0x43c>
 400d69c:	01400074 	movhi	r5,1
 400d6a0:	8963883a 	add	r17,r17,r5
 400d6a4:	780a943a 	slli	r5,r15,16
 400d6a8:	91bfffcc 	andi	r6,r18,65535
 400d6ac:	70c7883a 	add	r3,r14,r3
 400d6b0:	298d883a 	add	r6,r5,r6
 400d6b4:	1a8f803a 	cmpltu	r7,r3,r10
 400d6b8:	350b883a 	add	r5,r6,r20
 400d6bc:	20c7883a 	add	r3,r4,r3
 400d6c0:	3955883a 	add	r10,r7,r5
 400d6c4:	1909803a 	cmpltu	r4,r3,r4
 400d6c8:	6a91883a 	add	r8,r13,r10
 400d6cc:	780cd43a 	srli	r6,r15,16
 400d6d0:	2219883a 	add	r12,r4,r8
 400d6d4:	2d0b803a 	cmpltu	r5,r5,r20
 400d6d8:	51cf803a 	cmpltu	r7,r10,r7
 400d6dc:	29ceb03a 	or	r7,r5,r7
 400d6e0:	4351803a 	cmpltu	r8,r8,r13
 400d6e4:	610b803a 	cmpltu	r5,r12,r4
 400d6e8:	4148b03a 	or	r4,r8,r5
 400d6ec:	398f883a 	add	r7,r7,r6
 400d6f0:	3909883a 	add	r4,r7,r4
 400d6f4:	1810927a 	slli	r8,r3,9
 400d6f8:	2449883a 	add	r4,r4,r17
 400d6fc:	2008927a 	slli	r4,r4,9
 400d700:	6022d5fa 	srli	r17,r12,23
 400d704:	1806d5fa 	srli	r3,r3,23
 400d708:	4252b03a 	or	r9,r8,r9
 400d70c:	600a927a 	slli	r5,r12,9
 400d710:	4810c03a 	cmpne	r8,r9,zero
 400d714:	2462b03a 	or	r17,r4,r17
 400d718:	40c6b03a 	or	r3,r8,r3
 400d71c:	8900402c 	andhi	r4,r17,256
 400d720:	1950b03a 	or	r8,r3,r5
 400d724:	20000726 	beq	r4,zero,400d744 <__muldf3+0x4dc>
 400d728:	4006d07a 	srli	r3,r8,1
 400d72c:	880497fa 	slli	r2,r17,31
 400d730:	4200004c 	andi	r8,r8,1
 400d734:	8822d07a 	srli	r17,r17,1
 400d738:	1a10b03a 	or	r8,r3,r8
 400d73c:	1210b03a 	or	r8,r2,r8
 400d740:	5805883a 	mov	r2,r11
 400d744:	1140ffc4 	addi	r5,r2,1023
 400d748:	0140440e 	bge	zero,r5,400d85c <__muldf3+0x5f4>
 400d74c:	40c001cc 	andi	r3,r8,7
 400d750:	18000726 	beq	r3,zero,400d770 <__muldf3+0x508>
 400d754:	40c003cc 	andi	r3,r8,15
 400d758:	01000104 	movi	r4,4
 400d75c:	19000426 	beq	r3,r4,400d770 <__muldf3+0x508>
 400d760:	4107883a 	add	r3,r8,r4
 400d764:	1a11803a 	cmpltu	r8,r3,r8
 400d768:	8a23883a 	add	r17,r17,r8
 400d76c:	1811883a 	mov	r8,r3
 400d770:	88c0402c 	andhi	r3,r17,256
 400d774:	18000426 	beq	r3,zero,400d788 <__muldf3+0x520>
 400d778:	11410004 	addi	r5,r2,1024
 400d77c:	00bfc034 	movhi	r2,65280
 400d780:	10bfffc4 	addi	r2,r2,-1
 400d784:	88a2703a 	and	r17,r17,r2
 400d788:	0081ff84 	movi	r2,2046
 400d78c:	117f6416 	blt	r2,r5,400d520 <__alt_data_end+0xfc00d520>
 400d790:	8828977a 	slli	r20,r17,29
 400d794:	4010d0fa 	srli	r8,r8,3
 400d798:	8822927a 	slli	r17,r17,9
 400d79c:	2881ffcc 	andi	r2,r5,2047
 400d7a0:	a228b03a 	or	r20,r20,r8
 400d7a4:	880ad33a 	srli	r5,r17,12
 400d7a8:	b02b883a 	mov	r21,r22
 400d7ac:	003f0d06 	br	400d3e4 <__alt_data_end+0xfc00d3e4>
 400d7b0:	8080022c 	andhi	r2,r16,8
 400d7b4:	10000926 	beq	r2,zero,400d7dc <__muldf3+0x574>
 400d7b8:	8880022c 	andhi	r2,r17,8
 400d7bc:	1000071e 	bne	r2,zero,400d7dc <__muldf3+0x574>
 400d7c0:	00800434 	movhi	r2,16
 400d7c4:	89400234 	orhi	r5,r17,8
 400d7c8:	10bfffc4 	addi	r2,r2,-1
 400d7cc:	b82b883a 	mov	r21,r23
 400d7d0:	288a703a 	and	r5,r5,r2
 400d7d4:	4029883a 	mov	r20,r8
 400d7d8:	003f6806 	br	400d57c <__alt_data_end+0xfc00d57c>
 400d7dc:	00800434 	movhi	r2,16
 400d7e0:	81400234 	orhi	r5,r16,8
 400d7e4:	10bfffc4 	addi	r2,r2,-1
 400d7e8:	288a703a 	and	r5,r5,r2
 400d7ec:	003f6306 	br	400d57c <__alt_data_end+0xfc00d57c>
 400d7f0:	147ff604 	addi	r17,r2,-40
 400d7f4:	3462983a 	sll	r17,r6,r17
 400d7f8:	0011883a 	mov	r8,zero
 400d7fc:	003f4406 	br	400d510 <__alt_data_end+0xfc00d510>
 400d800:	3009883a 	mov	r4,r6
 400d804:	d9800215 	stw	r6,8(sp)
 400d808:	da400115 	stw	r9,4(sp)
 400d80c:	da800015 	stw	r10,0(sp)
 400d810:	400e4800 	call	400e480 <__clzsi2>
 400d814:	10800804 	addi	r2,r2,32
 400d818:	da800017 	ldw	r10,0(sp)
 400d81c:	da400117 	ldw	r9,4(sp)
 400d820:	d9800217 	ldw	r6,8(sp)
 400d824:	003f3006 	br	400d4e8 <__alt_data_end+0xfc00d4e8>
 400d828:	143ff604 	addi	r16,r2,-40
 400d82c:	9c20983a 	sll	r16,r19,r16
 400d830:	0029883a 	mov	r20,zero
 400d834:	003f1606 	br	400d490 <__alt_data_end+0xfc00d490>
 400d838:	d9800215 	stw	r6,8(sp)
 400d83c:	d9c00015 	stw	r7,0(sp)
 400d840:	da400115 	stw	r9,4(sp)
 400d844:	400e4800 	call	400e480 <__clzsi2>
 400d848:	10800804 	addi	r2,r2,32
 400d84c:	da400117 	ldw	r9,4(sp)
 400d850:	d9c00017 	ldw	r7,0(sp)
 400d854:	d9800217 	ldw	r6,8(sp)
 400d858:	003f0306 	br	400d468 <__alt_data_end+0xfc00d468>
 400d85c:	00c00044 	movi	r3,1
 400d860:	1947c83a 	sub	r3,r3,r5
 400d864:	00800e04 	movi	r2,56
 400d868:	10feda16 	blt	r2,r3,400d3d4 <__alt_data_end+0xfc00d3d4>
 400d86c:	008007c4 	movi	r2,31
 400d870:	10c01b16 	blt	r2,r3,400d8e0 <__muldf3+0x678>
 400d874:	00800804 	movi	r2,32
 400d878:	10c5c83a 	sub	r2,r2,r3
 400d87c:	888a983a 	sll	r5,r17,r2
 400d880:	40c8d83a 	srl	r4,r8,r3
 400d884:	4084983a 	sll	r2,r8,r2
 400d888:	88e2d83a 	srl	r17,r17,r3
 400d88c:	2906b03a 	or	r3,r5,r4
 400d890:	1004c03a 	cmpne	r2,r2,zero
 400d894:	1886b03a 	or	r3,r3,r2
 400d898:	188001cc 	andi	r2,r3,7
 400d89c:	10000726 	beq	r2,zero,400d8bc <__muldf3+0x654>
 400d8a0:	188003cc 	andi	r2,r3,15
 400d8a4:	01000104 	movi	r4,4
 400d8a8:	11000426 	beq	r2,r4,400d8bc <__muldf3+0x654>
 400d8ac:	1805883a 	mov	r2,r3
 400d8b0:	10c00104 	addi	r3,r2,4
 400d8b4:	1885803a 	cmpltu	r2,r3,r2
 400d8b8:	88a3883a 	add	r17,r17,r2
 400d8bc:	8880202c 	andhi	r2,r17,128
 400d8c0:	10001c26 	beq	r2,zero,400d934 <__muldf3+0x6cc>
 400d8c4:	b02b883a 	mov	r21,r22
 400d8c8:	00800044 	movi	r2,1
 400d8cc:	000b883a 	mov	r5,zero
 400d8d0:	0029883a 	mov	r20,zero
 400d8d4:	003ec306 	br	400d3e4 <__alt_data_end+0xfc00d3e4>
 400d8d8:	5805883a 	mov	r2,r11
 400d8dc:	003f9906 	br	400d744 <__alt_data_end+0xfc00d744>
 400d8e0:	00bff844 	movi	r2,-31
 400d8e4:	1145c83a 	sub	r2,r2,r5
 400d8e8:	8888d83a 	srl	r4,r17,r2
 400d8ec:	00800804 	movi	r2,32
 400d8f0:	18801a26 	beq	r3,r2,400d95c <__muldf3+0x6f4>
 400d8f4:	00801004 	movi	r2,64
 400d8f8:	10c5c83a 	sub	r2,r2,r3
 400d8fc:	8884983a 	sll	r2,r17,r2
 400d900:	1204b03a 	or	r2,r2,r8
 400d904:	1004c03a 	cmpne	r2,r2,zero
 400d908:	2084b03a 	or	r2,r4,r2
 400d90c:	144001cc 	andi	r17,r2,7
 400d910:	88000d1e 	bne	r17,zero,400d948 <__muldf3+0x6e0>
 400d914:	000b883a 	mov	r5,zero
 400d918:	1028d0fa 	srli	r20,r2,3
 400d91c:	b02b883a 	mov	r21,r22
 400d920:	0005883a 	mov	r2,zero
 400d924:	a468b03a 	or	r20,r20,r17
 400d928:	003eae06 	br	400d3e4 <__alt_data_end+0xfc00d3e4>
 400d92c:	1007883a 	mov	r3,r2
 400d930:	0023883a 	mov	r17,zero
 400d934:	880a927a 	slli	r5,r17,9
 400d938:	1805883a 	mov	r2,r3
 400d93c:	8822977a 	slli	r17,r17,29
 400d940:	280ad33a 	srli	r5,r5,12
 400d944:	003ff406 	br	400d918 <__alt_data_end+0xfc00d918>
 400d948:	10c003cc 	andi	r3,r2,15
 400d94c:	01000104 	movi	r4,4
 400d950:	193ff626 	beq	r3,r4,400d92c <__alt_data_end+0xfc00d92c>
 400d954:	0023883a 	mov	r17,zero
 400d958:	003fd506 	br	400d8b0 <__alt_data_end+0xfc00d8b0>
 400d95c:	0005883a 	mov	r2,zero
 400d960:	003fe706 	br	400d900 <__alt_data_end+0xfc00d900>
 400d964:	00800434 	movhi	r2,16
 400d968:	89400234 	orhi	r5,r17,8
 400d96c:	10bfffc4 	addi	r2,r2,-1
 400d970:	b02b883a 	mov	r21,r22
 400d974:	288a703a 	and	r5,r5,r2
 400d978:	4029883a 	mov	r20,r8
 400d97c:	003eff06 	br	400d57c <__alt_data_end+0xfc00d57c>

0400d980 <__subdf3>:
 400d980:	02000434 	movhi	r8,16
 400d984:	423fffc4 	addi	r8,r8,-1
 400d988:	defffb04 	addi	sp,sp,-20
 400d98c:	2a14703a 	and	r10,r5,r8
 400d990:	3812d53a 	srli	r9,r7,20
 400d994:	3a10703a 	and	r8,r7,r8
 400d998:	2006d77a 	srli	r3,r4,29
 400d99c:	3004d77a 	srli	r2,r6,29
 400d9a0:	dc000015 	stw	r16,0(sp)
 400d9a4:	501490fa 	slli	r10,r10,3
 400d9a8:	2820d53a 	srli	r16,r5,20
 400d9ac:	401090fa 	slli	r8,r8,3
 400d9b0:	dc800215 	stw	r18,8(sp)
 400d9b4:	dc400115 	stw	r17,4(sp)
 400d9b8:	dfc00415 	stw	ra,16(sp)
 400d9bc:	202290fa 	slli	r17,r4,3
 400d9c0:	dcc00315 	stw	r19,12(sp)
 400d9c4:	4a41ffcc 	andi	r9,r9,2047
 400d9c8:	0101ffc4 	movi	r4,2047
 400d9cc:	2824d7fa 	srli	r18,r5,31
 400d9d0:	8401ffcc 	andi	r16,r16,2047
 400d9d4:	50c6b03a 	or	r3,r10,r3
 400d9d8:	380ed7fa 	srli	r7,r7,31
 400d9dc:	408ab03a 	or	r5,r8,r2
 400d9e0:	300c90fa 	slli	r6,r6,3
 400d9e4:	49009626 	beq	r9,r4,400dc40 <__subdf3+0x2c0>
 400d9e8:	39c0005c 	xori	r7,r7,1
 400d9ec:	8245c83a 	sub	r2,r16,r9
 400d9f0:	3c807426 	beq	r7,r18,400dbc4 <__subdf3+0x244>
 400d9f4:	0080af0e 	bge	zero,r2,400dcb4 <__subdf3+0x334>
 400d9f8:	48002a1e 	bne	r9,zero,400daa4 <__subdf3+0x124>
 400d9fc:	2988b03a 	or	r4,r5,r6
 400da00:	20009a1e 	bne	r4,zero,400dc6c <__subdf3+0x2ec>
 400da04:	888001cc 	andi	r2,r17,7
 400da08:	10000726 	beq	r2,zero,400da28 <__subdf3+0xa8>
 400da0c:	888003cc 	andi	r2,r17,15
 400da10:	01000104 	movi	r4,4
 400da14:	11000426 	beq	r2,r4,400da28 <__subdf3+0xa8>
 400da18:	890b883a 	add	r5,r17,r4
 400da1c:	2c63803a 	cmpltu	r17,r5,r17
 400da20:	1c47883a 	add	r3,r3,r17
 400da24:	2823883a 	mov	r17,r5
 400da28:	1880202c 	andhi	r2,r3,128
 400da2c:	10005926 	beq	r2,zero,400db94 <__subdf3+0x214>
 400da30:	84000044 	addi	r16,r16,1
 400da34:	0081ffc4 	movi	r2,2047
 400da38:	8080be26 	beq	r16,r2,400dd34 <__subdf3+0x3b4>
 400da3c:	017fe034 	movhi	r5,65408
 400da40:	297fffc4 	addi	r5,r5,-1
 400da44:	1946703a 	and	r3,r3,r5
 400da48:	1804977a 	slli	r2,r3,29
 400da4c:	1806927a 	slli	r3,r3,9
 400da50:	8822d0fa 	srli	r17,r17,3
 400da54:	8401ffcc 	andi	r16,r16,2047
 400da58:	180ad33a 	srli	r5,r3,12
 400da5c:	9100004c 	andi	r4,r18,1
 400da60:	1444b03a 	or	r2,r2,r17
 400da64:	80c1ffcc 	andi	r3,r16,2047
 400da68:	1820953a 	slli	r16,r3,20
 400da6c:	20c03fcc 	andi	r3,r4,255
 400da70:	180897fa 	slli	r4,r3,31
 400da74:	00c00434 	movhi	r3,16
 400da78:	18ffffc4 	addi	r3,r3,-1
 400da7c:	28c6703a 	and	r3,r5,r3
 400da80:	1c06b03a 	or	r3,r3,r16
 400da84:	1906b03a 	or	r3,r3,r4
 400da88:	dfc00417 	ldw	ra,16(sp)
 400da8c:	dcc00317 	ldw	r19,12(sp)
 400da90:	dc800217 	ldw	r18,8(sp)
 400da94:	dc400117 	ldw	r17,4(sp)
 400da98:	dc000017 	ldw	r16,0(sp)
 400da9c:	dec00504 	addi	sp,sp,20
 400daa0:	f800283a 	ret
 400daa4:	0101ffc4 	movi	r4,2047
 400daa8:	813fd626 	beq	r16,r4,400da04 <__alt_data_end+0xfc00da04>
 400daac:	29402034 	orhi	r5,r5,128
 400dab0:	01000e04 	movi	r4,56
 400dab4:	2080a316 	blt	r4,r2,400dd44 <__subdf3+0x3c4>
 400dab8:	010007c4 	movi	r4,31
 400dabc:	2080c616 	blt	r4,r2,400ddd8 <__subdf3+0x458>
 400dac0:	01000804 	movi	r4,32
 400dac4:	2089c83a 	sub	r4,r4,r2
 400dac8:	2910983a 	sll	r8,r5,r4
 400dacc:	308ed83a 	srl	r7,r6,r2
 400dad0:	3108983a 	sll	r4,r6,r4
 400dad4:	2884d83a 	srl	r2,r5,r2
 400dad8:	41ccb03a 	or	r6,r8,r7
 400dadc:	2008c03a 	cmpne	r4,r4,zero
 400dae0:	310cb03a 	or	r6,r6,r4
 400dae4:	898dc83a 	sub	r6,r17,r6
 400dae8:	89a3803a 	cmpltu	r17,r17,r6
 400daec:	1887c83a 	sub	r3,r3,r2
 400daf0:	1c47c83a 	sub	r3,r3,r17
 400daf4:	3023883a 	mov	r17,r6
 400daf8:	1880202c 	andhi	r2,r3,128
 400dafc:	10002326 	beq	r2,zero,400db8c <__subdf3+0x20c>
 400db00:	04c02034 	movhi	r19,128
 400db04:	9cffffc4 	addi	r19,r19,-1
 400db08:	1ce6703a 	and	r19,r3,r19
 400db0c:	98007a26 	beq	r19,zero,400dcf8 <__subdf3+0x378>
 400db10:	9809883a 	mov	r4,r19
 400db14:	400e4800 	call	400e480 <__clzsi2>
 400db18:	113ffe04 	addi	r4,r2,-8
 400db1c:	00c007c4 	movi	r3,31
 400db20:	19007b16 	blt	r3,r4,400dd10 <__subdf3+0x390>
 400db24:	00800804 	movi	r2,32
 400db28:	1105c83a 	sub	r2,r2,r4
 400db2c:	8884d83a 	srl	r2,r17,r2
 400db30:	9906983a 	sll	r3,r19,r4
 400db34:	8922983a 	sll	r17,r17,r4
 400db38:	10c4b03a 	or	r2,r2,r3
 400db3c:	24007816 	blt	r4,r16,400dd20 <__subdf3+0x3a0>
 400db40:	2421c83a 	sub	r16,r4,r16
 400db44:	80c00044 	addi	r3,r16,1
 400db48:	010007c4 	movi	r4,31
 400db4c:	20c09516 	blt	r4,r3,400dda4 <__subdf3+0x424>
 400db50:	01400804 	movi	r5,32
 400db54:	28cbc83a 	sub	r5,r5,r3
 400db58:	88c8d83a 	srl	r4,r17,r3
 400db5c:	8962983a 	sll	r17,r17,r5
 400db60:	114a983a 	sll	r5,r2,r5
 400db64:	10c6d83a 	srl	r3,r2,r3
 400db68:	8804c03a 	cmpne	r2,r17,zero
 400db6c:	290ab03a 	or	r5,r5,r4
 400db70:	28a2b03a 	or	r17,r5,r2
 400db74:	0021883a 	mov	r16,zero
 400db78:	003fa206 	br	400da04 <__alt_data_end+0xfc00da04>
 400db7c:	2090b03a 	or	r8,r4,r2
 400db80:	40018e26 	beq	r8,zero,400e1bc <__subdf3+0x83c>
 400db84:	1007883a 	mov	r3,r2
 400db88:	2023883a 	mov	r17,r4
 400db8c:	888001cc 	andi	r2,r17,7
 400db90:	103f9e1e 	bne	r2,zero,400da0c <__alt_data_end+0xfc00da0c>
 400db94:	1804977a 	slli	r2,r3,29
 400db98:	8822d0fa 	srli	r17,r17,3
 400db9c:	1810d0fa 	srli	r8,r3,3
 400dba0:	9100004c 	andi	r4,r18,1
 400dba4:	1444b03a 	or	r2,r2,r17
 400dba8:	00c1ffc4 	movi	r3,2047
 400dbac:	80c02826 	beq	r16,r3,400dc50 <__subdf3+0x2d0>
 400dbb0:	01400434 	movhi	r5,16
 400dbb4:	297fffc4 	addi	r5,r5,-1
 400dbb8:	80e0703a 	and	r16,r16,r3
 400dbbc:	414a703a 	and	r5,r8,r5
 400dbc0:	003fa806 	br	400da64 <__alt_data_end+0xfc00da64>
 400dbc4:	0080630e 	bge	zero,r2,400dd54 <__subdf3+0x3d4>
 400dbc8:	48003026 	beq	r9,zero,400dc8c <__subdf3+0x30c>
 400dbcc:	0101ffc4 	movi	r4,2047
 400dbd0:	813f8c26 	beq	r16,r4,400da04 <__alt_data_end+0xfc00da04>
 400dbd4:	29402034 	orhi	r5,r5,128
 400dbd8:	01000e04 	movi	r4,56
 400dbdc:	2080a90e 	bge	r4,r2,400de84 <__subdf3+0x504>
 400dbe0:	298cb03a 	or	r6,r5,r6
 400dbe4:	3012c03a 	cmpne	r9,r6,zero
 400dbe8:	0005883a 	mov	r2,zero
 400dbec:	4c53883a 	add	r9,r9,r17
 400dbf0:	4c63803a 	cmpltu	r17,r9,r17
 400dbf4:	10c7883a 	add	r3,r2,r3
 400dbf8:	88c7883a 	add	r3,r17,r3
 400dbfc:	4823883a 	mov	r17,r9
 400dc00:	1880202c 	andhi	r2,r3,128
 400dc04:	1000d026 	beq	r2,zero,400df48 <__subdf3+0x5c8>
 400dc08:	84000044 	addi	r16,r16,1
 400dc0c:	0081ffc4 	movi	r2,2047
 400dc10:	8080fe26 	beq	r16,r2,400e00c <__subdf3+0x68c>
 400dc14:	00bfe034 	movhi	r2,65408
 400dc18:	10bfffc4 	addi	r2,r2,-1
 400dc1c:	1886703a 	and	r3,r3,r2
 400dc20:	880ad07a 	srli	r5,r17,1
 400dc24:	180497fa 	slli	r2,r3,31
 400dc28:	8900004c 	andi	r4,r17,1
 400dc2c:	2922b03a 	or	r17,r5,r4
 400dc30:	1806d07a 	srli	r3,r3,1
 400dc34:	1462b03a 	or	r17,r2,r17
 400dc38:	3825883a 	mov	r18,r7
 400dc3c:	003f7106 	br	400da04 <__alt_data_end+0xfc00da04>
 400dc40:	2984b03a 	or	r2,r5,r6
 400dc44:	103f6826 	beq	r2,zero,400d9e8 <__alt_data_end+0xfc00d9e8>
 400dc48:	39c03fcc 	andi	r7,r7,255
 400dc4c:	003f6706 	br	400d9ec <__alt_data_end+0xfc00d9ec>
 400dc50:	4086b03a 	or	r3,r8,r2
 400dc54:	18015226 	beq	r3,zero,400e1a0 <__subdf3+0x820>
 400dc58:	00c00434 	movhi	r3,16
 400dc5c:	41400234 	orhi	r5,r8,8
 400dc60:	18ffffc4 	addi	r3,r3,-1
 400dc64:	28ca703a 	and	r5,r5,r3
 400dc68:	003f7e06 	br	400da64 <__alt_data_end+0xfc00da64>
 400dc6c:	10bfffc4 	addi	r2,r2,-1
 400dc70:	1000491e 	bne	r2,zero,400dd98 <__subdf3+0x418>
 400dc74:	898fc83a 	sub	r7,r17,r6
 400dc78:	89e3803a 	cmpltu	r17,r17,r7
 400dc7c:	1947c83a 	sub	r3,r3,r5
 400dc80:	1c47c83a 	sub	r3,r3,r17
 400dc84:	3823883a 	mov	r17,r7
 400dc88:	003f9b06 	br	400daf8 <__alt_data_end+0xfc00daf8>
 400dc8c:	2988b03a 	or	r4,r5,r6
 400dc90:	203f5c26 	beq	r4,zero,400da04 <__alt_data_end+0xfc00da04>
 400dc94:	10bfffc4 	addi	r2,r2,-1
 400dc98:	1000931e 	bne	r2,zero,400dee8 <__subdf3+0x568>
 400dc9c:	898d883a 	add	r6,r17,r6
 400dca0:	3463803a 	cmpltu	r17,r6,r17
 400dca4:	1947883a 	add	r3,r3,r5
 400dca8:	88c7883a 	add	r3,r17,r3
 400dcac:	3023883a 	mov	r17,r6
 400dcb0:	003fd306 	br	400dc00 <__alt_data_end+0xfc00dc00>
 400dcb4:	1000541e 	bne	r2,zero,400de08 <__subdf3+0x488>
 400dcb8:	80800044 	addi	r2,r16,1
 400dcbc:	1081ffcc 	andi	r2,r2,2047
 400dcc0:	01000044 	movi	r4,1
 400dcc4:	2080a20e 	bge	r4,r2,400df50 <__subdf3+0x5d0>
 400dcc8:	8989c83a 	sub	r4,r17,r6
 400dccc:	8905803a 	cmpltu	r2,r17,r4
 400dcd0:	1967c83a 	sub	r19,r3,r5
 400dcd4:	98a7c83a 	sub	r19,r19,r2
 400dcd8:	9880202c 	andhi	r2,r19,128
 400dcdc:	10006326 	beq	r2,zero,400de6c <__subdf3+0x4ec>
 400dce0:	3463c83a 	sub	r17,r6,r17
 400dce4:	28c7c83a 	sub	r3,r5,r3
 400dce8:	344d803a 	cmpltu	r6,r6,r17
 400dcec:	19a7c83a 	sub	r19,r3,r6
 400dcf0:	3825883a 	mov	r18,r7
 400dcf4:	983f861e 	bne	r19,zero,400db10 <__alt_data_end+0xfc00db10>
 400dcf8:	8809883a 	mov	r4,r17
 400dcfc:	400e4800 	call	400e480 <__clzsi2>
 400dd00:	10800804 	addi	r2,r2,32
 400dd04:	113ffe04 	addi	r4,r2,-8
 400dd08:	00c007c4 	movi	r3,31
 400dd0c:	193f850e 	bge	r3,r4,400db24 <__alt_data_end+0xfc00db24>
 400dd10:	10bff604 	addi	r2,r2,-40
 400dd14:	8884983a 	sll	r2,r17,r2
 400dd18:	0023883a 	mov	r17,zero
 400dd1c:	243f880e 	bge	r4,r16,400db40 <__alt_data_end+0xfc00db40>
 400dd20:	00ffe034 	movhi	r3,65408
 400dd24:	18ffffc4 	addi	r3,r3,-1
 400dd28:	8121c83a 	sub	r16,r16,r4
 400dd2c:	10c6703a 	and	r3,r2,r3
 400dd30:	003f3406 	br	400da04 <__alt_data_end+0xfc00da04>
 400dd34:	9100004c 	andi	r4,r18,1
 400dd38:	000b883a 	mov	r5,zero
 400dd3c:	0005883a 	mov	r2,zero
 400dd40:	003f4806 	br	400da64 <__alt_data_end+0xfc00da64>
 400dd44:	298cb03a 	or	r6,r5,r6
 400dd48:	300cc03a 	cmpne	r6,r6,zero
 400dd4c:	0005883a 	mov	r2,zero
 400dd50:	003f6406 	br	400dae4 <__alt_data_end+0xfc00dae4>
 400dd54:	10009a1e 	bne	r2,zero,400dfc0 <__subdf3+0x640>
 400dd58:	82400044 	addi	r9,r16,1
 400dd5c:	4881ffcc 	andi	r2,r9,2047
 400dd60:	02800044 	movi	r10,1
 400dd64:	5080670e 	bge	r10,r2,400df04 <__subdf3+0x584>
 400dd68:	0081ffc4 	movi	r2,2047
 400dd6c:	4880af26 	beq	r9,r2,400e02c <__subdf3+0x6ac>
 400dd70:	898d883a 	add	r6,r17,r6
 400dd74:	1945883a 	add	r2,r3,r5
 400dd78:	3447803a 	cmpltu	r3,r6,r17
 400dd7c:	1887883a 	add	r3,r3,r2
 400dd80:	182297fa 	slli	r17,r3,31
 400dd84:	300cd07a 	srli	r6,r6,1
 400dd88:	1806d07a 	srli	r3,r3,1
 400dd8c:	4821883a 	mov	r16,r9
 400dd90:	89a2b03a 	or	r17,r17,r6
 400dd94:	003f1b06 	br	400da04 <__alt_data_end+0xfc00da04>
 400dd98:	0101ffc4 	movi	r4,2047
 400dd9c:	813f441e 	bne	r16,r4,400dab0 <__alt_data_end+0xfc00dab0>
 400dda0:	003f1806 	br	400da04 <__alt_data_end+0xfc00da04>
 400dda4:	843ff844 	addi	r16,r16,-31
 400dda8:	01400804 	movi	r5,32
 400ddac:	1408d83a 	srl	r4,r2,r16
 400ddb0:	19405026 	beq	r3,r5,400def4 <__subdf3+0x574>
 400ddb4:	01401004 	movi	r5,64
 400ddb8:	28c7c83a 	sub	r3,r5,r3
 400ddbc:	10c4983a 	sll	r2,r2,r3
 400ddc0:	88a2b03a 	or	r17,r17,r2
 400ddc4:	8822c03a 	cmpne	r17,r17,zero
 400ddc8:	2462b03a 	or	r17,r4,r17
 400ddcc:	0007883a 	mov	r3,zero
 400ddd0:	0021883a 	mov	r16,zero
 400ddd4:	003f6d06 	br	400db8c <__alt_data_end+0xfc00db8c>
 400ddd8:	11fff804 	addi	r7,r2,-32
 400dddc:	01000804 	movi	r4,32
 400dde0:	29ced83a 	srl	r7,r5,r7
 400dde4:	11004526 	beq	r2,r4,400defc <__subdf3+0x57c>
 400dde8:	01001004 	movi	r4,64
 400ddec:	2089c83a 	sub	r4,r4,r2
 400ddf0:	2904983a 	sll	r2,r5,r4
 400ddf4:	118cb03a 	or	r6,r2,r6
 400ddf8:	300cc03a 	cmpne	r6,r6,zero
 400ddfc:	398cb03a 	or	r6,r7,r6
 400de00:	0005883a 	mov	r2,zero
 400de04:	003f3706 	br	400dae4 <__alt_data_end+0xfc00dae4>
 400de08:	80002a26 	beq	r16,zero,400deb4 <__subdf3+0x534>
 400de0c:	0101ffc4 	movi	r4,2047
 400de10:	49006626 	beq	r9,r4,400dfac <__subdf3+0x62c>
 400de14:	0085c83a 	sub	r2,zero,r2
 400de18:	18c02034 	orhi	r3,r3,128
 400de1c:	01000e04 	movi	r4,56
 400de20:	20807e16 	blt	r4,r2,400e01c <__subdf3+0x69c>
 400de24:	010007c4 	movi	r4,31
 400de28:	2080e716 	blt	r4,r2,400e1c8 <__subdf3+0x848>
 400de2c:	01000804 	movi	r4,32
 400de30:	2089c83a 	sub	r4,r4,r2
 400de34:	1914983a 	sll	r10,r3,r4
 400de38:	8890d83a 	srl	r8,r17,r2
 400de3c:	8908983a 	sll	r4,r17,r4
 400de40:	1884d83a 	srl	r2,r3,r2
 400de44:	5222b03a 	or	r17,r10,r8
 400de48:	2006c03a 	cmpne	r3,r4,zero
 400de4c:	88e2b03a 	or	r17,r17,r3
 400de50:	3463c83a 	sub	r17,r6,r17
 400de54:	2885c83a 	sub	r2,r5,r2
 400de58:	344d803a 	cmpltu	r6,r6,r17
 400de5c:	1187c83a 	sub	r3,r2,r6
 400de60:	4821883a 	mov	r16,r9
 400de64:	3825883a 	mov	r18,r7
 400de68:	003f2306 	br	400daf8 <__alt_data_end+0xfc00daf8>
 400de6c:	24d0b03a 	or	r8,r4,r19
 400de70:	40001b1e 	bne	r8,zero,400dee0 <__subdf3+0x560>
 400de74:	0005883a 	mov	r2,zero
 400de78:	0009883a 	mov	r4,zero
 400de7c:	0021883a 	mov	r16,zero
 400de80:	003f4906 	br	400dba8 <__alt_data_end+0xfc00dba8>
 400de84:	010007c4 	movi	r4,31
 400de88:	20803a16 	blt	r4,r2,400df74 <__subdf3+0x5f4>
 400de8c:	01000804 	movi	r4,32
 400de90:	2089c83a 	sub	r4,r4,r2
 400de94:	2912983a 	sll	r9,r5,r4
 400de98:	3090d83a 	srl	r8,r6,r2
 400de9c:	3108983a 	sll	r4,r6,r4
 400dea0:	2884d83a 	srl	r2,r5,r2
 400dea4:	4a12b03a 	or	r9,r9,r8
 400dea8:	2008c03a 	cmpne	r4,r4,zero
 400deac:	4912b03a 	or	r9,r9,r4
 400deb0:	003f4e06 	br	400dbec <__alt_data_end+0xfc00dbec>
 400deb4:	1c48b03a 	or	r4,r3,r17
 400deb8:	20003c26 	beq	r4,zero,400dfac <__subdf3+0x62c>
 400debc:	0084303a 	nor	r2,zero,r2
 400dec0:	1000381e 	bne	r2,zero,400dfa4 <__subdf3+0x624>
 400dec4:	3463c83a 	sub	r17,r6,r17
 400dec8:	28c5c83a 	sub	r2,r5,r3
 400decc:	344d803a 	cmpltu	r6,r6,r17
 400ded0:	1187c83a 	sub	r3,r2,r6
 400ded4:	4821883a 	mov	r16,r9
 400ded8:	3825883a 	mov	r18,r7
 400dedc:	003f0606 	br	400daf8 <__alt_data_end+0xfc00daf8>
 400dee0:	2023883a 	mov	r17,r4
 400dee4:	003f0906 	br	400db0c <__alt_data_end+0xfc00db0c>
 400dee8:	0101ffc4 	movi	r4,2047
 400deec:	813f3a1e 	bne	r16,r4,400dbd8 <__alt_data_end+0xfc00dbd8>
 400def0:	003ec406 	br	400da04 <__alt_data_end+0xfc00da04>
 400def4:	0005883a 	mov	r2,zero
 400def8:	003fb106 	br	400ddc0 <__alt_data_end+0xfc00ddc0>
 400defc:	0005883a 	mov	r2,zero
 400df00:	003fbc06 	br	400ddf4 <__alt_data_end+0xfc00ddf4>
 400df04:	1c44b03a 	or	r2,r3,r17
 400df08:	80008e1e 	bne	r16,zero,400e144 <__subdf3+0x7c4>
 400df0c:	1000c826 	beq	r2,zero,400e230 <__subdf3+0x8b0>
 400df10:	2984b03a 	or	r2,r5,r6
 400df14:	103ebb26 	beq	r2,zero,400da04 <__alt_data_end+0xfc00da04>
 400df18:	8989883a 	add	r4,r17,r6
 400df1c:	1945883a 	add	r2,r3,r5
 400df20:	2447803a 	cmpltu	r3,r4,r17
 400df24:	1887883a 	add	r3,r3,r2
 400df28:	1880202c 	andhi	r2,r3,128
 400df2c:	2023883a 	mov	r17,r4
 400df30:	103f1626 	beq	r2,zero,400db8c <__alt_data_end+0xfc00db8c>
 400df34:	00bfe034 	movhi	r2,65408
 400df38:	10bfffc4 	addi	r2,r2,-1
 400df3c:	5021883a 	mov	r16,r10
 400df40:	1886703a 	and	r3,r3,r2
 400df44:	003eaf06 	br	400da04 <__alt_data_end+0xfc00da04>
 400df48:	3825883a 	mov	r18,r7
 400df4c:	003f0f06 	br	400db8c <__alt_data_end+0xfc00db8c>
 400df50:	1c44b03a 	or	r2,r3,r17
 400df54:	8000251e 	bne	r16,zero,400dfec <__subdf3+0x66c>
 400df58:	1000661e 	bne	r2,zero,400e0f4 <__subdf3+0x774>
 400df5c:	2990b03a 	or	r8,r5,r6
 400df60:	40009626 	beq	r8,zero,400e1bc <__subdf3+0x83c>
 400df64:	2807883a 	mov	r3,r5
 400df68:	3023883a 	mov	r17,r6
 400df6c:	3825883a 	mov	r18,r7
 400df70:	003ea406 	br	400da04 <__alt_data_end+0xfc00da04>
 400df74:	127ff804 	addi	r9,r2,-32
 400df78:	01000804 	movi	r4,32
 400df7c:	2a52d83a 	srl	r9,r5,r9
 400df80:	11008c26 	beq	r2,r4,400e1b4 <__subdf3+0x834>
 400df84:	01001004 	movi	r4,64
 400df88:	2085c83a 	sub	r2,r4,r2
 400df8c:	2884983a 	sll	r2,r5,r2
 400df90:	118cb03a 	or	r6,r2,r6
 400df94:	300cc03a 	cmpne	r6,r6,zero
 400df98:	4992b03a 	or	r9,r9,r6
 400df9c:	0005883a 	mov	r2,zero
 400dfa0:	003f1206 	br	400dbec <__alt_data_end+0xfc00dbec>
 400dfa4:	0101ffc4 	movi	r4,2047
 400dfa8:	493f9c1e 	bne	r9,r4,400de1c <__alt_data_end+0xfc00de1c>
 400dfac:	2807883a 	mov	r3,r5
 400dfb0:	3023883a 	mov	r17,r6
 400dfb4:	4821883a 	mov	r16,r9
 400dfb8:	3825883a 	mov	r18,r7
 400dfbc:	003e9106 	br	400da04 <__alt_data_end+0xfc00da04>
 400dfc0:	80001f1e 	bne	r16,zero,400e040 <__subdf3+0x6c0>
 400dfc4:	1c48b03a 	or	r4,r3,r17
 400dfc8:	20005a26 	beq	r4,zero,400e134 <__subdf3+0x7b4>
 400dfcc:	0084303a 	nor	r2,zero,r2
 400dfd0:	1000561e 	bne	r2,zero,400e12c <__subdf3+0x7ac>
 400dfd4:	89a3883a 	add	r17,r17,r6
 400dfd8:	1945883a 	add	r2,r3,r5
 400dfdc:	898d803a 	cmpltu	r6,r17,r6
 400dfe0:	3087883a 	add	r3,r6,r2
 400dfe4:	4821883a 	mov	r16,r9
 400dfe8:	003f0506 	br	400dc00 <__alt_data_end+0xfc00dc00>
 400dfec:	10002b1e 	bne	r2,zero,400e09c <__subdf3+0x71c>
 400dff0:	2984b03a 	or	r2,r5,r6
 400dff4:	10008026 	beq	r2,zero,400e1f8 <__subdf3+0x878>
 400dff8:	2807883a 	mov	r3,r5
 400dffc:	3023883a 	mov	r17,r6
 400e000:	3825883a 	mov	r18,r7
 400e004:	0401ffc4 	movi	r16,2047
 400e008:	003e7e06 	br	400da04 <__alt_data_end+0xfc00da04>
 400e00c:	3809883a 	mov	r4,r7
 400e010:	0011883a 	mov	r8,zero
 400e014:	0005883a 	mov	r2,zero
 400e018:	003ee306 	br	400dba8 <__alt_data_end+0xfc00dba8>
 400e01c:	1c62b03a 	or	r17,r3,r17
 400e020:	8822c03a 	cmpne	r17,r17,zero
 400e024:	0005883a 	mov	r2,zero
 400e028:	003f8906 	br	400de50 <__alt_data_end+0xfc00de50>
 400e02c:	3809883a 	mov	r4,r7
 400e030:	4821883a 	mov	r16,r9
 400e034:	0011883a 	mov	r8,zero
 400e038:	0005883a 	mov	r2,zero
 400e03c:	003eda06 	br	400dba8 <__alt_data_end+0xfc00dba8>
 400e040:	0101ffc4 	movi	r4,2047
 400e044:	49003b26 	beq	r9,r4,400e134 <__subdf3+0x7b4>
 400e048:	0085c83a 	sub	r2,zero,r2
 400e04c:	18c02034 	orhi	r3,r3,128
 400e050:	01000e04 	movi	r4,56
 400e054:	20806e16 	blt	r4,r2,400e210 <__subdf3+0x890>
 400e058:	010007c4 	movi	r4,31
 400e05c:	20807716 	blt	r4,r2,400e23c <__subdf3+0x8bc>
 400e060:	01000804 	movi	r4,32
 400e064:	2089c83a 	sub	r4,r4,r2
 400e068:	1914983a 	sll	r10,r3,r4
 400e06c:	8890d83a 	srl	r8,r17,r2
 400e070:	8908983a 	sll	r4,r17,r4
 400e074:	1884d83a 	srl	r2,r3,r2
 400e078:	5222b03a 	or	r17,r10,r8
 400e07c:	2006c03a 	cmpne	r3,r4,zero
 400e080:	88e2b03a 	or	r17,r17,r3
 400e084:	89a3883a 	add	r17,r17,r6
 400e088:	1145883a 	add	r2,r2,r5
 400e08c:	898d803a 	cmpltu	r6,r17,r6
 400e090:	3087883a 	add	r3,r6,r2
 400e094:	4821883a 	mov	r16,r9
 400e098:	003ed906 	br	400dc00 <__alt_data_end+0xfc00dc00>
 400e09c:	2984b03a 	or	r2,r5,r6
 400e0a0:	10004226 	beq	r2,zero,400e1ac <__subdf3+0x82c>
 400e0a4:	1808d0fa 	srli	r4,r3,3
 400e0a8:	8822d0fa 	srli	r17,r17,3
 400e0ac:	1806977a 	slli	r3,r3,29
 400e0b0:	2080022c 	andhi	r2,r4,8
 400e0b4:	1c62b03a 	or	r17,r3,r17
 400e0b8:	10000826 	beq	r2,zero,400e0dc <__subdf3+0x75c>
 400e0bc:	2812d0fa 	srli	r9,r5,3
 400e0c0:	4880022c 	andhi	r2,r9,8
 400e0c4:	1000051e 	bne	r2,zero,400e0dc <__subdf3+0x75c>
 400e0c8:	300cd0fa 	srli	r6,r6,3
 400e0cc:	2804977a 	slli	r2,r5,29
 400e0d0:	4809883a 	mov	r4,r9
 400e0d4:	3825883a 	mov	r18,r7
 400e0d8:	11a2b03a 	or	r17,r2,r6
 400e0dc:	8806d77a 	srli	r3,r17,29
 400e0e0:	200890fa 	slli	r4,r4,3
 400e0e4:	882290fa 	slli	r17,r17,3
 400e0e8:	0401ffc4 	movi	r16,2047
 400e0ec:	1906b03a 	or	r3,r3,r4
 400e0f0:	003e4406 	br	400da04 <__alt_data_end+0xfc00da04>
 400e0f4:	2984b03a 	or	r2,r5,r6
 400e0f8:	103e4226 	beq	r2,zero,400da04 <__alt_data_end+0xfc00da04>
 400e0fc:	8989c83a 	sub	r4,r17,r6
 400e100:	8911803a 	cmpltu	r8,r17,r4
 400e104:	1945c83a 	sub	r2,r3,r5
 400e108:	1205c83a 	sub	r2,r2,r8
 400e10c:	1200202c 	andhi	r8,r2,128
 400e110:	403e9a26 	beq	r8,zero,400db7c <__alt_data_end+0xfc00db7c>
 400e114:	3463c83a 	sub	r17,r6,r17
 400e118:	28c5c83a 	sub	r2,r5,r3
 400e11c:	344d803a 	cmpltu	r6,r6,r17
 400e120:	1187c83a 	sub	r3,r2,r6
 400e124:	3825883a 	mov	r18,r7
 400e128:	003e3606 	br	400da04 <__alt_data_end+0xfc00da04>
 400e12c:	0101ffc4 	movi	r4,2047
 400e130:	493fc71e 	bne	r9,r4,400e050 <__alt_data_end+0xfc00e050>
 400e134:	2807883a 	mov	r3,r5
 400e138:	3023883a 	mov	r17,r6
 400e13c:	4821883a 	mov	r16,r9
 400e140:	003e3006 	br	400da04 <__alt_data_end+0xfc00da04>
 400e144:	10003626 	beq	r2,zero,400e220 <__subdf3+0x8a0>
 400e148:	2984b03a 	or	r2,r5,r6
 400e14c:	10001726 	beq	r2,zero,400e1ac <__subdf3+0x82c>
 400e150:	1808d0fa 	srli	r4,r3,3
 400e154:	8822d0fa 	srli	r17,r17,3
 400e158:	1806977a 	slli	r3,r3,29
 400e15c:	2080022c 	andhi	r2,r4,8
 400e160:	1c62b03a 	or	r17,r3,r17
 400e164:	10000726 	beq	r2,zero,400e184 <__subdf3+0x804>
 400e168:	2812d0fa 	srli	r9,r5,3
 400e16c:	4880022c 	andhi	r2,r9,8
 400e170:	1000041e 	bne	r2,zero,400e184 <__subdf3+0x804>
 400e174:	300cd0fa 	srli	r6,r6,3
 400e178:	2804977a 	slli	r2,r5,29
 400e17c:	4809883a 	mov	r4,r9
 400e180:	11a2b03a 	or	r17,r2,r6
 400e184:	8806d77a 	srli	r3,r17,29
 400e188:	200890fa 	slli	r4,r4,3
 400e18c:	882290fa 	slli	r17,r17,3
 400e190:	3825883a 	mov	r18,r7
 400e194:	1906b03a 	or	r3,r3,r4
 400e198:	0401ffc4 	movi	r16,2047
 400e19c:	003e1906 	br	400da04 <__alt_data_end+0xfc00da04>
 400e1a0:	000b883a 	mov	r5,zero
 400e1a4:	0005883a 	mov	r2,zero
 400e1a8:	003e2e06 	br	400da64 <__alt_data_end+0xfc00da64>
 400e1ac:	0401ffc4 	movi	r16,2047
 400e1b0:	003e1406 	br	400da04 <__alt_data_end+0xfc00da04>
 400e1b4:	0005883a 	mov	r2,zero
 400e1b8:	003f7506 	br	400df90 <__alt_data_end+0xfc00df90>
 400e1bc:	0005883a 	mov	r2,zero
 400e1c0:	0009883a 	mov	r4,zero
 400e1c4:	003e7806 	br	400dba8 <__alt_data_end+0xfc00dba8>
 400e1c8:	123ff804 	addi	r8,r2,-32
 400e1cc:	01000804 	movi	r4,32
 400e1d0:	1a10d83a 	srl	r8,r3,r8
 400e1d4:	11002526 	beq	r2,r4,400e26c <__subdf3+0x8ec>
 400e1d8:	01001004 	movi	r4,64
 400e1dc:	2085c83a 	sub	r2,r4,r2
 400e1e0:	1884983a 	sll	r2,r3,r2
 400e1e4:	1444b03a 	or	r2,r2,r17
 400e1e8:	1004c03a 	cmpne	r2,r2,zero
 400e1ec:	40a2b03a 	or	r17,r8,r2
 400e1f0:	0005883a 	mov	r2,zero
 400e1f4:	003f1606 	br	400de50 <__alt_data_end+0xfc00de50>
 400e1f8:	02000434 	movhi	r8,16
 400e1fc:	0009883a 	mov	r4,zero
 400e200:	423fffc4 	addi	r8,r8,-1
 400e204:	00bfffc4 	movi	r2,-1
 400e208:	0401ffc4 	movi	r16,2047
 400e20c:	003e6606 	br	400dba8 <__alt_data_end+0xfc00dba8>
 400e210:	1c62b03a 	or	r17,r3,r17
 400e214:	8822c03a 	cmpne	r17,r17,zero
 400e218:	0005883a 	mov	r2,zero
 400e21c:	003f9906 	br	400e084 <__alt_data_end+0xfc00e084>
 400e220:	2807883a 	mov	r3,r5
 400e224:	3023883a 	mov	r17,r6
 400e228:	0401ffc4 	movi	r16,2047
 400e22c:	003df506 	br	400da04 <__alt_data_end+0xfc00da04>
 400e230:	2807883a 	mov	r3,r5
 400e234:	3023883a 	mov	r17,r6
 400e238:	003df206 	br	400da04 <__alt_data_end+0xfc00da04>
 400e23c:	123ff804 	addi	r8,r2,-32
 400e240:	01000804 	movi	r4,32
 400e244:	1a10d83a 	srl	r8,r3,r8
 400e248:	11000a26 	beq	r2,r4,400e274 <__subdf3+0x8f4>
 400e24c:	01001004 	movi	r4,64
 400e250:	2085c83a 	sub	r2,r4,r2
 400e254:	1884983a 	sll	r2,r3,r2
 400e258:	1444b03a 	or	r2,r2,r17
 400e25c:	1004c03a 	cmpne	r2,r2,zero
 400e260:	40a2b03a 	or	r17,r8,r2
 400e264:	0005883a 	mov	r2,zero
 400e268:	003f8606 	br	400e084 <__alt_data_end+0xfc00e084>
 400e26c:	0005883a 	mov	r2,zero
 400e270:	003fdc06 	br	400e1e4 <__alt_data_end+0xfc00e1e4>
 400e274:	0005883a 	mov	r2,zero
 400e278:	003ff706 	br	400e258 <__alt_data_end+0xfc00e258>

0400e27c <__fixdfsi>:
 400e27c:	280cd53a 	srli	r6,r5,20
 400e280:	00c00434 	movhi	r3,16
 400e284:	18ffffc4 	addi	r3,r3,-1
 400e288:	3181ffcc 	andi	r6,r6,2047
 400e28c:	01c0ff84 	movi	r7,1022
 400e290:	28c6703a 	and	r3,r5,r3
 400e294:	280ad7fa 	srli	r5,r5,31
 400e298:	3980120e 	bge	r7,r6,400e2e4 <__fixdfsi+0x68>
 400e29c:	00810744 	movi	r2,1053
 400e2a0:	11800c16 	blt	r2,r6,400e2d4 <__fixdfsi+0x58>
 400e2a4:	00810cc4 	movi	r2,1075
 400e2a8:	1185c83a 	sub	r2,r2,r6
 400e2ac:	01c007c4 	movi	r7,31
 400e2b0:	18c00434 	orhi	r3,r3,16
 400e2b4:	38800d16 	blt	r7,r2,400e2ec <__fixdfsi+0x70>
 400e2b8:	31befb44 	addi	r6,r6,-1043
 400e2bc:	2084d83a 	srl	r2,r4,r2
 400e2c0:	1986983a 	sll	r3,r3,r6
 400e2c4:	1884b03a 	or	r2,r3,r2
 400e2c8:	28000726 	beq	r5,zero,400e2e8 <__fixdfsi+0x6c>
 400e2cc:	0085c83a 	sub	r2,zero,r2
 400e2d0:	f800283a 	ret
 400e2d4:	00a00034 	movhi	r2,32768
 400e2d8:	10bfffc4 	addi	r2,r2,-1
 400e2dc:	2885883a 	add	r2,r5,r2
 400e2e0:	f800283a 	ret
 400e2e4:	0005883a 	mov	r2,zero
 400e2e8:	f800283a 	ret
 400e2ec:	008104c4 	movi	r2,1043
 400e2f0:	1185c83a 	sub	r2,r2,r6
 400e2f4:	1884d83a 	srl	r2,r3,r2
 400e2f8:	003ff306 	br	400e2c8 <__alt_data_end+0xfc00e2c8>

0400e2fc <__floatsidf>:
 400e2fc:	defffd04 	addi	sp,sp,-12
 400e300:	dfc00215 	stw	ra,8(sp)
 400e304:	dc400115 	stw	r17,4(sp)
 400e308:	dc000015 	stw	r16,0(sp)
 400e30c:	20002b26 	beq	r4,zero,400e3bc <__floatsidf+0xc0>
 400e310:	2023883a 	mov	r17,r4
 400e314:	2020d7fa 	srli	r16,r4,31
 400e318:	20002d16 	blt	r4,zero,400e3d0 <__floatsidf+0xd4>
 400e31c:	8809883a 	mov	r4,r17
 400e320:	400e4800 	call	400e480 <__clzsi2>
 400e324:	01410784 	movi	r5,1054
 400e328:	288bc83a 	sub	r5,r5,r2
 400e32c:	01010cc4 	movi	r4,1075
 400e330:	2149c83a 	sub	r4,r4,r5
 400e334:	00c007c4 	movi	r3,31
 400e338:	1900160e 	bge	r3,r4,400e394 <__floatsidf+0x98>
 400e33c:	00c104c4 	movi	r3,1043
 400e340:	1947c83a 	sub	r3,r3,r5
 400e344:	88c6983a 	sll	r3,r17,r3
 400e348:	00800434 	movhi	r2,16
 400e34c:	10bfffc4 	addi	r2,r2,-1
 400e350:	1886703a 	and	r3,r3,r2
 400e354:	2941ffcc 	andi	r5,r5,2047
 400e358:	800d883a 	mov	r6,r16
 400e35c:	0005883a 	mov	r2,zero
 400e360:	280a953a 	slli	r5,r5,20
 400e364:	31803fcc 	andi	r6,r6,255
 400e368:	01000434 	movhi	r4,16
 400e36c:	300c97fa 	slli	r6,r6,31
 400e370:	213fffc4 	addi	r4,r4,-1
 400e374:	1906703a 	and	r3,r3,r4
 400e378:	1946b03a 	or	r3,r3,r5
 400e37c:	1986b03a 	or	r3,r3,r6
 400e380:	dfc00217 	ldw	ra,8(sp)
 400e384:	dc400117 	ldw	r17,4(sp)
 400e388:	dc000017 	ldw	r16,0(sp)
 400e38c:	dec00304 	addi	sp,sp,12
 400e390:	f800283a 	ret
 400e394:	00c002c4 	movi	r3,11
 400e398:	1887c83a 	sub	r3,r3,r2
 400e39c:	88c6d83a 	srl	r3,r17,r3
 400e3a0:	8904983a 	sll	r2,r17,r4
 400e3a4:	01000434 	movhi	r4,16
 400e3a8:	213fffc4 	addi	r4,r4,-1
 400e3ac:	2941ffcc 	andi	r5,r5,2047
 400e3b0:	1906703a 	and	r3,r3,r4
 400e3b4:	800d883a 	mov	r6,r16
 400e3b8:	003fe906 	br	400e360 <__alt_data_end+0xfc00e360>
 400e3bc:	000d883a 	mov	r6,zero
 400e3c0:	000b883a 	mov	r5,zero
 400e3c4:	0007883a 	mov	r3,zero
 400e3c8:	0005883a 	mov	r2,zero
 400e3cc:	003fe406 	br	400e360 <__alt_data_end+0xfc00e360>
 400e3d0:	0123c83a 	sub	r17,zero,r4
 400e3d4:	003fd106 	br	400e31c <__alt_data_end+0xfc00e31c>

0400e3d8 <__floatunsidf>:
 400e3d8:	defffe04 	addi	sp,sp,-8
 400e3dc:	dc000015 	stw	r16,0(sp)
 400e3e0:	dfc00115 	stw	ra,4(sp)
 400e3e4:	2021883a 	mov	r16,r4
 400e3e8:	20002226 	beq	r4,zero,400e474 <__floatunsidf+0x9c>
 400e3ec:	400e4800 	call	400e480 <__clzsi2>
 400e3f0:	01010784 	movi	r4,1054
 400e3f4:	2089c83a 	sub	r4,r4,r2
 400e3f8:	01810cc4 	movi	r6,1075
 400e3fc:	310dc83a 	sub	r6,r6,r4
 400e400:	00c007c4 	movi	r3,31
 400e404:	1980120e 	bge	r3,r6,400e450 <__floatunsidf+0x78>
 400e408:	00c104c4 	movi	r3,1043
 400e40c:	1907c83a 	sub	r3,r3,r4
 400e410:	80ca983a 	sll	r5,r16,r3
 400e414:	00800434 	movhi	r2,16
 400e418:	10bfffc4 	addi	r2,r2,-1
 400e41c:	2101ffcc 	andi	r4,r4,2047
 400e420:	0021883a 	mov	r16,zero
 400e424:	288a703a 	and	r5,r5,r2
 400e428:	2008953a 	slli	r4,r4,20
 400e42c:	00c00434 	movhi	r3,16
 400e430:	18ffffc4 	addi	r3,r3,-1
 400e434:	28c6703a 	and	r3,r5,r3
 400e438:	8005883a 	mov	r2,r16
 400e43c:	1906b03a 	or	r3,r3,r4
 400e440:	dfc00117 	ldw	ra,4(sp)
 400e444:	dc000017 	ldw	r16,0(sp)
 400e448:	dec00204 	addi	sp,sp,8
 400e44c:	f800283a 	ret
 400e450:	00c002c4 	movi	r3,11
 400e454:	188bc83a 	sub	r5,r3,r2
 400e458:	814ad83a 	srl	r5,r16,r5
 400e45c:	00c00434 	movhi	r3,16
 400e460:	18ffffc4 	addi	r3,r3,-1
 400e464:	81a0983a 	sll	r16,r16,r6
 400e468:	2101ffcc 	andi	r4,r4,2047
 400e46c:	28ca703a 	and	r5,r5,r3
 400e470:	003fed06 	br	400e428 <__alt_data_end+0xfc00e428>
 400e474:	0009883a 	mov	r4,zero
 400e478:	000b883a 	mov	r5,zero
 400e47c:	003fea06 	br	400e428 <__alt_data_end+0xfc00e428>

0400e480 <__clzsi2>:
 400e480:	00bfffd4 	movui	r2,65535
 400e484:	11000536 	bltu	r2,r4,400e49c <__clzsi2+0x1c>
 400e488:	00803fc4 	movi	r2,255
 400e48c:	11000f36 	bltu	r2,r4,400e4cc <__clzsi2+0x4c>
 400e490:	00800804 	movi	r2,32
 400e494:	0007883a 	mov	r3,zero
 400e498:	00000506 	br	400e4b0 <__clzsi2+0x30>
 400e49c:	00804034 	movhi	r2,256
 400e4a0:	10bfffc4 	addi	r2,r2,-1
 400e4a4:	11000c2e 	bgeu	r2,r4,400e4d8 <__clzsi2+0x58>
 400e4a8:	00800204 	movi	r2,8
 400e4ac:	00c00604 	movi	r3,24
 400e4b0:	20c8d83a 	srl	r4,r4,r3
 400e4b4:	00c100f4 	movhi	r3,1027
 400e4b8:	18c5a504 	addi	r3,r3,5780
 400e4bc:	1909883a 	add	r4,r3,r4
 400e4c0:	20c00003 	ldbu	r3,0(r4)
 400e4c4:	10c5c83a 	sub	r2,r2,r3
 400e4c8:	f800283a 	ret
 400e4cc:	00800604 	movi	r2,24
 400e4d0:	00c00204 	movi	r3,8
 400e4d4:	003ff606 	br	400e4b0 <__alt_data_end+0xfc00e4b0>
 400e4d8:	00800404 	movi	r2,16
 400e4dc:	1007883a 	mov	r3,r2
 400e4e0:	003ff306 	br	400e4b0 <__alt_data_end+0xfc00e4b0>

0400e4e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e4e4:	defffe04 	addi	sp,sp,-8
 400e4e8:	dfc00115 	stw	ra,4(sp)
 400e4ec:	df000015 	stw	fp,0(sp)
 400e4f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e4f4:	d0a00c17 	ldw	r2,-32720(gp)
 400e4f8:	10000326 	beq	r2,zero,400e508 <alt_get_errno+0x24>
 400e4fc:	d0a00c17 	ldw	r2,-32720(gp)
 400e500:	103ee83a 	callr	r2
 400e504:	00000106 	br	400e50c <alt_get_errno+0x28>
 400e508:	d0acb304 	addi	r2,gp,-19764
}
 400e50c:	e037883a 	mov	sp,fp
 400e510:	dfc00117 	ldw	ra,4(sp)
 400e514:	df000017 	ldw	fp,0(sp)
 400e518:	dec00204 	addi	sp,sp,8
 400e51c:	f800283a 	ret

0400e520 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400e520:	defffb04 	addi	sp,sp,-20
 400e524:	dfc00415 	stw	ra,16(sp)
 400e528:	df000315 	stw	fp,12(sp)
 400e52c:	df000304 	addi	fp,sp,12
 400e530:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400e534:	e0bfff17 	ldw	r2,-4(fp)
 400e538:	10000616 	blt	r2,zero,400e554 <close+0x34>
 400e53c:	e0bfff17 	ldw	r2,-4(fp)
 400e540:	10c00324 	muli	r3,r2,12
 400e544:	008100f4 	movhi	r2,1027
 400e548:	108e0304 	addi	r2,r2,14348
 400e54c:	1885883a 	add	r2,r3,r2
 400e550:	00000106 	br	400e558 <close+0x38>
 400e554:	0005883a 	mov	r2,zero
 400e558:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400e55c:	e0bffd17 	ldw	r2,-12(fp)
 400e560:	10001926 	beq	r2,zero,400e5c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400e564:	e0bffd17 	ldw	r2,-12(fp)
 400e568:	10800017 	ldw	r2,0(r2)
 400e56c:	10800417 	ldw	r2,16(r2)
 400e570:	10000626 	beq	r2,zero,400e58c <close+0x6c>
 400e574:	e0bffd17 	ldw	r2,-12(fp)
 400e578:	10800017 	ldw	r2,0(r2)
 400e57c:	10800417 	ldw	r2,16(r2)
 400e580:	e13ffd17 	ldw	r4,-12(fp)
 400e584:	103ee83a 	callr	r2
 400e588:	00000106 	br	400e590 <close+0x70>
 400e58c:	0005883a 	mov	r2,zero
 400e590:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400e594:	e13fff17 	ldw	r4,-4(fp)
 400e598:	400ee800 	call	400ee80 <alt_release_fd>
    if (rval < 0)
 400e59c:	e0bffe17 	ldw	r2,-8(fp)
 400e5a0:	1000070e 	bge	r2,zero,400e5c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400e5a4:	400e4e40 	call	400e4e4 <alt_get_errno>
 400e5a8:	1007883a 	mov	r3,r2
 400e5ac:	e0bffe17 	ldw	r2,-8(fp)
 400e5b0:	0085c83a 	sub	r2,zero,r2
 400e5b4:	18800015 	stw	r2,0(r3)
      return -1;
 400e5b8:	00bfffc4 	movi	r2,-1
 400e5bc:	00000706 	br	400e5dc <close+0xbc>
    }
    return 0;
 400e5c0:	0005883a 	mov	r2,zero
 400e5c4:	00000506 	br	400e5dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e5c8:	400e4e40 	call	400e4e4 <alt_get_errno>
 400e5cc:	1007883a 	mov	r3,r2
 400e5d0:	00801444 	movi	r2,81
 400e5d4:	18800015 	stw	r2,0(r3)
    return -1;
 400e5d8:	00bfffc4 	movi	r2,-1
  }
}
 400e5dc:	e037883a 	mov	sp,fp
 400e5e0:	dfc00117 	ldw	ra,4(sp)
 400e5e4:	df000017 	ldw	fp,0(sp)
 400e5e8:	dec00204 	addi	sp,sp,8
 400e5ec:	f800283a 	ret

0400e5f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400e5f0:	defffc04 	addi	sp,sp,-16
 400e5f4:	df000315 	stw	fp,12(sp)
 400e5f8:	df000304 	addi	fp,sp,12
 400e5fc:	e13ffd15 	stw	r4,-12(fp)
 400e600:	e17ffe15 	stw	r5,-8(fp)
 400e604:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400e608:	e0bfff17 	ldw	r2,-4(fp)
}
 400e60c:	e037883a 	mov	sp,fp
 400e610:	df000017 	ldw	fp,0(sp)
 400e614:	dec00104 	addi	sp,sp,4
 400e618:	f800283a 	ret

0400e61c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e61c:	defffe04 	addi	sp,sp,-8
 400e620:	dfc00115 	stw	ra,4(sp)
 400e624:	df000015 	stw	fp,0(sp)
 400e628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e62c:	d0a00c17 	ldw	r2,-32720(gp)
 400e630:	10000326 	beq	r2,zero,400e640 <alt_get_errno+0x24>
 400e634:	d0a00c17 	ldw	r2,-32720(gp)
 400e638:	103ee83a 	callr	r2
 400e63c:	00000106 	br	400e644 <alt_get_errno+0x28>
 400e640:	d0acb304 	addi	r2,gp,-19764
}
 400e644:	e037883a 	mov	sp,fp
 400e648:	dfc00117 	ldw	ra,4(sp)
 400e64c:	df000017 	ldw	fp,0(sp)
 400e650:	dec00204 	addi	sp,sp,8
 400e654:	f800283a 	ret

0400e658 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400e658:	defffb04 	addi	sp,sp,-20
 400e65c:	dfc00415 	stw	ra,16(sp)
 400e660:	df000315 	stw	fp,12(sp)
 400e664:	df000304 	addi	fp,sp,12
 400e668:	e13ffe15 	stw	r4,-8(fp)
 400e66c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e670:	e0bffe17 	ldw	r2,-8(fp)
 400e674:	10000616 	blt	r2,zero,400e690 <fstat+0x38>
 400e678:	e0bffe17 	ldw	r2,-8(fp)
 400e67c:	10c00324 	muli	r3,r2,12
 400e680:	008100f4 	movhi	r2,1027
 400e684:	108e0304 	addi	r2,r2,14348
 400e688:	1885883a 	add	r2,r3,r2
 400e68c:	00000106 	br	400e694 <fstat+0x3c>
 400e690:	0005883a 	mov	r2,zero
 400e694:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400e698:	e0bffd17 	ldw	r2,-12(fp)
 400e69c:	10001026 	beq	r2,zero,400e6e0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400e6a0:	e0bffd17 	ldw	r2,-12(fp)
 400e6a4:	10800017 	ldw	r2,0(r2)
 400e6a8:	10800817 	ldw	r2,32(r2)
 400e6ac:	10000726 	beq	r2,zero,400e6cc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400e6b0:	e0bffd17 	ldw	r2,-12(fp)
 400e6b4:	10800017 	ldw	r2,0(r2)
 400e6b8:	10800817 	ldw	r2,32(r2)
 400e6bc:	e17fff17 	ldw	r5,-4(fp)
 400e6c0:	e13ffd17 	ldw	r4,-12(fp)
 400e6c4:	103ee83a 	callr	r2
 400e6c8:	00000a06 	br	400e6f4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400e6cc:	e0bfff17 	ldw	r2,-4(fp)
 400e6d0:	00c80004 	movi	r3,8192
 400e6d4:	10c00115 	stw	r3,4(r2)
      return 0;
 400e6d8:	0005883a 	mov	r2,zero
 400e6dc:	00000506 	br	400e6f4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e6e0:	400e61c0 	call	400e61c <alt_get_errno>
 400e6e4:	1007883a 	mov	r3,r2
 400e6e8:	00801444 	movi	r2,81
 400e6ec:	18800015 	stw	r2,0(r3)
    return -1;
 400e6f0:	00bfffc4 	movi	r2,-1
  }
}
 400e6f4:	e037883a 	mov	sp,fp
 400e6f8:	dfc00117 	ldw	ra,4(sp)
 400e6fc:	df000017 	ldw	fp,0(sp)
 400e700:	dec00204 	addi	sp,sp,8
 400e704:	f800283a 	ret

0400e708 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400e708:	defff904 	addi	sp,sp,-28
 400e70c:	dfc00615 	stw	ra,24(sp)
 400e710:	df000515 	stw	fp,20(sp)
 400e714:	df000504 	addi	fp,sp,20
 400e718:	e13ffc15 	stw	r4,-16(fp)
 400e71c:	e17ffd15 	stw	r5,-12(fp)
 400e720:	e1bffe15 	stw	r6,-8(fp)
 400e724:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400e728:	e0800217 	ldw	r2,8(fp)
 400e72c:	d8800015 	stw	r2,0(sp)
 400e730:	e1ffff17 	ldw	r7,-4(fp)
 400e734:	e1bffe17 	ldw	r6,-8(fp)
 400e738:	e17ffd17 	ldw	r5,-12(fp)
 400e73c:	e13ffc17 	ldw	r4,-16(fp)
 400e740:	400e8b80 	call	400e8b8 <alt_iic_isr_register>
}  
 400e744:	e037883a 	mov	sp,fp
 400e748:	dfc00117 	ldw	ra,4(sp)
 400e74c:	df000017 	ldw	fp,0(sp)
 400e750:	dec00204 	addi	sp,sp,8
 400e754:	f800283a 	ret

0400e758 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400e758:	defff904 	addi	sp,sp,-28
 400e75c:	df000615 	stw	fp,24(sp)
 400e760:	df000604 	addi	fp,sp,24
 400e764:	e13ffe15 	stw	r4,-8(fp)
 400e768:	e17fff15 	stw	r5,-4(fp)
 400e76c:	e0bfff17 	ldw	r2,-4(fp)
 400e770:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e774:	0005303a 	rdctl	r2,status
 400e778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e77c:	e0fffb17 	ldw	r3,-20(fp)
 400e780:	00bfff84 	movi	r2,-2
 400e784:	1884703a 	and	r2,r3,r2
 400e788:	1001703a 	wrctl	status,r2
  
  return context;
 400e78c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400e790:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400e794:	00c00044 	movi	r3,1
 400e798:	e0bffa17 	ldw	r2,-24(fp)
 400e79c:	1884983a 	sll	r2,r3,r2
 400e7a0:	1007883a 	mov	r3,r2
 400e7a4:	d0acb417 	ldw	r2,-19760(gp)
 400e7a8:	1884b03a 	or	r2,r3,r2
 400e7ac:	d0acb415 	stw	r2,-19760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400e7b0:	d0acb417 	ldw	r2,-19760(gp)
 400e7b4:	100170fa 	wrctl	ienable,r2
 400e7b8:	e0bffc17 	ldw	r2,-16(fp)
 400e7bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e7c0:	e0bffd17 	ldw	r2,-12(fp)
 400e7c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400e7c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400e7cc:	0001883a 	nop
}
 400e7d0:	e037883a 	mov	sp,fp
 400e7d4:	df000017 	ldw	fp,0(sp)
 400e7d8:	dec00104 	addi	sp,sp,4
 400e7dc:	f800283a 	ret

0400e7e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400e7e0:	defff904 	addi	sp,sp,-28
 400e7e4:	df000615 	stw	fp,24(sp)
 400e7e8:	df000604 	addi	fp,sp,24
 400e7ec:	e13ffe15 	stw	r4,-8(fp)
 400e7f0:	e17fff15 	stw	r5,-4(fp)
 400e7f4:	e0bfff17 	ldw	r2,-4(fp)
 400e7f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e7fc:	0005303a 	rdctl	r2,status
 400e800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e804:	e0fffb17 	ldw	r3,-20(fp)
 400e808:	00bfff84 	movi	r2,-2
 400e80c:	1884703a 	and	r2,r3,r2
 400e810:	1001703a 	wrctl	status,r2
  
  return context;
 400e814:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400e818:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400e81c:	00c00044 	movi	r3,1
 400e820:	e0bffa17 	ldw	r2,-24(fp)
 400e824:	1884983a 	sll	r2,r3,r2
 400e828:	0084303a 	nor	r2,zero,r2
 400e82c:	1007883a 	mov	r3,r2
 400e830:	d0acb417 	ldw	r2,-19760(gp)
 400e834:	1884703a 	and	r2,r3,r2
 400e838:	d0acb415 	stw	r2,-19760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400e83c:	d0acb417 	ldw	r2,-19760(gp)
 400e840:	100170fa 	wrctl	ienable,r2
 400e844:	e0bffc17 	ldw	r2,-16(fp)
 400e848:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e84c:	e0bffd17 	ldw	r2,-12(fp)
 400e850:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400e854:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400e858:	0001883a 	nop
}
 400e85c:	e037883a 	mov	sp,fp
 400e860:	df000017 	ldw	fp,0(sp)
 400e864:	dec00104 	addi	sp,sp,4
 400e868:	f800283a 	ret

0400e86c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400e86c:	defffc04 	addi	sp,sp,-16
 400e870:	df000315 	stw	fp,12(sp)
 400e874:	df000304 	addi	fp,sp,12
 400e878:	e13ffe15 	stw	r4,-8(fp)
 400e87c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400e880:	000530fa 	rdctl	r2,ienable
 400e884:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400e888:	00c00044 	movi	r3,1
 400e88c:	e0bfff17 	ldw	r2,-4(fp)
 400e890:	1884983a 	sll	r2,r3,r2
 400e894:	1007883a 	mov	r3,r2
 400e898:	e0bffd17 	ldw	r2,-12(fp)
 400e89c:	1884703a 	and	r2,r3,r2
 400e8a0:	1004c03a 	cmpne	r2,r2,zero
 400e8a4:	10803fcc 	andi	r2,r2,255
}
 400e8a8:	e037883a 	mov	sp,fp
 400e8ac:	df000017 	ldw	fp,0(sp)
 400e8b0:	dec00104 	addi	sp,sp,4
 400e8b4:	f800283a 	ret

0400e8b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400e8b8:	defff504 	addi	sp,sp,-44
 400e8bc:	dfc00a15 	stw	ra,40(sp)
 400e8c0:	df000915 	stw	fp,36(sp)
 400e8c4:	df000904 	addi	fp,sp,36
 400e8c8:	e13ffc15 	stw	r4,-16(fp)
 400e8cc:	e17ffd15 	stw	r5,-12(fp)
 400e8d0:	e1bffe15 	stw	r6,-8(fp)
 400e8d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400e8d8:	00bffa84 	movi	r2,-22
 400e8dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400e8e0:	e0bffd17 	ldw	r2,-12(fp)
 400e8e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400e8e8:	e0bff817 	ldw	r2,-32(fp)
 400e8ec:	10800808 	cmpgei	r2,r2,32
 400e8f0:	1000271e 	bne	r2,zero,400e990 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e8f4:	0005303a 	rdctl	r2,status
 400e8f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e8fc:	e0fffb17 	ldw	r3,-20(fp)
 400e900:	00bfff84 	movi	r2,-2
 400e904:	1884703a 	and	r2,r3,r2
 400e908:	1001703a 	wrctl	status,r2
  
  return context;
 400e90c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400e910:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400e914:	008100f4 	movhi	r2,1027
 400e918:	109f4004 	addi	r2,r2,32000
 400e91c:	e0fff817 	ldw	r3,-32(fp)
 400e920:	180690fa 	slli	r3,r3,3
 400e924:	10c5883a 	add	r2,r2,r3
 400e928:	e0fffe17 	ldw	r3,-8(fp)
 400e92c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400e930:	008100f4 	movhi	r2,1027
 400e934:	109f4004 	addi	r2,r2,32000
 400e938:	e0fff817 	ldw	r3,-32(fp)
 400e93c:	180690fa 	slli	r3,r3,3
 400e940:	10c5883a 	add	r2,r2,r3
 400e944:	10800104 	addi	r2,r2,4
 400e948:	e0ffff17 	ldw	r3,-4(fp)
 400e94c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400e950:	e0bffe17 	ldw	r2,-8(fp)
 400e954:	10000526 	beq	r2,zero,400e96c <alt_iic_isr_register+0xb4>
 400e958:	e0bff817 	ldw	r2,-32(fp)
 400e95c:	100b883a 	mov	r5,r2
 400e960:	e13ffc17 	ldw	r4,-16(fp)
 400e964:	400e7580 	call	400e758 <alt_ic_irq_enable>
 400e968:	00000406 	br	400e97c <alt_iic_isr_register+0xc4>
 400e96c:	e0bff817 	ldw	r2,-32(fp)
 400e970:	100b883a 	mov	r5,r2
 400e974:	e13ffc17 	ldw	r4,-16(fp)
 400e978:	400e7e00 	call	400e7e0 <alt_ic_irq_disable>
 400e97c:	e0bff715 	stw	r2,-36(fp)
 400e980:	e0bffa17 	ldw	r2,-24(fp)
 400e984:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e988:	e0bff917 	ldw	r2,-28(fp)
 400e98c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400e990:	e0bff717 	ldw	r2,-36(fp)
}
 400e994:	e037883a 	mov	sp,fp
 400e998:	dfc00117 	ldw	ra,4(sp)
 400e99c:	df000017 	ldw	fp,0(sp)
 400e9a0:	dec00204 	addi	sp,sp,8
 400e9a4:	f800283a 	ret

0400e9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e9a8:	defffe04 	addi	sp,sp,-8
 400e9ac:	dfc00115 	stw	ra,4(sp)
 400e9b0:	df000015 	stw	fp,0(sp)
 400e9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e9b8:	d0a00c17 	ldw	r2,-32720(gp)
 400e9bc:	10000326 	beq	r2,zero,400e9cc <alt_get_errno+0x24>
 400e9c0:	d0a00c17 	ldw	r2,-32720(gp)
 400e9c4:	103ee83a 	callr	r2
 400e9c8:	00000106 	br	400e9d0 <alt_get_errno+0x28>
 400e9cc:	d0acb304 	addi	r2,gp,-19764
}
 400e9d0:	e037883a 	mov	sp,fp
 400e9d4:	dfc00117 	ldw	ra,4(sp)
 400e9d8:	df000017 	ldw	fp,0(sp)
 400e9dc:	dec00204 	addi	sp,sp,8
 400e9e0:	f800283a 	ret

0400e9e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400e9e4:	deffed04 	addi	sp,sp,-76
 400e9e8:	dfc01215 	stw	ra,72(sp)
 400e9ec:	df001115 	stw	fp,68(sp)
 400e9f0:	df001104 	addi	fp,sp,68
 400e9f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e9f8:	e0bfff17 	ldw	r2,-4(fp)
 400e9fc:	10000616 	blt	r2,zero,400ea18 <isatty+0x34>
 400ea00:	e0bfff17 	ldw	r2,-4(fp)
 400ea04:	10c00324 	muli	r3,r2,12
 400ea08:	008100f4 	movhi	r2,1027
 400ea0c:	108e0304 	addi	r2,r2,14348
 400ea10:	1885883a 	add	r2,r3,r2
 400ea14:	00000106 	br	400ea1c <isatty+0x38>
 400ea18:	0005883a 	mov	r2,zero
 400ea1c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400ea20:	e0bfef17 	ldw	r2,-68(fp)
 400ea24:	10000e26 	beq	r2,zero,400ea60 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400ea28:	e0bfef17 	ldw	r2,-68(fp)
 400ea2c:	10800017 	ldw	r2,0(r2)
 400ea30:	10800817 	ldw	r2,32(r2)
 400ea34:	1000021e 	bne	r2,zero,400ea40 <isatty+0x5c>
    {
      return 1;
 400ea38:	00800044 	movi	r2,1
 400ea3c:	00000d06 	br	400ea74 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400ea40:	e0bff004 	addi	r2,fp,-64
 400ea44:	100b883a 	mov	r5,r2
 400ea48:	e13fff17 	ldw	r4,-4(fp)
 400ea4c:	400e6580 	call	400e658 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400ea50:	e0bff117 	ldw	r2,-60(fp)
 400ea54:	10880020 	cmpeqi	r2,r2,8192
 400ea58:	10803fcc 	andi	r2,r2,255
 400ea5c:	00000506 	br	400ea74 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ea60:	400e9a80 	call	400e9a8 <alt_get_errno>
 400ea64:	1007883a 	mov	r3,r2
 400ea68:	00801444 	movi	r2,81
 400ea6c:	18800015 	stw	r2,0(r3)
    return 0;
 400ea70:	0005883a 	mov	r2,zero
  }
}
 400ea74:	e037883a 	mov	sp,fp
 400ea78:	dfc00117 	ldw	ra,4(sp)
 400ea7c:	df000017 	ldw	fp,0(sp)
 400ea80:	dec00204 	addi	sp,sp,8
 400ea84:	f800283a 	ret

0400ea88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400ea88:	defffc04 	addi	sp,sp,-16
 400ea8c:	df000315 	stw	fp,12(sp)
 400ea90:	df000304 	addi	fp,sp,12
 400ea94:	e13ffd15 	stw	r4,-12(fp)
 400ea98:	e17ffe15 	stw	r5,-8(fp)
 400ea9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400eaa0:	e0fffe17 	ldw	r3,-8(fp)
 400eaa4:	e0bffd17 	ldw	r2,-12(fp)
 400eaa8:	18800c26 	beq	r3,r2,400eadc <alt_load_section+0x54>
  {
    while( to != end )
 400eaac:	00000806 	br	400ead0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400eab0:	e0bffe17 	ldw	r2,-8(fp)
 400eab4:	10c00104 	addi	r3,r2,4
 400eab8:	e0fffe15 	stw	r3,-8(fp)
 400eabc:	e0fffd17 	ldw	r3,-12(fp)
 400eac0:	19000104 	addi	r4,r3,4
 400eac4:	e13ffd15 	stw	r4,-12(fp)
 400eac8:	18c00017 	ldw	r3,0(r3)
 400eacc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400ead0:	e0fffe17 	ldw	r3,-8(fp)
 400ead4:	e0bfff17 	ldw	r2,-4(fp)
 400ead8:	18bff51e 	bne	r3,r2,400eab0 <__alt_data_end+0xfc00eab0>
    {
      *to++ = *from++;
    }
  }
}
 400eadc:	0001883a 	nop
 400eae0:	e037883a 	mov	sp,fp
 400eae4:	df000017 	ldw	fp,0(sp)
 400eae8:	dec00104 	addi	sp,sp,4
 400eaec:	f800283a 	ret

0400eaf0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400eaf0:	defffe04 	addi	sp,sp,-8
 400eaf4:	dfc00115 	stw	ra,4(sp)
 400eaf8:	df000015 	stw	fp,0(sp)
 400eafc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400eb00:	018100f4 	movhi	r6,1027
 400eb04:	31928c04 	addi	r6,r6,18992
 400eb08:	014100f4 	movhi	r5,1027
 400eb0c:	2945f004 	addi	r5,r5,6080
 400eb10:	010100f4 	movhi	r4,1027
 400eb14:	21128c04 	addi	r4,r4,18992
 400eb18:	400ea880 	call	400ea88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400eb1c:	01810034 	movhi	r6,1024
 400eb20:	31809104 	addi	r6,r6,580
 400eb24:	01410034 	movhi	r5,1024
 400eb28:	29400804 	addi	r5,r5,32
 400eb2c:	01010034 	movhi	r4,1024
 400eb30:	21000804 	addi	r4,r4,32
 400eb34:	400ea880 	call	400ea88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400eb38:	018100f4 	movhi	r6,1027
 400eb3c:	3185f004 	addi	r6,r6,6080
 400eb40:	01410074 	movhi	r5,1025
 400eb44:	2946c404 	addi	r5,r5,6928
 400eb48:	01010074 	movhi	r4,1025
 400eb4c:	2106c404 	addi	r4,r4,6928
 400eb50:	400ea880 	call	400ea88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400eb54:	4010e400 	call	4010e40 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400eb58:	40110280 	call	4011028 <alt_icache_flush_all>
}
 400eb5c:	0001883a 	nop
 400eb60:	e037883a 	mov	sp,fp
 400eb64:	dfc00117 	ldw	ra,4(sp)
 400eb68:	df000017 	ldw	fp,0(sp)
 400eb6c:	dec00204 	addi	sp,sp,8
 400eb70:	f800283a 	ret

0400eb74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eb74:	defffe04 	addi	sp,sp,-8
 400eb78:	dfc00115 	stw	ra,4(sp)
 400eb7c:	df000015 	stw	fp,0(sp)
 400eb80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400eb84:	d0a00c17 	ldw	r2,-32720(gp)
 400eb88:	10000326 	beq	r2,zero,400eb98 <alt_get_errno+0x24>
 400eb8c:	d0a00c17 	ldw	r2,-32720(gp)
 400eb90:	103ee83a 	callr	r2
 400eb94:	00000106 	br	400eb9c <alt_get_errno+0x28>
 400eb98:	d0acb304 	addi	r2,gp,-19764
}
 400eb9c:	e037883a 	mov	sp,fp
 400eba0:	dfc00117 	ldw	ra,4(sp)
 400eba4:	df000017 	ldw	fp,0(sp)
 400eba8:	dec00204 	addi	sp,sp,8
 400ebac:	f800283a 	ret

0400ebb0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400ebb0:	defff904 	addi	sp,sp,-28
 400ebb4:	dfc00615 	stw	ra,24(sp)
 400ebb8:	df000515 	stw	fp,20(sp)
 400ebbc:	df000504 	addi	fp,sp,20
 400ebc0:	e13ffd15 	stw	r4,-12(fp)
 400ebc4:	e17ffe15 	stw	r5,-8(fp)
 400ebc8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400ebcc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ebd0:	e0bffd17 	ldw	r2,-12(fp)
 400ebd4:	10000616 	blt	r2,zero,400ebf0 <lseek+0x40>
 400ebd8:	e0bffd17 	ldw	r2,-12(fp)
 400ebdc:	10c00324 	muli	r3,r2,12
 400ebe0:	008100f4 	movhi	r2,1027
 400ebe4:	108e0304 	addi	r2,r2,14348
 400ebe8:	1885883a 	add	r2,r3,r2
 400ebec:	00000106 	br	400ebf4 <lseek+0x44>
 400ebf0:	0005883a 	mov	r2,zero
 400ebf4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400ebf8:	e0bffc17 	ldw	r2,-16(fp)
 400ebfc:	10001026 	beq	r2,zero,400ec40 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400ec00:	e0bffc17 	ldw	r2,-16(fp)
 400ec04:	10800017 	ldw	r2,0(r2)
 400ec08:	10800717 	ldw	r2,28(r2)
 400ec0c:	10000926 	beq	r2,zero,400ec34 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400ec10:	e0bffc17 	ldw	r2,-16(fp)
 400ec14:	10800017 	ldw	r2,0(r2)
 400ec18:	10800717 	ldw	r2,28(r2)
 400ec1c:	e1bfff17 	ldw	r6,-4(fp)
 400ec20:	e17ffe17 	ldw	r5,-8(fp)
 400ec24:	e13ffc17 	ldw	r4,-16(fp)
 400ec28:	103ee83a 	callr	r2
 400ec2c:	e0bffb15 	stw	r2,-20(fp)
 400ec30:	00000506 	br	400ec48 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400ec34:	00bfde84 	movi	r2,-134
 400ec38:	e0bffb15 	stw	r2,-20(fp)
 400ec3c:	00000206 	br	400ec48 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400ec40:	00bfebc4 	movi	r2,-81
 400ec44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400ec48:	e0bffb17 	ldw	r2,-20(fp)
 400ec4c:	1000070e 	bge	r2,zero,400ec6c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400ec50:	400eb740 	call	400eb74 <alt_get_errno>
 400ec54:	1007883a 	mov	r3,r2
 400ec58:	e0bffb17 	ldw	r2,-20(fp)
 400ec5c:	0085c83a 	sub	r2,zero,r2
 400ec60:	18800015 	stw	r2,0(r3)
    rc = -1;
 400ec64:	00bfffc4 	movi	r2,-1
 400ec68:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400ec6c:	e0bffb17 	ldw	r2,-20(fp)
}
 400ec70:	e037883a 	mov	sp,fp
 400ec74:	dfc00117 	ldw	ra,4(sp)
 400ec78:	df000017 	ldw	fp,0(sp)
 400ec7c:	dec00204 	addi	sp,sp,8
 400ec80:	f800283a 	ret

0400ec84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400ec84:	defffd04 	addi	sp,sp,-12
 400ec88:	dfc00215 	stw	ra,8(sp)
 400ec8c:	df000115 	stw	fp,4(sp)
 400ec90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400ec94:	0009883a 	mov	r4,zero
 400ec98:	400f2d00 	call	400f2d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400ec9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400eca0:	400f3080 	call	400f308 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400eca4:	018100f4 	movhi	r6,1027
 400eca8:	3185e804 	addi	r6,r6,6048
 400ecac:	014100f4 	movhi	r5,1027
 400ecb0:	2945e804 	addi	r5,r5,6048
 400ecb4:	010100f4 	movhi	r4,1027
 400ecb8:	2105e804 	addi	r4,r4,6048
 400ecbc:	40111bc0 	call	40111bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400ecc0:	4010f680 	call	4010f68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400ecc4:	01010074 	movhi	r4,1025
 400ecc8:	2103f204 	addi	r4,r4,4040
 400eccc:	401177c0 	call	401177c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400ecd0:	d0acb517 	ldw	r2,-19756(gp)
 400ecd4:	d0ecb617 	ldw	r3,-19752(gp)
 400ecd8:	d12cb717 	ldw	r4,-19748(gp)
 400ecdc:	200d883a 	mov	r6,r4
 400ece0:	180b883a 	mov	r5,r3
 400ece4:	1009883a 	mov	r4,r2
 400ece8:	40016bc0 	call	40016bc <main>
 400ecec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400ecf0:	01000044 	movi	r4,1
 400ecf4:	400e5200 	call	400e520 <close>
  exit (result);
 400ecf8:	e13fff17 	ldw	r4,-4(fp)
 400ecfc:	40117900 	call	4011790 <exit>

0400ed00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400ed00:	defffe04 	addi	sp,sp,-8
 400ed04:	df000115 	stw	fp,4(sp)
 400ed08:	df000104 	addi	fp,sp,4
 400ed0c:	e13fff15 	stw	r4,-4(fp)
}
 400ed10:	0001883a 	nop
 400ed14:	e037883a 	mov	sp,fp
 400ed18:	df000017 	ldw	fp,0(sp)
 400ed1c:	dec00104 	addi	sp,sp,4
 400ed20:	f800283a 	ret

0400ed24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ed24:	defffe04 	addi	sp,sp,-8
 400ed28:	df000115 	stw	fp,4(sp)
 400ed2c:	df000104 	addi	fp,sp,4
 400ed30:	e13fff15 	stw	r4,-4(fp)
}
 400ed34:	0001883a 	nop
 400ed38:	e037883a 	mov	sp,fp
 400ed3c:	df000017 	ldw	fp,0(sp)
 400ed40:	dec00104 	addi	sp,sp,4
 400ed44:	f800283a 	ret

0400ed48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ed48:	defffe04 	addi	sp,sp,-8
 400ed4c:	dfc00115 	stw	ra,4(sp)
 400ed50:	df000015 	stw	fp,0(sp)
 400ed54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ed58:	d0a00c17 	ldw	r2,-32720(gp)
 400ed5c:	10000326 	beq	r2,zero,400ed6c <alt_get_errno+0x24>
 400ed60:	d0a00c17 	ldw	r2,-32720(gp)
 400ed64:	103ee83a 	callr	r2
 400ed68:	00000106 	br	400ed70 <alt_get_errno+0x28>
 400ed6c:	d0acb304 	addi	r2,gp,-19764
}
 400ed70:	e037883a 	mov	sp,fp
 400ed74:	dfc00117 	ldw	ra,4(sp)
 400ed78:	df000017 	ldw	fp,0(sp)
 400ed7c:	dec00204 	addi	sp,sp,8
 400ed80:	f800283a 	ret

0400ed84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400ed84:	defff904 	addi	sp,sp,-28
 400ed88:	dfc00615 	stw	ra,24(sp)
 400ed8c:	df000515 	stw	fp,20(sp)
 400ed90:	df000504 	addi	fp,sp,20
 400ed94:	e13ffd15 	stw	r4,-12(fp)
 400ed98:	e17ffe15 	stw	r5,-8(fp)
 400ed9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400eda0:	e0bffd17 	ldw	r2,-12(fp)
 400eda4:	10000616 	blt	r2,zero,400edc0 <read+0x3c>
 400eda8:	e0bffd17 	ldw	r2,-12(fp)
 400edac:	10c00324 	muli	r3,r2,12
 400edb0:	008100f4 	movhi	r2,1027
 400edb4:	108e0304 	addi	r2,r2,14348
 400edb8:	1885883a 	add	r2,r3,r2
 400edbc:	00000106 	br	400edc4 <read+0x40>
 400edc0:	0005883a 	mov	r2,zero
 400edc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400edc8:	e0bffb17 	ldw	r2,-20(fp)
 400edcc:	10002226 	beq	r2,zero,400ee58 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400edd0:	e0bffb17 	ldw	r2,-20(fp)
 400edd4:	10800217 	ldw	r2,8(r2)
 400edd8:	108000cc 	andi	r2,r2,3
 400eddc:	10800060 	cmpeqi	r2,r2,1
 400ede0:	1000181e 	bne	r2,zero,400ee44 <read+0xc0>
        (fd->dev->read))
 400ede4:	e0bffb17 	ldw	r2,-20(fp)
 400ede8:	10800017 	ldw	r2,0(r2)
 400edec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400edf0:	10001426 	beq	r2,zero,400ee44 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400edf4:	e0bffb17 	ldw	r2,-20(fp)
 400edf8:	10800017 	ldw	r2,0(r2)
 400edfc:	10800517 	ldw	r2,20(r2)
 400ee00:	e0ffff17 	ldw	r3,-4(fp)
 400ee04:	180d883a 	mov	r6,r3
 400ee08:	e17ffe17 	ldw	r5,-8(fp)
 400ee0c:	e13ffb17 	ldw	r4,-20(fp)
 400ee10:	103ee83a 	callr	r2
 400ee14:	e0bffc15 	stw	r2,-16(fp)
 400ee18:	e0bffc17 	ldw	r2,-16(fp)
 400ee1c:	1000070e 	bge	r2,zero,400ee3c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400ee20:	400ed480 	call	400ed48 <alt_get_errno>
 400ee24:	1007883a 	mov	r3,r2
 400ee28:	e0bffc17 	ldw	r2,-16(fp)
 400ee2c:	0085c83a 	sub	r2,zero,r2
 400ee30:	18800015 	stw	r2,0(r3)
          return -1;
 400ee34:	00bfffc4 	movi	r2,-1
 400ee38:	00000c06 	br	400ee6c <read+0xe8>
        }
        return rval;
 400ee3c:	e0bffc17 	ldw	r2,-16(fp)
 400ee40:	00000a06 	br	400ee6c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400ee44:	400ed480 	call	400ed48 <alt_get_errno>
 400ee48:	1007883a 	mov	r3,r2
 400ee4c:	00800344 	movi	r2,13
 400ee50:	18800015 	stw	r2,0(r3)
 400ee54:	00000406 	br	400ee68 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400ee58:	400ed480 	call	400ed48 <alt_get_errno>
 400ee5c:	1007883a 	mov	r3,r2
 400ee60:	00801444 	movi	r2,81
 400ee64:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400ee68:	00bfffc4 	movi	r2,-1
}
 400ee6c:	e037883a 	mov	sp,fp
 400ee70:	dfc00117 	ldw	ra,4(sp)
 400ee74:	df000017 	ldw	fp,0(sp)
 400ee78:	dec00204 	addi	sp,sp,8
 400ee7c:	f800283a 	ret

0400ee80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400ee80:	defffe04 	addi	sp,sp,-8
 400ee84:	df000115 	stw	fp,4(sp)
 400ee88:	df000104 	addi	fp,sp,4
 400ee8c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400ee90:	e0bfff17 	ldw	r2,-4(fp)
 400ee94:	108000d0 	cmplti	r2,r2,3
 400ee98:	10000d1e 	bne	r2,zero,400eed0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400ee9c:	008100f4 	movhi	r2,1027
 400eea0:	108e0304 	addi	r2,r2,14348
 400eea4:	e0ffff17 	ldw	r3,-4(fp)
 400eea8:	18c00324 	muli	r3,r3,12
 400eeac:	10c5883a 	add	r2,r2,r3
 400eeb0:	10800204 	addi	r2,r2,8
 400eeb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400eeb8:	008100f4 	movhi	r2,1027
 400eebc:	108e0304 	addi	r2,r2,14348
 400eec0:	e0ffff17 	ldw	r3,-4(fp)
 400eec4:	18c00324 	muli	r3,r3,12
 400eec8:	10c5883a 	add	r2,r2,r3
 400eecc:	10000015 	stw	zero,0(r2)
  }
}
 400eed0:	0001883a 	nop
 400eed4:	e037883a 	mov	sp,fp
 400eed8:	df000017 	ldw	fp,0(sp)
 400eedc:	dec00104 	addi	sp,sp,4
 400eee0:	f800283a 	ret

0400eee4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400eee4:	defff904 	addi	sp,sp,-28
 400eee8:	df000615 	stw	fp,24(sp)
 400eeec:	df000604 	addi	fp,sp,24
 400eef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eef4:	0005303a 	rdctl	r2,status
 400eef8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eefc:	e0fffe17 	ldw	r3,-8(fp)
 400ef00:	00bfff84 	movi	r2,-2
 400ef04:	1884703a 	and	r2,r3,r2
 400ef08:	1001703a 	wrctl	status,r2
  
  return context;
 400ef0c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400ef10:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400ef14:	d0a00e17 	ldw	r2,-32712(gp)
 400ef18:	10c000c4 	addi	r3,r2,3
 400ef1c:	00bfff04 	movi	r2,-4
 400ef20:	1884703a 	and	r2,r3,r2
 400ef24:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400ef28:	d0e00e17 	ldw	r3,-32712(gp)
 400ef2c:	e0bfff17 	ldw	r2,-4(fp)
 400ef30:	1887883a 	add	r3,r3,r2
 400ef34:	00820034 	movhi	r2,2048
 400ef38:	10800004 	addi	r2,r2,0
 400ef3c:	10c0062e 	bgeu	r2,r3,400ef58 <sbrk+0x74>
 400ef40:	e0bffb17 	ldw	r2,-20(fp)
 400ef44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef48:	e0bffa17 	ldw	r2,-24(fp)
 400ef4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400ef50:	00bfffc4 	movi	r2,-1
 400ef54:	00000b06 	br	400ef84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400ef58:	d0a00e17 	ldw	r2,-32712(gp)
 400ef5c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400ef60:	d0e00e17 	ldw	r3,-32712(gp)
 400ef64:	e0bfff17 	ldw	r2,-4(fp)
 400ef68:	1885883a 	add	r2,r3,r2
 400ef6c:	d0a00e15 	stw	r2,-32712(gp)
 400ef70:	e0bffb17 	ldw	r2,-20(fp)
 400ef74:	e0bffc15 	stw	r2,-16(fp)
 400ef78:	e0bffc17 	ldw	r2,-16(fp)
 400ef7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400ef80:	e0bffd17 	ldw	r2,-12(fp)
} 
 400ef84:	e037883a 	mov	sp,fp
 400ef88:	df000017 	ldw	fp,0(sp)
 400ef8c:	dec00104 	addi	sp,sp,4
 400ef90:	f800283a 	ret

0400ef94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400ef94:	defffa04 	addi	sp,sp,-24
 400ef98:	df000515 	stw	fp,20(sp)
 400ef9c:	df000504 	addi	fp,sp,20
 400efa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400efa4:	0005303a 	rdctl	r2,status
 400efa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400efac:	e0fffc17 	ldw	r3,-16(fp)
 400efb0:	00bfff84 	movi	r2,-2
 400efb4:	1884703a 	and	r2,r3,r2
 400efb8:	1001703a 	wrctl	status,r2
  
  return context;
 400efbc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400efc0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400efc4:	e0bfff17 	ldw	r2,-4(fp)
 400efc8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400efcc:	e0bffd17 	ldw	r2,-12(fp)
 400efd0:	10800017 	ldw	r2,0(r2)
 400efd4:	e0fffd17 	ldw	r3,-12(fp)
 400efd8:	18c00117 	ldw	r3,4(r3)
 400efdc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400efe0:	e0bffd17 	ldw	r2,-12(fp)
 400efe4:	10800117 	ldw	r2,4(r2)
 400efe8:	e0fffd17 	ldw	r3,-12(fp)
 400efec:	18c00017 	ldw	r3,0(r3)
 400eff0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400eff4:	e0bffd17 	ldw	r2,-12(fp)
 400eff8:	e0fffd17 	ldw	r3,-12(fp)
 400effc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400f000:	e0bffd17 	ldw	r2,-12(fp)
 400f004:	e0fffd17 	ldw	r3,-12(fp)
 400f008:	10c00015 	stw	r3,0(r2)
 400f00c:	e0bffb17 	ldw	r2,-20(fp)
 400f010:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f014:	e0bffe17 	ldw	r2,-8(fp)
 400f018:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400f01c:	0001883a 	nop
 400f020:	e037883a 	mov	sp,fp
 400f024:	df000017 	ldw	fp,0(sp)
 400f028:	dec00104 	addi	sp,sp,4
 400f02c:	f800283a 	ret

0400f030 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400f030:	defffb04 	addi	sp,sp,-20
 400f034:	dfc00415 	stw	ra,16(sp)
 400f038:	df000315 	stw	fp,12(sp)
 400f03c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400f040:	d0a00f17 	ldw	r2,-32708(gp)
 400f044:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400f048:	d0acb917 	ldw	r2,-19740(gp)
 400f04c:	10800044 	addi	r2,r2,1
 400f050:	d0acb915 	stw	r2,-19740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f054:	00002e06 	br	400f110 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400f058:	e0bffd17 	ldw	r2,-12(fp)
 400f05c:	10800017 	ldw	r2,0(r2)
 400f060:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400f064:	e0bffd17 	ldw	r2,-12(fp)
 400f068:	10800403 	ldbu	r2,16(r2)
 400f06c:	10803fcc 	andi	r2,r2,255
 400f070:	10000426 	beq	r2,zero,400f084 <alt_tick+0x54>
 400f074:	d0acb917 	ldw	r2,-19740(gp)
 400f078:	1000021e 	bne	r2,zero,400f084 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400f07c:	e0bffd17 	ldw	r2,-12(fp)
 400f080:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400f084:	e0bffd17 	ldw	r2,-12(fp)
 400f088:	10800217 	ldw	r2,8(r2)
 400f08c:	d0ecb917 	ldw	r3,-19740(gp)
 400f090:	18801d36 	bltu	r3,r2,400f108 <alt_tick+0xd8>
 400f094:	e0bffd17 	ldw	r2,-12(fp)
 400f098:	10800403 	ldbu	r2,16(r2)
 400f09c:	10803fcc 	andi	r2,r2,255
 400f0a0:	1000191e 	bne	r2,zero,400f108 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400f0a4:	e0bffd17 	ldw	r2,-12(fp)
 400f0a8:	10800317 	ldw	r2,12(r2)
 400f0ac:	e0fffd17 	ldw	r3,-12(fp)
 400f0b0:	18c00517 	ldw	r3,20(r3)
 400f0b4:	1809883a 	mov	r4,r3
 400f0b8:	103ee83a 	callr	r2
 400f0bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400f0c0:	e0bfff17 	ldw	r2,-4(fp)
 400f0c4:	1000031e 	bne	r2,zero,400f0d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400f0c8:	e13ffd17 	ldw	r4,-12(fp)
 400f0cc:	400ef940 	call	400ef94 <alt_alarm_stop>
 400f0d0:	00000d06 	br	400f108 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400f0d4:	e0bffd17 	ldw	r2,-12(fp)
 400f0d8:	10c00217 	ldw	r3,8(r2)
 400f0dc:	e0bfff17 	ldw	r2,-4(fp)
 400f0e0:	1887883a 	add	r3,r3,r2
 400f0e4:	e0bffd17 	ldw	r2,-12(fp)
 400f0e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400f0ec:	e0bffd17 	ldw	r2,-12(fp)
 400f0f0:	10c00217 	ldw	r3,8(r2)
 400f0f4:	d0acb917 	ldw	r2,-19740(gp)
 400f0f8:	1880032e 	bgeu	r3,r2,400f108 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400f0fc:	e0bffd17 	ldw	r2,-12(fp)
 400f100:	00c00044 	movi	r3,1
 400f104:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400f108:	e0bffe17 	ldw	r2,-8(fp)
 400f10c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f110:	e0fffd17 	ldw	r3,-12(fp)
 400f114:	d0a00f04 	addi	r2,gp,-32708
 400f118:	18bfcf1e 	bne	r3,r2,400f058 <__alt_data_end+0xfc00f058>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400f11c:	0001883a 	nop
}
 400f120:	0001883a 	nop
 400f124:	e037883a 	mov	sp,fp
 400f128:	dfc00117 	ldw	ra,4(sp)
 400f12c:	df000017 	ldw	fp,0(sp)
 400f130:	dec00204 	addi	sp,sp,8
 400f134:	f800283a 	ret

0400f138 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400f138:	defffd04 	addi	sp,sp,-12
 400f13c:	dfc00215 	stw	ra,8(sp)
 400f140:	df000115 	stw	fp,4(sp)
 400f144:	df000104 	addi	fp,sp,4
 400f148:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400f14c:	e13fff17 	ldw	r4,-4(fp)
 400f150:	4010ce80 	call	4010ce8 <alt_busy_sleep>
}
 400f154:	e037883a 	mov	sp,fp
 400f158:	dfc00117 	ldw	ra,4(sp)
 400f15c:	df000017 	ldw	fp,0(sp)
 400f160:	dec00204 	addi	sp,sp,8
 400f164:	f800283a 	ret

0400f168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f168:	defffe04 	addi	sp,sp,-8
 400f16c:	dfc00115 	stw	ra,4(sp)
 400f170:	df000015 	stw	fp,0(sp)
 400f174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f178:	d0a00c17 	ldw	r2,-32720(gp)
 400f17c:	10000326 	beq	r2,zero,400f18c <alt_get_errno+0x24>
 400f180:	d0a00c17 	ldw	r2,-32720(gp)
 400f184:	103ee83a 	callr	r2
 400f188:	00000106 	br	400f190 <alt_get_errno+0x28>
 400f18c:	d0acb304 	addi	r2,gp,-19764
}
 400f190:	e037883a 	mov	sp,fp
 400f194:	dfc00117 	ldw	ra,4(sp)
 400f198:	df000017 	ldw	fp,0(sp)
 400f19c:	dec00204 	addi	sp,sp,8
 400f1a0:	f800283a 	ret

0400f1a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400f1a4:	defff904 	addi	sp,sp,-28
 400f1a8:	dfc00615 	stw	ra,24(sp)
 400f1ac:	df000515 	stw	fp,20(sp)
 400f1b0:	df000504 	addi	fp,sp,20
 400f1b4:	e13ffd15 	stw	r4,-12(fp)
 400f1b8:	e17ffe15 	stw	r5,-8(fp)
 400f1bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f1c0:	e0bffd17 	ldw	r2,-12(fp)
 400f1c4:	10000616 	blt	r2,zero,400f1e0 <write+0x3c>
 400f1c8:	e0bffd17 	ldw	r2,-12(fp)
 400f1cc:	10c00324 	muli	r3,r2,12
 400f1d0:	008100f4 	movhi	r2,1027
 400f1d4:	108e0304 	addi	r2,r2,14348
 400f1d8:	1885883a 	add	r2,r3,r2
 400f1dc:	00000106 	br	400f1e4 <write+0x40>
 400f1e0:	0005883a 	mov	r2,zero
 400f1e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f1e8:	e0bffb17 	ldw	r2,-20(fp)
 400f1ec:	10002126 	beq	r2,zero,400f274 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400f1f0:	e0bffb17 	ldw	r2,-20(fp)
 400f1f4:	10800217 	ldw	r2,8(r2)
 400f1f8:	108000cc 	andi	r2,r2,3
 400f1fc:	10001826 	beq	r2,zero,400f260 <write+0xbc>
 400f200:	e0bffb17 	ldw	r2,-20(fp)
 400f204:	10800017 	ldw	r2,0(r2)
 400f208:	10800617 	ldw	r2,24(r2)
 400f20c:	10001426 	beq	r2,zero,400f260 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400f210:	e0bffb17 	ldw	r2,-20(fp)
 400f214:	10800017 	ldw	r2,0(r2)
 400f218:	10800617 	ldw	r2,24(r2)
 400f21c:	e0ffff17 	ldw	r3,-4(fp)
 400f220:	180d883a 	mov	r6,r3
 400f224:	e17ffe17 	ldw	r5,-8(fp)
 400f228:	e13ffb17 	ldw	r4,-20(fp)
 400f22c:	103ee83a 	callr	r2
 400f230:	e0bffc15 	stw	r2,-16(fp)
 400f234:	e0bffc17 	ldw	r2,-16(fp)
 400f238:	1000070e 	bge	r2,zero,400f258 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400f23c:	400f1680 	call	400f168 <alt_get_errno>
 400f240:	1007883a 	mov	r3,r2
 400f244:	e0bffc17 	ldw	r2,-16(fp)
 400f248:	0085c83a 	sub	r2,zero,r2
 400f24c:	18800015 	stw	r2,0(r3)
        return -1;
 400f250:	00bfffc4 	movi	r2,-1
 400f254:	00000c06 	br	400f288 <write+0xe4>
      }
      return rval;
 400f258:	e0bffc17 	ldw	r2,-16(fp)
 400f25c:	00000a06 	br	400f288 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400f260:	400f1680 	call	400f168 <alt_get_errno>
 400f264:	1007883a 	mov	r3,r2
 400f268:	00800344 	movi	r2,13
 400f26c:	18800015 	stw	r2,0(r3)
 400f270:	00000406 	br	400f284 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400f274:	400f1680 	call	400f168 <alt_get_errno>
 400f278:	1007883a 	mov	r3,r2
 400f27c:	00801444 	movi	r2,81
 400f280:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400f284:	00bfffc4 	movi	r2,-1
}
 400f288:	e037883a 	mov	sp,fp
 400f28c:	dfc00117 	ldw	ra,4(sp)
 400f290:	df000017 	ldw	fp,0(sp)
 400f294:	dec00204 	addi	sp,sp,8
 400f298:	f800283a 	ret

0400f29c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400f29c:	defffd04 	addi	sp,sp,-12
 400f2a0:	dfc00215 	stw	ra,8(sp)
 400f2a4:	df000115 	stw	fp,4(sp)
 400f2a8:	df000104 	addi	fp,sp,4
 400f2ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400f2b0:	d1600904 	addi	r5,gp,-32732
 400f2b4:	e13fff17 	ldw	r4,-4(fp)
 400f2b8:	4010ec40 	call	4010ec4 <alt_dev_llist_insert>
}
 400f2bc:	e037883a 	mov	sp,fp
 400f2c0:	dfc00117 	ldw	ra,4(sp)
 400f2c4:	df000017 	ldw	fp,0(sp)
 400f2c8:	dec00204 	addi	sp,sp,8
 400f2cc:	f800283a 	ret

0400f2d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400f2d0:	defffd04 	addi	sp,sp,-12
 400f2d4:	dfc00215 	stw	ra,8(sp)
 400f2d8:	df000115 	stw	fp,4(sp)
 400f2dc:	df000104 	addi	fp,sp,4
 400f2e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400f2e4:	401148c0 	call	401148c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400f2e8:	00800044 	movi	r2,1
 400f2ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400f2f0:	0001883a 	nop
 400f2f4:	e037883a 	mov	sp,fp
 400f2f8:	dfc00117 	ldw	ra,4(sp)
 400f2fc:	df000017 	ldw	fp,0(sp)
 400f300:	dec00204 	addi	sp,sp,8
 400f304:	f800283a 	ret

0400f308 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400f308:	defffe04 	addi	sp,sp,-8
 400f30c:	dfc00115 	stw	ra,4(sp)
 400f310:	df000015 	stw	fp,0(sp)
 400f314:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 400f318:	01c0fa04 	movi	r7,1000
 400f31c:	01800044 	movi	r6,1
 400f320:	000b883a 	mov	r5,zero
 400f324:	0009883a 	mov	r4,zero
 400f328:	4010b400 	call	4010b40 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400f32c:	000d883a 	mov	r6,zero
 400f330:	000b883a 	mov	r5,zero
 400f334:	010100f4 	movhi	r4,1027
 400f338:	210e6d04 	addi	r4,r4,14772
 400f33c:	400ffc80 	call	400ffc8 <altera_avalon_jtag_uart_init>
 400f340:	010100f4 	movhi	r4,1027
 400f344:	210e6304 	addi	r4,r4,14732
 400f348:	400f29c0 	call	400f29c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 400f34c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 400f350:	0001883a 	nop
    LT24_CONTROLLER_INIT ( LCD_CONTROLLER, LCD_Controller);
 400f354:	0001883a 	nop
}
 400f358:	0001883a 	nop
 400f35c:	e037883a 	mov	sp,fp
 400f360:	dfc00117 	ldw	ra,4(sp)
 400f364:	df000017 	ldw	fp,0(sp)
 400f368:	dec00204 	addi	sp,sp,8
 400f36c:	f800283a 	ret

0400f370 <Delay_Ms>:
 * Function:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms(alt_u16 count_ms)
{
 400f370:	defffd04 	addi	sp,sp,-12
 400f374:	dfc00215 	stw	ra,8(sp)
 400f378:	df000115 	stw	fp,4(sp)
 400f37c:	df000104 	addi	fp,sp,4
 400f380:	2005883a 	mov	r2,r4
 400f384:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 400f388:	00000206 	br	400f394 <Delay_Ms+0x24>
    {
        usleep(1000);
 400f38c:	0100fa04 	movi	r4,1000
 400f390:	400f1380 	call	400f138 <usleep>
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/
void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 400f394:	e0bfff0b 	ldhu	r2,-4(fp)
 400f398:	10ffffc4 	addi	r3,r2,-1
 400f39c:	e0ffff0d 	sth	r3,-4(fp)
 400f3a0:	10bfffcc 	andi	r2,r2,65535
 400f3a4:	103ff91e 	bne	r2,zero,400f38c <__alt_data_end+0xfc00f38c>
    {
        usleep(1000);
    }
}
 400f3a8:	0001883a 	nop
 400f3ac:	e037883a 	mov	sp,fp
 400f3b0:	dfc00117 	ldw	ra,4(sp)
 400f3b4:	df000017 	ldw	fp,0(sp)
 400f3b8:	dec00204 	addi	sp,sp,8
 400f3bc:	f800283a 	ret

0400f3c0 <LCD_SetCursor>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 400f3c0:	defffd04 	addi	sp,sp,-12
 400f3c4:	df000215 	stw	fp,8(sp)
 400f3c8:	df000204 	addi	fp,sp,8
 400f3cc:	2007883a 	mov	r3,r4
 400f3d0:	2805883a 	mov	r2,r5
 400f3d4:	e0fffe0d 	sth	r3,-8(fp)
 400f3d8:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 400f3dc:	00c00a84 	movi	r3,42
 400f3e0:	00820034 	movhi	r2,2048
 400f3e4:	10841604 	addi	r2,r2,4184
 400f3e8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xpos>>8);
 400f3ec:	e0bffe0b 	ldhu	r2,-8(fp)
 400f3f0:	1004d23a 	srli	r2,r2,8
 400f3f4:	10ffffcc 	andi	r3,r2,65535
 400f3f8:	00820034 	movhi	r2,2048
 400f3fc:	10841704 	addi	r2,r2,4188
 400f400:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xpos&0XFF);
 400f404:	e0bffe0b 	ldhu	r2,-8(fp)
 400f408:	10c03fcc 	andi	r3,r2,255
 400f40c:	00820034 	movhi	r2,2048
 400f410:	10841704 	addi	r2,r2,4188
 400f414:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 400f418:	00c00ac4 	movi	r3,43
 400f41c:	00820034 	movhi	r2,2048
 400f420:	10841604 	addi	r2,r2,4184
 400f424:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Ypos>>8);
 400f428:	e0bfff0b 	ldhu	r2,-4(fp)
 400f42c:	1004d23a 	srli	r2,r2,8
 400f430:	10ffffcc 	andi	r3,r2,65535
 400f434:	00820034 	movhi	r2,2048
 400f438:	10841704 	addi	r2,r2,4188
 400f43c:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Ypos&0XFF);
 400f440:	e0bfff0b 	ldhu	r2,-4(fp)
 400f444:	10c03fcc 	andi	r3,r2,255
 400f448:	00820034 	movhi	r2,2048
 400f44c:	10841704 	addi	r2,r2,4188
 400f450:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400f454:	00c00b04 	movi	r3,44
 400f458:	00820034 	movhi	r2,2048
 400f45c:	10841604 	addi	r2,r2,4184
 400f460:	10c00035 	stwio	r3,0(r2)

}
 400f464:	0001883a 	nop
 400f468:	e037883a 	mov	sp,fp
 400f46c:	df000017 	ldw	fp,0(sp)
 400f470:	dec00104 	addi	sp,sp,4
 400f474:	f800283a 	ret

0400f478 <LCD_SetRect>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_SetRect(alt_u16 Xposstart, alt_u16 Yposstart,alt_u16 Xposend, alt_u16 Yposend)
{
 400f478:	defffb04 	addi	sp,sp,-20
 400f47c:	df000415 	stw	fp,16(sp)
 400f480:	df000404 	addi	fp,sp,16
 400f484:	2011883a 	mov	r8,r4
 400f488:	2809883a 	mov	r4,r5
 400f48c:	3007883a 	mov	r3,r6
 400f490:	3805883a 	mov	r2,r7
 400f494:	e23ffc0d 	sth	r8,-16(fp)
 400f498:	e13ffd0d 	sth	r4,-12(fp)
 400f49c:	e0fffe0d 	sth	r3,-8(fp)
 400f4a0:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 400f4a4:	00c00a84 	movi	r3,42
 400f4a8:	00820034 	movhi	r2,2048
 400f4ac:	10841604 	addi	r2,r2,4184
 400f4b0:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposstart>>8);
 400f4b4:	e0bffc0b 	ldhu	r2,-16(fp)
 400f4b8:	1004d23a 	srli	r2,r2,8
 400f4bc:	10ffffcc 	andi	r3,r2,65535
 400f4c0:	00820034 	movhi	r2,2048
 400f4c4:	10841704 	addi	r2,r2,4188
 400f4c8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposstart&0XFF);
 400f4cc:	e0bffc0b 	ldhu	r2,-16(fp)
 400f4d0:	10c03fcc 	andi	r3,r2,255
 400f4d4:	00820034 	movhi	r2,2048
 400f4d8:	10841704 	addi	r2,r2,4188
 400f4dc:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposend>>8);
 400f4e0:	e0bffe0b 	ldhu	r2,-8(fp)
 400f4e4:	1004d23a 	srli	r2,r2,8
 400f4e8:	10ffffcc 	andi	r3,r2,65535
 400f4ec:	00820034 	movhi	r2,2048
 400f4f0:	10841704 	addi	r2,r2,4188
 400f4f4:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Xposend&0XFF);
 400f4f8:	e0bffe0b 	ldhu	r2,-8(fp)
 400f4fc:	10c03fcc 	andi	r3,r2,255
 400f500:	00820034 	movhi	r2,2048
 400f504:	10841704 	addi	r2,r2,4188
 400f508:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 400f50c:	00c00ac4 	movi	r3,43
 400f510:	00820034 	movhi	r2,2048
 400f514:	10841604 	addi	r2,r2,4184
 400f518:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposstart>>8);
 400f51c:	e0bffd0b 	ldhu	r2,-12(fp)
 400f520:	1004d23a 	srli	r2,r2,8
 400f524:	10ffffcc 	andi	r3,r2,65535
 400f528:	00820034 	movhi	r2,2048
 400f52c:	10841704 	addi	r2,r2,4188
 400f530:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposstart&0XFF);
 400f534:	e0bffd0b 	ldhu	r2,-12(fp)
 400f538:	10c03fcc 	andi	r3,r2,255
 400f53c:	00820034 	movhi	r2,2048
 400f540:	10841704 	addi	r2,r2,4188
 400f544:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposend>>8);
 400f548:	e0bfff0b 	ldhu	r2,-4(fp)
 400f54c:	1004d23a 	srli	r2,r2,8
 400f550:	10ffffcc 	andi	r3,r2,65535
 400f554:	00820034 	movhi	r2,2048
 400f558:	10841704 	addi	r2,r2,4188
 400f55c:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Yposend&0XFF);
 400f560:	e0bfff0b 	ldhu	r2,-4(fp)
 400f564:	10c03fcc 	andi	r3,r2,255
 400f568:	00820034 	movhi	r2,2048
 400f56c:	10841704 	addi	r2,r2,4188
 400f570:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400f574:	00c00b04 	movi	r3,44
 400f578:	00820034 	movhi	r2,2048
 400f57c:	10841604 	addi	r2,r2,4184
 400f580:	10c00035 	stwio	r3,0(r2)

}
 400f584:	0001883a 	nop
 400f588:	e037883a 	mov	sp,fp
 400f58c:	df000017 	ldw	fp,0(sp)
 400f590:	dec00104 	addi	sp,sp,4
 400f594:	f800283a 	ret

0400f598 <LCD_Clear>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_Clear(alt_u16 Color)
{
 400f598:	defffc04 	addi	sp,sp,-16
 400f59c:	dfc00315 	stw	ra,12(sp)
 400f5a0:	df000215 	stw	fp,8(sp)
 400f5a4:	df000204 	addi	fp,sp,8
 400f5a8:	2005883a 	mov	r2,r4
 400f5ac:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
 400f5b0:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x0000,0x0000);
 400f5b4:	000b883a 	mov	r5,zero
 400f5b8:	0009883a 	mov	r4,zero
 400f5bc:	400f3c00 	call	400f3c0 <LCD_SetCursor>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400f5c0:	00c00b04 	movi	r3,44
 400f5c4:	00820034 	movhi	r2,2048
 400f5c8:	10841604 	addi	r2,r2,4184
 400f5cc:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<78400;index++)//76800
 400f5d0:	e03ffe15 	stw	zero,-8(fp)
 400f5d4:	00000706 	br	400f5f4 <LCD_Clear+0x5c>
        {
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Color);
 400f5d8:	e0ffff0b 	ldhu	r3,-4(fp)
 400f5dc:	00820034 	movhi	r2,2048
 400f5e0:	10841704 	addi	r2,r2,4188
 400f5e4:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x0000,0x0000);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
        for(index=0;index<78400;index++)//76800
 400f5e8:	e0bffe17 	ldw	r2,-8(fp)
 400f5ec:	10800044 	addi	r2,r2,1
 400f5f0:	e0bffe15 	stw	r2,-8(fp)
 400f5f4:	e0fffe17 	ldw	r3,-8(fp)
 400f5f8:	00800074 	movhi	r2,1
 400f5fc:	108c8fc4 	addi	r2,r2,12863
 400f600:	10fff52e 	bgeu	r2,r3,400f5d8 <__alt_data_end+0xfc00f5d8>
        {
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,Color);
        }
}
 400f604:	0001883a 	nop
 400f608:	e037883a 	mov	sp,fp
 400f60c:	dfc00117 	ldw	ra,4(sp)
 400f610:	df000017 	ldw	fp,0(sp)
 400f614:	dec00204 	addi	sp,sp,8
 400f618:	f800283a 	ret

0400f61c <LCD_DrawPoint>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 400f61c:	defffb04 	addi	sp,sp,-20
 400f620:	dfc00415 	stw	ra,16(sp)
 400f624:	df000315 	stw	fp,12(sp)
 400f628:	df000304 	addi	fp,sp,12
 400f62c:	2807883a 	mov	r3,r5
 400f630:	3005883a 	mov	r2,r6
 400f634:	e13ffd0d 	sth	r4,-12(fp)
 400f638:	e0fffe0d 	sth	r3,-8(fp)
 400f63c:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 400f640:	e0bffd0b 	ldhu	r2,-12(fp)
 400f644:	e0fffe0b 	ldhu	r3,-8(fp)
 400f648:	180b883a 	mov	r5,r3
 400f64c:	1009883a 	mov	r4,r2
 400f650:	400f3c00 	call	400f3c0 <LCD_SetCursor>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400f654:	00c00b04 	movi	r3,44
 400f658:	00820034 	movhi	r2,2048
 400f65c:	10841604 	addi	r2,r2,4184
 400f660:	10c00035 	stwio	r3,0(r2)
        IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
 400f664:	e0ffff0b 	ldhu	r3,-4(fp)
 400f668:	00820034 	movhi	r2,2048
 400f66c:	10841704 	addi	r2,r2,4188
 400f670:	10c00035 	stwio	r3,0(r2)
}
 400f674:	0001883a 	nop
 400f678:	e037883a 	mov	sp,fp
 400f67c:	dfc00117 	ldw	ra,4(sp)
 400f680:	df000017 	ldw	fp,0(sp)
 400f684:	dec00204 	addi	sp,sp,8
 400f688:	f800283a 	ret

0400f68c <LCD_DrawRect>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_DrawRect(alt_u16 xs,alt_u16 ys,alt_u16 xe,alt_u16 ye,alt_u16 color )
{
 400f68c:	defff804 	addi	sp,sp,-32
 400f690:	dfc00715 	stw	ra,28(sp)
 400f694:	df000615 	stw	fp,24(sp)
 400f698:	df000604 	addi	fp,sp,24
 400f69c:	2011883a 	mov	r8,r4
 400f6a0:	3009883a 	mov	r4,r6
 400f6a4:	3807883a 	mov	r3,r7
 400f6a8:	e0800217 	ldw	r2,8(fp)
 400f6ac:	e23ffb0d 	sth	r8,-20(fp)
 400f6b0:	e17ffc0d 	sth	r5,-16(fp)
 400f6b4:	e13ffd0d 	sth	r4,-12(fp)
 400f6b8:	e0fffe0d 	sth	r3,-8(fp)
 400f6bc:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetRect(xs,ys,xe,ye);
 400f6c0:	e0bffb0b 	ldhu	r2,-20(fp)
 400f6c4:	e0fffc0b 	ldhu	r3,-16(fp)
 400f6c8:	e13ffd0b 	ldhu	r4,-12(fp)
 400f6cc:	e17ffe0b 	ldhu	r5,-8(fp)
 400f6d0:	280f883a 	mov	r7,r5
 400f6d4:	200d883a 	mov	r6,r4
 400f6d8:	180b883a 	mov	r5,r3
 400f6dc:	1009883a 	mov	r4,r2
 400f6e0:	400f4780 	call	400f478 <LCD_SetRect>
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
 400f6e4:	00c00b04 	movi	r3,44
 400f6e8:	00820034 	movhi	r2,2048
 400f6ec:	10841604 	addi	r2,r2,4184
 400f6f0:	10c00035 	stwio	r3,0(r2)
        for(int i = 0; i < (xe-xs)*(ye-ys);i++){
 400f6f4:	e03ffa15 	stw	zero,-24(fp)
 400f6f8:	00000706 	br	400f718 <LCD_DrawRect+0x8c>
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
 400f6fc:	e0ffff0b 	ldhu	r3,-4(fp)
 400f700:	00820034 	movhi	r2,2048
 400f704:	10841704 	addi	r2,r2,4188
 400f708:	10c00035 	stwio	r3,0(r2)

void LCD_DrawRect(alt_u16 xs,alt_u16 ys,alt_u16 xe,alt_u16 ye,alt_u16 color )
{
        LCD_SetRect(xs,ys,xe,ye);
        IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002C);
        for(int i = 0; i < (xe-xs)*(ye-ys);i++){
 400f70c:	e0bffa17 	ldw	r2,-24(fp)
 400f710:	10800044 	addi	r2,r2,1
 400f714:	e0bffa15 	stw	r2,-24(fp)
 400f718:	e0fffd0b 	ldhu	r3,-12(fp)
 400f71c:	e0bffb0b 	ldhu	r2,-20(fp)
 400f720:	1887c83a 	sub	r3,r3,r2
 400f724:	e13ffe0b 	ldhu	r4,-8(fp)
 400f728:	e0bffc0b 	ldhu	r2,-16(fp)
 400f72c:	2085c83a 	sub	r2,r4,r2
 400f730:	1885383a 	mul	r2,r3,r2
 400f734:	e0fffa17 	ldw	r3,-24(fp)
 400f738:	18bff016 	blt	r3,r2,400f6fc <__alt_data_end+0xfc00f6fc>
        	IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,color);
        }

}
 400f73c:	0001883a 	nop
 400f740:	e037883a 	mov	sp,fp
 400f744:	dfc00117 	ldw	ra,4(sp)
 400f748:	df000017 	ldw	fp,0(sp)
 400f74c:	dec00204 	addi	sp,sp,8
 400f750:	f800283a 	ret

0400f754 <vid_set_pixel>:


void vid_set_pixel(int horiz, int vert, unsigned int color)
{
 400f754:	defffa04 	addi	sp,sp,-24
 400f758:	dfc00515 	stw	ra,20(sp)
 400f75c:	df000415 	stw	fp,16(sp)
 400f760:	df000404 	addi	fp,sp,16
 400f764:	e13ffd15 	stw	r4,-12(fp)
 400f768:	e17ffe15 	stw	r5,-8(fp)
 400f76c:	e1bfff15 	stw	r6,-4(fp)

	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 400f770:	e0bfff17 	ldw	r2,-4(fp)
 400f774:	10803fcc 	andi	r2,r2,255
 400f778:	1004d0fa 	srli	r2,r2,3
 400f77c:	e0bffc0d 	sth	r2,-16(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 400f780:	e0bfff17 	ldw	r2,-4(fp)
 400f784:	10bf000c 	andi	r2,r2,64512
 400f788:	1004d17a 	srli	r2,r2,5
 400f78c:	1007883a 	mov	r3,r2
 400f790:	e0bffc0b 	ldhu	r2,-16(fp)
 400f794:	1884b03a 	or	r2,r3,r2
 400f798:	e0bffc0d 	sth	r2,-16(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 400f79c:	e0bfff17 	ldw	r2,-4(fp)
 400f7a0:	10803e2c 	andhi	r2,r2,248
 400f7a4:	1004d23a 	srli	r2,r2,8
 400f7a8:	1007883a 	mov	r3,r2
 400f7ac:	e0bffc0b 	ldhu	r2,-16(fp)
 400f7b0:	1884b03a 	or	r2,r3,r2
 400f7b4:	e0bffc0d 	sth	r2,-16(fp)
	LCD_DrawPoint(horiz, vert, color16);
 400f7b8:	e0bffd17 	ldw	r2,-12(fp)
 400f7bc:	10ffffcc 	andi	r3,r2,65535
 400f7c0:	e0bffe17 	ldw	r2,-8(fp)
 400f7c4:	10bfffcc 	andi	r2,r2,65535
 400f7c8:	e13ffc0b 	ldhu	r4,-16(fp)
 400f7cc:	200d883a 	mov	r6,r4
 400f7d0:	100b883a 	mov	r5,r2
 400f7d4:	1809883a 	mov	r4,r3
 400f7d8:	400f61c0 	call	400f61c <LCD_DrawPoint>
}
 400f7dc:	0001883a 	nop
 400f7e0:	e037883a 	mov	sp,fp
 400f7e4:	dfc00117 	ldw	ra,4(sp)
 400f7e8:	df000017 	ldw	fp,0(sp)
 400f7ec:	dec00204 	addi	sp,sp,8
 400f7f0:	f800283a 	ret

0400f7f4 <LCD_Init>:
 * Purpose :
 * Return  : none
 *--------------------------------------------------*/

void LCD_Init()
{
 400f7f4:	defffe04 	addi	sp,sp,-8
 400f7f8:	dfc00115 	stw	ra,4(sp)
 400f7fc:	df000015 	stw	fp,0(sp)
 400f800:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;

	IOWR_LT24_AVALON_Set_LCD_RST(LCD_RESET_N_BASE); //	Set_LCD_RST;
 400f804:	00c00044 	movi	r3,1
 400f808:	00820034 	movhi	r2,2048
 400f80c:	10841004 	addi	r2,r2,4160
 400f810:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 400f814:	01000044 	movi	r4,1
 400f818:	400f3700 	call	400f370 <Delay_Ms>
	IOWR_LT24_AVALON_Clr_LCD_RST(LCD_RESET_N_BASE);
 400f81c:	0007883a 	mov	r3,zero
 400f820:	00820034 	movhi	r2,2048
 400f824:	10841004 	addi	r2,r2,4160
 400f828:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 400f82c:	01000284 	movi	r4,10
 400f830:	400f3700 	call	400f370 <Delay_Ms>
	IOWR_LT24_AVALON_Set_LCD_RST(LCD_RESET_N_BASE); //	Set_LCD_RST;
 400f834:	00c00044 	movi	r3,1
 400f838:	00820034 	movhi	r2,2048
 400f83c:	10841004 	addi	r2,r2,4160
 400f840:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 400f844:	01001e04 	movi	r4,120
 400f848:	400f3700 	call	400f370 <Delay_Ms>
//	Clr_LCD_CS;


	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0011);//Exit Sleep
 400f84c:	00c00444 	movi	r3,17
 400f850:	00820034 	movhi	r2,2048
 400f854:	10841604 	addi	r2,r2,4184
 400f858:	10c00035 	stwio	r3,0(r2)
	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00CF);
 400f85c:	00c033c4 	movi	r3,207
 400f860:	00820034 	movhi	r2,2048
 400f864:	10841604 	addi	r2,r2,4184
 400f868:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400f86c:	0007883a 	mov	r3,zero
 400f870:	00820034 	movhi	r2,2048
 400f874:	10841704 	addi	r2,r2,4188
 400f878:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0081);
 400f87c:	00c02044 	movi	r3,129
 400f880:	00820034 	movhi	r2,2048
 400f884:	10841704 	addi	r2,r2,4188
 400f888:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00c0);
 400f88c:	00c03004 	movi	r3,192
 400f890:	00820034 	movhi	r2,2048
 400f894:	10841704 	addi	r2,r2,4188
 400f898:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00ED);
 400f89c:	00c03b44 	movi	r3,237
 400f8a0:	00820034 	movhi	r2,2048
 400f8a4:	10841604 	addi	r2,r2,4184
 400f8a8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0064);
 400f8ac:	00c01904 	movi	r3,100
 400f8b0:	00820034 	movhi	r2,2048
 400f8b4:	10841704 	addi	r2,r2,4188
 400f8b8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0003);
 400f8bc:	00c000c4 	movi	r3,3
 400f8c0:	00820034 	movhi	r2,2048
 400f8c4:	10841704 	addi	r2,r2,4188
 400f8c8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X0012);
 400f8cc:	00c00484 	movi	r3,18
 400f8d0:	00820034 	movhi	r2,2048
 400f8d4:	10841704 	addi	r2,r2,4188
 400f8d8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X0081);
 400f8dc:	00c02044 	movi	r3,129
 400f8e0:	00820034 	movhi	r2,2048
 400f8e4:	10841704 	addi	r2,r2,4188
 400f8e8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00E8);
 400f8ec:	00c03a04 	movi	r3,232
 400f8f0:	00820034 	movhi	r2,2048
 400f8f4:	10841604 	addi	r2,r2,4184
 400f8f8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0085);
 400f8fc:	00c02144 	movi	r3,133
 400f900:	00820034 	movhi	r2,2048
 400f904:	10841704 	addi	r2,r2,4188
 400f908:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 400f90c:	00c00044 	movi	r3,1
 400f910:	00820034 	movhi	r2,2048
 400f914:	10841704 	addi	r2,r2,4188
 400f918:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00798);
 400f91c:	00c1e604 	movi	r3,1944
 400f920:	00820034 	movhi	r2,2048
 400f924:	10841704 	addi	r2,r2,4188
 400f928:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00CB);
 400f92c:	00c032c4 	movi	r3,203
 400f930:	00820034 	movhi	r2,2048
 400f934:	10841604 	addi	r2,r2,4184
 400f938:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0039);
 400f93c:	00c00e44 	movi	r3,57
 400f940:	00820034 	movhi	r2,2048
 400f944:	10841704 	addi	r2,r2,4188
 400f948:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x002C);
 400f94c:	00c00b04 	movi	r3,44
 400f950:	00820034 	movhi	r2,2048
 400f954:	10841704 	addi	r2,r2,4188
 400f958:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400f95c:	0007883a 	mov	r3,zero
 400f960:	00820034 	movhi	r2,2048
 400f964:	10841704 	addi	r2,r2,4188
 400f968:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0034);
 400f96c:	00c00d04 	movi	r3,52
 400f970:	00820034 	movhi	r2,2048
 400f974:	10841704 	addi	r2,r2,4188
 400f978:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0002);
 400f97c:	00c00084 	movi	r3,2
 400f980:	00820034 	movhi	r2,2048
 400f984:	10841704 	addi	r2,r2,4188
 400f988:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00F7);
 400f98c:	00c03dc4 	movi	r3,247
 400f990:	00820034 	movhi	r2,2048
 400f994:	10841604 	addi	r2,r2,4184
 400f998:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0020);
 400f99c:	00c00804 	movi	r3,32
 400f9a0:	00820034 	movhi	r2,2048
 400f9a4:	10841704 	addi	r2,r2,4188
 400f9a8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00EA);
 400f9ac:	00c03a84 	movi	r3,234
 400f9b0:	00820034 	movhi	r2,2048
 400f9b4:	10841604 	addi	r2,r2,4184
 400f9b8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400f9bc:	0007883a 	mov	r3,zero
 400f9c0:	00820034 	movhi	r2,2048
 400f9c4:	10841704 	addi	r2,r2,4188
 400f9c8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400f9cc:	0007883a 	mov	r3,zero
 400f9d0:	00820034 	movhi	r2,2048
 400f9d4:	10841704 	addi	r2,r2,4188
 400f9d8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00B1);
 400f9dc:	00c02c44 	movi	r3,177
 400f9e0:	00820034 	movhi	r2,2048
 400f9e4:	10841604 	addi	r2,r2,4184
 400f9e8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400f9ec:	0007883a 	mov	r3,zero
 400f9f0:	00820034 	movhi	r2,2048
 400f9f4:	10841704 	addi	r2,r2,4188
 400f9f8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x001b);
 400f9fc:	00c006c4 	movi	r3,27
 400fa00:	00820034 	movhi	r2,2048
 400fa04:	10841704 	addi	r2,r2,4188
 400fa08:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00B6);
 400fa0c:	00c02d84 	movi	r3,182
 400fa10:	00820034 	movhi	r2,2048
 400fa14:	10841604 	addi	r2,r2,4184
 400fa18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000A);
 400fa1c:	00c00284 	movi	r3,10
 400fa20:	00820034 	movhi	r2,2048
 400fa24:	10841704 	addi	r2,r2,4188
 400fa28:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00A2);
 400fa2c:	00c02884 	movi	r3,162
 400fa30:	00820034 	movhi	r2,2048
 400fa34:	10841704 	addi	r2,r2,4188
 400fa38:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C0); //Power control
 400fa3c:	00c03004 	movi	r3,192
 400fa40:	00820034 	movhi	r2,2048
 400fa44:	10841604 	addi	r2,r2,4184
 400fa48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0005);  //VRH[5:0]
 400fa4c:	00c00144 	movi	r3,5
 400fa50:	00820034 	movhi	r2,2048
 400fa54:	10841704 	addi	r2,r2,4188
 400fa58:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C1); //Power control
 400fa5c:	00c03044 	movi	r3,193
 400fa60:	00820034 	movhi	r2,2048
 400fa64:	10841604 	addi	r2,r2,4184
 400fa68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0011);  //SAP[2:0];BT[3:0]
 400fa6c:	00c00444 	movi	r3,17
 400fa70:	00820034 	movhi	r2,2048
 400fa74:	10841704 	addi	r2,r2,4188
 400fa78:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C5); //VCM control
 400fa7c:	00c03144 	movi	r3,197
 400fa80:	00820034 	movhi	r2,2048
 400fa84:	10841604 	addi	r2,r2,4184
 400fa88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0045);  //3F
 400fa8c:	00c01144 	movi	r3,69
 400fa90:	00820034 	movhi	r2,2048
 400fa94:	10841704 	addi	r2,r2,4188
 400fa98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0045);  //3C
 400fa9c:	00c01144 	movi	r3,69
 400faa0:	00820034 	movhi	r2,2048
 400faa4:	10841704 	addi	r2,r2,4188
 400faa8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00C7); //VCM control2
 400faac:	00c031c4 	movi	r3,199
 400fab0:	00820034 	movhi	r2,2048
 400fab4:	10841604 	addi	r2,r2,4184
 400fab8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00a2);
 400fabc:	00c02884 	movi	r3,162
 400fac0:	00820034 	movhi	r2,2048
 400fac4:	10841704 	addi	r2,r2,4188
 400fac8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0036); // Memory Access Control
 400facc:	00c00d84 	movi	r3,54
 400fad0:	00820034 	movhi	r2,2048
 400fad4:	10841604 	addi	r2,r2,4184
 400fad8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);//48
 400fadc:	00c00204 	movi	r3,8
 400fae0:	00820034 	movhi	r2,2048
 400fae4:	10841704 	addi	r2,r2,4188
 400fae8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00F2);  // 3Gamma Function Disable
 400faec:	00c03c84 	movi	r3,242
 400faf0:	00820034 	movhi	r2,2048
 400faf4:	10841604 	addi	r2,r2,4184
 400faf8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fafc:	0007883a 	mov	r3,zero
 400fb00:	00820034 	movhi	r2,2048
 400fb04:	10841704 	addi	r2,r2,4188
 400fb08:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0026);  //Gamma curve selected
 400fb0c:	00c00984 	movi	r3,38
 400fb10:	00820034 	movhi	r2,2048
 400fb14:	10841604 	addi	r2,r2,4184
 400fb18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 400fb1c:	00c00044 	movi	r3,1
 400fb20:	00820034 	movhi	r2,2048
 400fb24:	10841704 	addi	r2,r2,4188
 400fb28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00E0);  //Set Gamma
 400fb2c:	00c03804 	movi	r3,224
 400fb30:	00820034 	movhi	r2,2048
 400fb34:	10841604 	addi	r2,r2,4184
 400fb38:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000F);
 400fb3c:	00c003c4 	movi	r3,15
 400fb40:	00820034 	movhi	r2,2048
 400fb44:	10841704 	addi	r2,r2,4188
 400fb48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0026);
 400fb4c:	00c00984 	movi	r3,38
 400fb50:	00820034 	movhi	r2,2048
 400fb54:	10841704 	addi	r2,r2,4188
 400fb58:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0024);
 400fb5c:	00c00904 	movi	r3,36
 400fb60:	00820034 	movhi	r2,2048
 400fb64:	10841704 	addi	r2,r2,4188
 400fb68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000b);
 400fb6c:	00c002c4 	movi	r3,11
 400fb70:	00820034 	movhi	r2,2048
 400fb74:	10841704 	addi	r2,r2,4188
 400fb78:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000E);
 400fb7c:	00c00384 	movi	r3,14
 400fb80:	00820034 	movhi	r2,2048
 400fb84:	10841704 	addi	r2,r2,4188
 400fb88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);
 400fb8c:	00c00204 	movi	r3,8
 400fb90:	00820034 	movhi	r2,2048
 400fb94:	10841704 	addi	r2,r2,4188
 400fb98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x004b);
 400fb9c:	00c012c4 	movi	r3,75
 400fba0:	00820034 	movhi	r2,2048
 400fba4:	10841704 	addi	r2,r2,4188
 400fba8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0X00a8);
 400fbac:	00c02a04 	movi	r3,168
 400fbb0:	00820034 	movhi	r2,2048
 400fbb4:	10841704 	addi	r2,r2,4188
 400fbb8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x003b);
 400fbbc:	00c00ec4 	movi	r3,59
 400fbc0:	00820034 	movhi	r2,2048
 400fbc4:	10841704 	addi	r2,r2,4188
 400fbc8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000a);
 400fbcc:	00c00284 	movi	r3,10
 400fbd0:	00820034 	movhi	r2,2048
 400fbd4:	10841704 	addi	r2,r2,4188
 400fbd8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0014);
 400fbdc:	00c00504 	movi	r3,20
 400fbe0:	00820034 	movhi	r2,2048
 400fbe4:	10841704 	addi	r2,r2,4188
 400fbe8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0006);
 400fbec:	00c00184 	movi	r3,6
 400fbf0:	00820034 	movhi	r2,2048
 400fbf4:	10841704 	addi	r2,r2,4188
 400fbf8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0010);
 400fbfc:	00c00404 	movi	r3,16
 400fc00:	00820034 	movhi	r2,2048
 400fc04:	10841704 	addi	r2,r2,4188
 400fc08:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0009);
 400fc0c:	00c00244 	movi	r3,9
 400fc10:	00820034 	movhi	r2,2048
 400fc14:	10841704 	addi	r2,r2,4188
 400fc18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fc1c:	0007883a 	mov	r3,zero
 400fc20:	00820034 	movhi	r2,2048
 400fc24:	10841704 	addi	r2,r2,4188
 400fc28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0X00E1);  //Set Gamma
 400fc2c:	00c03844 	movi	r3,225
 400fc30:	00820034 	movhi	r2,2048
 400fc34:	10841604 	addi	r2,r2,4184
 400fc38:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fc3c:	0007883a 	mov	r3,zero
 400fc40:	00820034 	movhi	r2,2048
 400fc44:	10841704 	addi	r2,r2,4188
 400fc48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x001c);
 400fc4c:	00c00704 	movi	r3,28
 400fc50:	00820034 	movhi	r2,2048
 400fc54:	10841704 	addi	r2,r2,4188
 400fc58:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0020);
 400fc5c:	00c00804 	movi	r3,32
 400fc60:	00820034 	movhi	r2,2048
 400fc64:	10841704 	addi	r2,r2,4188
 400fc68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0004);
 400fc6c:	00c00104 	movi	r3,4
 400fc70:	00820034 	movhi	r2,2048
 400fc74:	10841704 	addi	r2,r2,4188
 400fc78:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0010);
 400fc7c:	00c00404 	movi	r3,16
 400fc80:	00820034 	movhi	r2,2048
 400fc84:	10841704 	addi	r2,r2,4188
 400fc88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0008);
 400fc8c:	00c00204 	movi	r3,8
 400fc90:	00820034 	movhi	r2,2048
 400fc94:	10841704 	addi	r2,r2,4188
 400fc98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0034);
 400fc9c:	00c00d04 	movi	r3,52
 400fca0:	00820034 	movhi	r2,2048
 400fca4:	10841704 	addi	r2,r2,4188
 400fca8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0047);
 400fcac:	00c011c4 	movi	r3,71
 400fcb0:	00820034 	movhi	r2,2048
 400fcb4:	10841704 	addi	r2,r2,4188
 400fcb8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0044);
 400fcbc:	00c01104 	movi	r3,68
 400fcc0:	00820034 	movhi	r2,2048
 400fcc4:	10841704 	addi	r2,r2,4188
 400fcc8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0005);
 400fccc:	00c00144 	movi	r3,5
 400fcd0:	00820034 	movhi	r2,2048
 400fcd4:	10841704 	addi	r2,r2,4188
 400fcd8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000b);
 400fcdc:	00c002c4 	movi	r3,11
 400fce0:	00820034 	movhi	r2,2048
 400fce4:	10841704 	addi	r2,r2,4188
 400fce8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0009);
 400fcec:	00c00244 	movi	r3,9
 400fcf0:	00820034 	movhi	r2,2048
 400fcf4:	10841704 	addi	r2,r2,4188
 400fcf8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x002f);
 400fcfc:	00c00bc4 	movi	r3,47
 400fd00:	00820034 	movhi	r2,2048
 400fd04:	10841704 	addi	r2,r2,4188
 400fd08:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0036);
 400fd0c:	00c00d84 	movi	r3,54
 400fd10:	00820034 	movhi	r2,2048
 400fd14:	10841704 	addi	r2,r2,4188
 400fd18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x000f);
 400fd1c:	00c003c4 	movi	r3,15
 400fd20:	00820034 	movhi	r2,2048
 400fd24:	10841704 	addi	r2,r2,4188
 400fd28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002A);
 400fd2c:	00c00a84 	movi	r3,42
 400fd30:	00820034 	movhi	r2,2048
 400fd34:	10841604 	addi	r2,r2,4184
 400fd38:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fd3c:	0007883a 	mov	r3,zero
 400fd40:	00820034 	movhi	r2,2048
 400fd44:	10841704 	addi	r2,r2,4188
 400fd48:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fd4c:	0007883a 	mov	r3,zero
 400fd50:	00820034 	movhi	r2,2048
 400fd54:	10841704 	addi	r2,r2,4188
 400fd58:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fd5c:	0007883a 	mov	r3,zero
 400fd60:	00820034 	movhi	r2,2048
 400fd64:	10841704 	addi	r2,r2,4188
 400fd68:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x00ef);
 400fd6c:	00c03bc4 	movi	r3,239
 400fd70:	00820034 	movhi	r2,2048
 400fd74:	10841704 	addi	r2,r2,4188
 400fd78:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002B);
 400fd7c:	00c00ac4 	movi	r3,43
 400fd80:	00820034 	movhi	r2,2048
 400fd84:	10841604 	addi	r2,r2,4184
 400fd88:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fd8c:	0007883a 	mov	r3,zero
 400fd90:	00820034 	movhi	r2,2048
 400fd94:	10841704 	addi	r2,r2,4188
 400fd98:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fd9c:	0007883a 	mov	r3,zero
 400fda0:	00820034 	movhi	r2,2048
 400fda4:	10841704 	addi	r2,r2,4188
 400fda8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 400fdac:	00c00044 	movi	r3,1
 400fdb0:	00820034 	movhi	r2,2048
 400fdb4:	10841704 	addi	r2,r2,4188
 400fdb8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x003f);
 400fdbc:	00c00fc4 	movi	r3,63
 400fdc0:	00820034 	movhi	r2,2048
 400fdc4:	10841704 	addi	r2,r2,4188
 400fdc8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x003A);
 400fdcc:	00c00e84 	movi	r3,58
 400fdd0:	00820034 	movhi	r2,2048
 400fdd4:	10841604 	addi	r2,r2,4184
 400fdd8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0055);
 400fddc:	00c01544 	movi	r3,85
 400fde0:	00820034 	movhi	r2,2048
 400fde4:	10841704 	addi	r2,r2,4188
 400fde8:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x00f6);
 400fdec:	00c03d84 	movi	r3,246
 400fdf0:	00820034 	movhi	r2,2048
 400fdf4:	10841604 	addi	r2,r2,4184
 400fdf8:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0001);
 400fdfc:	00c00044 	movi	r3,1
 400fe00:	00820034 	movhi	r2,2048
 400fe04:	10841704 	addi	r2,r2,4188
 400fe08:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0030);
 400fe0c:	00c00c04 	movi	r3,48
 400fe10:	00820034 	movhi	r2,2048
 400fe14:	10841704 	addi	r2,r2,4188
 400fe18:	10c00035 	stwio	r3,0(r2)
		IOWR_LT24_AVALON_LCD_WR_DATA(LCD_CONTROLLER_BASE,0x0000);
 400fe1c:	0007883a 	mov	r3,zero
 400fe20:	00820034 	movhi	r2,2048
 400fe24:	10841704 	addi	r2,r2,4188
 400fe28:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x0029);  //display on
 400fe2c:	00c00a44 	movi	r3,41
 400fe30:	00820034 	movhi	r2,2048
 400fe34:	10841604 	addi	r2,r2,4184
 400fe38:	10c00035 	stwio	r3,0(r2)

	IOWR_LT24_AVALON_LCD_WR_REG(LCD_CONTROLLER_BASE,0x002c);  // 0x2C
 400fe3c:	00c00b04 	movi	r3,44
 400fe40:	00820034 	movhi	r2,2048
 400fe44:	10841604 	addi	r2,r2,4184
 400fe48:	10c00035 	stwio	r3,0(r2)


}
 400fe4c:	0001883a 	nop
 400fe50:	e037883a 	mov	sp,fp
 400fe54:	dfc00117 	ldw	ra,4(sp)
 400fe58:	df000017 	ldw	fp,0(sp)
 400fe5c:	dec00204 	addi	sp,sp,8
 400fe60:	f800283a 	ret

0400fe64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400fe64:	defffa04 	addi	sp,sp,-24
 400fe68:	dfc00515 	stw	ra,20(sp)
 400fe6c:	df000415 	stw	fp,16(sp)
 400fe70:	df000404 	addi	fp,sp,16
 400fe74:	e13ffd15 	stw	r4,-12(fp)
 400fe78:	e17ffe15 	stw	r5,-8(fp)
 400fe7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400fe80:	e0bffd17 	ldw	r2,-12(fp)
 400fe84:	10800017 	ldw	r2,0(r2)
 400fe88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400fe8c:	e0bffc17 	ldw	r2,-16(fp)
 400fe90:	10c00a04 	addi	r3,r2,40
 400fe94:	e0bffd17 	ldw	r2,-12(fp)
 400fe98:	10800217 	ldw	r2,8(r2)
 400fe9c:	100f883a 	mov	r7,r2
 400fea0:	e1bfff17 	ldw	r6,-4(fp)
 400fea4:	e17ffe17 	ldw	r5,-8(fp)
 400fea8:	1809883a 	mov	r4,r3
 400feac:	401048c0 	call	401048c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400feb0:	e037883a 	mov	sp,fp
 400feb4:	dfc00117 	ldw	ra,4(sp)
 400feb8:	df000017 	ldw	fp,0(sp)
 400febc:	dec00204 	addi	sp,sp,8
 400fec0:	f800283a 	ret

0400fec4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400fec4:	defffa04 	addi	sp,sp,-24
 400fec8:	dfc00515 	stw	ra,20(sp)
 400fecc:	df000415 	stw	fp,16(sp)
 400fed0:	df000404 	addi	fp,sp,16
 400fed4:	e13ffd15 	stw	r4,-12(fp)
 400fed8:	e17ffe15 	stw	r5,-8(fp)
 400fedc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400fee0:	e0bffd17 	ldw	r2,-12(fp)
 400fee4:	10800017 	ldw	r2,0(r2)
 400fee8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400feec:	e0bffc17 	ldw	r2,-16(fp)
 400fef0:	10c00a04 	addi	r3,r2,40
 400fef4:	e0bffd17 	ldw	r2,-12(fp)
 400fef8:	10800217 	ldw	r2,8(r2)
 400fefc:	100f883a 	mov	r7,r2
 400ff00:	e1bfff17 	ldw	r6,-4(fp)
 400ff04:	e17ffe17 	ldw	r5,-8(fp)
 400ff08:	1809883a 	mov	r4,r3
 400ff0c:	40106a80 	call	40106a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400ff10:	e037883a 	mov	sp,fp
 400ff14:	dfc00117 	ldw	ra,4(sp)
 400ff18:	df000017 	ldw	fp,0(sp)
 400ff1c:	dec00204 	addi	sp,sp,8
 400ff20:	f800283a 	ret

0400ff24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400ff24:	defffc04 	addi	sp,sp,-16
 400ff28:	dfc00315 	stw	ra,12(sp)
 400ff2c:	df000215 	stw	fp,8(sp)
 400ff30:	df000204 	addi	fp,sp,8
 400ff34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400ff38:	e0bfff17 	ldw	r2,-4(fp)
 400ff3c:	10800017 	ldw	r2,0(r2)
 400ff40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400ff44:	e0bffe17 	ldw	r2,-8(fp)
 400ff48:	10c00a04 	addi	r3,r2,40
 400ff4c:	e0bfff17 	ldw	r2,-4(fp)
 400ff50:	10800217 	ldw	r2,8(r2)
 400ff54:	100b883a 	mov	r5,r2
 400ff58:	1809883a 	mov	r4,r3
 400ff5c:	40103340 	call	4010334 <altera_avalon_jtag_uart_close>
}
 400ff60:	e037883a 	mov	sp,fp
 400ff64:	dfc00117 	ldw	ra,4(sp)
 400ff68:	df000017 	ldw	fp,0(sp)
 400ff6c:	dec00204 	addi	sp,sp,8
 400ff70:	f800283a 	ret

0400ff74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400ff74:	defffa04 	addi	sp,sp,-24
 400ff78:	dfc00515 	stw	ra,20(sp)
 400ff7c:	df000415 	stw	fp,16(sp)
 400ff80:	df000404 	addi	fp,sp,16
 400ff84:	e13ffd15 	stw	r4,-12(fp)
 400ff88:	e17ffe15 	stw	r5,-8(fp)
 400ff8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400ff90:	e0bffd17 	ldw	r2,-12(fp)
 400ff94:	10800017 	ldw	r2,0(r2)
 400ff98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400ff9c:	e0bffc17 	ldw	r2,-16(fp)
 400ffa0:	10800a04 	addi	r2,r2,40
 400ffa4:	e1bfff17 	ldw	r6,-4(fp)
 400ffa8:	e17ffe17 	ldw	r5,-8(fp)
 400ffac:	1009883a 	mov	r4,r2
 400ffb0:	401039c0 	call	401039c <altera_avalon_jtag_uart_ioctl>
}
 400ffb4:	e037883a 	mov	sp,fp
 400ffb8:	dfc00117 	ldw	ra,4(sp)
 400ffbc:	df000017 	ldw	fp,0(sp)
 400ffc0:	dec00204 	addi	sp,sp,8
 400ffc4:	f800283a 	ret

0400ffc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400ffc8:	defffa04 	addi	sp,sp,-24
 400ffcc:	dfc00515 	stw	ra,20(sp)
 400ffd0:	df000415 	stw	fp,16(sp)
 400ffd4:	df000404 	addi	fp,sp,16
 400ffd8:	e13ffd15 	stw	r4,-12(fp)
 400ffdc:	e17ffe15 	stw	r5,-8(fp)
 400ffe0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400ffe4:	e0bffd17 	ldw	r2,-12(fp)
 400ffe8:	00c00044 	movi	r3,1
 400ffec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400fff0:	e0bffd17 	ldw	r2,-12(fp)
 400fff4:	10800017 	ldw	r2,0(r2)
 400fff8:	10800104 	addi	r2,r2,4
 400fffc:	1007883a 	mov	r3,r2
 4010000:	e0bffd17 	ldw	r2,-12(fp)
 4010004:	10800817 	ldw	r2,32(r2)
 4010008:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401000c:	e0bffe17 	ldw	r2,-8(fp)
 4010010:	e0ffff17 	ldw	r3,-4(fp)
 4010014:	d8000015 	stw	zero,0(sp)
 4010018:	e1fffd17 	ldw	r7,-12(fp)
 401001c:	01810074 	movhi	r6,1025
 4010020:	31802204 	addi	r6,r6,136
 4010024:	180b883a 	mov	r5,r3
 4010028:	1009883a 	mov	r4,r2
 401002c:	400e7080 	call	400e708 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4010030:	e0bffd17 	ldw	r2,-12(fp)
 4010034:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4010038:	e0bffd17 	ldw	r2,-12(fp)
 401003c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010040:	d0ecb817 	ldw	r3,-19744(gp)
 4010044:	e1fffd17 	ldw	r7,-12(fp)
 4010048:	01810074 	movhi	r6,1025
 401004c:	3180a504 	addi	r6,r6,660
 4010050:	180b883a 	mov	r5,r3
 4010054:	1009883a 	mov	r4,r2
 4010058:	4010bbc0 	call	4010bbc <alt_alarm_start>
 401005c:	1000040e 	bge	r2,zero,4010070 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4010060:	e0fffd17 	ldw	r3,-12(fp)
 4010064:	00a00034 	movhi	r2,32768
 4010068:	10bfffc4 	addi	r2,r2,-1
 401006c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4010070:	0001883a 	nop
 4010074:	e037883a 	mov	sp,fp
 4010078:	dfc00117 	ldw	ra,4(sp)
 401007c:	df000017 	ldw	fp,0(sp)
 4010080:	dec00204 	addi	sp,sp,8
 4010084:	f800283a 	ret

04010088 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4010088:	defff804 	addi	sp,sp,-32
 401008c:	df000715 	stw	fp,28(sp)
 4010090:	df000704 	addi	fp,sp,28
 4010094:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4010098:	e0bfff17 	ldw	r2,-4(fp)
 401009c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 40100a0:	e0bffb17 	ldw	r2,-20(fp)
 40100a4:	10800017 	ldw	r2,0(r2)
 40100a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40100ac:	e0bffc17 	ldw	r2,-16(fp)
 40100b0:	10800104 	addi	r2,r2,4
 40100b4:	10800037 	ldwio	r2,0(r2)
 40100b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40100bc:	e0bffd17 	ldw	r2,-12(fp)
 40100c0:	1080c00c 	andi	r2,r2,768
 40100c4:	10006d26 	beq	r2,zero,401027c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40100c8:	e0bffd17 	ldw	r2,-12(fp)
 40100cc:	1080400c 	andi	r2,r2,256
 40100d0:	10003526 	beq	r2,zero,40101a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40100d4:	00800074 	movhi	r2,1
 40100d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40100dc:	e0bffb17 	ldw	r2,-20(fp)
 40100e0:	10800a17 	ldw	r2,40(r2)
 40100e4:	10800044 	addi	r2,r2,1
 40100e8:	1081ffcc 	andi	r2,r2,2047
 40100ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40100f0:	e0bffb17 	ldw	r2,-20(fp)
 40100f4:	10c00b17 	ldw	r3,44(r2)
 40100f8:	e0bffe17 	ldw	r2,-8(fp)
 40100fc:	18801526 	beq	r3,r2,4010154 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4010100:	e0bffc17 	ldw	r2,-16(fp)
 4010104:	10800037 	ldwio	r2,0(r2)
 4010108:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401010c:	e0bff917 	ldw	r2,-28(fp)
 4010110:	10a0000c 	andi	r2,r2,32768
 4010114:	10001126 	beq	r2,zero,401015c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4010118:	e0bffb17 	ldw	r2,-20(fp)
 401011c:	10800a17 	ldw	r2,40(r2)
 4010120:	e0fff917 	ldw	r3,-28(fp)
 4010124:	1809883a 	mov	r4,r3
 4010128:	e0fffb17 	ldw	r3,-20(fp)
 401012c:	1885883a 	add	r2,r3,r2
 4010130:	10800e04 	addi	r2,r2,56
 4010134:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010138:	e0bffb17 	ldw	r2,-20(fp)
 401013c:	10800a17 	ldw	r2,40(r2)
 4010140:	10800044 	addi	r2,r2,1
 4010144:	10c1ffcc 	andi	r3,r2,2047
 4010148:	e0bffb17 	ldw	r2,-20(fp)
 401014c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4010150:	003fe206 	br	40100dc <__alt_data_end+0xfc0100dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4010154:	0001883a 	nop
 4010158:	00000106 	br	4010160 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401015c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4010160:	e0bff917 	ldw	r2,-28(fp)
 4010164:	10bfffec 	andhi	r2,r2,65535
 4010168:	10000f26 	beq	r2,zero,40101a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401016c:	e0bffb17 	ldw	r2,-20(fp)
 4010170:	10c00817 	ldw	r3,32(r2)
 4010174:	00bfff84 	movi	r2,-2
 4010178:	1886703a 	and	r3,r3,r2
 401017c:	e0bffb17 	ldw	r2,-20(fp)
 4010180:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4010184:	e0bffc17 	ldw	r2,-16(fp)
 4010188:	10800104 	addi	r2,r2,4
 401018c:	1007883a 	mov	r3,r2
 4010190:	e0bffb17 	ldw	r2,-20(fp)
 4010194:	10800817 	ldw	r2,32(r2)
 4010198:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401019c:	e0bffc17 	ldw	r2,-16(fp)
 40101a0:	10800104 	addi	r2,r2,4
 40101a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40101a8:	e0bffd17 	ldw	r2,-12(fp)
 40101ac:	1080800c 	andi	r2,r2,512
 40101b0:	103fbe26 	beq	r2,zero,40100ac <__alt_data_end+0xfc0100ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40101b4:	e0bffd17 	ldw	r2,-12(fp)
 40101b8:	1004d43a 	srli	r2,r2,16
 40101bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40101c0:	00001406 	br	4010214 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40101c4:	e0bffc17 	ldw	r2,-16(fp)
 40101c8:	e0fffb17 	ldw	r3,-20(fp)
 40101cc:	18c00d17 	ldw	r3,52(r3)
 40101d0:	e13ffb17 	ldw	r4,-20(fp)
 40101d4:	20c7883a 	add	r3,r4,r3
 40101d8:	18c20e04 	addi	r3,r3,2104
 40101dc:	18c00003 	ldbu	r3,0(r3)
 40101e0:	18c03fcc 	andi	r3,r3,255
 40101e4:	18c0201c 	xori	r3,r3,128
 40101e8:	18ffe004 	addi	r3,r3,-128
 40101ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40101f0:	e0bffb17 	ldw	r2,-20(fp)
 40101f4:	10800d17 	ldw	r2,52(r2)
 40101f8:	10800044 	addi	r2,r2,1
 40101fc:	10c1ffcc 	andi	r3,r2,2047
 4010200:	e0bffb17 	ldw	r2,-20(fp)
 4010204:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4010208:	e0bffa17 	ldw	r2,-24(fp)
 401020c:	10bfffc4 	addi	r2,r2,-1
 4010210:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4010214:	e0bffa17 	ldw	r2,-24(fp)
 4010218:	10000526 	beq	r2,zero,4010230 <altera_avalon_jtag_uart_irq+0x1a8>
 401021c:	e0bffb17 	ldw	r2,-20(fp)
 4010220:	10c00d17 	ldw	r3,52(r2)
 4010224:	e0bffb17 	ldw	r2,-20(fp)
 4010228:	10800c17 	ldw	r2,48(r2)
 401022c:	18bfe51e 	bne	r3,r2,40101c4 <__alt_data_end+0xfc0101c4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4010230:	e0bffa17 	ldw	r2,-24(fp)
 4010234:	103f9d26 	beq	r2,zero,40100ac <__alt_data_end+0xfc0100ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4010238:	e0bffb17 	ldw	r2,-20(fp)
 401023c:	10c00817 	ldw	r3,32(r2)
 4010240:	00bfff44 	movi	r2,-3
 4010244:	1886703a 	and	r3,r3,r2
 4010248:	e0bffb17 	ldw	r2,-20(fp)
 401024c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4010250:	e0bffb17 	ldw	r2,-20(fp)
 4010254:	10800017 	ldw	r2,0(r2)
 4010258:	10800104 	addi	r2,r2,4
 401025c:	1007883a 	mov	r3,r2
 4010260:	e0bffb17 	ldw	r2,-20(fp)
 4010264:	10800817 	ldw	r2,32(r2)
 4010268:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401026c:	e0bffc17 	ldw	r2,-16(fp)
 4010270:	10800104 	addi	r2,r2,4
 4010274:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4010278:	003f8c06 	br	40100ac <__alt_data_end+0xfc0100ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401027c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4010280:	0001883a 	nop
 4010284:	e037883a 	mov	sp,fp
 4010288:	df000017 	ldw	fp,0(sp)
 401028c:	dec00104 	addi	sp,sp,4
 4010290:	f800283a 	ret

04010294 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4010294:	defff804 	addi	sp,sp,-32
 4010298:	df000715 	stw	fp,28(sp)
 401029c:	df000704 	addi	fp,sp,28
 40102a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40102a4:	e0bffb17 	ldw	r2,-20(fp)
 40102a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40102ac:	e0bff917 	ldw	r2,-28(fp)
 40102b0:	10800017 	ldw	r2,0(r2)
 40102b4:	10800104 	addi	r2,r2,4
 40102b8:	10800037 	ldwio	r2,0(r2)
 40102bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40102c0:	e0bffa17 	ldw	r2,-24(fp)
 40102c4:	1081000c 	andi	r2,r2,1024
 40102c8:	10000b26 	beq	r2,zero,40102f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40102cc:	e0bff917 	ldw	r2,-28(fp)
 40102d0:	10800017 	ldw	r2,0(r2)
 40102d4:	10800104 	addi	r2,r2,4
 40102d8:	1007883a 	mov	r3,r2
 40102dc:	e0bff917 	ldw	r2,-28(fp)
 40102e0:	10800817 	ldw	r2,32(r2)
 40102e4:	10810014 	ori	r2,r2,1024
 40102e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40102ec:	e0bff917 	ldw	r2,-28(fp)
 40102f0:	10000915 	stw	zero,36(r2)
 40102f4:	00000a06 	br	4010320 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40102f8:	e0bff917 	ldw	r2,-28(fp)
 40102fc:	10c00917 	ldw	r3,36(r2)
 4010300:	00a00034 	movhi	r2,32768
 4010304:	10bfff04 	addi	r2,r2,-4
 4010308:	10c00536 	bltu	r2,r3,4010320 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401030c:	e0bff917 	ldw	r2,-28(fp)
 4010310:	10800917 	ldw	r2,36(r2)
 4010314:	10c00044 	addi	r3,r2,1
 4010318:	e0bff917 	ldw	r2,-28(fp)
 401031c:	10c00915 	stw	r3,36(r2)
 4010320:	d0acb817 	ldw	r2,-19744(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4010324:	e037883a 	mov	sp,fp
 4010328:	df000017 	ldw	fp,0(sp)
 401032c:	dec00104 	addi	sp,sp,4
 4010330:	f800283a 	ret

04010334 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4010334:	defffd04 	addi	sp,sp,-12
 4010338:	df000215 	stw	fp,8(sp)
 401033c:	df000204 	addi	fp,sp,8
 4010340:	e13ffe15 	stw	r4,-8(fp)
 4010344:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010348:	00000506 	br	4010360 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401034c:	e0bfff17 	ldw	r2,-4(fp)
 4010350:	1090000c 	andi	r2,r2,16384
 4010354:	10000226 	beq	r2,zero,4010360 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4010358:	00bffd44 	movi	r2,-11
 401035c:	00000b06 	br	401038c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010360:	e0bffe17 	ldw	r2,-8(fp)
 4010364:	10c00d17 	ldw	r3,52(r2)
 4010368:	e0bffe17 	ldw	r2,-8(fp)
 401036c:	10800c17 	ldw	r2,48(r2)
 4010370:	18800526 	beq	r3,r2,4010388 <altera_avalon_jtag_uart_close+0x54>
 4010374:	e0bffe17 	ldw	r2,-8(fp)
 4010378:	10c00917 	ldw	r3,36(r2)
 401037c:	e0bffe17 	ldw	r2,-8(fp)
 4010380:	10800117 	ldw	r2,4(r2)
 4010384:	18bff136 	bltu	r3,r2,401034c <__alt_data_end+0xfc01034c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4010388:	0005883a 	mov	r2,zero
}
 401038c:	e037883a 	mov	sp,fp
 4010390:	df000017 	ldw	fp,0(sp)
 4010394:	dec00104 	addi	sp,sp,4
 4010398:	f800283a 	ret

0401039c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401039c:	defffa04 	addi	sp,sp,-24
 40103a0:	df000515 	stw	fp,20(sp)
 40103a4:	df000504 	addi	fp,sp,20
 40103a8:	e13ffd15 	stw	r4,-12(fp)
 40103ac:	e17ffe15 	stw	r5,-8(fp)
 40103b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40103b4:	00bff9c4 	movi	r2,-25
 40103b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40103bc:	e0bffe17 	ldw	r2,-8(fp)
 40103c0:	10da8060 	cmpeqi	r3,r2,27137
 40103c4:	1800031e 	bne	r3,zero,40103d4 <altera_avalon_jtag_uart_ioctl+0x38>
 40103c8:	109a80a0 	cmpeqi	r2,r2,27138
 40103cc:	1000181e 	bne	r2,zero,4010430 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40103d0:	00002906 	br	4010478 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40103d4:	e0bffd17 	ldw	r2,-12(fp)
 40103d8:	10c00117 	ldw	r3,4(r2)
 40103dc:	00a00034 	movhi	r2,32768
 40103e0:	10bfffc4 	addi	r2,r2,-1
 40103e4:	18802126 	beq	r3,r2,401046c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40103e8:	e0bfff17 	ldw	r2,-4(fp)
 40103ec:	10800017 	ldw	r2,0(r2)
 40103f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40103f4:	e0bffc17 	ldw	r2,-16(fp)
 40103f8:	10800090 	cmplti	r2,r2,2
 40103fc:	1000061e 	bne	r2,zero,4010418 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010400:	e0fffc17 	ldw	r3,-16(fp)
 4010404:	00a00034 	movhi	r2,32768
 4010408:	10bfffc4 	addi	r2,r2,-1
 401040c:	18800226 	beq	r3,r2,4010418 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010410:	e0bffc17 	ldw	r2,-16(fp)
 4010414:	00000206 	br	4010420 <altera_avalon_jtag_uart_ioctl+0x84>
 4010418:	00a00034 	movhi	r2,32768
 401041c:	10bfff84 	addi	r2,r2,-2
 4010420:	e0fffd17 	ldw	r3,-12(fp)
 4010424:	18800115 	stw	r2,4(r3)
      rc = 0;
 4010428:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401042c:	00000f06 	br	401046c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4010430:	e0bffd17 	ldw	r2,-12(fp)
 4010434:	10c00117 	ldw	r3,4(r2)
 4010438:	00a00034 	movhi	r2,32768
 401043c:	10bfffc4 	addi	r2,r2,-1
 4010440:	18800c26 	beq	r3,r2,4010474 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4010444:	e0bffd17 	ldw	r2,-12(fp)
 4010448:	10c00917 	ldw	r3,36(r2)
 401044c:	e0bffd17 	ldw	r2,-12(fp)
 4010450:	10800117 	ldw	r2,4(r2)
 4010454:	1885803a 	cmpltu	r2,r3,r2
 4010458:	10c03fcc 	andi	r3,r2,255
 401045c:	e0bfff17 	ldw	r2,-4(fp)
 4010460:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4010464:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4010468:	00000206 	br	4010474 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401046c:	0001883a 	nop
 4010470:	00000106 	br	4010478 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4010474:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4010478:	e0bffb17 	ldw	r2,-20(fp)
}
 401047c:	e037883a 	mov	sp,fp
 4010480:	df000017 	ldw	fp,0(sp)
 4010484:	dec00104 	addi	sp,sp,4
 4010488:	f800283a 	ret

0401048c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401048c:	defff304 	addi	sp,sp,-52
 4010490:	dfc00c15 	stw	ra,48(sp)
 4010494:	df000b15 	stw	fp,44(sp)
 4010498:	df000b04 	addi	fp,sp,44
 401049c:	e13ffc15 	stw	r4,-16(fp)
 40104a0:	e17ffd15 	stw	r5,-12(fp)
 40104a4:	e1bffe15 	stw	r6,-8(fp)
 40104a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40104ac:	e0bffd17 	ldw	r2,-12(fp)
 40104b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40104b4:	00004706 	br	40105d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40104b8:	e0bffc17 	ldw	r2,-16(fp)
 40104bc:	10800a17 	ldw	r2,40(r2)
 40104c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40104c4:	e0bffc17 	ldw	r2,-16(fp)
 40104c8:	10800b17 	ldw	r2,44(r2)
 40104cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40104d0:	e0fff717 	ldw	r3,-36(fp)
 40104d4:	e0bff817 	ldw	r2,-32(fp)
 40104d8:	18800536 	bltu	r3,r2,40104f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40104dc:	e0fff717 	ldw	r3,-36(fp)
 40104e0:	e0bff817 	ldw	r2,-32(fp)
 40104e4:	1885c83a 	sub	r2,r3,r2
 40104e8:	e0bff615 	stw	r2,-40(fp)
 40104ec:	00000406 	br	4010500 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40104f0:	00c20004 	movi	r3,2048
 40104f4:	e0bff817 	ldw	r2,-32(fp)
 40104f8:	1885c83a 	sub	r2,r3,r2
 40104fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4010500:	e0bff617 	ldw	r2,-40(fp)
 4010504:	10001e26 	beq	r2,zero,4010580 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4010508:	e0fffe17 	ldw	r3,-8(fp)
 401050c:	e0bff617 	ldw	r2,-40(fp)
 4010510:	1880022e 	bgeu	r3,r2,401051c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4010514:	e0bffe17 	ldw	r2,-8(fp)
 4010518:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401051c:	e0bffc17 	ldw	r2,-16(fp)
 4010520:	10c00e04 	addi	r3,r2,56
 4010524:	e0bff817 	ldw	r2,-32(fp)
 4010528:	1885883a 	add	r2,r3,r2
 401052c:	e1bff617 	ldw	r6,-40(fp)
 4010530:	100b883a 	mov	r5,r2
 4010534:	e13ff517 	ldw	r4,-44(fp)
 4010538:	40078440 	call	4007844 <memcpy>
      ptr   += n;
 401053c:	e0fff517 	ldw	r3,-44(fp)
 4010540:	e0bff617 	ldw	r2,-40(fp)
 4010544:	1885883a 	add	r2,r3,r2
 4010548:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401054c:	e0fffe17 	ldw	r3,-8(fp)
 4010550:	e0bff617 	ldw	r2,-40(fp)
 4010554:	1885c83a 	sub	r2,r3,r2
 4010558:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401055c:	e0fff817 	ldw	r3,-32(fp)
 4010560:	e0bff617 	ldw	r2,-40(fp)
 4010564:	1885883a 	add	r2,r3,r2
 4010568:	10c1ffcc 	andi	r3,r2,2047
 401056c:	e0bffc17 	ldw	r2,-16(fp)
 4010570:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4010574:	e0bffe17 	ldw	r2,-8(fp)
 4010578:	00bfcf16 	blt	zero,r2,40104b8 <__alt_data_end+0xfc0104b8>
 401057c:	00000106 	br	4010584 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4010580:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4010584:	e0fff517 	ldw	r3,-44(fp)
 4010588:	e0bffd17 	ldw	r2,-12(fp)
 401058c:	1880141e 	bne	r3,r2,40105e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4010590:	e0bfff17 	ldw	r2,-4(fp)
 4010594:	1090000c 	andi	r2,r2,16384
 4010598:	1000131e 	bne	r2,zero,40105e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401059c:	0001883a 	nop
 40105a0:	e0bffc17 	ldw	r2,-16(fp)
 40105a4:	10c00a17 	ldw	r3,40(r2)
 40105a8:	e0bff717 	ldw	r2,-36(fp)
 40105ac:	1880051e 	bne	r3,r2,40105c4 <altera_avalon_jtag_uart_read+0x138>
 40105b0:	e0bffc17 	ldw	r2,-16(fp)
 40105b4:	10c00917 	ldw	r3,36(r2)
 40105b8:	e0bffc17 	ldw	r2,-16(fp)
 40105bc:	10800117 	ldw	r2,4(r2)
 40105c0:	18bff736 	bltu	r3,r2,40105a0 <__alt_data_end+0xfc0105a0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40105c4:	e0bffc17 	ldw	r2,-16(fp)
 40105c8:	10c00a17 	ldw	r3,40(r2)
 40105cc:	e0bff717 	ldw	r2,-36(fp)
 40105d0:	18800726 	beq	r3,r2,40105f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40105d4:	e0bffe17 	ldw	r2,-8(fp)
 40105d8:	00bfb716 	blt	zero,r2,40104b8 <__alt_data_end+0xfc0104b8>
 40105dc:	00000506 	br	40105f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40105e0:	0001883a 	nop
 40105e4:	00000306 	br	40105f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40105e8:	0001883a 	nop
 40105ec:	00000106 	br	40105f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40105f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40105f4:	e0fff517 	ldw	r3,-44(fp)
 40105f8:	e0bffd17 	ldw	r2,-12(fp)
 40105fc:	18801826 	beq	r3,r2,4010660 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010600:	0005303a 	rdctl	r2,status
 4010604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010608:	e0fffb17 	ldw	r3,-20(fp)
 401060c:	00bfff84 	movi	r2,-2
 4010610:	1884703a 	and	r2,r3,r2
 4010614:	1001703a 	wrctl	status,r2
  
  return context;
 4010618:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401061c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4010620:	e0bffc17 	ldw	r2,-16(fp)
 4010624:	10800817 	ldw	r2,32(r2)
 4010628:	10c00054 	ori	r3,r2,1
 401062c:	e0bffc17 	ldw	r2,-16(fp)
 4010630:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4010634:	e0bffc17 	ldw	r2,-16(fp)
 4010638:	10800017 	ldw	r2,0(r2)
 401063c:	10800104 	addi	r2,r2,4
 4010640:	1007883a 	mov	r3,r2
 4010644:	e0bffc17 	ldw	r2,-16(fp)
 4010648:	10800817 	ldw	r2,32(r2)
 401064c:	18800035 	stwio	r2,0(r3)
 4010650:	e0bffa17 	ldw	r2,-24(fp)
 4010654:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010658:	e0bff917 	ldw	r2,-28(fp)
 401065c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4010660:	e0fff517 	ldw	r3,-44(fp)
 4010664:	e0bffd17 	ldw	r2,-12(fp)
 4010668:	18800426 	beq	r3,r2,401067c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401066c:	e0fff517 	ldw	r3,-44(fp)
 4010670:	e0bffd17 	ldw	r2,-12(fp)
 4010674:	1885c83a 	sub	r2,r3,r2
 4010678:	00000606 	br	4010694 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401067c:	e0bfff17 	ldw	r2,-4(fp)
 4010680:	1090000c 	andi	r2,r2,16384
 4010684:	10000226 	beq	r2,zero,4010690 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4010688:	00bffd44 	movi	r2,-11
 401068c:	00000106 	br	4010694 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4010690:	00bffec4 	movi	r2,-5
}
 4010694:	e037883a 	mov	sp,fp
 4010698:	dfc00117 	ldw	ra,4(sp)
 401069c:	df000017 	ldw	fp,0(sp)
 40106a0:	dec00204 	addi	sp,sp,8
 40106a4:	f800283a 	ret

040106a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40106a8:	defff304 	addi	sp,sp,-52
 40106ac:	dfc00c15 	stw	ra,48(sp)
 40106b0:	df000b15 	stw	fp,44(sp)
 40106b4:	df000b04 	addi	fp,sp,44
 40106b8:	e13ffc15 	stw	r4,-16(fp)
 40106bc:	e17ffd15 	stw	r5,-12(fp)
 40106c0:	e1bffe15 	stw	r6,-8(fp)
 40106c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40106c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40106cc:	e0bffd17 	ldw	r2,-12(fp)
 40106d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40106d4:	00003706 	br	40107b4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40106d8:	e0bffc17 	ldw	r2,-16(fp)
 40106dc:	10800c17 	ldw	r2,48(r2)
 40106e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40106e4:	e0bffc17 	ldw	r2,-16(fp)
 40106e8:	10800d17 	ldw	r2,52(r2)
 40106ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40106f0:	e0fff917 	ldw	r3,-28(fp)
 40106f4:	e0bff517 	ldw	r2,-44(fp)
 40106f8:	1880062e 	bgeu	r3,r2,4010714 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40106fc:	e0fff517 	ldw	r3,-44(fp)
 4010700:	e0bff917 	ldw	r2,-28(fp)
 4010704:	1885c83a 	sub	r2,r3,r2
 4010708:	10bfffc4 	addi	r2,r2,-1
 401070c:	e0bff615 	stw	r2,-40(fp)
 4010710:	00000b06 	br	4010740 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4010714:	e0bff517 	ldw	r2,-44(fp)
 4010718:	10000526 	beq	r2,zero,4010730 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401071c:	00c20004 	movi	r3,2048
 4010720:	e0bff917 	ldw	r2,-28(fp)
 4010724:	1885c83a 	sub	r2,r3,r2
 4010728:	e0bff615 	stw	r2,-40(fp)
 401072c:	00000406 	br	4010740 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4010730:	00c1ffc4 	movi	r3,2047
 4010734:	e0bff917 	ldw	r2,-28(fp)
 4010738:	1885c83a 	sub	r2,r3,r2
 401073c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4010740:	e0bff617 	ldw	r2,-40(fp)
 4010744:	10001e26 	beq	r2,zero,40107c0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4010748:	e0fffe17 	ldw	r3,-8(fp)
 401074c:	e0bff617 	ldw	r2,-40(fp)
 4010750:	1880022e 	bgeu	r3,r2,401075c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4010754:	e0bffe17 	ldw	r2,-8(fp)
 4010758:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401075c:	e0bffc17 	ldw	r2,-16(fp)
 4010760:	10c20e04 	addi	r3,r2,2104
 4010764:	e0bff917 	ldw	r2,-28(fp)
 4010768:	1885883a 	add	r2,r3,r2
 401076c:	e1bff617 	ldw	r6,-40(fp)
 4010770:	e17ffd17 	ldw	r5,-12(fp)
 4010774:	1009883a 	mov	r4,r2
 4010778:	40078440 	call	4007844 <memcpy>
      ptr   += n;
 401077c:	e0fffd17 	ldw	r3,-12(fp)
 4010780:	e0bff617 	ldw	r2,-40(fp)
 4010784:	1885883a 	add	r2,r3,r2
 4010788:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401078c:	e0fffe17 	ldw	r3,-8(fp)
 4010790:	e0bff617 	ldw	r2,-40(fp)
 4010794:	1885c83a 	sub	r2,r3,r2
 4010798:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401079c:	e0fff917 	ldw	r3,-28(fp)
 40107a0:	e0bff617 	ldw	r2,-40(fp)
 40107a4:	1885883a 	add	r2,r3,r2
 40107a8:	10c1ffcc 	andi	r3,r2,2047
 40107ac:	e0bffc17 	ldw	r2,-16(fp)
 40107b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40107b4:	e0bffe17 	ldw	r2,-8(fp)
 40107b8:	00bfc716 	blt	zero,r2,40106d8 <__alt_data_end+0xfc0106d8>
 40107bc:	00000106 	br	40107c4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40107c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40107c4:	0005303a 	rdctl	r2,status
 40107c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40107cc:	e0fffb17 	ldw	r3,-20(fp)
 40107d0:	00bfff84 	movi	r2,-2
 40107d4:	1884703a 	and	r2,r3,r2
 40107d8:	1001703a 	wrctl	status,r2
  
  return context;
 40107dc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40107e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40107e4:	e0bffc17 	ldw	r2,-16(fp)
 40107e8:	10800817 	ldw	r2,32(r2)
 40107ec:	10c00094 	ori	r3,r2,2
 40107f0:	e0bffc17 	ldw	r2,-16(fp)
 40107f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40107f8:	e0bffc17 	ldw	r2,-16(fp)
 40107fc:	10800017 	ldw	r2,0(r2)
 4010800:	10800104 	addi	r2,r2,4
 4010804:	1007883a 	mov	r3,r2
 4010808:	e0bffc17 	ldw	r2,-16(fp)
 401080c:	10800817 	ldw	r2,32(r2)
 4010810:	18800035 	stwio	r2,0(r3)
 4010814:	e0bffa17 	ldw	r2,-24(fp)
 4010818:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401081c:	e0bff817 	ldw	r2,-32(fp)
 4010820:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4010824:	e0bffe17 	ldw	r2,-8(fp)
 4010828:	0080100e 	bge	zero,r2,401086c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401082c:	e0bfff17 	ldw	r2,-4(fp)
 4010830:	1090000c 	andi	r2,r2,16384
 4010834:	1000101e 	bne	r2,zero,4010878 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4010838:	0001883a 	nop
 401083c:	e0bffc17 	ldw	r2,-16(fp)
 4010840:	10c00d17 	ldw	r3,52(r2)
 4010844:	e0bff517 	ldw	r2,-44(fp)
 4010848:	1880051e 	bne	r3,r2,4010860 <altera_avalon_jtag_uart_write+0x1b8>
 401084c:	e0bffc17 	ldw	r2,-16(fp)
 4010850:	10c00917 	ldw	r3,36(r2)
 4010854:	e0bffc17 	ldw	r2,-16(fp)
 4010858:	10800117 	ldw	r2,4(r2)
 401085c:	18bff736 	bltu	r3,r2,401083c <__alt_data_end+0xfc01083c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4010860:	e0bffc17 	ldw	r2,-16(fp)
 4010864:	10800917 	ldw	r2,36(r2)
 4010868:	1000051e 	bne	r2,zero,4010880 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401086c:	e0bffe17 	ldw	r2,-8(fp)
 4010870:	00bfd016 	blt	zero,r2,40107b4 <__alt_data_end+0xfc0107b4>
 4010874:	00000306 	br	4010884 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4010878:	0001883a 	nop
 401087c:	00000106 	br	4010884 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4010880:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4010884:	e0fffd17 	ldw	r3,-12(fp)
 4010888:	e0bff717 	ldw	r2,-36(fp)
 401088c:	18800426 	beq	r3,r2,40108a0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4010890:	e0fffd17 	ldw	r3,-12(fp)
 4010894:	e0bff717 	ldw	r2,-36(fp)
 4010898:	1885c83a 	sub	r2,r3,r2
 401089c:	00000606 	br	40108b8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40108a0:	e0bfff17 	ldw	r2,-4(fp)
 40108a4:	1090000c 	andi	r2,r2,16384
 40108a8:	10000226 	beq	r2,zero,40108b4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40108ac:	00bffd44 	movi	r2,-11
 40108b0:	00000106 	br	40108b8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40108b4:	00bffec4 	movi	r2,-5
}
 40108b8:	e037883a 	mov	sp,fp
 40108bc:	dfc00117 	ldw	ra,4(sp)
 40108c0:	df000017 	ldw	fp,0(sp)
 40108c4:	dec00204 	addi	sp,sp,8
 40108c8:	f800283a 	ret

040108cc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 40108cc:	defff404 	addi	sp,sp,-48
 40108d0:	df000b15 	stw	fp,44(sp)
 40108d4:	df000b04 	addi	fp,sp,44
 40108d8:	e13ffc15 	stw	r4,-16(fp)
 40108dc:	e17ffd15 	stw	r5,-12(fp)
 40108e0:	e1bffe15 	stw	r6,-8(fp)
 40108e4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 40108e8:	e0ffff17 	ldw	r3,-4(fp)
 40108ec:	e0bffe17 	ldw	r2,-8(fp)
 40108f0:	1885883a 	add	r2,r3,r2
 40108f4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 40108f8:	e0c00217 	ldw	r3,8(fp)
 40108fc:	e0800117 	ldw	r2,4(fp)
 4010900:	1885883a 	add	r2,r3,r2
 4010904:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4010908:	e0800117 	ldw	r2,4(fp)
 401090c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4010910:	e0bffe17 	ldw	r2,-8(fp)
 4010914:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4010918:	00800044 	movi	r2,1
 401091c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4010920:	e0bffc17 	ldw	r2,-16(fp)
 4010924:	10800504 	addi	r2,r2,20
 4010928:	1009883a 	mov	r4,r2
 401092c:	00c00044 	movi	r3,1
 4010930:	e0bffd17 	ldw	r2,-12(fp)
 4010934:	1884983a 	sll	r2,r3,r2
 4010938:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401093c:	e0800317 	ldw	r2,12(fp)
 4010940:	1080008c 	andi	r2,r2,2
 4010944:	1000051e 	bne	r2,zero,401095c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4010948:	e0bffc17 	ldw	r2,-16(fp)
 401094c:	10800304 	addi	r2,r2,12
 4010950:	1007883a 	mov	r3,r2
 4010954:	00810004 	movi	r2,1024
 4010958:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401095c:	e0bffc17 	ldw	r2,-16(fp)
 4010960:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4010964:	e0bffc17 	ldw	r2,-16(fp)
 4010968:	10800204 	addi	r2,r2,8
 401096c:	10800037 	ldwio	r2,0(r2)
 4010970:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4010974:	e0bffa17 	ldw	r2,-24(fp)
 4010978:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401097c:	10000226 	beq	r2,zero,4010988 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4010980:	e0bff717 	ldw	r2,-36(fp)
 4010984:	1000031e 	bne	r2,zero,4010994 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4010988:	e0bffa17 	ldw	r2,-24(fp)
 401098c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4010990:	103ff426 	beq	r2,zero,4010964 <__alt_data_end+0xfc010964>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4010994:	e0bffa17 	ldw	r2,-24(fp)
 4010998:	1080100c 	andi	r2,r2,64
 401099c:	10001e26 	beq	r2,zero,4010a18 <alt_avalon_spi_command+0x14c>
 40109a0:	e0bff717 	ldw	r2,-36(fp)
 40109a4:	00801c0e 	bge	zero,r2,4010a18 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 40109a8:	e0bff717 	ldw	r2,-36(fp)
 40109ac:	10bfffc4 	addi	r2,r2,-1
 40109b0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 40109b4:	e0ffff17 	ldw	r3,-4(fp)
 40109b8:	e0bff817 	ldw	r2,-32(fp)
 40109bc:	18800a2e 	bgeu	r3,r2,40109e8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 40109c0:	e0bffc17 	ldw	r2,-16(fp)
 40109c4:	10800104 	addi	r2,r2,4
 40109c8:	1009883a 	mov	r4,r2
 40109cc:	e0bfff17 	ldw	r2,-4(fp)
 40109d0:	10c00044 	addi	r3,r2,1
 40109d4:	e0ffff15 	stw	r3,-4(fp)
 40109d8:	10800003 	ldbu	r2,0(r2)
 40109dc:	10803fcc 	andi	r2,r2,255
 40109e0:	20800035 	stwio	r2,0(r4)
 40109e4:	00000c06 	br	4010a18 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 40109e8:	e0bff517 	ldw	r2,-44(fp)
 40109ec:	10000826 	beq	r2,zero,4010a10 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 40109f0:	e0bff517 	ldw	r2,-44(fp)
 40109f4:	10bfffc4 	addi	r2,r2,-1
 40109f8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40109fc:	e0bffc17 	ldw	r2,-16(fp)
 4010a00:	10800104 	addi	r2,r2,4
 4010a04:	0007883a 	mov	r3,zero
 4010a08:	10c00035 	stwio	r3,0(r2)
 4010a0c:	00000206 	br	4010a18 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4010a10:	00bf0004 	movi	r2,-1024
 4010a14:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4010a18:	e0bffa17 	ldw	r2,-24(fp)
 4010a1c:	1080200c 	andi	r2,r2,128
 4010a20:	103fd026 	beq	r2,zero,4010964 <__alt_data_end+0xfc010964>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4010a24:	e0bffc17 	ldw	r2,-16(fp)
 4010a28:	10800037 	ldwio	r2,0(r2)
 4010a2c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4010a30:	e0bff617 	ldw	r2,-40(fp)
 4010a34:	10000426 	beq	r2,zero,4010a48 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4010a38:	e0bff617 	ldw	r2,-40(fp)
 4010a3c:	10bfffc4 	addi	r2,r2,-1
 4010a40:	e0bff615 	stw	r2,-40(fp)
 4010a44:	00000506 	br	4010a5c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4010a48:	e0800217 	ldw	r2,8(fp)
 4010a4c:	10c00044 	addi	r3,r2,1
 4010a50:	e0c00215 	stw	r3,8(fp)
 4010a54:	e0fffb17 	ldw	r3,-20(fp)
 4010a58:	10c00005 	stb	r3,0(r2)
      credits++;
 4010a5c:	e0bff717 	ldw	r2,-36(fp)
 4010a60:	10800044 	addi	r2,r2,1
 4010a64:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4010a68:	e0bff617 	ldw	r2,-40(fp)
 4010a6c:	103fbd1e 	bne	r2,zero,4010964 <__alt_data_end+0xfc010964>
 4010a70:	e0c00217 	ldw	r3,8(fp)
 4010a74:	e0bff917 	ldw	r2,-28(fp)
 4010a78:	18bfba1e 	bne	r3,r2,4010964 <__alt_data_end+0xfc010964>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4010a7c:	e0bffc17 	ldw	r2,-16(fp)
 4010a80:	10800204 	addi	r2,r2,8
 4010a84:	10800037 	ldwio	r2,0(r2)
 4010a88:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4010a8c:	e0bffa17 	ldw	r2,-24(fp)
 4010a90:	1080080c 	andi	r2,r2,32
 4010a94:	103ff926 	beq	r2,zero,4010a7c <__alt_data_end+0xfc010a7c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4010a98:	e0800317 	ldw	r2,12(fp)
 4010a9c:	1080004c 	andi	r2,r2,1
 4010aa0:	1000041e 	bne	r2,zero,4010ab4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4010aa4:	e0bffc17 	ldw	r2,-16(fp)
 4010aa8:	10800304 	addi	r2,r2,12
 4010aac:	0007883a 	mov	r3,zero
 4010ab0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4010ab4:	e0800117 	ldw	r2,4(fp)
}
 4010ab8:	e037883a 	mov	sp,fp
 4010abc:	df000017 	ldw	fp,0(sp)
 4010ac0:	dec00104 	addi	sp,sp,4
 4010ac4:	f800283a 	ret

04010ac8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4010ac8:	defffa04 	addi	sp,sp,-24
 4010acc:	dfc00515 	stw	ra,20(sp)
 4010ad0:	df000415 	stw	fp,16(sp)
 4010ad4:	df000404 	addi	fp,sp,16
 4010ad8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4010adc:	0007883a 	mov	r3,zero
 4010ae0:	e0bfff17 	ldw	r2,-4(fp)
 4010ae4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4010ae8:	e0bfff17 	ldw	r2,-4(fp)
 4010aec:	10800104 	addi	r2,r2,4
 4010af0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010af4:	0005303a 	rdctl	r2,status
 4010af8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010afc:	e0fffd17 	ldw	r3,-12(fp)
 4010b00:	00bfff84 	movi	r2,-2
 4010b04:	1884703a 	and	r2,r3,r2
 4010b08:	1001703a 	wrctl	status,r2
  
  return context;
 4010b0c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4010b10:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4010b14:	400f0300 	call	400f030 <alt_tick>
 4010b18:	e0bffc17 	ldw	r2,-16(fp)
 4010b1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010b20:	e0bffe17 	ldw	r2,-8(fp)
 4010b24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4010b28:	0001883a 	nop
 4010b2c:	e037883a 	mov	sp,fp
 4010b30:	dfc00117 	ldw	ra,4(sp)
 4010b34:	df000017 	ldw	fp,0(sp)
 4010b38:	dec00204 	addi	sp,sp,8
 4010b3c:	f800283a 	ret

04010b40 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4010b40:	defff804 	addi	sp,sp,-32
 4010b44:	dfc00715 	stw	ra,28(sp)
 4010b48:	df000615 	stw	fp,24(sp)
 4010b4c:	df000604 	addi	fp,sp,24
 4010b50:	e13ffc15 	stw	r4,-16(fp)
 4010b54:	e17ffd15 	stw	r5,-12(fp)
 4010b58:	e1bffe15 	stw	r6,-8(fp)
 4010b5c:	e1ffff15 	stw	r7,-4(fp)
 4010b60:	e0bfff17 	ldw	r2,-4(fp)
 4010b64:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4010b68:	d0acb817 	ldw	r2,-19744(gp)
 4010b6c:	1000021e 	bne	r2,zero,4010b78 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4010b70:	e0bffb17 	ldw	r2,-20(fp)
 4010b74:	d0acb815 	stw	r2,-19744(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4010b78:	e0bffc17 	ldw	r2,-16(fp)
 4010b7c:	10800104 	addi	r2,r2,4
 4010b80:	00c001c4 	movi	r3,7
 4010b84:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4010b88:	d8000015 	stw	zero,0(sp)
 4010b8c:	e1fffc17 	ldw	r7,-16(fp)
 4010b90:	01810074 	movhi	r6,1025
 4010b94:	3182b204 	addi	r6,r6,2760
 4010b98:	e17ffe17 	ldw	r5,-8(fp)
 4010b9c:	e13ffd17 	ldw	r4,-12(fp)
 4010ba0:	400e7080 	call	400e708 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4010ba4:	0001883a 	nop
 4010ba8:	e037883a 	mov	sp,fp
 4010bac:	dfc00117 	ldw	ra,4(sp)
 4010bb0:	df000017 	ldw	fp,0(sp)
 4010bb4:	dec00204 	addi	sp,sp,8
 4010bb8:	f800283a 	ret

04010bbc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4010bbc:	defff504 	addi	sp,sp,-44
 4010bc0:	df000a15 	stw	fp,40(sp)
 4010bc4:	df000a04 	addi	fp,sp,40
 4010bc8:	e13ffc15 	stw	r4,-16(fp)
 4010bcc:	e17ffd15 	stw	r5,-12(fp)
 4010bd0:	e1bffe15 	stw	r6,-8(fp)
 4010bd4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4010bd8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010bdc:	d0acb817 	ldw	r2,-19744(gp)
  
  if (alt_ticks_per_second ())
 4010be0:	10003c26 	beq	r2,zero,4010cd4 <alt_alarm_start+0x118>
  {
    if (alarm)
 4010be4:	e0bffc17 	ldw	r2,-16(fp)
 4010be8:	10003826 	beq	r2,zero,4010ccc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4010bec:	e0bffc17 	ldw	r2,-16(fp)
 4010bf0:	e0fffe17 	ldw	r3,-8(fp)
 4010bf4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4010bf8:	e0bffc17 	ldw	r2,-16(fp)
 4010bfc:	e0ffff17 	ldw	r3,-4(fp)
 4010c00:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010c04:	0005303a 	rdctl	r2,status
 4010c08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010c0c:	e0fff917 	ldw	r3,-28(fp)
 4010c10:	00bfff84 	movi	r2,-2
 4010c14:	1884703a 	and	r2,r3,r2
 4010c18:	1001703a 	wrctl	status,r2
  
  return context;
 4010c1c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4010c20:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4010c24:	d0acb917 	ldw	r2,-19740(gp)
      
      current_nticks = alt_nticks();
 4010c28:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4010c2c:	e0fffd17 	ldw	r3,-12(fp)
 4010c30:	e0bff617 	ldw	r2,-40(fp)
 4010c34:	1885883a 	add	r2,r3,r2
 4010c38:	10c00044 	addi	r3,r2,1
 4010c3c:	e0bffc17 	ldw	r2,-16(fp)
 4010c40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4010c44:	e0bffc17 	ldw	r2,-16(fp)
 4010c48:	10c00217 	ldw	r3,8(r2)
 4010c4c:	e0bff617 	ldw	r2,-40(fp)
 4010c50:	1880042e 	bgeu	r3,r2,4010c64 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4010c54:	e0bffc17 	ldw	r2,-16(fp)
 4010c58:	00c00044 	movi	r3,1
 4010c5c:	10c00405 	stb	r3,16(r2)
 4010c60:	00000206 	br	4010c6c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4010c64:	e0bffc17 	ldw	r2,-16(fp)
 4010c68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4010c6c:	e0bffc17 	ldw	r2,-16(fp)
 4010c70:	d0e00f04 	addi	r3,gp,-32708
 4010c74:	e0fffa15 	stw	r3,-24(fp)
 4010c78:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010c7c:	e0bffb17 	ldw	r2,-20(fp)
 4010c80:	e0fffa17 	ldw	r3,-24(fp)
 4010c84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4010c88:	e0bffa17 	ldw	r2,-24(fp)
 4010c8c:	10c00017 	ldw	r3,0(r2)
 4010c90:	e0bffb17 	ldw	r2,-20(fp)
 4010c94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4010c98:	e0bffa17 	ldw	r2,-24(fp)
 4010c9c:	10800017 	ldw	r2,0(r2)
 4010ca0:	e0fffb17 	ldw	r3,-20(fp)
 4010ca4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4010ca8:	e0bffa17 	ldw	r2,-24(fp)
 4010cac:	e0fffb17 	ldw	r3,-20(fp)
 4010cb0:	10c00015 	stw	r3,0(r2)
 4010cb4:	e0bff817 	ldw	r2,-32(fp)
 4010cb8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010cbc:	e0bff717 	ldw	r2,-36(fp)
 4010cc0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4010cc4:	0005883a 	mov	r2,zero
 4010cc8:	00000306 	br	4010cd8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4010ccc:	00bffa84 	movi	r2,-22
 4010cd0:	00000106 	br	4010cd8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4010cd4:	00bfde84 	movi	r2,-134
  }
}
 4010cd8:	e037883a 	mov	sp,fp
 4010cdc:	df000017 	ldw	fp,0(sp)
 4010ce0:	dec00104 	addi	sp,sp,4
 4010ce4:	f800283a 	ret

04010ce8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4010ce8:	defffa04 	addi	sp,sp,-24
 4010cec:	dfc00515 	stw	ra,20(sp)
 4010cf0:	df000415 	stw	fp,16(sp)
 4010cf4:	df000404 	addi	fp,sp,16
 4010cf8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4010cfc:	008000c4 	movi	r2,3
 4010d00:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4010d04:	e0fffd17 	ldw	r3,-12(fp)
 4010d08:	008003f4 	movhi	r2,15
 4010d0c:	10909004 	addi	r2,r2,16960
 4010d10:	1885383a 	mul	r2,r3,r2
 4010d14:	100b883a 	mov	r5,r2
 4010d18:	0100bef4 	movhi	r4,763
 4010d1c:	213c2004 	addi	r4,r4,-3968
 4010d20:	4001cbc0 	call	4001cbc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4010d24:	100b883a 	mov	r5,r2
 4010d28:	01200034 	movhi	r4,32768
 4010d2c:	213fffc4 	addi	r4,r4,-1
 4010d30:	4001cbc0 	call	4001cbc <__udivsi3>
 4010d34:	100b883a 	mov	r5,r2
 4010d38:	e13fff17 	ldw	r4,-4(fp)
 4010d3c:	4001cbc0 	call	4001cbc <__udivsi3>
 4010d40:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4010d44:	e0bffe17 	ldw	r2,-8(fp)
 4010d48:	10002a26 	beq	r2,zero,4010df4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4010d4c:	e03ffc15 	stw	zero,-16(fp)
 4010d50:	00001706 	br	4010db0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4010d54:	00a00034 	movhi	r2,32768
 4010d58:	10bfffc4 	addi	r2,r2,-1
 4010d5c:	10bfffc4 	addi	r2,r2,-1
 4010d60:	103ffe1e 	bne	r2,zero,4010d5c <__alt_data_end+0xfc010d5c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4010d64:	e0fffd17 	ldw	r3,-12(fp)
 4010d68:	008003f4 	movhi	r2,15
 4010d6c:	10909004 	addi	r2,r2,16960
 4010d70:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4010d74:	100b883a 	mov	r5,r2
 4010d78:	0100bef4 	movhi	r4,763
 4010d7c:	213c2004 	addi	r4,r4,-3968
 4010d80:	4001cbc0 	call	4001cbc <__udivsi3>
 4010d84:	100b883a 	mov	r5,r2
 4010d88:	01200034 	movhi	r4,32768
 4010d8c:	213fffc4 	addi	r4,r4,-1
 4010d90:	4001cbc0 	call	4001cbc <__udivsi3>
 4010d94:	1007883a 	mov	r3,r2
 4010d98:	e0bfff17 	ldw	r2,-4(fp)
 4010d9c:	10c5c83a 	sub	r2,r2,r3
 4010da0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4010da4:	e0bffc17 	ldw	r2,-16(fp)
 4010da8:	10800044 	addi	r2,r2,1
 4010dac:	e0bffc15 	stw	r2,-16(fp)
 4010db0:	e0fffc17 	ldw	r3,-16(fp)
 4010db4:	e0bffe17 	ldw	r2,-8(fp)
 4010db8:	18bfe616 	blt	r3,r2,4010d54 <__alt_data_end+0xfc010d54>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4010dbc:	e0fffd17 	ldw	r3,-12(fp)
 4010dc0:	008003f4 	movhi	r2,15
 4010dc4:	10909004 	addi	r2,r2,16960
 4010dc8:	1885383a 	mul	r2,r3,r2
 4010dcc:	100b883a 	mov	r5,r2
 4010dd0:	0100bef4 	movhi	r4,763
 4010dd4:	213c2004 	addi	r4,r4,-3968
 4010dd8:	4001cbc0 	call	4001cbc <__udivsi3>
 4010ddc:	1007883a 	mov	r3,r2
 4010de0:	e0bfff17 	ldw	r2,-4(fp)
 4010de4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4010de8:	10bfffc4 	addi	r2,r2,-1
 4010dec:	103ffe1e 	bne	r2,zero,4010de8 <__alt_data_end+0xfc010de8>
 4010df0:	00000d06 	br	4010e28 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4010df4:	e0fffd17 	ldw	r3,-12(fp)
 4010df8:	008003f4 	movhi	r2,15
 4010dfc:	10909004 	addi	r2,r2,16960
 4010e00:	1885383a 	mul	r2,r3,r2
 4010e04:	100b883a 	mov	r5,r2
 4010e08:	0100bef4 	movhi	r4,763
 4010e0c:	213c2004 	addi	r4,r4,-3968
 4010e10:	4001cbc0 	call	4001cbc <__udivsi3>
 4010e14:	1007883a 	mov	r3,r2
 4010e18:	e0bfff17 	ldw	r2,-4(fp)
 4010e1c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4010e20:	10bfffc4 	addi	r2,r2,-1
 4010e24:	00bffe16 	blt	zero,r2,4010e20 <__alt_data_end+0xfc010e20>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4010e28:	0005883a 	mov	r2,zero
}
 4010e2c:	e037883a 	mov	sp,fp
 4010e30:	dfc00117 	ldw	ra,4(sp)
 4010e34:	df000017 	ldw	fp,0(sp)
 4010e38:	dec00204 	addi	sp,sp,8
 4010e3c:	f800283a 	ret

04010e40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4010e40:	defffe04 	addi	sp,sp,-8
 4010e44:	df000115 	stw	fp,4(sp)
 4010e48:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4010e4c:	e03fff15 	stw	zero,-4(fp)
 4010e50:	00000506 	br	4010e68 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4010e54:	e0bfff17 	ldw	r2,-4(fp)
 4010e58:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4010e5c:	e0bfff17 	ldw	r2,-4(fp)
 4010e60:	10800804 	addi	r2,r2,32
 4010e64:	e0bfff15 	stw	r2,-4(fp)
 4010e68:	e0bfff17 	ldw	r2,-4(fp)
 4010e6c:	10820030 	cmpltui	r2,r2,2048
 4010e70:	103ff81e 	bne	r2,zero,4010e54 <__alt_data_end+0xfc010e54>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4010e74:	0001883a 	nop
 4010e78:	e037883a 	mov	sp,fp
 4010e7c:	df000017 	ldw	fp,0(sp)
 4010e80:	dec00104 	addi	sp,sp,4
 4010e84:	f800283a 	ret

04010e88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010e88:	defffe04 	addi	sp,sp,-8
 4010e8c:	dfc00115 	stw	ra,4(sp)
 4010e90:	df000015 	stw	fp,0(sp)
 4010e94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010e98:	d0a00c17 	ldw	r2,-32720(gp)
 4010e9c:	10000326 	beq	r2,zero,4010eac <alt_get_errno+0x24>
 4010ea0:	d0a00c17 	ldw	r2,-32720(gp)
 4010ea4:	103ee83a 	callr	r2
 4010ea8:	00000106 	br	4010eb0 <alt_get_errno+0x28>
 4010eac:	d0acb304 	addi	r2,gp,-19764
}
 4010eb0:	e037883a 	mov	sp,fp
 4010eb4:	dfc00117 	ldw	ra,4(sp)
 4010eb8:	df000017 	ldw	fp,0(sp)
 4010ebc:	dec00204 	addi	sp,sp,8
 4010ec0:	f800283a 	ret

04010ec4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4010ec4:	defffa04 	addi	sp,sp,-24
 4010ec8:	dfc00515 	stw	ra,20(sp)
 4010ecc:	df000415 	stw	fp,16(sp)
 4010ed0:	df000404 	addi	fp,sp,16
 4010ed4:	e13ffe15 	stw	r4,-8(fp)
 4010ed8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4010edc:	e0bffe17 	ldw	r2,-8(fp)
 4010ee0:	10000326 	beq	r2,zero,4010ef0 <alt_dev_llist_insert+0x2c>
 4010ee4:	e0bffe17 	ldw	r2,-8(fp)
 4010ee8:	10800217 	ldw	r2,8(r2)
 4010eec:	1000061e 	bne	r2,zero,4010f08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4010ef0:	4010e880 	call	4010e88 <alt_get_errno>
 4010ef4:	1007883a 	mov	r3,r2
 4010ef8:	00800584 	movi	r2,22
 4010efc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4010f00:	00bffa84 	movi	r2,-22
 4010f04:	00001306 	br	4010f54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4010f08:	e0bffe17 	ldw	r2,-8(fp)
 4010f0c:	e0ffff17 	ldw	r3,-4(fp)
 4010f10:	e0fffc15 	stw	r3,-16(fp)
 4010f14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010f18:	e0bffd17 	ldw	r2,-12(fp)
 4010f1c:	e0fffc17 	ldw	r3,-16(fp)
 4010f20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4010f24:	e0bffc17 	ldw	r2,-16(fp)
 4010f28:	10c00017 	ldw	r3,0(r2)
 4010f2c:	e0bffd17 	ldw	r2,-12(fp)
 4010f30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4010f34:	e0bffc17 	ldw	r2,-16(fp)
 4010f38:	10800017 	ldw	r2,0(r2)
 4010f3c:	e0fffd17 	ldw	r3,-12(fp)
 4010f40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4010f44:	e0bffc17 	ldw	r2,-16(fp)
 4010f48:	e0fffd17 	ldw	r3,-12(fp)
 4010f4c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4010f50:	0005883a 	mov	r2,zero
}
 4010f54:	e037883a 	mov	sp,fp
 4010f58:	dfc00117 	ldw	ra,4(sp)
 4010f5c:	df000017 	ldw	fp,0(sp)
 4010f60:	dec00204 	addi	sp,sp,8
 4010f64:	f800283a 	ret

04010f68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4010f68:	defffd04 	addi	sp,sp,-12
 4010f6c:	dfc00215 	stw	ra,8(sp)
 4010f70:	df000115 	stw	fp,4(sp)
 4010f74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4010f78:	00810074 	movhi	r2,1025
 4010f7c:	1086c304 	addi	r2,r2,6924
 4010f80:	e0bfff15 	stw	r2,-4(fp)
 4010f84:	00000606 	br	4010fa0 <_do_ctors+0x38>
        (*ctor) (); 
 4010f88:	e0bfff17 	ldw	r2,-4(fp)
 4010f8c:	10800017 	ldw	r2,0(r2)
 4010f90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4010f94:	e0bfff17 	ldw	r2,-4(fp)
 4010f98:	10bfff04 	addi	r2,r2,-4
 4010f9c:	e0bfff15 	stw	r2,-4(fp)
 4010fa0:	e0ffff17 	ldw	r3,-4(fp)
 4010fa4:	00810074 	movhi	r2,1025
 4010fa8:	1086c404 	addi	r2,r2,6928
 4010fac:	18bff62e 	bgeu	r3,r2,4010f88 <__alt_data_end+0xfc010f88>
        (*ctor) (); 
}
 4010fb0:	0001883a 	nop
 4010fb4:	e037883a 	mov	sp,fp
 4010fb8:	dfc00117 	ldw	ra,4(sp)
 4010fbc:	df000017 	ldw	fp,0(sp)
 4010fc0:	dec00204 	addi	sp,sp,8
 4010fc4:	f800283a 	ret

04010fc8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4010fc8:	defffd04 	addi	sp,sp,-12
 4010fcc:	dfc00215 	stw	ra,8(sp)
 4010fd0:	df000115 	stw	fp,4(sp)
 4010fd4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4010fd8:	00810074 	movhi	r2,1025
 4010fdc:	1086c304 	addi	r2,r2,6924
 4010fe0:	e0bfff15 	stw	r2,-4(fp)
 4010fe4:	00000606 	br	4011000 <_do_dtors+0x38>
        (*dtor) (); 
 4010fe8:	e0bfff17 	ldw	r2,-4(fp)
 4010fec:	10800017 	ldw	r2,0(r2)
 4010ff0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4010ff4:	e0bfff17 	ldw	r2,-4(fp)
 4010ff8:	10bfff04 	addi	r2,r2,-4
 4010ffc:	e0bfff15 	stw	r2,-4(fp)
 4011000:	e0ffff17 	ldw	r3,-4(fp)
 4011004:	00810074 	movhi	r2,1025
 4011008:	1086c404 	addi	r2,r2,6928
 401100c:	18bff62e 	bgeu	r3,r2,4010fe8 <__alt_data_end+0xfc010fe8>
        (*dtor) (); 
}
 4011010:	0001883a 	nop
 4011014:	e037883a 	mov	sp,fp
 4011018:	dfc00117 	ldw	ra,4(sp)
 401101c:	df000017 	ldw	fp,0(sp)
 4011020:	dec00204 	addi	sp,sp,8
 4011024:	f800283a 	ret

04011028 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4011028:	defffe04 	addi	sp,sp,-8
 401102c:	dfc00115 	stw	ra,4(sp)
 4011030:	df000015 	stw	fp,0(sp)
 4011034:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4011038:	01440004 	movi	r5,4096
 401103c:	0009883a 	mov	r4,zero
 4011040:	40116ec0 	call	40116ec <alt_icache_flush>
#endif
}
 4011044:	0001883a 	nop
 4011048:	e037883a 	mov	sp,fp
 401104c:	dfc00117 	ldw	ra,4(sp)
 4011050:	df000017 	ldw	fp,0(sp)
 4011054:	dec00204 	addi	sp,sp,8
 4011058:	f800283a 	ret

0401105c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401105c:	defffe04 	addi	sp,sp,-8
 4011060:	df000115 	stw	fp,4(sp)
 4011064:	df000104 	addi	fp,sp,4
 4011068:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401106c:	e0bfff17 	ldw	r2,-4(fp)
 4011070:	10bffe84 	addi	r2,r2,-6
 4011074:	10c00428 	cmpgeui	r3,r2,16
 4011078:	18001a1e 	bne	r3,zero,40110e4 <alt_exception_cause_generated_bad_addr+0x88>
 401107c:	100690ba 	slli	r3,r2,2
 4011080:	00810074 	movhi	r2,1025
 4011084:	10842504 	addi	r2,r2,4244
 4011088:	1885883a 	add	r2,r3,r2
 401108c:	10800017 	ldw	r2,0(r2)
 4011090:	1000683a 	jmp	r2
 4011094:	040110d4 	movui	r16,1091
 4011098:	040110d4 	movui	r16,1091
 401109c:	040110e4 	muli	r16,zero,1091
 40110a0:	040110e4 	muli	r16,zero,1091
 40110a4:	040110e4 	muli	r16,zero,1091
 40110a8:	040110d4 	movui	r16,1091
 40110ac:	040110dc 	xori	r16,zero,1091
 40110b0:	040110e4 	muli	r16,zero,1091
 40110b4:	040110d4 	movui	r16,1091
 40110b8:	040110d4 	movui	r16,1091
 40110bc:	040110e4 	muli	r16,zero,1091
 40110c0:	040110d4 	movui	r16,1091
 40110c4:	040110dc 	xori	r16,zero,1091
 40110c8:	040110e4 	muli	r16,zero,1091
 40110cc:	040110e4 	muli	r16,zero,1091
 40110d0:	040110d4 	movui	r16,1091
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40110d4:	00800044 	movi	r2,1
 40110d8:	00000306 	br	40110e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40110dc:	0005883a 	mov	r2,zero
 40110e0:	00000106 	br	40110e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40110e4:	0005883a 	mov	r2,zero
  }
}
 40110e8:	e037883a 	mov	sp,fp
 40110ec:	df000017 	ldw	fp,0(sp)
 40110f0:	dec00104 	addi	sp,sp,4
 40110f4:	f800283a 	ret

040110f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40110f8:	defff904 	addi	sp,sp,-28
 40110fc:	dfc00615 	stw	ra,24(sp)
 4011100:	df000515 	stw	fp,20(sp)
 4011104:	df000504 	addi	fp,sp,20
 4011108:	e13ffc15 	stw	r4,-16(fp)
 401110c:	e17ffd15 	stw	r5,-12(fp)
 4011110:	e1bffe15 	stw	r6,-8(fp)
 4011114:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4011118:	e1bfff17 	ldw	r6,-4(fp)
 401111c:	e17ffe17 	ldw	r5,-8(fp)
 4011120:	e13ffd17 	ldw	r4,-12(fp)
 4011124:	40113380 	call	4011338 <open>
 4011128:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 401112c:	e0bffb17 	ldw	r2,-20(fp)
 4011130:	10001c16 	blt	r2,zero,40111a4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4011134:	008100f4 	movhi	r2,1027
 4011138:	108e0304 	addi	r2,r2,14348
 401113c:	e0fffb17 	ldw	r3,-20(fp)
 4011140:	18c00324 	muli	r3,r3,12
 4011144:	10c5883a 	add	r2,r2,r3
 4011148:	10c00017 	ldw	r3,0(r2)
 401114c:	e0bffc17 	ldw	r2,-16(fp)
 4011150:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4011154:	008100f4 	movhi	r2,1027
 4011158:	108e0304 	addi	r2,r2,14348
 401115c:	e0fffb17 	ldw	r3,-20(fp)
 4011160:	18c00324 	muli	r3,r3,12
 4011164:	10c5883a 	add	r2,r2,r3
 4011168:	10800104 	addi	r2,r2,4
 401116c:	10c00017 	ldw	r3,0(r2)
 4011170:	e0bffc17 	ldw	r2,-16(fp)
 4011174:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4011178:	008100f4 	movhi	r2,1027
 401117c:	108e0304 	addi	r2,r2,14348
 4011180:	e0fffb17 	ldw	r3,-20(fp)
 4011184:	18c00324 	muli	r3,r3,12
 4011188:	10c5883a 	add	r2,r2,r3
 401118c:	10800204 	addi	r2,r2,8
 4011190:	10c00017 	ldw	r3,0(r2)
 4011194:	e0bffc17 	ldw	r2,-16(fp)
 4011198:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401119c:	e13ffb17 	ldw	r4,-20(fp)
 40111a0:	400ee800 	call	400ee80 <alt_release_fd>
  }
} 
 40111a4:	0001883a 	nop
 40111a8:	e037883a 	mov	sp,fp
 40111ac:	dfc00117 	ldw	ra,4(sp)
 40111b0:	df000017 	ldw	fp,0(sp)
 40111b4:	dec00204 	addi	sp,sp,8
 40111b8:	f800283a 	ret

040111bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40111bc:	defffb04 	addi	sp,sp,-20
 40111c0:	dfc00415 	stw	ra,16(sp)
 40111c4:	df000315 	stw	fp,12(sp)
 40111c8:	df000304 	addi	fp,sp,12
 40111cc:	e13ffd15 	stw	r4,-12(fp)
 40111d0:	e17ffe15 	stw	r5,-8(fp)
 40111d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40111d8:	01c07fc4 	movi	r7,511
 40111dc:	01800044 	movi	r6,1
 40111e0:	e17ffd17 	ldw	r5,-12(fp)
 40111e4:	010100f4 	movhi	r4,1027
 40111e8:	210e0604 	addi	r4,r4,14360
 40111ec:	40110f80 	call	40110f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40111f0:	01c07fc4 	movi	r7,511
 40111f4:	000d883a 	mov	r6,zero
 40111f8:	e17ffe17 	ldw	r5,-8(fp)
 40111fc:	010100f4 	movhi	r4,1027
 4011200:	210e0304 	addi	r4,r4,14348
 4011204:	40110f80 	call	40110f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4011208:	01c07fc4 	movi	r7,511
 401120c:	01800044 	movi	r6,1
 4011210:	e17fff17 	ldw	r5,-4(fp)
 4011214:	010100f4 	movhi	r4,1027
 4011218:	210e0904 	addi	r4,r4,14372
 401121c:	40110f80 	call	40110f8 <alt_open_fd>
}  
 4011220:	0001883a 	nop
 4011224:	e037883a 	mov	sp,fp
 4011228:	dfc00117 	ldw	ra,4(sp)
 401122c:	df000017 	ldw	fp,0(sp)
 4011230:	dec00204 	addi	sp,sp,8
 4011234:	f800283a 	ret

04011238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011238:	defffe04 	addi	sp,sp,-8
 401123c:	dfc00115 	stw	ra,4(sp)
 4011240:	df000015 	stw	fp,0(sp)
 4011244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011248:	d0a00c17 	ldw	r2,-32720(gp)
 401124c:	10000326 	beq	r2,zero,401125c <alt_get_errno+0x24>
 4011250:	d0a00c17 	ldw	r2,-32720(gp)
 4011254:	103ee83a 	callr	r2
 4011258:	00000106 	br	4011260 <alt_get_errno+0x28>
 401125c:	d0acb304 	addi	r2,gp,-19764
}
 4011260:	e037883a 	mov	sp,fp
 4011264:	dfc00117 	ldw	ra,4(sp)
 4011268:	df000017 	ldw	fp,0(sp)
 401126c:	dec00204 	addi	sp,sp,8
 4011270:	f800283a 	ret

04011274 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4011274:	defffd04 	addi	sp,sp,-12
 4011278:	df000215 	stw	fp,8(sp)
 401127c:	df000204 	addi	fp,sp,8
 4011280:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4011284:	e0bfff17 	ldw	r2,-4(fp)
 4011288:	10800217 	ldw	r2,8(r2)
 401128c:	10d00034 	orhi	r3,r2,16384
 4011290:	e0bfff17 	ldw	r2,-4(fp)
 4011294:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011298:	e03ffe15 	stw	zero,-8(fp)
 401129c:	00001d06 	br	4011314 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40112a0:	008100f4 	movhi	r2,1027
 40112a4:	108e0304 	addi	r2,r2,14348
 40112a8:	e0fffe17 	ldw	r3,-8(fp)
 40112ac:	18c00324 	muli	r3,r3,12
 40112b0:	10c5883a 	add	r2,r2,r3
 40112b4:	10c00017 	ldw	r3,0(r2)
 40112b8:	e0bfff17 	ldw	r2,-4(fp)
 40112bc:	10800017 	ldw	r2,0(r2)
 40112c0:	1880111e 	bne	r3,r2,4011308 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40112c4:	008100f4 	movhi	r2,1027
 40112c8:	108e0304 	addi	r2,r2,14348
 40112cc:	e0fffe17 	ldw	r3,-8(fp)
 40112d0:	18c00324 	muli	r3,r3,12
 40112d4:	10c5883a 	add	r2,r2,r3
 40112d8:	10800204 	addi	r2,r2,8
 40112dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40112e0:	1000090e 	bge	r2,zero,4011308 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40112e4:	e0bffe17 	ldw	r2,-8(fp)
 40112e8:	10c00324 	muli	r3,r2,12
 40112ec:	008100f4 	movhi	r2,1027
 40112f0:	108e0304 	addi	r2,r2,14348
 40112f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40112f8:	e0bfff17 	ldw	r2,-4(fp)
 40112fc:	18800226 	beq	r3,r2,4011308 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4011300:	00bffcc4 	movi	r2,-13
 4011304:	00000806 	br	4011328 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011308:	e0bffe17 	ldw	r2,-8(fp)
 401130c:	10800044 	addi	r2,r2,1
 4011310:	e0bffe15 	stw	r2,-8(fp)
 4011314:	d0a00b17 	ldw	r2,-32724(gp)
 4011318:	1007883a 	mov	r3,r2
 401131c:	e0bffe17 	ldw	r2,-8(fp)
 4011320:	18bfdf2e 	bgeu	r3,r2,40112a0 <__alt_data_end+0xfc0112a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4011324:	0005883a 	mov	r2,zero
}
 4011328:	e037883a 	mov	sp,fp
 401132c:	df000017 	ldw	fp,0(sp)
 4011330:	dec00104 	addi	sp,sp,4
 4011334:	f800283a 	ret

04011338 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4011338:	defff604 	addi	sp,sp,-40
 401133c:	dfc00915 	stw	ra,36(sp)
 4011340:	df000815 	stw	fp,32(sp)
 4011344:	df000804 	addi	fp,sp,32
 4011348:	e13ffd15 	stw	r4,-12(fp)
 401134c:	e17ffe15 	stw	r5,-8(fp)
 4011350:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4011354:	00bfffc4 	movi	r2,-1
 4011358:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401135c:	00bffb44 	movi	r2,-19
 4011360:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4011364:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4011368:	d1600904 	addi	r5,gp,-32732
 401136c:	e13ffd17 	ldw	r4,-12(fp)
 4011370:	40114b00 	call	40114b0 <alt_find_dev>
 4011374:	e0bff815 	stw	r2,-32(fp)
 4011378:	e0bff817 	ldw	r2,-32(fp)
 401137c:	1000051e 	bne	r2,zero,4011394 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4011380:	e13ffd17 	ldw	r4,-12(fp)
 4011384:	40115400 	call	4011540 <alt_find_file>
 4011388:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401138c:	00800044 	movi	r2,1
 4011390:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4011394:	e0bff817 	ldw	r2,-32(fp)
 4011398:	10002926 	beq	r2,zero,4011440 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401139c:	e13ff817 	ldw	r4,-32(fp)
 40113a0:	40116480 	call	4011648 <alt_get_fd>
 40113a4:	e0bff915 	stw	r2,-28(fp)
 40113a8:	e0bff917 	ldw	r2,-28(fp)
 40113ac:	1000030e 	bge	r2,zero,40113bc <open+0x84>
    {
      status = index;
 40113b0:	e0bff917 	ldw	r2,-28(fp)
 40113b4:	e0bffa15 	stw	r2,-24(fp)
 40113b8:	00002306 	br	4011448 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 40113bc:	e0bff917 	ldw	r2,-28(fp)
 40113c0:	10c00324 	muli	r3,r2,12
 40113c4:	008100f4 	movhi	r2,1027
 40113c8:	108e0304 	addi	r2,r2,14348
 40113cc:	1885883a 	add	r2,r3,r2
 40113d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40113d4:	e0fffe17 	ldw	r3,-8(fp)
 40113d8:	00900034 	movhi	r2,16384
 40113dc:	10bfffc4 	addi	r2,r2,-1
 40113e0:	1886703a 	and	r3,r3,r2
 40113e4:	e0bffc17 	ldw	r2,-16(fp)
 40113e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40113ec:	e0bffb17 	ldw	r2,-20(fp)
 40113f0:	1000051e 	bne	r2,zero,4011408 <open+0xd0>
 40113f4:	e13ffc17 	ldw	r4,-16(fp)
 40113f8:	40112740 	call	4011274 <alt_file_locked>
 40113fc:	e0bffa15 	stw	r2,-24(fp)
 4011400:	e0bffa17 	ldw	r2,-24(fp)
 4011404:	10001016 	blt	r2,zero,4011448 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4011408:	e0bff817 	ldw	r2,-32(fp)
 401140c:	10800317 	ldw	r2,12(r2)
 4011410:	10000826 	beq	r2,zero,4011434 <open+0xfc>
 4011414:	e0bff817 	ldw	r2,-32(fp)
 4011418:	10800317 	ldw	r2,12(r2)
 401141c:	e1ffff17 	ldw	r7,-4(fp)
 4011420:	e1bffe17 	ldw	r6,-8(fp)
 4011424:	e17ffd17 	ldw	r5,-12(fp)
 4011428:	e13ffc17 	ldw	r4,-16(fp)
 401142c:	103ee83a 	callr	r2
 4011430:	00000106 	br	4011438 <open+0x100>
 4011434:	0005883a 	mov	r2,zero
 4011438:	e0bffa15 	stw	r2,-24(fp)
 401143c:	00000206 	br	4011448 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4011440:	00bffb44 	movi	r2,-19
 4011444:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4011448:	e0bffa17 	ldw	r2,-24(fp)
 401144c:	1000090e 	bge	r2,zero,4011474 <open+0x13c>
  {
    alt_release_fd (index);  
 4011450:	e13ff917 	ldw	r4,-28(fp)
 4011454:	400ee800 	call	400ee80 <alt_release_fd>
    ALT_ERRNO = -status;
 4011458:	40112380 	call	4011238 <alt_get_errno>
 401145c:	1007883a 	mov	r3,r2
 4011460:	e0bffa17 	ldw	r2,-24(fp)
 4011464:	0085c83a 	sub	r2,zero,r2
 4011468:	18800015 	stw	r2,0(r3)
    return -1;
 401146c:	00bfffc4 	movi	r2,-1
 4011470:	00000106 	br	4011478 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4011474:	e0bff917 	ldw	r2,-28(fp)
}
 4011478:	e037883a 	mov	sp,fp
 401147c:	dfc00117 	ldw	ra,4(sp)
 4011480:	df000017 	ldw	fp,0(sp)
 4011484:	dec00204 	addi	sp,sp,8
 4011488:	f800283a 	ret

0401148c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401148c:	deffff04 	addi	sp,sp,-4
 4011490:	df000015 	stw	fp,0(sp)
 4011494:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4011498:	000170fa 	wrctl	ienable,zero
}
 401149c:	0001883a 	nop
 40114a0:	e037883a 	mov	sp,fp
 40114a4:	df000017 	ldw	fp,0(sp)
 40114a8:	dec00104 	addi	sp,sp,4
 40114ac:	f800283a 	ret

040114b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40114b0:	defffa04 	addi	sp,sp,-24
 40114b4:	dfc00515 	stw	ra,20(sp)
 40114b8:	df000415 	stw	fp,16(sp)
 40114bc:	df000404 	addi	fp,sp,16
 40114c0:	e13ffe15 	stw	r4,-8(fp)
 40114c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40114c8:	e0bfff17 	ldw	r2,-4(fp)
 40114cc:	10800017 	ldw	r2,0(r2)
 40114d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40114d4:	e13ffe17 	ldw	r4,-8(fp)
 40114d8:	4001eb80 	call	4001eb8 <strlen>
 40114dc:	10800044 	addi	r2,r2,1
 40114e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40114e4:	00000d06 	br	401151c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40114e8:	e0bffc17 	ldw	r2,-16(fp)
 40114ec:	10800217 	ldw	r2,8(r2)
 40114f0:	e0fffd17 	ldw	r3,-12(fp)
 40114f4:	180d883a 	mov	r6,r3
 40114f8:	e17ffe17 	ldw	r5,-8(fp)
 40114fc:	1009883a 	mov	r4,r2
 4011500:	40117c80 	call	40117c8 <memcmp>
 4011504:	1000021e 	bne	r2,zero,4011510 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4011508:	e0bffc17 	ldw	r2,-16(fp)
 401150c:	00000706 	br	401152c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4011510:	e0bffc17 	ldw	r2,-16(fp)
 4011514:	10800017 	ldw	r2,0(r2)
 4011518:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401151c:	e0fffc17 	ldw	r3,-16(fp)
 4011520:	e0bfff17 	ldw	r2,-4(fp)
 4011524:	18bff01e 	bne	r3,r2,40114e8 <__alt_data_end+0xfc0114e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4011528:	0005883a 	mov	r2,zero
}
 401152c:	e037883a 	mov	sp,fp
 4011530:	dfc00117 	ldw	ra,4(sp)
 4011534:	df000017 	ldw	fp,0(sp)
 4011538:	dec00204 	addi	sp,sp,8
 401153c:	f800283a 	ret

04011540 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4011540:	defffb04 	addi	sp,sp,-20
 4011544:	dfc00415 	stw	ra,16(sp)
 4011548:	df000315 	stw	fp,12(sp)
 401154c:	df000304 	addi	fp,sp,12
 4011550:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4011554:	d0a00717 	ldw	r2,-32740(gp)
 4011558:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401155c:	00003106 	br	4011624 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4011560:	e0bffd17 	ldw	r2,-12(fp)
 4011564:	10800217 	ldw	r2,8(r2)
 4011568:	1009883a 	mov	r4,r2
 401156c:	4001eb80 	call	4001eb8 <strlen>
 4011570:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4011574:	e0bffd17 	ldw	r2,-12(fp)
 4011578:	10c00217 	ldw	r3,8(r2)
 401157c:	e0bffe17 	ldw	r2,-8(fp)
 4011580:	10bfffc4 	addi	r2,r2,-1
 4011584:	1885883a 	add	r2,r3,r2
 4011588:	10800003 	ldbu	r2,0(r2)
 401158c:	10803fcc 	andi	r2,r2,255
 4011590:	1080201c 	xori	r2,r2,128
 4011594:	10bfe004 	addi	r2,r2,-128
 4011598:	10800bd8 	cmpnei	r2,r2,47
 401159c:	1000031e 	bne	r2,zero,40115ac <alt_find_file+0x6c>
    {
      len -= 1;
 40115a0:	e0bffe17 	ldw	r2,-8(fp)
 40115a4:	10bfffc4 	addi	r2,r2,-1
 40115a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40115ac:	e0bffe17 	ldw	r2,-8(fp)
 40115b0:	e0ffff17 	ldw	r3,-4(fp)
 40115b4:	1885883a 	add	r2,r3,r2
 40115b8:	10800003 	ldbu	r2,0(r2)
 40115bc:	10803fcc 	andi	r2,r2,255
 40115c0:	1080201c 	xori	r2,r2,128
 40115c4:	10bfe004 	addi	r2,r2,-128
 40115c8:	10800be0 	cmpeqi	r2,r2,47
 40115cc:	1000081e 	bne	r2,zero,40115f0 <alt_find_file+0xb0>
 40115d0:	e0bffe17 	ldw	r2,-8(fp)
 40115d4:	e0ffff17 	ldw	r3,-4(fp)
 40115d8:	1885883a 	add	r2,r3,r2
 40115dc:	10800003 	ldbu	r2,0(r2)
 40115e0:	10803fcc 	andi	r2,r2,255
 40115e4:	1080201c 	xori	r2,r2,128
 40115e8:	10bfe004 	addi	r2,r2,-128
 40115ec:	10000a1e 	bne	r2,zero,4011618 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40115f0:	e0bffd17 	ldw	r2,-12(fp)
 40115f4:	10800217 	ldw	r2,8(r2)
 40115f8:	e0fffe17 	ldw	r3,-8(fp)
 40115fc:	180d883a 	mov	r6,r3
 4011600:	e17fff17 	ldw	r5,-4(fp)
 4011604:	1009883a 	mov	r4,r2
 4011608:	40117c80 	call	40117c8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401160c:	1000021e 	bne	r2,zero,4011618 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4011610:	e0bffd17 	ldw	r2,-12(fp)
 4011614:	00000706 	br	4011634 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4011618:	e0bffd17 	ldw	r2,-12(fp)
 401161c:	10800017 	ldw	r2,0(r2)
 4011620:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4011624:	e0fffd17 	ldw	r3,-12(fp)
 4011628:	d0a00704 	addi	r2,gp,-32740
 401162c:	18bfcc1e 	bne	r3,r2,4011560 <__alt_data_end+0xfc011560>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4011630:	0005883a 	mov	r2,zero
}
 4011634:	e037883a 	mov	sp,fp
 4011638:	dfc00117 	ldw	ra,4(sp)
 401163c:	df000017 	ldw	fp,0(sp)
 4011640:	dec00204 	addi	sp,sp,8
 4011644:	f800283a 	ret

04011648 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4011648:	defffc04 	addi	sp,sp,-16
 401164c:	df000315 	stw	fp,12(sp)
 4011650:	df000304 	addi	fp,sp,12
 4011654:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4011658:	00bffa04 	movi	r2,-24
 401165c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4011660:	e03ffd15 	stw	zero,-12(fp)
 4011664:	00001906 	br	40116cc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4011668:	008100f4 	movhi	r2,1027
 401166c:	108e0304 	addi	r2,r2,14348
 4011670:	e0fffd17 	ldw	r3,-12(fp)
 4011674:	18c00324 	muli	r3,r3,12
 4011678:	10c5883a 	add	r2,r2,r3
 401167c:	10800017 	ldw	r2,0(r2)
 4011680:	10000f1e 	bne	r2,zero,40116c0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4011684:	008100f4 	movhi	r2,1027
 4011688:	108e0304 	addi	r2,r2,14348
 401168c:	e0fffd17 	ldw	r3,-12(fp)
 4011690:	18c00324 	muli	r3,r3,12
 4011694:	10c5883a 	add	r2,r2,r3
 4011698:	e0ffff17 	ldw	r3,-4(fp)
 401169c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40116a0:	d0e00b17 	ldw	r3,-32724(gp)
 40116a4:	e0bffd17 	ldw	r2,-12(fp)
 40116a8:	1880020e 	bge	r3,r2,40116b4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 40116ac:	e0bffd17 	ldw	r2,-12(fp)
 40116b0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 40116b4:	e0bffd17 	ldw	r2,-12(fp)
 40116b8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40116bc:	00000606 	br	40116d8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40116c0:	e0bffd17 	ldw	r2,-12(fp)
 40116c4:	10800044 	addi	r2,r2,1
 40116c8:	e0bffd15 	stw	r2,-12(fp)
 40116cc:	e0bffd17 	ldw	r2,-12(fp)
 40116d0:	10800810 	cmplti	r2,r2,32
 40116d4:	103fe41e 	bne	r2,zero,4011668 <__alt_data_end+0xfc011668>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40116d8:	e0bffe17 	ldw	r2,-8(fp)
}
 40116dc:	e037883a 	mov	sp,fp
 40116e0:	df000017 	ldw	fp,0(sp)
 40116e4:	dec00104 	addi	sp,sp,4
 40116e8:	f800283a 	ret

040116ec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40116ec:	defffb04 	addi	sp,sp,-20
 40116f0:	df000415 	stw	fp,16(sp)
 40116f4:	df000404 	addi	fp,sp,16
 40116f8:	e13ffe15 	stw	r4,-8(fp)
 40116fc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4011700:	e0bfff17 	ldw	r2,-4(fp)
 4011704:	10840070 	cmpltui	r2,r2,4097
 4011708:	1000021e 	bne	r2,zero,4011714 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 401170c:	00840004 	movi	r2,4096
 4011710:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4011714:	e0fffe17 	ldw	r3,-8(fp)
 4011718:	e0bfff17 	ldw	r2,-4(fp)
 401171c:	1885883a 	add	r2,r3,r2
 4011720:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4011724:	e0bffe17 	ldw	r2,-8(fp)
 4011728:	e0bffc15 	stw	r2,-16(fp)
 401172c:	00000506 	br	4011744 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4011730:	e0bffc17 	ldw	r2,-16(fp)
 4011734:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4011738:	e0bffc17 	ldw	r2,-16(fp)
 401173c:	10800804 	addi	r2,r2,32
 4011740:	e0bffc15 	stw	r2,-16(fp)
 4011744:	e0fffc17 	ldw	r3,-16(fp)
 4011748:	e0bffd17 	ldw	r2,-12(fp)
 401174c:	18bff836 	bltu	r3,r2,4011730 <__alt_data_end+0xfc011730>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4011750:	e0bffe17 	ldw	r2,-8(fp)
 4011754:	108007cc 	andi	r2,r2,31
 4011758:	10000226 	beq	r2,zero,4011764 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 401175c:	e0bffc17 	ldw	r2,-16(fp)
 4011760:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4011764:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4011768:	0001883a 	nop
 401176c:	e037883a 	mov	sp,fp
 4011770:	df000017 	ldw	fp,0(sp)
 4011774:	dec00104 	addi	sp,sp,4
 4011778:	f800283a 	ret

0401177c <atexit>:
 401177c:	200b883a 	mov	r5,r4
 4011780:	000f883a 	mov	r7,zero
 4011784:	000d883a 	mov	r6,zero
 4011788:	0009883a 	mov	r4,zero
 401178c:	40118441 	jmpi	4011844 <__register_exitproc>

04011790 <exit>:
 4011790:	defffe04 	addi	sp,sp,-8
 4011794:	000b883a 	mov	r5,zero
 4011798:	dc000015 	stw	r16,0(sp)
 401179c:	dfc00115 	stw	ra,4(sp)
 40117a0:	2021883a 	mov	r16,r4
 40117a4:	401195c0 	call	401195c <__call_exitprocs>
 40117a8:	008100f4 	movhi	r2,1027
 40117ac:	10927c04 	addi	r2,r2,18928
 40117b0:	11000017 	ldw	r4,0(r2)
 40117b4:	20800f17 	ldw	r2,60(r4)
 40117b8:	10000126 	beq	r2,zero,40117c0 <exit+0x30>
 40117bc:	103ee83a 	callr	r2
 40117c0:	8009883a 	mov	r4,r16
 40117c4:	4011adc0 	call	4011adc <_exit>

040117c8 <memcmp>:
 40117c8:	01c000c4 	movi	r7,3
 40117cc:	3980192e 	bgeu	r7,r6,4011834 <memcmp+0x6c>
 40117d0:	2144b03a 	or	r2,r4,r5
 40117d4:	11c4703a 	and	r2,r2,r7
 40117d8:	10000f26 	beq	r2,zero,4011818 <memcmp+0x50>
 40117dc:	20800003 	ldbu	r2,0(r4)
 40117e0:	28c00003 	ldbu	r3,0(r5)
 40117e4:	10c0151e 	bne	r2,r3,401183c <memcmp+0x74>
 40117e8:	31bfff84 	addi	r6,r6,-2
 40117ec:	01ffffc4 	movi	r7,-1
 40117f0:	00000406 	br	4011804 <memcmp+0x3c>
 40117f4:	20800003 	ldbu	r2,0(r4)
 40117f8:	28c00003 	ldbu	r3,0(r5)
 40117fc:	31bfffc4 	addi	r6,r6,-1
 4011800:	10c00e1e 	bne	r2,r3,401183c <memcmp+0x74>
 4011804:	21000044 	addi	r4,r4,1
 4011808:	29400044 	addi	r5,r5,1
 401180c:	31fff91e 	bne	r6,r7,40117f4 <__alt_data_end+0xfc0117f4>
 4011810:	0005883a 	mov	r2,zero
 4011814:	f800283a 	ret
 4011818:	20c00017 	ldw	r3,0(r4)
 401181c:	28800017 	ldw	r2,0(r5)
 4011820:	18bfee1e 	bne	r3,r2,40117dc <__alt_data_end+0xfc0117dc>
 4011824:	31bfff04 	addi	r6,r6,-4
 4011828:	21000104 	addi	r4,r4,4
 401182c:	29400104 	addi	r5,r5,4
 4011830:	39bff936 	bltu	r7,r6,4011818 <__alt_data_end+0xfc011818>
 4011834:	303fe91e 	bne	r6,zero,40117dc <__alt_data_end+0xfc0117dc>
 4011838:	003ff506 	br	4011810 <__alt_data_end+0xfc011810>
 401183c:	10c5c83a 	sub	r2,r2,r3
 4011840:	f800283a 	ret

04011844 <__register_exitproc>:
 4011844:	defffa04 	addi	sp,sp,-24
 4011848:	dc000315 	stw	r16,12(sp)
 401184c:	040100f4 	movhi	r16,1027
 4011850:	84127c04 	addi	r16,r16,18928
 4011854:	80c00017 	ldw	r3,0(r16)
 4011858:	dc400415 	stw	r17,16(sp)
 401185c:	dfc00515 	stw	ra,20(sp)
 4011860:	18805217 	ldw	r2,328(r3)
 4011864:	2023883a 	mov	r17,r4
 4011868:	10003726 	beq	r2,zero,4011948 <__register_exitproc+0x104>
 401186c:	10c00117 	ldw	r3,4(r2)
 4011870:	010007c4 	movi	r4,31
 4011874:	20c00e16 	blt	r4,r3,40118b0 <__register_exitproc+0x6c>
 4011878:	1a000044 	addi	r8,r3,1
 401187c:	8800221e 	bne	r17,zero,4011908 <__register_exitproc+0xc4>
 4011880:	18c00084 	addi	r3,r3,2
 4011884:	18c7883a 	add	r3,r3,r3
 4011888:	18c7883a 	add	r3,r3,r3
 401188c:	12000115 	stw	r8,4(r2)
 4011890:	10c7883a 	add	r3,r2,r3
 4011894:	19400015 	stw	r5,0(r3)
 4011898:	0005883a 	mov	r2,zero
 401189c:	dfc00517 	ldw	ra,20(sp)
 40118a0:	dc400417 	ldw	r17,16(sp)
 40118a4:	dc000317 	ldw	r16,12(sp)
 40118a8:	dec00604 	addi	sp,sp,24
 40118ac:	f800283a 	ret
 40118b0:	00800034 	movhi	r2,0
 40118b4:	10800004 	addi	r2,r2,0
 40118b8:	10002626 	beq	r2,zero,4011954 <__register_exitproc+0x110>
 40118bc:	01006404 	movi	r4,400
 40118c0:	d9400015 	stw	r5,0(sp)
 40118c4:	d9800115 	stw	r6,4(sp)
 40118c8:	d9c00215 	stw	r7,8(sp)
 40118cc:	00000000 	call	0 <__reset-0x4000000>
 40118d0:	d9400017 	ldw	r5,0(sp)
 40118d4:	d9800117 	ldw	r6,4(sp)
 40118d8:	d9c00217 	ldw	r7,8(sp)
 40118dc:	10001d26 	beq	r2,zero,4011954 <__register_exitproc+0x110>
 40118e0:	81000017 	ldw	r4,0(r16)
 40118e4:	10000115 	stw	zero,4(r2)
 40118e8:	02000044 	movi	r8,1
 40118ec:	22405217 	ldw	r9,328(r4)
 40118f0:	0007883a 	mov	r3,zero
 40118f4:	12400015 	stw	r9,0(r2)
 40118f8:	20805215 	stw	r2,328(r4)
 40118fc:	10006215 	stw	zero,392(r2)
 4011900:	10006315 	stw	zero,396(r2)
 4011904:	883fde26 	beq	r17,zero,4011880 <__alt_data_end+0xfc011880>
 4011908:	18c9883a 	add	r4,r3,r3
 401190c:	2109883a 	add	r4,r4,r4
 4011910:	1109883a 	add	r4,r2,r4
 4011914:	21802215 	stw	r6,136(r4)
 4011918:	01800044 	movi	r6,1
 401191c:	12406217 	ldw	r9,392(r2)
 4011920:	30cc983a 	sll	r6,r6,r3
 4011924:	4992b03a 	or	r9,r9,r6
 4011928:	12406215 	stw	r9,392(r2)
 401192c:	21c04215 	stw	r7,264(r4)
 4011930:	01000084 	movi	r4,2
 4011934:	893fd21e 	bne	r17,r4,4011880 <__alt_data_end+0xfc011880>
 4011938:	11006317 	ldw	r4,396(r2)
 401193c:	218cb03a 	or	r6,r4,r6
 4011940:	11806315 	stw	r6,396(r2)
 4011944:	003fce06 	br	4011880 <__alt_data_end+0xfc011880>
 4011948:	18805304 	addi	r2,r3,332
 401194c:	18805215 	stw	r2,328(r3)
 4011950:	003fc606 	br	401186c <__alt_data_end+0xfc01186c>
 4011954:	00bfffc4 	movi	r2,-1
 4011958:	003fd006 	br	401189c <__alt_data_end+0xfc01189c>

0401195c <__call_exitprocs>:
 401195c:	defff504 	addi	sp,sp,-44
 4011960:	df000915 	stw	fp,36(sp)
 4011964:	dd400615 	stw	r21,24(sp)
 4011968:	dc800315 	stw	r18,12(sp)
 401196c:	dfc00a15 	stw	ra,40(sp)
 4011970:	ddc00815 	stw	r23,32(sp)
 4011974:	dd800715 	stw	r22,28(sp)
 4011978:	dd000515 	stw	r20,20(sp)
 401197c:	dcc00415 	stw	r19,16(sp)
 4011980:	dc400215 	stw	r17,8(sp)
 4011984:	dc000115 	stw	r16,4(sp)
 4011988:	d9000015 	stw	r4,0(sp)
 401198c:	2839883a 	mov	fp,r5
 4011990:	04800044 	movi	r18,1
 4011994:	057fffc4 	movi	r21,-1
 4011998:	008100f4 	movhi	r2,1027
 401199c:	10927c04 	addi	r2,r2,18928
 40119a0:	12000017 	ldw	r8,0(r2)
 40119a4:	45005217 	ldw	r20,328(r8)
 40119a8:	44c05204 	addi	r19,r8,328
 40119ac:	a0001c26 	beq	r20,zero,4011a20 <__call_exitprocs+0xc4>
 40119b0:	a0800117 	ldw	r2,4(r20)
 40119b4:	15ffffc4 	addi	r23,r2,-1
 40119b8:	b8000d16 	blt	r23,zero,40119f0 <__call_exitprocs+0x94>
 40119bc:	14000044 	addi	r16,r2,1
 40119c0:	8421883a 	add	r16,r16,r16
 40119c4:	8421883a 	add	r16,r16,r16
 40119c8:	84402004 	addi	r17,r16,128
 40119cc:	a463883a 	add	r17,r20,r17
 40119d0:	a421883a 	add	r16,r20,r16
 40119d4:	e0001e26 	beq	fp,zero,4011a50 <__call_exitprocs+0xf4>
 40119d8:	80804017 	ldw	r2,256(r16)
 40119dc:	e0801c26 	beq	fp,r2,4011a50 <__call_exitprocs+0xf4>
 40119e0:	bdffffc4 	addi	r23,r23,-1
 40119e4:	843fff04 	addi	r16,r16,-4
 40119e8:	8c7fff04 	addi	r17,r17,-4
 40119ec:	bd7ff91e 	bne	r23,r21,40119d4 <__alt_data_end+0xfc0119d4>
 40119f0:	00800034 	movhi	r2,0
 40119f4:	10800004 	addi	r2,r2,0
 40119f8:	10000926 	beq	r2,zero,4011a20 <__call_exitprocs+0xc4>
 40119fc:	a0800117 	ldw	r2,4(r20)
 4011a00:	1000301e 	bne	r2,zero,4011ac4 <__call_exitprocs+0x168>
 4011a04:	a0800017 	ldw	r2,0(r20)
 4011a08:	10003226 	beq	r2,zero,4011ad4 <__call_exitprocs+0x178>
 4011a0c:	a009883a 	mov	r4,r20
 4011a10:	98800015 	stw	r2,0(r19)
 4011a14:	00000000 	call	0 <__reset-0x4000000>
 4011a18:	9d000017 	ldw	r20,0(r19)
 4011a1c:	a03fe41e 	bne	r20,zero,40119b0 <__alt_data_end+0xfc0119b0>
 4011a20:	dfc00a17 	ldw	ra,40(sp)
 4011a24:	df000917 	ldw	fp,36(sp)
 4011a28:	ddc00817 	ldw	r23,32(sp)
 4011a2c:	dd800717 	ldw	r22,28(sp)
 4011a30:	dd400617 	ldw	r21,24(sp)
 4011a34:	dd000517 	ldw	r20,20(sp)
 4011a38:	dcc00417 	ldw	r19,16(sp)
 4011a3c:	dc800317 	ldw	r18,12(sp)
 4011a40:	dc400217 	ldw	r17,8(sp)
 4011a44:	dc000117 	ldw	r16,4(sp)
 4011a48:	dec00b04 	addi	sp,sp,44
 4011a4c:	f800283a 	ret
 4011a50:	a0800117 	ldw	r2,4(r20)
 4011a54:	80c00017 	ldw	r3,0(r16)
 4011a58:	10bfffc4 	addi	r2,r2,-1
 4011a5c:	15c01426 	beq	r2,r23,4011ab0 <__call_exitprocs+0x154>
 4011a60:	80000015 	stw	zero,0(r16)
 4011a64:	183fde26 	beq	r3,zero,40119e0 <__alt_data_end+0xfc0119e0>
 4011a68:	95c8983a 	sll	r4,r18,r23
 4011a6c:	a0806217 	ldw	r2,392(r20)
 4011a70:	a5800117 	ldw	r22,4(r20)
 4011a74:	2084703a 	and	r2,r4,r2
 4011a78:	10000b26 	beq	r2,zero,4011aa8 <__call_exitprocs+0x14c>
 4011a7c:	a0806317 	ldw	r2,396(r20)
 4011a80:	2088703a 	and	r4,r4,r2
 4011a84:	20000c1e 	bne	r4,zero,4011ab8 <__call_exitprocs+0x15c>
 4011a88:	89400017 	ldw	r5,0(r17)
 4011a8c:	d9000017 	ldw	r4,0(sp)
 4011a90:	183ee83a 	callr	r3
 4011a94:	a0800117 	ldw	r2,4(r20)
 4011a98:	15bfbf1e 	bne	r2,r22,4011998 <__alt_data_end+0xfc011998>
 4011a9c:	98800017 	ldw	r2,0(r19)
 4011aa0:	153fcf26 	beq	r2,r20,40119e0 <__alt_data_end+0xfc0119e0>
 4011aa4:	003fbc06 	br	4011998 <__alt_data_end+0xfc011998>
 4011aa8:	183ee83a 	callr	r3
 4011aac:	003ff906 	br	4011a94 <__alt_data_end+0xfc011a94>
 4011ab0:	a5c00115 	stw	r23,4(r20)
 4011ab4:	003feb06 	br	4011a64 <__alt_data_end+0xfc011a64>
 4011ab8:	89000017 	ldw	r4,0(r17)
 4011abc:	183ee83a 	callr	r3
 4011ac0:	003ff406 	br	4011a94 <__alt_data_end+0xfc011a94>
 4011ac4:	a0800017 	ldw	r2,0(r20)
 4011ac8:	a027883a 	mov	r19,r20
 4011acc:	1029883a 	mov	r20,r2
 4011ad0:	003fb606 	br	40119ac <__alt_data_end+0xfc0119ac>
 4011ad4:	0005883a 	mov	r2,zero
 4011ad8:	003ffb06 	br	4011ac8 <__alt_data_end+0xfc011ac8>

04011adc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4011adc:	defffd04 	addi	sp,sp,-12
 4011ae0:	df000215 	stw	fp,8(sp)
 4011ae4:	df000204 	addi	fp,sp,8
 4011ae8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4011aec:	0001883a 	nop
 4011af0:	e0bfff17 	ldw	r2,-4(fp)
 4011af4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4011af8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4011afc:	10000226 	beq	r2,zero,4011b08 <_exit+0x2c>
    ALT_SIM_FAIL();
 4011b00:	002af070 	cmpltui	zero,zero,43969
 4011b04:	00000106 	br	4011b0c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4011b08:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4011b0c:	003fff06 	br	4011b0c <__alt_data_end+0xfc011b0c>
